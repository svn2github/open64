#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

# -*- mode:Makefile -*-
# Makefile to create the g++-3 include directory.

#----------------------------------------------------------------------
#  If no command line targets specified, force this one.
#----------------------------------------------------------------------
.MAIN: default
.USE:  default

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build. 
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = ..

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------
.SHELL:  path=/bin/sh

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

LIBIO      = $(BUILD_BASE)/../libio
LIBSTD     = $(BUILD_BASE)/../libstdc++
LIBSTD_STD = $(BUILD_BASE)/../libstdc++/std
LIBSTD_STL = $(BUILD_BASE)/../libstdc++/stl


#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

LIBIO_HEADERS =			\
	PlotFile.h		\
	SFile.h			\
	builtinbuf.h		\
	editbuf.h		\
	fstream.h		\
	indstream.h		\
	iomanip.h		\
	iostream.h		\
	istream.h		\
	ostream.h		\
	parsestream.h		\
	pfstream.h		\
	procbuf.h		\
	stdiostream.h		\
	stream.h		\
	streambuf.h		\
	strfile.h		\
	strstream.h		\


LIBSTD_HEADERS =		\
	cassert			\
	cctype			\
	cerrno			\
	cfloat			\
	ciso646			\
	climits			\
	clocale			\
	cmath			\
	complex			\
	complex.h		\
	csetjmp			\
	csignal			\
	cstdarg			\
	cstddef			\
	cstdio			\
	cstdlib			\
	cstring			\
	ctime			\
	cwchar			\
	cwctype			\
	fstream			\
	iomanip			\
	iosfwd			\
	iostream		\
	stdexcept		\
	stl.h			\
	string			\
	strstream		\
	valarray		\


LIBSTD_STD_HEADERS =		\
	std/bastring.cc		\
	std/bastring.h		\
	std/complext.cc		\
	std/complext.h		\
	std/dcomplex.h		\
	std/fcomplex.h		\
	std/gslice.h		\
	std/gslice_array.h	\
	std/indirect_array.h	\
	std/ldcomplex.h		\
	std/mask_array.h	\
	std/slice.h		\
	std/slice_array.h	\
	std/std_valarray.h	\
	std/straits.h		\
	std/valarray_array.h	\
	std/valarray_array.tcc	\
	std/valarray_meta.h	\


LIBSTD_STL_HEADERS =		\
	algo.h			\
	algobase.h		\
	algorithm		\
	alloc.h			\
	bvector.h		\
	defalloc.h		\
	deque			\
	deque.h			\
	function.h		\
	functional		\
	hash_map		\
	hash_map.h		\
	hash_set		\
	hash_set.h		\
	hashtable.h		\
	heap.h			\
	iterator		\
	iterator.h		\
	list			\
	list.h			\
	map			\
	map.h			\
	memory			\
	multimap.h		\
	multiset.h		\
	numeric			\
	pair.h			\
	pthread_alloc		\
	pthread_alloc.h		\
	queue			\
	rope			\
	rope.h			\
	ropeimpl.h		\
	set			\
	set.h			\
	slist			\
	slist.h			\
	stack			\
	stack.h			\
	stl_algo.h		\
	stl_algobase.h		\
	stl_alloc.h		\
	stl_bvector.h		\
	stl_config.h		\
	stl_construct.h		\
	stl_deque.h		\
	stl_function.h		\
	stl_hash_fun.h		\
	stl_hash_map.h		\
	stl_hash_set.h		\
	stl_hashtable.h		\
	stl_heap.h		\
	stl_iterator.h		\
	stl_list.h		\
	stl_map.h		\
	stl_multimap.h		\
	stl_multiset.h		\
	stl_numeric.h		\
	stl_pair.h		\
	stl_queue.h		\
	stl_raw_storage_iter.h	\
	stl_relops.h		\
	stl_rope.h		\
	stl_set.h		\
	stl_slist.h		\
	stl_stack.h		\
	stl_tempbuf.h		\
	stl_tree.h		\
	stl_uninitialized.h	\
	stl_vector.h		\
	tempbuf.h		\
	tree.h			\
	type_traits.h		\
	utility			\
	vector			\
	vector.h		\


HEADERS = 			\
	$(LIBIO_HEADERS) 	\
	$(LIBSTD_HEADERS) 	\
	$(LIBSTD_STD_HEADERS)	\
	$(LIBSTD_STL_HEADERS)	\


#------------------------------------------------------------
#  Define target
#------------------------------------------------------------

TARGETS = $(HEADERS)


#------------------------------------------------------------
#  "Build" the targets
#------------------------------------------------------------

default: headers

headers:
	if test ! -d std; then mkdir std; fi
	for FILE in $(LIBIO_HEADERS); do				\
	  cp -f $(LIBIO)/$$FILE $$FILE;					\
	  chmod 0644 $$FILE;						\
	done
	for FILE in $(LIBSTD_HEADERS) $(LIBSTD_STD_HEADERS); do		\
	  cp -f $(LIBSTD)/$$FILE $$FILE;				\
	  chmod 0644 $$FILE;						\
	done
	for FILE in $(LIBSTD_STL_HEADERS); do				\
	  cp -f $(LIBSTD_STL)/$$FILE $$FILE;				\
	  chmod 0644 $$FILE;						\
	done

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)
