#Makefile for fsim_sl1

#Common definition
TARGET = soc_sl1
EXEC = pcore
BUILD_ROOT=../..
VPATH=../..
TCL_LIB=tcl_sl

-include $(BUILD_ROOT)/Makefile.gsetup

#Append include directories
INC_DIRS += \
-I$(BUILD_ROOT)/include \
-I$(BUILD_ROOT)/shell/include \
-I$(BUILD_ROOT)/simkernel/include \
-I$(BUILD_ROOT)/base/include \
-I$(BUILD_ROOT)/device_sl1/include \
-I$(BUILD_ROOT)/device/include \
-I$(BUILD_ROOT)/SL1/include \
-I$(BUILD_ROOT)/utils/include \
-I$(BUILD_ROOT)/shell/tclsh/generic \
-I$(BUILD_ROOT)/shell/tclsh/readline \
-I$(BUILD_ROOT)/device_sl1/soc_main/include



#Append compilation flags
#CFLAGS += -DIs_True_On=1 -static -D_RAREG_TO_31=1
CFLAGS += -O0 -g -DIs_True_On=1 -static -D_SIMULATE_LCD=1 -D_SIMULATE_INTERRUPT=1 -D_MEM_DEFAULT_VALUE=0x5a \
-D_WARN_LAYOUT=0 -D_FSIM_SL2_BUILD=0 -D_WARN_SHELL=0 -DNEED_LONG_JMP \
-D_ERROR_ALL_FATAL=0 -D_LOG_LOOP=1 -D_SYSTEM_SIMULATION=1 -D_SYN_DEVICE_TIRGGER=1 -D_THROW_SW_EXCEPTION=1 \
-D_GET_ADDR_MODE=1 -D__SL1ARCH__

#Append extra compilation flags
EXTRA_CFLAGS +=

#Append linker flags
LD_FLAGS += -l$(TCL_LIB) -ltermcap -lpthread -lX11 -lm

#Append library searching path
LIB_DIRS += -L$(BUILD_ROOT)/lib

#Source files
#Source files shared by all architecture
KERNEL_SOURCE = \
simkernel/accesslist.cpp \
simkernel/memory.cpp \
simkernel/symtable.cpp  

SL1_SOURCE = \
SL1/sl1decoder.cpp \
SL1/sl1disasm.cpp \
SL1/sl1exec.cpp \
SL1/sl1fft.cpp \
SL1/sl1viterbi.cpp \
SL1/sl1traceback.cpp \
SL1/sl1instr.cpp \
SL1/sl1instrtable.cpp \
SL1/sl1eventhandler.cpp \
SL1/fix_func/ffe_fsim.cpp \
SL1/fix_func/viterbistage.cpp \
SL1/fix_func/traceback.cpp \
base/bmmu.cpp \
SL1/sl1mmu.cpp \
SL1/sl1reg.cpp \
device_sl1/sl1system.cpp  \
device_sl1/pic.cpp \
device_sl1/serial.cpp \
device_sl1/timer.cpp \
device_sl1/keypad.cpp \
device_sl1/dma.cpp \
device_sl1/sysctrl.cpp \
device_sl1/dev_net_rtl8019.cpp \
device_sl1/net.cpp \
device_sl1/lcd.cpp \
device_sl1/postproc.cpp \
device_sl1/sl1device.cpp \
device_sl1/soc_main/sl1_socmain.cpp \
device_sl1/soc_main/argparser.cpp \
device_sl1/soc_main/simconfig.cpp \
device_sl1/soc_main/sl1_socshell.cpp  

SHELL_SOURCE = \
shell/shellbase.cpp \
shell/tclapi.cpp \
shell/arch4gdb.cpp

UTILS_SOURCE = \
utils/chameleon.cpp \
utils/configfile.cpp \
utils/messg.cpp \
utils/utils.cpp \
utils/elf_reader.cpp \
utils/longjmp.cpp \
utils/tracer.cpp

ALL_SOURCE := $(KERNEL_SOURCE) $(SL1_SOURCE) $(SHELL_SOURCE) $(SLCOM_SOURCE) $(UTILS_SOURCE)
#ALL_SOURCE := $(SHELL_SOURCE) $(UTILS_SOURCE)

#object files. Object files are placed in current directory
OBJS=$(patsubst %.cpp, %.o, $(notdir $(ALL_SOURCE)))

#Target
all: $(TARGET)

#Compilation  and dependency generation rules
__SRC = $(filter %/$(patsubst %.o,%.cpp,$@),$(ALL_SOURCE))
__DEP = $(patsubst %.o,%.d, $@)
$(OBJS):
#       echo INC_DIRS:$(INC_DIRS)
#       @echo Building $@ from $(__SRC) by $(__DEP)
	$(CPP)  $(CFLAGS) $(EXTRA_CFLAGS) $(INC_DIRS) $(BUILD_ROOT)/$(__SRC)
#       @echo Creating dependency file $(__DEP) for $@
	@$(GEN_DEP)  $(CFLAGS) $(EXTRA_CFLAGS) $(INC_DIRS)  $(BUILD_ROOT)/$(__SRC) > $(__DEP)

$(TARGET): $(OBJS) $(BUILD_ROOT)/lib/lib$(TCL_LIB).a $(BUILD_ROOT)/lib/libreadline.a $(BUILD_ROOT)/lib/libhistory.a
	$(LINK) $(LIB_DIRS) -o $(TARGET) $^  $(LD_FLAGS)

#Autogenerated dependencies. Dependency files are placed in current directory too
DEPFILES_ALL=$(patsubst %.o,%.d,$(OBJS))
-include $(DEPFILES_ALL)

clean:
	rm -Rf *.o *.d $(TARGET)

install:
	cp -f $(TARGET) $(INSTALL_DIR)

