#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

# -*- Mode:Makefile -*-

#
#  Makefile.base for IA-64 libgcc.
#


#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build. 
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------
.SHELL:  path=/bin/sh

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------

HOSTDEFS += -D_GNU_SOURCE -DIN_GCC -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED
AS += -x assembler-with-cpp

ifeq ($(BUILD_TARGET), IA32)
    HOSTDEFS += D_IO_MTSAFE_IO
endif

ifeq ($(BUILD_TARGET), IA64)
    HOSTDEFS += -D_NOTHREADS
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

GCC_DIR              = $(BUILD_BASE)/../../g++fe/gnu
GXX_DIR              = $(GCC_DIR)/cp
CONFIG_DIR           = $(GCC_DIR)/config
GCC_IA64_DIR         = $(GCC_DIR)/config/ia64
GNU_INC              = $(BUILD_BASE)/../include

# These are the directories in which to look for source files.

SRC_DIRS =		\
  $(GCC_DIR)		\
  $(GXX_DIR)		\
  $(GCC_IA64_DIR)	\


HEADER_DIRS =	\
  $(GCC_DIR)    \
  $(GXX_DIR)    \
  $(CONFIG_DIR)	\
  $(GNU_INC)	\


ifeq ($(BUILD_TARGET), IA32)
    HEADER_DIRS += $(GCC_DIR)/ia32
endif

ifeq ($(BUILD_TARGET), IA64)
    HEADER_DIRS += $(GCC_DIR)/ia64
endif

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

LIBGCC_C_SRCS =		\
	frame.c		\


LIBGCC_CXX_SRCS =	\
	exception.cc	\
	new.cc		\
	tinfo.cc	\
	tinfo2.cc	\


LIBGCC_SPECIAL_CXX_OBJS = \
	opnew.o		\
	opnewnt.o	\
	opvnew.o	\
	opvnewnt.o	\
	opdel.o		\
	opdelnt.o	\
	opvdel.o	\
	opvdelnt.o	\


LIBGCC_SPECIAL_C_OBJS =	\
	__dummy.o	\
	__gcc_bcmp.o	\
	__main.o	\
	_ashldi3.o	\
	_ashrdi3.o	\
	_bb.o		\
	_clear_cache.o	\
	_cmpdi2.o	\
	_ctors.o	\
	_divdi3.o	\
	_eprintf.o	\
	_exit.o		\
	_ffsdi2.o	\
	_fixdfdi.o	\
	_fixsfdi.o	\
	_fixtfdi.o	\
	_fixunsdfdi.o	\
	_fixunsdfsi.o	\
	_fixunssfdi.o	\
	_fixunssfsi.o	\
	_fixunstfdi.o	\
	_fixunsxfdi.o	\
	_fixunsxfsi.o	\
	_fixxfdi.o	\
	_floatdidf.o	\
	_floatdisf.o	\
	_floatditf.o	\
	_floatdixf.o	\
	_lshrdi3.o	\
	_moddi3.o	\
	_muldi3.o	\
	_negdi2.o	\
	_pure.o		\
	_shtab.o	\
	_trampoline.o	\
	_ucmpdi2.o	\
	_udiv_w_sdiv.o	\
	_udivdi3.o	\
	_udivmoddi4.o	\
	_umoddi3.o	\
	_varargs.o	\
	_eh.o		

# _eh is deliberately out of order, because it's slightly different
# from the others.  (It's the only one that needs to be compiled
# with exceptions turned on.)


LIBGCC_SPECIAL_ASM_OBJS =	\
	__divdf3.o		\
	__divsf3.o		\
	__divdi3.o		\
	__moddi3.o		\
	__udivdi3.o		\
	__umoddi3.o		\
	__divsi3.o		\
	__modsi3.o		\
	__udivsi3.o		\
	__umodsi3.o		\
	__save_stack_nonlocal.o	\
	__nonlocal_goto.o	\


LIBGCC_C_OBJS   = $(LIBGCC_C_SRCS:.c=.o)
LIBGCC_CXX_OBJS = $(LIBGCC_CXX_SRCS:.cc=.o)
LIBGCC_OBJS     = $(LIBGCC_C_OBJS) $(LIBGCC_CXX_OBJS) 			\
                  $(LIBGCC_SPECIAL_C_OBJS) $(LIBGCC_SPECIAL_CXX_OBJS)	\
                  $(LIBGCC_SPECIAL_ASM_OBJS)

CRT_OBJS   = crtbegin.o crtend.o crtbeginS.o crtendS.o
CRT_FLAGS  = -Wf,-finhibit-size-directive -Wf,-fno-inline-functions
CRTS_FLAGS = -DCRTSTUFFS_O -fPIC $(CRT_FLAGS)

#----------------------------------------------------------------------
#  Suffixes and search paths
#
#  .INCLUDES:   These suffixes should be treated specially with resptec
#		to the .PATH.*  targets.  
#  .PATH.h:	Look in these directories for ".h" files.  This forces
#		The directories into the .INCLUDES variable that can 
#		then be added [+=] to the LCINCS variable.  Note that 
#		there must be a ".h" as a prereq for the .INCLUDES 
#		target for this to happen.
#  .PATH:	Look in these directories for source files for .o 
#		targets.
#  .SUFFIXES:	Clean out all those other suffixes used in automatic 
#		rules that just get in the way.  Normally they would 
#		not be a problem, however this makefile uses lists of 
#		.o's with no corresponding list of .c's and .eye's.  
#		For that reason, the smake tries to find an appropriate
#		original source from which it can create the .o.  That 
#		can take a while when the normal list of suffixes is 
#		36 entries long and it must search for each possibility
#		in 37 directories. 
#
#----------------------------------------------------------------------
.SUFFIXES:  
.SUFFIXES:  .o .c .cc .h
.INCLUDES:  .h

.cc.o:
	$(CXXF) -c $<
.cxx.o:
	$(CXXF) -c $<
.c.o:
	$(CCF) -c $<


VPATH    = $(SRC_DIRS)

LCOPTS   = $(STD_COMPILE_OPTS)
LCDEFS   = $(HOSTDEFS) $(TARGDEFS)
LCINCS   = $(addprefix -I, $(HEADER_DIRS))


LC++OPTS = $(STD_COMPILE_OPTS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(addprefix -I, $(HEADER_DIRS))

# setup stuff to build shared or non-shared
GLDOPTS = $(STD_LOAD_OPTS)

LDIRT =


#------------------------------------------------------------
#  Define target
#------------------------------------------------------------
LIBGCC 	 = libgcc.a
TARGETS = $(CRT_OBJS) $(LIBGCC)

#----------------------------------------------------------------------
#  Variables describing additional sources, objects, and libraries
#----------------------------------------------------------------------



#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is 
#  built.
#----------------------------------------------------------------------
.BEGIN:

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is 
#  built.
#----------------------------------------------------------------------
.END:

#----------------------------------------------------------------------
#  Dependencies
#----------------------------------------------------------------------

install: default

default: $(TARGETS)

# Dependency rules for crt objects

crtbegin.o: crtbegin.asm
	$(AS) -c -o crtbegin.o $(GCC_IA64_DIR)/crtbegin.asm

crtend.o: crtend.asm
	$(AS) -c -o crtend.o $(GCC_IA64_DIR)/crtend.asm

crtbeginS.o: crtbegin.asm
	$(AS) -c -o crtbeginS.o -DSHARED -fPIC $(GCC_IA64_DIR)/crtbegin.asm

crtendS.o: crtend.asm
	$(AS) -c -o crtendS.o -DSHARED -fPIC $(GCC_IA64_DIR)/crtend.asm

# Dependency rule for libgcc

$(LIBGCC): $(LIBGCC_OBJS)
	rm -f $(LIBGCC)
	$(AR) rc $(LIBGCC) $(LIBGCC_OBJS)

# Dependency rules for special asm objs.  Each one comes from lib1funcs.asm,
# but each with a different macro definition.

__divdf3.o: lib1funcs.asm
	$(AS) -c -o __divdf3.o -DL__divdf3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__divsf3.o: lib1funcs.asm
	$(AS) -c -o __divsf3.o -DL__divsf3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__divdi3.o: lib1funcs.asm
	$(AS) -c -o __divdi3.o -DL__divdi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__moddi3.o: lib1funcs.asm
	$(AS) -c -o __moddi3.o -D__moddi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__udivdi3.o: lib1funcs.asm
	$(AS) -c -o __udivdi3.o -D__udivdi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__umoddi3.o: lib1funcs.asm
	$(AS) -c -o __umoddi3.o -D__umoddi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__divsi3.o: lib1funcs.asm
	$(AS) -c -o __divsi3.o -D__divsi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__modsi3.o: lib1funcs.asm
	$(AS) -c -o __modsi3.o -D__modsi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__udivsi3.o: lib1funcs.asm
	$(AS) -c -o __udivsi3.o -D__udivsi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__umodsi3.o: lib1funcs.asm
	$(AS) -c -o __umodsi3.o -D__umodsi3 $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__save_stack_nonlocal.o: lib1funcs.asm
	$(AS) -c -o __save_stack_nonlocal.o -D__save_stack_nonlocal $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm
__nonlocal_goto.o: lib1funcs.asm
	$(AS) -c -o __nonlocal_goto.o -D__nonlocal_goto $(CFLAGS) $(GCC_IA64_DIR)/lib1funcs.asm


# Dependency rules for special C++ objs.  Each one comes from new1.cc
# or new2.cc, but each with a different macro definition.

opnew.o: new1.cc
	$(C++F) -DL_op_new    -c $(GXX_DIR)/new1.cc -o opnew.o
opnewnt.o: new1.cc
	$(C++F) -DL_op_newnt  -c $(GXX_DIR)/new1.cc -o opnewnt.o
opvnew.o: new2.cc
	$(C++F) -DL_op_vnew   -c $(GXX_DIR)/new2.cc -o opvnew.o
opvnewnt.o: new2.cc
	$(C++F) -DL_op_vnewnt -c $(GXX_DIR)/new2.cc -o opvnewnt.o
opdel.o: new2.cc
	$(C++F) -DL_op_delete -c $(GXX_DIR)/new2.cc -o opdel.o
opdelnt.o: new2.cc
	$(C++F) -DL_op_delnt  -c $(GXX_DIR)/new2.cc -o opdelnt.o
opvdel.o: new2.cc
	$(C++F) -DL_op_vdel   -c $(GXX_DIR)/new2.cc -o opvdel.o
opvdelnt.o: new2.cc
	$(C++F) -DL_op_vdelnt -c $(GXX_DIR)/new2.cc -o opvdelnt.o


# Dependency rules for special C objs.  Each one comes from libgcc2.c, but 
# each with a different macro definition.

__dummy.o: libgcc2.c
	$(CCF) -DL__dummy      -c $(GCC_DIR)/libgcc2.c -o __dummy.o
__gcc_bcmp.o: libgcc2.c
	$(CCF) -DL__gcc_bcmp   -c $(GCC_DIR)/libgcc2.c -o __gcc_bcmp.o
__main.o: libgcc2.c
	$(CCF) -DL__main       -c $(GCC_DIR)/libgcc2.c -o __main.o
_ashldi3.o: libgcc2.c
	$(CCF) -DL_ashldi3     -c $(GCC_DIR)/libgcc2.c -o _ashldi3.o
_ashrdi3.o: libgcc2.c
	$(CCF) -DL_ashrdi3     -c $(GCC_DIR)/libgcc2.c -o _ashrdi3.o
_bb.o: libgcc2.c
	$(CCF) -DL_bb          -c $(GCC_DIR)/libgcc2.c -o _bb.o
_clear_cache.o: libgcc2.c
	$(CCF) -DL_clear_cache -c $(GCC_DIR)/libgcc2.c -o _clear_cache.o
_cmpdi2.o: libgcc2.c
	$(CCF) -DL_cmpdi2      -c $(GCC_DIR)/libgcc2.c -o _cmpdi2.o
_ctors.o: libgcc2.c
	$(CCF) -DL_ctors       -c $(GCC_DIR)/libgcc2.c -o _ctors.o
_divdi3.o: libgcc2.c
	$(CCF) -DL_divdi3      -c $(GCC_DIR)/libgcc2.c -o _divdi3.o
_eprintf.o: libgcc2.c
	$(CCF) -DL_eprintf     -c $(GCC_DIR)/libgcc2.c -o _eprintf.o
_exit.o: libgcc2.c
	$(CCF) -DL_exit        -c $(GCC_DIR)/libgcc2.c -o _exit.o
_ffsdi2.o: libgcc2.c
	$(CCF) -DL_ffsdi2      -c $(GCC_DIR)/libgcc2.c -o _ffsdi2.o
_fixdfdi.o: libgcc2.c
	$(CCF) -DL_fixdfdi     -c $(GCC_DIR)/libgcc2.c -o _fixdfdi.o
_fixsfdi.o: libgcc2.c
	$(CCF) -DL_fixsfdi     -c $(GCC_DIR)/libgcc2.c -o _fixsfdi.o
_fixtfdi.o: libgcc2.c
	$(CCF) -DL_fixtfdi     -c $(GCC_DIR)/libgcc2.c -o _fixtfdi.o
_fixunsdfdi.o: libgcc2.c
	$(CCF) -DL_fixunsdfdi  -c $(GCC_DIR)/libgcc2.c -o _fixunsdfdi.o
_fixunsdfsi.o: libgcc2.c
	$(CCF) -DL_fixunsdfsi  -c $(GCC_DIR)/libgcc2.c -o _fixunsdfsi.o
_fixunssfdi.o: libgcc2.c
	$(CCF) -DL_fixunssfdi  -c $(GCC_DIR)/libgcc2.c -o _fixunssfdi.o
_fixunssfsi.o: libgcc2.c
	$(CCF) -DL_fixunssfsi  -c $(GCC_DIR)/libgcc2.c -o _fixunssfsi.o
_fixunstfdi.o: libgcc2.c
	$(CCF) -DL_fixunstfdi  -c $(GCC_DIR)/libgcc2.c -o _fixunstfdi.o
_fixunsxfdi.o: libgcc2.c
	$(CCF) -DL_fixunsxfdi  -c $(GCC_DIR)/libgcc2.c -o _fixunsxfdi.o
_fixunsxfsi.o: libgcc2.c
	$(CCF) -DL_fixunsxfsi  -c $(GCC_DIR)/libgcc2.c -o _fixunsxfsi.o
_fixxfdi.o: libgcc2.c
	$(CCF) -DL_fixxfdi     -c $(GCC_DIR)/libgcc2.c -o _fixxfdi.o
_floatdidf.o: libgcc2.c
	$(CCF) -DL_floatdidf   -c $(GCC_DIR)/libgcc2.c -o _floatdidf.o
_floatdisf.o: libgcc2.c
	$(CCF) -DL_floatdisf   -c $(GCC_DIR)/libgcc2.c -o _floatdisf.o
_floatditf.o: libgcc2.c
	$(CCF) -DL_floatditf   -c $(GCC_DIR)/libgcc2.c -o _floatditf.o
_floatdixf.o: libgcc2.c
	$(CCF) -DL_floatdixf   -c $(GCC_DIR)/libgcc2.c -o _floatdixf.o
_lshrdi3.o: libgcc2.c
	$(CCF) -DL_lshrdi3     -c $(GCC_DIR)/libgcc2.c -o _lshrdi3.o
_moddi3.o: libgcc2.c
	$(CCF) -DL_moddi3      -c $(GCC_DIR)/libgcc2.c -o _moddi3.o
_muldi3.o: libgcc2.c
	$(CCF) -DL_muldi3      -c $(GCC_DIR)/libgcc2.c -o _muldi3.o
_negdi2.o: libgcc2.c
	$(CCF) -DL_negdi2      -c $(GCC_DIR)/libgcc2.c -o _negdi2.o
_pure.o: libgcc2.c
	$(CCF) -DL_pure        -c $(GCC_DIR)/libgcc2.c -o _pure.o
_shtab.o: libgcc2.c
	$(CCF) -DL_shtab       -c $(GCC_DIR)/libgcc2.c -o _shtab.o
_trampoline.o: libgcc2.c
	$(CCF) -DL_trampoline  -c $(GCC_DIR)/libgcc2.c -o _trampoline.o
_ucmpdi2.o: libgcc2.c
	$(CCF) -DL_ucmpdi2     -c $(GCC_DIR)/libgcc2.c -o _ucmpdi2.o
_udiv_w_sdiv.o: libgcc2.c
	$(CCF) -DL_udiv_w_sdiv -c $(GCC_DIR)/libgcc2.c -o _udiv_w_sdiv.o
_udivdi3.o: libgcc2.c
	$(CCF) -DL_udivdi3     -c $(GCC_DIR)/libgcc2.c -o _udivdi3.o
_udivmoddi4.o: libgcc2.c
	$(CCF) -DL_udivmoddi4  -c $(GCC_DIR)/libgcc2.c -o _udivmoddi4.o
_umoddi3.o: libgcc2.c
	$(CCF) -DL_umoddi3     -c $(GCC_DIR)/libgcc2.c -o _umoddi3.o
_varargs.o: libgcc2.c
	$(CCF) -DL_varargs     -c $(GCC_DIR)/libgcc2.c -o _varargs.o

_eh.o: libgcc2.c
	$(CCF) -DL_eh -DDONT_USE_BUILTIN_SETJMP -c $(GCC_DIR)/libgcc2.c \
	       -o _eh.o



#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

