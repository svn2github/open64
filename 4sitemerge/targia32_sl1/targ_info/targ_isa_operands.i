# 1 "targ_isa_operands.c"
# 1 "/usa/handong/simplnano/cmplr-open64-merge/targia32_sl1/targ_info//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "targ_isa_operands.c"
# 1 "targ_isa_operands.h" 1
# 153 "targ_isa_operands.h"
typedef signed int INT;
typedef signed int INT32;
typedef signed long long INT64;
typedef signed char mINT8;
typedef signed short mINT16;
typedef signed int mINT32;
typedef signed long long mINT64;
typedef unsigned int UINT;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned char mUINT8;
typedef unsigned short mUINT16;
typedef unsigned int mUINT32;
typedef unsigned long long mUINT64;
typedef int BOOL;
typedef unsigned char mBOOL;
# 180 "targ_isa_operands.h"
# 1 "topcode.h" 1
# 67 "topcode.h"
typedef enum topcode {
  TOP_abs16,
  TOP_add16,
  TOP_add16_i,
  TOP_add16_sp,
  TOP_and16,
  TOP_and16_i,
  TOP_jr16,
  TOP_jr16_lnk,
  TOP_ldw16,
  TOP_ldub16_rs,
  TOP_lduh16_rs,
  TOP_mv16,
  TOP_mv16_i,
  TOP_mvfc16,
  TOP_mvtc16,
  TOP_nop16,
  TOP_inv16,
  TOP_or16,
  TOP_or16_i,
  TOP_pop16,
  TOP_push16,
  TOP_ret16,
  TOP_shll16,
  TOP_shll16_i,
  TOP_shra16,
  TOP_shra16_i,
  TOP_shrl16,
  TOP_shrl16_i,
  TOP_stw16,
  TOP_sub16,
  TOP_sub16_i,
  TOP_xor16,
  TOP_xor16_i,
  TOP_br16_eqz,
  TOP_br16_nez,
  TOP_c3_bitc,
  TOP_c3_bitr,
  TOP_c3_dadd,
  TOP_c3_dmac,
  TOP_c3_dmacn,
  TOP_c3_dmac_a,
  TOP_c3_dmacn_a,
  TOP_c3_dmula,
  TOP_c3_dmulan,
  TOP_c3_dmula_a,
  TOP_c3_dmulan_a,
  TOP_c3_dshll_i,
  TOP_c3_dshrl_i,
  TOP_c3_dsub,
  TOP_c3_ld,
  TOP_c3_lead,
  TOP_c3_mac,
  TOP_c3_mac_a,
  TOP_c3_mac_ar,
  TOP_c3_mac_i,
  TOP_c3_macci,
  TOP_c3_maccr,
  TOP_c3_macd,
  TOP_c3_macn,
  TOP_c3_macn_a,
  TOP_c3_macn_ar,
  TOP_c3_macn_i,
  TOP_c3_mula,
  TOP_c3_mula_a,
  TOP_c3_mula_ar,
  TOP_c3_mula_i,
  TOP_c3_mulaci,
  TOP_c3_mulacr,
  TOP_c3_mulad,
  TOP_c3_mulan,
  TOP_c3_muls,
  TOP_c3_mulus,
  TOP_c3_mvfs,
  TOP_c3_mvfacc,
  TOP_c3_mvfadd,
  TOP_c3_mvfadds,
  TOP_c3_mvts,
  TOP_c3_mvtacc,
  TOP_c3_mvtadd,
  TOP_c3_mvtadds,
  TOP_c3_revb,
  TOP_c3_round,
  TOP_c3_saadd_a,
  TOP_c3_saaddh_a,
  TOP_c3_saadds,
  TOP_c3_saaddsh,
  TOP_c3_saddha,
  TOP_c3_saddha_a,
  TOP_c3_samulh_a,
  TOP_c3_samulsh,
  TOP_c3_sashllh,
  TOP_c3_sasub_a,
  TOP_c3_sasubh_a,
  TOP_c3_sasubs,
  TOP_c3_sasubsh,
  TOP_c3_st,
  TOP_c3_trback,
  TOP_c3_viterbi,
  TOP_c3_fft,
  TOP_c3_fftld,
  TOP_c3_fftst,
  TOP_loop,
  TOP_mvtc,
  TOP_mvfc,
  TOP_mvtc_i,
  TOP_ret,
  TOP_mc_r_ge,
  TOP_mc_r_le,
  TOP_mc_r_lt,
  TOP_mc_r_gt,
  TOP_mc_r_eq,
  TOP_mc_r_ne,
  TOP_mc_abs,
  TOP_mc_zc_le,
  TOP_mc_zc_lt,
  TOP_mc_zc_gt,
  TOP_mc_zc_ge,
  TOP_mc_zc_eq,
  TOP_mc_zc_ne,
  TOP_j,
  TOP_jal,
  TOP_lb,
  TOP_lbu,
  TOP_lh,
  TOP_lhu,
  TOP_lw,
  TOP_lwl,
  TOP_lwr,
  TOP_sb,
  TOP_sh,
  TOP_sw,
  TOP_swl,
  TOP_swr,
  TOP_ll,
  TOP_sc,
  TOP_sync,
  TOP_lwu,
  TOP_ld,
  TOP_ldl,
  TOP_ldr,
  TOP_lld,
  TOP_sd,
  TOP_sdl,
  TOP_sdr,
  TOP_scd,
  TOP_pref,
  TOP_prefx,
  TOP_add,
  TOP_addi,
  TOP_addiu,
  TOP_addu,
  TOP_div,
  TOP_divu,
  TOP_mult,
  TOP_multu,
  TOP_slt,
  TOP_slti,
  TOP_sltiu,
  TOP_sltu,
  TOP_sub,
  TOP_subu,
  TOP_dadd,
  TOP_daddi,
  TOP_daddiu,
  TOP_daddu,
  TOP_ddiv,
  TOP_ddivu,
  TOP_dmult,
  TOP_dmultu,
  TOP_dsub,
  TOP_dsubu,
  TOP_and,
  TOP_andi,
  TOP_lui,
  TOP_nor,
  TOP_or,
  TOP_ori,
  TOP_xor,
  TOP_xori,
  TOP_mfhi,
  TOP_mflo,
  TOP_mthi,
  TOP_mtlo,
  TOP_mc_z_eq,
  TOP_mc_z_ne,
  TOP_mc_z_gt,
  TOP_mc_z_ge,
  TOP_mc_z_lt,
  TOP_mc_z_le,
  TOP_mc_zn_eq,
  TOP_mc_zn_ne,
  TOP_mc_zn_gt,
  TOP_mc_zn_ge,
  TOP_mc_zn_lt,
  TOP_mc_zn_le,
  TOP_depb,
  TOP_extrbs,
  TOP_extrbu,
  TOP_movf,
  TOP_movn,
  TOP_movt,
  TOP_movz,
  TOP_sllv,
  TOP_sll,
  TOP_srav,
  TOP_sra,
  TOP_srlv,
  TOP_srl,
  TOP_dsll,
  TOP_dsll32,
  TOP_dsllv,
  TOP_dsra,
  TOP_dsra32,
  TOP_dsrav,
  TOP_dsrl,
  TOP_dsrl32,
  TOP_dsrlv,
  TOP_beq,
  TOP_bgez,
  TOP_bgezal,
  TOP_bgtz,
  TOP_blez,
  TOP_bltz,
  TOP_bltzal,
  TOP_bne,
  TOP_jalr,
  TOP_jr,
  TOP_break,
  TOP_syscall,
  TOP_teq,
  TOP_teqi,
  TOP_tge,
  TOP_tgei,
  TOP_tgeiu,
  TOP_tgeu,
  TOP_tlt,
  TOP_tlti,
  TOP_tltiu,
  TOP_tltu,
  TOP_tne,
  TOP_tnei,
  TOP_lwc1,
  TOP_ldc1,
  TOP_lwxc1,
  TOP_ldxc1,
  TOP_swc1,
  TOP_sdc1,
  TOP_swxc1,
  TOP_sdxc1,
  TOP_abs_s,
  TOP_abs_d,
  TOP_add_s,
  TOP_add_d,
  TOP_c_f_s,
  TOP_c_f_d,
  TOP_c_t_s,
  TOP_c_t_d,
  TOP_c_un_s,
  TOP_c_un_d,
  TOP_c_or_s,
  TOP_c_or_d,
  TOP_c_eq_s,
  TOP_c_eq_d,
  TOP_c_neq_s,
  TOP_c_neq_d,
  TOP_c_ueq_s,
  TOP_c_ueq_d,
  TOP_c_olg_s,
  TOP_c_olg_d,
  TOP_c_olt_s,
  TOP_c_olt_d,
  TOP_c_uge_s,
  TOP_c_uge_d,
  TOP_c_ult_s,
  TOP_c_ult_d,
  TOP_c_oge_s,
  TOP_c_oge_d,
  TOP_c_ole_s,
  TOP_c_ole_d,
  TOP_c_ugt_s,
  TOP_c_ugt_d,
  TOP_c_ule_s,
  TOP_c_ule_d,
  TOP_c_ogt_s,
  TOP_c_ogt_d,
  TOP_c_sf_s,
  TOP_c_sf_d,
  TOP_c_st_s,
  TOP_c_st_d,
  TOP_c_ngle_s,
  TOP_c_ngle_d,
  TOP_c_gle_s,
  TOP_c_gle_d,
  TOP_c_seq_s,
  TOP_c_seq_d,
  TOP_c_sne_s,
  TOP_c_sne_d,
  TOP_c_ngl_s,
  TOP_c_ngl_d,
  TOP_c_gl_s,
  TOP_c_gl_d,
  TOP_c_lt_s,
  TOP_c_lt_d,
  TOP_c_nlt_s,
  TOP_c_nlt_d,
  TOP_c_nge_s,
  TOP_c_nge_d,
  TOP_c_ge_s,
  TOP_c_ge_d,
  TOP_c_le_s,
  TOP_c_le_d,
  TOP_c_nle_s,
  TOP_c_nle_d,
  TOP_c_ngt_s,
  TOP_c_ngt_d,
  TOP_c_gt_s,
  TOP_c_gt_d,
  TOP_div_s,
  TOP_div_d,
  TOP_mul_s,
  TOP_mul_d,
  TOP_neg_s,
  TOP_neg_d,
  TOP_sub_s,
  TOP_sub_d,
  TOP_sqrt_s,
  TOP_sqrt_d,
  TOP_madd_s,
  TOP_madd_d,
  TOP_msub_s,
  TOP_msub_d,
  TOP_nmadd_s,
  TOP_nmadd_d,
  TOP_nmsub_s,
  TOP_nmsub_d,
  TOP_recip_s,
  TOP_recip_d,
  TOP_rsqrt_s,
  TOP_rsqrt_d,
  TOP_cfc1,
  TOP_ctc1,
  TOP_mfc1,
  TOP_mtc1,
  TOP_dmfc1,
  TOP_dmtc1,
  TOP_mov_s,
  TOP_mov_d,
  TOP_movf_s,
  TOP_movf_d,
  TOP_movn_s,
  TOP_movn_d,
  TOP_movt_s,
  TOP_movt_d,
  TOP_movz_s,
  TOP_movz_d,
  TOP_cvt_d_s,
  TOP_cvt_d_w,
  TOP_cvt_d_l,
  TOP_cvt_l_s,
  TOP_cvt_l_d,
  TOP_cvt_s_d,
  TOP_cvt_s_w,
  TOP_cvt_s_l,
  TOP_cvt_w_s,
  TOP_cvt_w_d,
  TOP_ceil_w_s,
  TOP_ceil_w_d,
  TOP_ceil_l_s,
  TOP_ceil_l_d,
  TOP_floor_w_s,
  TOP_floor_w_d,
  TOP_floor_l_s,
  TOP_floor_l_d,
  TOP_round_w_s,
  TOP_round_w_d,
  TOP_round_l_s,
  TOP_round_l_d,
  TOP_trunc_w_s,
  TOP_trunc_w_d,
  TOP_trunc_l_s,
  TOP_trunc_l_d,
  TOP_bc1f,
  TOP_bc1t,
  TOP_asm,
  TOP_intrncall,
  TOP_spadjust,
  TOP_begin_pregtn,
  TOP_end_pregtn,
  TOP_bwd_bar,
  TOP_fwd_bar,
  TOP_label,
  TOP_c2_mvgr_r2g_h_u,
  TOP_c2_mvgr_r2g_h,
  TOP_c2_mvgr_r2g_w,
  TOP_c2_mvgr_r2g_h_u_i,
  TOP_c2_mvgr_r2g_h_i,
  TOP_c2_mvgr_r2g_w_i,
  TOP_c2_mvgr_r2s,
  TOP_c2_mvgr_g2r_ba_lh,
  TOP_c2_mvgr_g2r_ba_hh,
  TOP_c2_mvgr_g2r_ba_w,
  TOP_c2_mvgr_g2r_lh_i,
  TOP_c2_mvgr_g2r_hh_i,
  TOP_c2_mvgr_g2r_w_i,
  TOP_c2_mvgr_g2r_lh,
  TOP_c2_mvgr_g2r_hh,
  TOP_c2_mvgr_g2r_w,
  TOP_c2_mvgr_g2r_bh,
  TOP_c2_mvgr_g2r_bh_u,
  TOP_c2_mvgr_g2r_bv,
  TOP_c2_mvgr_g2r_bv_u,
  TOP_c2_mvgr_g2r_b4_i,
  TOP_c2_mvgr_g2r_b4,
  TOP_c2_mvgr_g2s,
  TOP_c2_mvgr_s2g,
  TOP_c2_mvgc_c2g,
  TOP_c2_mvgc_g2c,
  TOP_c2_ld_v_b_u,
  TOP_c2_ld_v_b,
  TOP_c2_ld_v_h,
  TOP_c2_ld_v_w,
  TOP_c2_ld_v_sw,
  TOP_c2_ld_v_m_b_u,
  TOP_c2_ld_v_m_b,
  TOP_c2_ld_v_m_h,
  TOP_c2_ld_v_m_w,
  TOP_c2_ld_s_h_u_p,
  TOP_c2_ld_s_h_u,
  TOP_c2_ld_s_h_p,
  TOP_c2_ld_s_h,
  TOP_c2_ld_s_w_p,
  TOP_c2_ld_s_w,
  TOP_c2_ld_s2s_ga_p,
  TOP_c2_ld_s2s_ga,
  TOP_c2_ld_s2s_sa_p,
  TOP_c2_ld_s2s_sa,
  TOP_c2_ld_v2g_b_u,
  TOP_c2_ld_v2g_b,
  TOP_c2_ld_v2g_h_u,
  TOP_c2_ld_v2g_h,
  TOP_c2_ld_v2g_w,
  TOP_c2_st_v_b,
  TOP_c2_st_v_h,
  TOP_c2_st_v_w,
  TOP_c2_st_v_m_b,
  TOP_c2_st_v_m_h,
  TOP_c2_st_v_m_w,
  TOP_c2_st_s_h,
  TOP_c2_st_s_h_p,
  TOP_c2_st_s_w,
  TOP_c2_st_s_w_p,
  TOP_c2_st_g2v_b,
  TOP_c2_st_g2v_h,
  TOP_c2_st_g2v_w,
  TOP_c2_ldi_s_h_u,
  TOP_c2_ldi_s_h,
  TOP_c2_ldi_s_w,
  TOP_c2_ldi_c,
  TOP_c2_ldi_v_b_u,
  TOP_c2_ldi_v_b,
  TOP_c2_ldi_v_h,
  TOP_c2_ldi_v_w,
  TOP_c2_ldi_v_m_b_u,
  TOP_c2_ldi_v_m_b,
  TOP_c2_ldi_v_m_h,
  TOP_c2_ldi_v_m_w,
  TOP_c2_ldi_v2g_b_u,
  TOP_c2_ldi_v2g_b,
  TOP_c2_ldi_v2g_h_u,
  TOP_c2_ldi_v2g_h,
  TOP_c2_ldi_v2g_w,
  TOP_c2_sti_v_b,
  TOP_c2_sti_v_h,
  TOP_c2_sti_v_w,
  TOP_c2_sti_v_m_b,
  TOP_c2_sti_v_m_h,
  TOP_c2_sti_v_m_w,
  TOP_c2_sti_c,
  TOP_c2_sti_s_h,
  TOP_c2_sti_s_w,
  TOP_c2_sti_g2v_b,
  TOP_c2_sti_g2v_h,
  TOP_c2_sti_g2v_w,
  TOP_c2_vadds_h,
  TOP_c2_vadds_w,
  TOP_c2_vadds_p,
  TOP_c2_vadds_h_c,
  TOP_c2_vadds_w_c,
  TOP_c2_vadds_p_c,
  TOP_c2_vsubs_h,
  TOP_c2_vsubs_h_sm,
  TOP_c2_vsubs_h_abs,
  TOP_c2_vsubs_h_abs_sm,
  TOP_c2_vabs_h,
  TOP_c2_vabs_h_sm,
  TOP_c2_vsubs_w,
  TOP_c2_vsubs_w_sm,
  TOP_c2_vsubs_w_abs,
  TOP_c2_vsubs_w_abs_sm,
  TOP_c2_vabs_w,
  TOP_c2_vabs_w_sm,
  TOP_c2_vsubs_p,
  TOP_c2_vsubs_p_sm,
  TOP_c2_vsubs_p_abs,
  TOP_c2_vsubs_p_abs_sm,
  TOP_c2_vabs_p,
  TOP_c2_vabs_p_sm,
  TOP_c2_vabs_acc,
  TOP_c2_vmul_h,
  TOP_c2_vmul_w,
  TOP_c2_vneg_h,
  TOP_c2_vneg_w,
  TOP_c2_vneg_p,
  TOP_c2_vshr_p,
  TOP_c2_vshr_h,
  TOP_c2_vshr_w,
  TOP_c2_vshl_p,
  TOP_c2_vshl_h,
  TOP_c2_vshl_w,
  TOP_c2_vclp,
  TOP_c2_vclp_p,
  TOP_c2_vclp_a,
  TOP_c2_vclp_s,
  TOP_c2_vclp_2,
  TOP_c2_vclp_n,
  TOP_c2_vclg_h_lt_and,
  TOP_c2_vclg_h_lt_or,
  TOP_c2_vclg_h_le_and,
  TOP_c2_vclg_h_le_or,
  TOP_c2_vclg_h_eq_and,
  TOP_c2_vclg_h_eq_or,
  TOP_c2_vclg_h_ge_and,
  TOP_c2_vclg_h_ge_or,
  TOP_c2_vclg_h_gt_and,
  TOP_c2_vclg_h_gt_or,
  TOP_c2_vclg_h_and,
  TOP_c2_vclg_h_or,
  TOP_c2_vclg_h_le,
  TOP_c2_vclg_h_lt,
  TOP_c2_vclg_h_ge,
  TOP_c2_vclg_h_gt,
  TOP_c2_vclg_w_lt_and,
  TOP_c2_vclg_w_lt_or,
  TOP_c2_vclg_w_le_and,
  TOP_c2_vclg_w_le_or,
  TOP_c2_vclg_w_eq_and,
  TOP_c2_vclg_w_eq_or,
  TOP_c2_vclg_w_ge_and,
  TOP_c2_vclg_w_ge_or,
  TOP_c2_vclg_w_gt_and,
  TOP_c2_vclg_w_gt_or,
  TOP_c2_vclg_w_and,
  TOP_c2_vclg_w_or,
  TOP_c2_vclg_w_le,
  TOP_c2_vclg_w_lt,
  TOP_c2_vclg_w_ge,
  TOP_c2_vclg_w_gt,
  TOP_c2_vclg_p_lt_and,
  TOP_c2_vclg_p_lt_or,
  TOP_c2_vclg_p_le_and,
  TOP_c2_vclg_p_le_or,
  TOP_c2_vclg_p_eq_and,
  TOP_c2_vclg_p_eq_or,
  TOP_c2_vclg_p_ge_and,
  TOP_c2_vclg_p_ge_or,
  TOP_c2_vclg_p_gt_and,
  TOP_c2_vclg_p_gt_or,
  TOP_c2_vclg_p_and,
  TOP_c2_vclg_p_or,
  TOP_c2_vclg_p_le,
  TOP_c2_vclg_p_eq,
  TOP_c2_vclg_p_ge,
  TOP_c2_vclg_p_gt,
  TOP_c2_vcmov_h_f,
  TOP_c2_vcmov_h_t,
  TOP_c2_vcmov_w_f,
  TOP_c2_vcmov_w_t,
  TOP_c2_lczero_z,
  TOP_c2_lczero_nz_fw,
  TOP_c2_lczero_nz_bw,
  TOP_c2_vrnd_h,
  TOP_c2_vrnd_w,
  TOP_c2_vspas,
  TOP_c2_vspel_mul_h,
  TOP_c2_vspel_mul_w,
  TOP_c2_vspel_adds,
  TOP_c2_vspel_mac_h,
  TOP_c2_vspel_mac_w,
  TOP_c2_mmul_s123,
  TOP_c2_mmul_h,
  TOP_c2_mmul_w,
  TOP_c2_vmov,
  TOP_c2_vmov_swin,
  TOP_c2_vcopy,
  TOP_c2_vcmpr_h_eq,
  TOP_c2_vcmpr_h_lt,
  TOP_c2_vcmpr_h_le,
  TOP_c2_vcmpr_h_gt,
  TOP_c2_vcmpr_h_ge,
  TOP_c2_vcmpr_w_eq,
  TOP_c2_vcmpr_w_lt,
  TOP_c2_vcmpr_w_le,
  TOP_c2_vcmpr_w_gt,
  TOP_c2_vcmpr_w_ge,
  TOP_c2_sad,
  TOP_c2_satd,
  TOP_c2_intra,
  TOP_c2_intra_0_1_9_14_16,
  TOP_c2_intra_2_3_8_10,
  TOP_c2_intra_4,
  TOP_c2_intra_5_11,
  TOP_c2_intra_12_13,
  TOP_c2_intra_15_17,
  TOP_c2_intra_6,
  TOP_c2_intra_7,
  TOP_c2_mvsel,
  TOP_c2_mvsel_zero_two,
  TOP_c2_bcst_q,
  TOP_c2_bcst_i,
  TOP_c2_vlcs_dc,
  TOP_c2_vlcs_ac,
  TOP_c2_vlcs_wb,
  TOP_c2_add_shl_g_i,
  TOP_c2_add_shr_g_i,
  TOP_c2_add_shl_g,
  TOP_c2_add_shr_g,
  TOP_c2_add_shl_r_h_i,
  TOP_c2_add_shr_r_h_i,
  TOP_c2_add_shl_r_w_i,
  TOP_c2_add_shr_r_w_i,
  TOP_c2_add_shl_r_h,
  TOP_c2_add_shr_r_h,
  TOP_c2_add_shl_r_w,
  TOP_c2_add_shr_r_w,
  TOP_c2_sub_g_abs_i,
  TOP_c2_subs_g_i,
  TOP_c2_sub_g_abs,
  TOP_c2_subs_g,
  TOP_c2_subs_r_h_i,
  TOP_c2_subs_r_w_i,
  TOP_c2_sub_r_abs_h_i,
  TOP_c2_sub_r_abs_w_i,
  TOP_c2_subs_r_h,
  TOP_c2_subs_r_w,
  TOP_c2_sub_r_abs_h,
  TOP_c2_sub_r_abs_w,
  TOP_c2_muls,
  TOP_c2_muls_r_h,
  TOP_c2_muls_r_w,
  TOP_c2_mads,
  TOP_c2_smads,
  TOP_c2_min,
  TOP_c2_max,
  TOP_c2_cmov,
  TOP_c2_mov_g,
  TOP_c2_mov_r,
  TOP_c2_mov_c_i,
  TOP_c2_mov_c,
  TOP_c2_mov_s_i,
  TOP_c2_mov_s,
  TOP_c2_clp,
  TOP_c2_clp_i,
  TOP_c2_chkrng,
  TOP_c2_scond_r_h_wb_eq,
  TOP_c2_scond_r_h_wb_lt,
  TOP_c2_scond_r_h_wb_le,
  TOP_c2_scond_r_h_wb_gt,
  TOP_c2_scond_r_h_wb_ge,
  TOP_c2_scond_r_wb_eq_i,
  TOP_c2_scond_r_wb_lt_i,
  TOP_c2_scond_r_wb_le_i,
  TOP_c2_scond_r_wb_gt_i,
  TOP_c2_scond_r_wb_ge_i,
  TOP_c2_scond_r_w_wb_eq,
  TOP_c2_scond_r_w_wb_lt,
  TOP_c2_scond_r_w_wb_le,
  TOP_c2_scond_r_w_wb_gt,
  TOP_c2_scond_r_w_wb_ge,
  TOP_c2_scond_r_w_wb_eq_i,
  TOP_c2_scond_r_w_wb_lt_i,
  TOP_c2_scond_r_w_wb_le_i,
  TOP_c2_scond_r_w_wb_gt_i,
  TOP_c2_scond_r_w_wb_ge_i,
  TOP_c2_scond_r_h_eq,
  TOP_c2_scond_r_h_lt,
  TOP_c2_scond_r_h_le,
  TOP_c2_scond_r_h_gt,
  TOP_c2_scond_r_h_ge,
  TOP_c2_scond_r_h_eq_i,
  TOP_c2_scond_r_h_lt_i,
  TOP_c2_scond_r_h_le_i,
  TOP_c2_scond_r_h_gt_i,
  TOP_c2_scond_r_h_ge_i,
  TOP_c2_scond_r_w_eq,
  TOP_c2_scond_r_w_lt,
  TOP_c2_scond_r_w_le,
  TOP_c2_scond_r_w_gt,
  TOP_c2_scond_r_w_ge,
  TOP_c2_scond_r_w_eq_i,
  TOP_c2_scond_r_w_lt_i,
  TOP_c2_scond_r_w_le_i,
  TOP_c2_scond_r_w_gt_i,
  TOP_c2_scond_r_w_ge_i,
  TOP_c2_scond_eq,
  TOP_c2_scond_lt,
  TOP_c2_scond_le,
  TOP_c2_scond_gt,
  TOP_c2_scond_ge,
  TOP_c2_scond_eq_i,
  TOP_c2_scond_lt_i,
  TOP_c2_scond_le_i,
  TOP_c2_scond_gt_i,
  TOP_c2_scond_ge_i,
  TOP_c2_bop_ls,
  TOP_c2_bop_rs,
  TOP_c2_bop_and,
  TOP_c2_bop_or,
  TOP_c2_bop_xor,
  TOP_c2_bop_ls_i,
  TOP_c2_bop_rs_i,
  TOP_c2_bop_and_i,
  TOP_c2_bop_or_i,
  TOP_c2_bop_xor_i,
  TOP_c2_bdep_l,
  TOP_c2_bdep_m,
  TOP_c2_bxtr_u_l,
  TOP_c2_bxtr_s_l,
  TOP_c2_bxtr_u_m,
  TOP_c2_bxtr_s_m,
  TOP_c2_sum4_c,
  TOP_c2_sum4_g,
  TOP_c2_sum4_sw,
  TOP_c2_sum4_r,
  TOP_c2_med,
  TOP_c2_gsums,
  TOP_c2_wrap,
  TOP_c2_clzob_zd,
  TOP_c2_clzob_za,
  TOP_c2_clzob_od,
  TOP_c2_clzob_oa,
  TOP_c2_clzob_zd_i,
  TOP_c2_clzob_za_i,
  TOP_c2_clzob_od_i,
  TOP_c2_clzob_oa_i,
  TOP_c2_thctrl_lock,
  TOP_c2_thctrl_unlock,
  TOP_c2_thctrl_deact,
  TOP_c2_thctrl_act,
  TOP_c2_thctrl_mode4,
  TOP_c2_thctrl_mode5,
  TOP_c2_thctrl_mode6,
  TOP_c2_joint,
  TOP_c2_thread_major,
  TOP_c2_thread_minor,
  TOP_c2_sum3_saddr,
  TOP_peripheral_rw_begin,
  TOP_peripheral_rw_end,
  TOP_c2_br_f,
  TOP_c2_br_t,
  TOP_c2_fork_m,
  TOP_c2_fork_n,
  TOP_c2_macro,
  TOP_nop,
  TOP_noop,
  TOP_UNDEFINED
} TOP;

typedef mUINT16 mTOP;



extern const char* TOP_Name(TOP topcode);
# 181 "targ_isa_operands.h" 2
# 1 "targ_isa_registers.h" 1
# 213 "targ_isa_registers.h"
# 1 "targ_isa_subset.h" 1
# 65 "targ_isa_subset.h"
typedef enum {
  ISA_SUBSET_MIPS4,
  ISA_SUBSET_UNDEFINED,
  ISA_SUBSET_MIN=ISA_SUBSET_MIPS4,
  ISA_SUBSET_MAX=ISA_SUBSET_MIPS4
} ISA_SUBSET;
extern ISA_SUBSET ISA_SUBSET_Value;

extern const char* ISA_SUBSET_Name( ISA_SUBSET subset );
extern INT ISA_SUBSET_Member( ISA_SUBSET subset,
                              TOP opcode );
# 214 "targ_isa_registers.h" 2





typedef enum {
  ISA_REGISTER_CLASS_UNDEFINED,
  ISA_REGISTER_CLASS_integer,
  ISA_REGISTER_CLASS_float,
  ISA_REGISTER_CLASS_fcc,
  ISA_REGISTER_CLASS_hilo,
  ISA_REGISTER_CLASS_cop_creg,
  ISA_REGISTER_CLASS_cop_breg,
  ISA_REGISTER_CLASS_cop_vreg,
  ISA_REGISTER_CLASS_cop_sreg,
  ISA_REGISTER_CLASS_float_odd,
  ISA_REGISTER_CLASS_copc,
  ISA_REGISTER_CLASS_control,
  ISA_REGISTER_CLASS_special,
  ISA_REGISTER_CLASS_loop,
  ISA_REGISTER_CLASS_accum,
  ISA_REGISTER_CLASS_addr,
  ISA_REGISTER_CLASS_addr_size,
  ISA_REGISTER_CLASS_c2accum,
  ISA_REGISTER_CLASS_c2acc_ctrl,
  ISA_REGISTER_CLASS_c2mvsel,
  ISA_REGISTER_CLASS_c2vlcs,
  ISA_REGISTER_CLASS_c2movpat,
  ISA_REGISTER_CLASS_MIN = ISA_REGISTER_CLASS_integer,
  ISA_REGISTER_CLASS_MAX = ISA_REGISTER_CLASS_c2movpat,
  ISA_REGISTER_CLASS_COUNT = ISA_REGISTER_CLASS_MAX - ISA_REGISTER_CLASS_MIN + 1
} ISA_REGISTER_CLASS;

typedef mUINT8 mISA_REGISTER_CLASS;
# 259 "targ_isa_registers.h"
typedef struct {
  mUINT8 isa_mask;
  mUINT8 min_regnum;
  mUINT8 max_regnum;
  mUINT8 bit_size;
  mBOOL can_store;
  mBOOL multiple_save;
  const char *name;
  const char *reg_name[(31)+1];
} ISA_REGISTER_CLASS_INFO;

typedef enum {
  ISA_REGISTER_SUBCLASS_UNDEFINED,
  ISA_REGISTER_SUBCLASS_MIN = 1,
  ISA_REGISTER_SUBCLASS_MAX = 0,
  ISA_REGISTER_SUBCLASS_COUNT = ISA_REGISTER_SUBCLASS_MAX - ISA_REGISTER_SUBCLASS_MIN + 1
} ISA_REGISTER_SUBCLASS;

typedef mUINT8 mISA_REGISTER_SUBCLASS;






typedef struct {
  const char *name;
  mISA_REGISTER_CLASS rclass;
  mUINT8 count;
  mUINT8 members[(31)+1];
  const char *reg_name[(31)+1];
} ISA_REGISTER_SUBCLASS_INFO;

static __inline const ISA_REGISTER_CLASS_INFO *ISA_REGISTER_CLASS_Info(
  ISA_REGISTER_CLASS rc
)
{
  extern const ISA_REGISTER_CLASS_INFO ISA_REGISTER_CLASS_info[];
  extern mUINT8 ISA_REGISTER_CLASS_info_index[];
  INT index = ISA_REGISTER_CLASS_info_index[(INT)rc];
  return &ISA_REGISTER_CLASS_info[index];
}

static __inline INT ISA_REGISTER_CLASS_INFO_First_Reg(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->min_regnum;
}

static __inline INT ISA_REGISTER_CLASS_INFO_Last_Reg(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->max_regnum;
}

static __inline INT ISA_REGISTER_CLASS_INFO_Bit_Size(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->bit_size;
}

static __inline BOOL ISA_REGISTER_CLASS_INFO_Can_Store(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->can_store;
}

static __inline BOOL ISA_REGISTER_CLASS_INFO_Multiple_Save(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->multiple_save;
}

static __inline const char *ISA_REGISTER_CLASS_INFO_Name(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->name;
}

static __inline const char *ISA_REGISTER_CLASS_INFO_Reg_Name(
  const ISA_REGISTER_CLASS_INFO *info,
  INT reg_index
)
{
  return info->reg_name[reg_index];
}

static __inline const ISA_REGISTER_SUBCLASS_INFO *ISA_REGISTER_SUBCLASS_Info(
  ISA_REGISTER_SUBCLASS sc
)
{
  extern const ISA_REGISTER_SUBCLASS_INFO ISA_REGISTER_SUBCLASS_info[];
  return &ISA_REGISTER_SUBCLASS_info[sc];
}

static __inline const char *ISA_REGISTER_SUBCLASS_INFO_Name(
  const ISA_REGISTER_SUBCLASS_INFO *info
)
{
  return info->name;
}

static __inline ISA_REGISTER_CLASS ISA_REGISTER_SUBCLASS_INFO_Class(
  const ISA_REGISTER_SUBCLASS_INFO *info
)
{
  return (ISA_REGISTER_CLASS)info->rclass;
}

static __inline INT ISA_REGISTER_SUBCLASS_INFO_Count(
  const ISA_REGISTER_SUBCLASS_INFO *info
)
{
  return info->count;
}

static __inline UINT ISA_REGISTER_SUBCLASS_INFO_Member(
  const ISA_REGISTER_SUBCLASS_INFO *info,
  INT n
)
{
  return info->members[n];
}

static __inline const char *ISA_REGISTER_SUBCLASS_INFO_Reg_Name(
  const ISA_REGISTER_SUBCLASS_INFO *info,
  INT n
)
{
  return info->reg_name[n];
}

extern void ISA_REGISTER_Initialize(void);
# 182 "targ_isa_operands.h" 2
# 1 "targ_isa_enums.h" 1
# 80 "targ_isa_enums.h"
typedef enum {
 EC_UNDEFINED,
 EC_pfhint,
 EC_MAX
} ISA_ENUM_CLASS;

typedef enum {
 ECV_UNDEFINED,
 ECV_pfhint_L2_store,
 ECV_pfhint_L2_load,
 ECV_pfhint_L1_store,
 ECV_pfhint_L1_load,
 ECV_MAX
} ISA_ENUM_CLASS_VALUE;

typedef struct {
  char *name;
  ISA_ENUM_CLASS_VALUE first;
  ISA_ENUM_CLASS_VALUE last;
} ISA_ENUM_CLASS_INFO;
extern const ISA_ENUM_CLASS_INFO ISA_ENUM_CLASS_info[];

typedef struct {
  char *name;
  INT intval;
} ISA_ENUM_CLASS_VALUE_INFO;
extern const ISA_ENUM_CLASS_VALUE_INFO ISA_ENUM_CLASS_VALUE_info[];

static __inline const char * ISA_EC_Name (ISA_ENUM_CLASS ec)
{
  return ISA_ENUM_CLASS_info[ec].name;
}

static __inline ISA_ENUM_CLASS_VALUE ISA_EC_First_Value (ISA_ENUM_CLASS ec)
{
  return ISA_ENUM_CLASS_info[ec].first;
}

static __inline ISA_ENUM_CLASS_VALUE ISA_EC_Last_Value (ISA_ENUM_CLASS ec)
{
  return ISA_ENUM_CLASS_info[ec].last;
}

static __inline const char * ISA_ECV_Name (ISA_ENUM_CLASS_VALUE ecv)
{
  return ISA_ENUM_CLASS_VALUE_info[ecv].name;
}

static __inline INT ISA_ECV_Intval (ISA_ENUM_CLASS_VALUE ecv)
{
  return ISA_ENUM_CLASS_VALUE_info[ecv].intval;
}
# 183 "targ_isa_operands.h" 2
# 1 "targ_isa_lits.h" 1
# 79 "targ_isa_lits.h"
typedef enum {
 LC_UNDEFINED,
 LC_simm16,
 LC_uimm16,
 LC_uimm5,
 LC_pcrel16,
 LC_pc26,
 LC_uimm1,
 LC_uimm2,
 LC_uimm3,
 LC_uimm4,
 LC_uimm7,
 LC_uimm8,
 LC_uimm9,
 LC_uimm10,
 LC_uimm11,
 LC_uimm14,
 LC_uimm15,
 LC_uid2,
 LC_uid3,
 LC_uia1,
 LC_uia3,
 LC_uib1,
 LC_uib3,
 LC_uic1,
 LC_uic3,
 LC_simm5,
 LC_pc5,
 LC_simm10,
 LC_MAX
} ISA_LIT_CLASS;

typedef struct {
  struct { INT64 min; INT64 max; } range[2];
  mUINT8 num_ranges;
  mBOOL is_signed;
  const char *name;
} ISA_LIT_CLASS_INFO;

static __inline const char * ISA_LC_Name (ISA_LIT_CLASS lc)
{
  extern const ISA_LIT_CLASS_INFO ISA_LIT_CLASS_info[];
  return ISA_LIT_CLASS_info[lc].name;
}

static __inline INT64 ISA_LC_Min (ISA_LIT_CLASS lc)
{
  extern const ISA_LIT_CLASS_INFO ISA_LIT_CLASS_info[];
  return ISA_LIT_CLASS_info[lc].range[0].min;
}

static __inline INT64 ISA_LC_Max (ISA_LIT_CLASS lc)
{
  extern const ISA_LIT_CLASS_INFO ISA_LIT_CLASS_info[];
  return ISA_LIT_CLASS_info[lc].range[0].max;
}

static __inline BOOL ISA_LC_Is_Signed (ISA_LIT_CLASS lc)
{
  extern const ISA_LIT_CLASS_INFO ISA_LIT_CLASS_info[];
  return ISA_LIT_CLASS_info[lc].is_signed;
}

static __inline BOOL ISA_LC_Value_In_Class (INT64 val, ISA_LIT_CLASS lc)
{
  extern const ISA_LIT_CLASS_INFO ISA_LIT_CLASS_info[];
  const ISA_LIT_CLASS_INFO *plc = ISA_LIT_CLASS_info + lc;
  INT i;
  for (i = 1; i <= plc->num_ranges; ++i) {
    INT64 min = plc->range[i].min;
    INT64 max = plc->range[i].max;
    if ( plc->is_signed ) {
      if (val >= min && val <= max) return ((BOOL) 1);
    } else {
      if ((UINT64)val >= (UINT64)min && (UINT64)val <= (UINT64)max) return ((BOOL) 1);
    }
  }
  return ((BOOL) 0);
}
# 184 "targ_isa_operands.h" 2

typedef enum {
  OU_UNDEFINED,
  OU_predicate,
  OU_base,
  OU_offset,
  OU_target,
  OU_storeval,
  OU_opnd1,
  OU_opnd2,
  OU_opnd3,
  OU_opnd4,
  OU_opnd5,
  OU_opnd6,
  OU_opnd7,
  OU_opnd8,
  OU_opnd9,
  OU_maddend,
  OU_pos,
  OU_width,
  OU_MAX = 17
} ISA_OPERAND_USE;

typedef struct {
  mUINT8 rclass;
  mUINT8 rsubclass;
  mUINT8 lclass;
  mUINT8 eclass;
  mUINT8 size;
  mUINT8 flags;
} ISA_OPERAND_VALTYP;

enum {
  ISA_OPERAND_max_operands=9,
  ISA_OPERAND_max_results=4
};

typedef struct {
  mUINT8 opnds;
  mUINT8 opnd[ISA_OPERAND_max_operands];
  mUINT8 ouse[ISA_OPERAND_max_operands];
  mUINT8 results;
  mUINT8 result[ISA_OPERAND_max_results];
} ISA_OPERAND_INFO;

static __inline const ISA_OPERAND_INFO *ISA_OPERAND_Info(TOP topcode)
{
  extern const mUINT8 ISA_OPERAND_info_index[];
  extern const ISA_OPERAND_INFO ISA_OPERAND_info[];
  INT index = ISA_OPERAND_info_index[(INT)topcode];
  return &ISA_OPERAND_info[index];
}

static __inline INT ISA_OPERAND_INFO_Operands(const ISA_OPERAND_INFO *oinfo)
{
  return oinfo->opnds;
}

static __inline const ISA_OPERAND_VALTYP *ISA_OPERAND_INFO_Operand(
  const ISA_OPERAND_INFO *oinfo,
  INT opnd)
{
  extern const ISA_OPERAND_VALTYP ISA_OPERAND_operand_types[];
  INT index = oinfo->opnd[opnd];
  return &ISA_OPERAND_operand_types[index];
}

static __inline INT ISA_OPERAND_INFO_Results(const ISA_OPERAND_INFO *oinfo)
{
  return oinfo->results;
}

static __inline const ISA_OPERAND_VALTYP *ISA_OPERAND_INFO_Result(
  const ISA_OPERAND_INFO *oinfo,
  INT result)
{
  extern const ISA_OPERAND_VALTYP ISA_OPERAND_operand_types[];
  INT index = oinfo->result[result];
  return &ISA_OPERAND_operand_types[index];
}

static __inline ISA_REGISTER_CLASS ISA_OPERAND_VALTYP_Register_Class(
  const ISA_OPERAND_VALTYP *otype)
{
  return (ISA_REGISTER_CLASS)otype->rclass;
}

static __inline ISA_REGISTER_SUBCLASS ISA_OPERAND_VALTYP_Register_Subclass(
  const ISA_OPERAND_VALTYP *otype)
{
  return (ISA_REGISTER_SUBCLASS)otype->rsubclass;
}

static __inline ISA_LIT_CLASS ISA_OPERAND_VALTYP_Literal_Class(const ISA_OPERAND_VALTYP *otype)
{
  return (ISA_LIT_CLASS)otype->lclass;
}

static __inline ISA_ENUM_CLASS ISA_OPERAND_VALTYP_Enum_Class(
  const ISA_OPERAND_VALTYP *otype)
{
  return (ISA_ENUM_CLASS)otype->eclass;
}

static __inline INT ISA_OPERAND_VALTYP_Size(const ISA_OPERAND_VALTYP *otype)
{
  return otype->size;
}

static __inline BOOL ISA_OPERAND_VALTYP_Is_Register(const ISA_OPERAND_VALTYP *otype)
{
  return (otype->flags & 0x01) != 0;
}

static __inline BOOL ISA_OPERAND_VALTYP_Is_Literal(const ISA_OPERAND_VALTYP *otype)
{
  return (otype->lclass != LC_UNDEFINED);
}

static __inline BOOL ISA_OPERAND_VALTYP_Is_Enum(const ISA_OPERAND_VALTYP *otype)
{
  return (otype->eclass != EC_UNDEFINED);
}

static __inline BOOL ISA_OPERAND_VALTYP_Is_Signed(const ISA_OPERAND_VALTYP *otype)
{
  return (otype->flags & 0x02) != 0;
}


static __inline BOOL ISA_OPERAND_VALTYP_Is_FPU_Int(const ISA_OPERAND_VALTYP *otype)
{
  return ((BOOL) 0);
}

static __inline BOOL ISA_OPERAND_VALTYP_Is_PCRel(const ISA_OPERAND_VALTYP *otype)
{
  return (otype->flags & 0x08) != 0;
}

static __inline ISA_OPERAND_USE ISA_OPERAND_INFO_Use(
  const ISA_OPERAND_INFO *oinfo,
  INT opnd)
{
  return (ISA_OPERAND_USE)oinfo->ouse[opnd];
}

static __inline BOOL ISA_OPERAND_Any_Use(ISA_OPERAND_USE ouse)
{
  return (0x0000000000038ffdULL & (1ULL << ouse)) != 0;
}

extern INT TOP_Immediate_Operand(TOP topcode, ISA_LIT_CLASS *lclass);

extern INT TOP_Relocatable_Operand(TOP topcode, ISA_LIT_CLASS *lclass);

extern BOOL TOP_Can_Have_Immediate(INT64 value, TOP topcode);

extern INT TOP_Find_Operand_Use(TOP topcode, ISA_OPERAND_USE use);

extern INT TOP_Find_Operand_Uses(TOP topcode, INT *out, ISA_OPERAND_USE use);

extern void TOP_Operand_Uses(TOP topcode, ISA_OPERAND_USE *uses);
# 2 "targ_isa_operands.c" 2

# 1 "targ_isa_properties.h" 1
# 52 "targ_isa_properties.h"
extern const mUINT64 ISA_PROPERTIES_flags[];
# 4 "targ_isa_operands.c" 2



const ISA_OPERAND_VALTYP ISA_OPERAND_operand_types[] = {
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      1, EC_UNDEFINED, 16, 0x02 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      2, EC_UNDEFINED, 16, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      3, EC_UNDEFINED, 5, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      4, EC_UNDEFINED, 16, 0x02 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      5, EC_UNDEFINED, 26, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      6, EC_UNDEFINED, 1, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      7, EC_UNDEFINED, 2, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      8, EC_UNDEFINED, 3, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      9, EC_UNDEFINED, 4, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     10, EC_UNDEFINED, 7, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     11, EC_UNDEFINED, 8, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     12, EC_UNDEFINED, 9, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     13, EC_UNDEFINED, 10, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     14, EC_UNDEFINED, 11, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     15, EC_UNDEFINED, 14, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     16, EC_UNDEFINED, 15, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     17, EC_UNDEFINED, 2, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     18, EC_UNDEFINED, 3, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     19, EC_UNDEFINED, 1, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     20, EC_UNDEFINED, 3, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     21, EC_UNDEFINED, 1, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     22, EC_UNDEFINED, 3, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     23, EC_UNDEFINED, 1, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     24, EC_UNDEFINED, 3, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     25, EC_UNDEFINED, 5, 0x02 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     26, EC_UNDEFINED, 5, 0x00 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
     27, EC_UNDEFINED, 10, 0x02 },
  { ISA_REGISTER_CLASS_integer , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 64, 0x03 },
  { ISA_REGISTER_CLASS_float , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 64, 0x03 },
  { ISA_REGISTER_CLASS_fcc , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x01 },
  { ISA_REGISTER_CLASS_hilo , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 64, 0x03 },
  { ISA_REGISTER_CLASS_special , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x03 },
  { ISA_REGISTER_CLASS_accum , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x03 },
  { ISA_REGISTER_CLASS_addr , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x03 },
  { ISA_REGISTER_CLASS_addr_size , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x03 },
  { ISA_REGISTER_CLASS_cop_creg , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x01 },
  { ISA_REGISTER_CLASS_cop_breg , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x01 },
  { ISA_REGISTER_CLASS_cop_vreg , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 64, 0x03 },
  { ISA_REGISTER_CLASS_cop_sreg , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 64, 0x03 },
  { ISA_REGISTER_CLASS_copc , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x01 },
  { ISA_REGISTER_CLASS_control , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 32, 0x03 },
  { ISA_REGISTER_CLASS_loop , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 4, 0x03 },
  { ISA_REGISTER_CLASS_accum , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 4, 0x03 },
  { ISA_REGISTER_CLASS_addr , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 8, 0x03 },
  { ISA_REGISTER_CLASS_c2accum , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x03 },
  { ISA_REGISTER_CLASS_c2acc_ctrl, ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x03 },
  { ISA_REGISTER_CLASS_c2mvsel , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x03 },
  { ISA_REGISTER_CLASS_c2vlcs , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x03 },
  { ISA_REGISTER_CLASS_c2movpat , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_UNDEFINED, 1, 0x03 },
  { ISA_REGISTER_CLASS_UNDEFINED , ISA_REGISTER_SUBCLASS_UNDEFINED ,
      0, EC_pfhint, 8, 0x00 },
};

const ISA_OPERAND_INFO ISA_OPERAND_info[] = {
  { 5, { 33, 7, 33, 7, 6, -1, -1, -1, -1 },
       { 2, 0, 2, 0, 0, 0, 0, 0, 0 },
    3, { 27, 33, 33, -1 } },
  { 3, { 40, 2, 8, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 40, -1, -1, -1 } },
  { 3, { 27, 2, 8, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 4, { 7, 27, 27, 32, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 6, { 7, 27, 27, 5, 32, 32, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 32, 32, -1, -1 } },
  { 3, { 7, 27, 27, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 3, { 7, 27, 27, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 32, 32, -1, -1 } },
  { 9, { 7, 33, 7, 33, 7, 5, 6, 32, 32 },
       { 0, 2, 0, 2, 0, 0, 0, 0, 0 },
    4, { 32, 32, 33, 33 } },
  { 7, { 7, 33, 7, 33, 7, 6, 32, -1, -1 },
       { 0, 2, 0, 2, 0, 0, 0, 0, 0 },
    3, { 32, 33, 33, -1 } },
  { 6, { 7, 33, 7, 33, 7, 6, -1, -1, -1 },
       { 0, 2, 0, 2, 0, 0, 0, 0, 0 },
    3, { 32, 33, 33, -1 } },
  { 6, { 7, 33, 7, 33, 7, 6, -1, -1, -1 },
       { 0, 2, 0, 2, 0, 0, 0, 0, 0 },
    4, { 32, 32, 33, 33 } },
  { 3, { 27, 2, 2, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 5, { 33, 5, 7, 7, 6, -1, -1, -1, -1 },
       { 2, 3, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 33, -1, -1 } },
  { 2, { 32, 6, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 5, { 7, 27, 33, 7, 6, -1, -1, -1, -1 },
       { 0, 0, 2, 0, 0, 0, 0, 0, 0 },
    2, { 32, 33, -1, -1 } },
  { 6, { 7, 27, 33, 7, 6, 32, -1, -1, -1 },
       { 0, 0, 2, 0, 0, 0, 0, 0, 0 },
    2, { 32, 33, -1, -1 } },
  { 4, { 7, 27, 26, 32, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 3, { 7, 27, 26, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 2, { 32, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 33, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 34, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 33, -1, -1, -1 } },
  { 3, { 27, 2, 33, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 34, 33, -1, -1 } },
  { 2, { 27, 24, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 2, 6, 32, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 5, { 7, 27, 8, 5, 32, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 32, -1, -1, -1 } },
  { 7, { 7, 33, 7, 8, 5, 6, 32, -1, -1 },
       { 0, 2, 0, 0, 0, 0, 0, 0, 0 },
    2, { 32, 33, -1, -1 } },
  { 3, { 27, 27, 2, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 6, { 27, 33, 5, 7, 7, 6, -1, -1, -1 },
       { 5, 2, 3, 0, 0, 0, 0, 0, 0 },
    1, { 33, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 31, -1, -1, -1 } },
  { 2, { 31, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 8, 3, 40, -1, -1, -1, -1, -1, -1 },
       { 0, 4, 6, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 40, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 40, -1, -1, -1 } },
  { 1, { 12, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 40, -1, -1, -1 } },
  { 3, { 27, 27, 2, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 31, 27, -1, -1 } },
  { 3, { 27, 27, 25, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 4, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 24, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 2, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 40, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 4, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 40, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 4, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 40, -1, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 9, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 3, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 27, 9, -1, -1, -1, -1, -1, -1 },
       { 5, 2, 3, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 7, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 0, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 0, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 3, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 27, 0, -1, -1, -1, -1, -1, -1 },
       { 5, 2, 3, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 3, { 49, 27, 0, -1, -1, -1, -1, -1, -1 },
       { 0, 2, 3, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 30, -1, -1, -1 } },
  { 1, { 30, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 30, -1, -1, -1 } },
  { 2, { 28, 28, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 29, -1, -1, -1 } },
  { 2, { 27, 29, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 28, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 2, { 28, 29, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 2, { 28, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 0, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 3, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 3, { 28, 27, 0, -1, -1, -1, -1, -1, -1 },
       { 5, 2, 3, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 3, { 28, 27, 27, -1, -1, -1, -1, -1, -1 },
       { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 28, 28, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 1, { 28, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 3, { 28, 28, 28, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 15, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 3, { 27, 27, 3, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 4, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 3, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 4, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 29, 3, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 4, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 4, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 4, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 40, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 4, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 40, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 4, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 4, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 40, -1, -1, -1 } },
  { 1, { 40, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 4, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 40, -1, -1, -1 } },
  { 3, { 27, 27, 1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 3, { 27, 0, 1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 28, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 27, 0, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 2, 2, -1, -1, -1, -1, -1, -1 },
       { 6, 16, 17, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 4, { 27, 27, 2, 2, -1, -1, -1, -1, -1 },
       { 6, 7, 16, 17, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 37, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 39, -1, -1 } },
  { 2, { 37, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 38, -1, -1, -1 } },
  { 1, { 38, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 38, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 38, -1, -1, -1 } },
  { 1, { 38, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 38, -1, -1, -1 } },
  { 1, { 38, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 38, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 27, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 1, { 35, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 35, -1, -1, -1 } },
  { 3, { 27, 35, 35, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 48, -1, -1 } },
  { 2, { 27, 35, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 27, 35, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 4, { 37, 27, 35, 37, -1, -1, -1, -1, -1 },
       { 5, 2, 0, 5, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 3, { 37, 27, 35, -1, -1, -1, -1, -1, -1 },
       { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 14, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 14, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 35, -1, -1, -1 } },
  { 2, { 13, 35, -1, -1, -1, -1, -1, -1, -1 },
       { 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 13, 35, -1, -1, -1, -1, -1, -1, -1 },
       { 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 1, { 15, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 37, 13, 35, -1, -1, -1, -1, -1, -1 },
       { 5, 3, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 4, { 37, 13, 35, 37, -1, -1, -1, -1, -1 },
       { 5, 3, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 15, -1, -1, -1, -1, -1, -1, -1 },
       { 5, 3, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 14, -1, -1, -1, -1, -1, -1, -1 },
       { 5, 3, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 35, 14, -1, -1, -1, -1, -1, -1, -1 },
       { 5, 3, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 4, { 37, 37, 5, 7, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 6, { 37, 37, 5, 7, 37, 37, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 5, { 37, 37, 5, 7, 35, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 7, { 37, 37, 5, 7, 37, 37, 35, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 4, { 37, 37, 5, 6, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 5, { 37, 37, 5, 6, 35, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 1, { 37, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 35, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 6, { 37, 37, 5, 6, 37, 37, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 11, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 7, { 37, 37, 5, 6, 37, 37, 35, -1, -1 },
       { 6, 7, 8, 9, 10, 11, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 3, { 37, 37, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 6, { 37, 37, 5, 6, 37, 37, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 11, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 7, { 37, 37, 5, 6, 37, 37, 35, -1, -1 },
       { 6, 7, 8, 9, 10, 11, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 3, { 37, 37, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 4, { 37, 37, 37, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 37, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 3, { 37, 8, 37, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 1, { 37, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 3, { 37, 37, 37, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 37, 37, 37, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 4, { 37, 37, 37, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 37, 37, 37, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 3, { 37, 37, 37, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 1, { 37, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 7, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 3, { 37, 7, 37, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 37, 2, 6, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 37, 11, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 3, { 37, 5, 11, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 11, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 3, { 37, 7, 11, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 37, 7, 11, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 3, { 37, 37, 2, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 4, { 37, 37, 7, 8, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 9, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 37, 5, 9, 48, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 2, { 37, 37, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 27, -1, -1 } },
  { 4, { 37, 37, 7, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    3, { 37, 27, 37, -1 } },
  { 2, { 37, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 27, 27, 7, 46, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 27, 46, -1, -1 } },
  { 5, { 27, 27, 7, 46, 35, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 27, 46, -1, -1 } },
  { 1, { 27, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 44, -1, -1 } },
  { 2, { 37, 35, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 44, -1, -1 } },
  { 2, { 37, 47, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    3, { 37, 37, 47, -1 } },
  { 1, { 47, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 5, { 27, 2, 5, 5, 6, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 5, { 27, 27, 5, 5, 6, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 6, { 37, 2, 5, 5, 6, 35, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 7, { 37, 2, 5, 5, 6, 35, 37, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 6, { 37, 37, 5, 5, 6, 35, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 8, { 37, 37, 5, 5, 6, 35, 37, 37, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 2, 7, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 27, 7, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 37, 2, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 4, { 37, 2, 35, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 4, { 37, 2, 7, 35, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 5, { 37, 2, 7, 35, 37, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 3, { 37, 8, 8, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 37, 44, -1, -1 } },
  { 3, { 37, 27, 27, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 37, 44, -1, -1 } },
  { 3, { 37, 37, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 5, { 37, 37, 35, 37, 37, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 4, { 37, 37, 7, 35, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 6, { 37, 37, 7, 35, 37, 37, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    2, { 37, 37, -1, -1 } },
  { 5, { 27, 27, 6, 27, 5, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    2, { 35, 27, -1, -1 } },
  { 3, { 37, 37, 6, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 37, -1, -1, -1 } },
  { 5, { 27, 27, 27, 5, 6, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 10, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 27, 27, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 2, 27, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 27, 27, 27, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 37, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 44, -1, -1, -1 } },
  { 3, { 37, 27, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 44, -1, -1, -1 } },
  { 3, { 27, 2, 2, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 39, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 3, { 37, 37, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 39, -1, -1, -1 } },
  { 5, { 37, 37, 35, 37, 37, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 39, -1, -1, -1 } },
  { 3, { 37, 2, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 39, -1, -1, -1 } },
  { 4, { 37, 2, 35, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 39, -1, -1, -1 } },
  { 3, { 37, 2, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 39, -1, -1 } },
  { 4, { 37, 2, 35, 37, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 39, -1, -1 } },
  { 3, { 37, 37, 35, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 39, -1, -1 } },
  { 5, { 37, 37, 35, 37, 37, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 39, -1, -1 } },
  { 2, { 27, 2, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 37, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 44, -1, -1, -1 } },
  { 2, { 37, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    2, { 27, 44, -1, -1 } },
  { 2, { 37, 8, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 38, -1, -1, -1 } },
  { 5, { 37, 37, 37, 44, 35, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    2, { 37, 44, -1, -1 } },
  { 4, { 27, 27, 2, 7, -1, -1, -1, -1, -1 },
       { 6, 7, 8, 9, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 27, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 39, 3, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 4, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 3, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 6, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 35, -1, -1, -1 } },
  { 0, { -1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 1, { 28, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 28, -1, -1, -1 } },
  { 1, { 3, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
  { 2, { 27, 0, -1, -1, -1, -1, -1, -1, -1 },
       { 6, 7, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 1, { 1, -1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    1, { 27, -1, -1, -1 } },
  { 2, { 27, 1, -1, -1, -1, -1, -1, -1, -1 },
       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    0, { -1, -1, -1, -1 } },
};

const mUINT8 ISA_OPERAND_info_index[] = {
   39,
   40,
   41,
   42,
   40,
   41,
   44,
   45,
   47,
   47,
   47,
   39,
   43,
   34,
   35,
   46,
   40,
   40,
   41,
   47,
   48,
   80,
   40,
   41,
   40,
   41,
   40,
   41,
   48,
   40,
   41,
   40,
   41,
   38,
   38,
    1,
    2,
   30,
    4,
    4,
    7,
    7,
    6,
    6,
   10,
   10,
   11,
   11,
   30,
   12,
   13,
    3,
    8,
   15,
   16,
    5,
    5,
    3,
    3,
    8,
   15,
   16,
    5,
    9,
   14,
   17,
    5,
    5,
    5,
    5,
   37,
   37,
   32,
   18,
   19,
   20,
   31,
   21,
   22,
   23,
   24,
   25,
    0,
    0,
   28,
   28,
   26,
   27,
    0,
   28,
   30,
    0,
    0,
   28,
   28,
   29,
   40,
   40,
   40,
   12,
   29,
   33,
   35,
   34,
   36,
   80,
   90,
   90,
   90,
   90,
   90,
   90,
   89,
   90,
   90,
   90,
   90,
   90,
   90,
   78,
   81,
   54,
   54,
   54,
   54,
   54,
   54,
   54,
   55,
   55,
   55,
   55,
   55,
   54,
   55,
   49,
   54,
   54,
   54,
   54,
   54,
   55,
   55,
   55,
   55,
   56,
   56,
   51,
   52,
   52,
   51,
   57,
   57,
   57,
   57,
   51,
   52,
   52,
   51,
   51,
   51,
   51,
   52,
   52,
   51,
   57,
   57,
   57,
   57,
   51,
   51,
   51,
   53,
   50,
   51,
   51,
   53,
   51,
   53,
   58,
   58,
   59,
   59,
   90,
   90,
   90,
   90,
   90,
   90,
   90,
   90,
   90,
   90,
   90,
   90,
   92,
   91,
   91,
   61,
   62,
   61,
   62,
   67,
   66,
   67,
   66,
   67,
   66,
   66,
   66,
   67,
   66,
   66,
   67,
   66,
   66,
   67,
   75,
   76,
   76,
   76,
   76,
   76,
   76,
   75,
   82,
   79,
   49,
   49,
   83,
   84,
   83,
   84,
   84,
   83,
   83,
   84,
   84,
   83,
   83,
   84,
   68,
   68,
   70,
   70,
   69,
   69,
   71,
   71,
   73,
   73,
   72,
   72,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   60,
   72,
   72,
   72,
   72,
   73,
   73,
   72,
   72,
   73,
   73,
   74,
   74,
   74,
   74,
   74,
   74,
   74,
   74,
   73,
   73,
   73,
   73,
   85,
   87,
   86,
   88,
   86,
   88,
   63,
   63,
   64,
   64,
   65,
   65,
   64,
   64,
   65,
   65,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
  232,
   77,
   77,
   49,
  235,
  234,
  236,
  236,
   49,
   49,
  233,
   96,
   96,
   96,
   93,
   93,
   93,
  222,
  103,
  103,
  103,
  105,
  105,
  105,
  104,
  104,
  104,
  106,
  106,
  106,
  106,
  105,
  104,
   97,
   98,
  107,
  108,
  111,
  111,
  111,
  110,
  109,
  111,
  111,
  111,
  111,
  112,
  112,
  112,
  112,
  112,
  112,
   99,
  100,
  101,
  102,
  112,
  112,
  112,
  112,
  112,
  114,
  114,
  113,
  114,
  114,
  114,
  115,
  115,
  115,
  115,
  115,
  115,
  115,
  116,
  116,
  116,
  117,
  118,
  118,
  118,
  119,
  118,
  118,
  118,
  119,
  120,
  120,
  120,
  120,
  120,
  121,
  121,
  122,
  121,
  121,
  122,
  125,
  124,
  124,
  123,
  123,
  123,
  126,
  127,
  127,
  128,
  129,
  129,
  130,
  131,
  130,
  131,
  132,
  133,
  134,
  135,
  134,
  135,
  136,
  137,
  138,
  139,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  143,
  145,
  145,
  147,
  146,
  147,
  147,
  146,
  147,
  148,
  149,
  150,
  150,
  151,
  150,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  154,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  153,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  152,
  154,
  154,
  156,
  156,
  157,
  157,
  157,
  158,
  159,
  160,
  161,
  163,
  162,
  164,
  165,
  166,
  167,
  167,
  168,
  169,
  157,
  154,
  154,
  154,
  154,
  154,
  155,
  155,
  155,
  155,
  155,
  170,
  171,
  172,
  172,
  172,
  172,
  172,
  172,
  172,
  172,
  172,
  173,
  174,
   39,
   39,
  177,
  177,
  178,
  179,
  179,
  180,
  180,
  181,
  181,
  182,
  182,
  183,
  183,
  184,
  184,
  185,
  186,
   67,
  187,
  191,
  192,
  189,
  190,
  197,
  198,
  195,
  196,
  199,
  200,
  200,
  201,
  202,
  205,
  205,
  202,
  175,
  176,
  206,
  207,
  193,
  194,
  202,
  203,
  208,
  217,
  217,
  217,
  217,
  217,
  215,
  215,
  215,
  215,
  215,
  218,
  218,
  218,
  218,
  218,
  216,
  216,
  216,
  216,
  216,
  211,
  211,
  211,
  211,
  211,
  213,
  213,
  213,
  213,
  213,
  212,
  212,
  212,
  212,
  212,
  214,
  214,
  214,
  214,
  214,
   95,
   95,
   95,
   95,
   95,
  209,
  209,
  209,
  209,
  209,
  188,
  188,
  188,
  188,
  188,
  219,
  219,
  219,
  219,
  219,
  204,
  204,
  202,
  202,
  202,
  202,
  220,
  221,
  221,
  223,
  202,
  224,
  225,
   94,
   94,
   94,
   94,
  210,
  210,
  210,
  210,
  228,
  228,
  228,
  229,
  229,
  229,
  229,
  228,
  230,
  230,
  202,
   49,
   49,
  226,
  226,
  227,
  227,
  231,
   49,
   49,
};

const mINT8 ISA_OPERAND_relocatable_opnd[] = {
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
   0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
};

INT TOP_Immediate_Operand(TOP topcode, ISA_LIT_CLASS *lclass)
{
  INT iopnd;
  const ISA_OPERAND_INFO *opinfo = ISA_OPERAND_Info(topcode);
  INT opnds = ISA_OPERAND_INFO_Operands(opinfo);
  const INT first = 0;
  const INT last = 6;

  if (last + 1 < opnds) opnds = last + 1;

  for (iopnd = first; iopnd < opnds; ++iopnd) {
    const ISA_OPERAND_VALTYP *vtype = ISA_OPERAND_INFO_Operand(opinfo, iopnd);
    ISA_LIT_CLASS lit_class = ISA_OPERAND_VALTYP_Literal_Class(vtype);
    if (lit_class != LC_UNDEFINED) {
      if (lclass) *lclass = lit_class;
      return iopnd;
    }
  }

  return -1;
}

INT TOP_Relocatable_Operand(TOP topcode, ISA_LIT_CLASS *lclass)
{
  extern const mINT8 ISA_OPERAND_relocatable_opnd[];
  INT iopnd = ISA_OPERAND_relocatable_opnd[(INT)topcode];
  if (lclass && iopnd >= 0) {
    const ISA_OPERAND_INFO *opinfo = ISA_OPERAND_Info(topcode);
    const ISA_OPERAND_VALTYP *vtype = ISA_OPERAND_INFO_Operand(opinfo,iopnd);
    *lclass = (ISA_LIT_CLASS)ISA_OPERAND_VALTYP_Literal_Class(vtype);
  }
  return iopnd;
}

BOOL TOP_Can_Have_Immediate(INT64 value, TOP topcode)
{
  ISA_LIT_CLASS lclass;
  if (TOP_Immediate_Operand(topcode, &lclass) < 0) return 0;
  return ISA_LC_Value_In_Class(value, lclass);
}

INT TOP_Find_Operand_Use(TOP topcode, ISA_OPERAND_USE use)
{
  INT i;
  const ISA_OPERAND_INFO *oinfo = ISA_OPERAND_Info(topcode);
  INT opnds = ISA_OPERAND_INFO_Operands(oinfo);
  for (i = 0; i < opnds; ++i) {
    ISA_OPERAND_USE this_use = ISA_OPERAND_INFO_Use(oinfo, i);
    if (this_use == use) return i;
  }
  return -1;
}

INT TOP_Find_Operand_Uses(TOP topcode, INT *out, ISA_OPERAND_USE use)
{
  INT i;
  INT j = 0;
  const ISA_OPERAND_INFO *oinfo = ISA_OPERAND_Info(topcode);
  INT opnds = ISA_OPERAND_INFO_Operands(oinfo);
  for (i = 0; i < opnds; ++i) {
    ISA_OPERAND_USE this_use = ISA_OPERAND_INFO_Use(oinfo, i);
    if (this_use == use){
      *(out+j)=i;
      j++;
    }
  }
  *(out+j) = -1;
  return j;
}

void TOP_Operand_Uses(TOP topcode, ISA_OPERAND_USE *uses)
{
  INT i;
  const ISA_OPERAND_INFO *oinfo = ISA_OPERAND_Info(topcode);
  INT opnds = ISA_OPERAND_INFO_Operands(oinfo);
  for (i = 0; i < opnds; ++i) {
    ISA_OPERAND_USE this_use = ISA_OPERAND_INFO_Use(oinfo, i);
    uses[i] = this_use;
  }
}
