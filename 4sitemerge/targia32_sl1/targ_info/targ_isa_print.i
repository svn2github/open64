# 1 "targ_isa_print.c"
# 1 "/usa/handong/simplnano/cmplr-open64-merge/targia32_sl1/targ_info//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "targ_isa_print.c"
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 323 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 313 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 314 "/usr/include/sys/cdefs.h" 2 3 4
# 324 "/usr/include/features.h" 2 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 347 "/usr/include/features.h" 2 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 214 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 3 4
typedef unsigned int size_t;
# 34 "/usr/include/string.h" 2 3 4




extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern void *rawmemchr (__const void *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern void *memrchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;
# 119 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/string.h" 3 4


extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strchrnul (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));




extern char *strcasestr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 281 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));



extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strsignal (int __sig) __attribute__ ((__nothrow__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern char *basename (__const char *__filename) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 426 "/usr/include/string.h" 3 4

# 2 "targ_isa_print.c" 2
# 1 "topcode.h" 1
# 40 "topcode.h"
typedef signed int INT;
typedef signed int INT32;
typedef signed long long INT64;
typedef signed char mINT8;
typedef signed short mINT16;
typedef signed int mINT32;
typedef signed long long mINT64;
typedef unsigned int UINT;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned char mUINT8;
typedef unsigned short mUINT16;
typedef unsigned int mUINT32;
typedef unsigned long long mUINT64;
typedef int BOOL;
typedef unsigned char mBOOL;
# 67 "topcode.h"
typedef enum topcode {
  TOP_abs16,
  TOP_add16,
  TOP_add16_i,
  TOP_add16_sp,
  TOP_and16,
  TOP_and16_i,
  TOP_jr16,
  TOP_jr16_lnk,
  TOP_ldw16,
  TOP_ldub16_rs,
  TOP_lduh16_rs,
  TOP_mv16,
  TOP_mv16_i,
  TOP_mvfc16,
  TOP_mvtc16,
  TOP_nop16,
  TOP_inv16,
  TOP_or16,
  TOP_or16_i,
  TOP_pop16,
  TOP_push16,
  TOP_ret16,
  TOP_shll16,
  TOP_shll16_i,
  TOP_shra16,
  TOP_shra16_i,
  TOP_shrl16,
  TOP_shrl16_i,
  TOP_stw16,
  TOP_sub16,
  TOP_sub16_i,
  TOP_xor16,
  TOP_xor16_i,
  TOP_br16_eqz,
  TOP_br16_nez,
  TOP_c3_bitc,
  TOP_c3_bitr,
  TOP_c3_dadd,
  TOP_c3_dmac,
  TOP_c3_dmacn,
  TOP_c3_dmac_a,
  TOP_c3_dmacn_a,
  TOP_c3_dmula,
  TOP_c3_dmulan,
  TOP_c3_dmula_a,
  TOP_c3_dmulan_a,
  TOP_c3_dshll_i,
  TOP_c3_dshrl_i,
  TOP_c3_dsub,
  TOP_c3_ld,
  TOP_c3_lead,
  TOP_c3_mac,
  TOP_c3_mac_a,
  TOP_c3_mac_ar,
  TOP_c3_mac_i,
  TOP_c3_macci,
  TOP_c3_maccr,
  TOP_c3_macd,
  TOP_c3_macn,
  TOP_c3_macn_a,
  TOP_c3_macn_ar,
  TOP_c3_macn_i,
  TOP_c3_mula,
  TOP_c3_mula_a,
  TOP_c3_mula_ar,
  TOP_c3_mula_i,
  TOP_c3_mulaci,
  TOP_c3_mulacr,
  TOP_c3_mulad,
  TOP_c3_mulan,
  TOP_c3_muls,
  TOP_c3_mulus,
  TOP_c3_mvfs,
  TOP_c3_mvfacc,
  TOP_c3_mvfadd,
  TOP_c3_mvfadds,
  TOP_c3_mvts,
  TOP_c3_mvtacc,
  TOP_c3_mvtadd,
  TOP_c3_mvtadds,
  TOP_c3_revb,
  TOP_c3_round,
  TOP_c3_saadd_a,
  TOP_c3_saaddh_a,
  TOP_c3_saadds,
  TOP_c3_saaddsh,
  TOP_c3_saddha,
  TOP_c3_saddha_a,
  TOP_c3_samulh_a,
  TOP_c3_samulsh,
  TOP_c3_sashllh,
  TOP_c3_sasub_a,
  TOP_c3_sasubh_a,
  TOP_c3_sasubs,
  TOP_c3_sasubsh,
  TOP_c3_st,
  TOP_c3_trback,
  TOP_c3_viterbi,
  TOP_c3_fft,
  TOP_c3_fftld,
  TOP_c3_fftst,
  TOP_loop,
  TOP_mvtc,
  TOP_mvfc,
  TOP_mvtc_i,
  TOP_ret,
  TOP_mc_r_ge,
  TOP_mc_r_le,
  TOP_mc_r_lt,
  TOP_mc_r_gt,
  TOP_mc_r_eq,
  TOP_mc_r_ne,
  TOP_mc_abs,
  TOP_mc_zc_le,
  TOP_mc_zc_lt,
  TOP_mc_zc_gt,
  TOP_mc_zc_ge,
  TOP_mc_zc_eq,
  TOP_mc_zc_ne,
  TOP_j,
  TOP_jal,
  TOP_lb,
  TOP_lbu,
  TOP_lh,
  TOP_lhu,
  TOP_lw,
  TOP_lwl,
  TOP_lwr,
  TOP_sb,
  TOP_sh,
  TOP_sw,
  TOP_swl,
  TOP_swr,
  TOP_ll,
  TOP_sc,
  TOP_sync,
  TOP_lwu,
  TOP_ld,
  TOP_ldl,
  TOP_ldr,
  TOP_lld,
  TOP_sd,
  TOP_sdl,
  TOP_sdr,
  TOP_scd,
  TOP_pref,
  TOP_prefx,
  TOP_add,
  TOP_addi,
  TOP_addiu,
  TOP_addu,
  TOP_div,
  TOP_divu,
  TOP_mult,
  TOP_multu,
  TOP_slt,
  TOP_slti,
  TOP_sltiu,
  TOP_sltu,
  TOP_sub,
  TOP_subu,
  TOP_dadd,
  TOP_daddi,
  TOP_daddiu,
  TOP_daddu,
  TOP_ddiv,
  TOP_ddivu,
  TOP_dmult,
  TOP_dmultu,
  TOP_dsub,
  TOP_dsubu,
  TOP_and,
  TOP_andi,
  TOP_lui,
  TOP_nor,
  TOP_or,
  TOP_ori,
  TOP_xor,
  TOP_xori,
  TOP_mfhi,
  TOP_mflo,
  TOP_mthi,
  TOP_mtlo,
  TOP_mc_z_eq,
  TOP_mc_z_ne,
  TOP_mc_z_gt,
  TOP_mc_z_ge,
  TOP_mc_z_lt,
  TOP_mc_z_le,
  TOP_mc_zn_eq,
  TOP_mc_zn_ne,
  TOP_mc_zn_gt,
  TOP_mc_zn_ge,
  TOP_mc_zn_lt,
  TOP_mc_zn_le,
  TOP_depb,
  TOP_extrbs,
  TOP_extrbu,
  TOP_movf,
  TOP_movn,
  TOP_movt,
  TOP_movz,
  TOP_sllv,
  TOP_sll,
  TOP_srav,
  TOP_sra,
  TOP_srlv,
  TOP_srl,
  TOP_dsll,
  TOP_dsll32,
  TOP_dsllv,
  TOP_dsra,
  TOP_dsra32,
  TOP_dsrav,
  TOP_dsrl,
  TOP_dsrl32,
  TOP_dsrlv,
  TOP_beq,
  TOP_bgez,
  TOP_bgezal,
  TOP_bgtz,
  TOP_blez,
  TOP_bltz,
  TOP_bltzal,
  TOP_bne,
  TOP_jalr,
  TOP_jr,
  TOP_break,
  TOP_syscall,
  TOP_teq,
  TOP_teqi,
  TOP_tge,
  TOP_tgei,
  TOP_tgeiu,
  TOP_tgeu,
  TOP_tlt,
  TOP_tlti,
  TOP_tltiu,
  TOP_tltu,
  TOP_tne,
  TOP_tnei,
  TOP_lwc1,
  TOP_ldc1,
  TOP_lwxc1,
  TOP_ldxc1,
  TOP_swc1,
  TOP_sdc1,
  TOP_swxc1,
  TOP_sdxc1,
  TOP_abs_s,
  TOP_abs_d,
  TOP_add_s,
  TOP_add_d,
  TOP_c_f_s,
  TOP_c_f_d,
  TOP_c_t_s,
  TOP_c_t_d,
  TOP_c_un_s,
  TOP_c_un_d,
  TOP_c_or_s,
  TOP_c_or_d,
  TOP_c_eq_s,
  TOP_c_eq_d,
  TOP_c_neq_s,
  TOP_c_neq_d,
  TOP_c_ueq_s,
  TOP_c_ueq_d,
  TOP_c_olg_s,
  TOP_c_olg_d,
  TOP_c_olt_s,
  TOP_c_olt_d,
  TOP_c_uge_s,
  TOP_c_uge_d,
  TOP_c_ult_s,
  TOP_c_ult_d,
  TOP_c_oge_s,
  TOP_c_oge_d,
  TOP_c_ole_s,
  TOP_c_ole_d,
  TOP_c_ugt_s,
  TOP_c_ugt_d,
  TOP_c_ule_s,
  TOP_c_ule_d,
  TOP_c_ogt_s,
  TOP_c_ogt_d,
  TOP_c_sf_s,
  TOP_c_sf_d,
  TOP_c_st_s,
  TOP_c_st_d,
  TOP_c_ngle_s,
  TOP_c_ngle_d,
  TOP_c_gle_s,
  TOP_c_gle_d,
  TOP_c_seq_s,
  TOP_c_seq_d,
  TOP_c_sne_s,
  TOP_c_sne_d,
  TOP_c_ngl_s,
  TOP_c_ngl_d,
  TOP_c_gl_s,
  TOP_c_gl_d,
  TOP_c_lt_s,
  TOP_c_lt_d,
  TOP_c_nlt_s,
  TOP_c_nlt_d,
  TOP_c_nge_s,
  TOP_c_nge_d,
  TOP_c_ge_s,
  TOP_c_ge_d,
  TOP_c_le_s,
  TOP_c_le_d,
  TOP_c_nle_s,
  TOP_c_nle_d,
  TOP_c_ngt_s,
  TOP_c_ngt_d,
  TOP_c_gt_s,
  TOP_c_gt_d,
  TOP_div_s,
  TOP_div_d,
  TOP_mul_s,
  TOP_mul_d,
  TOP_neg_s,
  TOP_neg_d,
  TOP_sub_s,
  TOP_sub_d,
  TOP_sqrt_s,
  TOP_sqrt_d,
  TOP_madd_s,
  TOP_madd_d,
  TOP_msub_s,
  TOP_msub_d,
  TOP_nmadd_s,
  TOP_nmadd_d,
  TOP_nmsub_s,
  TOP_nmsub_d,
  TOP_recip_s,
  TOP_recip_d,
  TOP_rsqrt_s,
  TOP_rsqrt_d,
  TOP_cfc1,
  TOP_ctc1,
  TOP_mfc1,
  TOP_mtc1,
  TOP_dmfc1,
  TOP_dmtc1,
  TOP_mov_s,
  TOP_mov_d,
  TOP_movf_s,
  TOP_movf_d,
  TOP_movn_s,
  TOP_movn_d,
  TOP_movt_s,
  TOP_movt_d,
  TOP_movz_s,
  TOP_movz_d,
  TOP_cvt_d_s,
  TOP_cvt_d_w,
  TOP_cvt_d_l,
  TOP_cvt_l_s,
  TOP_cvt_l_d,
  TOP_cvt_s_d,
  TOP_cvt_s_w,
  TOP_cvt_s_l,
  TOP_cvt_w_s,
  TOP_cvt_w_d,
  TOP_ceil_w_s,
  TOP_ceil_w_d,
  TOP_ceil_l_s,
  TOP_ceil_l_d,
  TOP_floor_w_s,
  TOP_floor_w_d,
  TOP_floor_l_s,
  TOP_floor_l_d,
  TOP_round_w_s,
  TOP_round_w_d,
  TOP_round_l_s,
  TOP_round_l_d,
  TOP_trunc_w_s,
  TOP_trunc_w_d,
  TOP_trunc_l_s,
  TOP_trunc_l_d,
  TOP_bc1f,
  TOP_bc1t,
  TOP_asm,
  TOP_intrncall,
  TOP_spadjust,
  TOP_begin_pregtn,
  TOP_end_pregtn,
  TOP_bwd_bar,
  TOP_fwd_bar,
  TOP_label,
  TOP_c2_mvgr_r2g_h_u,
  TOP_c2_mvgr_r2g_h,
  TOP_c2_mvgr_r2g_w,
  TOP_c2_mvgr_r2g_h_u_i,
  TOP_c2_mvgr_r2g_h_i,
  TOP_c2_mvgr_r2g_w_i,
  TOP_c2_mvgr_r2s,
  TOP_c2_mvgr_g2r_ba_lh,
  TOP_c2_mvgr_g2r_ba_hh,
  TOP_c2_mvgr_g2r_ba_w,
  TOP_c2_mvgr_g2r_lh_i,
  TOP_c2_mvgr_g2r_hh_i,
  TOP_c2_mvgr_g2r_w_i,
  TOP_c2_mvgr_g2r_lh,
  TOP_c2_mvgr_g2r_hh,
  TOP_c2_mvgr_g2r_w,
  TOP_c2_mvgr_g2r_bh,
  TOP_c2_mvgr_g2r_bh_u,
  TOP_c2_mvgr_g2r_bv,
  TOP_c2_mvgr_g2r_bv_u,
  TOP_c2_mvgr_g2r_b4_i,
  TOP_c2_mvgr_g2r_b4,
  TOP_c2_mvgr_g2s,
  TOP_c2_mvgr_s2g,
  TOP_c2_mvgc_c2g,
  TOP_c2_mvgc_g2c,
  TOP_c2_ld_v_b_u,
  TOP_c2_ld_v_b,
  TOP_c2_ld_v_h,
  TOP_c2_ld_v_w,
  TOP_c2_ld_v_sw,
  TOP_c2_ld_v_m_b_u,
  TOP_c2_ld_v_m_b,
  TOP_c2_ld_v_m_h,
  TOP_c2_ld_v_m_w,
  TOP_c2_ld_s_h_u_p,
  TOP_c2_ld_s_h_u,
  TOP_c2_ld_s_h_p,
  TOP_c2_ld_s_h,
  TOP_c2_ld_s_w_p,
  TOP_c2_ld_s_w,
  TOP_c2_ld_s2s_ga_p,
  TOP_c2_ld_s2s_ga,
  TOP_c2_ld_s2s_sa_p,
  TOP_c2_ld_s2s_sa,
  TOP_c2_ld_v2g_b_u,
  TOP_c2_ld_v2g_b,
  TOP_c2_ld_v2g_h_u,
  TOP_c2_ld_v2g_h,
  TOP_c2_ld_v2g_w,
  TOP_c2_st_v_b,
  TOP_c2_st_v_h,
  TOP_c2_st_v_w,
  TOP_c2_st_v_m_b,
  TOP_c2_st_v_m_h,
  TOP_c2_st_v_m_w,
  TOP_c2_st_s_h,
  TOP_c2_st_s_h_p,
  TOP_c2_st_s_w,
  TOP_c2_st_s_w_p,
  TOP_c2_st_g2v_b,
  TOP_c2_st_g2v_h,
  TOP_c2_st_g2v_w,
  TOP_c2_ldi_s_h_u,
  TOP_c2_ldi_s_h,
  TOP_c2_ldi_s_w,
  TOP_c2_ldi_c,
  TOP_c2_ldi_v_b_u,
  TOP_c2_ldi_v_b,
  TOP_c2_ldi_v_h,
  TOP_c2_ldi_v_w,
  TOP_c2_ldi_v_m_b_u,
  TOP_c2_ldi_v_m_b,
  TOP_c2_ldi_v_m_h,
  TOP_c2_ldi_v_m_w,
  TOP_c2_ldi_v2g_b_u,
  TOP_c2_ldi_v2g_b,
  TOP_c2_ldi_v2g_h_u,
  TOP_c2_ldi_v2g_h,
  TOP_c2_ldi_v2g_w,
  TOP_c2_sti_v_b,
  TOP_c2_sti_v_h,
  TOP_c2_sti_v_w,
  TOP_c2_sti_v_m_b,
  TOP_c2_sti_v_m_h,
  TOP_c2_sti_v_m_w,
  TOP_c2_sti_c,
  TOP_c2_sti_s_h,
  TOP_c2_sti_s_w,
  TOP_c2_sti_g2v_b,
  TOP_c2_sti_g2v_h,
  TOP_c2_sti_g2v_w,
  TOP_c2_vadds_h,
  TOP_c2_vadds_w,
  TOP_c2_vadds_p,
  TOP_c2_vadds_h_c,
  TOP_c2_vadds_w_c,
  TOP_c2_vadds_p_c,
  TOP_c2_vsubs_h,
  TOP_c2_vsubs_h_sm,
  TOP_c2_vsubs_h_abs,
  TOP_c2_vsubs_h_abs_sm,
  TOP_c2_vabs_h,
  TOP_c2_vabs_h_sm,
  TOP_c2_vsubs_w,
  TOP_c2_vsubs_w_sm,
  TOP_c2_vsubs_w_abs,
  TOP_c2_vsubs_w_abs_sm,
  TOP_c2_vabs_w,
  TOP_c2_vabs_w_sm,
  TOP_c2_vsubs_p,
  TOP_c2_vsubs_p_sm,
  TOP_c2_vsubs_p_abs,
  TOP_c2_vsubs_p_abs_sm,
  TOP_c2_vabs_p,
  TOP_c2_vabs_p_sm,
  TOP_c2_vabs_acc,
  TOP_c2_vmul_h,
  TOP_c2_vmul_w,
  TOP_c2_vneg_h,
  TOP_c2_vneg_w,
  TOP_c2_vneg_p,
  TOP_c2_vshr_p,
  TOP_c2_vshr_h,
  TOP_c2_vshr_w,
  TOP_c2_vshl_p,
  TOP_c2_vshl_h,
  TOP_c2_vshl_w,
  TOP_c2_vclp,
  TOP_c2_vclp_p,
  TOP_c2_vclp_a,
  TOP_c2_vclp_s,
  TOP_c2_vclp_2,
  TOP_c2_vclp_n,
  TOP_c2_vclg_h_lt_and,
  TOP_c2_vclg_h_lt_or,
  TOP_c2_vclg_h_le_and,
  TOP_c2_vclg_h_le_or,
  TOP_c2_vclg_h_eq_and,
  TOP_c2_vclg_h_eq_or,
  TOP_c2_vclg_h_ge_and,
  TOP_c2_vclg_h_ge_or,
  TOP_c2_vclg_h_gt_and,
  TOP_c2_vclg_h_gt_or,
  TOP_c2_vclg_h_and,
  TOP_c2_vclg_h_or,
  TOP_c2_vclg_h_le,
  TOP_c2_vclg_h_lt,
  TOP_c2_vclg_h_ge,
  TOP_c2_vclg_h_gt,
  TOP_c2_vclg_w_lt_and,
  TOP_c2_vclg_w_lt_or,
  TOP_c2_vclg_w_le_and,
  TOP_c2_vclg_w_le_or,
  TOP_c2_vclg_w_eq_and,
  TOP_c2_vclg_w_eq_or,
  TOP_c2_vclg_w_ge_and,
  TOP_c2_vclg_w_ge_or,
  TOP_c2_vclg_w_gt_and,
  TOP_c2_vclg_w_gt_or,
  TOP_c2_vclg_w_and,
  TOP_c2_vclg_w_or,
  TOP_c2_vclg_w_le,
  TOP_c2_vclg_w_lt,
  TOP_c2_vclg_w_ge,
  TOP_c2_vclg_w_gt,
  TOP_c2_vclg_p_lt_and,
  TOP_c2_vclg_p_lt_or,
  TOP_c2_vclg_p_le_and,
  TOP_c2_vclg_p_le_or,
  TOP_c2_vclg_p_eq_and,
  TOP_c2_vclg_p_eq_or,
  TOP_c2_vclg_p_ge_and,
  TOP_c2_vclg_p_ge_or,
  TOP_c2_vclg_p_gt_and,
  TOP_c2_vclg_p_gt_or,
  TOP_c2_vclg_p_and,
  TOP_c2_vclg_p_or,
  TOP_c2_vclg_p_le,
  TOP_c2_vclg_p_eq,
  TOP_c2_vclg_p_ge,
  TOP_c2_vclg_p_gt,
  TOP_c2_vcmov_h_f,
  TOP_c2_vcmov_h_t,
  TOP_c2_vcmov_w_f,
  TOP_c2_vcmov_w_t,
  TOP_c2_lczero_z,
  TOP_c2_lczero_nz_fw,
  TOP_c2_lczero_nz_bw,
  TOP_c2_vrnd_h,
  TOP_c2_vrnd_w,
  TOP_c2_vspas,
  TOP_c2_vspel_mul_h,
  TOP_c2_vspel_mul_w,
  TOP_c2_vspel_adds,
  TOP_c2_vspel_mac_h,
  TOP_c2_vspel_mac_w,
  TOP_c2_mmul_s123,
  TOP_c2_mmul_h,
  TOP_c2_mmul_w,
  TOP_c2_vmov,
  TOP_c2_vmov_swin,
  TOP_c2_vcopy,
  TOP_c2_vcmpr_h_eq,
  TOP_c2_vcmpr_h_lt,
  TOP_c2_vcmpr_h_le,
  TOP_c2_vcmpr_h_gt,
  TOP_c2_vcmpr_h_ge,
  TOP_c2_vcmpr_w_eq,
  TOP_c2_vcmpr_w_lt,
  TOP_c2_vcmpr_w_le,
  TOP_c2_vcmpr_w_gt,
  TOP_c2_vcmpr_w_ge,
  TOP_c2_sad,
  TOP_c2_satd,
  TOP_c2_intra,
  TOP_c2_intra_0_1_9_14_16,
  TOP_c2_intra_2_3_8_10,
  TOP_c2_intra_4,
  TOP_c2_intra_5_11,
  TOP_c2_intra_12_13,
  TOP_c2_intra_15_17,
  TOP_c2_intra_6,
  TOP_c2_intra_7,
  TOP_c2_mvsel,
  TOP_c2_mvsel_zero_two,
  TOP_c2_bcst_q,
  TOP_c2_bcst_i,
  TOP_c2_vlcs_dc,
  TOP_c2_vlcs_ac,
  TOP_c2_vlcs_wb,
  TOP_c2_add_shl_g_i,
  TOP_c2_add_shr_g_i,
  TOP_c2_add_shl_g,
  TOP_c2_add_shr_g,
  TOP_c2_add_shl_r_h_i,
  TOP_c2_add_shr_r_h_i,
  TOP_c2_add_shl_r_w_i,
  TOP_c2_add_shr_r_w_i,
  TOP_c2_add_shl_r_h,
  TOP_c2_add_shr_r_h,
  TOP_c2_add_shl_r_w,
  TOP_c2_add_shr_r_w,
  TOP_c2_sub_g_abs_i,
  TOP_c2_subs_g_i,
  TOP_c2_sub_g_abs,
  TOP_c2_subs_g,
  TOP_c2_subs_r_h_i,
  TOP_c2_subs_r_w_i,
  TOP_c2_sub_r_abs_h_i,
  TOP_c2_sub_r_abs_w_i,
  TOP_c2_subs_r_h,
  TOP_c2_subs_r_w,
  TOP_c2_sub_r_abs_h,
  TOP_c2_sub_r_abs_w,
  TOP_c2_muls,
  TOP_c2_muls_r_h,
  TOP_c2_muls_r_w,
  TOP_c2_mads,
  TOP_c2_smads,
  TOP_c2_min,
  TOP_c2_max,
  TOP_c2_cmov,
  TOP_c2_mov_g,
  TOP_c2_mov_r,
  TOP_c2_mov_c_i,
  TOP_c2_mov_c,
  TOP_c2_mov_s_i,
  TOP_c2_mov_s,
  TOP_c2_clp,
  TOP_c2_clp_i,
  TOP_c2_chkrng,
  TOP_c2_scond_r_h_wb_eq,
  TOP_c2_scond_r_h_wb_lt,
  TOP_c2_scond_r_h_wb_le,
  TOP_c2_scond_r_h_wb_gt,
  TOP_c2_scond_r_h_wb_ge,
  TOP_c2_scond_r_wb_eq_i,
  TOP_c2_scond_r_wb_lt_i,
  TOP_c2_scond_r_wb_le_i,
  TOP_c2_scond_r_wb_gt_i,
  TOP_c2_scond_r_wb_ge_i,
  TOP_c2_scond_r_w_wb_eq,
  TOP_c2_scond_r_w_wb_lt,
  TOP_c2_scond_r_w_wb_le,
  TOP_c2_scond_r_w_wb_gt,
  TOP_c2_scond_r_w_wb_ge,
  TOP_c2_scond_r_w_wb_eq_i,
  TOP_c2_scond_r_w_wb_lt_i,
  TOP_c2_scond_r_w_wb_le_i,
  TOP_c2_scond_r_w_wb_gt_i,
  TOP_c2_scond_r_w_wb_ge_i,
  TOP_c2_scond_r_h_eq,
  TOP_c2_scond_r_h_lt,
  TOP_c2_scond_r_h_le,
  TOP_c2_scond_r_h_gt,
  TOP_c2_scond_r_h_ge,
  TOP_c2_scond_r_h_eq_i,
  TOP_c2_scond_r_h_lt_i,
  TOP_c2_scond_r_h_le_i,
  TOP_c2_scond_r_h_gt_i,
  TOP_c2_scond_r_h_ge_i,
  TOP_c2_scond_r_w_eq,
  TOP_c2_scond_r_w_lt,
  TOP_c2_scond_r_w_le,
  TOP_c2_scond_r_w_gt,
  TOP_c2_scond_r_w_ge,
  TOP_c2_scond_r_w_eq_i,
  TOP_c2_scond_r_w_lt_i,
  TOP_c2_scond_r_w_le_i,
  TOP_c2_scond_r_w_gt_i,
  TOP_c2_scond_r_w_ge_i,
  TOP_c2_scond_eq,
  TOP_c2_scond_lt,
  TOP_c2_scond_le,
  TOP_c2_scond_gt,
  TOP_c2_scond_ge,
  TOP_c2_scond_eq_i,
  TOP_c2_scond_lt_i,
  TOP_c2_scond_le_i,
  TOP_c2_scond_gt_i,
  TOP_c2_scond_ge_i,
  TOP_c2_bop_ls,
  TOP_c2_bop_rs,
  TOP_c2_bop_and,
  TOP_c2_bop_or,
  TOP_c2_bop_xor,
  TOP_c2_bop_ls_i,
  TOP_c2_bop_rs_i,
  TOP_c2_bop_and_i,
  TOP_c2_bop_or_i,
  TOP_c2_bop_xor_i,
  TOP_c2_bdep_l,
  TOP_c2_bdep_m,
  TOP_c2_bxtr_u_l,
  TOP_c2_bxtr_s_l,
  TOP_c2_bxtr_u_m,
  TOP_c2_bxtr_s_m,
  TOP_c2_sum4_c,
  TOP_c2_sum4_g,
  TOP_c2_sum4_sw,
  TOP_c2_sum4_r,
  TOP_c2_med,
  TOP_c2_gsums,
  TOP_c2_wrap,
  TOP_c2_clzob_zd,
  TOP_c2_clzob_za,
  TOP_c2_clzob_od,
  TOP_c2_clzob_oa,
  TOP_c2_clzob_zd_i,
  TOP_c2_clzob_za_i,
  TOP_c2_clzob_od_i,
  TOP_c2_clzob_oa_i,
  TOP_c2_thctrl_lock,
  TOP_c2_thctrl_unlock,
  TOP_c2_thctrl_deact,
  TOP_c2_thctrl_act,
  TOP_c2_thctrl_mode4,
  TOP_c2_thctrl_mode5,
  TOP_c2_thctrl_mode6,
  TOP_c2_joint,
  TOP_c2_thread_major,
  TOP_c2_thread_minor,
  TOP_c2_sum3_saddr,
  TOP_peripheral_rw_begin,
  TOP_peripheral_rw_end,
  TOP_c2_br_f,
  TOP_c2_br_t,
  TOP_c2_fork_m,
  TOP_c2_fork_n,
  TOP_c2_macro,
  TOP_nop,
  TOP_noop,
  TOP_UNDEFINED
} TOP;

typedef mUINT16 mTOP;



extern const char* TOP_Name(TOP topcode);
# 3 "targ_isa_print.c" 2
# 1 "targ_isa_print.h" 1
# 91 "targ_isa_print.h"
typedef enum {
  ISA_PRINT_COMP_end = 0,
  ISA_PRINT_COMP_name = 1,
  ISA_PRINT_COMP_opnd = 2,
  ISA_PRINT_COMP_result = 11,
  ISA_PRINT_COMP_MAX = 14
} ISA_PRINT_COMP;

typedef struct {
  const char *format;
  mUINT8 comp[15];
} ISA_PRINT_INFO;

extern const ISA_PRINT_INFO ISA_PRINT_info[56];

extern const unsigned char ISA_PRINT_info_index[764];

static __inline const ISA_PRINT_INFO *ISA_PRINT_Info(TOP topcode)
{
  INT index = ISA_PRINT_info_index[(INT)topcode];
  return index == 0 ? 0 : &ISA_PRINT_info[index];
}

static __inline const char* ISA_PRINT_INFO_Format(const ISA_PRINT_INFO *info)
{
  return info->format;
}

static __inline INT ISA_PRINT_INFO_Comp(const ISA_PRINT_INFO *info, INT index)
{
  return info->comp[index];
}

static __inline const char *ISA_PRINT_AsmName(TOP topcode)
{
  return TOP_Name(topcode);
}

extern BOOL ISA_PRINT_Operand_Is_Part_Of_Name(TOP topcode, INT opindex);
# 4 "targ_isa_print.c" 2


const ISA_PRINT_INFO ISA_PRINT_info[56] = {
  { "", ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_opnd+5,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_opnd+5,
                    ISA_PRINT_COMP_opnd+6,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "c3.mvfs %s,%s,%s", ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "c3.mvts %s,%s,%s", ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s, %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_opnd+5,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_end },
  { "add %s,%s,%s", ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s, %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result+1,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "sub %s,%s,%s", ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s ", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_end },
  { "%s %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s $0,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_end },
  { "%s %s,$31", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_end },
  { "%s %s,$31", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_result+1,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_result+1,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_end },
  { "c2.mul.s %s,%s,%s,%s,%s,%s", ISA_PRINT_COMP_result+1,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_opnd+4,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,(%s)", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s(%s)", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s(%s)", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,(%s)", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s(%s)", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_end },
  { "%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_end },
  { "%s %s, %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s, %s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_opnd+3,
                    ISA_PRINT_COMP_end },
  { "%s %s,%s,%s", ISA_PRINT_COMP_name,
                    ISA_PRINT_COMP_result,
                    ISA_PRINT_COMP_opnd+1,
                    ISA_PRINT_COMP_opnd+2,
                    ISA_PRINT_COMP_end },
};

const mUINT8 ISA_PRINT_info_index[764] = {
   22,
   17,
   17,
   21,
   17,
   17,
   23,
   23,
   18,
   22,
   22,
   15,
   15,
   15,
   15,
   23,
   22,
   17,
   17,
   25,
   24,
   23,
   17,
   17,
   17,
   17,
   17,
   17,
   19,
   17,
   17,
   17,
   17,
   20,
   20,
    2,
    2,
    6,
    5,
    5,
    4,
    4,
    2,
    2,
    3,
    3,
    2,
    2,
    6,
   12,
    6,
    2,
    3,
    1,
    2,
    2,
    2,
    2,
    2,
    3,
    1,
    2,
    2,
    3,
    1,
    2,
    2,
    2,
    2,
    2,
   16,
   16,
    9,
    7,
    7,
    7,
    9,
    8,
    8,
    8,
    6,
   10,
    1,
    1,
    2,
    2,
    5,
    3,
    1,
    2,
    6,
    1,
    1,
    2,
    2,
   11,
   19,
   19,
   19,
   12,
   11,
   14,
   15,
   15,
   15,
   50,
   52,
   52,
   52,
   52,
   52,
   52,
   51,
   52,
   52,
   52,
   52,
   52,
   52,
   30,
   30,
   46,
   46,
   46,
   46,
   46,
   46,
   46,
   49,
   49,
   49,
   49,
   49,
   46,
   49,
   50,
   46,
   46,
   46,
   46,
   46,
   49,
   49,
   49,
   49,
   47,
   50,
   27,
   27,
   27,
   13,
   32,
   32,
   31,
   31,
   27,
   27,
   27,
   27,
   27,
   26,
   27,
   27,
   27,
   27,
   32,
   32,
   31,
   31,
   27,
   27,
   27,
   27,
   34,
   27,
   27,
   27,
   27,
   27,
   33,
   33,
   30,
   30,
   52,
   52,
   52,
   52,
   52,
   52,
   52,
   52,
   52,
   52,
   52,
   52,
   54,
   53,
   53,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   44,
   31,
   31,
   31,
   31,
   31,
   31,
   44,
   29,
   29,
   50,
   50,
   44,
   44,
   44,
   44,
   44,
   44,
   44,
   44,
   44,
   44,
   44,
   44,
   46,
   46,
   50,
   50,
   49,
   49,
   50,
   50,
   34,
   34,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   34,
   34,
   27,
   27,
   34,
   34,
   38,
   38,
   38,
   38,
   38,
   38,
   38,
   38,
   34,
   34,
   34,
   34,
   36,
   37,
   34,
   35,
   34,
   35,
   34,
   34,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   31,
   31,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   34,
   34,
   34,
   27,
   27,
   27,
   27,
   27,
   27,
   34,
   34,
   34,
   34,
   27,
   27,
   34,
   34,
   34,
   34,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   45,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   48,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   34,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   41,
   41,
   41,
   41,
   41,
   41,
   41,
   41,
   41,
   41,
   34,
   34,
   41,
   41,
   41,
   41,
   34,
   34,
   41,
   41,
   41,
   41,
   34,
   34,
   33,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   34,
   34,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   34,
   34,
   34,
   27,
   27,
   38,
   27,
   27,
   38,
   38,
   38,
   44,
   41,
   41,
   27,
   38,
   34,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   39,
   40,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   38,
   38,
   34,
   34,
   34,
   34,
   33,
   42,
   42,
   42,
   42,
   42,
   42,
   42,
   42,
   42,
   42,
   42,
   42,
   27,
   38,
   27,
   38,
   38,
   38,
   27,
   27,
   38,
   38,
   27,
   27,
   43,
   38,
   38,
   42,
   38,
   27,
   27,
   38,
   34,
   34,
   31,
   31,
   38,
   38,
   38,
   38,
   38,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   31,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   55,
   55,
   38,
   38,
   38,
   38,
   31,
   27,
   27,
   38,
   38,
   41,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   27,
   50,
   50,
   50,
   22,
   22,
   22,
   22,
   50,
   33,
   33,
   38,
    0,
    0,
   28,
   28,
   22,
   22,
   50,
   50,
    0,
};

BOOL ISA_PRINT_Operand_Is_Part_Of_Name(TOP topcode, INT opindex)
{
  const ISA_PRINT_INFO *info = ISA_PRINT_Info(topcode);
  const char *place_in_format = ISA_PRINT_INFO_Format(info);
  BOOL in_name_part = 0;
  INT comp;
  INT i = 0;
  for (;;) {
   comp = ISA_PRINT_INFO_Comp(info,i);
   if (comp == ISA_PRINT_COMP_end) break;
 place_in_format = strchr(place_in_format, '%');
 place_in_format += 2;
   if (comp == ISA_PRINT_COMP_name) {
   if (*place_in_format == '\0' || *place_in_format == ' ')
  in_name_part = 0;
   else
  in_name_part = 1;
   }
   if (comp >= ISA_PRINT_COMP_opnd && comp < ISA_PRINT_COMP_result) {
     if (in_name_part) {
     INT comp_opindex = comp - ISA_PRINT_COMP_opnd;
     if (comp_opindex == opindex)
  return 1;
     if (*place_in_format == '\0' || *place_in_format == ' ')
  in_name_part = 0;
     }
   }
   ++i;
  }
  return 0;
}
