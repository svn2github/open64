# 1 "targ_isa_registers.c"
# 1 "/usa/handong/simplnano/cmplr-open64-merge/targia32_sl1/targ_info//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "targ_isa_registers.c"
# 1 "targ_isa_subset.h" 1
# 36 "targ_isa_subset.h"
typedef signed int INT;
typedef signed int INT32;
typedef signed long long INT64;
typedef signed char mINT8;
typedef signed short mINT16;
typedef signed int mINT32;
typedef signed long long mINT64;
typedef unsigned int UINT;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned char mUINT8;
typedef unsigned short mUINT16;
typedef unsigned int mUINT32;
typedef unsigned long long mUINT64;
typedef int BOOL;
typedef unsigned char mBOOL;
# 63 "targ_isa_subset.h"
# 1 "topcode.h" 1
# 67 "topcode.h"
typedef enum topcode {
  TOP_abs16,
  TOP_add16,
  TOP_add16_i,
  TOP_add16_sp,
  TOP_and16,
  TOP_and16_i,
  TOP_jr16,
  TOP_jr16_lnk,
  TOP_ldw16,
  TOP_ldub16_rs,
  TOP_lduh16_rs,
  TOP_mv16,
  TOP_mv16_i,
  TOP_mvfc16,
  TOP_mvtc16,
  TOP_nop16,
  TOP_inv16,
  TOP_or16,
  TOP_or16_i,
  TOP_pop16,
  TOP_push16,
  TOP_ret16,
  TOP_shll16,
  TOP_shll16_i,
  TOP_shra16,
  TOP_shra16_i,
  TOP_shrl16,
  TOP_shrl16_i,
  TOP_stw16,
  TOP_sub16,
  TOP_sub16_i,
  TOP_xor16,
  TOP_xor16_i,
  TOP_br16_eqz,
  TOP_br16_nez,
  TOP_c3_bitc,
  TOP_c3_bitr,
  TOP_c3_dadd,
  TOP_c3_dmac,
  TOP_c3_dmacn,
  TOP_c3_dmac_a,
  TOP_c3_dmacn_a,
  TOP_c3_dmula,
  TOP_c3_dmulan,
  TOP_c3_dmula_a,
  TOP_c3_dmulan_a,
  TOP_c3_dshll_i,
  TOP_c3_dshrl_i,
  TOP_c3_dsub,
  TOP_c3_ld,
  TOP_c3_lead,
  TOP_c3_mac,
  TOP_c3_mac_a,
  TOP_c3_mac_ar,
  TOP_c3_mac_i,
  TOP_c3_macci,
  TOP_c3_maccr,
  TOP_c3_macd,
  TOP_c3_macn,
  TOP_c3_macn_a,
  TOP_c3_macn_ar,
  TOP_c3_macn_i,
  TOP_c3_mula,
  TOP_c3_mula_a,
  TOP_c3_mula_ar,
  TOP_c3_mula_i,
  TOP_c3_mulaci,
  TOP_c3_mulacr,
  TOP_c3_mulad,
  TOP_c3_mulan,
  TOP_c3_muls,
  TOP_c3_mulus,
  TOP_c3_mvfs,
  TOP_c3_mvfacc,
  TOP_c3_mvfadd,
  TOP_c3_mvfadds,
  TOP_c3_mvts,
  TOP_c3_mvtacc,
  TOP_c3_mvtadd,
  TOP_c3_mvtadds,
  TOP_c3_revb,
  TOP_c3_round,
  TOP_c3_saadd_a,
  TOP_c3_saaddh_a,
  TOP_c3_saadds,
  TOP_c3_saaddsh,
  TOP_c3_saddha,
  TOP_c3_saddha_a,
  TOP_c3_samulh_a,
  TOP_c3_samulsh,
  TOP_c3_sashllh,
  TOP_c3_sasub_a,
  TOP_c3_sasubh_a,
  TOP_c3_sasubs,
  TOP_c3_sasubsh,
  TOP_c3_st,
  TOP_c3_trback,
  TOP_c3_viterbi,
  TOP_c3_fft,
  TOP_c3_fftld,
  TOP_c3_fftst,
  TOP_loop,
  TOP_mvtc,
  TOP_mvfc,
  TOP_mvtc_i,
  TOP_ret,
  TOP_mc_r_ge,
  TOP_mc_r_le,
  TOP_mc_r_lt,
  TOP_mc_r_gt,
  TOP_mc_r_eq,
  TOP_mc_r_ne,
  TOP_mc_abs,
  TOP_mc_zc_le,
  TOP_mc_zc_lt,
  TOP_mc_zc_gt,
  TOP_mc_zc_ge,
  TOP_mc_zc_eq,
  TOP_mc_zc_ne,
  TOP_j,
  TOP_jal,
  TOP_lb,
  TOP_lbu,
  TOP_lh,
  TOP_lhu,
  TOP_lw,
  TOP_lwl,
  TOP_lwr,
  TOP_sb,
  TOP_sh,
  TOP_sw,
  TOP_swl,
  TOP_swr,
  TOP_ll,
  TOP_sc,
  TOP_sync,
  TOP_lwu,
  TOP_ld,
  TOP_ldl,
  TOP_ldr,
  TOP_lld,
  TOP_sd,
  TOP_sdl,
  TOP_sdr,
  TOP_scd,
  TOP_pref,
  TOP_prefx,
  TOP_add,
  TOP_addi,
  TOP_addiu,
  TOP_addu,
  TOP_div,
  TOP_divu,
  TOP_mult,
  TOP_multu,
  TOP_slt,
  TOP_slti,
  TOP_sltiu,
  TOP_sltu,
  TOP_sub,
  TOP_subu,
  TOP_dadd,
  TOP_daddi,
  TOP_daddiu,
  TOP_daddu,
  TOP_ddiv,
  TOP_ddivu,
  TOP_dmult,
  TOP_dmultu,
  TOP_dsub,
  TOP_dsubu,
  TOP_and,
  TOP_andi,
  TOP_lui,
  TOP_nor,
  TOP_or,
  TOP_ori,
  TOP_xor,
  TOP_xori,
  TOP_mfhi,
  TOP_mflo,
  TOP_mthi,
  TOP_mtlo,
  TOP_mc_z_eq,
  TOP_mc_z_ne,
  TOP_mc_z_gt,
  TOP_mc_z_ge,
  TOP_mc_z_lt,
  TOP_mc_z_le,
  TOP_mc_zn_eq,
  TOP_mc_zn_ne,
  TOP_mc_zn_gt,
  TOP_mc_zn_ge,
  TOP_mc_zn_lt,
  TOP_mc_zn_le,
  TOP_depb,
  TOP_extrbs,
  TOP_extrbu,
  TOP_movf,
  TOP_movn,
  TOP_movt,
  TOP_movz,
  TOP_sllv,
  TOP_sll,
  TOP_srav,
  TOP_sra,
  TOP_srlv,
  TOP_srl,
  TOP_dsll,
  TOP_dsll32,
  TOP_dsllv,
  TOP_dsra,
  TOP_dsra32,
  TOP_dsrav,
  TOP_dsrl,
  TOP_dsrl32,
  TOP_dsrlv,
  TOP_beq,
  TOP_bgez,
  TOP_bgezal,
  TOP_bgtz,
  TOP_blez,
  TOP_bltz,
  TOP_bltzal,
  TOP_bne,
  TOP_jalr,
  TOP_jr,
  TOP_break,
  TOP_syscall,
  TOP_teq,
  TOP_teqi,
  TOP_tge,
  TOP_tgei,
  TOP_tgeiu,
  TOP_tgeu,
  TOP_tlt,
  TOP_tlti,
  TOP_tltiu,
  TOP_tltu,
  TOP_tne,
  TOP_tnei,
  TOP_lwc1,
  TOP_ldc1,
  TOP_lwxc1,
  TOP_ldxc1,
  TOP_swc1,
  TOP_sdc1,
  TOP_swxc1,
  TOP_sdxc1,
  TOP_abs_s,
  TOP_abs_d,
  TOP_add_s,
  TOP_add_d,
  TOP_c_f_s,
  TOP_c_f_d,
  TOP_c_t_s,
  TOP_c_t_d,
  TOP_c_un_s,
  TOP_c_un_d,
  TOP_c_or_s,
  TOP_c_or_d,
  TOP_c_eq_s,
  TOP_c_eq_d,
  TOP_c_neq_s,
  TOP_c_neq_d,
  TOP_c_ueq_s,
  TOP_c_ueq_d,
  TOP_c_olg_s,
  TOP_c_olg_d,
  TOP_c_olt_s,
  TOP_c_olt_d,
  TOP_c_uge_s,
  TOP_c_uge_d,
  TOP_c_ult_s,
  TOP_c_ult_d,
  TOP_c_oge_s,
  TOP_c_oge_d,
  TOP_c_ole_s,
  TOP_c_ole_d,
  TOP_c_ugt_s,
  TOP_c_ugt_d,
  TOP_c_ule_s,
  TOP_c_ule_d,
  TOP_c_ogt_s,
  TOP_c_ogt_d,
  TOP_c_sf_s,
  TOP_c_sf_d,
  TOP_c_st_s,
  TOP_c_st_d,
  TOP_c_ngle_s,
  TOP_c_ngle_d,
  TOP_c_gle_s,
  TOP_c_gle_d,
  TOP_c_seq_s,
  TOP_c_seq_d,
  TOP_c_sne_s,
  TOP_c_sne_d,
  TOP_c_ngl_s,
  TOP_c_ngl_d,
  TOP_c_gl_s,
  TOP_c_gl_d,
  TOP_c_lt_s,
  TOP_c_lt_d,
  TOP_c_nlt_s,
  TOP_c_nlt_d,
  TOP_c_nge_s,
  TOP_c_nge_d,
  TOP_c_ge_s,
  TOP_c_ge_d,
  TOP_c_le_s,
  TOP_c_le_d,
  TOP_c_nle_s,
  TOP_c_nle_d,
  TOP_c_ngt_s,
  TOP_c_ngt_d,
  TOP_c_gt_s,
  TOP_c_gt_d,
  TOP_div_s,
  TOP_div_d,
  TOP_mul_s,
  TOP_mul_d,
  TOP_neg_s,
  TOP_neg_d,
  TOP_sub_s,
  TOP_sub_d,
  TOP_sqrt_s,
  TOP_sqrt_d,
  TOP_madd_s,
  TOP_madd_d,
  TOP_msub_s,
  TOP_msub_d,
  TOP_nmadd_s,
  TOP_nmadd_d,
  TOP_nmsub_s,
  TOP_nmsub_d,
  TOP_recip_s,
  TOP_recip_d,
  TOP_rsqrt_s,
  TOP_rsqrt_d,
  TOP_cfc1,
  TOP_ctc1,
  TOP_mfc1,
  TOP_mtc1,
  TOP_dmfc1,
  TOP_dmtc1,
  TOP_mov_s,
  TOP_mov_d,
  TOP_movf_s,
  TOP_movf_d,
  TOP_movn_s,
  TOP_movn_d,
  TOP_movt_s,
  TOP_movt_d,
  TOP_movz_s,
  TOP_movz_d,
  TOP_cvt_d_s,
  TOP_cvt_d_w,
  TOP_cvt_d_l,
  TOP_cvt_l_s,
  TOP_cvt_l_d,
  TOP_cvt_s_d,
  TOP_cvt_s_w,
  TOP_cvt_s_l,
  TOP_cvt_w_s,
  TOP_cvt_w_d,
  TOP_ceil_w_s,
  TOP_ceil_w_d,
  TOP_ceil_l_s,
  TOP_ceil_l_d,
  TOP_floor_w_s,
  TOP_floor_w_d,
  TOP_floor_l_s,
  TOP_floor_l_d,
  TOP_round_w_s,
  TOP_round_w_d,
  TOP_round_l_s,
  TOP_round_l_d,
  TOP_trunc_w_s,
  TOP_trunc_w_d,
  TOP_trunc_l_s,
  TOP_trunc_l_d,
  TOP_bc1f,
  TOP_bc1t,
  TOP_asm,
  TOP_intrncall,
  TOP_spadjust,
  TOP_begin_pregtn,
  TOP_end_pregtn,
  TOP_bwd_bar,
  TOP_fwd_bar,
  TOP_label,
  TOP_c2_mvgr_r2g_h_u,
  TOP_c2_mvgr_r2g_h,
  TOP_c2_mvgr_r2g_w,
  TOP_c2_mvgr_r2g_h_u_i,
  TOP_c2_mvgr_r2g_h_i,
  TOP_c2_mvgr_r2g_w_i,
  TOP_c2_mvgr_r2s,
  TOP_c2_mvgr_g2r_ba_lh,
  TOP_c2_mvgr_g2r_ba_hh,
  TOP_c2_mvgr_g2r_ba_w,
  TOP_c2_mvgr_g2r_lh_i,
  TOP_c2_mvgr_g2r_hh_i,
  TOP_c2_mvgr_g2r_w_i,
  TOP_c2_mvgr_g2r_lh,
  TOP_c2_mvgr_g2r_hh,
  TOP_c2_mvgr_g2r_w,
  TOP_c2_mvgr_g2r_bh,
  TOP_c2_mvgr_g2r_bh_u,
  TOP_c2_mvgr_g2r_bv,
  TOP_c2_mvgr_g2r_bv_u,
  TOP_c2_mvgr_g2r_b4_i,
  TOP_c2_mvgr_g2r_b4,
  TOP_c2_mvgr_g2s,
  TOP_c2_mvgr_s2g,
  TOP_c2_mvgc_c2g,
  TOP_c2_mvgc_g2c,
  TOP_c2_ld_v_b_u,
  TOP_c2_ld_v_b,
  TOP_c2_ld_v_h,
  TOP_c2_ld_v_w,
  TOP_c2_ld_v_sw,
  TOP_c2_ld_v_m_b_u,
  TOP_c2_ld_v_m_b,
  TOP_c2_ld_v_m_h,
  TOP_c2_ld_v_m_w,
  TOP_c2_ld_s_h_u_p,
  TOP_c2_ld_s_h_u,
  TOP_c2_ld_s_h_p,
  TOP_c2_ld_s_h,
  TOP_c2_ld_s_w_p,
  TOP_c2_ld_s_w,
  TOP_c2_ld_s2s_ga_p,
  TOP_c2_ld_s2s_ga,
  TOP_c2_ld_s2s_sa_p,
  TOP_c2_ld_s2s_sa,
  TOP_c2_ld_v2g_b_u,
  TOP_c2_ld_v2g_b,
  TOP_c2_ld_v2g_h_u,
  TOP_c2_ld_v2g_h,
  TOP_c2_ld_v2g_w,
  TOP_c2_st_v_b,
  TOP_c2_st_v_h,
  TOP_c2_st_v_w,
  TOP_c2_st_v_m_b,
  TOP_c2_st_v_m_h,
  TOP_c2_st_v_m_w,
  TOP_c2_st_s_h,
  TOP_c2_st_s_h_p,
  TOP_c2_st_s_w,
  TOP_c2_st_s_w_p,
  TOP_c2_st_g2v_b,
  TOP_c2_st_g2v_h,
  TOP_c2_st_g2v_w,
  TOP_c2_ldi_s_h_u,
  TOP_c2_ldi_s_h,
  TOP_c2_ldi_s_w,
  TOP_c2_ldi_c,
  TOP_c2_ldi_v_b_u,
  TOP_c2_ldi_v_b,
  TOP_c2_ldi_v_h,
  TOP_c2_ldi_v_w,
  TOP_c2_ldi_v_m_b_u,
  TOP_c2_ldi_v_m_b,
  TOP_c2_ldi_v_m_h,
  TOP_c2_ldi_v_m_w,
  TOP_c2_ldi_v2g_b_u,
  TOP_c2_ldi_v2g_b,
  TOP_c2_ldi_v2g_h_u,
  TOP_c2_ldi_v2g_h,
  TOP_c2_ldi_v2g_w,
  TOP_c2_sti_v_b,
  TOP_c2_sti_v_h,
  TOP_c2_sti_v_w,
  TOP_c2_sti_v_m_b,
  TOP_c2_sti_v_m_h,
  TOP_c2_sti_v_m_w,
  TOP_c2_sti_c,
  TOP_c2_sti_s_h,
  TOP_c2_sti_s_w,
  TOP_c2_sti_g2v_b,
  TOP_c2_sti_g2v_h,
  TOP_c2_sti_g2v_w,
  TOP_c2_vadds_h,
  TOP_c2_vadds_w,
  TOP_c2_vadds_p,
  TOP_c2_vadds_h_c,
  TOP_c2_vadds_w_c,
  TOP_c2_vadds_p_c,
  TOP_c2_vsubs_h,
  TOP_c2_vsubs_h_sm,
  TOP_c2_vsubs_h_abs,
  TOP_c2_vsubs_h_abs_sm,
  TOP_c2_vabs_h,
  TOP_c2_vabs_h_sm,
  TOP_c2_vsubs_w,
  TOP_c2_vsubs_w_sm,
  TOP_c2_vsubs_w_abs,
  TOP_c2_vsubs_w_abs_sm,
  TOP_c2_vabs_w,
  TOP_c2_vabs_w_sm,
  TOP_c2_vsubs_p,
  TOP_c2_vsubs_p_sm,
  TOP_c2_vsubs_p_abs,
  TOP_c2_vsubs_p_abs_sm,
  TOP_c2_vabs_p,
  TOP_c2_vabs_p_sm,
  TOP_c2_vabs_acc,
  TOP_c2_vmul_h,
  TOP_c2_vmul_w,
  TOP_c2_vneg_h,
  TOP_c2_vneg_w,
  TOP_c2_vneg_p,
  TOP_c2_vshr_p,
  TOP_c2_vshr_h,
  TOP_c2_vshr_w,
  TOP_c2_vshl_p,
  TOP_c2_vshl_h,
  TOP_c2_vshl_w,
  TOP_c2_vclp,
  TOP_c2_vclp_p,
  TOP_c2_vclp_a,
  TOP_c2_vclp_s,
  TOP_c2_vclp_2,
  TOP_c2_vclp_n,
  TOP_c2_vclg_h_lt_and,
  TOP_c2_vclg_h_lt_or,
  TOP_c2_vclg_h_le_and,
  TOP_c2_vclg_h_le_or,
  TOP_c2_vclg_h_eq_and,
  TOP_c2_vclg_h_eq_or,
  TOP_c2_vclg_h_ge_and,
  TOP_c2_vclg_h_ge_or,
  TOP_c2_vclg_h_gt_and,
  TOP_c2_vclg_h_gt_or,
  TOP_c2_vclg_h_and,
  TOP_c2_vclg_h_or,
  TOP_c2_vclg_h_le,
  TOP_c2_vclg_h_lt,
  TOP_c2_vclg_h_ge,
  TOP_c2_vclg_h_gt,
  TOP_c2_vclg_w_lt_and,
  TOP_c2_vclg_w_lt_or,
  TOP_c2_vclg_w_le_and,
  TOP_c2_vclg_w_le_or,
  TOP_c2_vclg_w_eq_and,
  TOP_c2_vclg_w_eq_or,
  TOP_c2_vclg_w_ge_and,
  TOP_c2_vclg_w_ge_or,
  TOP_c2_vclg_w_gt_and,
  TOP_c2_vclg_w_gt_or,
  TOP_c2_vclg_w_and,
  TOP_c2_vclg_w_or,
  TOP_c2_vclg_w_le,
  TOP_c2_vclg_w_lt,
  TOP_c2_vclg_w_ge,
  TOP_c2_vclg_w_gt,
  TOP_c2_vclg_p_lt_and,
  TOP_c2_vclg_p_lt_or,
  TOP_c2_vclg_p_le_and,
  TOP_c2_vclg_p_le_or,
  TOP_c2_vclg_p_eq_and,
  TOP_c2_vclg_p_eq_or,
  TOP_c2_vclg_p_ge_and,
  TOP_c2_vclg_p_ge_or,
  TOP_c2_vclg_p_gt_and,
  TOP_c2_vclg_p_gt_or,
  TOP_c2_vclg_p_and,
  TOP_c2_vclg_p_or,
  TOP_c2_vclg_p_le,
  TOP_c2_vclg_p_eq,
  TOP_c2_vclg_p_ge,
  TOP_c2_vclg_p_gt,
  TOP_c2_vcmov_h_f,
  TOP_c2_vcmov_h_t,
  TOP_c2_vcmov_w_f,
  TOP_c2_vcmov_w_t,
  TOP_c2_lczero_z,
  TOP_c2_lczero_nz_fw,
  TOP_c2_lczero_nz_bw,
  TOP_c2_vrnd_h,
  TOP_c2_vrnd_w,
  TOP_c2_vspas,
  TOP_c2_vspel_mul_h,
  TOP_c2_vspel_mul_w,
  TOP_c2_vspel_adds,
  TOP_c2_vspel_mac_h,
  TOP_c2_vspel_mac_w,
  TOP_c2_mmul_s123,
  TOP_c2_mmul_h,
  TOP_c2_mmul_w,
  TOP_c2_vmov,
  TOP_c2_vmov_swin,
  TOP_c2_vcopy,
  TOP_c2_vcmpr_h_eq,
  TOP_c2_vcmpr_h_lt,
  TOP_c2_vcmpr_h_le,
  TOP_c2_vcmpr_h_gt,
  TOP_c2_vcmpr_h_ge,
  TOP_c2_vcmpr_w_eq,
  TOP_c2_vcmpr_w_lt,
  TOP_c2_vcmpr_w_le,
  TOP_c2_vcmpr_w_gt,
  TOP_c2_vcmpr_w_ge,
  TOP_c2_sad,
  TOP_c2_satd,
  TOP_c2_intra,
  TOP_c2_intra_0_1_9_14_16,
  TOP_c2_intra_2_3_8_10,
  TOP_c2_intra_4,
  TOP_c2_intra_5_11,
  TOP_c2_intra_12_13,
  TOP_c2_intra_15_17,
  TOP_c2_intra_6,
  TOP_c2_intra_7,
  TOP_c2_mvsel,
  TOP_c2_mvsel_zero_two,
  TOP_c2_bcst_q,
  TOP_c2_bcst_i,
  TOP_c2_vlcs_dc,
  TOP_c2_vlcs_ac,
  TOP_c2_vlcs_wb,
  TOP_c2_add_shl_g_i,
  TOP_c2_add_shr_g_i,
  TOP_c2_add_shl_g,
  TOP_c2_add_shr_g,
  TOP_c2_add_shl_r_h_i,
  TOP_c2_add_shr_r_h_i,
  TOP_c2_add_shl_r_w_i,
  TOP_c2_add_shr_r_w_i,
  TOP_c2_add_shl_r_h,
  TOP_c2_add_shr_r_h,
  TOP_c2_add_shl_r_w,
  TOP_c2_add_shr_r_w,
  TOP_c2_sub_g_abs_i,
  TOP_c2_subs_g_i,
  TOP_c2_sub_g_abs,
  TOP_c2_subs_g,
  TOP_c2_subs_r_h_i,
  TOP_c2_subs_r_w_i,
  TOP_c2_sub_r_abs_h_i,
  TOP_c2_sub_r_abs_w_i,
  TOP_c2_subs_r_h,
  TOP_c2_subs_r_w,
  TOP_c2_sub_r_abs_h,
  TOP_c2_sub_r_abs_w,
  TOP_c2_muls,
  TOP_c2_muls_r_h,
  TOP_c2_muls_r_w,
  TOP_c2_mads,
  TOP_c2_smads,
  TOP_c2_min,
  TOP_c2_max,
  TOP_c2_cmov,
  TOP_c2_mov_g,
  TOP_c2_mov_r,
  TOP_c2_mov_c_i,
  TOP_c2_mov_c,
  TOP_c2_mov_s_i,
  TOP_c2_mov_s,
  TOP_c2_clp,
  TOP_c2_clp_i,
  TOP_c2_chkrng,
  TOP_c2_scond_r_h_wb_eq,
  TOP_c2_scond_r_h_wb_lt,
  TOP_c2_scond_r_h_wb_le,
  TOP_c2_scond_r_h_wb_gt,
  TOP_c2_scond_r_h_wb_ge,
  TOP_c2_scond_r_wb_eq_i,
  TOP_c2_scond_r_wb_lt_i,
  TOP_c2_scond_r_wb_le_i,
  TOP_c2_scond_r_wb_gt_i,
  TOP_c2_scond_r_wb_ge_i,
  TOP_c2_scond_r_w_wb_eq,
  TOP_c2_scond_r_w_wb_lt,
  TOP_c2_scond_r_w_wb_le,
  TOP_c2_scond_r_w_wb_gt,
  TOP_c2_scond_r_w_wb_ge,
  TOP_c2_scond_r_w_wb_eq_i,
  TOP_c2_scond_r_w_wb_lt_i,
  TOP_c2_scond_r_w_wb_le_i,
  TOP_c2_scond_r_w_wb_gt_i,
  TOP_c2_scond_r_w_wb_ge_i,
  TOP_c2_scond_r_h_eq,
  TOP_c2_scond_r_h_lt,
  TOP_c2_scond_r_h_le,
  TOP_c2_scond_r_h_gt,
  TOP_c2_scond_r_h_ge,
  TOP_c2_scond_r_h_eq_i,
  TOP_c2_scond_r_h_lt_i,
  TOP_c2_scond_r_h_le_i,
  TOP_c2_scond_r_h_gt_i,
  TOP_c2_scond_r_h_ge_i,
  TOP_c2_scond_r_w_eq,
  TOP_c2_scond_r_w_lt,
  TOP_c2_scond_r_w_le,
  TOP_c2_scond_r_w_gt,
  TOP_c2_scond_r_w_ge,
  TOP_c2_scond_r_w_eq_i,
  TOP_c2_scond_r_w_lt_i,
  TOP_c2_scond_r_w_le_i,
  TOP_c2_scond_r_w_gt_i,
  TOP_c2_scond_r_w_ge_i,
  TOP_c2_scond_eq,
  TOP_c2_scond_lt,
  TOP_c2_scond_le,
  TOP_c2_scond_gt,
  TOP_c2_scond_ge,
  TOP_c2_scond_eq_i,
  TOP_c2_scond_lt_i,
  TOP_c2_scond_le_i,
  TOP_c2_scond_gt_i,
  TOP_c2_scond_ge_i,
  TOP_c2_bop_ls,
  TOP_c2_bop_rs,
  TOP_c2_bop_and,
  TOP_c2_bop_or,
  TOP_c2_bop_xor,
  TOP_c2_bop_ls_i,
  TOP_c2_bop_rs_i,
  TOP_c2_bop_and_i,
  TOP_c2_bop_or_i,
  TOP_c2_bop_xor_i,
  TOP_c2_bdep_l,
  TOP_c2_bdep_m,
  TOP_c2_bxtr_u_l,
  TOP_c2_bxtr_s_l,
  TOP_c2_bxtr_u_m,
  TOP_c2_bxtr_s_m,
  TOP_c2_sum4_c,
  TOP_c2_sum4_g,
  TOP_c2_sum4_sw,
  TOP_c2_sum4_r,
  TOP_c2_med,
  TOP_c2_gsums,
  TOP_c2_wrap,
  TOP_c2_clzob_zd,
  TOP_c2_clzob_za,
  TOP_c2_clzob_od,
  TOP_c2_clzob_oa,
  TOP_c2_clzob_zd_i,
  TOP_c2_clzob_za_i,
  TOP_c2_clzob_od_i,
  TOP_c2_clzob_oa_i,
  TOP_c2_thctrl_lock,
  TOP_c2_thctrl_unlock,
  TOP_c2_thctrl_deact,
  TOP_c2_thctrl_act,
  TOP_c2_thctrl_mode4,
  TOP_c2_thctrl_mode5,
  TOP_c2_thctrl_mode6,
  TOP_c2_joint,
  TOP_c2_thread_major,
  TOP_c2_thread_minor,
  TOP_c2_sum3_saddr,
  TOP_peripheral_rw_begin,
  TOP_peripheral_rw_end,
  TOP_c2_br_f,
  TOP_c2_br_t,
  TOP_c2_fork_m,
  TOP_c2_fork_n,
  TOP_c2_macro,
  TOP_nop,
  TOP_noop,
  TOP_UNDEFINED
} TOP;

typedef mUINT16 mTOP;



extern const char* TOP_Name(TOP topcode);
# 64 "targ_isa_subset.h" 2

typedef enum {
  ISA_SUBSET_MIPS4,
  ISA_SUBSET_UNDEFINED,
  ISA_SUBSET_MIN=ISA_SUBSET_MIPS4,
  ISA_SUBSET_MAX=ISA_SUBSET_MIPS4
} ISA_SUBSET;
extern ISA_SUBSET ISA_SUBSET_Value;

extern const char* ISA_SUBSET_Name( ISA_SUBSET subset );
extern INT ISA_SUBSET_Member( ISA_SUBSET subset,
                              TOP opcode );
# 2 "targ_isa_registers.c" 2
# 1 "targ_isa_registers.h" 1
# 219 "targ_isa_registers.h"
typedef enum {
  ISA_REGISTER_CLASS_UNDEFINED,
  ISA_REGISTER_CLASS_integer,
  ISA_REGISTER_CLASS_float,
  ISA_REGISTER_CLASS_fcc,
  ISA_REGISTER_CLASS_hilo,
  ISA_REGISTER_CLASS_cop_creg,
  ISA_REGISTER_CLASS_cop_breg,
  ISA_REGISTER_CLASS_cop_vreg,
  ISA_REGISTER_CLASS_cop_sreg,
  ISA_REGISTER_CLASS_float_odd,
  ISA_REGISTER_CLASS_copc,
  ISA_REGISTER_CLASS_control,
  ISA_REGISTER_CLASS_special,
  ISA_REGISTER_CLASS_loop,
  ISA_REGISTER_CLASS_accum,
  ISA_REGISTER_CLASS_addr,
  ISA_REGISTER_CLASS_addr_size,
  ISA_REGISTER_CLASS_c2accum,
  ISA_REGISTER_CLASS_c2acc_ctrl,
  ISA_REGISTER_CLASS_c2mvsel,
  ISA_REGISTER_CLASS_c2vlcs,
  ISA_REGISTER_CLASS_c2movpat,
  ISA_REGISTER_CLASS_MIN = ISA_REGISTER_CLASS_integer,
  ISA_REGISTER_CLASS_MAX = ISA_REGISTER_CLASS_c2movpat,
  ISA_REGISTER_CLASS_COUNT = ISA_REGISTER_CLASS_MAX - ISA_REGISTER_CLASS_MIN + 1
} ISA_REGISTER_CLASS;

typedef mUINT8 mISA_REGISTER_CLASS;
# 259 "targ_isa_registers.h"
typedef struct {
  mUINT8 isa_mask;
  mUINT8 min_regnum;
  mUINT8 max_regnum;
  mUINT8 bit_size;
  mBOOL can_store;
  mBOOL multiple_save;
  const char *name;
  const char *reg_name[(31)+1];
} ISA_REGISTER_CLASS_INFO;

typedef enum {
  ISA_REGISTER_SUBCLASS_UNDEFINED,
  ISA_REGISTER_SUBCLASS_MIN = 1,
  ISA_REGISTER_SUBCLASS_MAX = 0,
  ISA_REGISTER_SUBCLASS_COUNT = ISA_REGISTER_SUBCLASS_MAX - ISA_REGISTER_SUBCLASS_MIN + 1
} ISA_REGISTER_SUBCLASS;

typedef mUINT8 mISA_REGISTER_SUBCLASS;






typedef struct {
  const char *name;
  mISA_REGISTER_CLASS rclass;
  mUINT8 count;
  mUINT8 members[(31)+1];
  const char *reg_name[(31)+1];
} ISA_REGISTER_SUBCLASS_INFO;

static __inline const ISA_REGISTER_CLASS_INFO *ISA_REGISTER_CLASS_Info(
  ISA_REGISTER_CLASS rc
)
{
  extern const ISA_REGISTER_CLASS_INFO ISA_REGISTER_CLASS_info[];
  extern mUINT8 ISA_REGISTER_CLASS_info_index[];
  INT index = ISA_REGISTER_CLASS_info_index[(INT)rc];
  return &ISA_REGISTER_CLASS_info[index];
}

static __inline INT ISA_REGISTER_CLASS_INFO_First_Reg(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->min_regnum;
}

static __inline INT ISA_REGISTER_CLASS_INFO_Last_Reg(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->max_regnum;
}

static __inline INT ISA_REGISTER_CLASS_INFO_Bit_Size(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->bit_size;
}

static __inline BOOL ISA_REGISTER_CLASS_INFO_Can_Store(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->can_store;
}

static __inline BOOL ISA_REGISTER_CLASS_INFO_Multiple_Save(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->multiple_save;
}

static __inline const char *ISA_REGISTER_CLASS_INFO_Name(
  const ISA_REGISTER_CLASS_INFO *info
)
{
  return info->name;
}

static __inline const char *ISA_REGISTER_CLASS_INFO_Reg_Name(
  const ISA_REGISTER_CLASS_INFO *info,
  INT reg_index
)
{
  return info->reg_name[reg_index];
}

static __inline const ISA_REGISTER_SUBCLASS_INFO *ISA_REGISTER_SUBCLASS_Info(
  ISA_REGISTER_SUBCLASS sc
)
{
  extern const ISA_REGISTER_SUBCLASS_INFO ISA_REGISTER_SUBCLASS_info[];
  return &ISA_REGISTER_SUBCLASS_info[sc];
}

static __inline const char *ISA_REGISTER_SUBCLASS_INFO_Name(
  const ISA_REGISTER_SUBCLASS_INFO *info
)
{
  return info->name;
}

static __inline ISA_REGISTER_CLASS ISA_REGISTER_SUBCLASS_INFO_Class(
  const ISA_REGISTER_SUBCLASS_INFO *info
)
{
  return (ISA_REGISTER_CLASS)info->rclass;
}

static __inline INT ISA_REGISTER_SUBCLASS_INFO_Count(
  const ISA_REGISTER_SUBCLASS_INFO *info
)
{
  return info->count;
}

static __inline UINT ISA_REGISTER_SUBCLASS_INFO_Member(
  const ISA_REGISTER_SUBCLASS_INFO *info,
  INT n
)
{
  return info->members[n];
}

static __inline const char *ISA_REGISTER_SUBCLASS_INFO_Reg_Name(
  const ISA_REGISTER_SUBCLASS_INFO *info,
  INT n
)
{
  return info->reg_name[n];
}

extern void ISA_REGISTER_Initialize(void);
# 3 "targ_isa_registers.c" 2

const ISA_REGISTER_CLASS_INFO ISA_REGISTER_CLASS_info[] = {
  { 0x00, 0, -1, 0, 0, 0, "UNDEFINED", { 0 } },
  { 0x01, 0, 31, 32, 1, 0, "integer",
    { "$0", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9", "$10",
      "$11", "$12", "$13", "$14", "$15", "$16", "$17", "$18", "$19", "$20",
      "$21", "$22", "$23", "$24", "$25", "$26", "$27", "$gp", "$sp", "$30",
      "$31" } },
  { 0x01, 0, 15, 32, 1, 0, "float",
    { "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12", "$f14", "$f16", "$f18", "$f20", "$f22", "$f24",
      "$f26", "$f28", "$f30" } },
  { 0x01, 0, 7, 1, 0, 0, "fcc",
    { "$fcc0", "$fcc1", "$fcc2", "$fcc3", "$fcc4", "$fcc5", "$fcc6", "$fcc7" } },
  { 0x01, 0, 0, 64, 0, 0, "hilo",
    { "$hilo" } },
  { 0x01, 0, 31, 32, 1, 0, "cop_creg",
    { "$c0", "$c1", "$c2", "$c3", "$c4", "$c5", "$c6", "$c7", "$c8", "$c9", "$c10", "$c11", "$c12",
      "$c13", "$c14", "$c15", "$c16", "$c17", "$c18", "$c19", "$c20", "$c21", "$c22", "$c23", "$c24", "$c25",
      "$c26", "$c27", "$c28", "$c29", "$c30", "$c31" } },
  { 0x01, 0, 31, 32, 1, 0, "cop_breg",
    { "$b0", "$b1", "$b2", "$b3", "$b4", "$b5", "$b6", "$b7", "$b8", "$b9", "$b10", "$b11", "$b12",
      "$b13", "$b14", "$b15", "$b16", "$b17", "$b18", "$b19", "$b20", "$b21", "$b22", "$b23", "$b24", "$b25",
      "$b26", "$b27", "$b28", "$b29", "$b30", "$b31" } },
  { 0x01, 0, 31, 32, 1, 0, "cop_vreg",
    { "$v0", "$v1", "$v2", "$v3", "$v4", "$v5", "$v6", "$v7", "$v8", "$v9", "$v10", "$v11", "$v12",
      "$v13", "$v14", "$v15", "$v16", "$v17", "$v18", "$v19", "$v20", "$v21", "$v22", "$v23", "$v24", "$v25",
      "$v26", "$v27", "$v28", "$v29", "$v30", "$v31" } },
  { 0x01, 0, 31, 32, 1, 0, "cop_sreg",
    { "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$s8", "$s9", "$s10", "$s11", "$s12",
      "$s13", "$s14", "$s15", "$s16", "$s17", "$s18", "$s19", "$s20", "$s21", "$s22", "$s23", "$s24", "$s25",
      "$s26", "$s27", "$s28", "$s29", "$s30", "$s31" } },
  { 0x01, 0, 15, 64, 1, 0, "float_odd",
    { "$f1", "$f3", "$f5", "$f7", "$f9", "$f11", "$f13", "$f15", "$f17", "$f19", "$f21", "$f23", "$f25",
      "$f27", "$f29", "$f31" } },
  { 0x01, 0, 0, 1, 0, 0, "copc",
    { "$copc0" } },
  { 0x01, 0, 31, 32, 1, 0, "control",
    { "ja", "ra", "$lp0", "$lp1", "$lp2", "$lp3", "$c6", "$c7", "$c8", "$c9", "$c10", "$c11", "$c12",
      "$c13", "$c14", "$c15", "$c16", "$c17", "$c18", "$c19", "$c20", "$c21", "$c22", "$c23", "$c24", "$c25",
      "$c26", "$c27", "$c28", "$c29", "$c30", "$c31" } },
  { 0x01, 0, 31, 32, 1, 0, "special",
    { "$ar0", "$ar1", "$ar2", "$ar3", "$ar4", "$ar5", "$ar6", "$ar7", "$as0", "$as1", "$as2", "$as3", "$as4",
      "$as5", "$as6", "$as7", "$acc0", "$acc1", "$acc2", "$acc3", "hi", "$s21", "$s22", "$s23", "$s24", "$s25",
      "$s26", "$s27", "$s28", "$s29", "$s30", "$s31" } },
  { 0x01, 0, 3, 4, 1, 0, "loop",
    { "$lp0", "$lp1", "$lp2", "$lp3" } },
  { 0x01, 0, 3, 4, 1, 0, "accum",
    { "$acc0", "$acc1", "$acc2", "$acc3" } },
  { 0x01, 0, 7, 8, 1, 0, "addr",
    { "$ar0", "$ar1", "$ar2", "$ar3", "$ar4", "$ar5", "$ar6", "$ar7" } },
  { 0x01, 0, 7, 8, 1, 0, "addr_size",
    { "$as0", "$as1", "$as2", "$as3", "$as4", "$as5", "$as6", "$as7" } },
  { 0x01, 0, 1, 4, 1, 0, "c2accum",
    { "", "$c2acc" } },
  { 0x01, 0, 1, 4, 1, 0, "c2acc_ctrl",
    { "", "$c2acc_ctrl" } },
  { 0x01, 0, 1, 4, 1, 0, "c2mvsel",
    { "", "$c2mvsel" } },
  { 0x01, 0, 1, 4, 1, 0, "c2vlcs",
    { "", "$c2vlcs" } },
  { 0x01, 0, 1, 4, 1, 0, "c2movpat",
    { "", "$c2movpat" } },
};

mUINT8 ISA_REGISTER_CLASS_info_index[] = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
};

const ISA_REGISTER_SUBCLASS_INFO ISA_REGISTER_SUBCLASS_info[] = {
  { "UNDEFINED", ISA_REGISTER_CLASS_UNDEFINED, 0, { 0 }, { 0 } },
};

void ISA_REGISTER_Initialize(void)
{
  INT rc;
  INT mask = 1 << (INT)ISA_SUBSET_Value;
  for (rc = ISA_REGISTER_CLASS_MIN; rc <= ISA_REGISTER_CLASS_MAX; ++rc) {
    INT i = ISA_REGISTER_CLASS_info_index[rc];
    const ISA_REGISTER_CLASS_INFO *info = &ISA_REGISTER_CLASS_info[i];
    while ((info->isa_mask & mask) == 0) ++info, ++i;
    ISA_REGISTER_CLASS_info_index[rc] = i;
  }
}
