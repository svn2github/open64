	.file	"reload1.c"
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.text
.Ltext0:
.globl reload_in_progress
	.bss
	.align 4
	.type	reload_in_progress, @object
	.size	reload_in_progress, 4
reload_in_progress:
	.zero	4
	.local	reg_eliminate
	.comm	reg_eliminate,4,4
	.section	.rodata
	.align 32
	.type	reg_eliminate_1, @object
	.size	reg_eliminate_1, 72
reg_eliminate_1:
	.long	0
	.long	29
	.long	0
	.long	30
	.long	0
	.long	17
	.long	75
	.long	29
	.long	75
	.long	30
	.long	75
	.long	17
	.long	1
	.long	29
	.long	1
	.long	30
	.long	1
	.long	17
.LC0:
	.string	"foo"
	.text
.globl init_reload
	.type	init_reload, @function
init_reload:
.LFB15:
	.file 1 "../../../kg++fe/gnu/reload1.c"
	.loc 1 468 0
	pushl	%ebp
.LCFI0:
	movl	%esp, %ebp
.LCFI1:
	pushl	%esi
.LCFI2:
	pushl	%ebx
.LCFI3:
	addl	$-128, %esp
.LCFI4:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 477 0
	movl	$4, 4(%esp)
	movl	$0, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -108(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L2
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2
	movl	$5, -104(%ebp)
	jmp	.L5
.L2:
	movl	$4, -104(%ebp)
.L5:
	movl	$181, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -100(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L6
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L6
	movl	$5, -96(%ebp)
	jmp	.L9
.L6:
	movl	$4, -96(%ebp)
.L9:
	movl	-108(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	-100(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -92(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L10
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L10
	movl	$5, -88(%ebp)
	jmp	.L13
.L10:
	movl	$4, -88(%ebp)
.L13:
	movl	-92(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	-88(%ebp), %esi
	movl	%esi, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -32(%ebp)
	.loc 1 481 0
	movb	$0, spill_indirect_levels@GOTOFF(%ebx)
	.loc 1 483 0
	jmp	.L14
.L15:
	.loc 1 485 0
	movzbl	spill_indirect_levels@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movb	%al, spill_indirect_levels@GOTOFF(%ebx)
	.loc 1 486 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L16
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L16
	movl	$5, -84(%ebp)
	jmp	.L19
.L16:
	movl	$4, -84(%ebp)
.L19:
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -32(%ebp)
.L14:
	.loc 1 483 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	jne	.L15
	.loc 1 491 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L21
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L21
	movl	$5, -80(%ebp)
	jmp	.L24
.L21:
	movl	$4, -80(%ebp)
.L24:
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	$78, (%esp)
	call	gen_rtx_fmt_s@PLT
	movl	%eax, -76(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L25
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L25
	movl	$5, -72(%ebp)
	jmp	.L28
.L25:
	movl	$4, -72(%ebp)
.L28:
	movl	-76(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -32(%ebp)
	.loc 1 492 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	memory_address_p@PLT
	movl	%eax, %edx
	movl	indirect_symref_ok@GOT(%ebx), %eax
	movb	%dl, (%eax)
	.loc 1 496 0
	movl	$0, -36(%ebp)
	jmp	.L29
.L30:
	.loc 1 498 0
	movl	-36(%ebp), %ecx
	movl	%ecx, -68(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L31
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L31
	movl	$5, -64(%ebp)
	jmp	.L34
.L31:
	movl	$4, -64(%ebp)
.L34:
	movl	-68(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -60(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L35
	movl	$17, -56(%ebp)
	jmp	.L37
.L35:
	movl	$30, -56(%ebp)
.L37:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L38
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L38
	movl	$5, -52(%ebp)
	jmp	.L41
.L38:
	movl	$4, -52(%ebp)
.L41:
	movl	-56(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	-52(%ebp), %esi
	movl	%esi, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -48(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L42
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L42
	movl	$5, -44(%ebp)
	jmp	.L45
.L42:
	movl	$4, -44(%ebp)
.L45:
	movl	-60(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-44(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -32(%ebp)
	.loc 1 503 0
	movl	$4, 4(%esp)
	movl	$0, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -32(%ebp)
	.loc 1 505 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	je	.L46
	.loc 1 507 0
	movl	double_reg_address_ok@GOT(%ebx), %eax
	movb	$1, (%eax)
	.loc 1 508 0
	jmp	.L48
.L46:
	.loc 1 496 0
	addl	$1, -36(%ebp)
.L29:
	cmpl	$175, -36(%ebp)
	jle	.L30
.L48:
	.loc 1 513 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, (%esp)
	call	gcc_obstack_init@PLT
.LBB2:
	.loc 1 514 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -28(%ebp)
.LBB3:
	movl	-28(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	$0, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-20(%ebp), %eax
	jge	.L49
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L49:
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	addl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE3:
.LBB4:
	movl	-28(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L51
	movl	-16(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L51:
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-16(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L53
	movl	-16(%ebp), %eax
	movl	16(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
.L53:
	movl	-16(%ebp), %eax
	movl	12(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-12(%ebp), %eax
.LBE4:
.LBE2:
	movl	%eax, %edx
	movl	reload_startobj@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 516 0
	movl	$1, 4(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_initialize@PLT
	.loc 1 517 0
	movl	$1, 4(%esp)
	leal	pseudos_counted@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_initialize@PLT
	.loc 1 518 0
	subl	$-128, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE15:
	.size	init_reload, .-init_reload
	.local	unused_insn_chains
	.comm	unused_insn_chains,4,4
.globl new_insn_chain
	.type	new_insn_chain, @function
new_insn_chain:
.LFB16:
	.loc 1 526 0
	pushl	%ebp
.LCFI5:
	movl	%esp, %ebp
.LCFI6:
	pushl	%esi
.LCFI7:
	pushl	%ebx
.LCFI8:
	subl	$48, %esp
.LCFI9:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 529 0
	movl	unused_insn_chains@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L57
.LBB5:
	.loc 1 532 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -28(%ebp)
.LBB6:
	movl	-28(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	$236, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-20(%ebp), %eax
	jge	.L59
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L59:
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	addl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE6:
.LBB7:
	movl	-28(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L61
	movl	-16(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L61:
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-16(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L63
	movl	-16(%ebp), %eax
	movl	16(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
.L63:
	movl	-16(%ebp), %eax
	movl	12(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-12(%ebp), %eax
.LBE7:
.LBE5:
	.loc 1 531 0
	movl	%eax, -32(%ebp)
	.loc 1 533 0
	movl	-32(%ebp), %eax
	addl	$20, %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_initialize@PLT
	.loc 1 534 0
	movl	-32(%ebp), %eax
	addl	$36, %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_initialize@PLT
	jmp	.L65
.L57:
	.loc 1 538 0
	movl	unused_insn_chains@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	.loc 1 539 0
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, unused_insn_chains@GOTOFF(%ebx)
.L65:
	.loc 1 541 0
	movl	-32(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-9, %eax
	movb	%al, 234(%edx)
	.loc 1 542 0
	movl	-32(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-3, %eax
	movb	%al, 234(%edx)
	.loc 1 543 0
	movl	-32(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-2, %eax
	movb	%al, 234(%edx)
	.loc 1 544 0
	movl	-32(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-5, %eax
	movb	%al, 234(%edx)
	.loc 1 545 0
	movl	-32(%ebp), %eax
	.loc 1 546 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE16:
	.size	new_insn_chain, .-new_insn_chain
	.section	.rodata
	.type	__FUNCTION__.14459, @object
	.size	__FUNCTION__.14459, 23
__FUNCTION__.14459:
	.string	"compute_use_by_pseudos"
.LC1:
	.string	"../../../kg++fe/gnu/reload1.c"
	.text
.globl compute_use_by_pseudos
	.type	compute_use_by_pseudos, @function
compute_use_by_pseudos:
.LFB17:
	.loc 1 555 0
	pushl	%ebp
.LCFI10:
	movl	%esp, %ebp
.LCFI11:
	pushl	%edi
.LCFI12:
	pushl	%esi
.LCFI13:
	pushl	%ebx
.LCFI14:
	subl	$92, %esp
.LCFI15:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
.LBB8:
	.loc 1 558 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	$1, -44(%ebp)
	movl	$16, -40(%ebp)
	movl	$1, -36(%ebp)
	jmp	.L68
.L69:
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
.L68:
	cmpl	$0, -48(%ebp)
	je	.L70
	movl	-48(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-44(%ebp), %eax
	jb	.L69
.L70:
	cmpl	$0, -48(%ebp)
	je	.L75
	movl	-48(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-44(%ebp), %eax
	je	.L75
	movl	$0, -40(%ebp)
	movl	$0, -36(%ebp)
	jmp	.L75
.L78:
.LBB9:
	movl	-36(%ebp), %eax
	movl	-48(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L79
	jmp	.L81
.L82:
.LBB10:
	movl	-40(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	andl	-32(%ebp), %eax
	testl	%eax, %eax
	je	.L83
	movl	-28(%ebp), %eax
	notl	%eax
	andl	%eax, -32(%ebp)
	movl	-48(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-36(%ebp), %eax
	sall	$5, %eax
	addl	-40(%ebp), %eax
	movl	%eax, -52(%ebp)
.LBB11:
	movl	-52(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	jns	.L85
	movl	reload_completed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L89
	leal	__FUNCTION__.14459@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$579, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L85:
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-52(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -20(%ebp)
	jmp	.L90
.L91:
	movl	-20(%ebp), %eax
	addl	-24(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -76(%ebp)
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-20(%ebp), %eax
	addl	-24(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L95
	movl	%esi, %edi
	xorl	%esi, %esi
.L95:
	movl	-72(%ebp), %eax
	orl	%esi, %eax
	movl	-68(%ebp), %edx
	orl	%edi, %edx
	movl	8(%ebp), %ecx
	movl	-76(%ebp), %edi
	movl	%eax, (%ecx,%edi,8)
	movl	%edx, 4(%ecx,%edi,8)
.L90:
	cmpl	$0, -20(%ebp)
	setg	%al
	subl	$1, -20(%ebp)
	testb	%al, %al
	jne	.L91
.L89:
.LBE11:
	cmpl	$0, -32(%ebp)
	je	.L79
.L83:
.LBE10:
	addl	$1, -40(%ebp)
.L81:
	cmpl	$31, -40(%ebp)
	jbe	.L82
.L79:
	movl	$0, -40(%ebp)
.LBE9:
	addl	$1, -36(%ebp)
.L77:
	cmpl	$3, -36(%ebp)
	jbe	.L78
	movl	$0, -36(%ebp)
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
.L75:
	cmpl	$0, -48(%ebp)
	jne	.L77
.LBE8:
	.loc 1 580 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE17:
	.size	compute_use_by_pseudos, .-compute_use_by_pseudos
	.section	.rodata
	.type	__FUNCTION__.14535, @object
	.size	__FUNCTION__.14535, 30
__FUNCTION__.14535:
	.string	"replace_pseudos_in_call_usage"
	.text
	.type	replace_pseudos_in_call_usage, @function
replace_pseudos_in_call_usage:
.LFB18:
	.loc 1 590 0
	pushl	%ebp
.LCFI16:
	movl	%esp, %ebp
.LCFI17:
	pushl	%ebx
.LCFI18:
	subl	$52, %esp
.LCFI19:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 591 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 596 0
	cmpl	$0, -28(%ebp)
	je	.L124
	.loc 1 599 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -24(%ebp)
	.loc 1 600 0
	cmpl	$71, -24(%ebp)
	jne	.L99
.LBB12:
	.loc 1 602 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 604 0
	cmpl	$175, -8(%ebp)
	jbe	.L124
	.loc 1 607 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -28(%ebp)
	.loc 1 608 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	je	.L102
	.loc 1 610 0
	movl	8(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 611 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_pseudos_in_call_usage
	.loc 1 612 0
	jmp	.L124
.L102:
	.loc 1 615 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L104
	.loc 1 616 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	jmp	.L124
.L104:
	.loc 1 617 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L107
	.loc 1 618 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	jmp	.L124
.L107:
	.loc 1 619 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L109
	.loc 1 620 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	jmp	.L124
.L109:
	.loc 1 621 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L111
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-8(%ebp), %eax
	je	.L113
.L111:
	.loc 1 623 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 621 0
	jmp	.L124
.L113:
	.loc 1 625 0
	leal	__FUNCTION__.14535@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$625, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L99:
.LBE12:
	.loc 1 629 0
	cmpl	$76, -24(%ebp)
	jne	.L114
	.loc 1 631 0
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-28(%ebp), %ecx
	addl	$4, %ecx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	replace_pseudos_in_call_usage
	.loc 1 632 0
	jmp	.L124
.L114:
	.loc 1 636 0
	movl	-24(%ebp), %eax
	movl	rtx_format@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -20(%ebp)
	.loc 1 637 0
	movl	$0, -16(%ebp)
	jmp	.L116
.L117:
	.loc 1 638 0
	movl	-20(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L118
	.loc 1 639 0
	movl	-16(%ebp), %eax
	sall	$3, %eax
	addl	-28(%ebp), %eax
	leal	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	replace_pseudos_in_call_usage
	jmp	.L120
.L118:
	.loc 1 640 0
	movl	-20(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L120
	.loc 1 641 0
	movl	$0, -12(%ebp)
	jmp	.L122
.L123:
	.loc 1 642 0
	movl	-16(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	leal	4(%eax), %edx
	movl	-12(%ebp), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	replace_pseudos_in_call_usage
	.loc 1 641 0
	addl	$1, -12(%ebp)
.L122:
	movl	-16(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-12(%ebp), %eax
	jg	.L123
.L120:
	.loc 1 637 0
	addl	$1, -16(%ebp)
	addl	$1, -20(%ebp)
.L116:
	movl	-24(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-16(%ebp), %eax
	jg	.L117
.L124:
	.loc 1 643 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE18:
	.size	replace_pseudos_in_call_usage, .-replace_pseudos_in_call_usage
	.local	verbose_warned.14749
	.comm	verbose_warned.14749,4,4
	.section	.rodata
	.type	__FUNCTION__.14731, @object
	.size	__FUNCTION__.14731, 7
__FUNCTION__.14731:
	.string	"reload"
	.align 4
.LC2:
	.string	"frame size too large for reliable stack checking"
	.align 4
.LC3:
	.string	"try reducing the number of local variables"
	.text
.globl reload
	.type	reload, @function
reload:
.LFB19:
	.loc 1 673 0
	pushl	%ebp
.LCFI20:
	movl	%esp, %ebp
.LCFI21:
	pushl	%edi
.LCFI22:
	pushl	%esi
.LCFI23:
	pushl	%ebx
.LCFI24:
	subl	$284, %esp
.LCFI25:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 680 0
	call	init_recog@PLT
	.loc 1 682 0
	movl	$0, failure@GOTOFF(%ebx)
.LBB13:
	.loc 1 684 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -132(%ebp)
.LBB14:
	movl	-132(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	$0, -124(%ebp)
	movl	-128(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-128(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-124(%ebp), %eax
	jge	.L126
	movl	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L126:
	movl	-128(%ebp), %eax
	movl	12(%eax), %edx
	movl	-124(%ebp), %eax
	addl	%eax, %edx
	movl	-128(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE14:
.LBB15:
	movl	-132(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -116(%ebp)
	movl	-120(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-116(%ebp), %eax
	jne	.L128
	movl	-120(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L128:
	movl	-120(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-120(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-120(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-120(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-120(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-120(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-120(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-120(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L130
	movl	-120(%ebp), %eax
	movl	16(%eax), %edx
	movl	-120(%ebp), %eax
	movl	%edx, 12(%eax)
.L130:
	movl	-120(%ebp), %eax
	movl	12(%eax), %edx
	movl	-120(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-116(%ebp), %eax
.LBE15:
.LBE13:
	movl	%eax, %edx
	movl	reload_firstobj@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 688 0
	movl	$-99, 4(%esp)
	movl	$0, (%esp)
	call	emit_note@PLT
	.loc 1 691 0
	call	get_max_uid@PLT
	movl	%eax, %edx
	movl	reload_first_uid@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 699 0
	leal	spill_stack_slot@GOTOFF(%ebx), %eax
	movl	%eax, %edx
	movl	$704, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 700 0
	leal	spill_stack_slot_width@GOTOFF(%ebx), %eax
	movl	%eax, %edx
	movl	$704, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 704 0
	call	init_save_areas@PLT
	.loc 1 710 0
	movl	$176, -148(%ebp)
	jmp	.L132
.L133:
	.loc 1 711 0
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	mark_home_live@PLT
	.loc 1 710 0
	addl	$1, -148(%ebp)
.L132:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L133
	.loc 1 715 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	297(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L135
	.loc 1 716 0
	movl	$0, -148(%ebp)
	jmp	.L137
.L138:
	.loc 1 717 0
	movl	-148(%ebp), %eax
	movl	call_used_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L139
	movl	-148(%ebp), %eax
	movl	fixed_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L139
	.loc 1 718 0
	movl	-148(%ebp), %edx
	movl	regs_ever_live@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
.L139:
	.loc 1 716 0
	addl	$1, -148(%ebp)
.L137:
	cmpl	$175, -148(%ebp)
	jle	.L138
.L135:
	.loc 1 730 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$4, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 731 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$4, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 732 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$4, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_equiv_init@GOTOFF(%ebx)
	.loc 1 733 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$4, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 734 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$4, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_max_ref_width@GOTOFF(%ebx)
	.loc 1 735 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$2, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_old_renumber@GOTOFF(%ebx)
	.loc 1 736 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%eax,%eax), %ecx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	reg_old_renumber@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
	.loc 1 737 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, pseudo_forbidden_regs@GOTOFF(%ebx)
	.loc 1 739 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$24, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, pseudo_previous_regs@GOTOFF(%ebx)
.LBB16:
	.loc 1 742 0
	leal	bad_spill_regs_global@GOTOFF(%ebx), %eax
	movl	%eax, -112(%ebp)
	movl	-112(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-112(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-112(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE16:
	.loc 1 751 0
	movl	$0, num_eliminable_invariants@GOTOFF(%ebx)
	.loc 1 752 0
	movl	8(%ebp), %eax
	movl	%eax, -144(%ebp)
	jmp	.L142
.L143:
.LBB17:
	.loc 1 754 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L144
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L146
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -268(%ebp)
	jmp	.L148
.L146:
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -268(%ebp)
.L148:
	movl	-268(%ebp), %eax
	movl	%eax, -272(%ebp)
	jmp	.L149
.L144:
	movl	$0, -272(%ebp)
.L149:
	movl	-272(%ebp), %edx
	movl	%edx, -108(%ebp)
	.loc 1 759 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L150
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	jne	.L150
	movl	-144(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L150
	.loc 1 761 0
	movl	-144(%ebp), %eax
	movb	$0, 2(%eax)
.L150:
	.loc 1 763 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L154
	movl	$0, 8(%esp)
	movl	$27, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	je	.L154
	.loc 1 765 0
	movl	$0, -148(%ebp)
	jmp	.L157
.L158:
	.loc 1 766 0
	movl	-148(%ebp), %eax
	movl	call_used_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L159
	.loc 1 767 0
	movl	-148(%ebp), %edx
	movl	regs_ever_live@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
.L159:
	.loc 1 765 0
	addl	$1, -148(%ebp)
.L157:
	cmpl	$175, -148(%ebp)
	jle	.L158
.L154:
	.loc 1 769 0
	cmpl	$0, -108(%ebp)
	je	.L161
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L161
.LBB18:
	.loc 1 771 0
	movl	$0, 8(%esp)
	movl	$3, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -104(%ebp)
	.loc 1 772 0
	cmpl	$0, -104(%ebp)
	je	.L199
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	function_invariant_p@PLT
	testl	%eax, %eax
	je	.L166
	movl	flag_pic@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L166
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L169
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L199
.L169:
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	pic_address_needs_scratch@PLT
	testl	%eax, %eax
	jne	.L199
.L166:
.LBB19:
	.loc 1 784 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 785 0
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -148(%ebp)
	.loc 1 786 0
	cmpl	$180, -148(%ebp)
	jle	.L199
	.loc 1 793 0
	movl	$0, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_operand@PLT
	testl	%eax, %eax
	je	.L178
	.loc 1 798 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %esi
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, (%esi)
	jmp	.L180
.L178:
	.loc 1 800 0
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	function_invariant_p@PLT
	testl	%eax, %eax
	je	.L181
	.loc 1 802 0
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L183
	.loc 1 806 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %esi
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, (%esi)
	.loc 1 807 0
	movl	num_eliminable_invariants@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, num_eliminable_invariants@GOTOFF(%ebx)
	jmp	.L180
.L183:
	.loc 1 809 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	12(%eax), %eax
	cmpl	-100(%ebp), %eax
	je	.L185
	movl	global_rtl@GOT(%ebx), %eax
	movl	20(%eax), %eax
	cmpl	-100(%ebp), %eax
	jne	.L187
.L185:
	.loc 1 812 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	addl	%eax, %edx
	movl	-100(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 813 0
	movl	num_eliminable_invariants@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, num_eliminable_invariants@GOTOFF(%ebx)
	.loc 1 809 0
	jmp	.L180
.L187:
	.loc 1 815 0
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L188
	movl	-100(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L190
.L188:
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L191
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L191
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L190
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L190
.L191:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L195
	movl	-100(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	je	.L190
.L195:
	.loc 1 816 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	addl	%eax, %edx
	movl	-100(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 815 0
	jmp	.L180
.L190:
	.loc 1 819 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %esi
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	force_const_mem@PLT
	movl	%eax, (%esi)
	.loc 1 821 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L181
.L180:
	.loc 1 832 0
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L197
	movl	-108(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L199
.L197:
	.loc 1 834 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %esi
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$4, (%esp)
	call	gen_rtx_fmt_ue@PLT
	movl	%eax, (%esi)
	.loc 1 769 0
	jmp	.L199
.L161:
.LBE19:
.LBE18:
	.loc 1 842 0
	cmpl	$0, -108(%ebp)
	je	.L199
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L199
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L199
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L199
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L199
	.loc 1 847 0
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %esi
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$4, (%esp)
	call	gen_rtx_fmt_ue@PLT
	movl	%eax, (%esi)
.L199:
	.loc 1 851 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L181
	.loc 1 852 0
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	scan_paradoxical_subregs
.L181:
.LBE17:
	.loc 1 752 0
	movl	-144(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -144(%ebp)
.L142:
	cmpl	$0, -144(%ebp)
	jne	.L143
	.loc 1 855 0
	call	init_elim_table
	.loc 1 857 0
	call	get_first_label_num@PLT
	movl	%eax, first_label_num@GOTOFF(%ebx)
	.loc 1 858 0
	call	max_label_num@PLT
	movl	%eax, %edx
	movl	first_label_num@GOTOFF(%ebx), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, num_labels@GOTOFF(%ebx)
	.loc 1 864 0
	movl	num_labels@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, offsets_known_at@GOTOFF(%ebx)
	.loc 1 865 0
	movl	num_labels@GOTOFF(%ebx), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	sall	$3, %eax
	addl	%edx, %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, offsets_at@GOTOFF(%ebx)
	.loc 1 873 0
	movl	$181, -148(%ebp)
	jmp	.L207
.L208:
	.loc 1 874 0
	movl	$-1, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	alter_reg
	.loc 1 873 0
	addl	$1, -148(%ebp)
.L207:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L208
	.loc 1 882 0
	movl	8(%ebp), %eax
	movl	%eax, -144(%ebp)
	jmp	.L210
.L211:
	.loc 1 883 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	je	.L212
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	je	.L212
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L215
.L212:
	.loc 1 885 0
	movl	-144(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	leal	mark_not_eliminable@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
.L215:
	.loc 1 882 0
	movl	-144(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -144(%ebp)
.L210:
	cmpl	$0, -144(%ebp)
	je	.L216
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L211
.L216:
	.loc 1 887 0
	call	maybe_fix_stack_asms
	.loc 1 889 0
	movl	$0, insns_need_reload@GOTOFF(%ebx)
	.loc 1 890 0
	movl	$0, something_needs_elimination@GOTOFF(%ebx)
	.loc 1 893 0
	movl	$-1, last_spill_reg@GOTOFF(%ebx)
.LBB20:
	.loc 1 896 0
	leal	used_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-96(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-96(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE20:
	.loc 1 897 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -140(%ebp)
	jmp	.L218
.L219:
	.loc 1 898 0
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L220
	.loc 1 899 0
	movl	-140(%ebp), %eax
	movl	(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	spill_hard_reg
.L220:
	.loc 1 897 0
	addl	$40, -140(%ebp)
.L218:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-140(%ebp), %eax
	ja	.L219
	.loc 1 902 0
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L223
	.loc 1 903 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L225
	movl	$17, -264(%ebp)
	jmp	.L227
.L225:
	movl	$30, -264(%ebp)
.L227:
	movl	$1, 4(%esp)
	movl	-264(%ebp), %esi
	movl	%esi, (%esp)
	call	spill_hard_reg
.L223:
	.loc 1 905 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	finish_spills
	.loc 1 910 0
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	$1, (%eax)
	jmp	.L403
.L228:
.L403:
.LBB21:
	.loc 1 925 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	280(%eax), %eax
	testl	%eax, %eax
	je	.L229
	.loc 1 926 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	280(%eax), %eax
	movl	%eax, 12(%esp)
	movl	$0, 4(%esp)
	movl	$0, 8(%esp)
	movl	$52, (%esp)
	call	assign_stack_local@PLT
.L229:
	.loc 1 928 0
	call	get_frame_size@PLT
	movl	%eax, -176(%ebp)
	movl	%edx, -172(%ebp)
	.loc 1 930 0
	call	set_initial_elim_offsets
	.loc 1 931 0
	call	set_initial_label_offsets
	.loc 1 957 0
	movl	$176, -148(%ebp)
	jmp	.L231
.L232:
	.loc 1 958 0
	movl	-148(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L233
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L233
.LBB22:
	.loc 1 960 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -84(%ebp)
	.loc 1 962 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %ecx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-148(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	strict_memory_address_p@PLT
	testl	%eax, %eax
	je	.L236
	.loc 1 964 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	addl	%eax, %edx
	movl	-84(%ebp), %eax
	movl	%eax, (%edx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	jmp	.L233
.L236:
	.loc 1 965 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L247
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L238
.L247:
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L249
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L249
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L249
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L238
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L249
.L238:
	.loc 1 973 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	addl	%eax, %edx
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%edx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 965 0
	jmp	.L233
.L249:
	.loc 1 982 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 983 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 984 0
	movl	$-1, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	alter_reg
.L233:
.LBE22:
	.loc 1 957 0
	addl	$1, -148(%ebp)
.L231:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L232
	.loc 1 988 0
	movl	caller_save_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L261
	.loc 1 989 0
	call	setup_save_areas@PLT
.L261:
	.loc 1 992 0
	call	get_frame_size@PLT
	movl	%edx, %ecx
	xorl	-172(%ebp), %ecx
	xorl	-176(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L228
	.loc 1 995 0
	movl	caller_save_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L265
	.loc 1 997 0
	call	save_call_clobbered_regs@PLT
.LBB23:
	.loc 1 999 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -80(%ebp)
.LBB24:
	movl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	$0, -72(%ebp)
	movl	-76(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-72(%ebp), %eax
	jge	.L267
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L267:
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-72(%ebp), %eax
	addl	%eax, %edx
	movl	-76(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE24:
.LBB25:
	movl	-80(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-64(%ebp), %eax
	jne	.L269
	movl	-68(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L269:
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-68(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L271
	movl	-68(%ebp), %eax
	movl	16(%eax), %edx
	movl	-68(%ebp), %eax
	movl	%edx, 12(%eax)
.L271:
	movl	-68(%ebp), %eax
	movl	12(%eax), %edx
	movl	-68(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-64(%ebp), %eax
.LBE25:
.LBE23:
	movl	%eax, %edx
	movl	reload_firstobj@GOT(%ebx), %eax
	movl	%edx, (%eax)
.L265:
	.loc 1 1002 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	calculate_needs_all_insns
	.loc 1 1004 0
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_clear@PLT
	.loc 1 1005 0
	movl	$0, -88(%ebp)
	.loc 1 1007 0
	movl	$0, -92(%ebp)
	.loc 1 1011 0
	call	get_frame_size@PLT
	movl	%edx, %ecx
	xorl	-172(%ebp), %ecx
	xorl	-176(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L273
	.loc 1 1012 0
	movl	$1, -92(%ebp)
.L273:
.LBB26:
.LBB27:
	.loc 1 1016 0
	leal	-200(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-60(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-60(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE27:
	.loc 1 1017 0
	leal	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	update_eliminables
	.loc 1 1018 0
	movl	$0, -148(%ebp)
	jmp	.L275
.L276:
	.loc 1 1019 0
	movl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	-196(%ebp,%eax,8), %edx
	movl	-200(%ebp,%eax,8), %eax
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L406
	movl	%edx, %eax
	xorl	%edx, %edx
.L406:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L277
	.loc 1 1021 0
	movl	-148(%ebp), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	spill_hard_reg
	.loc 1 1022 0
	movl	$1, -88(%ebp)
	.loc 1 1033 0
	movl	$1, -92(%ebp)
.L277:
	.loc 1 1018 0
	addl	$1, -148(%ebp)
.L275:
	cmpl	$175, -148(%ebp)
	jle	.L276
.LBE26:
	.loc 1 1037 0
	call	select_reload_regs
	.loc 1 1038 0
	movl	failure@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L280
	.loc 1 1041 0
	movl	insns_need_reload@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L282
	cmpl	$0, -88(%ebp)
	je	.L284
.L282:
	.loc 1 1042 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	finish_spills
	orl	%eax, -92(%ebp)
.L284:
	.loc 1 1044 0
	cmpl	$0, -92(%ebp)
	je	.L285
	.loc 1 1047 0
	movl	caller_save_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L287
	.loc 1 1048 0
	call	delete_caller_save_insns
.L287:
.LBB28:
	.loc 1 1050 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -56(%ebp)
	movl	reload_firstobj@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-52(%ebp), %eax
	jae	.L289
	movl	-56(%ebp), %eax
	movl	16(%eax), %eax
	cmpl	-52(%ebp), %eax
	jbe	.L289
	movl	-52(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-56(%ebp), %eax
	movl	8(%eax), %edx
	movl	-56(%ebp), %eax
	movl	%edx, 12(%eax)
	jmp	.L228
.L289:
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	obstack_free@PLT
	.loc 1 1051 0
	jmp	.L228
.L285:
.LBE28:
.LBE21:
	.loc 1 1055 0
	cmpl	$0, 12(%ebp)
	je	.L292
	.loc 1 1056 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -140(%ebp)
	jmp	.L294
.L295:
	.loc 1 1057 0
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L296
	.loc 1 1058 0
	movl	-140(%ebp), %eax
	movl	4(%eax), %edx
	movl	-140(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mark_elimination@PLT
.L296:
	.loc 1 1056 0
	addl	$40, -140(%ebp)
.L294:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-140(%ebp), %eax
	ja	.L295
.L292:
	.loc 1 1067 0
	movl	$176, -148(%ebp)
	jmp	.L298
.L299:
	.loc 1 1069 0
	movl	-148(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L300
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L300
.LBB29:
	.loc 1 1072 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L303
.L304:
.LBB30:
	.loc 1 1074 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 1081 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L305
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	can_throw_internal@PLT
	xorl	$1, %eax
	testb	%al, %al
	je	.L305
	.loc 1 1084 0
	movl	-44(%ebp), %eax
	movl	44(%eax), %ecx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-148(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L308
	.loc 1 1085 0
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_dead_insn
	jmp	.L305
.L308:
	.loc 1 1088 0
	movl	-44(%ebp), %eax
	movw	$47, (%eax)
	.loc 1 1089 0
	movl	-44(%ebp), %eax
	movl	$0, 36(%eax)
	.loc 1 1090 0
	movl	-44(%ebp), %eax
	movl	$-99, 44(%eax)
.L305:
.LBE30:
	.loc 1 1072 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
.L303:
	cmpl	$0, -48(%ebp)
	jne	.L304
.L300:
.LBE29:
	.loc 1 1067 0
	addl	$1, -148(%ebp)
.L298:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L299
	.loc 1 1100 0
	movl	insns_need_reload@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L311
	movl	something_needs_elimination@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L311
	movl	something_needs_operands_changed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L314
.L311:
.LBB31:
	.loc 1 1103 0
	call	get_frame_size@PLT
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 1105 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_as_needed
	.loc 1 1107 0
	call	get_frame_size@PLT
	movl	%edx, %ecx
	xorl	-164(%ebp), %ecx
	xorl	-168(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L315
	.loc 1 1108 0
	leal	__FUNCTION__.14731@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1108, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L315:
	.loc 1 1110 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L314
	.loc 1 1111 0
	call	verify_initial_elim_offsets
.L314:
.LBE31:
	.loc 1 1120 0
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L280
	.loc 1 1121 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	%eax, -136(%ebp)
	jmp	.L319
.L320:
	.loc 1 1122 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L321
	movl	$17, -260(%ebp)
	jmp	.L323
.L321:
	movl	$30, -260(%ebp)
.L323:
	movl	-136(%ebp), %eax
	movl	32(%eax), %eax
	movl	-260(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_clear_bit@PLT
	.loc 1 1121 0
	movl	-136(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -136(%ebp)
.L319:
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, -136(%ebp)
	jne	.L320
.L280:
	.loc 1 1129 0
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_clear@PLT
	.loc 1 1130 0
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 1142 0
	movl	$176, -148(%ebp)
	jmp	.L324
.L325:
.LBB32:
	.loc 1 1144 0
	movl	$0, -40(%ebp)
	.loc 1 1146 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L326
	.loc 1 1147 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L326:
	.loc 1 1149 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L328
	.loc 1 1150 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
.L328:
	.loc 1 1152 0
	cmpl	$0, -40(%ebp)
	je	.L330
	.loc 1 1154 0
	movl	-148(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L332
.LBB33:
	.loc 1 1156 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-148(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 1158 0
	movl	-36(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$-9, %eax
	movb	%al, 3(%edx)
	.loc 1 1159 0
	movl	-36(%ebp), %eax
	movw	$76, (%eax)
	.loc 1 1160 0
	movl	-36(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 1161 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L334
	.loc 1 1162 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movl	-36(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,8), %edx
	movzbl	3(%ecx), %eax
	andl	$-9, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movl	-36(%ebp), %ecx
	andl	$1, %eax
	movl	%eax, %edx
	sall	$4, %edx
	movzbl	3(%ecx), %eax
	andl	$-17, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	shrb	$7, %al
	movl	-36(%ebp), %edx
	movl	%eax, %ecx
	sall	$7, %ecx
	movzbl	3(%edx), %eax
	andl	$127, %eax
	orl	%ecx, %eax
	movb	%al, 3(%edx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	shrb	%al
	andl	$1, %eax
	movl	-36(%ebp), %ecx
	andl	$1, %eax
	leal	(%eax,%eax), %edx
	movzbl	3(%ecx), %eax
	andl	$-3, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movl	-36(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	andl	$1, %eax
	movl	-36(%ebp), %edx
	movl	%eax, %ecx
	andl	$1, %ecx
	movzbl	3(%edx), %eax
	andl	$-2, %eax
	orl	%ecx, %eax
	movb	%al, 3(%edx)
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	12(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%edx, 12(%eax)
	jmp	.L330
.L334:
	.loc 1 1165 0
	movl	-36(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$127, %eax
	movb	%al, 3(%edx)
	movl	-36(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$7, %al
	movl	-36(%ebp), %ecx
	andl	$1, %eax
	movl	%eax, %edx
	sall	$4, %edx
	movzbl	3(%ecx), %eax
	andl	$-17, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	movl	-36(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movl	-36(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	.loc 1 1167 0
	movl	-36(%ebp), %eax
	movl	$0, 12(%eax)
	jmp	.L330
.L332:
.LBE33:
	.loc 1 1170 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L330
	.loc 1 1171 0
	movl	-148(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%edx)
.L330:
.LBE32:
	.loc 1 1142 0
	addl	$1, -148(%ebp)
.L324:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L325
	.loc 1 1178 0
	movl	reload_completed@GOT(%ebx), %eax
	movl	$1, (%eax)
	.loc 1 1189 0
	movl	8(%ebp), %eax
	movl	%eax, -144(%ebp)
	jmp	.L339
.L340:
	.loc 1 1190 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L341
.LBB34:
	.loc 1 1194 0
	movl	-144(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L343
	.loc 1 1195 0
	movl	-144(%ebp), %eax
	movl	76(%eax), %eax
	movl	-144(%ebp), %edx
	addl	$76, %edx
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	replace_pseudos_in_call_usage
.L343:
	.loc 1 1199 0
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	jne	.L345
	movl	-144(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$2, %al
	je	.L347
	movl	$0, 8(%esp)
	movl	$4, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L347
.L345:
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L349
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L351
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L351
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$72, %ax
	je	.L349
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	8(%eax), %eax
	cmpl	%eax, %edx
	je	.L349
.L351:
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L347
	movl	-144(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzbl	3(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	jne	.L349
.L347:
	.loc 1 1212 0
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
	.loc 1 1213 0
	jmp	.L341
.L349:
	.loc 1 1216 0
	movl	-144(%ebp), %eax
	addl	$68, %eax
	movl	%eax, -32(%ebp)
	.loc 1 1217 0
	jmp	.L404
.L357:
	.loc 1 1219 0
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	je	.L358
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$10, %al
	je	.L358
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$2, %al
	je	.L358
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$6, %al
	je	.L358
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$7, %al
	jne	.L363
.L358:
	.loc 1 1224 0
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 1219 0
	jmp	.L356
.L363:
	.loc 1 1226 0
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	%eax, -32(%ebp)
.L356:
.L404:
	.loc 1 1217 0
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L357
	.loc 1 1234 0
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	cleanup_subreg_operands@PLT
.L341:
.LBE34:
	.loc 1 1189 0
	movl	-144(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -144(%ebp)
.L339:
	cmpl	$0, -144(%ebp)
	jne	.L340
	.loc 1 1239 0
	movl	flag_stack_check@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L366
.LBB35:
	.loc 1 1241 0
	call	get_frame_size@PLT
	movl	%eax, -256(%ebp)
	movl	%edx, -252(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L368
	movl	$32, -248(%ebp)
	movl	$0, -244(%ebp)
	jmp	.L370
.L368:
	movl	$16, -248(%ebp)
	movl	$0, -244(%ebp)
.L370:
	movl	-256(%ebp), %eax
	movl	-252(%ebp), %edx
	addl	-248(%ebp), %eax
	adcl	-244(%ebp), %edx
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	.loc 1 1244 0
	movl	$0, -148(%ebp)
	jmp	.L371
.L372:
	.loc 1 1245 0
	movl	-148(%ebp), %eax
	movl	regs_ever_live@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L373
	movl	-148(%ebp), %eax
	movl	fixed_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L373
	movl	-148(%ebp), %eax
	movl	call_used_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L373
	.loc 1 1246 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L377
	movl	$8, -240(%ebp)
	movl	$0, -236(%ebp)
	jmp	.L379
.L377:
	movl	$4, -240(%ebp)
	movl	$0, -236(%ebp)
.L379:
	movl	-240(%ebp), %eax
	movl	-236(%ebp), %edx
	addl	%eax, -160(%ebp)
	adcl	%edx, -156(%ebp)
.L373:
	.loc 1 1244 0
	addl	$1, -148(%ebp)
.L371:
	cmpl	$175, -148(%ebp)
	jle	.L372
	.loc 1 1248 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L381
	movl	$4088, -232(%ebp)
	movl	$0, -228(%ebp)
	jmp	.L383
.L381:
	movl	$4092, -232(%ebp)
	movl	$0, -228(%ebp)
.L383:
	movl	-228(%ebp), %edx
	cmpl	-156(%ebp), %edx
	jg	.L366
	movl	-228(%ebp), %ecx
	cmpl	-156(%ebp), %ecx
	jl	.L385
	movl	-232(%ebp), %esi
	cmpl	-160(%ebp), %esi
	jae	.L366
.L385:
	.loc 1 1250 0
	leal	.LC2@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	warning@PLT
	.loc 1 1251 0
	movl	verbose_warned.14749@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L366
	.loc 1 1253 0
	leal	.LC3@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	warning@PLT
	.loc 1 1254 0
	movl	$1, verbose_warned.14749@GOTOFF(%ebx)
.L366:
.LBE35:
	.loc 1 1260 0
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L387
	.loc 1 1261 0
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	free@PLT
.L387:
	.loc 1 1262 0
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 1263 0
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L389
	.loc 1 1264 0
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	free@PLT
.L389:
	.loc 1 1265 0
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 1267 0
	movl	offsets_known_at@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L391
	.loc 1 1268 0
	movl	offsets_known_at@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
.L391:
	.loc 1 1269 0
	movl	offsets_at@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L393
	.loc 1 1270 0
	movl	offsets_at@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
.L393:
	.loc 1 1272 0
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 1273 0
	movl	reg_equiv_init@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 1274 0
	movl	reg_equiv_address@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 1275 0
	movl	reg_max_ref_width@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 1276 0
	movl	reg_old_renumber@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 1277 0
	movl	pseudo_previous_regs@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 1278 0
	movl	pseudo_forbidden_regs@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
.LBB36:
	.loc 1 1280 0
	leal	used_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-28(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-28(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE36:
	.loc 1 1281 0
	movl	$0, -148(%ebp)
	jmp	.L395
.L396:
	.loc 1 1282 0
	movl	-148(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	shrl	$6, %eax
	movl	%eax, -220(%ebp)
	movl	used_spill_regs@GOTOFF(%ebx,%eax,8), %edx
	movl	4+used_spill_regs@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -216(%ebp)
	movl	%ecx, -212(%ebp)
	movl	-148(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L405
	movl	%esi, %edi
	xorl	%esi, %esi
.L405:
	movl	-216(%ebp), %eax
	orl	%esi, %eax
	movl	-212(%ebp), %edx
	orl	%edi, %edx
	movl	-220(%ebp), %ecx
	movl	%eax, used_spill_regs@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+used_spill_regs@GOTOFF(%ebx,%ecx,8)
	.loc 1 1281 0
	addl	$1, -148(%ebp)
.L395:
	movl	n_spills@GOTOFF(%ebx), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L396
.LBB37:
	.loc 1 1285 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -24(%ebp)
	movl	reload_startobj@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-20(%ebp), %eax
	jae	.L398
	movl	-24(%ebp), %eax
	movl	16(%eax), %eax
	cmpl	-20(%ebp), %eax
	jbe	.L398
	movl	-20(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-24(%ebp), %eax
	movl	8(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%edx, 12(%eax)
	jmp	.L401
.L398:
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	obstack_free@PLT
.L401:
.LBE37:
	.loc 1 1286 0
	movl	$0, unused_insn_chains@GOTOFF(%ebx)
	.loc 1 1287 0
	call	fixup_abnormal_edges@PLT
	.loc 1 1292 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	unshare_all_rtl_again@PLT
	.loc 1 1294 0
	movl	failure@GOTOFF(%ebx), %eax
	.loc 1 1295 0
	addl	$284, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE19:
	.size	reload, .-reload
	.type	maybe_fix_stack_asms, @function
maybe_fix_stack_asms:
.LFB20:
	.loc 1 1306 0
	pushl	%ebp
.LCFI26:
	movl	%esp, %ebp
.LCFI27:
	.loc 1 1411 0
	popl	%ebp
	ret
.LFE20:
	.size	maybe_fix_stack_asms, .-maybe_fix_stack_asms
	.type	copy_reloads, @function
copy_reloads:
.LFB21:
	.loc 1 1418 0
	pushl	%ebp
.LCFI28:
	movl	%esp, %ebp
.LCFI29:
	pushl	%edi
.LCFI30:
	pushl	%esi
.LCFI31:
	pushl	%ebx
.LCFI32:
	subl	$60, %esp
.LCFI33:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1419 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, 56(%eax)
.LBB38:
	.loc 1 1421 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -52(%ebp)
.LBB39:
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	imull	$76, %eax, %eax
	movl	%eax, -44(%ebp)
	movl	-48(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-44(%ebp), %eax
	jge	.L410
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L410:
	movl	-48(%ebp), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	addl	%eax, %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE39:
.LBB40:
	movl	-52(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-36(%ebp), %eax
	jne	.L412
	movl	-40(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L412:
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-40(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L414
	movl	-40(%ebp), %eax
	movl	16(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
.L414:
	movl	-40(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-36(%ebp), %eax
.LBE40:
.LBE38:
	.loc 1 1420 0
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 52(%eax)
	.loc 1 1423 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	imull	$76, %eax, %ecx
	movl	8(%ebp), %eax
	movl	52(%eax), %eax
	movl	rld@GOT(%ebx), %edx
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
.LBB41:
	.loc 1 1424 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -32(%ebp)
.LBB42:
	movl	-32(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$0, -24(%ebp)
	movl	-28(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-24(%ebp), %eax
	jge	.L416
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L416:
	movl	-28(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	addl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE42:
.LBB43:
	movl	-32(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-16(%ebp), %eax
	jne	.L418
	movl	-20(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L418:
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-20(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L420
	movl	-20(%ebp), %eax
	movl	16(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%edx, 12(%eax)
.L420:
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-16(%ebp), %eax
.LBE43:
.LBE41:
	movl	%eax, reload_insn_firstobj@GOTOFF(%ebx)
	.loc 1 1425 0
	addl	$60, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE21:
	.size	copy_reloads, .-copy_reloads
	.type	calculate_needs_all_insns, @function
calculate_needs_all_insns:
.LFB22:
	.loc 1 1433 0
	pushl	%ebp
.LCFI34:
	movl	%esp, %ebp
.LCFI35:
	pushl	%esi
.LCFI36:
	pushl	%ebx
.LCFI37:
	addl	$-128, %esp
.LCFI38:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1434 0
	leal	insns_need_reload@GOTOFF(%ebx), %eax
	movl	%eax, -80(%ebp)
	.loc 1 1435 0
	movl	$0, -72(%ebp)
	.loc 1 1437 0
	movl	$0, something_needs_elimination@GOTOFF(%ebx)
.LBB44:
	.loc 1 1439 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -68(%ebp)
.LBB45:
	movl	-68(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	$0, -60(%ebp)
	movl	-64(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	-60(%ebp), %eax
	jge	.L424
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	_obstack_newchunk@PLT
.L424:
	movl	-64(%ebp), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	addl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	%edx, 12(%eax)
.LBE45:
.LBB46:
	movl	-68(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-52(%ebp), %eax
	jne	.L426
	movl	-56(%ebp), %eax
	movzbl	40(%eax), %edx
	orl	$2, %edx
	movb	%dl, 40(%eax)
.L426:
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	24(%eax), %eax
	addl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	24(%eax), %eax
	notl	%eax
	andl	%edx, %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	-56(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	cmpl	%eax, %ecx
	jle	.L428
	movl	-56(%ebp), %eax
	movl	16(%eax), %edx
	movl	-56(%ebp), %eax
	movl	%edx, 12(%eax)
.L428:
	movl	-56(%ebp), %eax
	movl	12(%eax), %edx
	movl	-56(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-52(%ebp), %eax
.LBE46:
.LBE44:
	movl	%eax, reload_insn_firstobj@GOTOFF(%ebx)
	.loc 1 1440 0
	movl	reload_insn_chain@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L430
.L431:
.LBB47:
	.loc 1 1442 0
	movl	-76(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 1444 0
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 1447 0
	movl	-76(%ebp), %eax
	movl	$0, 56(%eax)
	.loc 1 1448 0
	movl	-76(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-5, %eax
	movb	%al, 234(%edx)
	.loc 1 1449 0
	movl	-76(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-2, %eax
	movb	%al, 234(%edx)
	.loc 1 1450 0
	movl	-76(%ebp), %edx
	movzbl	234(%edx), %eax
	andl	$-3, %eax
	movb	%al, 234(%edx)
	.loc 1 1456 0
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L432
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	je	.L432
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L435
	movl	-48(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L435
.L432:
	.loc 1 1458 0
	movl	$0, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	set_label_offsets
.L435:
	.loc 1 1460 0
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L437
.LBB48:
	.loc 1 1462 0
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 1463 0
	movl	-48(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 1464 0
	movl	-48(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 1465 0
	movl	$0, -32(%ebp)
	.loc 1 1466 0
	movl	$0, -28(%ebp)
	.loc 1 1467 0
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L439
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L441
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L443
.L441:
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -100(%ebp)
.L443:
	movl	-100(%ebp), %eax
	movl	%eax, -104(%ebp)
	jmp	.L444
.L439:
	movl	$0, -104(%ebp)
.L444:
	movl	-104(%ebp), %ecx
	movl	%ecx, -24(%ebp)
	.loc 1 1470 0
	cmpl	$0, -24(%ebp)
	je	.L445
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L445
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L445
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L437
.L445:
	.loc 1 1476 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L449
	movl	num_eliminable_invariants@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L451
.L449:
	.loc 1 1477 0
	movl	$0, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	eliminate_regs_in_insn
	movl	%eax, -32(%ebp)
.L451:
	.loc 1 1480 0
	movzbl	spill_indirect_levels@GOTOFF(%ebx), %eax
	movzbl	%al, %edx
	leal	spill_reg_order@GOTOFF(%ebx), %eax
	movl	%eax, 16(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reloads@PLT
	movl	%eax, -28(%ebp)
	.loc 1 1490 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L452
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jle	.L452
.LBB49:
	.loc 1 1492 0
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L455
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L457
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -92(%ebp)
	jmp	.L459
.L457:
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -92(%ebp)
.L459:
	movl	-92(%ebp), %esi
	movl	%esi, -96(%ebp)
	jmp	.L460
.L455:
	movl	$0, -96(%ebp)
.L460:
	movl	-96(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 1493 0
	cmpl	$0, -20(%ebp)
	je	.L452
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L452
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L452
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L452
	.loc 1 1498 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
	.loc 1 1500 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L465
	.loc 1 1501 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%eax, (%edx)
	jmp	.L467
.L465:
	.loc 1 1503 0
	movl	reload_insn_chain@GOT(%ebx), %edx
	movl	-72(%ebp), %eax
	movl	%eax, (%edx)
.L467:
	.loc 1 1504 0
	cmpl	$0, -72(%ebp)
	je	.L468
	.loc 1 1505 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
.L468:
	.loc 1 1506 0
	movl	unused_insn_chains@GOTOFF(%ebx), %eax
	movl	-76(%ebp), %edx
	movl	%eax, (%edx)
	.loc 1 1507 0
	movl	-76(%ebp), %eax
	movl	%eax, unused_insn_chains@GOTOFF(%ebx)
	.loc 1 1508 0
	jmp	.L437
.L452:
.LBE49:
	.loc 1 1511 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L470
	.loc 1 1512 0
	call	update_eliminable_offsets
.L470:
	.loc 1 1516 0
	movl	-32(%ebp), %eax
	andl	$1, %eax
	movl	-76(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	234(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 234(%ecx)
	.loc 1 1517 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	setg	%al
	movl	-76(%ebp), %edx
	movl	%eax, %ecx
	andl	$1, %ecx
	movzbl	234(%edx), %eax
	andl	$-2, %eax
	orl	%ecx, %eax
	movb	%al, 234(%edx)
	.loc 1 1518 0
	movl	-28(%ebp), %eax
	andl	$1, %eax
	movl	-76(%ebp), %ecx
	andl	$1, %eax
	leal	(%eax,%eax), %edx
	movzbl	234(%ecx), %eax
	andl	$-3, %eax
	orl	%edx, %eax
	movb	%al, 234(%ecx)
	.loc 1 1521 0
	cmpl	$0, -32(%ebp)
	je	.L472
.LBB50:
	.loc 1 1523 0
	movl	reload_obstack@GOT(%ebx), %eax
	movl	%eax, -16(%ebp)
	movl	reload_insn_firstobj@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-12(%ebp), %eax
	jae	.L474
	movl	-16(%ebp), %eax
	movl	16(%eax), %eax
	cmpl	-12(%ebp), %eax
	jbe	.L474
	movl	-12(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 8(%eax)
	movl	-16(%ebp), %eax
	movl	8(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	jmp	.L477
.L474:
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	obstack_free@PLT
.L477:
.LBE50:
	.loc 1 1524 0
	movl	-48(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 1525 0
	movl	-48(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 52(%edx)
	.loc 1 1526 0
	movl	-48(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 68(%edx)
	.loc 1 1527 0
	movl	$1, something_needs_elimination@GOTOFF(%ebx)
.L472:
	.loc 1 1530 0
	movl	something_needs_operands_changed@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	orl	-28(%ebp), %edx
	movl	something_needs_operands_changed@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 1532 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L437
	.loc 1 1534 0
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_reloads
	.loc 1 1535 0
	movl	-80(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 1536 0
	movl	-76(%ebp), %eax
	addl	$8, %eax
	movl	%eax, -80(%ebp)
.L437:
.LBE48:
.LBE47:
	.loc 1 1440 0
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
.L430:
	cmpl	$0, -76(%ebp)
	jne	.L431
	.loc 1 1540 0
	movl	-80(%ebp), %eax
	movl	$0, (%eax)
	.loc 1 1541 0
	subl	$-128, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE22:
	.size	calculate_needs_all_insns, .-calculate_needs_all_insns
	.type	reload_reg_class_lower, @function
reload_reg_class_lower:
.LFB23:
	.loc 1 1550 0
	pushl	%ebp
.LCFI39:
	movl	%esp, %ebp
.LCFI40:
	pushl	%ebx
.LCFI41:
	subl	$20, %esp
.LCFI42:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1551 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -16(%ebp)
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -12(%ebp)
	.loc 1 1555 0
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	movzbl	%al, %ecx
	movl	-12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -8(%ebp)
	.loc 1 1556 0
	cmpl	$0, -8(%ebp)
	je	.L482
	.loc 1 1557 0
	movl	-8(%ebp), %ecx
	movl	%ecx, -24(%ebp)
	jmp	.L484
.L482:
	.loc 1 1560 0
	movl	-12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	reg_class_size@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	sete	%al
	movzbl	%al, %ecx
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	reg_class_size@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -8(%ebp)
	.loc 1 1562 0
	cmpl	$0, -8(%ebp)
	je	.L485
	.loc 1 1563 0
	movl	-8(%ebp), %ecx
	movl	%ecx, -24(%ebp)
	jmp	.L484
.L485:
	.loc 1 1566 0
	movl	-12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %ecx
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -8(%ebp)
	.loc 1 1567 0
	cmpl	$0, -8(%ebp)
	je	.L487
	.loc 1 1568 0
	movl	-8(%ebp), %ecx
	movl	%ecx, -24(%ebp)
	jmp	.L484
.L487:
	.loc 1 1571 0
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -8(%ebp)
	.loc 1 1572 0
	cmpl	$0, -8(%ebp)
	je	.L489
	.loc 1 1573 0
	movl	-8(%ebp), %ecx
	movl	%ecx, -24(%ebp)
	jmp	.L484
.L489:
	.loc 1 1577 0
	movl	-12(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, -24(%ebp)
.L484:
	movl	-24(%ebp), %eax
	.loc 1 1578 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE23:
	.size	reload_reg_class_lower, .-reload_reg_class_lower
	.section	.rodata
	.type	__FUNCTION__.16072, @object
	.size	__FUNCTION__.16072, 13
__FUNCTION__.16072:
	.string	"count_pseudo"
	.text
	.type	count_pseudo, @function
count_pseudo:
.LFB24:
	.loc 1 1593 0
	pushl	%ebp
.LCFI43:
	movl	%esp, %ebp
.LCFI44:
	pushl	%ebx
.LCFI45:
	subl	$36, %esp
.LCFI46:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1594 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	20(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1595 0
	movl	8(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -12(%ebp)
	.loc 1 1598 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	pseudos_counted@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	jne	.L501
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	je	.L495
	.loc 1 1600 0
	jmp	.L501
.L495:
	.loc 1 1602 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	pseudos_counted@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_set_bit@PLT
	.loc 1 1604 0
	cmpl	$0, -12(%ebp)
	jns	.L497
	.loc 1 1605 0
	leal	__FUNCTION__.16072@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1605, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L497:
	.loc 1 1607 0
	movl	-12(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	spill_add_cost@GOTOFF(%ebx,%eax,4), %eax
	addl	-16(%ebp), %eax
	movl	%eax, spill_add_cost@GOTOFF(%ebx,%edx,4)
	.loc 1 1609 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -8(%ebp)
	.loc 1 1610 0
	jmp	.L499
.L500:
	.loc 1 1611 0
	movl	-8(%ebp), %eax
	movl	-12(%ebp), %edx
	addl	%eax, %edx
	movl	-8(%ebp), %eax
	addl	-12(%ebp), %eax
	movl	spill_cost@GOTOFF(%ebx,%eax,4), %eax
	addl	-16(%ebp), %eax
	movl	%eax, spill_cost@GOTOFF(%ebx,%edx,4)
.L499:
	.loc 1 1610 0
	cmpl	$0, -8(%ebp)
	setg	%al
	subl	$1, -8(%ebp)
	testb	%al, %al
	jne	.L500
.L501:
	.loc 1 1612 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE24:
	.size	count_pseudo, .-count_pseudo
	.type	order_regs_for_reload, @function
order_regs_for_reload:
.LFB25:
	.loc 1 1620 0
	pushl	%ebp
.LCFI47:
	movl	%esp, %ebp
.LCFI48:
	pushl	%edi
.LCFI49:
	pushl	%esi
.LCFI50:
	pushl	%ebx
.LCFI51:
	subl	$220, %esp
.LCFI52:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
.LBB51:
	.loc 1 1625 0
	leal	bad_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -96(%ebp)
	movl	fixed_reg_set@GOT(%ebx), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-96(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-96(%ebp), %ecx
	addl	$8, %ecx
	movl	-92(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-96(%ebp), %ecx
	addl	$16, %ecx
	movl	-92(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE51:
	.loc 1 1627 0
	leal	spill_cost@GOTOFF(%ebx), %edx
	movl	$704, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 1628 0
	leal	spill_add_cost@GOTOFF(%ebx), %edx
	movl	$704, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
.LBB52:
	.loc 1 1634 0
	leal	-128(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-88(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-88(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE52:
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	%eax, 4(%esp)
	leal	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
.LBB53:
	.loc 1 1635 0
	leal	-152(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-84(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-84(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE53:
	movl	8(%ebp), %eax
	addl	$36, %eax
	movl	%eax, 4(%esp)
	leal	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
.LBB54:
	.loc 1 1636 0
	leal	bad_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -80(%ebp)
	leal	-128(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -208(%ebp)
	movl	%ecx, -204(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-208(%ebp), %eax
	orl	%esi, %eax
	movl	-204(%ebp), %edx
	orl	%edi, %edx
	movl	-80(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-80(%ebp), %ecx
	addl	$8, %ecx
	movl	-80(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -200(%ebp)
	movl	%edi, -196(%ebp)
	movl	-76(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-200(%ebp), %eax
	orl	%esi, %eax
	movl	-196(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-80(%ebp), %ecx
	addl	$16, %ecx
	movl	-80(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -192(%ebp)
	movl	%edi, -188(%ebp)
	movl	-76(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-192(%ebp), %eax
	orl	%esi, %eax
	movl	-188(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE54:
.LBB55:
	.loc 1 1637 0
	leal	bad_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -72(%ebp)
	leal	-152(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -184(%ebp)
	movl	%ecx, -180(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-184(%ebp), %eax
	orl	%esi, %eax
	movl	-180(%ebp), %edx
	orl	%edi, %edx
	movl	-72(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-72(%ebp), %ecx
	addl	$8, %ecx
	movl	-72(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -176(%ebp)
	movl	%edi, -172(%ebp)
	movl	-68(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-176(%ebp), %eax
	orl	%esi, %eax
	movl	-172(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-72(%ebp), %ecx
	addl	$16, %ecx
	movl	-72(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -168(%ebp)
	movl	%edi, -164(%ebp)
	movl	-68(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-168(%ebp), %eax
	orl	%esi, %eax
	movl	-164(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE55:
	.loc 1 1641 0
	leal	pseudos_counted@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_clear@PLT
.LBB56:
	.loc 1 1643 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	$1, -60(%ebp)
	movl	$16, -56(%ebp)
	movl	$1, -52(%ebp)
	jmp	.L503
.L504:
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
.L503:
	cmpl	$0, -64(%ebp)
	je	.L505
	movl	-64(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-60(%ebp), %eax
	jb	.L504
.L505:
	cmpl	$0, -64(%ebp)
	je	.L510
	movl	-64(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-60(%ebp), %eax
	je	.L510
	movl	$0, -56(%ebp)
	movl	$0, -52(%ebp)
	jmp	.L510
.L513:
.LBB57:
	movl	-52(%ebp), %eax
	movl	-64(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	je	.L514
	jmp	.L516
.L517:
.LBB58:
	movl	-56(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	andl	-48(%ebp), %eax
	testl	%eax, %eax
	je	.L518
	movl	-44(%ebp), %eax
	notl	%eax
	andl	%eax, -48(%ebp)
	movl	-64(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-52(%ebp), %eax
	sall	$5, %eax
	addl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	count_pseudo
	cmpl	$0, -48(%ebp)
	je	.L514
.L518:
.LBE58:
	addl	$1, -56(%ebp)
.L516:
	cmpl	$31, -56(%ebp)
	jbe	.L517
.L514:
	movl	$0, -56(%ebp)
.LBE57:
	addl	$1, -52(%ebp)
.L512:
	cmpl	$3, -52(%ebp)
	jbe	.L513
	movl	$0, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
.L510:
	cmpl	$0, -64(%ebp)
	jne	.L512
.LBE56:
.LBB59:
	.loc 1 1648 0
	movl	8(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	$1, -36(%ebp)
	movl	$16, -32(%ebp)
	movl	$1, -28(%ebp)
	jmp	.L522
.L523:
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
.L522:
	cmpl	$0, -40(%ebp)
	je	.L524
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-36(%ebp), %eax
	jb	.L523
.L524:
	cmpl	$0, -40(%ebp)
	je	.L529
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-36(%ebp), %eax
	je	.L529
	movl	$0, -32(%ebp)
	movl	$0, -28(%ebp)
	jmp	.L529
.L532:
.LBB60:
	movl	-28(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	je	.L533
	jmp	.L535
.L536:
.LBB61:
	movl	-32(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	andl	-24(%ebp), %eax
	testl	%eax, %eax
	je	.L537
	movl	-20(%ebp), %eax
	notl	%eax
	andl	%eax, -24(%ebp)
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-28(%ebp), %eax
	sall	$5, %eax
	addl	-32(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	count_pseudo
	cmpl	$0, -24(%ebp)
	je	.L533
.L537:
.LBE61:
	addl	$1, -32(%ebp)
.L535:
	cmpl	$31, -32(%ebp)
	jbe	.L536
.L533:
	movl	$0, -32(%ebp)
.LBE60:
	addl	$1, -28(%ebp)
.L531:
	cmpl	$3, -28(%ebp)
	jbe	.L532
	movl	$0, -28(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
.L529:
	cmpl	$0, -40(%ebp)
	jne	.L531
.LBE59:
	.loc 1 1653 0
	leal	pseudos_counted@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_clear@PLT
	.loc 1 1654 0
	addl	$220, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE25:
	.size	order_regs_for_reload, .-order_regs_for_reload
	.type	count_spilled_pseudo, @function
count_spilled_pseudo:
.LFB26:
	.loc 1 1671 0
	pushl	%ebp
.LCFI53:
	movl	%esp, %ebp
.LCFI54:
	pushl	%esi
.LCFI55:
	pushl	%ebx
.LCFI56:
	subl	$32, %esp
.LCFI57:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1672 0
	movl	16(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -16(%ebp)
	.loc 1 1673 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	16(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -12(%ebp)
	.loc 1 1675 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	jne	.L550
	movl	12(%ebp), %eax
	addl	8(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jle	.L550
	movl	-12(%ebp), %eax
	addl	-16(%ebp), %eax
	cmpl	8(%ebp), %eax
	jg	.L546
	.loc 1 1677 0
	jmp	.L550
.L546:
	.loc 1 1679 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_set_bit@PLT
	.loc 1 1681 0
	movl	-16(%ebp), %ecx
	movl	-16(%ebp), %eax
	movl	spill_add_cost@GOTOFF(%ebx,%eax,4), %esi
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	20(%eax), %eax
	movl	%esi, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, spill_add_cost@GOTOFF(%ebx,%ecx,4)
	.loc 1 1682 0
	jmp	.L548
.L549:
	.loc 1 1683 0
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %ecx
	addl	%eax, %ecx
	movl	-12(%ebp), %eax
	addl	-16(%ebp), %eax
	movl	spill_cost@GOTOFF(%ebx,%eax,4), %esi
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	20(%eax), %eax
	movl	%esi, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, spill_cost@GOTOFF(%ebx,%ecx,4)
.L548:
	.loc 1 1682 0
	cmpl	$0, -12(%ebp)
	setg	%al
	subl	$1, -12(%ebp)
	testb	%al, %al
	jne	.L549
.L550:
	.loc 1 1684 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE26:
	.size	count_spilled_pseudo, .-count_spilled_pseudo
	.section	.rodata
	.type	__FUNCTION__.16380, @object
	.size	__FUNCTION__.16380, 9
__FUNCTION__.16380:
	.string	"find_reg"
.LC4:
	.string	"Using reg %d for reload %d\n"
	.text
	.type	find_reg, @function
find_reg:
.LFB27:
	.loc 1 1692 0
	pushl	%ebp
.LCFI58:
	movl	%esp, %ebp
.LCFI59:
	pushl	%edi
.LCFI60:
	pushl	%esi
.LCFI61:
	pushl	%ebx
.LCFI62:
	subl	$284, %esp
.LCFI63:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1693 0
	movl	12(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -140(%ebp)
	.loc 1 1694 0
	movl	-140(%ebp), %eax
	imull	$76, %eax, %eax
	movl	%eax, %edx
	movl	rld@GOT(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -136(%ebp)
	.loc 1 1695 0
	movl	$2147483647, -132(%ebp)
	.loc 1 1696 0
	movl	$-1, -128(%ebp)
.LBB62:
	.loc 1 1702 0
	leal	-168(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	bad_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-112(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-112(%ebp), %ecx
	addl	$8, %ecx
	movl	-108(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-112(%ebp), %ecx
	addl	$16, %ecx
	movl	-108(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE62:
.LBB63:
	.loc 1 1703 0
	leal	-168(%ebp), %eax
	movl	%eax, -104(%ebp)
	leal	bad_spill_regs_global@GOTOFF(%ebx), %eax
	movl	%eax, -100(%ebp)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -272(%ebp)
	movl	%ecx, -268(%ebp)
	movl	-100(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-272(%ebp), %eax
	orl	%esi, %eax
	movl	-268(%ebp), %edx
	orl	%edi, %edx
	movl	-104(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-104(%ebp), %ecx
	addl	$8, %ecx
	movl	-104(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -264(%ebp)
	movl	%edi, -260(%ebp)
	movl	-100(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-264(%ebp), %eax
	orl	%esi, %eax
	movl	-260(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-104(%ebp), %ecx
	addl	$16, %ecx
	movl	-104(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -256(%ebp)
	movl	%edi, -252(%ebp)
	movl	-100(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-256(%ebp), %eax
	orl	%esi, %eax
	movl	-252(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE63:
.LBB64:
	.loc 1 1704 0
	leal	-168(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-136(%ebp), %eax
	movl	8(%eax), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_class_contents@GOT(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -248(%ebp)
	movl	%ecx, -244(%ebp)
	movl	-92(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-248(%ebp), %eax
	orl	%esi, %eax
	movl	-244(%ebp), %edx
	orl	%edi, %edx
	movl	-96(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-96(%ebp), %ecx
	addl	$8, %ecx
	movl	-96(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -240(%ebp)
	movl	%edi, -236(%ebp)
	movl	-92(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-240(%ebp), %eax
	orl	%esi, %eax
	movl	-236(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-96(%ebp), %ecx
	addl	$16, %ecx
	movl	-96(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -232(%ebp)
	movl	%edi, -228(%ebp)
	movl	-92(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-232(%ebp), %eax
	orl	%esi, %eax
	movl	-228(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE64:
.LBB65:
	.loc 1 1706 0
	leal	-192(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-88(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-88(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE65:
	.loc 1 1707 0
	movl	$0, -116(%ebp)
	jmp	.L552
.L553:
.LBB66:
	.loc 1 1709 0
	movl	-116(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -84(%ebp)
	.loc 1 1711 0
	movl	-84(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$40, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	js	.L554
	movl	-140(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	reloads_conflict@PLT
	testl	%eax, %eax
	je	.L554
	.loc 1 1712 0
	movl	$0, -120(%ebp)
	jmp	.L557
.L558:
	.loc 1 1713 0
	movl	-84(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$40, %eax
	movl	(%eax), %eax
	addl	-120(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -220(%ebp)
	movl	-192(%ebp,%eax,8), %edx
	movl	-188(%ebp,%eax,8), %ecx
	movl	%edx, -216(%ebp)
	movl	%ecx, -212(%ebp)
	movl	-84(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$40, %eax
	movl	(%eax), %eax
	addl	-120(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L640
	movl	%esi, %edi
	xorl	%esi, %esi
.L640:
	movl	-216(%ebp), %eax
	orl	%esi, %eax
	movl	-212(%ebp), %edx
	orl	%edi, %edx
	movl	-220(%ebp), %ecx
	movl	%eax, -192(%ebp,%ecx,8)
	movl	%edx, -188(%ebp,%ecx,8)
	.loc 1 1712 0
	addl	$1, -120(%ebp)
.L557:
	movl	-84(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	cmpl	-120(%ebp), %eax
	ja	.L558
.L554:
.LBE66:
	.loc 1 1707 0
	addl	$1, -116(%ebp)
.L552:
	movl	-116(%ebp), %eax
	cmpl	12(%ebp), %eax
	jl	.L553
	.loc 1 1716 0
	movl	$0, -124(%ebp)
	jmp	.L560
.L561:
.LBB67:
	.loc 1 1718 0
	movl	-124(%ebp), %eax
	movl	%eax, -80(%ebp)
	.loc 1 1720 0
	movl	-80(%ebp), %eax
	shrl	$6, %eax
	movl	-168(%ebp,%eax,8), %esi
	movl	-164(%ebp,%eax,8), %edi
	movl	-80(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L639
	movl	%edx, %eax
	xorl	%edx, %edx
.L639:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L562
	movl	-80(%ebp), %eax
	shrl	$6, %eax
	movl	-192(%ebp,%eax,8), %esi
	movl	-188(%ebp,%eax,8), %edi
	movl	-80(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L638
	movl	%edx, %eax
	xorl	%edx, %edx
.L638:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L562
	movl	-136(%ebp), %eax
	movl	20(%eax), %eax
	movl	-80(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L562
.LBB68:
	.loc 1 1724 0
	movl	-80(%ebp), %eax
	movl	spill_cost@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -76(%ebp)
	.loc 1 1725 0
	movl	$1, -72(%ebp)
	.loc 1 1726 0
	movl	-136(%ebp), %eax
	movl	20(%eax), %eax
	movl	-80(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -68(%ebp)
	.loc 1 1728 0
	movl	$1, -120(%ebp)
	jmp	.L566
.L567:
	.loc 1 1730 0
	movl	-120(%ebp), %eax
	addl	-80(%ebp), %eax
	movl	spill_add_cost@GOTOFF(%ebx,%eax,4), %eax
	addl	%eax, -76(%ebp)
	.loc 1 1731 0
	movl	-120(%ebp), %eax
	addl	-80(%ebp), %eax
	shrl	$6, %eax
	movl	-168(%ebp,%eax,8), %esi
	movl	-164(%ebp,%eax,8), %edi
	movl	-120(%ebp), %eax
	addl	-80(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L637
	movl	%edx, %eax
	xorl	%edx, %edx
.L637:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L568
	movl	-120(%ebp), %eax
	addl	-80(%ebp), %eax
	shrl	$6, %eax
	movl	-192(%ebp,%eax,8), %esi
	movl	-188(%ebp,%eax,8), %edi
	movl	-120(%ebp), %eax
	addl	-80(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L636
	movl	%edx, %eax
	xorl	%edx, %edx
.L636:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L570
.L568:
	.loc 1 1733 0
	movl	$0, -72(%ebp)
.L570:
	.loc 1 1728 0
	addl	$1, -120(%ebp)
.L566:
	movl	-120(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jb	.L567
	.loc 1 1735 0
	cmpl	$0, -72(%ebp)
	je	.L562
	.loc 1 1737 0
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L573
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L573
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-80(%ebp), %eax
	jne	.L573
	.loc 1 1738 0
	subl	$1, -76(%ebp)
.L573:
	.loc 1 1739 0
	movl	-136(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L577
	movl	-136(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L577
	movl	-136(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-80(%ebp), %eax
	jne	.L577
	.loc 1 1740 0
	subl	$1, -76(%ebp)
.L577:
	.loc 1 1741 0
	movl	-76(%ebp), %eax
	cmpl	-132(%ebp), %eax
	jl	.L581
	movl	-76(%ebp), %eax
	cmpl	-132(%ebp), %eax
	jne	.L562
	movl	-80(%ebp), %edx
	movl	inv_reg_alloc_order@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	-128(%ebp), %edx
	movl	inv_reg_alloc_order@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	%eax, %ecx
	jge	.L562
.L581:
	.loc 1 1754 0
	movl	-80(%ebp), %eax
	movl	%eax, -128(%ebp)
	.loc 1 1755 0
	movl	-76(%ebp), %eax
	movl	%eax, -132(%ebp)
.L562:
.LBE68:
.LBE67:
	.loc 1 1716 0
	addl	$1, -124(%ebp)
.L560:
	cmpl	$175, -124(%ebp)
	jbe	.L561
	.loc 1 1759 0
	cmpl	$-1, -128(%ebp)
	jne	.L585
	.loc 1 1760 0
	movl	$0, -208(%ebp)
	jmp	.L587
.L585:
	.loc 1 1762 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L588
	.loc 1 1763 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-140(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	.LC4@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	fprintf@PLT
.L588:
	.loc 1 1765 0
	movl	-136(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, %edx
	movl	-136(%ebp), %eax
	movl	%edx, 24(%eax)
	.loc 1 1766 0
	movl	-136(%ebp), %edx
	movl	-128(%ebp), %eax
	movl	%eax, 40(%edx)
.LBB69:
	.loc 1 1768 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	$1, -60(%ebp)
	movl	$16, -56(%ebp)
	movl	$1, -52(%ebp)
	jmp	.L590
.L591:
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
.L590:
	cmpl	$0, -64(%ebp)
	je	.L592
	movl	-64(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-60(%ebp), %eax
	jb	.L591
.L592:
	cmpl	$0, -64(%ebp)
	je	.L597
	movl	-64(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-60(%ebp), %eax
	je	.L597
	movl	$0, -56(%ebp)
	movl	$0, -52(%ebp)
	jmp	.L597
.L600:
.LBB70:
	movl	-52(%ebp), %eax
	movl	-64(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	je	.L601
	jmp	.L603
.L604:
.LBB71:
	movl	-56(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	andl	-48(%ebp), %eax
	testl	%eax, %eax
	je	.L605
	movl	-44(%ebp), %eax
	notl	%eax
	andl	%eax, -48(%ebp)
	movl	-64(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-52(%ebp), %eax
	sall	$5, %eax
	addl	-56(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %edx
	movl	-136(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	count_spilled_pseudo
	cmpl	$0, -48(%ebp)
	je	.L601
.L605:
.LBE71:
	addl	$1, -56(%ebp)
.L603:
	cmpl	$31, -56(%ebp)
	jbe	.L604
.L601:
	movl	$0, -56(%ebp)
.LBE70:
	addl	$1, -52(%ebp)
.L599:
	cmpl	$3, -52(%ebp)
	jbe	.L600
	movl	$0, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
.L597:
	cmpl	$0, -64(%ebp)
	jne	.L599
.LBE69:
.LBB72:
	.loc 1 1774 0
	movl	8(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	$1, -36(%ebp)
	movl	$16, -32(%ebp)
	movl	$1, -28(%ebp)
	jmp	.L609
.L610:
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
.L609:
	cmpl	$0, -40(%ebp)
	je	.L611
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-36(%ebp), %eax
	jb	.L610
.L611:
	cmpl	$0, -40(%ebp)
	je	.L616
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-36(%ebp), %eax
	je	.L616
	movl	$0, -32(%ebp)
	movl	$0, -28(%ebp)
	jmp	.L616
.L619:
.LBB73:
	movl	-28(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	je	.L620
	jmp	.L622
.L623:
.LBB74:
	movl	-32(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	andl	-24(%ebp), %eax
	testl	%eax, %eax
	je	.L624
	movl	-20(%ebp), %eax
	notl	%eax
	andl	%eax, -24(%ebp)
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-28(%ebp), %eax
	sall	$5, %eax
	addl	-32(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %edx
	movl	-136(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	count_spilled_pseudo
	cmpl	$0, -24(%ebp)
	je	.L620
.L624:
.LBE74:
	addl	$1, -32(%ebp)
.L622:
	cmpl	$31, -32(%ebp)
	jbe	.L623
.L620:
	movl	$0, -32(%ebp)
.LBE73:
	addl	$1, -28(%ebp)
.L618:
	cmpl	$3, -28(%ebp)
	jbe	.L619
	movl	$0, -28(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
.L616:
	cmpl	$0, -40(%ebp)
	jne	.L618
.LBE72:
	.loc 1 1780 0
	movl	$0, -124(%ebp)
	jmp	.L628
.L629:
	.loc 1 1782 0
	movl	-128(%ebp), %eax
	addl	-124(%ebp), %eax
	movl	spill_cost@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	jne	.L630
	movl	-128(%ebp), %eax
	addl	-124(%ebp), %eax
	movl	spill_add_cost@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L632
.L630:
	.loc 1 1784 0
	leal	__FUNCTION__.16380@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1784, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L632:
	.loc 1 1785 0
	movl	-128(%ebp), %eax
	addl	-124(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -204(%ebp)
	movl	used_spill_regs_local@GOTOFF(%ebx,%eax,8), %esi
	movl	4+used_spill_regs_local@GOTOFF(%ebx,%eax,8), %edi
	movl	%esi, -200(%ebp)
	movl	%edi, -196(%ebp)
	movl	-128(%ebp), %eax
	addl	-124(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L635
	movl	%esi, %edi
	xorl	%esi, %esi
.L635:
	movl	-200(%ebp), %eax
	orl	%esi, %eax
	movl	-196(%ebp), %edx
	orl	%edi, %edx
	movl	-204(%ebp), %edi
	movl	%eax, used_spill_regs_local@GOTOFF(%ebx,%edi,8)
	movl	%edx, 4+used_spill_regs_local@GOTOFF(%ebx,%edi,8)
	.loc 1 1780 0
	addl	$1, -124(%ebp)
.L628:
	movl	-136(%ebp), %eax
	movl	24(%eax), %eax
	cmpl	-124(%ebp), %eax
	ja	.L629
	.loc 1 1787 0
	movl	$1, -208(%ebp)
.L587:
	movl	-208(%ebp), %eax
	.loc 1 1788 0
	addl	$284, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE27:
	.size	find_reg, .-find_reg
	.section	.rodata
.LC5:
	.string	"Spilling for insn %d.\n"
	.text
	.type	find_reload_regs, @function
find_reload_regs:
.LFB28:
	.loc 1 1799 0
	pushl	%ebp
.LCFI64:
	movl	%esp, %ebp
.LCFI65:
	pushl	%edi
.LCFI66:
	pushl	%esi
.LCFI67:
	pushl	%ebx
.LCFI68:
	subl	$76, %esp
.LCFI69:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1806 0
	movl	$0, -48(%ebp)
	jmp	.L642
.L643:
	.loc 1 1809 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-48(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	44(%eax), %eax
	testl	%eax, %eax
	je	.L644
.LBB75:
	.loc 1 1811 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-48(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 1812 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-48(%ebp), %eax
	imull	$76, %eax, %eax
	addl	%eax, %edx
	movl	-44(%ebp), %eax
	movl	%eax, 40(%edx)
	.loc 1 1813 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-48(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %esi
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-48(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	44(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, 24(%esi)
	jmp	.L646
.L644:
.LBE75:
	.loc 1 1817 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-48(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	$-1, 40(%eax)
.L646:
	.loc 1 1818 0
	movl	-48(%ebp), %eax
	movl	-48(%ebp), %edx
	movw	%dx, reload_order@GOTOFF(%ebx,%eax,2)
	.loc 1 1806 0
	addl	$1, -48(%ebp)
.L642:
	movl	8(%ebp), %eax
	movl	56(%eax), %eax
	cmpl	-48(%ebp), %eax
	jg	.L643
	.loc 1 1821 0
	movl	8(%ebp), %eax
	movl	56(%eax), %edx
	movl	n_reloads@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 1822 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	imull	$76, %eax, %ecx
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	rld@GOT(%ebx), %eax
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
.LBB76:
	.loc 1 1824 0
	leal	used_spill_regs_local@GOTOFF(%ebx), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-40(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-40(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE76:
	.loc 1 1826 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L648
	.loc 1 1827 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %edx
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	%edx, 8(%esp)
	leal	.LC5@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	fprintf@PLT
.L648:
	.loc 1 1829 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	leal	reload_reg_class_lower@GOTOFF(%ebx), %eax
	movl	%eax, 12(%esp)
	movl	$2, 8(%esp)
	movl	%edx, 4(%esp)
	leal	reload_order@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	qsort@PLT
	.loc 1 1833 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	order_regs_for_reload
	.loc 1 1835 0
	movl	$0, -48(%ebp)
	jmp	.L650
.L651:
.LBB77:
	.loc 1 1837 0
	movl	-48(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -36(%ebp)
	.loc 1 1840 0
	movl	-36(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L652
	movl	-36(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	jne	.L652
	movl	-36(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	testb	%al, %al
	je	.L655
.L652:
	movl	-36(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L655
	movl	-36(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$40, %eax
	movl	(%eax), %eax
	cmpl	$-1, %eax
	jne	.L655
	.loc 1 1843 0
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg
	testl	%eax, %eax
	jne	.L655
	.loc 1 1845 0
	movl	-36(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	spill_failure
	.loc 1 1846 0
	movl	$1, failure@GOTOFF(%ebx)
	.loc 1 1847 0
	jmp	.L661
.L655:
.LBE77:
	.loc 1 1835 0
	addl	$1, -48(%ebp)
.L650:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -48(%ebp)
	jl	.L651
.LBB78:
	.loc 1 1851 0
	movl	8(%ebp), %eax
	addl	$60, %eax
	movl	%eax, -32(%ebp)
	leal	used_spill_regs_local@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-32(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-32(%ebp), %ecx
	addl	$8, %ecx
	movl	-28(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-32(%ebp), %ecx
	addl	$16, %ecx
	movl	-28(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE78:
.LBB79:
	.loc 1 1852 0
	leal	used_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	leal	used_spill_regs_local@GOTOFF(%ebx), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -72(%ebp)
	movl	%ecx, -68(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-72(%ebp), %eax
	orl	%esi, %eax
	movl	-68(%ebp), %edx
	orl	%edi, %edx
	movl	-24(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-24(%ebp), %ecx
	addl	$8, %ecx
	movl	-24(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -64(%ebp)
	movl	%edi, -60(%ebp)
	movl	-20(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-64(%ebp), %eax
	orl	%esi, %eax
	movl	-60(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-24(%ebp), %ecx
	addl	$16, %ecx
	movl	-24(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -56(%ebp)
	movl	%edi, -52(%ebp)
	movl	-20(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-56(%ebp), %eax
	orl	%esi, %eax
	movl	-52(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE79:
	.loc 1 1854 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	imull	$76, %eax, %ecx
	movl	8(%ebp), %eax
	movl	52(%eax), %eax
	movl	rld@GOT(%ebx), %edx
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
.L661:
	.loc 1 1855 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE28:
	.size	find_reload_regs, .-find_reload_regs
	.type	select_reload_regs, @function
select_reload_regs:
.LFB29:
	.loc 1 1859 0
	pushl	%ebp
.LCFI70:
	movl	%esp, %ebp
.LCFI71:
	pushl	%ebx
.LCFI72:
	subl	$20, %esp
.LCFI73:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1863 0
	movl	insns_need_reload@GOTOFF(%ebx), %eax
	movl	%eax, -8(%ebp)
	jmp	.L663
.L664:
	.loc 1 1865 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reload_regs
	.loc 1 1864 0
	movl	-8(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -8(%ebp)
.L663:
	.loc 1 1863 0
	cmpl	$0, -8(%ebp)
	jne	.L664
	.loc 1 1866 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE29:
	.size	select_reload_regs, .-select_reload_regs
	.type	delete_caller_save_insns, @function
delete_caller_save_insns:
.LFB30:
	.loc 1 1872 0
	pushl	%ebp
.LCFI74:
	movl	%esp, %ebp
.LCFI75:
	pushl	%ebx
.LCFI76:
	subl	$20, %esp
.LCFI77:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1873 0
	movl	reload_insn_chain@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1875 0
	jmp	.L683
.L671:
.LBB80:
	.loc 1 1879 0
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 1880 0
	movl	-16(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 1882 0
	movl	reload_insn_chain@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jne	.L672
	.loc 1 1883 0
	movl	reload_insn_chain@GOT(%ebx), %edx
	movl	-12(%ebp), %eax
	movl	%eax, (%edx)
.L672:
	.loc 1 1884 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
	.loc 1 1886 0
	cmpl	$0, -12(%ebp)
	je	.L674
	.loc 1 1887 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
.L674:
	.loc 1 1888 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L676
	.loc 1 1889 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%eax, (%edx)
.L676:
	.loc 1 1890 0
	movl	unused_insn_chains@GOTOFF(%ebx), %edx
	movl	-16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 1891 0
	movl	-16(%ebp), %eax
	movl	%eax, unused_insn_chains@GOTOFF(%ebx)
	.loc 1 1892 0
	movl	-12(%ebp), %eax
	movl	%eax, -16(%ebp)
.L670:
.LBE80:
	.loc 1 1877 0
	cmpl	$0, -16(%ebp)
	je	.L678
	movl	-16(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L671
.L678:
	.loc 1 1894 0
	cmpl	$0, -16(%ebp)
	je	.L668
	.loc 1 1895 0
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
.L668:
.L683:
	.loc 1 1875 0
	cmpl	$0, -16(%ebp)
	jne	.L670
	.loc 1 1897 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE30:
	.size	delete_caller_save_insns, .-delete_caller_save_insns
	.section	.rodata
	.type	__FUNCTION__.16789, @object
	.size	__FUNCTION__.16789, 14
__FUNCTION__.16789:
	.string	"spill_failure"
.LC6:
	.string	"NO_REGS"
.LC7:
	.string	"M16_NA_REGS"
.LC8:
	.string	"M16_REGS"
.LC9:
	.string	"T_REG"
.LC10:
	.string	"M16_T_REGS"
.LC11:
	.string	"GR_REGS"
.LC12:
	.string	"FP_REGS"
.LC13:
	.string	"HI_REG"
.LC14:
	.string	"LO_REG"
.LC15:
	.string	"HILO_REG"
.LC16:
	.string	"MD_REGS"
.LC17:
	.string	"COP0_REGS"
.LC18:
	.string	"COP2_REGS"
.LC19:
	.string	"COP3_REGS"
.LC20:
	.string	"HI_AND_GR_REGS"
.LC21:
	.string	"LO_AND_GR_REGS"
.LC22:
	.string	"HILO_AND_GR_REGS"
.LC23:
	.string	"HI_AND_FP_REGS"
.LC24:
	.string	"COP0_AND_GR_REGS"
.LC25:
	.string	"COP2_AND_GR_REGS"
.LC26:
	.string	"COP3_AND_GR_REGS"
.LC27:
	.string	"ALL_COP_REGS"
.LC28:
	.string	"ALL_COP_AND_GR_REGS"
.LC29:
	.string	"ST_REGS"
.LC30:
	.string	"ALL_REGS"
	.section	.data.rel.ro.local,"aw",@progbits
	.align 32
	.type	reg_class_names.16788, @object
	.size	reg_class_names.16788, 100
reg_class_names.16788:
	.long	.LC6
	.long	.LC7
	.long	.LC8
	.long	.LC9
	.long	.LC10
	.long	.LC11
	.long	.LC12
	.long	.LC13
	.long	.LC14
	.long	.LC15
	.long	.LC16
	.long	.LC17
	.long	.LC18
	.long	.LC19
	.long	.LC20
	.long	.LC21
	.long	.LC22
	.long	.LC23
	.long	.LC24
	.long	.LC25
	.long	.LC26
	.long	.LC27
	.long	.LC28
	.long	.LC29
	.long	.LC30
	.section	.rodata
	.align 4
.LC31:
	.string	"can't find a register in class `%s' while reloading `asm'"
	.align 4
.LC32:
	.string	"unable to find a register to spill in class `%s'"
.LC33:
	.string	"this is the insn:"
	.text
	.type	spill_failure, @function
spill_failure:
.LFB31:
	.loc 1 1906 0
	pushl	%ebp
.LCFI78:
	movl	%esp, %ebp
.LCFI79:
	pushl	%ebx
.LCFI80:
	subl	$20, %esp
.LCFI81:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1908 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	js	.L685
	.loc 1 1909 0
	movl	12(%ebp), %eax
	movl	reg_class_names.16788@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, 8(%esp)
	leal	.LC31@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	error_for_asm@PLT
	.loc 1 1917 0
	jmp	.L687
.L685:
	.loc 1 1913 0
	movl	12(%ebp), %eax
	movl	reg_class_names.16788@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, 4(%esp)
	leal	.LC32@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	error@PLT
	.loc 1 1915 0
	leal	__FUNCTION__.16789@GOTOFF(%ebx), %eax
	movl	%eax, 16(%esp)
	movl	$1915, 12(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	.LC33@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	_fatal_insn@PLT
.L687:
	.loc 1 1917 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE31:
	.size	spill_failure, .-spill_failure
	.type	delete_dead_insn, @function
delete_dead_insn:
.LFB32:
	.loc 1 1925 0
	pushl	%ebp
.LCFI82:
	movl	%esp, %ebp
.LCFI83:
	pushl	%ebx
.LCFI84:
	subl	$36, %esp
.LCFI85:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1926 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_real_insn@PLT
	movl	%eax, -12(%ebp)
	.loc 1 1931 0
	cmpl	$0, -12(%ebp)
	je	.L689
	movl	-12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L689
	movl	-12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L689
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L689
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	je	.L689
	movl	-12(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L689
	.loc 1 1936 0
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_dead_insn
.L689:
	.loc 1 1938 0
	movl	8(%ebp), %eax
	movw	$47, (%eax)
	.loc 1 1939 0
	movl	8(%ebp), %eax
	movl	$-99, 44(%eax)
	.loc 1 1940 0
	movl	8(%ebp), %eax
	movl	$0, 36(%eax)
	.loc 1 1941 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE32:
	.size	delete_dead_insn, .-delete_dead_insn
	.type	alter_reg, @function
alter_reg:
.LFB33:
	.loc 1 1955 0
	pushl	%ebp
.LCFI86:
	movl	%esp, %ebp
.LCFI87:
	pushl	%edi
.LCFI88:
	pushl	%esi
.LCFI89:
	pushl	%ebx
.LCFI90:
	subl	$108, %esp
.LCFI91:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1958 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L755
	.loc 1 1963 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L755
	.loc 1 1968 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	8(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	js	.L701
	movl	8(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -76(%ebp)
	jmp	.L703
.L701:
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
.L703:
	movl	-76(%ebp), %ecx
	movl	-80(%ebp), %edx
	movl	%ecx, 4(%edx)
	.loc 1 1974 0
	movl	8(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L755
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	jle	.L755
	movl	8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L755
	movl	8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L755
.LBB81:
	.loc 1 1980 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	.loc 1 1981 0
	movl	8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_max_ref_width@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	-40(%ebp), %edx
	movl	%edx, -88(%ebp)
	movl	%eax, -84(%ebp)
	movl	-88(%ebp), %ecx
	cmpl	%ecx, -84(%ebp)
	jae	.L708
	movl	-88(%ebp), %eax
	movl	%eax, -84(%ebp)
.L708:
	movl	-84(%ebp), %edx
	movl	%edx, -36(%ebp)
	.loc 1 1982 0
	movl	$0, -32(%ebp)
	.loc 1 1992 0
	cmpl	$-1, 12(%ebp)
	jne	.L709
	.loc 1 1995 0
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jne	.L711
	movl	$0, -72(%ebp)
	jmp	.L713
.L711:
	movl	$-1, -72(%ebp)
.L713:
	movl	-36(%ebp), %esi
	movl	$0, %edi
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-72(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	%eax, (%esp)
	call	assign_stack_local@PLT
	movl	%eax, -44(%ebp)
	.loc 1 1997 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L714
	.loc 1 2002 0
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -32(%ebp)
.L714:
	.loc 1 2004 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movl	-44(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	.loc 1 2007 0
	call	new_alias_set@PLT
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
	jmp	.L716
.L709:
	.loc 1 2011 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L717
	movl	12(%ebp), %eax
	movl	spill_stack_slot_width@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-36(%ebp), %eax
	jb	.L717
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-40(%ebp), %eax
	jb	.L717
	.loc 1 2015 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -44(%ebp)
	.loc 1 2011 0
	jmp	.L716
.L717:
.LBB82:
	.loc 1 2022 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 2025 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L721
	.loc 1 2027 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-40(%ebp), %eax
	jbe	.L723
	.loc 1 2029 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
.L723:
	.loc 1 2030 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot_width@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-36(%ebp), %eax
	jbe	.L721
	.loc 1 2031 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot_width@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -36(%ebp)
.L721:
	.loc 1 2035 0
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jne	.L726
	movl	$0, -68(%ebp)
	jmp	.L728
.L726:
	movl	$-1, -68(%ebp)
.L728:
	movl	-36(%ebp), %eax
	movl	$0, %edx
	movl	-68(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_stack_local@PLT
	movl	%eax, -44(%ebp)
	.loc 1 2037 0
	movl	-44(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 2040 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L729
	.loc 1 2041 0
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L731
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	movl	12(%eax), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -64(%ebp)
	movl	%ecx, -60(%ebp)
	jmp	.L733
.L731:
	movl	$0, -64(%ebp)
	movl	$0, -60(%ebp)
.L733:
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
	jmp	.L734
.L729:
	.loc 1 2043 0
	call	new_alias_set@PLT
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
.L734:
	.loc 1 2045 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L735
	.loc 1 2051 0
	movl	-28(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 2052 0
	cmpl	$0, -32(%ebp)
	je	.L735
	.loc 1 2053 0
	movl	-32(%ebp), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	-36(%ebp), %eax
	sall	$3, %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -24(%ebp)
.L735:
	.loc 1 2060 0
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, spill_stack_slot@GOTOFF(%ebx,%edx,4)
	.loc 1 2061 0
	movl	12(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, spill_stack_slot_width@GOTOFF(%ebx,%edx,4)
.L716:
.LBE82:
	.loc 1 2066 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L738
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jae	.L738
	.loc 1 2067 0
	movl	-40(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-32(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -32(%ebp)
.L738:
	.loc 1 2071 0
	movl	-32(%ebp), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -44(%ebp)
	.loc 1 2075 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L741
.LBB83:
	.loc 1 2077 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	104(%eax), %eax
	testl	%eax, %eax
	je	.L743
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	104(%eax), %eax
	testl	%eax, %eax
	je	.L745
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	104(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L747
.L745:
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	104(%eax), %eax
	movl	%eax, -52(%ebp)
.L747:
	movl	-52(%ebp), %eax
	movl	%eax, -56(%ebp)
	jmp	.L748
.L743:
	movl	$0, -56(%ebp)
.L748:
	movl	-56(%ebp), %edx
	movl	%edx, -20(%ebp)
	.loc 1 2083 0
	cmpl	$0, -20(%ebp)
	je	.L741
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L741
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L741
	.loc 1 2085 0
	cmpl	$-1, 12(%ebp)
	je	.L752
	movl	12(%ebp), %eax
	movl	spill_stack_slot@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-44(%ebp), %eax
	jne	.L752
	.loc 1 2086 0
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -44(%ebp)
.L752:
	.loc 1 2088 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_expr@PLT
.L741:
.LBE83:
	.loc 1 2093 0
	movl	8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	addl	%eax, %edx
	movl	-44(%ebp), %eax
	movl	%eax, (%edx)
.L755:
.LBE81:
	.loc 1 2095 0
	addl	$108, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE33:
	.size	alter_reg, .-alter_reg
.globl mark_home_live
	.type	mark_home_live, @function
mark_home_live:
.LFB34:
	.loc 1 2103 0
	pushl	%ebp
.LCFI92:
	movl	%esp, %ebp
.LCFI93:
	pushl	%ebx
.LCFI94:
	subl	$36, %esp
.LCFI95:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2106 0
	movl	8(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -12(%ebp)
	.loc 1 2107 0
	cmpl	$0, -12(%ebp)
	js	.L761
	.loc 1 2109 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	8(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, %edx
	movl	-12(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 2110 0
	jmp	.L759
.L760:
	.loc 1 2111 0
	movl	-12(%ebp), %edx
	movl	regs_ever_live@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -12(%ebp)
.L759:
	.loc 1 2110 0
	movl	-12(%ebp), %eax
	cmpl	-8(%ebp), %eax
	jl	.L760
.L761:
	.loc 1 2112 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE34:
	.size	mark_home_live, .-mark_home_live
	.type	set_label_offsets, @function
set_label_offsets:
.LFB35:
	.loc 1 2129 0
	pushl	%ebp
.LCFI96:
	movl	%esp, %ebp
.LCFI97:
	pushl	%ebx
.LCFI98:
	subl	$68, %esp
.LCFI99:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2130 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -20(%ebp)
	.loc 1 2135 0
	movl	-20(%ebp), %eax
	subl	$42, %eax
	movl	%eax, -48(%ebp)
	cmpl	$35, -48(%ebp)
	ja	.L818
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	.L770@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L770:
	.long	.L764@GOTOFF
	.long	.L765@GOTOFF
	.long	.L764@GOTOFF
	.long	.L818@GOTOFF
	.long	.L766@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L767@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L767@GOTOFF
	.long	.L767@GOTOFF
	.long	.L818@GOTOFF
	.long	.L768@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L818@GOTOFF
	.long	.L769@GOTOFF
	.text
.L769:
	.loc 1 2138 0
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L818
	.loc 1 2141 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L766:
	.loc 1 2153 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	first_label_num@GOTOFF(%ebx), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	movl	offsets_known_at@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	jne	.L772
	.loc 1 2155 0
	movl	$0, -12(%ebp)
	jmp	.L774
.L775:
	.loc 1 2156 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	first_label_num@GOTOFF(%ebx), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	movl	%edx, %eax
	sall	$3, %eax
	addl	%edx, %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	offsets_at@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	%edx, -44(%ebp)
	movl	-12(%ebp), %eax
	movl	%eax, -40(%ebp)
	cmpl	$0, 16(%ebp)
	je	.L776
	movl	-12(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	8(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L778
.L776:
	movl	-12(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
.L778:
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	-44(%ebp), %ecx
	movl	%eax, (%ecx,%edx,4)
	.loc 1 2155 0
	addl	$1, -12(%ebp)
.L774:
	cmpl	$8, -12(%ebp)
	jbe	.L775
	.loc 1 2159 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	first_label_num@GOTOFF(%ebx), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	movl	offsets_known_at@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movb	$1, (%eax)
	jmp	.L818
.L772:
	.loc 1 2166 0
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	jne	.L781
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_nonnote_insn@PLT
	movl	%eax, -16(%ebp)
	cmpl	$0, -16(%ebp)
	je	.L781
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$45, %ax
	jne	.L781
	.loc 1 2169 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	set_offsets_for_label
	.loc 1 2166 0
	jmp	.L818
.L781:
	.loc 1 2175 0
	movl	$0, -12(%ebp)
	jmp	.L785
.L786:
	.loc 1 2176 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	first_label_num@GOTOFF(%ebx), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	movl	%edx, %eax
	sall	$3, %eax
	addl	%edx, %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	offsets_at@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	-12(%ebp), %eax
	movl	(%edx,%eax,4), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, 16(%ebp)
	je	.L787
	movl	-12(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	8(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L789
.L787:
	movl	-12(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
.L789:
	movl	-28(%ebp), %eax
	cmpl	%eax, -32(%ebp)
	je	.L790
	.loc 1 2179 0
	movl	-12(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, 12(%eax)
.L790:
	.loc 1 2175 0
	addl	$1, -12(%ebp)
.L785:
	cmpl	$8, -12(%ebp)
	jbe	.L786
	.loc 1 2181 0
	jmp	.L818
.L765:
	.loc 1 2184 0
	movl	12(%ebp), %eax
	movl	44(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	set_label_offsets
.L764:
	.loc 1 2192 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L792
.L793:
	.loc 1 2193 0
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$13, %al
	jne	.L794
	.loc 1 2194 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	set_label_offsets
.L794:
	.loc 1 2192 0
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
.L792:
	cmpl	$0, -16(%ebp)
	jne	.L793
	.loc 1 2195 0
	jmp	.L818
.L767:
	.loc 1 2204 0
	movl	$0, -12(%ebp)
	jmp	.L797
.L798:
	.loc 1 2205 0
	cmpl	$55, -20(%ebp)
	sete	%al
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-12(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	set_label_offsets
	.loc 1 2204 0
	addl	$1, -12(%ebp)
.L797:
	cmpl	$55, -20(%ebp)
	sete	%al
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-12(%ebp), %eax
	ja	.L798
	.loc 1 2207 0
	jmp	.L818
.L768:
	.loc 1 2222 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L818
	.loc 1 2225 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -24(%ebp)
	cmpl	$69, -24(%ebp)
	je	.L818
	cmpl	$69, -24(%ebp)
	ja	.L805
	cmpl	$61, -24(%ebp)
	je	.L818
	jmp	.L801
.L805:
	cmpl	$77, -24(%ebp)
	je	.L803
	cmpl	$82, -24(%ebp)
	je	.L804
	jmp	.L801
.L803:
	.loc 1 2232 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	set_label_offsets
	.loc 1 2233 0
	jmp	.L818
.L804:
	.loc 1 2236 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 2237 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	jne	.L806
	.loc 1 2238 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	set_label_offsets
	jmp	.L808
.L806:
	.loc 1 2239 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$69, %ax
	je	.L808
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$61, %ax
	jne	.L801
.L808:
	.loc 1 2242 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 2243 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	jne	.L810
	.loc 1 2244 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	set_label_offsets
	jmp	.L818
.L810:
	.loc 1 2245 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$69, %ax
	je	.L818
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$61, %ax
	jne	.L801
	.loc 1 2247 0
	jmp	.L818
.L801:
	.loc 1 2255 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -8(%ebp)
	jmp	.L814
.L815:
	.loc 1 2256 0
	movl	-8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-8(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	%eax, %edx
	je	.L816
	.loc 1 2257 0
	movl	-8(%ebp), %eax
	movl	$0, 12(%eax)
.L816:
	.loc 1 2255 0
	addl	$40, -8(%ebp)
.L814:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-8(%ebp), %eax
	ja	.L815
.L818:
	.loc 1 2263 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE35:
	.size	set_label_offsets, .-set_label_offsets
	.section	.rodata
	.type	__FUNCTION__.17452, @object
	.size	__FUNCTION__.17452, 15
__FUNCTION__.17452:
	.string	"eliminate_regs"
	.text
.globl eliminate_regs
	.type	eliminate_regs, @function
eliminate_regs:
.LFB36:
	.loc 1 2295 0
	pushl	%ebp
.LCFI100:
	movl	%esp, %ebp
.LCFI101:
	pushl	%edi
.LCFI102:
	pushl	%esi
.LCFI103:
	pushl	%ebx
.LCFI104:
	subl	$188, %esp
.LCFI105:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2296 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -88(%ebp)
	.loc 1 2302 0
	movl	$0, -60(%ebp)
	.loc 1 2304 0
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L820
	.loc 1 2305 0
	movl	8(%ebp), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L820:
	.loc 1 2307 0
	movl	-88(%ebp), %edx
	subl	$3, %edx
	movl	%edx, -164(%ebp)
	cmpl	$138, -164(%ebp)
	ja	.L823
	movl	-164(%ebp), %eax
	sall	$2, %eax
	movl	.L837@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L837:
	.long	.L824@GOTOFF
	.long	.L825@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L826@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L826@GOTOFF
	.long	.L827@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L826@GOTOFF
	.long	.L826@GOTOFF
	.long	.L823@GOTOFF
	.long	.L827@GOTOFF
	.long	.L828@GOTOFF
	.long	.L827@GOTOFF
	.long	.L829@GOTOFF
	.long	.L826@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L826@GOTOFF
	.long	.L826@GOTOFF
	.long	.L826@GOTOFF
	.long	.L823@GOTOFF
	.long	.L826@GOTOFF
	.long	.L826@GOTOFF
	.long	.L823@GOTOFF
	.long	.L830@GOTOFF
	.long	.L823@GOTOFF
	.long	.L831@GOTOFF
	.long	.L832@GOTOFF
	.long	.L823@GOTOFF
	.long	.L833@GOTOFF
	.long	.L823@GOTOFF
	.long	.L826@GOTOFF
	.long	.L826@GOTOFF
	.long	.L834@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L829@GOTOFF
	.long	.L835@GOTOFF
	.long	.L829@GOTOFF
	.long	.L832@GOTOFF
	.long	.L836@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L832@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L829@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L823@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.long	.L832@GOTOFF
	.text
.L826:
	.loc 1 2321 0
	movl	8(%ebp), %ecx
	movl	%ecx, -160(%ebp)
	jmp	.L822
.L834:
	.loc 1 2327 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2328 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L838
	.loc 1 2329 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L838:
	.loc 1 2330 0
	movl	8(%ebp), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L830:
	.loc 1 2333 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	.loc 1 2337 0
	cmpl	$175, -80(%ebp)
	jg	.L840
	.loc 1 2339 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -84(%ebp)
	jmp	.L842
.L843:
	.loc 1 2341 0
	movl	-84(%ebp), %eax
	movl	32(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L844
	movl	-84(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L844
	.loc 1 2342 0
	movl	-84(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	-84(%ebp), %eax
	movl	36(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L844:
	.loc 1 2340 0
	addl	$40, -84(%ebp)
.L842:
	.loc 1 2339 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-84(%ebp), %eax
	ja	.L843
	jmp	.L848
.L840:
	.loc 1 2345 0
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L848
	movl	-80(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L848
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L848
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L848
	.loc 1 2348 0
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L848:
	.loc 1 2350 0
	movl	8(%ebp), %edx
	movl	%edx, -160(%ebp)
	jmp	.L822
.L835:
	.loc 1 2369 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L861
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L861
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L864
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L861
.L864:
	.loc 1 2373 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -84(%ebp)
	jmp	.L872
.L873:
	.loc 1 2375 0
	movl	-84(%ebp), %eax
	movl	32(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L874
	movl	-84(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L874
	.loc 1 2385 0
	cmpl	$0, 12(%ebp)
	je	.L877
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L877
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-84(%ebp), %eax
	movl	24(%eax), %eax
	negl	%eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L877
	.loc 1 2387 0
	movl	-84(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L877:
	.loc 1 2389 0
	movl	-84(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -156(%ebp)
	movl	-84(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -152(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L881
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L881
	movl	$5, -148(%ebp)
	jmp	.L884
.L881:
	movl	$4, -148(%ebp)
.L884:
	movl	-156(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-148(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L874:
	.loc 1 2374 0
	addl	$40, -84(%ebp)
.L872:
	.loc 1 2373 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-84(%ebp), %eax
	ja	.L873
	.loc 1 2396 0
	movl	8(%ebp), %ecx
	movl	%ecx, -160(%ebp)
	jmp	.L822
.L861:
.LBB84:
	.loc 1 2409 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -56(%ebp)
	.loc 1 2410 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -52(%ebp)
	.loc 1 2412 0
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L886
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-56(%ebp), %eax
	jne	.L888
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-52(%ebp), %eax
	je	.L886
.L888:
	.loc 1 2418 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L890
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L890
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L890
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L890
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L890
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L890
	.loc 1 2423 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 2418 0
	jmp	.L897
.L890:
	.loc 1 2424 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L897
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L897
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L897
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L897
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L897
	.loc 1 2428 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
.L897:
	.loc 1 2430 0
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	form_sum@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2435 0
	cmpl	$0, 12(%ebp)
	jne	.L903
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L903
	.loc 1 2436 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L903:
	.loc 1 2438 0
	movl	-76(%ebp), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L886:
.LBE84:
	.loc 1 2441 0
	movl	8(%ebp), %edx
	movl	%edx, -160(%ebp)
	jmp	.L822
.L836:
	.loc 1 2449 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L829
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L829
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L829
	.loc 1 2452 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -84(%ebp)
	jmp	.L909
.L910:
	.loc 1 2454 0
	movl	-84(%ebp), %eax
	movl	32(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L911
	movl	-84(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L911
	.loc 1 2456 0
	cmpl	$0, 12(%ebp)
	jne	.L914
	cmpl	$0, 16(%ebp)
	je	.L916
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$3, %ax
	je	.L914
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$4, %ax
	je	.L914
.L916:
	.loc 1 2460 0
	movl	-84(%ebp), %eax
	movl	$1, 28(%eax)
.L914:
	.loc 1 2462 0
	movl	-84(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -176(%ebp)
	movl	%ecx, -172(%ebp)
	movl	-176(%ebp), %ecx
	imull	%edi, %ecx
	movl	-172(%ebp), %eax
	imull	%esi, %eax
	movl	%eax, -168(%ebp)
	addl	-168(%ebp), %ecx
	movl	-176(%ebp), %eax
	mull	%esi
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	addl	-140(%ebp), %ecx
	movl	%ecx, -140(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -136(%ebp)
	movl	-84(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -132(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L919
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L919
	movl	$5, -128(%ebp)
	jmp	.L922
.L919:
	movl	$4, -128(%ebp)
.L922:
	movl	-136(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	-132(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	-144(%ebp), %edx
	movl	-140(%ebp), %ecx
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L911:
	.loc 1 2453 0
	addl	$40, -84(%ebp)
.L909:
	.loc 1 2452 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-84(%ebp), %eax
	ja	.L910
.L829:
.LBB85:
	.loc 1 2482 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -48(%ebp)
	.loc 1 2484 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L923
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -124(%ebp)
	jmp	.L925
.L923:
	movl	$0, -124(%ebp)
.L925:
	movl	-124(%ebp), %ecx
	movl	%ecx, -44(%ebp)
	.loc 1 2486 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-48(%ebp), %eax
	jne	.L926
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-44(%ebp), %eax
	je	.L928
.L926:
	.loc 1 2487 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L928:
.LBE85:
	.loc 1 2489 0
	movl	8(%ebp), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L824:
	.loc 1 2493 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L825
	.loc 1 2495 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2496 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-76(%ebp), %eax
	je	.L825
	.loc 1 2501 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	jne	.L931
	.loc 1 2502 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L933
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -120(%ebp)
	jmp	.L935
.L933:
	movl	$0, -120(%ebp)
.L935:
	movl	-120(%ebp), %edx
	movl	%edx, -160(%ebp)
	jmp	.L822
.L931:
	.loc 1 2506 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 8(%ebp)
.L825:
	.loc 1 2516 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L936
	.loc 1 2518 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2519 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-76(%ebp), %eax
	je	.L936
	.loc 1 2520 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	-76(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L936:
	.loc 1 2523 0
	movl	8(%ebp), %ecx
	movl	%ecx, -160(%ebp)
	jmp	.L822
.L832:
	.loc 1 2538 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2539 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-76(%ebp), %eax
	je	.L939
	.loc 1 2540 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-76(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L939:
	.loc 1 2541 0
	movl	8(%ebp), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L831:
	.loc 1 2550 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L941
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L941
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L941
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L941
	.loc 1 2556 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 2550 0
	jmp	.L946
.L941:
	.loc 1 2559 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
.L946:
	.loc 1 2561 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-76(%ebp), %eax
	je	.L947
.LBB86:
	.loc 1 2563 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	.loc 1 2564 0
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -36(%ebp)
	.loc 1 2566 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L949
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jge	.L951
	movl	-40(%ebp), %edx
	subl	$1, %edx
	movl	%edx, -116(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L953
	movl	$8, -112(%ebp)
	jmp	.L955
.L953:
	movl	$4, -112(%ebp)
.L955:
	movl	-116(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-112(%ebp)
	movl	%eax, -108(%ebp)
	movl	-36(%ebp), %ecx
	subl	$1, %ecx
	movl	%ecx, -104(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L956
	movl	$8, -100(%ebp)
	jmp	.L958
.L956:
	movl	$4, -100(%ebp)
.L958:
	movl	-104(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-100(%ebp)
	cmpl	%eax, -108(%ebp)
	jne	.L959
.L951:
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jne	.L949
.L959:
	.loc 1 2582 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	$0, %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L949:
	.loc 1 2584 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 8(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	gen_rtx_SUBREG@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L947:
.LBE86:
	.loc 1 2587 0
	movl	8(%ebp), %eax
	movl	%eax, -160(%ebp)
	jmp	.L822
.L833:
	.loc 1 2593 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$80, %ax
	jne	.L960
	.loc 1 2594 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L960:
	.loc 1 2599 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address_nv@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L828:
	.loc 1 2606 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2607 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-76(%ebp), %eax
	je	.L962
	.loc 1 2608 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-76(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$58, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -160(%ebp)
	jmp	.L822
.L962:
	.loc 1 2609 0
	movl	8(%ebp), %edx
	movl	%edx, -160(%ebp)
	jmp	.L822
.L827:
	.loc 1 2614 0
	leal	__FUNCTION__.17452@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2614, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L823:
	.loc 1 2622 0
	movl	-88(%ebp), %eax
	movl	rtx_format@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -64(%ebp)
	.loc 1 2623 0
	movl	$0, -72(%ebp)
	jmp	.L964
.L965:
	.loc 1 2625 0
	movl	-64(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L966
	.loc 1 2627 0
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2628 0
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	cmpl	-76(%ebp), %eax
	je	.L968
	cmpl	$0, -60(%ebp)
	jne	.L968
.LBB87:
	.loc 1 2630 0
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_alloc@PLT
	movl	%eax, -32(%ebp)
	.loc 1 2631 0
	movl	-88(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	sall	$3, %eax
	leal	4(%eax), %ecx
	movl	-32(%ebp), %eax
	movl	8(%ebp), %edx
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
	.loc 1 2634 0
	movl	-32(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 2635 0
	movl	$1, -60(%ebp)
.L968:
.LBE87:
	.loc 1 2637 0
	movl	-72(%ebp), %ecx
	movl	8(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 4(%edx,%ecx,8)
	jmp	.L971
.L966:
	.loc 1 2639 0
	movl	-64(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L971
.LBB88:
	.loc 1 2641 0
	movl	$0, -28(%ebp)
	.loc 1 2642 0
	movl	$0, -68(%ebp)
	jmp	.L973
.L974:
	.loc 1 2644 0
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-68(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, -76(%ebp)
	.loc 1 2645 0
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-68(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	cmpl	-76(%ebp), %eax
	je	.L975
	cmpl	$0, -28(%ebp)
	jne	.L975
.LBB89:
	.loc 1 2648 0
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	leal	4(%eax), %ecx
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtvec_v@PLT
	movl	%eax, -24(%ebp)
	.loc 1 2649 0
	cmpl	$0, -60(%ebp)
	jne	.L978
.LBB90:
	.loc 1 2651 0
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_alloc@PLT
	movl	%eax, -20(%ebp)
	.loc 1 2652 0
	movl	-88(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	sall	$3, %eax
	leal	4(%eax), %ecx
	movl	-20(%ebp), %eax
	movl	8(%ebp), %edx
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
	.loc 1 2656 0
	movl	-20(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 2657 0
	movl	$1, -60(%ebp)
.L978:
.LBE90:
	.loc 1 2659 0
	movl	-72(%ebp), %ecx
	movl	8(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%edx,%ecx,8)
	.loc 1 2660 0
	movl	$1, -28(%ebp)
.L975:
.LBE89:
	.loc 1 2662 0
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %ecx
	movl	-68(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 4(%ecx,%edx,4)
	.loc 1 2642 0
	addl	$1, -68(%ebp)
.L973:
	movl	-72(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-68(%ebp), %eax
	jg	.L974
.L971:
.LBE88:
	.loc 1 2623 0
	addl	$1, -72(%ebp)
	addl	$1, -64(%ebp)
.L964:
	movl	-88(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-72(%ebp), %eax
	jg	.L965
	.loc 1 2667 0
	movl	8(%ebp), %ecx
	movl	%ecx, -160(%ebp)
.L822:
	movl	-160(%ebp), %eax
	.loc 1 2668 0
	addl	$188, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE36:
	.size	eliminate_regs, .-eliminate_regs
	.section	.rodata
	.type	__FUNCTION__.18021, @object
	.size	__FUNCTION__.18021, 20
__FUNCTION__.18021:
	.string	"elimination_effects"
	.text
	.type	elimination_effects, @function
elimination_effects:
.LFB37:
	.loc 1 2679 0
	pushl	%ebp
.LCFI106:
	movl	%esp, %ebp
.LCFI107:
	pushl	%ebx
.LCFI108:
	subl	$52, %esp
.LCFI109:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2680 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 2686 0
	movl	-36(%ebp), %eax
	subl	$46, %eax
	movl	%eax, -40(%ebp)
	cmpl	$95, -40(%ebp)
	ja	.L983
	movl	-40(%ebp), %eax
	sall	$2, %eax
	movl	.L994@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L994:
	.long	.L1070@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L983@GOTOFF
	.long	.L985@GOTOFF
	.long	.L986@GOTOFF
	.long	.L987@GOTOFF
	.long	.L983@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L983@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L983@GOTOFF
	.long	.L988@GOTOFF
	.long	.L983@GOTOFF
	.long	.L989@GOTOFF
	.long	.L990@GOTOFF
	.long	.L983@GOTOFF
	.long	.L991@GOTOFF
	.long	.L983@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L1070@GOTOFF
	.long	.L992@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L990@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L990@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L993@GOTOFF
	.long	.L993@GOTOFF
	.long	.L993@GOTOFF
	.long	.L993@GOTOFF
	.long	.L993@GOTOFF
	.long	.L993@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L983@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.long	.L990@GOTOFF
	.text
.L992:
	.loc 1 2703 0
	leal	__FUNCTION__.18021@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2703, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L988:
	.loc 1 2706 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 2710 0
	cmpl	$175, -28(%ebp)
	jg	.L996
	.loc 1 2712 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	jmp	.L998
.L999:
	.loc 1 2714 0
	movl	-32(%ebp), %eax
	movl	32(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L1000
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1000
	.loc 1 2716 0
	cmpl	$0, 12(%ebp)
	jne	.L1070
	.loc 1 2717 0
	movl	-32(%ebp), %eax
	movl	$1, 28(%eax)
	.loc 1 2718 0
	jmp	.L1070
.L1000:
	.loc 1 2713 0
	addl	$40, -32(%ebp)
.L998:
	.loc 1 2712 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-32(%ebp), %eax
	ja	.L999
	jmp	.L1070
.L996:
	.loc 1 2722 0
	movl	-28(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L1070
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1070
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1070
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	function_invariant_p@PLT
	testl	%eax, %eax
	jne	.L1070
	.loc 1 2725 0
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	.loc 1 2726 0
	jmp	.L1070
.L993:
	.loc 1 2734 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1011
.L1012:
	.loc 1 2735 0
	movl	-32(%ebp), %eax
	movl	36(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1013
.LBB91:
	.loc 1 2737 0
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 2744 0
	cmpl	$106, -36(%ebp)
	je	.L1015
	cmpl	$108, -36(%ebp)
	jne	.L1017
.L1015:
	.loc 1 2745 0
	movl	-32(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %edx
	addl	-12(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 2744 0
	jmp	.L1013
.L1017:
	.loc 1 2746 0
	cmpl	$107, -36(%ebp)
	je	.L1018
	cmpl	$109, -36(%ebp)
	jne	.L1020
.L1018:
	.loc 1 2747 0
	movl	-32(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %edx
	subl	-12(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 2746 0
	jmp	.L1013
.L1020:
	.loc 1 2748 0
	cmpl	$110, -36(%ebp)
	je	.L1021
	cmpl	$111, -36(%ebp)
	jne	.L1013
.L1021:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1013
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1013
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1025
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1013
.L1025:
	.loc 1 2752 0
	movl	-32(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%edx, 20(%eax)
.L1013:
.LBE91:
	.loc 1 2734 0
	addl	$40, -32(%ebp)
.L1011:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-32(%ebp), %eax
	ja	.L1012
	.loc 1 2756 0
	cmpl	$111, -36(%ebp)
	je	.L983
	cmpl	$110, -36(%ebp)
	je	.L983
.L990:
	.loc 1 2769 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	.loc 1 2770 0
	jmp	.L1070
.L989:
	.loc 1 2773 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1035
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L1035
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1035
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1070
.L1035:
	.loc 1 2780 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	.loc 1 2781 0
	jmp	.L1070
.L986:
	.loc 1 2787 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1039
.L1040:
	.loc 1 2788 0
	movl	-32(%ebp), %eax
	movl	32(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1041
	.loc 1 2789 0
	movl	-32(%ebp), %eax
	movl	$0, 12(%eax)
.L1041:
	.loc 1 2787 0
	addl	$40, -32(%ebp)
.L1039:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-32(%ebp), %eax
	ja	.L1040
	.loc 1 2791 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	.loc 1 2792 0
	jmp	.L1070
.L987:
	.loc 1 2798 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1044
.L1045:
	.loc 1 2799 0
	movl	-32(%ebp), %eax
	movl	36(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1046
	.loc 1 2800 0
	movl	-32(%ebp), %eax
	movl	$0, 12(%eax)
.L1046:
	.loc 1 2798 0
	addl	$40, -32(%ebp)
.L1044:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-32(%ebp), %eax
	ja	.L1045
	.loc 1 2802 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	.loc 1 2803 0
	jmp	.L1070
.L985:
	.loc 1 2807 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1049
	.loc 1 2820 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1051
.L1052:
	.loc 1 2822 0
	movl	-32(%ebp), %eax
	movl	36(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1053
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	16(%eax), %eax
	cmpl	%eax, %edx
	je	.L1053
.LBB92:
	.loc 1 2827 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 2829 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1056
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1056
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1056
	.loc 1 2832 0
	movl	-32(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 2829 0
	jmp	.L1053
.L1056:
	.loc 1 2834 0
	movl	-32(%ebp), %eax
	movl	$0, 12(%eax)
.L1053:
.LBE92:
	.loc 1 2821 0
	addl	$40, -32(%ebp)
.L1051:
	.loc 1 2820 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-32(%ebp), %eax
	ja	.L1052
.L1049:
	.loc 1 2838 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	elimination_effects
	.loc 1 2839 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	elimination_effects
	.loc 1 2840 0
	jmp	.L1070
.L991:
	.loc 1 2843 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$80, %ax
	jne	.L1060
	.loc 1 2844 0
	leal	__FUNCTION__.18021@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2844, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1060:
	.loc 1 2848 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	elimination_effects
	.loc 1 2849 0
	jmp	.L1070
.L983:
	.loc 1 2855 0
	movl	-36(%ebp), %eax
	movl	rtx_format@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -16(%ebp)
	.loc 1 2856 0
	movl	$0, -24(%ebp)
	jmp	.L1062
.L1063:
	.loc 1 2858 0
	movl	-16(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L1064
	.loc 1 2859 0
	movl	-24(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	jmp	.L1066
.L1064:
	.loc 1 2860 0
	movl	-16(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L1066
	.loc 1 2861 0
	movl	$0, -20(%ebp)
	jmp	.L1068
.L1069:
	.loc 1 2862 0
	movl	-24(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	elimination_effects
	.loc 1 2861 0
	addl	$1, -20(%ebp)
.L1068:
	movl	-24(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-20(%ebp), %eax
	jg	.L1069
.L1066:
	.loc 1 2856 0
	addl	$1, -24(%ebp)
	addl	$1, -16(%ebp)
.L1062:
	movl	-36(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-24(%ebp), %eax
	jg	.L1063
.L1070:
	.loc 1 2864 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE37:
	.size	elimination_effects, .-elimination_effects
	.type	check_eliminable_occurrences, @function
check_eliminable_occurrences:
.LFB38:
	.loc 1 2873 0
	pushl	%ebp
.LCFI110:
	movl	%esp, %ebp
.LCFI111:
	pushl	%ebx
.LCFI112:
	subl	$36, %esp
.LCFI113:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2878 0
	cmpl	$0, 8(%ebp)
	je	.L1091
	.loc 1 2881 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -16(%ebp)
	.loc 1 2883 0
	cmpl	$71, -16(%ebp)
	jne	.L1074
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1074
.LBB93:
	.loc 1 2887 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1077
.L1078:
	.loc 1 2888 0
	movl	-12(%ebp), %eax
	movl	32(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L1079
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1079
	.loc 1 2889 0
	movl	-12(%ebp), %eax
	movl	$0, 12(%eax)
.L1079:
	.loc 1 2887 0
	addl	$40, -12(%ebp)
.L1077:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-12(%ebp), %eax
	ja	.L1078
	.loc 1 2890 0
	jmp	.L1091
.L1074:
.LBE93:
	.loc 1 2893 0
	movl	-16(%ebp), %eax
	movl	rtx_format@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -24(%ebp)
	.loc 1 2894 0
	movl	$0, -20(%ebp)
	jmp	.L1083
.L1084:
	.loc 1 2896 0
	movl	-24(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L1085
	.loc 1 2897 0
	movl	-20(%ebp), %eax
	movl	8(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, (%esp)
	call	check_eliminable_occurrences
	jmp	.L1087
.L1085:
	.loc 1 2898 0
	movl	-24(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L1087
.LBB94:
	.loc 1 2901 0
	movl	$0, -8(%ebp)
	jmp	.L1089
.L1090:
	.loc 1 2902 0
	movl	-20(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, (%esp)
	call	check_eliminable_occurrences
	.loc 1 2901 0
	addl	$1, -8(%ebp)
.L1089:
	movl	-20(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-8(%ebp), %eax
	jg	.L1090
.L1087:
.LBE94:
	.loc 1 2894 0
	addl	$1, -20(%ebp)
	addl	$1, -24(%ebp)
.L1083:
	movl	-16(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-20(%ebp), %eax
	jg	.L1084
.L1091:
	.loc 1 2905 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE38:
	.size	check_eliminable_occurrences, .-check_eliminable_occurrences
	.section	.rodata
	.type	__FUNCTION__.18367, @object
	.size	__FUNCTION__.18367, 23
__FUNCTION__.18367:
	.string	"eliminate_regs_in_insn"
	.text
	.type	eliminate_regs_in_insn, @function
eliminate_regs_in_insn:
.LFB39:
	.loc 1 2924 0
	pushl	%ebp
.LCFI114:
	movl	%esp, %ebp
.LCFI115:
	pushl	%esi
.LCFI116:
	pushl	%ebx
.LCFI117:
	subl	$400, %esp
.LCFI118:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2925 0
	movl	8(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L1093
	movl	8(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -384(%ebp)
	jmp	.L1095
.L1093:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_memoized_1@PLT
	movl	%eax, -384(%ebp)
.L1095:
	movl	-384(%ebp), %eax
	movl	%eax, -84(%ebp)
	.loc 1 2926 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -80(%ebp)
	.loc 1 2927 0
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	notl	%eax
	shrl	$31, %eax
	movl	%eax, -76(%ebp)
	.loc 1 2928 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L1096
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1098
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -376(%ebp)
	jmp	.L1100
.L1098:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -376(%ebp)
.L1100:
	movl	-376(%ebp), %edx
	movl	%edx, -380(%ebp)
	jmp	.L1101
.L1096:
	movl	$0, -380(%ebp)
.L1101:
	movl	-380(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 2930 0
	movl	$0, -64(%ebp)
	.loc 1 2936 0
	cmpl	$0, -76(%ebp)
	jne	.L1102
	cmpl	$0, -84(%ebp)
	jns	.L1102
	.loc 1 2938 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L1105
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	je	.L1105
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$54, %ax
	je	.L1105
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$55, %ax
	je	.L1105
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$50, %ax
	jne	.L1110
.L1105:
	.loc 1 2943 0
	movl	$0, -372(%ebp)
	jmp	.L1111
.L1110:
	.loc 1 2944 0
	leal	__FUNCTION__.18367@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2944, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1102:
	.loc 1 2947 0
	cmpl	$0, -72(%ebp)
	je	.L1112
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1112
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1112
	.loc 1 2951 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -52(%ebp)
	jmp	.L1116
.L1117:
	.loc 1 2952 0
	movl	-52(%ebp), %eax
	movl	32(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1118
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1118
	.loc 1 2960 0
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jne	.L1121
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -368(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1123
	movl	$17, -364(%ebp)
	jmp	.L1125
.L1123:
	movl	$30, -364(%ebp)
.L1125:
	movl	-364(%ebp), %edx
	cmpl	%edx, -368(%ebp)
	jne	.L1121
.LBB95:
	.loc 1 2963 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 2964 0
	movl	8(%ebp), %eax
	movl	%eax, -44(%ebp)
	.loc 1 2965 0
	movl	$0, -40(%ebp)
	.loc 1 2967 0
	jmp	.L1252
.L1128:
.LBB96:
	.loc 1 2971 0
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1129
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1129
	.loc 1 2974 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 2975 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 2971 0
	jmp	.L1127
.L1129:
	.loc 1 2977 0
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_nonnote_insn@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	je	.L1132
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L1134
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1136
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -356(%ebp)
	jmp	.L1138
.L1136:
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -356(%ebp)
.L1138:
	movl	-356(%ebp), %eax
	movl	%eax, -360(%ebp)
	jmp	.L1139
.L1134:
	movl	$0, -360(%ebp)
.L1139:
	movl	-360(%ebp), %edx
	movl	%edx, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L1132
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1132
	.loc 1 2981 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 2982 0
	movl	-36(%ebp), %eax
	movl	%eax, -44(%ebp)
.L1127:
.L1252:
.LBE96:
	.loc 1 2967 0
	movl	-52(%ebp), %eax
	movl	36(%eax), %eax
	cmpl	-48(%ebp), %eax
	jne	.L1128
.L1132:
	.loc 1 2988 0
	movl	-52(%ebp), %eax
	movl	36(%eax), %eax
	cmpl	-48(%ebp), %eax
	jne	.L1121
.LBB97:
	.loc 1 2991 0
	movl	-52(%ebp), %eax
	movl	20(%eax), %edx
	movl	-40(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	-52(%ebp), %eax
	movl	36(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -28(%ebp)
	.loc 1 2993 0
	movl	-80(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 2994 0
	cmpl	$0, 12(%ebp)
	jne	.L1143
	.loc 1 2996 0
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_insn@PLT
	movl	%eax, -68(%ebp)
	.loc 1 2997 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L1143
	.loc 1 2998 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, (%esp)
	call	copy_insn_1@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 68(%eax)
.L1143:
	.loc 1 3000 0
	movl	8(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 3001 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L1146
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1148
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -348(%ebp)
	jmp	.L1150
.L1148:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -348(%ebp)
.L1150:
	movl	-348(%ebp), %eax
	movl	%eax, -352(%ebp)
	jmp	.L1151
.L1146:
	movl	$0, -352(%ebp)
.L1151:
	movl	-352(%ebp), %edx
	movl	%edx, -72(%ebp)
	.loc 1 3006 0
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	$1, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	.loc 1 3007 0
	movl	-52(%ebp), %eax
	movl	36(%eax), %eax
	movl	-72(%ebp), %edx
	addl	$4, %edx
	movl	$1, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	.loc 1 3009 0
	call	apply_change_group@PLT
	testl	%eax, %eax
	jne	.L1152
	.loc 1 3011 0
	movl	-72(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 3012 0
	movl	-52(%ebp), %eax
	movl	36(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
.L1152:
	.loc 1 3015 0
	movl	$1, -64(%ebp)
	.loc 1 3016 0
	jmp	.L1154
.L1121:
.LBE97:
.LBE95:
	.loc 1 3027 0
	cmpl	$0, 12(%ebp)
	je	.L1155
	.loc 1 3029 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_dead_insn
	.loc 1 3030 0
	movl	$1, -372(%ebp)
	jmp	.L1111
.L1155:
	.loc 1 3032 0
	movl	$1, -64(%ebp)
	.loc 1 3033 0
	jmp	.L1154
.L1118:
	.loc 1 2951 0
	addl	$40, -52(%ebp)
.L1116:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-52(%ebp), %eax
	ja	.L1117
.L1112:
	.loc 1 3040 0
	cmpl	$0, -72(%ebp)
	je	.L1157
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1157
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1157
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1157
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1157
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1157
.LBB98:
	.loc 1 3047 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 3048 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 3050 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -52(%ebp)
	jmp	.L1164
.L1165:
	.loc 1 3051 0
	movl	-52(%ebp), %eax
	movl	32(%eax), %eax
	cmpl	-24(%ebp), %eax
	jne	.L1166
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1166
	.loc 1 3053 0
	movl	-52(%ebp), %eax
	movl	20(%eax), %eax
	addl	%eax, -20(%ebp)
	.loc 1 3055 0
	cmpl	$0, -20(%ebp)
	jne	.L1169
.LBB99:
	.loc 1 3062 0
	movl	-52(%ebp), %eax
	movl	36(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 44(%eax)
	.loc 1 3065 0
	movl	$0, -88(%ebp)
	.loc 1 3066 0
	movl	8(%ebp), %eax
	movl	44(%eax), %edx
	leal	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	recog@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 52(%eax)
	.loc 1 3067 0
	movl	-88(%ebp), %eax
	testl	%eax, %eax
	je	.L1171
.LBB100:
	.loc 1 3069 0
	movl	-88(%ebp), %eax
	addl	$1, %eax
	movl	%eax, (%esp)
	call	rtvec_alloc@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3071 0
	movl	8(%ebp), %eax
	movl	44(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 4(%eax)
	.loc 1 3072 0
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 44(%eax)
	.loc 1 3073 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	add_clobbers@PLT
.L1171:
.LBE100:
	.loc 1 3075 0
	movl	8(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	jns	.L1175
	.loc 1 3076 0
	leal	__FUNCTION__.18367@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3076, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1169:
.LBE99:
	.loc 1 3080 0
	movl	-80(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 3081 0
	cmpl	$0, 12(%ebp)
	jne	.L1176
	.loc 1 3083 0
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_insn@PLT
	movl	%eax, -68(%ebp)
	.loc 1 3084 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L1176
	.loc 1 3085 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, (%esp)
	call	copy_insn_1@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 68(%eax)
.L1176:
	.loc 1 3087 0
	movl	8(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 3088 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L1179
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1181
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -340(%ebp)
	jmp	.L1183
.L1181:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -340(%ebp)
.L1183:
	movl	-340(%ebp), %eax
	movl	%eax, -344(%ebp)
	jmp	.L1184
.L1179:
	movl	$0, -344(%ebp)
.L1184:
	movl	-344(%ebp), %edx
	movl	%edx, -72(%ebp)
	.loc 1 3090 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, 4(%edx)
	.loc 1 3091 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %esi
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esi)
.L1175:
	.loc 1 3093 0
	movl	$1, -64(%ebp)
	.loc 1 3096 0
	jmp	.L1154
.L1166:
	.loc 1 3050 0
	addl	$40, -52(%ebp)
.L1164:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-52(%ebp), %eax
	ja	.L1165
.L1157:
.LBE98:
	.loc 1 3101 0
	movl	$0, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	elimination_effects
	.loc 1 3105 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	.loc 1 3106 0
	movl	$0, -56(%ebp)
	.loc 1 3107 0
	movl	$0, -60(%ebp)
	jmp	.L1185
.L1186:
	.loc 1 3109 0
	movl	-60(%ebp), %ecx
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -328(%ebp,%ecx,4)
	.loc 1 3110 0
	movl	-60(%ebp), %ecx
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -208(%ebp,%ecx,4)
	.loc 1 3113 0
	cmpl	$0, -76(%ebp)
	jne	.L1187
	movl	-84(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %ecx
	movl	-60(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$2, %eax
	leal	(%ecx,%eax), %eax
	movzbl	11(%eax), %eax
	testb	%al, %al
	je	.L1189
.L1187:
	.loc 1 3116 0
	movl	-60(%ebp), %eax
	movl	recog_data@GOT(%ebx), %edx
	movl	480(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L1190
	movl	-60(%ebp), %eax
	movl	-328(%ebp,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1190
	.loc 1 3123 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -52(%ebp)
	jmp	.L1193
.L1194:
	.loc 1 3125 0
	movl	-52(%ebp), %eax
	movl	32(%eax), %edx
	movl	-60(%ebp), %eax
	movl	-328(%ebp,%eax,4), %eax
	cmpl	%eax, %edx
	jne	.L1195
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1195
	.loc 1 3126 0
	movl	-52(%ebp), %eax
	movl	$0, 12(%eax)
.L1195:
	.loc 1 3124 0
	addl	$40, -52(%ebp)
.L1193:
	.loc 1 3123 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-52(%ebp), %eax
	ja	.L1194
.L1190:
	.loc 1 3129 0
	movl	-60(%ebp), %eax
	movl	%eax, -336(%ebp)
	cmpl	$0, 12(%ebp)
	je	.L1198
	movl	8(%ebp), %edx
	movl	%edx, -332(%ebp)
	jmp	.L1200
.L1198:
	movl	$0, -332(%ebp)
.L1200:
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	-332(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	eliminate_regs@PLT
	movl	-336(%ebp), %edx
	movl	%eax, -208(%ebp,%edx,4)
	.loc 1 3131 0
	movl	-60(%ebp), %eax
	movl	-208(%ebp,%eax,4), %edx
	movl	-60(%ebp), %eax
	movl	-328(%ebp,%eax,4), %eax
	cmpl	%eax, %edx
	je	.L1201
	.loc 1 3132 0
	movl	$1, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -64(%ebp)
.L1201:
	.loc 1 3135 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	120(%eax,%edx,4), %eax
	movl	$0, (%eax)
	.loc 1 3139 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	480(%eax,%edx,4), %eax
	testl	%eax, %eax
	je	.L1189
	movl	-60(%ebp), %eax
	movl	-328(%ebp,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1189
	movl	-60(%ebp), %eax
	movl	-208(%ebp,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1189
	cmpl	$0, 12(%ebp)
	je	.L1189
	.loc 1 3143 0
	movl	-60(%ebp), %eax
	movl	-328(%ebp,%eax,4), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_after@PLT
.L1189:
	.loc 1 3107 0
	addl	$1, -60(%ebp)
.L1185:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jg	.L1186
	.loc 1 3148 0
	movl	$0, -60(%ebp)
	jmp	.L1208
.L1209:
	.loc 1 3149 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	600(%eax,%edx,4), %ecx
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movzbl	608(%edx,%eax), %eax
	movzbl	%al, %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	120(%eax,%edx,4), %eax
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	.loc 1 3148 0
	addl	$1, -60(%ebp)
.L1208:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	611(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jg	.L1209
	.loc 1 3153 0
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	check_eliminable_occurrences
	.loc 1 3157 0
	movl	$0, -60(%ebp)
	jmp	.L1211
.L1212:
	.loc 1 3158 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	120(%eax,%edx,4), %edx
	movl	-60(%ebp), %eax
	movl	-208(%ebp,%eax,4), %eax
	movl	%eax, (%edx)
	.loc 1 3157 0
	addl	$1, -60(%ebp)
.L1211:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jg	.L1212
	.loc 1 3159 0
	movl	$0, -60(%ebp)
	jmp	.L1214
.L1215:
	.loc 1 3160 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	600(%eax,%edx,4), %ecx
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movzbl	608(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	-208(%ebp,%eax,4), %eax
	movl	%eax, (%ecx)
	.loc 1 3159 0
	addl	$1, -60(%ebp)
.L1214:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	611(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jg	.L1215
	.loc 1 3171 0
	cmpl	$0, -64(%ebp)
	je	.L1217
	.loc 1 3177 0
	movl	-80(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 3178 0
	cmpl	$0, 12(%ebp)
	jne	.L1219
	.loc 1 3180 0
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_insn@PLT
	movl	%eax, -68(%ebp)
	.loc 1 3181 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L1219
	.loc 1 3182 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, (%esp)
	call	copy_insn_1@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 68(%eax)
.L1219:
	.loc 1 3184 0
	movl	8(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 3193 0
	cmpl	$0, -76(%ebp)
	jne	.L1217
	cmpl	$0, -72(%ebp)
	je	.L1217
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1224
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1226
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1226
.L1224:
	cmpl	$0, -72(%ebp)
	je	.L1228
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1230
	movl	-72(%ebp), %eax
	movl	12(%eax), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1226
.L1230:
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1228
	movl	-72(%ebp), %eax
	movl	4(%eax), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1226
.L1228:
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1217
.L1226:
.LBB101:
	.loc 1 3209 0
	movl	8(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	recog@PLT
	movl	%eax, -12(%ebp)
	.loc 1 3210 0
	cmpl	$0, -12(%ebp)
	jns	.L1217
	.loc 1 3211 0
	movl	8(%ebp), %edx
	movl	-84(%ebp), %eax
	movl	%eax, 52(%edx)
.L1217:
.LBE101:
	.loc 1 3218 0
	cmpl	$0, 12(%ebp)
	jne	.L1234
	.loc 1 3221 0
	movl	$0, -60(%ebp)
	jmp	.L1236
.L1237:
	.loc 1 3222 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	120(%eax,%edx,4), %edx
	movl	-60(%ebp), %eax
	movl	-328(%ebp,%eax,4), %eax
	movl	%eax, (%edx)
	.loc 1 3221 0
	addl	$1, -60(%ebp)
.L1236:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jg	.L1237
	.loc 1 3223 0
	movl	$0, -60(%ebp)
	jmp	.L1239
.L1240:
	.loc 1 3224 0
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	600(%eax,%edx,4), %ecx
	movl	-60(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movzbl	608(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	-328(%ebp,%eax,4), %eax
	movl	%eax, (%ecx)
	.loc 1 3223 0
	addl	$1, -60(%ebp)
.L1239:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	611(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jg	.L1240
.L1234:
	.loc 1 3240 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -52(%ebp)
	jmp	.L1241
.L1242:
	.loc 1 3242 0
	movl	-52(%ebp), %eax
	movl	24(%eax), %edx
	movl	-52(%ebp), %eax
	movl	20(%eax), %eax
	cmpl	%eax, %edx
	je	.L1243
	movl	-52(%ebp), %eax
	movl	28(%eax), %eax
	testl	%eax, %eax
	je	.L1243
	.loc 1 3243 0
	movl	-52(%ebp), %eax
	movl	$0, 12(%eax)
.L1243:
	.loc 1 3245 0
	movl	-52(%ebp), %eax
	movl	$0, 28(%eax)
	.loc 1 3247 0
	movl	-52(%ebp), %eax
	movl	24(%eax), %edx
	movl	-52(%ebp), %eax
	movl	20(%eax), %eax
	cmpl	%eax, %edx
	je	.L1246
	.loc 1 3248 0
	movl	$1, -64(%ebp)
.L1246:
	.loc 1 3240 0
	addl	$40, -52(%ebp)
.L1241:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-52(%ebp), %eax
	ja	.L1242
.L1154:
	.loc 1 3257 0
	cmpl	$0, -64(%ebp)
	je	.L1248
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L1248
	.loc 1 3258 0
	movl	8(%ebp), %eax
	movl	68(%eax), %edx
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 68(%eax)
.L1248:
	.loc 1 3260 0
	movl	-64(%ebp), %eax
	movl	%eax, -372(%ebp)
.L1111:
	movl	-372(%ebp), %eax
	.loc 1 3261 0
	addl	$400, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE39:
	.size	eliminate_regs_in_insn, .-eliminate_regs_in_insn
	.type	update_eliminable_offsets, @function
update_eliminable_offsets:
.LFB40:
	.loc 1 3271 0
	pushl	%ebp
.LCFI119:
	movl	%esp, %ebp
.LCFI120:
	subl	$16, %esp
.LCFI121:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 3274 0
	movl	num_not_at_initial_offset@GOT(%ecx), %eax
	movl	$0, (%eax)
	.loc 1 3275 0
	movl	reg_eliminate@GOTOFF(%ecx), %eax
	movl	%eax, -4(%ebp)
	jmp	.L1254
.L1255:
	.loc 1 3277 0
	movl	-4(%ebp), %eax
	movl	20(%eax), %edx
	movl	-4(%ebp), %eax
	movl	%edx, 24(%eax)
	.loc 1 3278 0
	movl	-4(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1256
	movl	-4(%ebp), %eax
	movl	20(%eax), %edx
	movl	-4(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	%eax, %edx
	je	.L1256
	.loc 1 3279 0
	movl	num_not_at_initial_offset@GOT(%ecx), %eax
	movl	(%eax), %eax
	leal	1(%eax), %edx
	movl	num_not_at_initial_offset@GOT(%ecx), %eax
	movl	%edx, (%eax)
.L1256:
	.loc 1 3275 0
	addl	$40, -4(%ebp)
.L1254:
	movl	reg_eliminate@GOTOFF(%ecx), %eax
	addl	$360, %eax
	cmpl	-4(%ebp), %eax
	ja	.L1255
	.loc 1 3281 0
	leave
	ret
.LFE40:
	.size	update_eliminable_offsets, .-update_eliminable_offsets
	.type	mark_not_eliminable, @function
mark_not_eliminable:
.LFB41:
	.loc 1 3302 0
	pushl	%ebp
.LCFI122:
	movl	%esp, %ebp
.LCFI123:
	pushl	%ebx
.LCFI124:
	subl	$16, %esp
.LCFI125:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3308 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1262
	.loc 1 3309 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L1262:
	.loc 1 3311 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	16(%eax), %eax
	cmpl	8(%ebp), %eax
	je	.L1275
	.loc 1 3314 0
	movl	$0, -8(%ebp)
	jmp	.L1266
.L1267:
	.loc 1 3315 0
	movl	-8(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1268
	movl	-8(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	36(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L1268
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1271
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1271
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L1271
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1268
.L1271:
	.loc 1 3321 0
	movl	-8(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	-8(%ebp), %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, 12(%eax)
	movl	12(%eax), %eax
	movl	%eax, 16(%ecx)
	.loc 1 3323 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	subl	$1, %eax
	movl	%eax, num_eliminable@GOTOFF(%ebx)
.L1268:
	.loc 1 3314 0
	addl	$1, -8(%ebp)
.L1266:
	cmpl	$8, -8(%ebp)
	jbe	.L1267
.L1275:
	.loc 1 3325 0
	addl	$16, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE41:
	.size	mark_not_eliminable, .-mark_not_eliminable
	.section	.rodata
	.type	__FUNCTION__.18899, @object
	.size	__FUNCTION__.18899, 28
__FUNCTION__.18899:
	.string	"verify_initial_elim_offsets"
	.text
	.type	verify_initial_elim_offsets, @function
verify_initial_elim_offsets:
.LFB42:
	.loc 1 3334 0
	pushl	%ebp
.LCFI126:
	movl	%esp, %ebp
.LCFI127:
	pushl	%ebx
.LCFI128:
	subl	$36, %esp
.LCFI129:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3340 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1277
.L1278:
	.loc 1 3342 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_initial_elimination_offset@PLT
	movl	%eax, -12(%ebp)
	.loc 1 3343 0
	movl	-8(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L1279
	.loc 1 3344 0
	leal	__FUNCTION__.18899@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3344, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1279:
	.loc 1 3340 0
	addl	$40, -8(%ebp)
.L1277:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-8(%ebp), %eax
	ja	.L1278
	.loc 1 3351 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE42:
	.size	verify_initial_elim_offsets, .-verify_initial_elim_offsets
	.type	set_initial_elim_offsets, @function
set_initial_elim_offsets:
.LFB43:
	.loc 1 3357 0
	pushl	%ebp
.LCFI130:
	movl	%esp, %ebp
.LCFI131:
	pushl	%ebx
.LCFI132:
	subl	$36, %esp
.LCFI133:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3358 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -8(%ebp)
	.loc 1 3361 0
	jmp	.L1284
.L1285:
	.loc 1 3363 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_initial_elimination_offset@PLT
	movl	%eax, %edx
	movl	-8(%ebp), %eax
	movl	%edx, 8(%eax)
	.loc 1 3364 0
	movl	-8(%ebp), %eax
	movl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 20(%eax)
	movl	-8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 24(%eax)
	.loc 1 3361 0
	addl	$40, -8(%ebp)
.L1284:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-8(%ebp), %eax
	ja	.L1285
	.loc 1 3371 0
	movl	num_not_at_initial_offset@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 3372 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE43:
	.size	set_initial_elim_offsets, .-set_initial_elim_offsets
	.type	set_initial_label_offsets, @function
set_initial_label_offsets:
.LFB44:
	.loc 1 3383 0
	pushl	%ebp
.LCFI134:
	movl	%esp, %ebp
.LCFI135:
	pushl	%edi
.LCFI136:
	pushl	%ebx
.LCFI137:
	subl	$32, %esp
.LCFI138:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3385 0
	movl	num_labels@GOTOFF(%ebx), %eax
	movl	%eax, %edx
	movl	offsets_known_at@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 3387 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1289
.L1290:
	.loc 1 3388 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L1291
	.loc 1 3389 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	set_label_offsets
.L1291:
	.loc 1 3387 0
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -12(%ebp)
.L1289:
	cmpl	$0, -12(%ebp)
	jne	.L1290
	.loc 1 3390 0
	addl	$32, %esp
	popl	%ebx
	popl	%edi
	popl	%ebp
	ret
.LFE44:
	.size	set_initial_label_offsets, .-set_initial_label_offsets
	.type	set_offsets_for_label, @function
set_offsets_for_label:
.LFB45:
	.loc 1 3398 0
	pushl	%ebp
.LCFI139:
	movl	%esp, %ebp
.LCFI140:
	subl	$16, %esp
.LCFI141:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 3400 0
	movl	8(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 3403 0
	movl	num_not_at_initial_offset@GOT(%ecx), %eax
	movl	$0, (%eax)
	.loc 1 3404 0
	movl	$0, -12(%ebp)
	movl	reg_eliminate@GOTOFF(%ecx), %eax
	movl	%eax, -4(%ebp)
	jmp	.L1296
.L1297:
	.loc 1 3406 0
	movl	first_label_num@GOTOFF(%ecx), %edx
	movl	-8(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, %edx
	movl	%edx, %eax
	sall	$3, %eax
	addl	%edx, %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	offsets_at@GOTOFF(%ecx), %eax
	addl	%eax, %edx
	movl	-12(%ebp), %eax
	movl	(%edx,%eax,4), %edx
	movl	-4(%ebp), %eax
	movl	%edx, 24(%eax)
	movl	-4(%ebp), %eax
	movl	24(%eax), %edx
	movl	-4(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 3408 0
	movl	-4(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1298
	movl	-4(%ebp), %eax
	movl	20(%eax), %edx
	movl	-4(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	%eax, %edx
	je	.L1298
	.loc 1 3409 0
	movl	num_not_at_initial_offset@GOT(%ecx), %eax
	movl	(%eax), %eax
	leal	1(%eax), %edx
	movl	num_not_at_initial_offset@GOT(%ecx), %eax
	movl	%edx, (%eax)
.L1298:
	.loc 1 3404 0
	addl	$40, -4(%ebp)
	addl	$1, -12(%ebp)
.L1296:
	cmpl	$8, -12(%ebp)
	jbe	.L1297
	.loc 1 3411 0
	leave
	ret
.LFE45:
	.size	set_offsets_for_label, .-set_offsets_for_label
	.type	update_eliminables, @function
update_eliminables:
.LFB46:
	.loc 1 3422 0
	pushl	%ebp
.LCFI142:
	movl	%esp, %ebp
.LCFI143:
	pushl	%edi
.LCFI144:
	pushl	%esi
.LCFI145:
	pushl	%ebx
.LCFI146:
	subl	$108, %esp
.LCFI147:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3423 0
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 3426 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	jmp	.L1304
.L1305:
	.loc 1 3427 0
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1306
	movl	$17, -100(%ebp)
	jmp	.L1308
.L1306:
	movl	$30, -100(%ebp)
.L1308:
	movl	-100(%ebp), %eax
	cmpl	%eax, -104(%ebp)
	jne	.L1309
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	296(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	jne	.L1311
.L1309:
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	cmpl	$75, %eax
	jne	.L1312
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$29, %eax
	jne	.L1314
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1316
.L1314:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1317
	movl	$17, -92(%ebp)
	jmp	.L1319
.L1317:
	movl	$30, -92(%ebp)
.L1319:
	movl	-92(%ebp), %edx
	cmpl	%edx, -96(%ebp)
	je	.L1316
.L1312:
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	cmpl	$75, %eax
	je	.L1311
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1321
	movl	$17, -84(%ebp)
	jmp	.L1323
.L1321:
	movl	$30, -84(%ebp)
.L1323:
	movl	-84(%ebp), %ecx
	cmpl	%ecx, -88(%ebp)
	je	.L1316
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$29, %eax
	jne	.L1311
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1311
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1327
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	jne	.L1311
.L1327:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1316
	call	get_frame_size@PLT
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	compute_frame_size@PLT
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	cmpl	$0, -76(%ebp)
	js	.L1316
	cmpl	$0, -76(%ebp)
	jg	.L1311
	cmpl	$32767, -80(%ebp)
	jbe	.L1316
.L1311:
	.loc 1 3432 0
	movl	-28(%ebp), %eax
	movl	$0, 12(%eax)
.L1316:
	.loc 1 3426 0
	addl	$40, -28(%ebp)
.L1304:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-28(%ebp), %eax
	ja	.L1305
	.loc 1 3441 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	jmp	.L1332
.L1333:
.LBB102:
	.loc 1 3444 0
	movl	$-1, -20(%ebp)
	.loc 1 3446 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L1334
	movl	-28(%ebp), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	je	.L1334
	.loc 1 3450 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	.loc 1 3451 0
	jmp	.L1337
.L1338:
	.loc 1 3452 0
	movl	-24(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1339
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1339
	.loc 1 3454 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 3455 0
	jmp	.L1342
.L1339:
	.loc 1 3451 0
	addl	$40, -24(%ebp)
.L1337:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-24(%ebp), %eax
	ja	.L1338
.L1342:
	.loc 1 3460 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	.loc 1 3461 0
	jmp	.L1343
.L1344:
	.loc 1 3462 0
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	cmpl	-20(%ebp), %eax
	jne	.L1345
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1345
	.loc 1 3463 0
	movl	-24(%ebp), %eax
	movl	$0, 12(%eax)
.L1345:
	.loc 1 3461 0
	addl	$40, -24(%ebp)
.L1343:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-24(%ebp), %eax
	ja	.L1344
.L1334:
.LBE102:
	.loc 1 3441 0
	addl	$40, -28(%ebp)
.L1332:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-28(%ebp), %eax
	ja	.L1333
	.loc 1 3473 0
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	$1, (%eax)
	.loc 1 3474 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	jmp	.L1349
.L1350:
	.loc 1 3476 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1351
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jne	.L1351
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1354
	movl	$17, -64(%ebp)
	jmp	.L1356
.L1354:
	movl	$30, -64(%ebp)
.L1356:
	movl	-64(%ebp), %esi
	cmpl	%esi, -68(%ebp)
	je	.L1351
	.loc 1 3478 0
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	$0, (%eax)
.L1351:
	.loc 1 3480 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L1358
	movl	-28(%ebp), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	je	.L1358
	.loc 1 3482 0
	movl	-28(%ebp), %eax
	movl	$0, 16(%eax)
	.loc 1 3483 0
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	shrl	$6, %eax
	movl	%eax, -60(%ebp)
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -56(%ebp)
	movl	%edi, -52(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1369
	movl	%esi, %edi
	xorl	%esi, %esi
.L1369:
	movl	-56(%ebp), %eax
	orl	%esi, %eax
	movl	-52(%ebp), %edx
	orl	%edi, %edx
	movl	8(%ebp), %ecx
	movl	-60(%ebp), %edi
	movl	%eax, (%ecx,%edi,8)
	movl	%edx, 4(%ecx,%edi,8)
	.loc 1 3484 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	subl	$1, %eax
	movl	%eax, num_eliminable@GOTOFF(%ebx)
.L1358:
	.loc 1 3474 0
	addl	$40, -28(%ebp)
.L1349:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-28(%ebp), %eax
	ja	.L1350
	.loc 1 3490 0
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1368
	cmpl	$0, -32(%ebp)
	jne	.L1368
	.loc 1 3491 0
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -48(%ebp)
	movl	%ecx, -44(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1365
	movl	$131072, -40(%ebp)
	movl	$0, -36(%ebp)
	jmp	.L1367
.L1365:
	movl	$1073741824, -40(%ebp)
	movl	$0, -36(%ebp)
.L1367:
	movl	-48(%ebp), %eax
	orl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	orl	-36(%ebp), %edx
	movl	8(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.L1368:
	.loc 1 3492 0
	addl	$108, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE46:
	.size	update_eliminables, .-update_eliminables
	.type	init_elim_table, @function
init_elim_table:
.LFB47:
	.loc 1 3498 0
	pushl	%ebp
.LCFI148:
	movl	%esp, %ebp
.LCFI149:
	pushl	%ebx
.LCFI150:
	subl	$84, %esp
.LCFI151:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3504 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L1371
	.loc 1 3505 0
	movl	$9, 4(%esp)
	movl	$40, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_eliminate@GOTOFF(%ebx)
.L1371:
	.loc 1 3510 0
	movl	flag_omit_frame_pointer@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1373
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	296(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	jne	.L1373
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	296(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	je	.L1376
.L1373:
	movl	$1, -72(%ebp)
	jmp	.L1377
.L1376:
	movl	$0, -72(%ebp)
.L1377:
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	-72(%ebp), %edx
	movl	%edx, (%eax)
	.loc 1 3522 0
	movl	$0, num_eliminable@GOTOFF(%ebx)
	.loc 1 3525 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -16(%ebp)
	leal	reg_eliminate_1@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
	.loc 1 3526 0
	jmp	.L1378
.L1379:
	.loc 1 3528 0
	movl	-12(%ebp), %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 3529 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 4(%eax)
	.loc 1 3530 0
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	cmpl	$75, %eax
	jne	.L1380
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$29, %eax
	jne	.L1382
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1384
.L1382:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1385
	movl	$17, -60(%ebp)
	jmp	.L1387
.L1385:
	movl	$30, -60(%ebp)
.L1387:
	movl	-60(%ebp), %eax
	cmpl	%eax, -64(%ebp)
	je	.L1384
.L1380:
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	cmpl	$75, %eax
	je	.L1388
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1390
	movl	$17, -52(%ebp)
	jmp	.L1392
.L1390:
	movl	$30, -52(%ebp)
.L1392:
	movl	-52(%ebp), %edx
	cmpl	%edx, -56(%ebp)
	je	.L1384
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$29, %eax
	jne	.L1388
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1388
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1396
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	jne	.L1388
.L1396:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1384
	call	get_frame_size@PLT
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	compute_frame_size@PLT
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jg	.L1388
	cmpl	$0, -44(%ebp)
	js	.L1384
	cmpl	$32767, -48(%ebp)
	ja	.L1388
.L1384:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$29, %eax
	jne	.L1400
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1388
.L1400:
	movl	$1, -68(%ebp)
	jmp	.L1402
.L1388:
	movl	$0, -68(%ebp)
.L1402:
	movl	-16(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%edx, 16(%eax)
	movl	-16(%ebp), %eax
	movl	16(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	.loc 1 3526 0
	addl	$40, -16(%ebp)
	addl	$8, -12(%ebp)
.L1378:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-16(%ebp), %eax
	ja	.L1379
	.loc 1 3545 0
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	movl	%eax, -16(%ebp)
	jmp	.L1404
.L1405:
	.loc 1 3547 0
	movl	-16(%ebp), %eax
	movl	12(%eax), %edx
	movl	num_eliminable@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, num_eliminable@GOTOFF(%ebx)
	.loc 1 3548 0
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1406
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1406
	movl	$5, -36(%ebp)
	jmp	.L1409
.L1406:
	movl	$4, -36(%ebp)
.L1409:
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %edx
	movl	%edx, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%edx, 32(%eax)
	.loc 1 3549 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1410
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1410
	movl	$5, -28(%ebp)
	jmp	.L1413
.L1410:
	movl	$4, -28(%ebp)
.L1413:
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %edx
	movl	%edx, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%edx, 36(%eax)
	.loc 1 3545 0
	addl	$40, -16(%ebp)
.L1404:
	movl	reg_eliminate@GOTOFF(%ebx), %eax
	addl	$360, %eax
	cmpl	-16(%ebp), %eax
	ja	.L1405
	.loc 1 3551 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE47:
	.size	init_elim_table, .-init_elim_table
	.type	spill_hard_reg, @function
spill_hard_reg:
.LFB48:
	.loc 1 3567 0
	pushl	%ebp
.LCFI152:
	movl	%esp, %ebp
.LCFI153:
	pushl	%edi
.LCFI154:
	pushl	%esi
.LCFI155:
	pushl	%ebx
.LCFI156:
	subl	$44, %esp
.LCFI157:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3570 0
	cmpl	$0, 12(%ebp)
	je	.L1417
	.loc 1 3572 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -44(%ebp)
	movl	bad_spill_regs_global@GOTOFF(%ebx,%eax,8), %edx
	movl	4+bad_spill_regs_global@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -40(%ebp)
	movl	%ecx, -36(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1427
	movl	%esi, %edi
	xorl	%esi, %esi
.L1427:
	movl	-40(%ebp), %eax
	orl	%esi, %eax
	movl	-36(%ebp), %edx
	orl	%edi, %edx
	movl	-44(%ebp), %ecx
	movl	%eax, bad_spill_regs_global@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+bad_spill_regs_global@GOTOFF(%ebx,%ecx,8)
	.loc 1 3573 0
	movl	8(%ebp), %edx
	movl	regs_ever_live@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
.L1417:
	.loc 1 3579 0
	movl	$176, -20(%ebp)
	jmp	.L1419
.L1420:
	.loc 1 3580 0
	movl	-20(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	js	.L1421
	movl	-20(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	cmpl	8(%ebp), %eax
	ja	.L1421
	movl	-20(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	movswl	%ax,%esi
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-20(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-20(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	leal	(%esi,%eax), %eax
	cmpl	8(%ebp), %eax
	jbe	.L1421
	.loc 1 3586 0
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_set_bit@PLT
.L1421:
	.loc 1 3579 0
	addl	$1, -20(%ebp)
.L1419:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -20(%ebp)
	jl	.L1420
	.loc 1 3587 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE48:
	.size	spill_hard_reg, .-spill_hard_reg
	.type	ior_hard_reg_set, @function
ior_hard_reg_set:
.LFB49:
	.loc 1 3595 0
	pushl	%ebp
.LCFI158:
	movl	%esp, %ebp
.LCFI159:
	pushl	%edi
.LCFI160:
	pushl	%esi
.LCFI161:
	subl	$40, %esp
.LCFI162:
.LBB103:
	.loc 1 3596 0
	movl	8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -48(%ebp)
	movl	%ecx, -44(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-48(%ebp), %eax
	orl	%esi, %eax
	movl	-44(%ebp), %edx
	orl	%edi, %edx
	movl	-16(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-16(%ebp), %ecx
	addl	$8, %ecx
	movl	-16(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -40(%ebp)
	movl	%edi, -36(%ebp)
	movl	-12(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-40(%ebp), %eax
	orl	%esi, %eax
	movl	-36(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-16(%ebp), %ecx
	addl	$16, %ecx
	movl	-16(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -32(%ebp)
	movl	%edi, -28(%ebp)
	movl	-12(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-32(%ebp), %eax
	orl	%esi, %eax
	movl	-28(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE103:
	.loc 1 3597 0
	addl	$40, %esp
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE49:
	.size	ior_hard_reg_set, .-ior_hard_reg_set
	.section	.rodata
	.type	__FUNCTION__.19332, @object
	.size	__FUNCTION__.19332, 14
__FUNCTION__.19332:
	.string	"finish_spills"
.LC34:
	.string	" Register %d now on stack.\n\n"
.LC35:
	.string	" Register %d now in %d.\n\n"
	.text
	.type	finish_spills, @function
finish_spills:
.LFB50:
	.loc 1 3607 0
	pushl	%ebp
.LCFI163:
	movl	%esp, %ebp
.LCFI164:
	pushl	%edi
.LCFI165:
	pushl	%esi
.LCFI166:
	pushl	%ebx
.LCFI167:
	subl	$364, %esp
.LCFI168:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3609 0
	movl	$0, -172(%ebp)
	.loc 1 3624 0
	movl	$0, n_spills@GOTOFF(%ebx)
	.loc 1 3625 0
	movl	$0, -168(%ebp)
	jmp	.L1431
.L1432:
	.loc 1 3626 0
	movl	-168(%ebp), %eax
	shrl	$6, %eax
	movl	4+used_spill_regs@GOTOFF(%ebx,%eax,8), %edx
	movl	used_spill_regs@GOTOFF(%ebx,%eax,8), %eax
	movl	-168(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1527
	movl	%edx, %eax
	xorl	%edx, %edx
.L1527:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1433
	.loc 1 3628 0
	movl	-168(%ebp), %edx
	movl	n_spills@GOTOFF(%ebx), %eax
	movw	%ax, spill_reg_order@GOTOFF(%ebx,%edx,2)
	.loc 1 3629 0
	movl	n_spills@GOTOFF(%ebx), %edx
	movl	-168(%ebp), %eax
	movw	%ax, spill_regs@GOTOFF(%ebx,%edx,2)
	leal	1(%edx), %eax
	movl	%eax, n_spills@GOTOFF(%ebx)
	.loc 1 3630 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1435
	movl	-168(%ebp), %eax
	movl	regs_ever_live@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L1435
	.loc 1 3631 0
	movl	$1, -172(%ebp)
.L1435:
	.loc 1 3632 0
	movl	-168(%ebp), %edx
	movl	regs_ever_live@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
	jmp	.L1438
.L1433:
	.loc 1 3635 0
	movl	-168(%ebp), %eax
	movw	$-1, spill_reg_order@GOTOFF(%ebx,%eax,2)
.L1438:
	.loc 1 3625 0
	addl	$1, -168(%ebp)
.L1431:
	cmpl	$175, -168(%ebp)
	jle	.L1432
.LBB104:
	.loc 1 3637 0
	movl	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, -164(%ebp)
	movl	$1, -160(%ebp)
	movl	$16, -156(%ebp)
	movl	$1, -152(%ebp)
	jmp	.L1440
.L1441:
	movl	-164(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -164(%ebp)
.L1440:
	cmpl	$0, -164(%ebp)
	je	.L1442
	movl	-164(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-160(%ebp), %eax
	jb	.L1441
.L1442:
	cmpl	$0, -164(%ebp)
	je	.L1447
	movl	-164(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-160(%ebp), %eax
	je	.L1447
	movl	$0, -156(%ebp)
	movl	$0, -152(%ebp)
	jmp	.L1447
.L1450:
.LBB105:
	movl	-152(%ebp), %eax
	movl	-164(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -148(%ebp)
	cmpl	$0, -148(%ebp)
	je	.L1451
	jmp	.L1453
.L1454:
.LBB106:
	movl	-156(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	andl	-148(%ebp), %eax
	testl	%eax, %eax
	je	.L1455
	movl	-144(%ebp), %eax
	notl	%eax
	andl	%eax, -148(%ebp)
	movl	-164(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-152(%ebp), %eax
	sall	$5, %eax
	addl	-156(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L1457
	leal	__FUNCTION__.19332@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3651, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1457:
	movl	-168(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_previous_regs@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	%edx, -360(%ebp)
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%ecx, -356(%ebp)
	movl	-168(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_previous_regs@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	%ecx, %eax
	movl	(%edx,%eax,8), %esi
	movl	4(%edx,%eax,8), %edi
	movl	%esi, -352(%ebp)
	movl	%edi, -348(%ebp)
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1526
	movl	%esi, %edi
	xorl	%esi, %esi
.L1526:
	movl	-352(%ebp), %eax
	orl	%esi, %eax
	movl	-348(%ebp), %edx
	orl	%edi, %edx
	movl	-356(%ebp), %edi
	movl	-360(%ebp), %ecx
	movl	%eax, (%ecx,%edi,8)
	movl	%edx, 4(%ecx,%edi,8)
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movw	$-1, (%eax)
	movl	$1, -172(%ebp)
	cmpl	$0, -148(%ebp)
	je	.L1451
.L1455:
.LBE106:
	addl	$1, -156(%ebp)
.L1453:
	cmpl	$31, -156(%ebp)
	jbe	.L1454
.L1451:
	movl	$0, -156(%ebp)
.LBE105:
	addl	$1, -152(%ebp)
.L1449:
	cmpl	$3, -152(%ebp)
	jbe	.L1450
	movl	$0, -152(%ebp)
	movl	-164(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -164(%ebp)
.L1447:
	cmpl	$0, -164(%ebp)
	jne	.L1449
.LBE104:
	.loc 1 3654 0
	cmpl	$0, 8(%ebp)
	je	.L1461
	.loc 1 3656 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_forbidden_regs@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 3660 0
	movl	insns_need_reload@GOTOFF(%ebx), %eax
	movl	%eax, -176(%ebp)
	jmp	.L1463
.L1464:
.LBB107:
	.loc 1 3662 0
	movl	-176(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -140(%ebp)
	movl	$1, -136(%ebp)
	movl	$16, -132(%ebp)
	movl	$1, -128(%ebp)
	jmp	.L1465
.L1466:
	movl	-140(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -140(%ebp)
.L1465:
	cmpl	$0, -140(%ebp)
	je	.L1467
	movl	-140(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-136(%ebp), %eax
	jb	.L1466
.L1467:
	cmpl	$0, -140(%ebp)
	je	.L1472
	movl	-140(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-136(%ebp), %eax
	je	.L1472
	movl	$0, -132(%ebp)
	movl	$0, -128(%ebp)
	jmp	.L1472
.L1475:
.LBB108:
	movl	-128(%ebp), %eax
	movl	-140(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -124(%ebp)
	cmpl	$0, -124(%ebp)
	je	.L1476
	jmp	.L1478
.L1479:
.LBB109:
	movl	-132(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	andl	-124(%ebp), %eax
	testl	%eax, %eax
	je	.L1480
	movl	-120(%ebp), %eax
	notl	%eax
	andl	%eax, -124(%ebp)
	movl	-140(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-128(%ebp), %eax
	sall	$5, %eax
	addl	-132(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-176(%ebp), %ecx
	addl	$60, %ecx
	movl	-168(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_forbidden_regs@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	ior_hard_reg_set
	cmpl	$0, -124(%ebp)
	je	.L1476
.L1480:
.LBE109:
	addl	$1, -132(%ebp)
.L1478:
	cmpl	$31, -132(%ebp)
	jbe	.L1479
.L1476:
	movl	$0, -132(%ebp)
.LBE108:
	addl	$1, -128(%ebp)
.L1474:
	cmpl	$3, -128(%ebp)
	jbe	.L1475
	movl	$0, -128(%ebp)
	movl	-140(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -140(%ebp)
.L1472:
	cmpl	$0, -140(%ebp)
	jne	.L1474
.LBE107:
.LBB110:
	.loc 1 3668 0
	movl	-176(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -116(%ebp)
	movl	$1, -112(%ebp)
	movl	$16, -108(%ebp)
	movl	$1, -104(%ebp)
	jmp	.L1484
.L1485:
	movl	-116(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -116(%ebp)
.L1484:
	cmpl	$0, -116(%ebp)
	je	.L1486
	movl	-116(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-112(%ebp), %eax
	jb	.L1485
.L1486:
	cmpl	$0, -116(%ebp)
	je	.L1491
	movl	-116(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	-112(%ebp), %eax
	je	.L1491
	movl	$0, -108(%ebp)
	movl	$0, -104(%ebp)
	jmp	.L1491
.L1494:
.LBB111:
	movl	-104(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	12(%edx,%eax,4), %eax
	movl	%eax, -100(%ebp)
	cmpl	$0, -100(%ebp)
	je	.L1495
	jmp	.L1497
.L1498:
.LBB112:
	movl	-108(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	andl	-100(%ebp), %eax
	testl	%eax, %eax
	je	.L1499
	movl	-96(%ebp), %eax
	notl	%eax
	andl	%eax, -100(%ebp)
	movl	-116(%ebp), %eax
	movl	8(%eax), %eax
	sall	$2, %eax
	addl	-104(%ebp), %eax
	sall	$5, %eax
	addl	-108(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-176(%ebp), %ecx
	addl	$60, %ecx
	movl	-168(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_forbidden_regs@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	ior_hard_reg_set
	cmpl	$0, -100(%ebp)
	je	.L1495
.L1499:
.LBE112:
	addl	$1, -108(%ebp)
.L1497:
	cmpl	$31, -108(%ebp)
	jbe	.L1498
.L1495:
	movl	$0, -108(%ebp)
.LBE111:
	addl	$1, -104(%ebp)
.L1493:
	cmpl	$3, -104(%ebp)
	jbe	.L1494
	movl	$0, -104(%ebp)
	movl	-116(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -116(%ebp)
.L1491:
	cmpl	$0, -116(%ebp)
	jne	.L1493
.LBE110:
	.loc 1 3660 0
	movl	-176(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -176(%ebp)
.L1463:
	cmpl	$0, -176(%ebp)
	jne	.L1464
	.loc 1 3681 0
	movl	$176, -168(%ebp)
	jmp	.L1504
.L1505:
	.loc 1 3682 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_old_renumber@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %ecx
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cmpw	%ax, %cx
	je	.L1506
.LBB113:
.LBB114:
	.loc 1 3685 0
	leal	-200(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	bad_spill_regs_global@GOTOFF(%ebx), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-92(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-92(%ebp), %ecx
	addl	$8, %ecx
	movl	-88(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-92(%ebp), %ecx
	addl	$16, %ecx
	movl	-88(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE114:
.LBB115:
	.loc 1 3686 0
	leal	-200(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-168(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_forbidden_regs@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-84(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -344(%ebp)
	movl	%edi, -340(%ebp)
	movl	-80(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-344(%ebp), %eax
	orl	%esi, %eax
	movl	-340(%ebp), %edx
	orl	%edi, %edx
	movl	-84(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-84(%ebp), %ecx
	addl	$8, %ecx
	movl	-84(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -336(%ebp)
	movl	%edi, -332(%ebp)
	movl	-80(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-336(%ebp), %eax
	orl	%esi, %eax
	movl	-332(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-84(%ebp), %ecx
	addl	$16, %ecx
	movl	-84(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -328(%ebp)
	movl	%edi, -324(%ebp)
	movl	-80(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-328(%ebp), %eax
	orl	%esi, %eax
	movl	-324(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE115:
.LBB116:
	.loc 1 3687 0
	leal	-200(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-168(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	pseudo_previous_regs@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -72(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -320(%ebp)
	movl	%ecx, -316(%ebp)
	movl	-72(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-320(%ebp), %eax
	orl	%esi, %eax
	movl	-316(%ebp), %edx
	orl	%edi, %edx
	movl	-76(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-76(%ebp), %ecx
	addl	$8, %ecx
	movl	-76(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -312(%ebp)
	movl	%edi, -308(%ebp)
	movl	-72(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-312(%ebp), %eax
	orl	%esi, %eax
	movl	-308(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-76(%ebp), %ecx
	addl	$16, %ecx
	movl	-76(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -304(%ebp)
	movl	%edi, -300(%ebp)
	movl	-72(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-304(%ebp), %eax
	orl	%esi, %eax
	movl	-300(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE116:
	.loc 1 3688 0
	leal	-200(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	retry_global_alloc@PLT
	.loc 1 3689 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	js	.L1506
	.loc 1 3690 0
	movl	-168(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_clear_bit@PLT
.L1506:
.LBE113:
	.loc 1 3681 0
	addl	$1, -168(%ebp)
.L1504:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -168(%ebp)
	jl	.L1505
.L1461:
	.loc 1 3697 0
	movl	reload_insn_chain@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -176(%ebp)
	jmp	.L1509
.L1510:
.LBB117:
	.loc 1 3702 0
	movl	-176(%ebp), %edx
	addl	$20, %edx
	movl	-176(%ebp), %ecx
	addl	$20, %ecx
	movl	$1, 12(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	bitmap_operation@PLT
	.loc 1 3703 0
	movl	-176(%ebp), %edx
	addl	$36, %edx
	movl	-176(%ebp), %ecx
	addl	$36, %ecx
	movl	$1, 12(%esp)
	leal	spilled_pseudos@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	bitmap_operation@PLT
	.loc 1 3707 0
	movl	-176(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1511
.LBB118:
	.loc 1 3709 0
	leal	-200(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-68(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-68(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE118:
	movl	-176(%ebp), %eax
	addl	$20, %eax
	movl	%eax, 4(%esp)
	leal	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
.LBB119:
	.loc 1 3710 0
	leal	-224(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-64(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-64(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE119:
	movl	-176(%ebp), %eax
	addl	$36, %eax
	movl	%eax, 4(%esp)
	leal	-224(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
.LBB120:
	.loc 1 3711 0
	leal	-200(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-224(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -296(%ebp)
	movl	%ecx, -292(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-296(%ebp), %eax
	orl	%esi, %eax
	movl	-292(%ebp), %edx
	orl	%edi, %edx
	movl	-60(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-60(%ebp), %ecx
	addl	$8, %ecx
	movl	-60(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -288(%ebp)
	movl	%edi, -284(%ebp)
	movl	-56(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-288(%ebp), %eax
	orl	%esi, %eax
	movl	-284(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-60(%ebp), %ecx
	addl	$16, %ecx
	movl	-60(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -280(%ebp)
	movl	%edi, -276(%ebp)
	movl	-56(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-280(%ebp), %eax
	orl	%esi, %eax
	movl	-276(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE120:
.LBB121:
	.loc 1 3714 0
	leal	-224(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-176(%ebp), %eax
	addl	$60, %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-52(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-52(%ebp), %ecx
	addl	$8, %ecx
	movl	-48(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-52(%ebp), %ecx
	addl	$16, %ecx
	movl	-48(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE121:
	.loc 1 3716 0
	movl	-176(%ebp), %eax
	addl	$20, %eax
	movl	%eax, 4(%esp)
	leal	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	compute_use_by_pseudos@PLT
	.loc 1 3717 0
	movl	-176(%ebp), %eax
	addl	$36, %eax
	movl	%eax, 4(%esp)
	leal	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	compute_use_by_pseudos@PLT
.LBB122:
	.loc 1 3718 0
	movl	-176(%ebp), %eax
	addl	$60, %eax
	movl	%eax, -44(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	-44(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-44(%ebp), %ecx
	addl	$8, %ecx
	movl	-40(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-44(%ebp), %ecx
	addl	$16, %ecx
	movl	-40(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE122:
.LBB123:
	.loc 1 3719 0
	movl	-176(%ebp), %eax
	addl	$60, %eax
	movl	%eax, -36(%ebp)
	leal	used_spill_regs@GOTOFF(%ebx), %eax
	movl	%eax, -32(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -272(%ebp)
	movl	%ecx, -268(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-272(%ebp), %eax
	andl	%esi, %eax
	movl	-268(%ebp), %edx
	andl	%edi, %edx
	movl	-36(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-36(%ebp), %ecx
	addl	$8, %ecx
	movl	-36(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -264(%ebp)
	movl	%edi, -260(%ebp)
	movl	-32(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-264(%ebp), %eax
	andl	%esi, %eax
	movl	-260(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-36(%ebp), %ecx
	addl	$16, %ecx
	movl	-36(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -256(%ebp)
	movl	%edi, -252(%ebp)
	movl	-32(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-256(%ebp), %eax
	andl	%esi, %eax
	movl	-252(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE123:
.LBB124:
	.loc 1 3722 0
	leal	-224(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-176(%ebp), %eax
	addl	$60, %eax
	movl	%eax, -24(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -248(%ebp)
	movl	%ecx, -244(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-248(%ebp), %eax
	andl	%esi, %eax
	movl	-244(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1513
	movl	-28(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -240(%ebp)
	movl	%edi, -236(%ebp)
	movl	-24(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-240(%ebp), %eax
	andl	%esi, %eax
	movl	-236(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1513
	movl	-28(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -232(%ebp)
	movl	%ecx, -228(%ebp)
	movl	-24(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-232(%ebp), %eax
	andl	%esi, %eax
	movl	-228(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L1511
.L1513:
.LBE124:
	.loc 1 3723 0
	leal	__FUNCTION__.19332@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3723, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1511:
.LBE117:
	.loc 1 3697 0
	movl	-176(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -176(%ebp)
.L1509:
	cmpl	$0, -176(%ebp)
	jne	.L1510
	.loc 1 3729 0
	movl	$176, -168(%ebp)
	jmp	.L1517
.L1518:
.LBB125:
	.loc 1 3731 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, -20(%ebp)
	.loc 1 3732 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_old_renumber@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	cmpl	-20(%ebp), %eax
	je	.L1519
	.loc 1 3735 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_old_renumber@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	cwtl
	movl	%eax, 4(%esp)
	movl	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	alter_reg
	.loc 1 3736 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_old_renumber@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	-20(%ebp), %eax
	movw	%ax, (%edx)
	.loc 1 3737 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1519
	.loc 1 3739 0
	cmpl	$-1, -20(%ebp)
	jne	.L1522
	.loc 1 3740 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	.LC34@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	fprintf@PLT
	jmp	.L1519
.L1522:
	.loc 1 3742 0
	movl	-168(%ebp), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	movswl	%ax,%edx
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	%edx, 12(%esp)
	movl	-168(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	.LC35@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	fprintf@PLT
.L1519:
.LBE125:
	.loc 1 3729 0
	addl	$1, -168(%ebp)
.L1517:
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -168(%ebp)
	jl	.L1518
	.loc 1 3747 0
	movl	-172(%ebp), %eax
	.loc 1 3748 0
	addl	$364, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE50:
	.size	finish_spills, .-finish_spills
	.type	scan_paradoxical_subregs, @function
scan_paradoxical_subregs:
.LFB51:
	.loc 1 3757 0
	pushl	%ebp
.LCFI169:
	movl	%esp, %ebp
.LCFI170:
	pushl	%ebx
.LCFI171:
	subl	$28, %esp
.LCFI172:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3760 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -12(%ebp)
	.loc 1 3762 0
	movl	-12(%ebp), %eax
	subl	$58, %eax
	movl	%eax, -24(%ebp)
	cmpl	$21, -24(%ebp)
	ja	.L1529
	movl	$1, %eax
	movl	%eax, %edx
	movzbl	-24(%ebp), %ecx
	sall	%cl, %edx
	movl	%edx, -28(%ebp)
	movl	-28(%ebp), %eax
	andl	$3673539, %eax
	testl	%eax, %eax
	jne	.L1545
	movl	-28(%ebp), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	jne	.L1545
	movl	-28(%ebp), %eax
	andl	$32768, %eax
	testl	%eax, %eax
	jne	.L1532
	jmp	.L1529
.L1532:
	.loc 1 3785 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1545
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L1545
	.loc 1 3787 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_max_ref_width@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, (%ecx)
	.loc 1 3789 0
	jmp	.L1545
.L1529:
	.loc 1 3795 0
	movl	-12(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -16(%ebp)
	.loc 1 3796 0
	movl	-12(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -20(%ebp)
	jmp	.L1537
.L1538:
	.loc 1 3798 0
	movl	-20(%ebp), %eax
	addl	-16(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L1539
	.loc 1 3799 0
	movl	-20(%ebp), %eax
	movl	8(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, (%esp)
	call	scan_paradoxical_subregs
	jmp	.L1541
.L1539:
	.loc 1 3800 0
	movl	-20(%ebp), %eax
	addl	-16(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L1541
.LBB126:
	.loc 1 3803 0
	movl	-20(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -8(%ebp)
	jmp	.L1543
.L1544:
	.loc 1 3804 0
	movl	-20(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, (%esp)
	call	scan_paradoxical_subregs
	.loc 1 3803 0
	subl	$1, -8(%ebp)
.L1543:
	cmpl	$0, -8(%ebp)
	jns	.L1544
.L1541:
.LBE126:
	.loc 1 3796 0
	subl	$1, -20(%ebp)
.L1537:
	cmpl	$0, -20(%ebp)
	jns	.L1538
.L1545:
	.loc 1 3807 0
	addl	$28, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE51:
	.size	scan_paradoxical_subregs, .-scan_paradoxical_subregs
	.section	.rodata
	.align 4
.LC36:
	.string	"`asm' operand requires impossible reload"
	.text
	.type	reload_as_needed, @function
reload_as_needed:
.LFB52:
	.loc 1 3821 0
	pushl	%ebp
.LCFI173:
	movl	%esp, %ebp
.LCFI174:
	pushl	%edi
.LCFI175:
	pushl	%esi
.LCFI176:
	pushl	%ebx
.LCFI177:
	subl	$124, %esp
.LCFI178:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3828 0
	leal	spill_reg_rtx@GOTOFF(%ebx), %eax
	movl	%eax, %edx
	movl	$704, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 3829 0
	leal	spill_reg_store@GOTOFF(%ebx), %eax
	movl	%eax, %edx
	movl	$704, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 3830 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$4, 4(%esp)
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_last_reload_reg@GOTOFF(%ebx)
	.loc 1 3831 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_has_output_reload@GOTOFF(%ebx)
.LBB127:
	.loc 1 3832 0
	leal	reg_reloaded_valid@GOTOFF(%ebx), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-60(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-60(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE127:
	.loc 1 3834 0
	call	set_initial_elim_offsets
	.loc 1 3836 0
	movl	reload_insn_chain@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	jmp	.L1547
.L1548:
.LBB128:
	.loc 1 3839 0
	movl	-68(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 3840 0
	movl	-52(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 3844 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L1549
	.loc 1 3845 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	set_offsets_for_label
	jmp	.L1551
.L1549:
	.loc 1 3847 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L1551
.LBB129:
	.loc 1 3849 0
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -44(%ebp)
	.loc 1 3854 0
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L1553
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L1555
.L1553:
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1555
	.loc 1 3857 0
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %esi
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, 4(%esi)
.L1555:
	.loc 1 3864 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L1557
	movl	num_eliminable_invariants@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1559
.L1557:
	movl	-68(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L1559
	.loc 1 3866 0
	movl	$1, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	eliminate_regs_in_insn
	.loc 1 3867 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	jne	.L1559
	.loc 1 3869 0
	call	update_eliminable_offsets
	.loc 1 3870 0
	jmp	.L1562
.L1559:
	.loc 1 3881 0
	movl	-68(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L1563
	movl	-68(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L1563
	movl	-68(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	jne	.L1563
	.loc 1 3883 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 3881 0
	jmp	.L1567
.L1563:
	.loc 1 3890 0
	movl	max_regno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
.LBB130:
	.loc 1 3891 0
	leal	reg_is_output_reload@GOTOFF(%ebx), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-40(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-40(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE130:
	.loc 1 3893 0
	movzbl	spill_indirect_levels@GOTOFF(%ebx), %eax
	movzbl	%al, %edx
	leal	spill_reg_order@GOTOFF(%ebx), %eax
	movl	%eax, 16(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$1, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reloads@PLT
.L1567:
	.loc 1 3897 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jle	.L1568
.LBB131:
	.loc 1 3899 0
	movl	-52(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 3902 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 3908 0
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	choose_reload_regs
	.loc 1 3913 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1570
	.loc 1 3914 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_assigned_reloads
.L1570:
	.loc 1 3918 0
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_reload_insns
	.loc 1 3924 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	subst_reloads@PLT
	.loc 1 3930 0
	movl	-52(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	js	.L1568
	.loc 1 3931 0
	movl	-56(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1573
.L1574:
	.loc 1 3932 0
	movl	-32(%ebp), %eax
	cmpl	-52(%ebp), %eax
	je	.L1575
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L1575
	movl	-32(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L1575
	movl	-32(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L1579
	movl	-32(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L1581
	jmp	.L1583
.L1579:
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_memoized_1@PLT
	testl	%eax, %eax
	js	.L1581
.L1583:
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	movl	$1, (%esp)
	call	constrain_operands@PLT
	testl	%eax, %eax
	jne	.L1575
.L1581:
	.loc 1 3937 0
	leal	.LC36@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	error_for_asm@PLT
	.loc 1 3939 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
.L1575:
	.loc 1 3931 0
	movl	-32(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -32(%ebp)
.L1573:
	movl	-32(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jne	.L1574
.L1568:
.LBE131:
	.loc 1 3943 0
	movl	num_eliminable@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1584
	movl	-68(%ebp), %eax
	movzbl	234(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L1584
	.loc 1 3944 0
	call	update_eliminable_offsets
.L1584:
	.loc 1 3952 0
	movl	$0, 8(%esp)
	leal	forget_old_reloads_1@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	note_stores@PLT
	.loc 1 3956 0
	movl	-52(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L1587
.L1588:
	.loc 1 3957 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L1589
	movl	-64(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L1589
	.loc 1 3958 0
	movl	-64(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	leal	forget_old_reloads_1@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
.L1589:
	.loc 1 3956 0
	movl	-64(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
.L1587:
	movl	-64(%ebp), %eax
	cmpl	-48(%ebp), %eax
	jne	.L1588
.L1551:
.LBE129:
	.loc 1 4076 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L1592
.LBB132:
	.loc 1 4077 0
	leal	reg_reloaded_valid@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-28(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-28(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	jmp	.L1562
.L1592:
.LBE132:
	.loc 1 4081 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L1562
.LBB133:
	.loc 1 4082 0
	leal	reg_reloaded_valid@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	movl	call_used_reg_set@GOT(%ebx), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -104(%ebp)
	movl	%ecx, -100(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-104(%ebp), %eax
	andl	%esi, %eax
	movl	-100(%ebp), %edx
	andl	%edi, %edx
	movl	-24(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-24(%ebp), %ecx
	addl	$8, %ecx
	movl	-24(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -96(%ebp)
	movl	%edi, -92(%ebp)
	movl	-20(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-96(%ebp), %eax
	andl	%esi, %eax
	movl	-92(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-24(%ebp), %ecx
	addl	$16, %ecx
	movl	-24(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -88(%ebp)
	movl	%edi, -84(%ebp)
	movl	-20(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-88(%ebp), %eax
	andl	%esi, %eax
	movl	-84(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.L1562:
.LBE133:
.LBE128:
	.loc 1 3836 0
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
.L1547:
	cmpl	$0, -68(%ebp)
	jne	.L1548
	.loc 1 4086 0
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 4087 0
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 4088 0
	addl	$124, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE52:
	.size	reload_as_needed, .-reload_as_needed
	.type	forget_old_reloads_1, @function
forget_old_reloads_1:
.LFB53:
	.loc 1 4102 0
	pushl	%ebp
.LCFI179:
	movl	%esp, %ebp
.LCFI180:
	pushl	%edi
.LCFI181:
	pushl	%esi
.LCFI182:
	pushl	%ebx
.LCFI183:
	subl	$44, %esp
.LCFI184:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4108 0
	jmp	.L1598
.L1599:
	.loc 1 4113 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L1598:
	.loc 1 4108 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L1599
	.loc 1 4116 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1615
	.loc 1 4119 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4121 0
	cmpl	$175, -28(%ebp)
	jbe	.L1603
	.loc 1 4122 0
	movl	$1, -24(%ebp)
	jmp	.L1616
.L1603:
.LBB134:
	.loc 1 4127 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-28(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4132 0
	movl	$0, -20(%ebp)
	jmp	.L1606
.L1607:
	.loc 1 4135 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1608
	movl	-20(%ebp), %eax
	addl	-28(%ebp), %eax
	shrl	$6, %eax
	movl	reg_is_output_reload@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_is_output_reload@GOTOFF(%ebx,%eax,8), %edi
	movl	-20(%ebp), %eax
	addl	-28(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1618
	movl	%edx, %eax
	xorl	%edx, %edx
.L1618:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1610
.L1608:
	.loc 1 4138 0
	movl	-20(%ebp), %eax
	addl	-28(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -44(%ebp)
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -40(%ebp)
	movl	%ecx, -36(%ebp)
	movl	-20(%ebp), %eax
	addl	-28(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1617
	movl	%eax, %edx
	xorl	%eax, %eax
.L1617:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-40(%ebp), %eax
	andl	%esi, %eax
	movl	-36(%ebp), %edx
	andl	%edi, %edx
	movl	-44(%ebp), %ecx
	movl	%eax, reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	.loc 1 4139 0
	movl	-20(%ebp), %eax
	addl	-28(%ebp), %eax
	movl	$0, spill_reg_store@GOTOFF(%ebx,%eax,4)
.L1610:
	.loc 1 4132 0
	addl	$1, -20(%ebp)
.L1606:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jb	.L1607
	.loc 1 4146 0
	jmp	.L1616
.L1612:
.LBE134:
	.loc 1 4149 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1613
	movl	-24(%ebp), %eax
	addl	-28(%ebp), %eax
	movl	%eax, %edx
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	jne	.L1611
.L1613:
	.loc 1 4150 0
	movl	-24(%ebp), %eax
	addl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
.L1611:
.L1616:
	.loc 1 4146 0
	subl	$1, -24(%ebp)
	cmpl	$-1, -24(%ebp)
	jne	.L1612
.L1615:
	.loc 1 4151 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE53:
	.size	forget_old_reloads_1, .-forget_old_reloads_1
	.type	mark_reload_reg_in_use, @function
mark_reload_reg_in_use:
.LFB54:
	.loc 1 4202 0
	pushl	%ebp
.LCFI185:
	movl	%esp, %ebp
.LCFI186:
	pushl	%edi
.LCFI187:
	pushl	%esi
.LCFI188:
	pushl	%ebx
.LCFI189:
	subl	$220, %esp
.LCFI190:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4203 0
	movl	8(%ebp), %edx
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4206 0
	movl	8(%ebp), %eax
	movl	%eax, -20(%ebp)
	jmp	.L1620
.L1621:
	.loc 1 4208 0
	cmpl	$10, 16(%ebp)
	ja	.L1622
	movl	16(%ebp), %eax
	sall	$2, %eax
	movl	.L1634@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1634:
	.long	.L1623@GOTOFF
	.long	.L1624@GOTOFF
	.long	.L1625@GOTOFF
	.long	.L1626@GOTOFF
	.long	.L1627@GOTOFF
	.long	.L1628@GOTOFF
	.long	.L1629@GOTOFF
	.long	.L1630@GOTOFF
	.long	.L1631@GOTOFF
	.long	.L1632@GOTOFF
	.long	.L1633@GOTOFF
	.text
.L1632:
	.loc 1 4211 0
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -220(%ebp)
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -216(%ebp)
	movl	%ecx, -212(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1648
	movl	%esi, %edi
	xorl	%esi, %esi
.L1648:
	movl	-216(%ebp), %eax
	orl	%esi, %eax
	movl	-212(%ebp), %edx
	orl	%edi, %edx
	movl	-220(%ebp), %ecx
	movl	%eax, reload_reg_used@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used@GOTOFF(%ebx,%ecx,8)
	.loc 1 4212 0
	jmp	.L1622
.L1626:
	.loc 1 4215 0
	movl	12(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -204(%ebp)
	movl	12(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -200(%ebp)
	movl	%ecx, -196(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1647
	movl	%esi, %edi
	xorl	%esi, %esi
.L1647:
	movl	-200(%ebp), %eax
	orl	%esi, %eax
	movl	-196(%ebp), %edx
	orl	%edi, %edx
	movl	-208(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-208(%ebp), %ecx
	addl	-204(%ebp), %ecx
	movl	%eax, reload_reg_used_in_input_addr@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%ecx,8)
	.loc 1 4216 0
	jmp	.L1622
.L1627:
	.loc 1 4219 0
	movl	12(%ebp), %ecx
	movl	%ecx, -192(%ebp)
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -188(%ebp)
	movl	12(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -184(%ebp)
	movl	%ecx, -180(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1646
	movl	%esi, %edi
	xorl	%esi, %esi
.L1646:
	movl	-184(%ebp), %eax
	orl	%esi, %eax
	movl	-180(%ebp), %edx
	orl	%edi, %edx
	movl	-192(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-192(%ebp), %ecx
	addl	-188(%ebp), %ecx
	movl	%eax, reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%ecx,8)
	.loc 1 4220 0
	jmp	.L1622
.L1628:
	.loc 1 4223 0
	movl	12(%ebp), %ecx
	movl	%ecx, -176(%ebp)
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -172(%ebp)
	movl	12(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -168(%ebp)
	movl	%ecx, -164(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1645
	movl	%esi, %edi
	xorl	%esi, %esi
.L1645:
	movl	-168(%ebp), %eax
	orl	%esi, %eax
	movl	-164(%ebp), %edx
	orl	%edi, %edx
	movl	-176(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-176(%ebp), %ecx
	addl	-172(%ebp), %ecx
	movl	%eax, reload_reg_used_in_output_addr@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%ecx,8)
	.loc 1 4224 0
	jmp	.L1622
.L1629:
	.loc 1 4227 0
	movl	12(%ebp), %ecx
	movl	%ecx, -160(%ebp)
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -156(%ebp)
	movl	12(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -152(%ebp)
	movl	%ecx, -148(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1644
	movl	%esi, %edi
	xorl	%esi, %esi
.L1644:
	movl	-152(%ebp), %eax
	orl	%esi, %eax
	movl	-148(%ebp), %edx
	orl	%edi, %edx
	movl	-160(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-160(%ebp), %ecx
	addl	-156(%ebp), %ecx
	movl	%eax, reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%ecx,8)
	.loc 1 4228 0
	jmp	.L1622
.L1630:
	.loc 1 4231 0
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -140(%ebp)
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -136(%ebp)
	movl	%ecx, -132(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1643
	movl	%esi, %edi
	xorl	%esi, %esi
.L1643:
	movl	-136(%ebp), %eax
	orl	%esi, %eax
	movl	-132(%ebp), %edx
	orl	%edi, %edx
	movl	-140(%ebp), %ecx
	movl	%eax, reload_reg_used_in_op_addr@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%ecx,8)
	.loc 1 4232 0
	jmp	.L1622
.L1631:
	.loc 1 4235 0
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -124(%ebp)
	movl	reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -120(%ebp)
	movl	%ecx, -116(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1642
	movl	%esi, %edi
	xorl	%esi, %esi
.L1642:
	movl	-120(%ebp), %eax
	orl	%esi, %eax
	movl	-116(%ebp), %edx
	orl	%edi, %edx
	movl	-124(%ebp), %ecx
	movl	%eax, reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%ecx,8)
	.loc 1 4236 0
	jmp	.L1622
.L1633:
	.loc 1 4239 0
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -108(%ebp)
	movl	reload_reg_used_in_other_addr@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_other_addr@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -104(%ebp)
	movl	%ecx, -100(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1641
	movl	%esi, %edi
	xorl	%esi, %esi
.L1641:
	movl	-104(%ebp), %eax
	orl	%esi, %eax
	movl	-100(%ebp), %edx
	orl	%edi, %edx
	movl	-108(%ebp), %ecx
	movl	%eax, reload_reg_used_in_other_addr@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_other_addr@GOTOFF(%ebx,%ecx,8)
	.loc 1 4240 0
	jmp	.L1622
.L1623:
	.loc 1 4243 0
	movl	12(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -88(%ebp)
	movl	%ecx, -84(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1640
	movl	%esi, %edi
	xorl	%esi, %esi
.L1640:
	movl	-88(%ebp), %eax
	orl	%esi, %eax
	movl	-84(%ebp), %edx
	orl	%edi, %edx
	movl	-96(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-96(%ebp), %ecx
	addl	-92(%ebp), %ecx
	movl	%eax, reload_reg_used_in_input@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_input@GOTOFF(%ebx,%ecx,8)
	.loc 1 4244 0
	jmp	.L1622
.L1624:
	.loc 1 4247 0
	movl	12(%ebp), %ecx
	movl	%ecx, -80(%ebp)
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -72(%ebp)
	movl	%ecx, -68(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1639
	movl	%esi, %edi
	xorl	%esi, %esi
.L1639:
	movl	-72(%ebp), %eax
	orl	%esi, %eax
	movl	-68(%ebp), %edx
	orl	%edi, %edx
	movl	-80(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-80(%ebp), %ecx
	addl	-76(%ebp), %ecx
	movl	%eax, reload_reg_used_in_output@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_output@GOTOFF(%ebx,%ecx,8)
	.loc 1 4248 0
	jmp	.L1622
.L1625:
	.loc 1 4251 0
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -60(%ebp)
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1638
	movl	%esi, %edi
	xorl	%esi, %esi
.L1638:
	movl	-56(%ebp), %eax
	orl	%esi, %eax
	movl	-52(%ebp), %edx
	orl	%edi, %edx
	movl	-60(%ebp), %ecx
	movl	%eax, reload_reg_used_in_insn@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_in_insn@GOTOFF(%ebx,%ecx,8)
.L1622:
	.loc 1 4255 0
	movl	-20(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -44(%ebp)
	movl	reload_reg_used_at_all@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_at_all@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -40(%ebp)
	movl	%ecx, -36(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1637
	movl	%esi, %edi
	xorl	%esi, %esi
.L1637:
	movl	-40(%ebp), %eax
	orl	%esi, %eax
	movl	-36(%ebp), %edx
	orl	%edi, %edx
	movl	-44(%ebp), %ecx
	movl	%eax, reload_reg_used_at_all@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_at_all@GOTOFF(%ebx,%ecx,8)
	.loc 1 4206 0
	addl	$1, -20(%ebp)
.L1620:
	movl	8(%ebp), %eax
	addl	-24(%ebp), %eax
	cmpl	-20(%ebp), %eax
	ja	.L1621
	.loc 1 4257 0
	addl	$220, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE54:
	.size	mark_reload_reg_in_use, .-mark_reload_reg_in_use
	.section	.rodata
	.type	__FUNCTION__.20269, @object
	.size	__FUNCTION__.20269, 24
__FUNCTION__.20269:
	.string	"clear_reload_reg_in_use"
	.text
	.type	clear_reload_reg_in_use, @function
clear_reload_reg_in_use:
.LFB55:
	.loc 1 4267 0
	pushl	%ebp
.LCFI191:
	movl	%esp, %ebp
.LCFI192:
	pushl	%edi
.LCFI193:
	pushl	%esi
.LCFI194:
	pushl	%ebx
.LCFI195:
	subl	$92, %esp
.LCFI196:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4268 0
	movl	8(%ebp), %eax
	movl	20(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4275 0
	movl	$0, -36(%ebp)
	.loc 1 4276 0
	movl	$0, -32(%ebp)
	.loc 1 4279 0
	cmpl	$10, 16(%ebp)
	ja	.L1650
	movl	16(%ebp), %eax
	sall	$2, %eax
	movl	.L1662@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1662:
	.long	.L1651@GOTOFF
	.long	.L1652@GOTOFF
	.long	.L1653@GOTOFF
	.long	.L1654@GOTOFF
	.long	.L1655@GOTOFF
	.long	.L1656@GOTOFF
	.long	.L1657@GOTOFF
	.long	.L1658@GOTOFF
	.long	.L1659@GOTOFF
	.long	.L1660@GOTOFF
	.long	.L1661@GOTOFF
	.text
.L1660:
	.loc 1 4282 0
	leal	reload_reg_used@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4283 0
	jmp	.L1663
.L1654:
	.loc 1 4286 0
	movl	12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_input_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4287 0
	jmp	.L1663
.L1655:
	.loc 1 4290 0
	movl	$1, -36(%ebp)
	.loc 1 4291 0
	movl	12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4292 0
	jmp	.L1663
.L1656:
	.loc 1 4295 0
	movl	12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_output_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4296 0
	jmp	.L1663
.L1657:
	.loc 1 4299 0
	movl	$1, -36(%ebp)
	.loc 1 4300 0
	movl	12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4301 0
	jmp	.L1663
.L1658:
	.loc 1 4304 0
	leal	reload_reg_used_in_op_addr@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4305 0
	jmp	.L1663
.L1659:
	.loc 1 4308 0
	movl	$1, -32(%ebp)
	.loc 1 4309 0
	leal	reload_reg_used_in_op_addr_reload@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4310 0
	jmp	.L1663
.L1661:
	.loc 1 4313 0
	leal	reload_reg_used_in_other_addr@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4314 0
	movl	$1, -32(%ebp)
	.loc 1 4315 0
	jmp	.L1663
.L1651:
	.loc 1 4318 0
	movl	12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_input@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4319 0
	jmp	.L1663
.L1652:
	.loc 1 4322 0
	movl	12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_output@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4323 0
	jmp	.L1663
.L1653:
	.loc 1 4326 0
	leal	reload_reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4327 0
	jmp	.L1663
.L1650:
	.loc 1 4329 0
	leal	__FUNCTION__.20269@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4329, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1663:
	.loc 1 4339 0
	movl	8(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 4340 0
	movl	-56(%ebp), %eax
	addl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	.loc 1 4341 0
	cmpl	$0, -36(%ebp)
	jne	.L1664
	cmpl	$0, -32(%ebp)
	je	.L1666
.L1664:
	.loc 1 4343 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -40(%ebp)
	jmp	.L1667
.L1668:
	.loc 1 4345 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	16(%ebp), %eax
	jne	.L1669
	cmpl	$0, -32(%ebp)
	jne	.L1671
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	12(%ebp), %eax
	jne	.L1669
.L1671:
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1669
.LBB135:
	.loc 1 4349 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4352 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-24(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 4356 0
	movl	-24(%ebp), %eax
	cmpl	-52(%ebp), %eax
	ja	.L1674
	movl	-20(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jbe	.L1674
	.loc 1 4357 0
	movl	-20(%ebp), %eax
	movl	%eax, -52(%ebp)
.L1674:
	.loc 1 4360 0
	movl	-24(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jbe	.L1669
	movl	-24(%ebp), %eax
	cmpl	-48(%ebp), %eax
	jae	.L1669
	.loc 1 4361 0
	movl	-24(%ebp), %eax
	movl	%eax, -48(%ebp)
.L1669:
.LBE135:
	.loc 1 4343 0
	subl	$1, -40(%ebp)
.L1667:
	cmpl	$0, -40(%ebp)
	jns	.L1668
.L1666:
	.loc 1 4366 0
	movl	-52(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1679
.L1680:
	.loc 1 4367 0
	movl	-44(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -76(%ebp)
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1683
	movl	%eax, %edx
	xorl	%eax, %eax
.L1683:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-72(%ebp), %eax
	andl	%esi, %eax
	movl	-68(%ebp), %edx
	andl	%edi, %edx
	movl	-28(%ebp), %ecx
	movl	-76(%ebp), %edi
	movl	%eax, (%ecx,%edi,8)
	movl	%edx, 4(%ecx,%edi,8)
	.loc 1 4366 0
	addl	$1, -44(%ebp)
.L1679:
	movl	-44(%ebp), %eax
	cmpl	-48(%ebp), %eax
	jb	.L1680
	.loc 1 4368 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE55:
	.size	clear_reload_reg_in_use, .-clear_reload_reg_in_use
	.section	.rodata
	.type	__FUNCTION__.20391, @object
	.size	__FUNCTION__.20391, 18
__FUNCTION__.20391:
	.string	"reload_reg_free_p"
	.text
	.type	reload_reg_free_p, @function
reload_reg_free_p:
.LFB56:
	.loc 1 4378 0
	pushl	%ebp
.LCFI197:
	movl	%esp, %ebp
.LCFI198:
	pushl	%edi
.LCFI199:
	pushl	%esi
.LCFI200:
	pushl	%ebx
.LCFI201:
	subl	$44, %esp
.LCFI202:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4382 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1838
	movl	%edx, %eax
	xorl	%edx, %edx
.L1838:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1685
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_unavailable@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_unavailable@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1837
	movl	%edx, %eax
	xorl	%edx, %edx
.L1837:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1687
.L1685:
	.loc 1 4384 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1687:
	.loc 1 4386 0
	cmpl	$10, 16(%ebp)
	ja	.L1689
	movl	16(%ebp), %eax
	sall	$2, %eax
	movl	.L1701@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1701:
	.long	.L1690@GOTOFF
	.long	.L1691@GOTOFF
	.long	.L1692@GOTOFF
	.long	.L1693@GOTOFF
	.long	.L1694@GOTOFF
	.long	.L1695@GOTOFF
	.long	.L1696@GOTOFF
	.long	.L1697@GOTOFF
	.long	.L1698@GOTOFF
	.long	.L1699@GOTOFF
	.long	.L1700@GOTOFF
	.text
.L1699:
	.loc 1 4390 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_other_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_other_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1836
	movl	%edx, %eax
	xorl	%edx, %edx
.L1836:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1702
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1835
	movl	%edx, %eax
	xorl	%edx, %edx
.L1835:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1702
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1834
	movl	%edx, %eax
	xorl	%edx, %edx
.L1834:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1705
.L1702:
	.loc 1 4393 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1705:
	.loc 1 4395 0
	movl	$0, -16(%ebp)
	jmp	.L1706
.L1707:
	.loc 1 4396 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1833
	movl	%edx, %eax
	xorl	%edx, %edx
.L1833:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1708
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1832
	movl	%edx, %eax
	xorl	%edx, %edx
.L1832:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1708
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1831
	movl	%edx, %eax
	xorl	%edx, %edx
.L1831:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1708
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1830
	movl	%edx, %eax
	xorl	%edx, %edx
.L1830:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1708
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1829
	movl	%edx, %eax
	xorl	%edx, %edx
.L1829:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1708
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1828
	movl	%edx, %eax
	xorl	%edx, %edx
.L1828:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1714
.L1708:
	.loc 1 4402 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1714:
	.loc 1 4395 0
	addl	$1, -16(%ebp)
.L1706:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1707
	.loc 1 4404 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1690:
	.loc 1 4407 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1827
	movl	%edx, %eax
	xorl	%edx, %edx
.L1827:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1716
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1826
	movl	%edx, %eax
	xorl	%edx, %edx
.L1826:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1718
.L1716:
	.loc 1 4409 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1718:
	.loc 1 4411 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1825
	movl	%edx, %eax
	xorl	%edx, %edx
.L1825:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1719
	.loc 1 4412 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1719:
	.loc 1 4415 0
	movl	$0, -16(%ebp)
	jmp	.L1721
.L1722:
	.loc 1 4416 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1824
	movl	%edx, %eax
	xorl	%edx, %edx
.L1824:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1723
	.loc 1 4417 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1723:
	.loc 1 4415 0
	addl	$1, -16(%ebp)
.L1721:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1722
	.loc 1 4420 0
	movl	12(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1726
.L1727:
	.loc 1 4421 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1823
	movl	%edx, %eax
	xorl	%edx, %edx
.L1823:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1728
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1822
	movl	%edx, %eax
	xorl	%edx, %edx
.L1822:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1730
.L1728:
	.loc 1 4423 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1730:
	.loc 1 4420 0
	addl	$1, -16(%ebp)
.L1726:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1727
	.loc 1 4425 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1693:
	.loc 1 4430 0
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1821
	movl	%edx, %eax
	xorl	%edx, %edx
.L1821:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1732
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1820
	movl	%edx, %eax
	xorl	%edx, %edx
.L1820:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1734
.L1732:
	.loc 1 4432 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1734:
	.loc 1 4434 0
	movl	$0, -16(%ebp)
	jmp	.L1735
.L1736:
	.loc 1 4435 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1819
	movl	%edx, %eax
	xorl	%edx, %edx
.L1819:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1737
	.loc 1 4436 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1737:
	.loc 1 4434 0
	addl	$1, -16(%ebp)
.L1735:
	movl	-16(%ebp), %eax
	cmpl	12(%ebp), %eax
	jl	.L1736
	.loc 1 4438 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1694:
	.loc 1 4444 0
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1818
	movl	%edx, %eax
	xorl	%edx, %edx
.L1818:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1740
	.loc 1 4445 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1740:
	.loc 1 4447 0
	movl	$0, -16(%ebp)
	jmp	.L1742
.L1743:
	.loc 1 4448 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1817
	movl	%edx, %eax
	xorl	%edx, %edx
.L1817:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1744
	.loc 1 4449 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1744:
	.loc 1 4447 0
	addl	$1, -16(%ebp)
.L1742:
	movl	-16(%ebp), %eax
	cmpl	12(%ebp), %eax
	jl	.L1743
	.loc 1 4451 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1695:
	.loc 1 4458 0
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1816
	movl	%edx, %eax
	xorl	%edx, %edx
.L1816:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1747
	.loc 1 4459 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1747:
	.loc 1 4461 0
	movl	$0, -16(%ebp)
	jmp	.L1749
.L1750:
	.loc 1 4462 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1815
	movl	%edx, %eax
	xorl	%edx, %edx
.L1815:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1751
	.loc 1 4463 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1751:
	.loc 1 4461 0
	addl	$1, -16(%ebp)
.L1749:
	movl	-16(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	.L1750
	.loc 1 4465 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1696:
	.loc 1 4473 0
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1814
	movl	%edx, %eax
	xorl	%edx, %edx
.L1814:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1754
	.loc 1 4474 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1754:
	.loc 1 4476 0
	movl	$0, -16(%ebp)
	jmp	.L1756
.L1757:
	.loc 1 4477 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1813
	movl	%edx, %eax
	xorl	%edx, %edx
.L1813:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1758
	.loc 1 4478 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1758:
	.loc 1 4476 0
	addl	$1, -16(%ebp)
.L1756:
	movl	-16(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	.L1757
	.loc 1 4480 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1697:
	.loc 1 4483 0
	movl	$0, -16(%ebp)
	jmp	.L1761
.L1762:
	.loc 1 4484 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1812
	movl	%edx, %eax
	xorl	%edx, %edx
.L1812:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1763
	.loc 1 4485 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1763:
	.loc 1 4483 0
	addl	$1, -16(%ebp)
.L1761:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1762
	.loc 1 4487 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1811
	movl	%edx, %eax
	xorl	%edx, %edx
.L1811:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1766
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1810
	movl	%edx, %eax
	xorl	%edx, %edx
.L1810:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1766
	movl	$1, -36(%ebp)
	jmp	.L1769
.L1766:
	movl	$0, -36(%ebp)
.L1769:
	movl	-36(%ebp), %eax
	movl	%eax, -40(%ebp)
	jmp	.L1688
.L1698:
	.loc 1 4491 0
	movl	$0, -16(%ebp)
	jmp	.L1770
.L1771:
	.loc 1 4492 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1809
	movl	%edx, %eax
	xorl	%edx, %edx
.L1809:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1772
	.loc 1 4493 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1772:
	.loc 1 4491 0
	addl	$1, -16(%ebp)
.L1770:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1771
	.loc 1 4495 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1808
	movl	%edx, %eax
	xorl	%edx, %edx
.L1808:
	andl	$1, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	jmp	.L1688
.L1691:
	.loc 1 4502 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1807
	movl	%edx, %eax
	xorl	%edx, %edx
.L1807:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1775
	.loc 1 4503 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1775:
	.loc 1 4505 0
	movl	$0, -16(%ebp)
	jmp	.L1777
.L1778:
	.loc 1 4506 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1806
	movl	%edx, %eax
	xorl	%edx, %edx
.L1806:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1779
	.loc 1 4507 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1779:
	.loc 1 4505 0
	addl	$1, -16(%ebp)
.L1777:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1778
	.loc 1 4509 0
	movl	12(%ebp), %eax
	movl	%eax, -16(%ebp)
	jmp	.L1782
.L1783:
	.loc 1 4510 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1805
	movl	%edx, %eax
	xorl	%edx, %edx
.L1805:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1784
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1804
	movl	%edx, %eax
	xorl	%edx, %edx
.L1804:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1786
.L1784:
	.loc 1 4512 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1786:
	.loc 1 4509 0
	addl	$1, -16(%ebp)
.L1782:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1783
	.loc 1 4514 0
	movl	$1, -40(%ebp)
	jmp	.L1688
.L1692:
	.loc 1 4517 0
	movl	$0, -16(%ebp)
	jmp	.L1788
.L1789:
	.loc 1 4518 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1803
	movl	%edx, %eax
	xorl	%edx, %edx
.L1803:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1790
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1802
	movl	%edx, %eax
	xorl	%edx, %edx
.L1802:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1792
.L1790:
	.loc 1 4520 0
	movl	$0, -40(%ebp)
	jmp	.L1688
.L1792:
	.loc 1 4517 0
	addl	$1, -16(%ebp)
.L1788:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1789
	.loc 1 4522 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1801
	movl	%edx, %eax
	xorl	%edx, %edx
.L1801:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1794
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1800
	movl	%edx, %eax
	xorl	%edx, %edx
.L1800:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1794
	movl	$1, -32(%ebp)
	jmp	.L1797
.L1794:
	movl	$0, -32(%ebp)
.L1797:
	movl	-32(%ebp), %eax
	movl	%eax, -40(%ebp)
	jmp	.L1688
.L1700:
	.loc 1 4526 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_other_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_other_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1799
	movl	%edx, %eax
	xorl	%edx, %edx
.L1799:
	andl	$1, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	jmp	.L1688
.L1689:
	.loc 1 4528 0
	leal	__FUNCTION__.20391@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4528, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1688:
	movl	-40(%ebp), %eax
	.loc 1 4529 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE56:
	.size	reload_reg_free_p, .-reload_reg_free_p
	.section	.rodata
	.type	__FUNCTION__.20814, @object
	.size	__FUNCTION__.20814, 25
__FUNCTION__.20814:
	.string	"reload_reg_reaches_end_p"
	.text
	.type	reload_reg_reaches_end_p, @function
reload_reg_reaches_end_p:
.LFB57:
	.loc 1 4544 0
	pushl	%ebp
.LCFI203:
	movl	%esp, %ebp
.LCFI204:
	pushl	%edi
.LCFI205:
	pushl	%esi
.LCFI206:
	pushl	%ebx
.LCFI207:
	subl	$44, %esp
.LCFI208:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4547 0
	cmpl	$10, 16(%ebp)
	ja	.L1840
	movl	16(%ebp), %eax
	sall	$2, %eax
	movl	.L1849@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1849:
	.long	.L1841@GOTOFF
	.long	.L1842@GOTOFF
	.long	.L1843@GOTOFF
	.long	.L1844@GOTOFF
	.long	.L1844@GOTOFF
	.long	.L1842@GOTOFF
	.long	.L1842@GOTOFF
	.long	.L1845@GOTOFF
	.long	.L1846@GOTOFF
	.long	.L1847@GOTOFF
	.long	.L1848@GOTOFF
	.text
.L1847:
	.loc 1 4552 0
	movl	$1, -44(%ebp)
	jmp	.L1850
.L1848:
	.loc 1 4563 0
	movl	$0, -16(%ebp)
	jmp	.L1851
.L1852:
	.loc 1 4564 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1956
	movl	%edx, %eax
	xorl	%edx, %edx
.L1956:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1853
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1955
	movl	%edx, %eax
	xorl	%edx, %edx
.L1955:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1853
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1954
	movl	%edx, %eax
	xorl	%edx, %edx
.L1954:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1853
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1953
	movl	%edx, %eax
	xorl	%edx, %edx
.L1953:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1853
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1952
	movl	%edx, %eax
	xorl	%edx, %edx
.L1952:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1853
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1951
	movl	%edx, %eax
	xorl	%edx, %edx
.L1951:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1859
.L1853:
	.loc 1 4570 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1859:
	.loc 1 4563 0
	addl	$1, -16(%ebp)
.L1851:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1852
	.loc 1 4572 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1950
	movl	%edx, %eax
	xorl	%edx, %edx
.L1950:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1861
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1949
	movl	%edx, %eax
	xorl	%edx, %edx
.L1949:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1861
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1948
	movl	%edx, %eax
	xorl	%edx, %edx
.L1948:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1861
	movl	$1, -40(%ebp)
	jmp	.L1865
.L1861:
	movl	$0, -40(%ebp)
.L1865:
	movl	-40(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1850
.L1844:
	.loc 1 4583 0
	movl	12(%ebp), %eax
	movl	%eax, -16(%ebp)
	jmp	.L1866
.L1867:
	.loc 1 4584 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1947
	movl	%edx, %eax
	xorl	%edx, %edx
.L1947:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1868
	.loc 1 4585 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1868:
	.loc 1 4583 0
	addl	$1, -16(%ebp)
.L1866:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1867
	.loc 1 4587 0
	movl	12(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1871
.L1872:
	.loc 1 4588 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1946
	movl	%edx, %eax
	xorl	%edx, %edx
.L1946:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1873
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1945
	movl	%edx, %eax
	xorl	%edx, %edx
.L1945:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1875
.L1873:
	.loc 1 4590 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1875:
	.loc 1 4587 0
	addl	$1, -16(%ebp)
.L1871:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1872
	.loc 1 4592 0
	movl	$0, -16(%ebp)
	jmp	.L1877
.L1878:
	.loc 1 4593 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1944
	movl	%edx, %eax
	xorl	%edx, %edx
.L1944:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1879
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1943
	movl	%edx, %eax
	xorl	%edx, %edx
.L1943:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1879
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1942
	movl	%edx, %eax
	xorl	%edx, %edx
.L1942:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1882
.L1879:
	.loc 1 4596 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1882:
	.loc 1 4592 0
	addl	$1, -16(%ebp)
.L1877:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1878
	.loc 1 4598 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr_reload@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1941
	movl	%edx, %eax
	xorl	%edx, %edx
.L1941:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1884
	.loc 1 4599 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1884:
	.loc 1 4601 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1940
	movl	%edx, %eax
	xorl	%edx, %edx
.L1940:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1886
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1939
	movl	%edx, %eax
	xorl	%edx, %edx
.L1939:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1886
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1938
	movl	%edx, %eax
	xorl	%edx, %edx
.L1938:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1886
	movl	$1, -36(%ebp)
	jmp	.L1890
.L1886:
	movl	$0, -36(%ebp)
.L1890:
	movl	-36(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1850
.L1841:
	.loc 1 4611 0
	movl	12(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1891
.L1892:
	.loc 1 4612 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1937
	movl	%edx, %eax
	xorl	%edx, %edx
.L1937:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1893
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1936
	movl	%edx, %eax
	xorl	%edx, %edx
.L1936:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1893
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_input@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1935
	movl	%edx, %eax
	xorl	%edx, %edx
.L1935:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1896
.L1893:
	.loc 1 4615 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1896:
	.loc 1 4611 0
	addl	$1, -16(%ebp)
.L1891:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1892
.L1845:
	.loc 1 4622 0
	movl	$0, -16(%ebp)
	jmp	.L1897
.L1898:
	.loc 1 4623 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1934
	movl	%edx, %eax
	xorl	%edx, %edx
.L1934:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1899
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1933
	movl	%edx, %eax
	xorl	%edx, %edx
.L1933:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1899
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1932
	movl	%edx, %eax
	xorl	%edx, %edx
.L1932:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1902
.L1899:
	.loc 1 4626 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1902:
	.loc 1 4622 0
	addl	$1, -16(%ebp)
.L1897:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1898
	.loc 1 4628 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1931
	movl	%edx, %eax
	xorl	%edx, %edx
.L1931:
	andl	$1, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -44(%ebp)
	jmp	.L1850
.L1846:
	.loc 1 4631 0
	movl	$0, -16(%ebp)
	jmp	.L1904
.L1905:
	.loc 1 4632 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1930
	movl	%edx, %eax
	xorl	%edx, %edx
.L1930:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1906
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1929
	movl	%edx, %eax
	xorl	%edx, %edx
.L1929:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1906
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1928
	movl	%edx, %eax
	xorl	%edx, %edx
.L1928:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1909
.L1906:
	.loc 1 4635 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1909:
	.loc 1 4631 0
	addl	$1, -16(%ebp)
.L1904:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -16(%ebp)
	jl	.L1905
	.loc 1 4637 0
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_op_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1927
	movl	%edx, %eax
	xorl	%edx, %edx
.L1927:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1911
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1926
	movl	%edx, %eax
	xorl	%edx, %edx
.L1926:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1911
	movl	8(%ebp), %eax
	shrl	$6, %eax
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1925
	movl	%edx, %eax
	xorl	%edx, %edx
.L1925:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1911
	movl	$1, -32(%ebp)
	jmp	.L1915
.L1911:
	movl	$0, -32(%ebp)
.L1915:
	movl	-32(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1850
.L1843:
	.loc 1 4645 0
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%ebp)
.L1842:
	.loc 1 4656 0
	movl	$0, -16(%ebp)
	jmp	.L1916
.L1917:
	.loc 1 4657 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_output_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1924
	movl	%edx, %eax
	xorl	%edx, %edx
.L1924:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1918
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reload_reg_used_in_outaddr_addr@GOTOFF(%ebx,%eax,8), %edi
	movl	8(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L1923
	movl	%edx, %eax
	xorl	%edx, %edx
.L1923:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L1920
.L1918:
	.loc 1 4659 0
	movl	$0, -44(%ebp)
	jmp	.L1850
.L1920:
	.loc 1 4656 0
	addl	$1, -16(%ebp)
.L1916:
	movl	-16(%ebp), %eax
	cmpl	12(%ebp), %eax
	jl	.L1917
	.loc 1 4661 0
	movl	$1, -44(%ebp)
	jmp	.L1850
.L1840:
	.loc 1 4664 0
	leal	__FUNCTION__.20814@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4664, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1850:
	movl	-44(%ebp), %eax
	.loc 1 4665 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE57:
	.size	reload_reg_reaches_end_p, .-reload_reg_reaches_end_p
	.section	.rodata
	.type	__FUNCTION__.21157, @object
	.size	__FUNCTION__.21157, 17
__FUNCTION__.21157:
	.string	"reloads_conflict"
	.text
.globl reloads_conflict
	.type	reloads_conflict, @function
reloads_conflict:
.LFB58:
	.loc 1 4675 0
	pushl	%ebp
.LCFI209:
	movl	%esp, %ebp
.LCFI210:
	pushl	%ebx
.LCFI211:
	subl	$68, %esp
.LCFI212:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4676 0
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 4677 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 4678 0
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 4679 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 4682 0
	cmpl	$9, -16(%ebp)
	jne	.L1958
	.loc 1 4683 0
	movl	$1, -60(%ebp)
	jmp	.L1960
.L1958:
	.loc 1 4687 0
	cmpl	$10, -20(%ebp)
	ja	.L1961
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	.L1973@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1973:
	.long	.L1962@GOTOFF
	.long	.L1963@GOTOFF
	.long	.L1964@GOTOFF
	.long	.L1965@GOTOFF
	.long	.L1966@GOTOFF
	.long	.L1967@GOTOFF
	.long	.L1968@GOTOFF
	.long	.L1969@GOTOFF
	.long	.L1970@GOTOFF
	.long	.L1971@GOTOFF
	.long	.L1972@GOTOFF
	.text
.L1962:
	.loc 1 4690 0
	cmpl	$2, -16(%ebp)
	je	.L1974
	cmpl	$7, -16(%ebp)
	je	.L1974
	cmpl	$8, -16(%ebp)
	je	.L1974
	cmpl	$0, -16(%ebp)
	je	.L1974
	cmpl	$3, -16(%ebp)
	je	.L1979
	cmpl	$4, -16(%ebp)
	jne	.L1981
.L1979:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jle	.L1981
.L1974:
	movl	$1, -56(%ebp)
	jmp	.L1982
.L1981:
	movl	$0, -56(%ebp)
.L1982:
	movl	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1965:
	.loc 1 4699 0
	cmpl	$3, -16(%ebp)
	jne	.L1983
	movl	-12(%ebp), %eax
	cmpl	-8(%ebp), %eax
	je	.L1985
.L1983:
	cmpl	$0, -16(%ebp)
	jne	.L1986
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jge	.L1986
.L1985:
	movl	$1, -52(%ebp)
	jmp	.L1988
.L1986:
	movl	$0, -52(%ebp)
.L1988:
	movl	-52(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1966:
	.loc 1 4703 0
	cmpl	$4, -16(%ebp)
	jne	.L1989
	movl	-12(%ebp), %eax
	cmpl	-8(%ebp), %eax
	je	.L1991
.L1989:
	cmpl	$0, -16(%ebp)
	jne	.L1992
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jge	.L1992
.L1991:
	movl	$1, -48(%ebp)
	jmp	.L1994
.L1992:
	movl	$0, -48(%ebp)
.L1994:
	movl	-48(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1967:
	.loc 1 4707 0
	cmpl	$5, -16(%ebp)
	jne	.L1995
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	je	.L1997
.L1995:
	cmpl	$1, -16(%ebp)
	jne	.L1998
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jg	.L1998
.L1997:
	movl	$1, -44(%ebp)
	jmp	.L2000
.L1998:
	movl	$0, -44(%ebp)
.L2000:
	movl	-44(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1968:
	.loc 1 4711 0
	cmpl	$6, -16(%ebp)
	jne	.L2001
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	je	.L2003
.L2001:
	cmpl	$1, -16(%ebp)
	jne	.L2004
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jg	.L2004
.L2003:
	movl	$1, -40(%ebp)
	jmp	.L2006
.L2004:
	movl	$0, -40(%ebp)
.L2006:
	movl	-40(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1969:
	.loc 1 4715 0
	cmpl	$0, -16(%ebp)
	je	.L2007
	cmpl	$2, -16(%ebp)
	je	.L2007
	cmpl	$7, -16(%ebp)
	jne	.L2010
.L2007:
	movl	$1, -36(%ebp)
	jmp	.L2011
.L2010:
	movl	$0, -36(%ebp)
.L2011:
	movl	-36(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1970:
	.loc 1 4719 0
	cmpl	$0, -16(%ebp)
	je	.L2012
	cmpl	$8, -16(%ebp)
	jne	.L2014
.L2012:
	movl	$1, -32(%ebp)
	jmp	.L2015
.L2014:
	movl	$0, -32(%ebp)
.L2015:
	movl	-32(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1963:
	.loc 1 4723 0
	cmpl	$2, -16(%ebp)
	je	.L2016
	cmpl	$1, -16(%ebp)
	je	.L2016
	cmpl	$5, -16(%ebp)
	je	.L2019
	cmpl	$6, -16(%ebp)
	jne	.L2021
.L2019:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jl	.L2021
.L2016:
	movl	$1, -28(%ebp)
	jmp	.L2022
.L2021:
	movl	$0, -28(%ebp)
.L2022:
	movl	-28(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1964:
	.loc 1 4729 0
	cmpl	$0, -16(%ebp)
	je	.L2023
	cmpl	$1, -16(%ebp)
	je	.L2023
	cmpl	$2, -16(%ebp)
	je	.L2023
	cmpl	$7, -16(%ebp)
	jne	.L2027
.L2023:
	movl	$1, -24(%ebp)
	jmp	.L2028
.L2027:
	movl	$0, -24(%ebp)
.L2028:
	movl	-24(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1972:
	.loc 1 4734 0
	cmpl	$10, -16(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -60(%ebp)
	jmp	.L1960
.L1971:
	.loc 1 4737 0
	movl	$1, -60(%ebp)
	jmp	.L1960
.L1961:
	.loc 1 4740 0
	leal	__FUNCTION__.21157@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4740, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1960:
	movl	-60(%ebp), %eax
	.loc 1 4742 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE58:
	.size	reloads_conflict, .-reloads_conflict
	.type	reload_reg_free_for_value_p, @function
reload_reg_free_for_value_p:
.LFB59:
	.loc 1 4773 0
	pushl	%ebp
.LCFI213:
	movl	%esp, %ebp
.LCFI214:
	pushl	%esi
.LCFI215:
	pushl	%ebx
.LCFI216:
	subl	$64, %esp
.LCFI217:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4778 0
	movl	$0, -32(%ebp)
	.loc 1 4780 0
	movl	$0, -24(%ebp)
	.loc 1 4782 0
	movl	12(%ebp), %eax
	shrl	$6, %eax
	movl	4+reload_reg_unavailable@GOTOFF(%ebx,%eax,8), %edx
	movl	reload_reg_unavailable@GOTOFF(%ebx,%eax,8), %eax
	movl	12(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2124
	movl	%edx, %eax
	xorl	%edx, %edx
.L2124:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2031
	.loc 1 4783 0
	movl	$0, -60(%ebp)
	jmp	.L2033
.L2031:
	.loc 1 4785 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	28(%ebp), %eax
	jne	.L2034
	.loc 1 4787 0
	movl	$1, -24(%ebp)
	.loc 1 4788 0
	movl	$0, 28(%ebp)
.L2034:
	.loc 1 4806 0
	cmpl	$10, 20(%ebp)
	ja	.L2036
	movl	20(%ebp), %eax
	sall	$2, %eax
	movl	.L2046@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2046:
	.long	.L2037@GOTOFF
	.long	.L2036@GOTOFF
	.long	.L2036@GOTOFF
	.long	.L2038@GOTOFF
	.long	.L2039@GOTOFF
	.long	.L2040@GOTOFF
	.long	.L2041@GOTOFF
	.long	.L2042@GOTOFF
	.long	.L2043@GOTOFF
	.long	.L2044@GOTOFF
	.long	.L2045@GOTOFF
	.text
.L2045:
	.loc 1 4810 0
	cmpl	$0, -24(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4811 0
	jmp	.L2047
.L2044:
	.loc 1 4813 0
	cmpl	$0, -24(%ebp)
	je	.L2048
	movl	$1, -56(%ebp)
	jmp	.L2050
.L2048:
	movl	$155, -56(%ebp)
.L2050:
	movl	-56(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 4814 0
	jmp	.L2047
.L2039:
	.loc 1 4822 0
	movl	16(%ebp), %eax
	sall	$2, %eax
	addl	$2, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4823 0
	jmp	.L2047
.L2038:
	.loc 1 4825 0
	movl	16(%ebp), %eax
	sall	$2, %eax
	addl	$3, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4826 0
	jmp	.L2047
.L2037:
	.loc 1 4830 0
	cmpl	$0, -24(%ebp)
	je	.L2051
	movl	16(%ebp), %eax
	sall	$2, %eax
	addl	$4, %eax
	movl	%eax, -52(%ebp)
	jmp	.L2053
.L2051:
	movl	$123, -52(%ebp)
.L2053:
	movl	-52(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 4831 0
	jmp	.L2047
.L2043:
	.loc 1 4835 0
	movl	$121, -36(%ebp)
	.loc 1 4836 0
	jmp	.L2047
.L2042:
	.loc 1 4840 0
	cmpl	$0, -24(%ebp)
	je	.L2054
	movl	$122, -48(%ebp)
	jmp	.L2056
.L2054:
	movl	$123, -48(%ebp)
.L2056:
	movl	-48(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 4841 0
	jmp	.L2047
.L2041:
	.loc 1 4843 0
	movl	16(%ebp), %eax
	addl	$124, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4844 0
	jmp	.L2047
.L2040:
	.loc 1 4846 0
	movl	16(%ebp), %eax
	addl	$125, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4847 0
	jmp	.L2047
.L2036:
	.loc 1 4849 0
	movl	$155, -36(%ebp)
.L2047:
	.loc 1 4852 0
	movl	$0, -28(%ebp)
	jmp	.L2057
.L2058:
.LBB136:
	.loc 1 4854 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 4855 0
	cmpl	$0, -20(%ebp)
	je	.L2059
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2059
	movl	12(%ebp), %esi
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	subl	%eax, %esi
	movl	-20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	subl	$1, %eax
	cmpl	%eax, %esi
	ja	.L2059
	movl	-28(%ebp), %eax
	cmpl	32(%ebp), %eax
	je	.L2059
.LBB137:
	.loc 1 4860 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%eax, -16(%ebp)
	.loc 1 4865 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	cmpl	8(%ebp), %eax
	je	.L2064
	.loc 1 4866 0
	movl	$0, -16(%ebp)
.L2064:
	.loc 1 4867 0
	cmpl	$0, -16(%ebp)
	je	.L2066
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2066
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2066
	cmpl	$0, 28(%ebp)
	je	.L2059
.L2066:
.LBB138:
	.loc 1 4871 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	cmpl	$10, -44(%ebp)
	ja	.L2070
	movl	-44(%ebp), %eax
	sall	$2, %eax
	movl	.L2082@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2082:
	.long	.L2071@GOTOFF
	.long	.L2072@GOTOFF
	.long	.L2073@GOTOFF
	.long	.L2074@GOTOFF
	.long	.L2075@GOTOFF
	.long	.L2076@GOTOFF
	.long	.L2077@GOTOFF
	.long	.L2078@GOTOFF
	.long	.L2079@GOTOFF
	.long	.L2080@GOTOFF
	.long	.L2081@GOTOFF
	.text
.L2081:
	.loc 1 4874 0
	movl	$0, -12(%ebp)
	.loc 1 4875 0
	jmp	.L2083
.L2075:
	.loc 1 4883 0
	cmpl	$3, 20(%ebp)
	jne	.L2084
	movl	-28(%ebp), %eax
	addl	$1, %eax
	cmpl	32(%ebp), %eax
	jne	.L2084
	cmpl	$0, 36(%ebp)
	je	.L2084
	movl	32(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2059
.L2084:
	.loc 1 4893 0
	cmpl	$0, 20(%ebp)
	jne	.L2088
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	16(%ebp), %eax
	jne	.L2088
	cmpl	$0, 36(%ebp)
	je	.L2088
	movl	32(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2059
.L2088:
	.loc 1 4898 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	$2, %eax
	movl	%eax, -12(%ebp)
	.loc 1 4899 0
	jmp	.L2083
.L2074:
	.loc 1 4901 0
	cmpl	$0, 20(%ebp)
	jne	.L2092
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	16(%ebp), %eax
	jne	.L2092
	cmpl	$0, 36(%ebp)
	je	.L2092
	movl	32(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2059
.L2092:
	.loc 1 4905 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	$3, %eax
	movl	%eax, -12(%ebp)
	.loc 1 4906 0
	jmp	.L2083
.L2071:
	.loc 1 4908 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	$4, %eax
	movl	%eax, -12(%ebp)
	.loc 1 4909 0
	movl	$1, -32(%ebp)
	.loc 1 4910 0
	jmp	.L2083
.L2079:
	.loc 1 4914 0
	cmpl	$7, 20(%ebp)
	jne	.L2096
	movl	-28(%ebp), %eax
	addl	$1, %eax
	cmpl	32(%ebp), %eax
	jne	.L2096
	cmpl	$0, 36(%ebp)
	je	.L2096
	movl	32(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2059
.L2096:
	.loc 1 4918 0
	movl	$121, -12(%ebp)
	.loc 1 4919 0
	jmp	.L2083
.L2078:
	.loc 1 4921 0
	movl	$122, -12(%ebp)
	.loc 1 4922 0
	movl	$1, -32(%ebp)
	.loc 1 4923 0
	jmp	.L2083
.L2073:
	.loc 1 4925 0
	movl	$123, -12(%ebp)
	.loc 1 4926 0
	jmp	.L2083
.L2072:
	.loc 1 4930 0
	movl	$124, -12(%ebp)
	.loc 1 4931 0
	jmp	.L2083
.L2077:
	.loc 1 4936 0
	cmpl	$5, 20(%ebp)
	jne	.L2100
	movl	-28(%ebp), %eax
	addl	$1, %eax
	cmpl	32(%ebp), %eax
	jne	.L2100
	cmpl	$0, 36(%ebp)
	je	.L2100
	movl	32(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2059
.L2100:
	.loc 1 4940 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	addl	$124, %eax
	movl	%eax, -12(%ebp)
	.loc 1 4941 0
	jmp	.L2083
.L2076:
	.loc 1 4943 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	addl	$125, %eax
	movl	%eax, -12(%ebp)
	.loc 1 4944 0
	jmp	.L2083
.L2080:
	.loc 1 4948 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2104
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2106
.L2104:
	.loc 1 4950 0
	movl	$124, -12(%ebp)
	.loc 1 4952 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	earlyclobber_operand_p@PLT
	testl	%eax, %eax
	je	.L2083
	.loc 1 4953 0
	movl	$123, -12(%ebp)
	.loc 1 4955 0
	jmp	.L2083
.L2106:
	.loc 1 4957 0
	movl	$1, -12(%ebp)
	.loc 1 4962 0
	cmpl	$0, 28(%ebp)
	je	.L2083
	.loc 1 4963 0
	movl	$0, -60(%ebp)
	jmp	.L2033
.L2070:
	.loc 1 4966 0
	movl	$0, -60(%ebp)
	jmp	.L2033
.L2083:
	.loc 1 4968 0
	movl	-36(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jl	.L2111
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2113
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2113
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2113
.L2111:
	cmpl	$0, 28(%ebp)
	je	.L2059
	movl	32(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2059
	cmpl	$122, -12(%ebp)
	jle	.L2059
.L2113:
	.loc 1 4973 0
	movl	$0, -60(%ebp)
	jmp	.L2033
.L2059:
.LBE138:
.LBE137:
.LBE136:
	.loc 1 4852 0
	addl	$1, -28(%ebp)
.L2057:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -28(%ebp)
	jl	.L2058
	.loc 1 4979 0
	cmpl	$0, -32(%ebp)
	je	.L2119
	cmpl	$0, 28(%ebp)
	je	.L2119
	movl	28(%ebp), %eax
	movl	%eax, (%esp)
	call	earlyclobber_operand_p@PLT
	testl	%eax, %eax
	je	.L2119
	.loc 1 4980 0
	movl	$0, -60(%ebp)
	jmp	.L2033
.L2119:
	.loc 1 4982 0
	movl	$1, -60(%ebp)
.L2033:
	movl	-60(%ebp), %eax
	.loc 1 4983 0
	addl	$64, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE59:
	.size	reload_reg_free_for_value_p, .-reload_reg_free_for_value_p
	.type	free_for_value_p, @function
free_for_value_p:
.LFB60:
	.loc 1 5018 0
	pushl	%ebp
.LCFI218:
	movl	%esp, %ebp
.LCFI219:
	pushl	%ebx
.LCFI220:
	subl	$52, %esp
.LCFI221:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5019 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -8(%ebp)
	.loc 1 5020 0
	jmp	.L2126
.L2127:
	.loc 1 5021 0
	movl	-8(%ebp), %eax
	movl	8(%ebp), %edx
	addl	%eax, %edx
	movl	36(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	32(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_reg_free_for_value_p
	testl	%eax, %eax
	jne	.L2126
	.loc 1 5024 0
	movl	$0, -24(%ebp)
	jmp	.L2129
.L2126:
	.loc 1 5020 0
	cmpl	$0, -8(%ebp)
	setg	%al
	subl	$1, -8(%ebp)
	testb	%al, %al
	jne	.L2127
	.loc 1 5025 0
	movl	$1, -24(%ebp)
.L2129:
	movl	-24(%ebp), %eax
	.loc 1 5026 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE60:
	.size	free_for_value_p, .-free_for_value_p
	.type	conflicts_with_override, @function
conflicts_with_override:
.LFB61:
	.loc 1 5034 0
	pushl	%ebp
.LCFI222:
	movl	%esp, %ebp
.LCFI223:
	pushl	%ebx
.LCFI224:
	subl	$36, %esp
.LCFI225:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5036 0
	movl	$0, -8(%ebp)
	jmp	.L2133
.L2134:
	.loc 1 5037 0
	movl	-8(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2135
	movl	-8(%ebp), %edx
	movl	reload_override_in@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L2135
	.loc 1 5039 0
	movl	$1, -24(%ebp)
	jmp	.L2138
.L2135:
	.loc 1 5036 0
	addl	$1, -8(%ebp)
.L2133:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -8(%ebp)
	jl	.L2134
	.loc 1 5040 0
	movl	$0, -24(%ebp)
.L2138:
	movl	-24(%ebp), %eax
	.loc 1 5041 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE61:
	.size	conflicts_with_override, .-conflicts_with_override
	.section	.rodata
	.type	__FUNCTION__.21488, @object
	.size	__FUNCTION__.21488, 14
__FUNCTION__.21488:
	.string	"failed_reload"
	.align 4
.LC37:
	.string	"could not find a spill register"
	.align 4
.LC38:
	.string	"`asm' operand constraint incompatible with operand size"
	.text
	.type	failed_reload, @function
failed_reload:
.LFB62:
	.loc 1 5049 0
	pushl	%ebp
.LCFI226:
	movl	%esp, %ebp
.LCFI227:
	pushl	%ebx
.LCFI228:
	subl	$20, %esp
.LCFI229:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5050 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L2142
	.loc 1 5052 0
	leal	__FUNCTION__.21488@GOTOFF(%ebx), %eax
	movl	%eax, 16(%esp)
	movl	$5052, 12(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	.LC37@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	_fatal_insn@PLT
.L2142:
	.loc 1 5056 0
	leal	.LC38@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	error_for_asm@PLT
	.loc 1 5058 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	$0, (%eax,%edx)
	.loc 1 5059 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	$0, (%eax)
	.loc 1 5060 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	$0, (%eax)
	.loc 1 5061 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	leal	64(%eax), %edx
	movzbl	8(%edx), %eax
	orl	$1, %eax
	movb	%al, 8(%edx)
	.loc 1 5062 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	leal	64(%eax), %edx
	movzbl	8(%edx), %eax
	orl	$4, %eax
	movb	%al, 8(%edx)
	.loc 1 5063 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE62:
	.size	failed_reload, .-failed_reload
	.type	set_reload_reg, @function
set_reload_reg:
.LFB63:
	.loc 1 5071 0
	pushl	%ebp
.LCFI230:
	movl	%esp, %ebp
.LCFI231:
	pushl	%esi
.LCFI232:
	pushl	%ebx
.LCFI233:
	subl	$48, %esp
.LCFI234:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5073 0
	movl	8(%ebp), %eax
	movl	spill_reg_rtx@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -16(%ebp)
	.loc 1 5075 0
	cmpl	$0, -16(%ebp)
	je	.L2146
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	je	.L2148
.L2146:
	.loc 1 5076 0
	movl	8(%ebp), %esi
	movl	8(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	movswl	%ax,%ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, spill_reg_rtx@GOTOFF(%ebx,%esi,4)
.L2148:
	.loc 1 5079 0
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -20(%ebp)
	.loc 1 5083 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-20(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L2149
.LBB139:
	.loc 1 5085 0
	movl	$0, -12(%ebp)
	.loc 1 5086 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2151
	.loc 1 5087 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
.L2151:
	.loc 1 5094 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2153
	cmpl	$0, -12(%ebp)
	je	.L2153
	movl	-12(%ebp), %eax
	movl	-20(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L2149
.L2153:
	.loc 1 5096 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2156
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-20(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L2149
.L2156:
	.loc 1 5100 0
	movl	8(%ebp), %eax
	movl	%eax, last_spill_reg@GOTOFF(%ebx)
	.loc 1 5104 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %esi
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%ecx, 12(%esp)
	movl	%esi, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mark_reload_reg_in_use
	.loc 1 5107 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	leal	44(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 5108 0
	movl	12(%ebp), %ecx
	movl	8(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	movswl	%ax,%edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	%edx, (%eax,%ecx,4)
	.loc 1 5109 0
	movl	$1, -28(%ebp)
	jmp	.L2158
.L2149:
.LBE139:
	.loc 1 5112 0
	movl	$0, -28(%ebp)
.L2158:
	movl	-28(%ebp), %eax
	.loc 1 5113 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE63:
	.size	set_reload_reg, .-set_reload_reg
	.type	allocate_reload_reg, @function
allocate_reload_reg:
.LFB64:
	.loc 1 5129 0
	pushl	%ebp
.LCFI235:
	movl	%esp, %ebp
.LCFI236:
	pushl	%edi
.LCFI237:
	pushl	%esi
.LCFI238:
	pushl	%ebx
.LCFI239:
	subl	$76, %esp
.LCFI240:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5145 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jbe	.L2161
	cmpl	$0, 16(%ebp)
	jne	.L2161
	movl	$1, -56(%ebp)
	jmp	.L2164
.L2161:
	movl	$0, -56(%ebp)
.L2164:
	movl	-56(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 5159 0
	movl	$0, -40(%ebp)
	jmp	.L2165
.L2166:
	.loc 1 5166 0
	movl	last_spill_reg@GOTOFF(%ebx), %eax
	movl	%eax, -44(%ebp)
	.loc 1 5168 0
	movl	$0, -36(%ebp)
	jmp	.L2167
.L2168:
.LBB140:
	.loc 1 5170 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 5173 0
	addl	$1, -44(%ebp)
	.loc 1 5174 0
	movl	n_spills@GOTOFF(%ebx), %eax
	cmpl	%eax, -44(%ebp)
	jl	.L2169
	.loc 1 5175 0
	movl	n_spills@GOTOFF(%ebx), %eax
	subl	%eax, -44(%ebp)
.L2169:
	.loc 1 5176 0
	movl	-44(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -24(%ebp)
	.loc 1 5178 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	-24(%ebp), %edx
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_reg_free_p
	testl	%eax, %eax
	jne	.L2171
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2173
	movl	-24(%ebp), %eax
	shrl	$6, %eax
	movl	4+reload_reg_used@GOTOFF(%ebx,%eax,8), %edx
	movl	reload_reg_used@GOTOFF(%ebx,%eax,8), %eax
	movl	-24(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2203
	movl	%edx, %eax
	xorl	%edx, %edx
.L2203:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2173
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %esi
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %edi
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %edx
	movl	$1, 28(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%ecx, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	je	.L2173
.L2171:
	movl	-28(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	reg_class_contents@GOT(%ebx), %esi
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	4(%esi,%eax,8), %edx
	movl	(%esi,%eax,8), %eax
	movl	-24(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2202
	movl	%edx, %eax
	xorl	%edx, %edx
.L2202:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2173
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-24(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L2173
	cmpl	$0, -40(%ebp)
	jne	.L2178
	movl	-24(%ebp), %eax
	shrl	$6, %eax
	movl	4+reload_reg_used_at_all@GOTOFF(%ebx,%eax,8), %edx
	movl	reload_reg_used_at_all@GOTOFF(%ebx,%eax,8), %eax
	movl	-24(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2201
	movl	%edx, %eax
	xorl	%edx, %edx
.L2201:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2173
	movl	-24(%ebp), %eax
	shrl	$6, %eax
	movl	4+reload_reg_used_for_inherit@GOTOFF(%ebx,%eax,8), %edx
	movl	reload_reg_used_for_inherit@GOTOFF(%ebx,%eax,8), %eax
	movl	-24(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2200
	movl	%edx, %eax
	xorl	%edx, %edx
.L2200:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2173
.L2178:
.LBB141:
	.loc 1 5198 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -20(%ebp)
	.loc 1 5202 0
	cmpl	$0, -32(%ebp)
	je	.L2181
	.loc 1 5203 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
.L2181:
	.loc 1 5205 0
	cmpl	$1, -20(%ebp)
	jne	.L2187
	.loc 1 5208 0
	cmpl	$0, -32(%ebp)
	jne	.L2173
	.loc 1 5210 0
	jmp	.L2186
.L2188:
.LBB142:
	.loc 1 5216 0
	movl	-20(%ebp), %eax
	addl	-24(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	.loc 1 5217 0
	movl	-28(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	reg_class_contents@GOT(%ebx), %esi
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	4(%esi,%eax,8), %edx
	movl	(%esi,%eax,8), %eax
	movl	-16(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2199
	movl	%edx, %eax
	xorl	%edx, %edx
.L2199:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2189
	movl	-16(%ebp), %eax
	movzwl	spill_reg_order@GOTOFF(%ebx,%eax,2), %eax
	testw	%ax, %ax
	js	.L2189
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	-16(%ebp), %edx
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_reg_free_p
	testl	%eax, %eax
	je	.L2189
	.loc 1 5222 0
	subl	$1, -20(%ebp)
.L2187:
.LBE142:
	.loc 1 5214 0
	cmpl	$1, -20(%ebp)
	jg	.L2188
.L2189:
	.loc 1 5224 0
	cmpl	$1, -20(%ebp)
	je	.L2186
.L2173:
.LBE141:
.LBE140:
	.loc 1 5168 0
	addl	$1, -36(%ebp)
.L2167:
	movl	n_spills@GOTOFF(%ebx), %eax
	cmpl	%eax, -36(%ebp)
	jl	.L2168
.L2186:
	.loc 1 5230 0
	movl	n_spills@GOTOFF(%ebx), %eax
	cmpl	%eax, -36(%ebp)
	jl	.L2193
	.loc 1 5159 0
	addl	$1, -40(%ebp)
.L2165:
	cmpl	$1, -40(%ebp)
	jle	.L2166
.L2193:
	.loc 1 5235 0
	movl	n_spills@GOTOFF(%ebx), %eax
	cmpl	%eax, -36(%ebp)
	jl	.L2195
	.loc 1 5236 0
	movl	$0, -48(%ebp)
	jmp	.L2197
.L2195:
	.loc 1 5241 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	set_reload_reg
	movl	%eax, -48(%ebp)
.L2197:
	movl	-48(%ebp), %eax
	.loc 1 5242 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE64:
	.size	allocate_reload_reg, .-allocate_reload_reg
	.type	choose_reload_regs_init, @function
choose_reload_regs_init:
.LFB65:
	.loc 1 5252 0
	pushl	%ebp
.LCFI241:
	movl	%esp, %ebp
.LCFI242:
	pushl	%edi
.LCFI243:
	pushl	%esi
.LCFI244:
	pushl	%ebx
.LCFI245:
	subl	$204, %esp
.LCFI246:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5255 0
	movl	$0, -108(%ebp)
	jmp	.L2205
.L2206:
	.loc 1 5256 0
	movl	-108(%ebp), %esi
	movl	-108(%ebp), %eax
	sall	$2, %eax
	addl	12(%ebp), %eax
	movl	(%eax), %ecx
	movl	rld@GOT(%ebx), %edx
	imull	$76, %esi, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	%ecx, (%eax)
	.loc 1 5255 0
	addl	$1, -108(%ebp)
.L2205:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -108(%ebp)
	jl	.L2206
	.loc 1 5258 0
	movl	reload_inherited@GOT(%ebx), %eax
	movl	%eax, %edx
	movl	$120, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 5259 0
	movl	reload_inheritance_insn@GOT(%ebx), %eax
	movl	%eax, %edx
	movl	$480, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
	.loc 1 5260 0
	movl	reload_override_in@GOT(%ebx), %eax
	movl	%eax, %edx
	movl	$480, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	memset@PLT
.LBB143:
	.loc 1 5262 0
	leal	reload_reg_used@GOTOFF(%ebx), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-104(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-104(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE143:
.LBB144:
	.loc 1 5263 0
	leal	reload_reg_used_at_all@GOTOFF(%ebx), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-100(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-100(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE144:
.LBB145:
	.loc 1 5264 0
	leal	reload_reg_used_in_op_addr@GOTOFF(%ebx), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-96(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-96(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE145:
.LBB146:
	.loc 1 5265 0
	leal	reload_reg_used_in_op_addr_reload@GOTOFF(%ebx), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE146:
.LBB147:
	.loc 1 5266 0
	leal	reload_reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-88(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-88(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE147:
.LBB148:
	.loc 1 5267 0
	leal	reload_reg_used_in_other_addr@GOTOFF(%ebx), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-84(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-84(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE148:
.LBB149:
	.loc 1 5269 0
	leal	reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-80(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-80(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE149:
.LBB150:
.LBB151:
	.loc 1 5272 0
	leal	-136(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-76(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-76(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE151:
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	%eax, 4(%esp)
	leal	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
.LBB152:
	.loc 1 5273 0
	leal	reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, -72(%ebp)
	leal	-136(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -192(%ebp)
	movl	%ecx, -188(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-192(%ebp), %eax
	orl	%esi, %eax
	movl	-188(%ebp), %edx
	orl	%edi, %edx
	movl	-72(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-72(%ebp), %ecx
	addl	$8, %ecx
	movl	-72(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -184(%ebp)
	movl	%edi, -180(%ebp)
	movl	-68(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-184(%ebp), %eax
	orl	%esi, %eax
	movl	-180(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-72(%ebp), %ecx
	addl	$16, %ecx
	movl	-72(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -176(%ebp)
	movl	%edi, -172(%ebp)
	movl	-68(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-176(%ebp), %eax
	orl	%esi, %eax
	movl	-172(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE152:
.LBB153:
	.loc 1 5274 0
	leal	-136(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-64(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-64(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE153:
	movl	8(%ebp), %eax
	addl	$36, %eax
	movl	%eax, 4(%esp)
	leal	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
.LBB154:
	.loc 1 5275 0
	leal	reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, -60(%ebp)
	leal	-136(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -168(%ebp)
	movl	%ecx, -164(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-168(%ebp), %eax
	orl	%esi, %eax
	movl	-164(%ebp), %edx
	orl	%edi, %edx
	movl	-60(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-60(%ebp), %ecx
	addl	$8, %ecx
	movl	-60(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -160(%ebp)
	movl	%edi, -156(%ebp)
	movl	-56(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-160(%ebp), %eax
	orl	%esi, %eax
	movl	-156(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-60(%ebp), %ecx
	addl	$16, %ecx
	movl	-60(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -152(%ebp)
	movl	%edi, -148(%ebp)
	movl	-56(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-152(%ebp), %eax
	orl	%esi, %eax
	movl	-148(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE154:
	.loc 1 5276 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	%eax, 4(%esp)
	leal	reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	compute_use_by_pseudos@PLT
	.loc 1 5277 0
	movl	8(%ebp), %eax
	addl	$36, %eax
	movl	%eax, 4(%esp)
	leal	reg_used_in_insn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	compute_use_by_pseudos@PLT
.LBE150:
	.loc 1 5280 0
	movl	$0, -108(%ebp)
	jmp	.L2208
.L2209:
.LBB155:
	.loc 1 5282 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_output@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-52(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-52(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE155:
.LBB156:
	.loc 1 5283 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_input@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-48(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-48(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE156:
.LBB157:
	.loc 1 5284 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_input_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-44(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-44(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE157:
.LBB158:
	.loc 1 5285 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_inpaddr_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-40(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-40(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE158:
.LBB159:
	.loc 1 5286 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_output_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-36(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-36(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE159:
.LBB160:
	.loc 1 5287 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	reload_reg_used_in_outaddr_addr@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-32(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-32(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE160:
	.loc 1 5280 0
	addl	$1, -108(%ebp)
.L2208:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -108(%ebp)
	jl	.L2209
.LBB161:
	.loc 1 5290 0
	leal	reload_reg_unavailable@GOTOFF(%ebx), %eax
	movl	%eax, -28(%ebp)
	movl	8(%ebp), %eax
	addl	$60, %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	-28(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-28(%ebp), %ecx
	addl	$8, %ecx
	movl	-24(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-28(%ebp), %ecx
	addl	$16, %ecx
	movl	-24(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE161:
.LBB162:
	.loc 1 5292 0
	leal	reload_reg_used_for_inherit@GOTOFF(%ebx), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-20(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-20(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE162:
	.loc 1 5294 0
	movl	$0, -108(%ebp)
	jmp	.L2211
.L2212:
	.loc 1 5297 0
	movl	-108(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2213
	.loc 1 5298 0
	movl	-108(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %esi
	movl	-108(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %edi
	movl	-108(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %ecx
	movl	-108(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%esi, 12(%esp)
	movl	%edi, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	mark_reload_reg_in_use
.L2213:
	.loc 1 5294 0
	addl	$1, -108(%ebp)
.L2211:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -108(%ebp)
	jl	.L2212
	.loc 1 5300 0
	addl	$204, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE65:
	.size	choose_reload_regs_init, .-choose_reload_regs_init
	.section	.rodata
	.type	__FUNCTION__.21927, @object
	.size	__FUNCTION__.21927, 19
__FUNCTION__.21927:
	.string	"choose_reload_regs"
	.text
	.type	choose_reload_regs, @function
choose_reload_regs:
.LFB66:
	.loc 1 5312 0
	pushl	%ebp
.LCFI247:
	movl	%esp, %ebp
.LCFI248:
	pushl	%edi
.LCFI249:
	pushl	%esi
.LCFI250:
	pushl	%ebx
.LCFI251:
	subl	$780, %esp
.LCFI252:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5313 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -152(%ebp)
	.loc 1 5315 0
	movl	$1, -140(%ebp)
	.loc 1 5316 0
	movl	$0, -136(%ebp)
	.loc 1 5330 0
	movl	$0, -144(%ebp)
	jmp	.L2218
.L2219:
	.loc 1 5332 0
	movl	-144(%ebp), %edx
	movl	-144(%ebp), %eax
	movw	%ax, reload_order@GOTOFF(%ebx,%edx,2)
	.loc 1 5333 0
	movl	-144(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	$-1, (%eax,%edx,4)
	.loc 1 5335 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jbe	.L2220
	.loc 1 5337 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	movl	-140(%ebp), %edx
	movl	%edx, -748(%ebp)
	movl	%eax, -744(%ebp)
	movl	-748(%ebp), %ecx
	cmpl	%ecx, -744(%ebp)
	jae	.L2222
	movl	-748(%ebp), %eax
	movl	%eax, -744(%ebp)
.L2222:
	movl	-744(%ebp), %edx
	movl	%edx, -140(%ebp)
	.loc 1 5338 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-136(%ebp), %ecx
	movl	reg_class_superunion@GOT(%ebx), %esi
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	leal	0(,%eax,4), %edx
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	(%esi,%eax,4), %eax
	movl	%eax, -136(%ebp)
.L2220:
	.loc 1 5342 0
	movl	-144(%ebp), %ecx
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -632(%ebp,%ecx,4)
	.loc 1 5330 0
	addl	$1, -144(%ebp)
.L2218:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2219
	.loc 1 5345 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jle	.L2224
	.loc 1 5346 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	leal	reload_reg_class_lower@GOTOFF(%ebx), %eax
	movl	%eax, 12(%esp)
	movl	$2, 8(%esp)
	movl	%edx, 4(%esp)
	leal	reload_order@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	qsort@PLT
.L2224:
	.loc 1 5353 0
	movl	$0, -128(%ebp)
	.loc 1 5354 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	setg	%al
	movzbl	%al, %eax
	movl	%eax, -124(%ebp)
	jmp	.L2226
.L2227:
	.loc 1 5356 0
	leal	-632(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	choose_reload_regs_init
	.loc 1 5376 0
	movl	$0, -144(%ebp)
	jmp	.L2228
.L2229:
.LBB163:
	.loc 1 5378 0
	movl	-144(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -120(%ebp)
	.loc 1 5379 0
	movl	$0, -116(%ebp)
	.loc 1 5382 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2230
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	jne	.L2230
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	testb	%al, %al
	je	.L2233
.L2230:
	.loc 1 5391 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2234
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2234
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2233
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2234
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2234
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	cmpl	$175, %eax
	jle	.L2233
.L2234:
	.loc 1 5428 0
	cmpl	$0, -124(%ebp)
	je	.L2240
.LBB164:
	.loc 1 5430 0
	movl	$0, -112(%ebp)
	.loc 1 5431 0
	movl	$-1, -108(%ebp)
	.loc 1 5432 0
	movl	$0, -104(%ebp)
	.loc 1 5434 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2242
	.loc 1 5436 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2244
	.loc 1 5438 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	4(%eax), %eax
	movl	%eax, -108(%ebp)
	.loc 1 5439 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	jmp	.L2242
.L2244:
	.loc 1 5441 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2246
	.loc 1 5443 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -108(%ebp)
	.loc 1 5444 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	jmp	.L2242
.L2246:
	.loc 1 5446 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2242
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2242
	.loc 1 5449 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -112(%ebp)
	.loc 1 5450 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -108(%ebp)
	.loc 1 5451 0
	cmpl	$175, -108(%ebp)
	jg	.L2250
	.loc 1 5452 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_regno@PLT
	movl	%eax, -108(%ebp)
.L2250:
	.loc 1 5453 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
.L2242:
	.loc 1 5476 0
	cmpl	$0, -108(%ebp)
	js	.L2240
	movl	-108(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2240
.LBB165:
	.loc 1 5478 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 5479 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 5482 0
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -148(%ebp)
	.loc 1 5483 0
	movl	-112(%ebp), %esi
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-148(%ebp), %ecx
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%esi, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	subreg_regno_offset@PLT
	movl	%eax, %edx
	movl	-148(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -148(%ebp)
	.loc 1 5484 0
	movl	-148(%ebp), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -96(%ebp)
	.loc 1 5486 0
	cmpl	$0, -112(%ebp)
	jne	.L2254
	.loc 1 5487 0
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	jmp	.L2256
.L2254:
	.loc 1 5489 0
	movl	-104(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	-104(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	addl	-112(%ebp), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	smallest_mode_for_size@PLT
	movl	%eax, -88(%ebp)
.L2256:
	.loc 1 5493 0
	movl	-148(%ebp), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 8(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	mips_cannot_change_mode_class@PLT
	xorl	$1, %eax
	testb	%al, %al
	je	.L2240
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-88(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jb	.L2240
	movl	-148(%ebp), %eax
	movl	reg_reloaded_contents@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-108(%ebp), %eax
	jne	.L2240
	movl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %eax
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2500
	movl	%edx, %eax
	xorl	%edx, %edx
.L2500:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2240
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-148(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L2240
	movl	-100(%ebp), %edx
	movl	-148(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	reg_class_contents@GOT(%ebx), %esi
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	4(%esi,%eax,8), %edx
	movl	(%esi,%eax,8), %eax
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2499
	movl	%edx, %eax
	xorl	%edx, %edx
.L2499:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2262
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_register_move_cost@PLT
	movl	%eax, -740(%ebp)
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L2264
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L2266
.L2264:
	movl	$6, -736(%ebp)
	jmp	.L2267
.L2266:
	movl	$4, -736(%ebp)
.L2267:
	movl	$1, 8(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_move_secondary_cost@PLT
	addl	-736(%ebp), %eax
	cmpl	%eax, -740(%ebp)
	jge	.L2240
	movl	$1, 12(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_secondary_reload_class@PLT
	testl	%eax, %eax
	jne	.L2240
.L2262:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	cmpl	-140(%ebp), %eax
	je	.L2269
	movl	-136(%ebp), %edx
	movl	-148(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	reg_class_contents@GOT(%ebx), %esi
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	4(%esi,%eax,8), %edx
	movl	(%esi,%eax,8), %eax
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2498
	movl	%edx, %eax
	xorl	%edx, %edx
.L2498:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2240
.L2269:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %esi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %edi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -732(%ebp)
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %edx
	movl	$1, 28(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%ecx, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	-732(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	je	.L2240
.LBB166:
	.loc 1 5534 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -84(%ebp)
	.loc 1 5537 0
	movl	$1, -80(%ebp)
	jmp	.L2272
.L2273:
	.loc 1 5538 0
	movl	-80(%ebp), %eax
	addl	-148(%ebp), %eax
	movl	reg_reloaded_contents@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-108(%ebp), %eax
	jne	.L2274
	movl	-80(%ebp), %eax
	addl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edi
	movl	-80(%ebp), %eax
	addl	-148(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2497
	movl	%edx, %eax
	xorl	%edx, %edx
.L2497:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2274
	.loc 1 5537 0
	addl	$1, -80(%ebp)
.L2272:
	movl	-80(%ebp), %eax
	cmpl	-84(%ebp), %eax
	jl	.L2273
.L2274:
	.loc 1 5542 0
	movl	-80(%ebp), %eax
	cmpl	-84(%ebp), %eax
	jne	.L2240
.LBB167:
	.loc 1 5547 0
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-104(%ebp), %eax
	je	.L2278
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -728(%ebp)
	jmp	.L2280
.L2278:
	movl	-92(%ebp), %eax
	movl	%eax, -728(%ebp)
.L2280:
	movl	-728(%ebp), %edx
	movl	%edx, -92(%ebp)
	.loc 1 5550 0
	movl	$0, -72(%ebp)
	.loc 1 5551 0
	movl	$0, -80(%ebp)
	jmp	.L2281
.L2282:
	.loc 1 5552 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, %esi
	movl	-80(%ebp), %eax
	addl	-148(%ebp), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	reg_class_contents@GOT(%ebx), %ecx
	movl	%esi, %eax
	addl	%eax, %eax
	addl	%esi, %eax
	addl	%edx, %eax
	movl	(%ecx,%eax,8), %esi
	movl	4(%ecx,%eax,8), %edi
	movl	-80(%ebp), %eax
	addl	-148(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2496
	movl	%edx, %eax
	xorl	%edx, %edx
.L2496:
	andl	$1, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	orl	%eax, -72(%ebp)
	.loc 1 5551 0
	addl	$1, -80(%ebp)
.L2281:
	movl	-80(%ebp), %eax
	cmpl	-84(%ebp), %eax
	jl	.L2282
	.loc 1 5562 0
	movl	$0, -76(%ebp)
	jmp	.L2284
.L2285:
	.loc 1 5563 0
	movl	-76(%ebp), %edx
	movl	reload_earlyclobbers@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	-108(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_for_reload_p@PLT
	testl	%eax, %eax
	jne	.L2286
	.loc 1 5562 0
	addl	$1, -76(%ebp)
.L2284:
	movl	n_earlyclobbers@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -76(%ebp)
	jl	.L2285
.L2286:
	.loc 1 5568 0
	movl	n_earlyclobbers@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -76(%ebp)
	jne	.L2288
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %esi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %edi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -724(%ebp)
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %edx
	movl	$1, 28(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%ecx, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	-724(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	je	.L2288
	movl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	4+reg_used_in_insn@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_used_in_insn@GOTOFF(%ebx,%eax,8), %eax
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2495
	movl	%edx, %eax
	xorl	%edx, %edx
.L2495:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2291
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2291
	movl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	4+reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %eax
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2494
	movl	%edx, %eax
	xorl	%edx, %edx
.L2494:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2288
.L2291:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L2294
	movl	$17, -720(%ebp)
	jmp	.L2296
.L2294:
	movl	$30, -720(%ebp)
.L2296:
	movl	-720(%ebp), %eax
	cmpl	-148(%ebp), %eax
	jne	.L2297
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2297
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2288
.L2297:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-104(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L2288
	cmpl	$0, -72(%ebp)
	jne	.L2288
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2302
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2302
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2302
.L2288:
	.loc 1 5593 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2240
	.loc 1 5595 0
	movl	-120(%ebp), %ecx
	movl	reload_override_in@GOT(%ebx), %edx
	movl	-92(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	.loc 1 5596 0
	movl	-120(%ebp), %ecx
	movl	-148(%ebp), %eax
	movl	reg_reloaded_insn@GOTOFF(%ebx,%eax,4), %edx
	movl	reload_inheritance_insn@GOT(%ebx), %eax
	movl	%edx, (%eax,%ecx,4)
	.loc 1 5568 0
	jmp	.L2240
.L2302:
.LBB168:
	.loc 1 5606 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %esi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	-148(%ebp), %edx
	movl	%esi, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mark_reload_reg_in_use
	.loc 1 5610 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	leal	44(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 5611 0
	movl	-120(%ebp), %edx
	movl	reload_inherited@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
	.loc 1 5612 0
	movl	-120(%ebp), %ecx
	movl	-148(%ebp), %eax
	movl	reg_reloaded_insn@GOTOFF(%ebx,%eax,4), %edx
	movl	reload_inheritance_insn@GOT(%ebx), %eax
	movl	%edx, (%eax,%ecx,4)
	.loc 1 5614 0
	movl	-120(%ebp), %ecx
	movl	reload_spill_index@GOT(%ebx), %edx
	movl	-148(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	.loc 1 5615 0
	movl	$0, -68(%ebp)
	jmp	.L2307
.L2308:
	.loc 1 5616 0
	movl	-68(%ebp), %eax
	addl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -716(%ebp)
	movl	reload_reg_used_for_inherit@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_for_inherit@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -712(%ebp)
	movl	%ecx, -708(%ebp)
	movl	-68(%ebp), %eax
	addl	-148(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2493
	movl	%esi, %edi
	xorl	%esi, %esi
.L2493:
	movl	-712(%ebp), %eax
	orl	%esi, %eax
	movl	-708(%ebp), %edx
	orl	%edi, %edx
	movl	-716(%ebp), %ecx
	movl	%eax, reload_reg_used_for_inherit@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_for_inherit@GOTOFF(%ebx,%ecx,8)
	.loc 1 5615 0
	addl	$1, -68(%ebp)
.L2307:
	movl	-68(%ebp), %eax
	cmpl	-84(%ebp), %eax
	jl	.L2308
.L2240:
.LBE168:
.LBE167:
.LBE166:
.LBE165:
.LBE164:
	.loc 1 5625 0
	cmpl	$0, -124(%ebp)
	je	.L2309
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2309
	movl	-120(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L2309
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2309
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2314
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2309
.L2314:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$24, %eax
	movl	(%eax), %eax
	cmpl	-140(%ebp), %eax
	je	.L2325
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_classes_intersect_p@PLT
	testl	%eax, %eax
	jne	.L2309
.L2325:
	.loc 1 5635 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%eax, -116(%ebp)
	.loc 1 5625 0
	jmp	.L2327
.L2309:
	.loc 1 5638 0
	cmpl	$0, -124(%ebp)
	je	.L2327
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	jne	.L2327
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2327
.LBB169:
	.loc 1 5640 0
	movl	-152(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L2331
	movl	-152(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2333
	movl	-152(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -696(%ebp)
	jmp	.L2335
.L2333:
	movl	-152(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -696(%ebp)
.L2335:
	movl	-696(%ebp), %eax
	movl	%eax, -700(%ebp)
	jmp	.L2336
.L2331:
	movl	$0, -700(%ebp)
.L2336:
	movl	-700(%ebp), %edx
	movl	%edx, -64(%ebp)
	.loc 1 5642 0
	cmpl	$0, -64(%ebp)
	je	.L2327
	movl	-64(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2327
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2339
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L2327
.L2339:
	.loc 1 5645 0
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -116(%ebp)
.L2327:
.LBE169:
	.loc 1 5648 0
	cmpl	$0, -116(%ebp)
	je	.L2347
.LBB170:
	.loc 1 5652 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%ecx, 24(%esp)
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$-1, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	find_equiv_reg@PLT
	movl	%eax, -60(%ebp)
	.loc 1 5653 0
	movl	$0, -56(%ebp)
	.loc 1 5655 0
	cmpl	$0, -60(%ebp)
	je	.L2349
	.loc 1 5657 0
	movl	-60(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2351
	.loc 1 5658 0
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L2349
.L2351:
	.loc 1 5659 0
	movl	-60(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2353
	.loc 1 5665 0
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_regno@PLT
	movl	%eax, -56(%ebp)
	.loc 1 5666 0
	movl	-56(%ebp), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -60(%ebp)
	jmp	.L2349
.L2353:
	.loc 1 5669 0
	leal	__FUNCTION__.21927@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5669, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2349:
	.loc 1 5674 0
	cmpl	$0, -60(%ebp)
	je	.L2355
	movl	-56(%ebp), %eax
	shrl	$6, %eax
	movl	4+reload_reg_used_at_all@GOTOFF(%ebx,%eax,8), %edx
	movl	reload_reg_used_at_all@GOTOFF(%ebx,%eax,8), %eax
	movl	-56(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2492
	movl	%edx, %eax
	xorl	%edx, %edx
.L2492:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2357
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %esi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %edi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -692(%ebp)
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %edx
	movl	$1, 28(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%ecx, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	-692(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	je	.L2359
.L2357:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	reg_class_contents@GOT(%ebx), %esi
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	4(%esi,%eax,8), %edx
	movl	(%esi,%eax,8), %eax
	movl	-56(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2491
	movl	%edx, %eax
	xorl	%edx, %edx
.L2491:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2355
.L2359:
	.loc 1 5681 0
	movl	$0, -60(%ebp)
.L2355:
	.loc 1 5683 0
	cmpl	$0, -60(%ebp)
	je	.L2360
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-56(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	jne	.L2360
	.loc 1 5684 0
	movl	$0, -60(%ebp)
.L2360:
	.loc 1 5691 0
	cmpl	$0, -60(%ebp)
	je	.L2363
	.loc 1 5692 0
	movl	$0, -148(%ebp)
	jmp	.L2365
.L2366:
	.loc 1 5693 0
	movl	-148(%ebp), %edx
	movl	reload_earlyclobbers@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_for_reload_p@PLT
	testl	%eax, %eax
	je	.L2367
	.loc 1 5696 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2369
	.loc 1 5697 0
	movl	-120(%ebp), %ecx
	movl	reload_override_in@GOT(%ebx), %edx
	movl	-60(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
.L2369:
	.loc 1 5698 0
	movl	$0, -60(%ebp)
	.loc 1 5699 0
	jmp	.L2363
.L2367:
	.loc 1 5692 0
	addl	$1, -148(%ebp)
.L2365:
	movl	n_earlyclobbers@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L2366
.L2363:
	.loc 1 5708 0
	cmpl	$0, -60(%ebp)
	je	.L2371
	.loc 1 5710 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-56(%ebp), %edx
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	regno_clobbered_p@PLT
	testl	%eax, %eax
	je	.L2373
	.loc 1 5711 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	movl	%eax, -688(%ebp)
	cmpl	$10, -688(%ebp)
	ja	.L2375
	movl	$1, %eax
	movl	%eax, %edx
	movzbl	-688(%ebp), %ecx
	sall	%cl, %edx
	movl	%edx, -752(%ebp)
	movl	-752(%ebp), %eax
	andl	$641, %eax
	testl	%eax, %eax
	jne	.L2376
	movl	-752(%ebp), %eax
	andl	$1304, %eax
	testl	%eax, %eax
	jne	.L2371
	jmp	.L2375
.L2376:
	.loc 1 5721 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2375
	.loc 1 5722 0
	movl	-120(%ebp), %ecx
	movl	reload_override_in@GOT(%ebx), %edx
	movl	-60(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
.L2375:
	.loc 1 5725 0
	movl	$0, -60(%ebp)
	jmp	.L2371
.L2373:
	.loc 1 5728 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	-56(%ebp), %edx
	movl	$1, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	regno_clobbered_p@PLT
	testl	%eax, %eax
	je	.L2371
	.loc 1 5729 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	movl	%eax, -684(%ebp)
	cmpl	$10, -684(%ebp)
	ja	.L2381
	movl	$1, %eax
	movl	%eax, %edx
	movzbl	-684(%ebp), %ecx
	sall	%cl, %edx
	movl	%edx, -756(%ebp)
	movl	-756(%ebp), %eax
	andl	$1433, %eax
	testl	%eax, %eax
	jne	.L2371
	movl	-756(%ebp), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L2383
	jmp	.L2381
.L2383:
	.loc 1 5739 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2381
	.loc 1 5740 0
	movl	-120(%ebp), %ecx
	movl	reload_override_in@GOT(%ebx), %edx
	movl	-60(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
.L2381:
	.loc 1 5743 0
	movl	$0, -60(%ebp)
.L2371:
	.loc 1 5750 0
	cmpl	$0, -60(%ebp)
	je	.L2347
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L2386
	movl	$17, -680(%ebp)
	jmp	.L2388
.L2386:
	movl	$30, -680(%ebp)
.L2388:
	movl	-680(%ebp), %ecx
	cmpl	-56(%ebp), %ecx
	jne	.L2389
	movl	frame_pointer_needed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2347
.L2389:
.LBB171:
	.loc 1 5754 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -52(%ebp)
	.loc 1 5756 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	leal	44(%eax), %edx
	movl	-60(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 5757 0
	movl	-120(%ebp), %edx
	movl	reload_inherited@GOT(%ebx), %eax
	movb	$1, (%eax,%edx)
	.loc 1 5763 0
	movl	-56(%ebp), %eax
	shrl	$6, %eax
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %eax
	movl	-56(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2490
	movl	%edx, %eax
	xorl	%edx, %edx
.L2490:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2391
	.loc 1 5764 0
	movl	-56(%ebp), %eax
	movl	$0, spill_reg_store@GOTOFF(%ebx,%eax,4)
.L2391:
	.loc 1 5767 0
	movl	$0, -48(%ebp)
	jmp	.L2393
.L2394:
	.loc 1 5769 0
	movl	-48(%ebp), %eax
	addl	-56(%ebp), %eax
	movzwl	spill_reg_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -148(%ebp)
	.loc 1 5770 0
	cmpl	$0, -148(%ebp)
	js	.L2395
	.loc 1 5772 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %esi
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	-56(%ebp), %edx
	movl	%esi, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mark_reload_reg_in_use
	.loc 1 5775 0
	movl	-48(%ebp), %eax
	addl	-56(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -676(%ebp)
	movl	reload_reg_used_for_inherit@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reload_reg_used_for_inherit@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -672(%ebp)
	movl	%ecx, -668(%ebp)
	movl	-48(%ebp), %eax
	addl	-56(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2489
	movl	%esi, %edi
	xorl	%esi, %esi
.L2489:
	movl	-672(%ebp), %eax
	orl	%esi, %eax
	movl	-668(%ebp), %edx
	orl	%edi, %edx
	movl	-676(%ebp), %ecx
	movl	%eax, reload_reg_used_for_inherit@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reload_reg_used_for_inherit@GOTOFF(%ebx,%ecx,8)
.L2395:
	.loc 1 5767 0
	addl	$1, -48(%ebp)
.L2393:
	movl	-48(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jl	.L2394
.L2347:
.L2233:
.LBE171:
.LBE170:
.LBE163:
	.loc 1 5376 0
	addl	$1, -144(%ebp)
.L2228:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2229
	.loc 1 5825 0
	movl	$0, -144(%ebp)
	jmp	.L2399
.L2400:
.LBB172:
	.loc 1 5827 0
	movl	-144(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -44(%ebp)
	.loc 1 5830 0
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2401
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	jne	.L2401
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	testb	%al, %al
	je	.L2404
.L2401:
	.loc 1 5835 0
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2404
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2404
	.loc 1 5838 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	cmpl	-144(%ebp), %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	allocate_reload_reg
	testl	%eax, %eax
	je	.L2407
.L2404:
.LBE172:
	.loc 1 5825 0
	addl	$1, -144(%ebp)
.L2399:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2400
.L2407:
	.loc 1 5843 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jne	.L2408
	.loc 1 5845 0
	movl	$1, -128(%ebp)
	.loc 1 5846 0
	jmp	.L2410
.L2408:
	.loc 1 5354 0
	subl	$1, -124(%ebp)
.L2226:
	cmpl	$0, -124(%ebp)
	jns	.L2227
.L2410:
	.loc 1 5852 0
	cmpl	$0, -128(%ebp)
	jne	.L2411
	.loc 1 5856 0
	leal	-632(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	choose_reload_regs_init
	.loc 1 5860 0
	movl	8(%ebp), %eax
	movl	56(%eax), %edx
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L2413
	.loc 1 5861 0
	leal	__FUNCTION__.21927@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5861, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2413:
	.loc 1 5863 0
	movl	$0, -148(%ebp)
	jmp	.L2415
.L2416:
	.loc 1 5865 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-148(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	40(%eax), %eax
	testl	%eax, %eax
	js	.L2417
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-148(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	44(%eax), %eax
	testl	%eax, %eax
	jne	.L2417
	.loc 1 5867 0
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-148(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	68(%eax), %ecx
	movl	-148(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	je	.L2420
	.loc 1 5868 0
	leal	__FUNCTION__.21927@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5868, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2420:
	.loc 1 5869 0
	movl	$0, -144(%ebp)
	jmp	.L2422
.L2423:
	.loc 1 5870 0
	movl	-144(%ebp), %eax
	movzwl	spill_regs@GOTOFF(%ebx,%eax,2), %eax
	movswl	%ax,%ecx
	movl	8(%ebp), %eax
	movl	52(%eax), %edx
	movl	-148(%ebp), %eax
	imull	$76, %eax, %eax
	leal	(%edx,%eax), %eax
	movl	40(%eax), %eax
	cmpl	%eax, %ecx
	jne	.L2424
	.loc 1 5871 0
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	set_reload_reg
	testl	%eax, %eax
	jne	.L2424
	.loc 1 5872 0
	movl	8(%ebp), %eax
	movl	16(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	failed_reload
.L2424:
	.loc 1 5869 0
	addl	$1, -144(%ebp)
.L2422:
	movl	n_spills@GOTOFF(%ebx), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2423
.L2417:
	.loc 1 5863 0
	addl	$1, -148(%ebp)
.L2415:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L2416
.L2411:
	.loc 1 5884 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -132(%ebp)
	jmp	.L2427
.L2428:
	.loc 1 5886 0
	movl	$0, -144(%ebp)
	jmp	.L2429
.L2430:
.LBB173:
	.loc 1 5888 0
	movl	-144(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -40(%ebp)
	.loc 1 5890 0
	movl	-40(%ebp), %edx
	movl	reload_inherited@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	je	.L2431
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2431
	.loc 1 5891 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 5890 0
	jmp	.L2434
.L2431:
	.loc 1 5892 0
	movl	-40(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2435
	movl	-40(%ebp), %edx
	movl	reload_override_in@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2437
	movl	-40(%ebp), %edx
	movl	reload_override_in@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2435
.L2437:
	.loc 1 5895 0
	movl	-40(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -36(%ebp)
.L2434:
	.loc 1 5898 0
	movl	-40(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L2439
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, -664(%ebp)
	jmp	.L2441
.L2439:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -664(%ebp)
.L2441:
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %esi
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %edi
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -660(%ebp)
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, -656(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, %edx
	movl	$1, 28(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-664(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	-660(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-656(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	jne	.L2442
	.loc 1 5904 0
	cmpl	$0, -132(%ebp)
	jne	.L2435
	.loc 1 5906 0
	movl	-40(%ebp), %edx
	movl	reload_inherited@GOT(%ebx), %eax
	movb	$0, (%eax,%edx)
	.loc 1 5907 0
	movl	-40(%ebp), %edx
	movl	reload_override_in@GOT(%ebx), %eax
	movl	$0, (%eax,%edx,4)
	jmp	.L2435
.L2442:
	.loc 1 5921 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2435
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %ecx
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	cmpl	%eax, %ecx
	je	.L2435
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%eax, (%esp)
	call	remove_address_replacements@PLT
	testl	%eax, %eax
	je	.L2435
	cmpl	$0, -132(%ebp)
	je	.L2435
	.loc 1 5924 0
	movl	$2, -132(%ebp)
.L2435:
.LBE173:
	.loc 1 5886 0
	addl	$1, -144(%ebp)
.L2429:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2430
	.loc 1 5884 0
	subl	$1, -132(%ebp)
.L2427:
	cmpl	$0, -132(%ebp)
	jns	.L2428
	.loc 1 5930 0
	movl	$0, -144(%ebp)
	jmp	.L2451
.L2452:
	.loc 1 5931 0
	movl	-144(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2453
	.loc 1 5932 0
	movl	-144(%ebp), %esi
	movl	-144(%ebp), %edx
	movl	reload_override_in@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	rld@GOT(%ebx), %edx
	imull	$76, %esi, %eax
	movl	%ecx, (%eax,%edx)
.L2453:
	.loc 1 5930 0
	addl	$1, -144(%ebp)
.L2451:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2452
	.loc 1 5937 0
	movl	$0, -144(%ebp)
	jmp	.L2456
.L2457:
	.loc 1 5938 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2458
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L2460
	movl	-144(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L2462
.L2460:
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	jne	.L2458
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2458
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movzbl	8(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	testb	%al, %al
	jne	.L2458
.L2462:
.LBB174:
	.loc 1 5943 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -32(%ebp)
	.loc 1 5945 0
	movl	-32(%ebp), %eax
	movzwl	spill_reg_order@GOTOFF(%ebx,%eax,2), %eax
	testw	%ax, %ax
	js	.L2465
	.loc 1 5946 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %esi
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	-32(%ebp), %edx
	movl	%esi, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	clear_reload_reg_in_use
.L2465:
	.loc 1 5948 0
	movl	-144(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	$0, (%eax)
	.loc 1 5949 0
	movl	-144(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	$-1, (%eax,%edx,4)
.L2458:
.LBE174:
	.loc 1 5937 0
	addl	$1, -144(%ebp)
.L2456:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2457
	.loc 1 5953 0
	movl	$0, -144(%ebp)
	jmp	.L2468
.L2469:
.LBB175:
	.loc 1 5955 0
	movl	-144(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -28(%ebp)
	.loc 1 5957 0
	movl	-28(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -148(%ebp)
	.loc 1 5962 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2470
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2470
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2470
.LBB176:
	.loc 1 5965 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5966 0
	movl	$1, -20(%ebp)
	.loc 1 5968 0
	cmpl	$175, -24(%ebp)
	jg	.L2476
	.loc 1 5969 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -20(%ebp)
	.loc 1 5971 0
	jmp	.L2476
.L2477:
	.loc 1 5972 0
	movl	-20(%ebp), %eax
	addl	-24(%ebp), %eax
	movl	%eax, %edx
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movb	$1, (%eax)
.L2476:
	.loc 1 5971 0
	subl	$1, -20(%ebp)
	cmpl	$0, -20(%ebp)
	jns	.L2477
	.loc 1 5974 0
	cmpl	$0, -148(%ebp)
	js	.L2479
	.loc 1 5976 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -20(%ebp)
	.loc 1 5977 0
	jmp	.L2481
.L2482:
	.loc 1 5978 0
	movl	-20(%ebp), %eax
	addl	-148(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -652(%ebp)
	movl	reg_is_output_reload@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_is_output_reload@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -648(%ebp)
	movl	%ecx, -644(%ebp)
	movl	-20(%ebp), %eax
	addl	-148(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2488
	movl	%esi, %edi
	xorl	%esi, %esi
.L2488:
	movl	-648(%ebp), %eax
	orl	%esi, %eax
	movl	-644(%ebp), %edx
	orl	%edi, %edx
	movl	-652(%ebp), %ecx
	movl	%eax, reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
.L2481:
	.loc 1 5977 0
	subl	$1, -20(%ebp)
	cmpl	$0, -20(%ebp)
	jns	.L2482
.L2479:
	.loc 1 5981 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$9, %eax
	je	.L2470
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L2470
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L2470
	.loc 1 5984 0
	leal	__FUNCTION__.21927@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5984, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2470:
.LBE176:
.LBE175:
	.loc 1 5953 0
	addl	$1, -144(%ebp)
.L2468:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -144(%ebp)
	jl	.L2469
	.loc 1 5987 0
	addl	$780, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE66:
	.size	choose_reload_regs, .-choose_reload_regs
.globl deallocate_reload_reg
	.type	deallocate_reload_reg, @function
deallocate_reload_reg:
.LFB67:
	.loc 1 5995 0
	pushl	%ebp
.LCFI253:
	movl	%esp, %ebp
.LCFI254:
	pushl	%esi
.LCFI255:
	pushl	%ebx
.LCFI256:
	subl	$32, %esp
.LCFI257:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5998 0
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2506
	.loc 1 6000 0
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -12(%ebp)
	.loc 1 6001 0
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	$0, (%eax)
	.loc 1 6002 0
	movl	-12(%ebp), %eax
	movzwl	spill_reg_order@GOTOFF(%ebx,%eax,2), %eax
	testw	%ax, %ax
	js	.L2504
	.loc 1 6003 0
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %esi
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	-12(%ebp), %edx
	movl	%esi, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	clear_reload_reg_in_use
.L2504:
	.loc 1 6005 0
	movl	8(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	$-1, (%eax,%edx,4)
.L2506:
	.loc 1 6006 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE67:
	.size	deallocate_reload_reg, .-deallocate_reload_reg
	.section	.rodata
	.type	__FUNCTION__.22953, @object
	.size	__FUNCTION__.22953, 23
__FUNCTION__.22953:
	.string	"merge_assigned_reloads"
	.text
	.type	merge_assigned_reloads, @function
merge_assigned_reloads:
.LFB68:
	.loc 1 6024 0
	pushl	%ebp
.LCFI258:
	movl	%esp, %ebp
.LCFI259:
	pushl	%ebx
.LCFI260:
	subl	$52, %esp
.LCFI261:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6031 0
	movl	$0, -28(%ebp)
	jmp	.L2508
.L2509:
.LBB177:
	.loc 1 6033 0
	movl	$0, -20(%ebp)
	.loc 1 6034 0
	movl	$-1, -16(%ebp)
	.loc 1 6035 0
	movl	$30, -12(%ebp)
	.loc 1 6037 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2510
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$9, %eax
	je	.L2510
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2510
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2510
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L2510
	.loc 1 6048 0
	movl	$0, -24(%ebp)
	jmp	.L2516
.L2517:
	.loc 1 6050 0
	movl	-28(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L2518
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2518
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L2518
	.loc 1 6055 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L2522
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	-16(%ebp), %eax
	jle	.L2522
	.loc 1 6057 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
.L2522:
	.loc 1 6064 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2525
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2525
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2525
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2518
.L2525:
	.loc 1 6068 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2529
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L2531
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %ecx
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	jle	.L2533
.L2531:
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$10, %eax
	jne	.L2529
.L2533:
	.loc 1 6073 0
	movl	$1, -20(%ebp)
	.loc 1 6074 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	-12(%ebp), %eax
	jge	.L2518
	.loc 1 6075 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
.L2518:
	.loc 1 6048 0
	addl	$1, -24(%ebp)
.L2516:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -24(%ebp)
	jl	.L2517
.L2529:
	.loc 1 6082 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -24(%ebp)
	jne	.L2510
	movl	-16(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jg	.L2510
	.loc 1 6085 0
	movl	$0, -24(%ebp)
	jmp	.L2537
.L2538:
	.loc 1 6086 0
	movl	-28(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L2539
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2539
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2539
	cmpl	$0, -20(%ebp)
	je	.L2543
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	je	.L2543
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$10, %eax
	jne	.L2539
.L2543:
	.loc 1 6092 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	$9, (%eax)
	.loc 1 6093 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	$0, (%eax,%edx)
	.loc 1 6094 0
	movl	-24(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	$-1, (%eax,%edx,4)
	.loc 1 6095 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	transfer_replacements@PLT
.L2539:
	.loc 1 6085 0
	addl	$1, -24(%ebp)
.L2537:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -24(%ebp)
	jl	.L2538
	.loc 1 6108 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$9, %eax
	jne	.L2510
	.loc 1 6109 0
	movl	$0, -24(%ebp)
	jmp	.L2548
.L2549:
	.loc 1 6110 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2550
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$9, %eax
	je	.L2550
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$10, %eax
	je	.L2550
	cmpl	$0, -20(%ebp)
	je	.L2554
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	je	.L2554
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	jne	.L2550
.L2554:
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %ecx
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_for_reload_p@PLT
	testl	%eax, %eax
	je	.L2550
.LBB178:
	.loc 1 6121 0
	movl	-24(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	je	.L2558
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	jne	.L2560
.L2558:
	movl	$10, -40(%ebp)
	jmp	.L2561
.L2560:
	movl	$9, -40(%ebp)
.L2561:
	movl	rld@GOT(%ebx), %edx
	imull	$76, -44(%ebp), %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	-40(%ebp), %edx
	movl	%edx, (%eax)
	.loc 1 6130 0
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2550
	.loc 1 6131 0
	movl	$0, -8(%ebp)
	jmp	.L2563
.L2564:
	.loc 1 6132 0
	movl	-8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2565
	movl	-8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2565
	movl	-8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	jne	.L2565
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %ecx
	movl	-8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2565
	movl	-24(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %ecx
	movl	-8(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2565
	.loc 1 6136 0
	leal	__FUNCTION__.22953@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6136, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2565:
	.loc 1 6131 0
	addl	$1, -8(%ebp)
.L2563:
	movl	-8(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jl	.L2564
.L2550:
.LBE178:
	.loc 1 6109 0
	addl	$1, -24(%ebp)
.L2548:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -24(%ebp)
	jl	.L2549
.L2510:
.LBE177:
	.loc 1 6031 0
	addl	$1, -28(%ebp)
.L2508:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -28(%ebp)
	jl	.L2509
	.loc 1 6140 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE68:
	.size	merge_assigned_reloads, .-merge_assigned_reloads
	.local	other_input_address_reload_insns
	.comm	other_input_address_reload_insns,4,4
	.local	other_input_reload_insns
	.comm	other_input_reload_insns,4,4
	.local	operand_reload_insns
	.comm	operand_reload_insns,4,4
	.local	other_operand_reload_insns
	.comm	other_operand_reload_insns,4,4
	.section	.rodata
	.type	__FUNCTION__.23183, @object
	.size	__FUNCTION__.23183, 24
__FUNCTION__.23183:
	.string	"emit_input_reload_insns"
	.text
	.type	emit_input_reload_insns, @function
emit_input_reload_insns:
.LFB69:
	.loc 1 6168 0
	pushl	%ebp
.LCFI262:
	movl	%esp, %ebp
.LCFI263:
	pushl	%edi
.LCFI264:
	pushl	%esi
.LCFI265:
	pushl	%ebx
.LCFI266:
	subl	$172, %esp
.LCFI267:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6169 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 6170 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -96(%ebp)
	.loc 1 6171 0
	movl	$0, -92(%ebp)
	.loc 1 6172 0
	movl	$0, -88(%ebp)
	.loc 1 6173 0
	movl	$0, -84(%ebp)
	.loc 1 6209 0
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	.loc 1 6210 0
	cmpl	$0, -80(%ebp)
	jne	.L2574
	.loc 1 6211 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -80(%ebp)
.L2574:
	.loc 1 6219 0
	movl	12(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L2576
	movl	12(%ebp), %eax
	movl	60(%eax), %eax
	cmpl	$529, %eax
	jne	.L2576
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2576
	.loc 1 6222 0
	movl	12(%ebp), %eax
	movl	52(%eax), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$-1, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_equiv_reg@PLT
	movl	%eax, -88(%ebp)
.L2576:
	.loc 1 6236 0
	cmpl	$0, -88(%ebp)
	jne	.L2580
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2580
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2583
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2580
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2580
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movzwl	(%eax), %eax
	testw	%ax, %ax
	jns	.L2580
.L2583:
	.loc 1 6241 0
	movl	-80(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$-1, 12(%esp)
	movl	$24, 8(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_equiv_reg@PLT
	movl	%eax, -88(%ebp)
.L2580:
	.loc 1 6243 0
	cmpl	$0, -88(%ebp)
	je	.L2587
.LBB179:
	.loc 1 6245 0
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -72(%ebp)
	.loc 1 6249 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edi
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -140(%ebp)
	movl	12(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -136(%ebp)
	movl	12(%ebp), %eax
	movl	48(%eax), %edx
	movl	12(%ebp), %eax
	movl	20(%eax), %ecx
	movl	-72(%ebp), %esi
	movl	$0, 28(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%edi, 20(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%esi, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	jne	.L2589
	.loc 1 6251 0
	movl	$0, -88(%ebp)
.L2589:
	.loc 1 6258 0
	cmpl	$0, -88(%ebp)
	je	.L2587
	movl	-72(%ebp), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	12(%ebp), %eax
	movl	8(%eax), %eax
	cmpl	%eax, %edx
	je	.L2592
	movl	12(%ebp), %eax
	movl	8(%eax), %ecx
	movl	-72(%ebp), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_register_move_cost@PLT
	movl	%eax, -132(%ebp)
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L2594
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L2596
.L2594:
	movl	$6, -128(%ebp)
	jmp	.L2597
.L2596:
	movl	$4, -128(%ebp)
.L2597:
	movl	12(%ebp), %eax
	movl	8(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_move_secondary_cost@PLT
	addl	-128(%ebp), %eax
	cmpl	%eax, -132(%ebp)
	jge	.L2598
.L2592:
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	$1, 12(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_secondary_reload_class@PLT
	testl	%eax, %eax
	je	.L2587
.L2598:
	.loc 1 6274 0
	movl	$0, -88(%ebp)
.L2587:
.LBE179:
	.loc 1 6281 0
	cmpl	$0, -88(%ebp)
	jne	.L2599
	movl	20(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2599
	movl	12(%ebp), %eax
	movl	32(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2599
	.loc 1 6285 0
	movl	16(%ebp), %eax
	movl	%eax, -88(%ebp)
	.loc 1 6286 0
	movl	12(%ebp), %eax
	movl	32(%eax), %eax
	movl	%eax, 16(%ebp)
.L2599:
	.loc 1 6288 0
	cmpl	$0, -88(%ebp)
	jne	.L2603
	.loc 1 6289 0
	movl	16(%ebp), %eax
	movl	%eax, -88(%ebp)
	jmp	.L2605
.L2603:
	.loc 1 6290 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2606
	.loc 1 6291 0
	movl	-88(%ebp), %eax
	movl	%eax, -92(%ebp)
	jmp	.L2605
.L2606:
	.loc 1 6292 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2605
	.loc 1 6293 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
.L2605:
	.loc 1 6299 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2609
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2609
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2609
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2609
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2609
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L2615
	movl	12(%ebp), %eax
	movl	36(%eax), %edx
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2609
.L2615:
	.loc 1 6306 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_output_reload
.L2609:
	.loc 1 6314 0
	movl	-96(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-80(%ebp), %eax
	je	.L2619
	.loc 1 6315 0
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -96(%ebp)
	.loc 1 6316 0
	jmp	.L2619
.L2620:
	.loc 1 6317 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L2619:
	.loc 1 6316 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2621
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-80(%ebp), %eax
	jne	.L2620
.L2621:
	.loc 1 6318 0
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L2623
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-80(%ebp), %eax
	je	.L2623
	.loc 1 6320 0
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_SUBREG@PLT
	movl	%eax, -88(%ebp)
.L2623:
	.loc 1 6323 0
	movl	12(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -124(%ebp)
	cmpl	$10, -124(%ebp)
	ja	.L2626
	movl	-124(%ebp), %eax
	sall	$2, %eax
	movl	.L2636@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2636:
	.long	.L2627@GOTOFF
	.long	.L2626@GOTOFF
	.long	.L2626@GOTOFF
	.long	.L2628@GOTOFF
	.long	.L2629@GOTOFF
	.long	.L2630@GOTOFF
	.long	.L2631@GOTOFF
	.long	.L2632@GOTOFF
	.long	.L2633@GOTOFF
	.long	.L2634@GOTOFF
	.long	.L2635@GOTOFF
	.text
.L2634:
	.loc 1 6326 0
	leal	other_input_reload_insns@GOTOFF(%ebx), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6327 0
	jmp	.L2637
.L2627:
	.loc 1 6329 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	leal	input_reload_insns@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6330 0
	jmp	.L2637
.L2628:
	.loc 1 6332 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	leal	input_address_reload_insns@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6333 0
	jmp	.L2637
.L2629:
	.loc 1 6335 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	leal	inpaddr_address_reload_insns@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6336 0
	jmp	.L2637
.L2630:
	.loc 1 6338 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	leal	output_address_reload_insns@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6339 0
	jmp	.L2637
.L2631:
	.loc 1 6341 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	leal	outaddr_address_reload_insns@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6342 0
	jmp	.L2637
.L2632:
	.loc 1 6344 0
	leal	operand_reload_insns@GOTOFF(%ebx), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6345 0
	jmp	.L2637
.L2633:
	.loc 1 6347 0
	leal	other_operand_reload_insns@GOTOFF(%ebx), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6348 0
	jmp	.L2637
.L2635:
	.loc 1 6350 0
	leal	other_input_address_reload_insns@GOTOFF(%ebx), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6351 0
	jmp	.L2637
.L2626:
	.loc 1 6353 0
	leal	__FUNCTION__.23183@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6353, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2637:
	.loc 1 6356 0
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	push_to_sequence@PLT
	.loc 1 6359 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L2638
	movl	12(%ebp), %eax
	movl	36(%eax), %eax
	testl	%eax, %eax
	jne	.L2638
	.loc 1 6364 0
	movl	12(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L2641
	.loc 1 6365 0
	leal	__FUNCTION__.23183@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6365, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2641:
	.loc 1 6367 0
	movl	20(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L2643
	.loc 1 6368 0
	movl	-96(%ebp), %eax
	movl	%eax, -88(%ebp)
.L2643:
	.loc 1 6370 0
	movl	12(%ebp), %eax
	movl	32(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 16(%ebp)
	.loc 1 6372 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2645
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2645
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2645
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2645
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2645
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L2651
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %edx
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2645
.L2651:
	.loc 1 6380 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_output_reload
.L2645:
	.loc 1 6383 0
	movl	$1, -84(%ebp)
	.loc 1 6385 0
	movl	-96(%ebp), %eax
	movl	4(%eax), %esi
	movl	12(%ebp), %eax
	movl	28(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	inc_for_reload
	movl	%eax, new_spill_reg_store@GOTOFF(%ebx,%esi,4)
	.loc 1 6359 0
	jmp	.L2653
.L2638:
	.loc 1 6394 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2653
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2653
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2653
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	je	.L2653
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	conflicts_with_override
	testl	%eax, %eax
	jne	.L2653
	movl	12(%ebp), %eax
	movl	4(%eax), %ecx
	movl	12(%ebp), %eax
	movl	68(%eax), %esi
	movl	12(%ebp), %eax
	movl	48(%eax), %edi
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -120(%ebp)
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	$0, 28(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%ecx, 20(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	free_for_value_p
	testl	%eax, %eax
	je	.L2653
.LBB180:
	.loc 1 6403 0
	movl	-100(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 6404 0
	jmp	.L2660
.L2661:
	.loc 1 6405 0
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -68(%ebp)
.L2660:
	.loc 1 6404 0
	cmpl	$0, -68(%ebp)
	je	.L2662
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L2661
.L2662:
	.loc 1 6406 0
	cmpl	$0, -68(%ebp)
	je	.L2653
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L2653
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2653
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	cmpl	16(%ebp), %eax
	jne	.L2653
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L2653
	movl	-100(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	count_occurrences@PLT
	cmpl	$1, %eax
	jne	.L2653
.LBB181:
	.loc 1 6416 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 6418 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %edx
	movl	-96(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 6421 0
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	.loc 1 6422 0
	movl	$1, (%esp)
	call	constrain_operands@PLT
	testl	%eax, %eax
	je	.L2670
	.loc 1 6428 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2672
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2672
	.loc 1 6431 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, spill_reg_store@GOTOFF(%ebx,%eax,4)
	.loc 1 6432 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, spill_reg_stored_to@GOTOFF(%ebx,%eax,4)
.L2672:
	.loc 1 6437 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	24(%eax), %eax
	cmpl	$1, %eax
	jne	.L2675
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L2675
	.loc 1 6440 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	addl	%eax, %edx
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movw	%ax, (%edx)
	.loc 1 6441 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	$-1, 4(%esp)
	movl	%eax, (%esp)
	call	alter_reg
.L2675:
	.loc 1 6443 0
	movl	$1, -84(%ebp)
	jmp	.L2653
.L2670:
	.loc 1 6447 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%eax, 4(%edx)
.L2653:
.LBE181:
.LBE180:
	.loc 1 6466 0
	cmpl	$0, -84(%ebp)
	jne	.L2678
	movl	12(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L2678
.LBB182:
	.loc 1 6468 0
	movl	$0, -60(%ebp)
	.loc 1 6469 0
	movl	12(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 6470 0
	movl	-88(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 6471 0
	movl	16(%ebp), %eax
	movl	%eax, -48(%ebp)
	.loc 1 6488 0
	movl	-88(%ebp), %eax
	movl	%eax, -44(%ebp)
	.loc 1 6489 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2681
	.loc 1 6490 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L2681:
	.loc 1 6491 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2683
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2683
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2686
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2683
.L2686:
	.loc 1 6496 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2688
	movl	num_not_at_initial_offset@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2688
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2691
.L2688:
	.loc 1 6499 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 6496 0
	jmp	.L2683
.L2691:
	.loc 1 6501 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
.L2683:
	.loc 1 6504 0
	movl	16(%ebp), %eax
	movl	%eax, -44(%ebp)
	.loc 1 6505 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2692
	.loc 1 6506 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L2692:
	.loc 1 6507 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2694
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2694
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2697
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2694
.L2697:
	.loc 1 6512 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2699
	movl	num_not_at_initial_offset@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2699
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2702
.L2699:
	.loc 1 6515 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 6512 0
	jmp	.L2694
.L2702:
	.loc 1 6517 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
.L2694:
	.loc 1 6520 0
	movl	-56(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 6521 0
	movl	12(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 6523 0
	movl	16(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L2703
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2705
.L2703:
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2706
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L2706
.L2705:
.LBB183:
	.loc 1 6527 0
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	$1, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_secondary_reload_class@PLT
	movl	%eax, -36(%ebp)
	.loc 1 6530 0
	cmpl	$0, -36(%ebp)
	jne	.L2708
	.loc 1 6531 0
	movl	$0, -60(%ebp)
	jmp	.L2706
.L2708:
.LBB184:
	.loc 1 6537 0
	movl	-36(%ebp), %edx
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	reg_class_contents@GOT(%ebx), %esi
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	4(%esi,%eax,8), %edi
	movl	(%esi,%eax,8), %esi
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2772
	movl	%edx, %eax
	xorl	%edx, %edx
.L2772:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2710
	.loc 1 6539 0
	movl	16(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L2706
.L2710:
	.loc 1 6542 0
	movl	-80(%ebp), %eax
	movl	reload_in_optab@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -32(%ebp)
	.loc 1 6543 0
	cmpl	$529, -32(%ebp)
	je	.L2712
	movl	-32(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2714
	movl	-32(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L2716
.L2714:
	movl	-32(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2712
	movl	-32(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L2712
.L2716:
	.loc 1 6550 0
	movl	$529, -32(%ebp)
.L2712:
	.loc 1 6552 0
	cmpl	$529, -32(%ebp)
	jne	.L2718
	.loc 1 6553 0
	movl	-80(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2720
.L2718:
	.loc 1 6555 0
	movl	-32(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movzwl	8(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -28(%ebp)
.L2720:
	.loc 1 6557 0
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-28(%ebp), %eax
	je	.L2706
	.loc 1 6559 0
	movl	-28(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	4(%eax), %esi
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %ecx, %eax
	addl	%edx, %eax
	movzbl	(%eax,%esi), %eax
	testb	%al, %al
	jne	.L2722
	.loc 1 6561 0
	movl	16(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L2706
.L2722:
	.loc 1 6563 0
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -60(%ebp)
.L2706:
.LBE184:
.LBE183:
	.loc 1 6578 0
	cmpl	$0, -60(%ebp)
	je	.L2678
	.loc 1 6580 0
	cmpl	$529, -40(%ebp)
	je	.L2725
	.loc 1 6582 0
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 6584 0
	movl	$1, -84(%ebp)
	jmp	.L2678
.L2725:
.LBB185:
	.loc 1 6591 0
	movl	-56(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$60, %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 6593 0
	cmpl	$529, -24(%ebp)
	je	.L2727
.LBB186:
	.loc 1 6596 0
	movl	-56(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$52, %eax
	movl	(%eax), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 6598 0
	movl	-24(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
	jmp	.L2729
.L2727:
.LBE186:
	.loc 1 6603 0
	movl	12(%ebp), %eax
	movl	68(%eax), %edx
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
.L2729:
	.loc 1 6607 0
	movl	-60(%ebp), %eax
	movl	%eax, -88(%ebp)
.L2678:
.LBE185:
.LBE182:
	.loc 1 6613 0
	cmpl	$0, -84(%ebp)
	jne	.L2730
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2730
.LBB187:
	.loc 1 6615 0
	movl	-88(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 6617 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2733
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2733
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2736
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2736
.L2733:
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2738
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2738
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2738
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2736
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_constant@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2736
.L2738:
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2743
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L2751
.L2743:
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$24, %eax
	je	.L2752
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L2754
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	testl	%eax, %eax
	je	.L2736
	jmp	.L2751
.L2754:
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$5, %eax
	je	.L2756
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	testl	%eax, %eax
	jne	.L2756
	movl	$1, -116(%ebp)
	jmp	.L2759
.L2756:
	movl	$0, -116(%ebp)
.L2759:
	movzbl	-116(%ebp), %eax
	testb	%al, %al
	jne	.L2736
	jmp	.L2751
.L2752:
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L2760
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L2760
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L2760
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L2760
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	testl	%eax, %eax
	jne	.L2760
	movl	$1, -112(%ebp)
	jmp	.L2766
.L2760:
	movl	$0, -112(%ebp)
.L2766:
	movzbl	-112(%ebp), %eax
	testb	%al, %al
	je	.L2751
.L2736:
	.loc 1 6633 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
.L2751:
	.loc 1 6634 0
	movl	12(%ebp), %eax
	movl	68(%eax), %edx
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
.L2730:
.LBE187:
	.loc 1 6638 0
	movl	flag_non_call_exceptions@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2767
	.loc 1 6639 0
	call	get_insns@PLT
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_eh_notes
.L2767:
	.loc 1 6642 0
	call	get_insns@PLT
	movl	%eax, %edx
	movl	-76(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 6643 0
	call	end_sequence@PLT
	.loc 1 6647 0
	cmpl	$0, -92(%ebp)
	je	.L2771
	.loc 1 6648 0
	movl	20(%ebp), %ecx
	movl	reload_override_in@GOT(%ebx), %edx
	movl	-88(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
.L2771:
	.loc 1 6649 0
	addl	$172, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE69:
	.size	emit_input_reload_insns, .-emit_input_reload_insns
	.section	.rodata
	.type	__FUNCTION__.23803, @object
	.size	__FUNCTION__.23803, 25
__FUNCTION__.23803:
	.string	"emit_output_reload_insns"
.LC39:
	.string	"VOIDmode on an output"
	.align 4
.LC40:
	.string	"output operand is constant in `asm'"
	.text
	.type	emit_output_reload_insns, @function
emit_output_reload_insns:
.LFB70:
	.loc 1 6658 0
	pushl	%ebp
.LCFI268:
	movl	%esp, %ebp
.LCFI269:
	pushl	%edi
.LCFI270:
	pushl	%esi
.LCFI271:
	pushl	%ebx
.LCFI272:
	subl	$188, %esp
.LCFI273:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6659 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 6660 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -88(%ebp)
	.loc 1 6661 0
	movl	$0, -84(%ebp)
	.loc 1 6662 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	.loc 1 6663 0
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -76(%ebp)
	.loc 1 6666 0
	movl	12(%ebp), %eax
	movl	68(%eax), %eax
	cmpl	$9, %eax
	jne	.L2774
	.loc 1 6667 0
	call	start_sequence@PLT
	jmp	.L2776
.L2774:
	.loc 1 6669 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	output_reload_insns@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, (%esp)
	call	push_to_sequence@PLT
.L2776:
	.loc 1 6674 0
	cmpl	$0, -76(%ebp)
	jne	.L2777
	.loc 1 6677 0
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L2779
	.loc 1 6679 0
	leal	__FUNCTION__.23803@GOTOFF(%ebx), %eax
	movl	%eax, 16(%esp)
	movl	$6679, 12(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	.LC39@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	_fatal_insn@PLT
.L2779:
	.loc 1 6680 0
	leal	.LC40@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	error_for_asm@PLT
	.loc 1 6682 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 6683 0
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -80(%ebp)
.L2777:
	.loc 1 6686 0
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-76(%ebp), %eax
	je	.L2781
	.loc 1 6687 0
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -92(%ebp)
.L2781:
	.loc 1 6695 0
	movl	12(%ebp), %eax
	movl	56(%eax), %eax
	testl	%eax, %eax
	js	.L2783
.LBB188:
	.loc 1 6697 0
	movl	-80(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 6699 0
	movl	-80(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2785
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2785
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2785
	.loc 1 6701 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
.L2785:
	.loc 1 6703 0
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	$0, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_secondary_reload_class@PLT
	testl	%eax, %eax
	je	.L2783
.LBB189:
	.loc 1 6707 0
	movl	-92(%ebp), %eax
	movl	%eax, -64(%ebp)
	.loc 1 6708 0
	movl	12(%ebp), %eax
	movl	56(%eax), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 6712 0
	movl	12(%ebp), %eax
	movl	64(%eax), %eax
	cmpl	$529, %eax
	je	.L2790
	.loc 1 6714 0
	movl	12(%ebp), %eax
	movl	64(%eax), %eax
	movl	%eax, %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 6716 0
	movl	$1, -84(%ebp)
	jmp	.L2783
.L2790:
.LBB190:
	.loc 1 6723 0
	movl	12(%ebp), %eax
	movl	56(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 6725 0
	movl	-60(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$64, %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 6727 0
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-76(%ebp), %eax
	je	.L2792
	.loc 1 6728 0
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -92(%ebp)
.L2792:
	.loc 1 6730 0
	cmpl	$529, -56(%ebp)
	je	.L2794
.LBB191:
	.loc 1 6733 0
	movl	-60(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$56, %eax
	movl	(%eax), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 6743 0
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2796
	movl	-68(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L2796
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	je	.L2796
	.loc 1 6749 0
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -92(%ebp)
.L2796:
	.loc 1 6751 0
	movl	12(%ebp), %eax
	movl	68(%eax), %edx
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
	.loc 1 6753 0
	movl	-56(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 6755 0
	movl	$1, -84(%ebp)
	jmp	.L2783
.L2794:
.LBE191:
	.loc 1 6762 0
	movl	12(%ebp), %eax
	movl	68(%eax), %edx
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
.L2783:
.LBE190:
.LBE189:
.LBE188:
	.loc 1 6770 0
	cmpl	$0, -84(%ebp)
	jne	.L2800
.LBB192:
	.loc 1 6776 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2802
	movl	-80(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2802
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L2805
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2807
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -168(%ebp)
	jmp	.L2809
.L2807:
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -168(%ebp)
.L2809:
	movl	-168(%ebp), %eax
	movl	%eax, -172(%ebp)
	jmp	.L2810
.L2805:
	movl	$0, -172(%ebp)
.L2810:
	movl	-172(%ebp), %edx
	movl	%edx, -44(%ebp)
	cmpl	$0, -44(%ebp)
	je	.L2802
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2802
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L2802
	movl	12(%ebp), %eax
	movl	20(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %ecx
	movl	$0, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	regno_clobbered_p@PLT
	testl	%eax, %eax
	jne	.L2800
.L2802:
	.loc 1 6782 0
	movl	12(%ebp), %eax
	movl	68(%eax), %edx
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
.L2800:
.LBE192:
	.loc 1 6787 0
	call	get_insns@PLT
	movl	%eax, -72(%ebp)
	jmp	.L2814
.L2815:
	.loc 1 6788 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L2816
.LBB193:
	.loc 1 6790 0
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 6796 0
	movl	$0, 8(%esp)
	leal	forget_old_reloads_1@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	note_stores@PLT
	.loc 1 6798 0
	movl	12(%ebp), %eax
	movl	44(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L2816
.LBB194:
	.loc 1 6800 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L2819
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2821
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -160(%ebp)
	jmp	.L2823
.L2821:
	movl	-88(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -160(%ebp)
.L2823:
	movl	-160(%ebp), %ecx
	movl	%ecx, -164(%ebp)
	jmp	.L2824
.L2819:
	movl	$0, -164(%ebp)
.L2824:
	movl	-164(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 6801 0
	movl	16(%ebp), %eax
	movl	reload_spill_index@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	jns	.L2825
	cmpl	$0, -36(%ebp)
	je	.L2825
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2825
.LBB195:
	.loc 1 6805 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 6807 0
	movl	16(%ebp), %ecx
	movl	reload_spill_index@GOT(%ebx), %edx
	movl	-32(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	.loc 1 6808 0
	movl	-32(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -156(%ebp)
	movl	reg_is_output_reload@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_is_output_reload@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -152(%ebp)
	movl	%ecx, -148(%ebp)
	movl	-32(%ebp), %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2863
	movl	%esi, %edi
	xorl	%esi, %esi
.L2863:
	movl	-152(%ebp), %eax
	orl	%esi, %eax
	movl	-148(%ebp), %edx
	orl	%edi, %edx
	movl	-156(%ebp), %ecx
	movl	%eax, reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	.loc 1 6809 0
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	je	.L2825
	.loc 1 6810 0
	movl	-32(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -140(%ebp)
	movl	reg_reloaded_died@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_died@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -136(%ebp)
	movl	%ecx, -132(%ebp)
	movl	-32(%ebp), %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2862
	movl	%esi, %edi
	xorl	%esi, %esi
.L2862:
	movl	-136(%ebp), %eax
	orl	%esi, %eax
	movl	-132(%ebp), %edx
	orl	%edi, %edx
	movl	-140(%ebp), %ecx
	movl	%eax, reg_reloaded_died@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_died@GOTOFF(%ebx,%ecx,8)
.L2825:
.LBE195:
	.loc 1 6812 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2816
.LBB196:
	.loc 1 6814 0
	movl	12(%ebp), %eax
	movl	56(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6815 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L2831
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2833
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -120(%ebp)
	jmp	.L2835
.L2833:
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -120(%ebp)
.L2835:
	movl	-120(%ebp), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2836
.L2831:
	movl	$0, -124(%ebp)
.L2836:
	movl	-124(%ebp), %edx
	movl	%edx, -36(%ebp)
	.loc 1 6819 0
	cmpl	$0, -28(%ebp)
	js	.L2837
	cmpl	$0, -36(%ebp)
	jne	.L2837
	jmp	.L2816
.L2837:
	.loc 1 6824 0
	cmpl	$0, -28(%ebp)
	js	.L2840
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2840
	movl	-36(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	jne	.L2840
.LBB197:
	.loc 1 6832 0
	movl	-28(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 6833 0
	movl	-72(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 6834 0
	movl	-28(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	4(%eax), %esi
	movl	rld@GOT(%ebx), %edx
	imull	$76, %ecx, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	%esi, (%eax)
	.loc 1 6835 0
	movl	-28(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	36(%eax), %esi
	movl	rld@GOT(%ebx), %edx
	imull	$76, %ecx, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	%esi, (%eax)
	.loc 1 6836 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L2844
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2846
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -112(%ebp)
	jmp	.L2848
.L2846:
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -112(%ebp)
.L2848:
	movl	-112(%ebp), %ecx
	movl	%ecx, -116(%ebp)
	jmp	.L2849
.L2844:
	movl	$0, -116(%ebp)
.L2849:
	movl	-116(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 6837 0
	cmpl	$0, -36(%ebp)
	je	.L2816
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-24(%ebp), %eax
	jne	.L2816
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	new_spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	jne	.L2816
	.loc 1 6840 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	shrl	$6, %eax
	movl	%eax, -108(%ebp)
	movl	reg_is_output_reload@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_is_output_reload@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -104(%ebp)
	movl	%ecx, -100(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2861
	movl	%esi, %edi
	xorl	%esi, %esi
.L2861:
	movl	-104(%ebp), %eax
	orl	%esi, %eax
	movl	-100(%ebp), %edx
	orl	%edi, %edx
	movl	-108(%ebp), %ecx
	movl	%eax, reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	.loc 1 6842 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%eax, new_spill_reg_store@GOTOFF(%ebx,%edx,4)
	.loc 1 6824 0
	jmp	.L2816
.L2840:
.LBE197:
	.loc 1 6846 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%eax, new_spill_reg_store@GOTOFF(%ebx,%edx,4)
.L2816:
.LBE196:
.LBE194:
.LBE193:
	.loc 1 6787 0
	movl	-72(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -72(%ebp)
.L2814:
	cmpl	$0, -72(%ebp)
	jne	.L2815
	.loc 1 6851 0
	movl	12(%ebp), %eax
	movl	68(%eax), %eax
	cmpl	$9, %eax
	jne	.L2855
	.loc 1 6853 0
	movl	12(%ebp), %eax
	movl	48(%eax), %eax
	movl	other_output_reload_insns@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 6854 0
	movl	12(%ebp), %eax
	movl	48(%eax), %esi
	call	get_insns@PLT
	movl	%eax, other_output_reload_insns@GOTOFF(%ebx,%esi,4)
	jmp	.L2857
.L2855:
	.loc 1 6857 0
	movl	12(%ebp), %eax
	movl	48(%eax), %esi
	call	get_insns@PLT
	movl	%eax, output_reload_insns@GOTOFF(%ebx,%esi,4)
.L2857:
	.loc 1 6859 0
	movl	flag_non_call_exceptions@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2858
	.loc 1 6860 0
	call	get_insns@PLT
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_eh_notes
.L2858:
	.loc 1 6862 0
	call	end_sequence@PLT
	.loc 1 6863 0
	addl	$188, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE70:
	.size	emit_output_reload_insns, .-emit_output_reload_insns
	.type	do_input_reload, @function
do_input_reload:
.LFB71:
	.loc 1 6872 0
	pushl	%ebp
.LCFI274:
	movl	%esp, %ebp
.LCFI275:
	pushl	%edi
.LCFI276:
	pushl	%esi
.LCFI277:
	pushl	%ebx
.LCFI278:
	subl	$44, %esp
.LCFI279:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6873 0
	movl	$1, -24(%ebp)
	.loc 1 6874 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 6876 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2865
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2865
	movl	12(%ebp), %eax
	movl	32(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L2868
.L2865:
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
.L2868:
	movl	-36(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 6878 0
	cmpl	$0, -16(%ebp)
	je	.L2869
	movl	16(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L2871
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L2869
	movl	12(%ebp), %eax
	movl	36(%eax), %eax
	testl	%eax, %eax
	jne	.L2869
.L2871:
	movl	12(%ebp), %eax
	movl	44(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2869
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	testl	%eax, %eax
	je	.L2869
	.loc 1 6884 0
	movl	16(%ebp), %eax
	imull	$76, %eax, %eax
	movl	%eax, %edx
	movl	rld@GOT(%ebx), %eax
	addl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_input_reload_insns
.L2869:
	.loc 1 6889 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2876
	movl	16(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L2876
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2876
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2876
	movl	12(%ebp), %eax
	movl	32(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2876
	movl	16(%ebp), %eax
	movl	reload_spill_index@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	js	.L2876
	movl	16(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	shrl	$6, %eax
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edi
	movl	16(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2897
	movl	%edx, %eax
	xorl	%edx, %edx
.L2897:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2876
	.loc 1 6895 0
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	count_occurrences@PLT
	cmpl	$1, %eax
	jne	.L2884
	movl	$0, -32(%ebp)
	jmp	.L2886
.L2884:
	movl	$-1, -32(%ebp)
.L2886:
	movl	-32(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 6897 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %ecx
	movl	16(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	reg_reloaded_contents@GOTOFF(%ebx,%eax,4), %eax
	sall	$2, %eax
	leal	(%ecx,%eax), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
.L2876:
	.loc 1 6904 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2896
	movl	16(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L2889
	movl	16(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2896
.L2889:
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	testl	%eax, %eax
	je	.L2896
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2896
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2896
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L2894
	movl	12(%ebp), %eax
	movl	36(%eax), %edx
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2896
.L2894:
	.loc 1 6923 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_output_reload
.L2896:
	.loc 1 6924 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE71:
	.size	do_input_reload, .-do_input_reload
	.section	.rodata
	.type	__FUNCTION__.24233, @object
	.size	__FUNCTION__.24233, 17
__FUNCTION__.24233:
	.string	"do_output_reload"
	.text
	.type	do_output_reload, @function
do_output_reload:
.LFB72:
	.loc 1 6935 0
	pushl	%ebp
.LCFI280:
	movl	%esp, %ebp
.LCFI281:
	pushl	%ebx
.LCFI282:
	subl	$52, %esp
.LCFI283:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6937 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 6941 0
	movl	12(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 6943 0
	cmpl	$0, -16(%ebp)
	je	.L2899
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2899
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2899
	movl	12(%ebp), %eax
	movl	32(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2899
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2899
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2899
.LBB198:
	.loc 1 6950 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 6951 0
	movl	-12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 6956 0
	movl	-8(%ebp), %eax
	shrl	$6, %eax
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %eax
	movl	-8(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2927
	movl	%edx, %eax
	xorl	%edx, %edx
.L2927:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2899
	movl	-8(%ebp), %eax
	movl	reg_reloaded_contents@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-12(%ebp), %eax
	jne	.L2899
	movl	-8(%ebp), %eax
	movl	spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2899
	movl	-8(%ebp), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2899
	.loc 1 6960 0
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_output_reload
.L2899:
.LBE198:
	.loc 1 6963 0
	movl	12(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 6964 0
	cmpl	$0, -24(%ebp)
	je	.L2926
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	cmpl	-24(%ebp), %eax
	je	.L2926
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	testl	%eax, %eax
	jne	.L2913
	.loc 1 6967 0
	jmp	.L2926
.L2913:
	.loc 1 6972 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2915
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$72, %ax
	jne	.L2917
.L2915:
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -28(%ebp)
	cmpl	$0, -28(%ebp)
	je	.L2917
	.loc 1 6975 0
	movl	12(%ebp), %eax
	movl	44(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, 4(%eax)
	.loc 1 6976 0
	jmp	.L2926
.L2917:
	.loc 1 6979 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2919
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2919
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -28(%ebp)
	cmpl	$0, -28(%ebp)
	je	.L2919
	.loc 1 6984 0
	movl	12(%ebp), %eax
	movl	44(%eax), %edx
	movl	-24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	%edx, 4(%eax)
	.loc 1 6986 0
	jmp	.L2926
.L2919:
	.loc 1 6988 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$72, %ax
	je	.L2926
	.loc 1 6994 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L2924
	.loc 1 6995 0
	leal	__FUNCTION__.24233@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6995, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2924:
	.loc 1 6997 0
	movl	16(%ebp), %eax
	imull	$76, %eax, %eax
	movl	%eax, %edx
	movl	rld@GOT(%ebx), %eax
	addl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_output_reload_insns
.L2926:
	.loc 1 6998 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE72:
	.size	do_output_reload, .-do_output_reload
	.section	.rodata
.LC41:
	.string	"\nReloads for insn # %d\n"
	.text
	.type	emit_reload_insns, @function
emit_reload_insns:
.LFB73:
	.loc 1 7005 0
	pushl	%ebp
.LCFI284:
	movl	%esp, %ebp
.LCFI285:
	pushl	%edi
.LCFI286:
	pushl	%esi
.LCFI287:
	pushl	%ebx
.LCFI288:
	subl	$412, %esp
.LCFI289:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7006 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -136(%ebp)
.LBB199:
	.loc 1 7010 0
	leal	reg_reloaded_died@GOTOFF(%ebx), %eax
	movl	%eax, -128(%ebp)
	movl	-128(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-128(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-128(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE199:
	.loc 1 7012 0
	movl	$0, -132(%ebp)
	jmp	.L2929
.L2930:
	.loc 1 7013 0
	movl	-132(%ebp), %eax
	movl	%eax, -396(%ebp)
	movl	-132(%ebp), %edx
	movl	%edx, -392(%ebp)
	movl	-132(%ebp), %ecx
	movl	-132(%ebp), %esi
	movl	-132(%ebp), %edi
	movl	-132(%ebp), %edx
	movl	-132(%ebp), %eax
	movl	$0, other_output_reload_insns@GOTOFF(%ebx,%eax,4)
	movl	other_output_reload_insns@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, outaddr_address_reload_insns@GOTOFF(%ebx,%edx,4)
	movl	outaddr_address_reload_insns@GOTOFF(%ebx,%edx,4), %eax
	movl	%eax, output_address_reload_insns@GOTOFF(%ebx,%edi,4)
	movl	output_address_reload_insns@GOTOFF(%ebx,%edi,4), %eax
	movl	%eax, output_reload_insns@GOTOFF(%ebx,%esi,4)
	movl	output_reload_insns@GOTOFF(%ebx,%esi,4), %eax
	movl	%eax, inpaddr_address_reload_insns@GOTOFF(%ebx,%ecx,4)
	movl	inpaddr_address_reload_insns@GOTOFF(%ebx,%ecx,4), %eax
	movl	-392(%ebp), %ecx
	movl	%eax, input_address_reload_insns@GOTOFF(%ebx,%ecx,4)
	movl	-392(%ebp), %esi
	movl	input_address_reload_insns@GOTOFF(%ebx,%esi,4), %eax
	movl	-396(%ebp), %edi
	movl	%eax, input_reload_insns@GOTOFF(%ebx,%edi,4)
	.loc 1 7012 0
	addl	$1, -132(%ebp)
.L2929:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L2930
	.loc 1 7018 0
	movl	$0, other_input_address_reload_insns@GOTOFF(%ebx)
	.loc 1 7019 0
	movl	$0, other_input_reload_insns@GOTOFF(%ebx)
	.loc 1 7020 0
	movl	$0, operand_reload_insns@GOTOFF(%ebx)
	.loc 1 7021 0
	movl	$0, other_operand_reload_insns@GOTOFF(%ebx)
	.loc 1 7024 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2932
	.loc 1 7026 0
	movl	-136(%ebp), %eax
	movl	4(%eax), %edx
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	%edx, 8(%esp)
	leal	.LC41@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	fprintf@PLT
	.loc 1 7027 0
	movl	rtl_dump_file@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	debug_reload_to_stream@PLT
.L2932:
	.loc 1 7035 0
	movl	$0, -132(%ebp)
	jmp	.L2934
.L2935:
	.loc 1 7037 0
	movl	-132(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2936
	movl	-132(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2936
	.loc 1 7039 0
	movl	-132(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, new_spill_reg_store@GOTOFF(%ebx,%eax,4)
.L2936:
	.loc 1 7041 0
	movl	-132(%ebp), %eax
	imull	$76, %eax, %eax
	movl	%eax, %edx
	movl	rld@GOT(%ebx), %eax
	addl	%eax, %edx
	movl	-132(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_input_reload
	.loc 1 7042 0
	movl	-132(%ebp), %eax
	imull	$76, %eax, %eax
	movl	%eax, %edx
	movl	rld@GOT(%ebx), %eax
	addl	%eax, %edx
	movl	-132(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_output_reload
	.loc 1 7035 0
	addl	$1, -132(%ebp)
.L2934:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L2935
	.loc 1 7069 0
	movl	other_input_address_reload_insns@GOTOFF(%ebx), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7070 0
	movl	other_input_reload_insns@GOTOFF(%ebx), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7072 0
	movl	$0, -132(%ebp)
	jmp	.L2940
.L2941:
	.loc 1 7074 0
	movl	-132(%ebp), %eax
	movl	inpaddr_address_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7075 0
	movl	-132(%ebp), %eax
	movl	input_address_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7076 0
	movl	-132(%ebp), %eax
	movl	input_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7072 0
	addl	$1, -132(%ebp)
.L2940:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L2941
	.loc 1 7079 0
	movl	other_operand_reload_insns@GOTOFF(%ebx), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7080 0
	movl	operand_reload_insns@GOTOFF(%ebx), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_before@PLT
	.loc 1 7082 0
	movl	$0, -132(%ebp)
	jmp	.L2943
.L2944:
.LBB200:
	.loc 1 7084 0
	movl	-132(%ebp), %eax
	movl	outaddr_address_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_after@PLT
	movl	%eax, -124(%ebp)
	.loc 1 7085 0
	movl	-132(%ebp), %eax
	movl	output_address_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_after@PLT
	movl	%eax, -124(%ebp)
	.loc 1 7086 0
	movl	-132(%ebp), %eax
	movl	output_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_after@PLT
	movl	%eax, -124(%ebp)
	.loc 1 7087 0
	movl	-132(%ebp), %eax
	movl	other_output_reload_insns@GOTOFF(%ebx,%eax,4), %edx
	movl	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_insn_after@PLT
.LBE200:
	.loc 1 7082 0
	addl	$1, -132(%ebp)
.L2943:
	movl	reload_n_operands@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L2944
	.loc 1 7097 0
	movl	$0, -132(%ebp)
	jmp	.L2946
.L2947:
.LBB201:
	.loc 1 7099 0
	movl	-132(%ebp), %eax
	movzwl	reload_order@GOTOFF(%ebx,%eax,2), %eax
	cwtl
	movl	%eax, -120(%ebp)
	.loc 1 7100 0
	movl	-120(%ebp), %edx
	movl	reload_spill_index@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -116(%ebp)
	.loc 1 7106 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2948
	movl	-120(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L2948
	movl	-120(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	jne	.L2948
.LBB202:
	.loc 1 7109 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	.loc 1 7111 0
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2952
	.loc 1 7112 0
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -112(%ebp)
.L2952:
	.loc 1 7114 0
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2948
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2948
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	jne	.L2948
.LBB203:
	.loc 1 7118 0
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -108(%ebp)
	.loc 1 7120 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2948
.LBB204:
	.loc 1 7122 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 7124 0
	movl	-104(%ebp), %eax
	movl	reg_reloaded_contents@GOTOFF(%ebx,%eax,4), %eax
	cmpl	-108(%ebp), %eax
	jne	.L2948
	.loc 1 7125 0
	movl	-104(%ebp), %eax
	movl	$0, spill_reg_store@GOTOFF(%ebx,%eax,4)
.L2948:
.LBE204:
.LBE203:
.LBE202:
	.loc 1 7134 0
	cmpl	$0, -116(%ebp)
	js	.L2959
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2959
.LBB205:
	.loc 1 7136 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -100(%ebp)
	.loc 1 7138 0
	movl	$0, -92(%ebp)
	.loc 1 7139 0
	movl	$1, -88(%ebp)
	.loc 1 7143 0
	movl	$0, -96(%ebp)
	jmp	.L2962
.L2963:
	.loc 1 7145 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %edx
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reload_reg_reaches_end_p
	testl	%eax, %eax
	je	.L2964
	.loc 1 7147 0
	movl	$1, -92(%ebp)
	jmp	.L2966
.L2964:
	.loc 1 7149 0
	movl	$0, -88(%ebp)
.L2966:
	.loc 1 7143 0
	addl	$1, -96(%ebp)
.L2962:
	movl	-96(%ebp), %eax
	cmpl	-100(%ebp), %eax
	jl	.L2963
	.loc 1 7154 0
	cmpl	$0, -88(%ebp)
	je	.L2968
	.loc 1 7159 0
	movl	$0, -96(%ebp)
	jmp	.L2970
.L2971:
	.loc 1 7160 0
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -388(%ebp)
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -384(%ebp)
	movl	%ecx, -380(%ebp)
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3094
	movl	%eax, %edx
	xorl	%eax, %eax
.L3094:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-384(%ebp), %eax
	andl	%esi, %eax
	movl	-380(%ebp), %edx
	andl	%edi, %edx
	movl	-388(%ebp), %ecx
	movl	%eax, reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	.loc 1 7159 0
	addl	$1, -96(%ebp)
.L2970:
	movl	-96(%ebp), %eax
	cmpl	-100(%ebp), %eax
	jl	.L2971
	.loc 1 7163 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2973
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2975
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2973
.L2975:
.LBB206:
	.loc 1 7174 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2977
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, -376(%ebp)
	jmp	.L2979
.L2977:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2980
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movl	%eax, -372(%ebp)
	jmp	.L2982
.L2980:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -372(%ebp)
.L2982:
	movl	-372(%ebp), %esi
	movl	%esi, -376(%ebp)
.L2979:
	movl	-376(%ebp), %edi
	movl	%edi, -84(%ebp)
	.loc 1 7175 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	.loc 1 7177 0
	cmpl	$175, -80(%ebp)
	jg	.L2983
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -368(%ebp)
	jmp	.L2985
.L2983:
	movl	$1, -368(%ebp)
.L2985:
	movl	-368(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 7180 0
	movl	-116(%ebp), %edx
	movl	-116(%ebp), %eax
	movl	new_spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, spill_reg_store@GOTOFF(%ebx,%edx,4)
	.loc 1 7181 0
	movl	-116(%ebp), %edx
	movl	-84(%ebp), %eax
	movl	%eax, spill_reg_stored_to@GOTOFF(%ebx,%edx,4)
	.loc 1 7182 0
	movl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	.loc 1 7190 0
	cmpl	$175, -80(%ebp)
	jg	.L2986
	.loc 1 7191 0
	movl	$1, -96(%ebp)
	jmp	.L2988
.L2989:
	.loc 1 7192 0
	movl	-96(%ebp), %eax
	addl	-80(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	%edx, -364(%ebp)
	movl	-100(%ebp), %eax
	cmpl	-76(%ebp), %eax
	jne	.L2990
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	-96(%ebp), %eax
	leal	(%edx,%eax), %eax
	sall	$2, %eax
	leal	(%ecx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -360(%ebp)
	jmp	.L2992
.L2990:
	movl	$0, -360(%ebp)
.L2992:
	movl	-360(%ebp), %ecx
	movl	-364(%ebp), %edx
	movl	%ecx, (%edx)
	.loc 1 7191 0
	addl	$1, -96(%ebp)
.L2988:
	movl	-96(%ebp), %eax
	cmpl	-76(%ebp), %eax
	jl	.L2989
.L2986:
	.loc 1 7198 0
	movl	$0, -96(%ebp)
	jmp	.L2993
.L2994:
	.loc 1 7200 0
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -356(%ebp)
	movl	reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %edi
	movl	%esi, -352(%ebp)
	movl	%edi, -348(%ebp)
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3093
	movl	%eax, %edx
	xorl	%eax, %eax
.L3093:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-352(%ebp), %eax
	andl	%esi, %eax
	movl	-348(%ebp), %edx
	andl	%edi, %edx
	movl	-356(%ebp), %edi
	movl	%eax, reg_reloaded_dead@GOTOFF(%ebx,%edi,8)
	movl	%edx, 4+reg_reloaded_dead@GOTOFF(%ebx,%edi,8)
	.loc 1 7201 0
	movl	-96(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	%eax, %edx
	movl	%edx, -340(%ebp)
	cmpl	$175, -80(%ebp)
	jg	.L2995
	movl	-100(%ebp), %eax
	cmpl	-76(%ebp), %eax
	jne	.L2995
	movl	-96(%ebp), %eax
	movl	-80(%ebp), %ecx
	addl	%eax, %ecx
	movl	%ecx, -336(%ebp)
	jmp	.L2998
.L2995:
	movl	-80(%ebp), %esi
	movl	%esi, -336(%ebp)
.L2998:
	movl	-336(%ebp), %eax
	movl	-340(%ebp), %edi
	movl	%eax, reg_reloaded_contents@GOTOFF(%ebx,%edi,4)
	.loc 1 7205 0
	movl	-96(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	%eax, %edx
	movl	-136(%ebp), %eax
	movl	%eax, reg_reloaded_insn@GOTOFF(%ebx,%edx,4)
	.loc 1 7206 0
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -332(%ebp)
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -328(%ebp)
	movl	%ecx, -324(%ebp)
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3092
	movl	%esi, %edi
	xorl	%esi, %esi
.L3092:
	movl	-328(%ebp), %eax
	orl	%esi, %eax
	movl	-324(%ebp), %edx
	orl	%edi, %edx
	movl	-332(%ebp), %ecx
	movl	%eax, reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	.loc 1 7198 0
	addl	$1, -96(%ebp)
.L2993:
	movl	-96(%ebp), %eax
	cmpl	-100(%ebp), %eax
	jl	.L2994
	.loc 1 7163 0
	jmp	.L2959
.L2973:
.LBE206:
	.loc 1 7213 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2959
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L2959
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3003
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L3003
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	je	.L3006
.L3003:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2959
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_has_output_reload@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	jne	.L2959
.L3006:
	movl	-136(%ebp), %eax
	movl	44(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L2959
.LBB207:
	.loc 1 7225 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3009
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L3009
	.loc 1 7227 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 7225 0
	jmp	.L3012
.L3009:
	.loc 1 7228 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3013
	.loc 1 7229 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3012
.L3013:
	.loc 1 7231 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3012:
	.loc 1 7233 0
	cmpl	$175, -72(%ebp)
	jg	.L3015
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -320(%ebp)
	jmp	.L3017
.L3015:
	movl	$1, -320(%ebp)
.L3017:
	movl	-320(%ebp), %esi
	movl	%esi, -68(%ebp)
	.loc 1 7237 0
	movl	-72(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	.loc 1 7239 0
	cmpl	$175, -72(%ebp)
	jg	.L3018
	.loc 1 7240 0
	movl	$1, -96(%ebp)
	jmp	.L3020
.L3021:
	.loc 1 7241 0
	movl	-96(%ebp), %eax
	addl	-72(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	%edx, -316(%ebp)
	movl	-100(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jne	.L3022
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	-96(%ebp), %eax
	leal	(%edx,%eax), %eax
	sall	$2, %eax
	leal	(%ecx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -312(%ebp)
	jmp	.L3024
.L3022:
	movl	$0, -312(%ebp)
.L3024:
	movl	-312(%ebp), %eax
	movl	-316(%ebp), %edi
	movl	%eax, (%edi)
	.loc 1 7240 0
	addl	$1, -96(%ebp)
.L3020:
	movl	-96(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jl	.L3021
.L3018:
	.loc 1 7250 0
	movl	-120(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3025
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3027
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3027
.L3025:
	.loc 1 7252 0
	movl	-116(%ebp), %eax
	movl	$0, spill_reg_store@GOTOFF(%ebx,%eax,4)
.L3027:
	.loc 1 7254 0
	movl	$0, -96(%ebp)
	jmp	.L3029
.L3030:
	.loc 1 7256 0
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -308(%ebp)
	movl	reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -304(%ebp)
	movl	%ecx, -300(%ebp)
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3091
	movl	%eax, %edx
	xorl	%eax, %eax
.L3091:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-304(%ebp), %eax
	andl	%esi, %eax
	movl	-300(%ebp), %edx
	andl	%edi, %edx
	movl	-308(%ebp), %ecx
	movl	%eax, reg_reloaded_dead@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_dead@GOTOFF(%ebx,%ecx,8)
	.loc 1 7257 0
	movl	-96(%ebp), %eax
	movl	-116(%ebp), %esi
	addl	%eax, %esi
	movl	%esi, -292(%ebp)
	cmpl	$175, -72(%ebp)
	jg	.L3031
	movl	-100(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jne	.L3031
	movl	-96(%ebp), %eax
	movl	-72(%ebp), %edi
	addl	%eax, %edi
	movl	%edi, -288(%ebp)
	jmp	.L3034
.L3031:
	movl	-72(%ebp), %eax
	movl	%eax, -288(%ebp)
.L3034:
	movl	-288(%ebp), %ecx
	movl	-292(%ebp), %edx
	movl	%ecx, reg_reloaded_contents@GOTOFF(%ebx,%edx,4)
	.loc 1 7261 0
	movl	-96(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	%eax, %edx
	movl	-136(%ebp), %eax
	movl	%eax, reg_reloaded_insn@GOTOFF(%ebx,%edx,4)
	.loc 1 7262 0
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -284(%ebp)
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edi
	movl	%esi, -280(%ebp)
	movl	%edi, -276(%ebp)
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3090
	movl	%esi, %edi
	xorl	%esi, %esi
.L3090:
	movl	-280(%ebp), %eax
	orl	%esi, %eax
	movl	-276(%ebp), %edx
	orl	%edi, %edx
	movl	-284(%ebp), %edi
	movl	%eax, reg_reloaded_valid@GOTOFF(%ebx,%edi,8)
	movl	%edx, 4+reg_reloaded_valid@GOTOFF(%ebx,%edi,8)
	.loc 1 7254 0
	addl	$1, -96(%ebp)
.L3029:
	movl	-96(%ebp), %eax
	cmpl	-100(%ebp), %eax
	jl	.L3030
	jmp	.L2959
.L2968:
.LBE207:
	.loc 1 7269 0
	cmpl	$0, -92(%ebp)
	je	.L2959
	.loc 1 7271 0
	movl	$0, -96(%ebp)
	jmp	.L3036
.L3037:
	.loc 1 7272 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$68, %eax
	movl	(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %edx
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reload_reg_reaches_end_p
	testl	%eax, %eax
	je	.L3038
	.loc 1 7275 0
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -268(%ebp)
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -264(%ebp)
	movl	%ecx, -260(%ebp)
	movl	-96(%ebp), %eax
	addl	-116(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3089
	movl	%eax, %edx
	xorl	%eax, %eax
.L3089:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-264(%ebp), %eax
	andl	%esi, %eax
	movl	-260(%ebp), %edx
	andl	%edi, %edx
	movl	-268(%ebp), %ecx
	movl	%eax, reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_valid@GOTOFF(%ebx,%ecx,8)
.L3038:
	.loc 1 7271 0
	addl	$1, -96(%ebp)
.L3036:
	movl	-96(%ebp), %eax
	cmpl	-100(%ebp), %eax
	jl	.L3037
.L2959:
.LBE205:
	.loc 1 7287 0
	cmpl	$0, -116(%ebp)
	jns	.L3040
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3040
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3043
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3040
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3040
.L3043:
.LBB208:
	.loc 1 7293 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3046
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, -256(%ebp)
	jmp	.L3048
.L3046:
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movl	%eax, -256(%ebp)
.L3048:
	movl	-256(%ebp), %esi
	movl	%esi, -64(%ebp)
	.loc 1 7294 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 7295 0
	cmpl	$175, -60(%ebp)
	jle	.L3049
.LBB209:
	.loc 1 7297 0
	movl	$0, -52(%ebp)
	.loc 1 7299 0
	movl	-60(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 7304 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 7308 0
	cmpl	$0, -56(%ebp)
	jne	.L3051
.LBB210:
	.loc 1 7310 0
	movl	-136(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3053
	movl	-136(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3055
	movl	-136(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -248(%ebp)
	jmp	.L3057
.L3055:
	movl	-136(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -248(%ebp)
.L3057:
	movl	-248(%ebp), %edi
	movl	%edi, -252(%ebp)
	jmp	.L3058
.L3053:
	movl	$0, -252(%ebp)
.L3058:
	movl	-252(%ebp), %eax
	movl	%eax, -48(%ebp)
	.loc 1 7311 0
	cmpl	$0, -48(%ebp)
	je	.L3066
	movl	-48(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	jne	.L3066
.LBB211:
	.loc 1 7315 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 7316 0
	movl	-136(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 7317 0
	movl	$0, -44(%ebp)
	jmp	.L3062
.L3063:
	.loc 1 7319 0
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	cmpl	-56(%ebp), %eax
	jne	.L3064
	.loc 1 7321 0
	movl	-44(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 7322 0
	jmp	.L3066
.L3064:
	.loc 1 7317 0
	addl	$1, -44(%ebp)
.L3062:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -44(%ebp)
	jl	.L3063
	jmp	.L3066
.L3051:
.LBE211:
.LBE210:
	.loc 1 7328 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	new_spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -52(%ebp)
.L3066:
	.loc 1 7329 0
	cmpl	$0, -56(%ebp)
	je	.L3040
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3040
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3040
.LBB212:
	.loc 1 7332 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 7333 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -36(%ebp)
	.loc 1 7338 0
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	movl	%eax, -32(%ebp)
	.loc 1 7339 0
	cmpl	$0, -32(%ebp)
	jne	.L3083
	cmpl	$0, -52(%ebp)
	je	.L3083
	.loc 1 7340 0
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	movl	%eax, -32(%ebp)
	.loc 1 7341 0
	jmp	.L3083
.L3075:
	.loc 1 7343 0
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	addl	%eax, %edx
	movl	-52(%ebp), %eax
	movl	%eax, spill_reg_store@GOTOFF(%ebx,%edx,4)
	.loc 1 7344 0
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	addl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	%eax, spill_reg_stored_to@GOTOFF(%ebx,%edx,4)
	.loc 1 7345 0
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	addl	%eax, %edx
	movl	-60(%ebp), %eax
	movl	%eax, reg_reloaded_contents@GOTOFF(%ebx,%edx,4)
	.loc 1 7346 0
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	addl	%eax, %edx
	movl	-52(%ebp), %eax
	movl	%eax, reg_reloaded_insn@GOTOFF(%ebx,%edx,4)
	.loc 1 7347 0
	movl	-36(%ebp), %eax
	addl	-40(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -244(%ebp)
	movl	reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_dead@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -240(%ebp)
	movl	%ecx, -236(%ebp)
	movl	-36(%ebp), %eax
	addl	-40(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3086
	movl	%eax, %edx
	xorl	%eax, %eax
.L3086:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-240(%ebp), %eax
	andl	%esi, %eax
	movl	-236(%ebp), %edx
	andl	%edi, %edx
	movl	-244(%ebp), %ecx
	movl	%eax, reg_reloaded_dead@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_dead@GOTOFF(%ebx,%ecx,8)
	.loc 1 7348 0
	movl	-36(%ebp), %eax
	addl	-40(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -228(%ebp)
	movl	reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_reloaded_valid@GOTOFF(%ebx,%eax,8), %edi
	movl	%esi, -224(%ebp)
	movl	%edi, -220(%ebp)
	movl	-36(%ebp), %eax
	addl	-40(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3087
	movl	%esi, %edi
	xorl	%esi, %esi
.L3087:
	movl	-224(%ebp), %eax
	orl	%esi, %eax
	movl	-220(%ebp), %edx
	orl	%edi, %edx
	movl	-228(%ebp), %edi
	movl	%eax, reg_reloaded_valid@GOTOFF(%ebx,%edi,8)
	movl	%edx, 4+reg_reloaded_valid@GOTOFF(%ebx,%edi,8)
	.loc 1 7349 0
	movl	-36(%ebp), %eax
	addl	-40(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -212(%ebp)
	movl	reg_is_output_reload@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_is_output_reload@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -208(%ebp)
	movl	%ecx, -204(%ebp)
	movl	-36(%ebp), %eax
	addl	-40(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3088
	movl	%esi, %edi
	xorl	%esi, %esi
.L3088:
	movl	-208(%ebp), %eax
	orl	%esi, %eax
	movl	-204(%ebp), %edx
	orl	%edi, %edx
	movl	-212(%ebp), %ecx
	movl	%eax, reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_is_output_reload@GOTOFF(%ebx,%ecx,8)
	.loc 1 7350 0
	cmpl	$0, -32(%ebp)
	je	.L3076
	.loc 1 7351 0
	movl	-40(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -196(%ebp)
	movl	reg_reloaded_died@GOTOFF(%ebx,%eax,8), %esi
	movl	4+reg_reloaded_died@GOTOFF(%ebx,%eax,8), %edi
	movl	%esi, -192(%ebp)
	movl	%edi, -188(%ebp)
	movl	-40(%ebp), %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3085
	movl	%esi, %edi
	xorl	%esi, %esi
.L3085:
	movl	-192(%ebp), %eax
	orl	%esi, %eax
	movl	-188(%ebp), %edx
	orl	%edi, %edx
	movl	-196(%ebp), %edi
	movl	%eax, reg_reloaded_died@GOTOFF(%ebx,%edi,8)
	movl	%edx, 4+reg_reloaded_died@GOTOFF(%ebx,%edi,8)
	jmp	.L3074
.L3076:
	.loc 1 7353 0
	movl	-40(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -180(%ebp)
	movl	reg_reloaded_died@GOTOFF(%ebx,%eax,8), %edx
	movl	4+reg_reloaded_died@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -176(%ebp)
	movl	%ecx, -172(%ebp)
	movl	-40(%ebp), %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3084
	movl	%eax, %edx
	xorl	%eax, %eax
.L3084:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-176(%ebp), %eax
	andl	%esi, %eax
	movl	-172(%ebp), %edx
	andl	%edi, %edx
	movl	-180(%ebp), %ecx
	movl	%eax, reg_reloaded_died@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_reloaded_died@GOTOFF(%ebx,%ecx,8)
.L3074:
.L3083:
	.loc 1 7341 0
	cmpl	$0, -36(%ebp)
	setg	%al
	subl	$1, -36(%ebp)
	testb	%al, %al
	jne	.L3075
	.loc 1 7355 0
	movl	-60(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	%eax, (%edx)
	jmp	.L3040
.L3049:
.LBE212:
.LBE209:
.LBB213:
	.loc 1 7360 0
	movl	-120(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -28(%ebp)
	.loc 1 7362 0
	jmp	.L3079
.L3080:
	.loc 1 7363 0
	movl	-28(%ebp), %eax
	addl	-60(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
.L3079:
	.loc 1 7362 0
	cmpl	$0, -28(%ebp)
	setg	%al
	subl	$1, -28(%ebp)
	testb	%al, %al
	jne	.L3080
.L3040:
.LBE213:
.LBE208:
.LBE201:
	.loc 1 7097 0
	addl	$1, -132(%ebp)
.L2946:
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L2947
.LBB214:
	.loc 1 7367 0
	leal	reg_reloaded_dead@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	leal	reg_reloaded_died@GOTOFF(%ebx), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -168(%ebp)
	movl	%edi, -164(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-168(%ebp), %eax
	orl	%esi, %eax
	movl	-164(%ebp), %edx
	orl	%edi, %edx
	movl	-24(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-24(%ebp), %ecx
	addl	$8, %ecx
	movl	-24(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -160(%ebp)
	movl	%edi, -156(%ebp)
	movl	-20(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-160(%ebp), %eax
	orl	%esi, %eax
	movl	-156(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-24(%ebp), %ecx
	addl	$16, %ecx
	movl	-24(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -152(%ebp)
	movl	%edi, -148(%ebp)
	movl	-20(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-152(%ebp), %eax
	orl	%esi, %eax
	movl	-148(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE214:
	.loc 1 7368 0
	addl	$412, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE73:
	.size	emit_reload_insns, .-emit_reload_insns
.globl gen_reload
	.type	gen_reload, @function
gen_reload:
.LFB74:
	.loc 1 7382 0
	pushl	%ebp
.LCFI290:
	movl	%esp, %ebp
.LCFI291:
	pushl	%esi
.LCFI292:
	pushl	%ebx
.LCFI293:
	subl	$64, %esp
.LCFI294:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7383 0
	call	get_last_insn@PLT
	movl	%eax, -36(%ebp)
	.loc 1 7388 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3096
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L3096
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L3096
	.loc 1 7392 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 12(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 7388 0
	jmp	.L3100
.L3096:
	.loc 1 7393 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3100
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L3100
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L3100
	.loc 1 7397 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%ebp)
.L3100:
	.loc 1 7425 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3104
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3106
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3106
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3104
.L3106:
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L3109
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3104
.L3109:
.LBB215:
	.loc 1 7450 0
	movl	12(%ebp), %eax
	addl	$4, %eax
	movl	%eax, (%esp)
	call	find_replacement@PLT
	movl	%eax, -28(%ebp)
	.loc 1 7451 0
	movl	12(%ebp), %eax
	addl	$12, %eax
	movl	%eax, (%esp)
	call	find_replacement@PLT
	movl	%eax, -24(%ebp)
	.loc 1 7460 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3120
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3120
	.loc 1 7462 0
	movl	-28(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
.L3120:
	.loc 1 7464 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-28(%ebp), %eax
	jne	.L3123
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-24(%ebp), %eax
	je	.L3125
.L3123:
	.loc 1 7465 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 12(%ebp)
.L3125:
	.loc 1 7467 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -16(%ebp)
	.loc 1 7468 0
	movl	-16(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L3126
	movl	-16(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3128
.L3126:
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_memoized_1@PLT
	movl	%eax, -56(%ebp)
.L3128:
	movl	-56(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 7470 0
	cmpl	$0, -12(%ebp)
	js	.L3129
	.loc 1 7472 0
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	.loc 1 7476 0
	movl	$1, (%esp)
	call	constrain_operands@PLT
	testl	%eax, %eax
	je	.L3129
	.loc 1 7477 0
	movl	-16(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L3132
.L3129:
	.loc 1 7480 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insns_since@PLT
	.loc 1 7497 0
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -12(%ebp)
	.loc 1 7499 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3133
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3144
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3133
.L3144:
	cmpl	$529, -12(%ebp)
	je	.L3146
	movl	-12(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %esi
	movl	-12(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movzwl	8(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	*%esi
	testl	%eax, %eax
	jne	.L3146
.L3133:
	.loc 1 7505 0
	movl	-28(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
.L3146:
	.loc 1 7507 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
	.loc 1 7513 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3148
	.loc 1 7514 0
	movl	8(%ebp), %eax
	movl	%eax, -24(%ebp)
.L3148:
	.loc 1 7516 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -16(%ebp)
	.loc 1 7521 0
	movl	-16(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L3150
	movl	-16(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3152
.L3150:
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_memoized_1@PLT
	movl	%eax, -48(%ebp)
.L3152:
	movl	-48(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 7523 0
	cmpl	$0, -12(%ebp)
	js	.L3153
	.loc 1 7525 0
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	.loc 1 7529 0
	movl	$1, (%esp)
	call	constrain_operands@PLT
	testl	%eax, %eax
	je	.L3153
	.loc 1 7532 0
	movl	-16(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$3, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%edx, 68(%eax)
	.loc 1 7534 0
	movl	-16(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L3132
.L3153:
	.loc 1 7538 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insns_since@PLT
	.loc 1 7540 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reload@PLT
	.loc 1 7541 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -16(%ebp)
	.loc 1 7542 0
	movl	-16(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$3, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%edx, 68(%eax)
	.loc 1 7425 0
	jmp	.L3156
.L3104:
.LBE215:
	.loc 1 7570 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L3157
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3159
.L3157:
	.loc 1 7571 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 7570 0
	jmp	.L3156
.L3159:
	.loc 1 7580 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L3156:
	.loc 1 7588 0
	cmpl	$0, -36(%ebp)
	je	.L3160
	movl	-36(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L3162
.L3160:
	call	get_insns@PLT
	movl	%eax, -44(%ebp)
.L3162:
	movl	-44(%ebp), %eax
	movl	%eax, -52(%ebp)
.L3132:
	movl	-52(%ebp), %eax
	.loc 1 7589 0
	addl	$64, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE74:
	.size	gen_reload, .-gen_reload
	.type	delete_output_reload, @function
delete_output_reload:
.LFB75:
	.loc 1 7605 0
	pushl	%ebp
.LCFI295:
	movl	%esp, %ebp
.LCFI296:
	pushl	%ebx
.LCFI297:
	subl	$84, %esp
.LCFI298:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7606 0
	movl	16(%ebp), %eax
	movl	spill_reg_store@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -48(%ebp)
	.loc 1 7607 0
	movl	16(%ebp), %eax
	movl	spill_reg_stored_to@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, -44(%ebp)
	.loc 1 7610 0
	movl	$0, -32(%ebp)
	.loc 1 7616 0
	movl	-48(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L3251
	.loc 1 7621 0
	jmp	.L3167
.L3168:
	.loc 1 7622 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L3167:
	.loc 1 7621 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3168
	.loc 1 7623 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_equiv_memory_loc@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7627 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -40(%ebp)
	jmp	.L3170
.L3171:
.LBB216:
	.loc 1 7629 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7630 0
	cmpl	$0, -20(%ebp)
	je	.L3172
	.loc 1 7632 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L3174
	movl	-40(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L3177
.L3174:
	.loc 1 7633 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$32, %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7638 0
	jmp	.L3177
.L3178:
	.loc 1 7639 0
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3177:
	.loc 1 7638 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3178
	.loc 1 7640 0
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3172
	.loc 1 7642 0
	movl	-40(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L3181
	movl	-40(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	testl	%eax, %eax
	jne	.L3181
	movl	-40(%ebp), %eax
	cmpl	12(%ebp), %eax
	jne	.L3251
.L3181:
	.loc 1 7644 0
	addl	$1, -32(%ebp)
	.loc 1 7645 0
	movl	-40(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7646 0
	cmpl	$0, -20(%ebp)
	je	.L3172
	.loc 1 7648 0
	jmp	.L3186
.L3187:
	.loc 1 7649 0
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3186:
	.loc 1 7648 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3187
	.loc 1 7650 0
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3172
	.loc 1 7651 0
	addl	$1, -32(%ebp)
.L3172:
.LBE216:
	.loc 1 7627 0
	subl	$1, -40(%ebp)
.L3170:
	cmpl	$0, -40(%ebp)
	jns	.L3171
	.loc 1 7657 0
	movl	8(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	count_occurrences@PLT
	movl	%eax, -36(%ebp)
	.loc 1 7658 0
	cmpl	$0, -24(%ebp)
	je	.L3192
	.loc 1 7659 0
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	eliminate_regs@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	count_occurrences@PLT
	addl	%eax, -36(%ebp)
.L3192:
	.loc 1 7662 0
	movl	-36(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jg	.L3251
	.loc 1 7670 0
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 7671 0
	jmp	.L3195
.L3196:
	.loc 1 7673 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L3251
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L3199
	.loc 1 7674 0
	jmp	.L3251
.L3199:
	.loc 1 7675 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	je	.L3200
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L3202
.L3200:
	movl	-28(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L3202
	.loc 1 7680 0
	jmp	.L3204
.L3205:
	.loc 1 7682 0
	movl	-28(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	addl	%eax, -36(%ebp)
	.loc 1 7683 0
	movl	-28(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
.L3204:
	.loc 1 7680 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L3206
	movl	-28(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L3205
.L3206:
	.loc 1 7685 0
	movl	-36(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jg	.L3251
	movl	-28(%ebp), %eax
	cmpl	8(%ebp), %eax
	je	.L3210
	.loc 1 7687 0
	jmp	.L3251
.L3202:
	.loc 1 7671 0
	movl	-28(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
.L3195:
	movl	-28(%ebp), %eax
	cmpl	8(%ebp), %eax
	jne	.L3196
.L3210:
	.loc 1 7692 0
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -40(%ebp)
	jmp	.L3211
.L3212:
	.loc 1 7694 0
	movl	-40(%ebp), %eax
	addl	16(%ebp), %eax
	movl	$0, spill_reg_store@GOTOFF(%ebx,%eax,4)
	.loc 1 7695 0
	movl	-40(%ebp), %eax
	addl	16(%ebp), %eax
	movl	$0, spill_reg_stored_to@GOTOFF(%ebx,%eax,4)
.L3211:
	.loc 1 7692 0
	cmpl	$0, -40(%ebp)
	setg	%al
	subl	$1, -40(%ebp)
	testb	%al, %al
	jne	.L3212
	.loc 1 7706 0
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$4, %eax
	movl	(%eax), %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	cmpl	%eax, %ecx
	je	.L3214
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	24(%eax), %eax
	cmpl	$1, %eax
	jne	.L3214
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L3214
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	36(%eax), %eax
	testl	%eax, %eax
	js	.L3214
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	je	.L3214
.LBB217:
	.loc 1 7718 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3220
.L3221:
.LBB218:
	.loc 1 7720 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3222
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3224
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3226
.L3224:
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -64(%ebp)
.L3226:
	movl	-64(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L3227
.L3222:
	movl	$0, -68(%ebp)
.L3227:
	movl	-68(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 7724 0
	cmpl	$0, -12(%ebp)
	je	.L3228
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-44(%ebp), %eax
	je	.L3230
.L3228:
	.loc 1 7726 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L3231
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	je	.L3231
	.loc 1 7729 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	je	.L3234
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L3230
.L3234:
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L3230
	.loc 1 7734 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads
	.loc 1 7735 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
	.loc 1 7736 0
	jmp	.L3251
.L3230:
.LBE218:
	.loc 1 7718 0
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
.L3220:
	cmpl	$0, -16(%ebp)
	jne	.L3221
.L3231:
	.loc 1 7742 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3237
.L3238:
.LBB219:
	.loc 1 7744 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3239
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3241
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3243
.L3241:
	movl	-16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -56(%ebp)
.L3243:
	movl	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3244
.L3239:
	movl	$0, -60(%ebp)
.L3244:
	movl	-60(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 7746 0
	cmpl	$0, -8(%ebp)
	je	.L3245
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-44(%ebp), %eax
	jne	.L3245
	.loc 1 7748 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads
	.loc 1 7749 0
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
.L3245:
	.loc 1 7751 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L3248
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	je	.L3248
.LBE219:
	.loc 1 7742 0
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
.L3237:
	cmpl	$0, -16(%ebp)
	jne	.L3238
.L3248:
	.loc 1 7757 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	addl	%eax, %eax
	movl	%eax, %edx
	movl	reg_renumber@GOT(%ebx), %eax
	movl	(%eax), %eax
	leal	(%edx,%eax), %ecx
	movl	12(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movw	%ax, (%ecx)
	.loc 1 7758 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	$-1, 4(%esp)
	movl	%eax, (%esp)
	call	alter_reg
	.loc 1 7706 0
	jmp	.L3251
.L3214:
.LBE217:
	.loc 1 7762 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads
	.loc 1 7763 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
.L3251:
	.loc 1 7765 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE75:
	.size	delete_output_reload, .-delete_output_reload
	.type	delete_address_reloads, @function
delete_address_reloads:
.LFB76:
	.loc 1 7773 0
	pushl	%ebp
.LCFI299:
	movl	%esp, %ebp
.LCFI300:
	pushl	%edi
.LCFI301:
	pushl	%esi
.LCFI302:
	pushl	%ebx
.LCFI303:
	subl	$76, %esp
.LCFI304:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7774 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3253
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3255
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3257
.L3255:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -64(%ebp)
.L3257:
	movl	-64(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L3258
.L3253:
	movl	$0, -68(%ebp)
.L3258:
	movl	-68(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 7776 0
	cmpl	$0, -36(%ebp)
	je	.L3259
.LBB220:
	.loc 1 7778 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 7779 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3259
	.loc 1 7780 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads_1
.L3259:
.LBE220:
	.loc 1 7784 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7785 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7786 0
	cmpl	$0, -24(%ebp)
	je	.L3290
	cmpl	$0, -20(%ebp)
	jne	.L3264
	.loc 1 7787 0
	jmp	.L3290
.L3264:
	.loc 1 7788 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3266
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3268
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3270
.L3268:
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -56(%ebp)
.L3270:
	movl	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3271
.L3266:
	movl	$0, -60(%ebp)
.L3271:
	movl	-60(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 7789 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3272
	movl	-24(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3274
	movl	-24(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3276
.L3274:
	movl	-24(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -48(%ebp)
.L3276:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L3277
.L3272:
	movl	$0, -52(%ebp)
.L3277:
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 7790 0
	cmpl	$0, -36(%ebp)
	je	.L3290
	cmpl	$0, -32(%ebp)
	je	.L3290
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3290
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3290
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3290
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3284
	.loc 1 7794 0
	jmp	.L3290
.L3284:
	.loc 1 7795 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 7796 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3290
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3290
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3290
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L3289
	.loc 1 7801 0
	jmp	.L3290
.L3289:
	.loc 1 7802 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_related_insns@PLT
	.loc 1 7803 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_related_insns@PLT
.L3290:
	.loc 1 7804 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE76:
	.size	delete_address_reloads, .-delete_address_reloads
	.type	delete_address_reloads_1, @function
delete_address_reloads_1:
.LFB77:
	.loc 1 7810 0
	pushl	%ebp
.LCFI305:
	movl	%esp, %ebp
.LCFI306:
	pushl	%ebx
.LCFI307:
	subl	$52, %esp
.LCFI308:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7813 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -12(%ebp)
	.loc 1 7815 0
	cmpl	$71, -12(%ebp)
	je	.L3292
.LBB221:
	.loc 1 7817 0
	movl	-12(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -8(%ebp)
	.loc 1 7818 0
	movl	-12(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3294
.L3295:
	.loc 1 7820 0
	movl	-20(%ebp), %eax
	addl	-8(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L3296
	.loc 1 7821 0
	movl	-20(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads_1
	jmp	.L3298
.L3296:
	.loc 1 7822 0
	movl	-20(%ebp), %eax
	addl	-8(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L3298
	.loc 1 7824 0
	movl	-20(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L3300
.L3301:
	.loc 1 7825 0
	movl	-20(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads_1
	.loc 1 7824 0
	subl	$1, -16(%ebp)
.L3300:
	cmpl	$0, -16(%ebp)
	jns	.L3301
.L3298:
	.loc 1 7818 0
	subl	$1, -20(%ebp)
.L3294:
	cmpl	$0, -20(%ebp)
	jns	.L3295
	.loc 1 7829 0
	jmp	.L3359
.L3292:
.LBE221:
	.loc 1 7832 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	spill_reg_order@GOTOFF(%ebx,%eax,2), %eax
	testw	%ax, %ax
	js	.L3359
	.loc 1 7837 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L3305
.L3306:
	.loc 1 7839 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -12(%ebp)
	.loc 1 7840 0
	cmpl	$46, -12(%ebp)
	je	.L3359
	cmpl	$43, -12(%ebp)
	jne	.L3309
	.loc 1 7841 0
	jmp	.L3359
.L3309:
	.loc 1 7842 0
	movl	-12(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$105, %al
	jne	.L3310
	.loc 1 7844 0
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L3312
	.loc 1 7846 0
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	jne	.L3359
.L3310:
	.loc 1 7837 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -36(%ebp)
.L3305:
	cmpl	$0, -36(%ebp)
	jne	.L3306
.L3312:
	.loc 1 7849 0
	cmpl	$0, -36(%ebp)
	je	.L3359
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	reload_first_uid@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jge	.L3316
	.loc 1 7850 0
	jmp	.L3359
.L3316:
	.loc 1 7852 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3317
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3319
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L3321
.L3319:
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -40(%ebp)
.L3321:
	movl	-40(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L3322
.L3317:
	movl	$0, -44(%ebp)
.L3322:
	movl	-44(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 7853 0
	cmpl	$0, -32(%ebp)
	je	.L3359
	.loc 1 7855 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 7856 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3359
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L3326
	.loc 1 7858 0
	jmp	.L3359
.L3326:
	.loc 1 7859 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L3327
	.loc 1 7863 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3329
.L3330:
	.loc 1 7865 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L3327
	.loc 1 7867 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3332
	.loc 1 7869 0
	movl	-24(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L3334
	.loc 1 7875 0
	movl	-24(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3359
	.loc 1 7877 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L3338
.L3339:
	.loc 1 7878 0
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	jne	.L3340
	movl	-16(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L3359
.L3340:
	movl	-16(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	-28(%ebp), %eax
	jne	.L3343
	.loc 1 7880 0
	jmp	.L3359
.L3343:
	.loc 1 7877 0
	subl	$1, -16(%ebp)
.L3338:
	cmpl	$0, -16(%ebp)
	jns	.L3339
	.loc 1 7881 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L3345
.L3346:
	.loc 1 7882 0
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	movl	(%eax,%edx), %eax
	testl	%eax, %eax
	je	.L3347
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	je	.L3349
.L3347:
	.loc 1 7881 0
	subl	$1, -16(%ebp)
.L3345:
	cmpl	$0, -16(%ebp)
	jns	.L3346
.L3349:
	.loc 1 7884 0
	cmpl	$0, -16(%ebp)
	jns	.L3327
	.loc 1 7887 0
	jmp	.L3359
.L3334:
	.loc 1 7889 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	je	.L3327
	.loc 1 7894 0
	movl	-24(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3351
	.loc 1 7896 0
	movl	n_reloads@GOT(%ebx), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L3353
.L3354:
	.loc 1 7897 0
	movl	-16(%ebp), %eax
	movl	rld@GOT(%ebx), %edx
	imull	$76, %eax, %eax
	addl	%edx, %eax
	addl	$44, %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	jne	.L3355
	movl	-16(%ebp), %eax
	movl	reload_inherited@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L3359
.L3355:
	movl	-16(%ebp), %eax
	movl	reload_override_in@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	-28(%ebp), %eax
	jne	.L3358
	.loc 1 7899 0
	jmp	.L3359
.L3358:
	.loc 1 7896 0
	subl	$1, -16(%ebp)
.L3353:
	cmpl	$0, -16(%ebp)
	jns	.L3354
.L3351:
	.loc 1 7906 0
	movl	-24(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L3327
.L3332:
	.loc 1 7863 0
	movl	-24(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
.L3329:
	cmpl	$0, -24(%ebp)
	jne	.L3330
.L3327:
	.loc 1 7910 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_address_reloads_1
	.loc 1 7911 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	$-1, reg_reloaded_contents@GOTOFF(%ebx,%eax,4)
	.loc 1 7912 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
.L3359:
	.loc 1 7913 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE77:
	.size	delete_address_reloads_1, .-delete_address_reloads_1
	.type	inc_for_reload, @function
inc_for_reload:
.LFB78:
	.loc 1 7931 0
	pushl	%ebp
.LCFI309:
	movl	%esp, %ebp
.LCFI310:
	pushl	%ebx
.LCFI311:
	subl	$68, %esp
.LCFI312:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7933 0
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 7935 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	je	.L3361
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$109, %ax
	jne	.L3363
.L3361:
	movl	$1, -52(%ebp)
	jmp	.L3364
.L3363:
	movl	$0, -52(%ebp)
.L3364:
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 7941 0
	movl	12(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3365
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3367
.L3365:
	movl	12(%ebp), %eax
	movl	%eax, -48(%ebp)
.L3367:
	movl	-48(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 7947 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3368
	.loc 1 7948 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_reload_reg@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
.L3368:
	.loc 1 7950 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L3370
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L3372
.L3370:
	.loc 1 7951 0
	negl	20(%ebp)
.L3372:
	.loc 1 7953 0
	movl	20(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -24(%ebp)
	.loc 1 7956 0
	cmpl	$0, -32(%ebp)
	je	.L3373
	movl	-8(%ebp), %eax
	cmpl	8(%ebp), %eax
	je	.L3373
	.loc 1 7957 0
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L3373:
	.loc 1 7959 0
	movl	12(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3376
	.loc 1 7964 0
	call	get_last_insn@PLT
	movl	%eax, -28(%ebp)
	.loc 1 7965 0
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -20(%ebp)
	.loc 1 7969 0
	movl	-20(%ebp), %eax
	movl	52(%eax), %eax
	testl	%eax, %eax
	js	.L3378
	movl	-20(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L3380
.L3378:
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_memoized_1@PLT
	movl	%eax, -44(%ebp)
.L3380:
	movl	-44(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 7970 0
	cmpl	$0, -16(%ebp)
	js	.L3381
	.loc 1 7972 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	.loc 1 7973 0
	movl	$1, (%esp)
	call	constrain_operands@PLT
	testl	%eax, %eax
	je	.L3381
	.loc 1 7979 0
	cmpl	$0, -32(%ebp)
	jne	.L3384
	.loc 1 7980 0
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L3384:
	.loc 1 7982 0
	movl	-20(%ebp), %eax
	movl	%eax, -40(%ebp)
	jmp	.L3386
.L3381:
	.loc 1 7985 0
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insns_since@PLT
.L3376:
	.loc 1 7993 0
	cmpl	$0, -32(%ebp)
	jne	.L3387
	.loc 1 7995 0
	movl	12(%ebp), %eax
	cmpl	8(%ebp), %eax
	je	.L3389
	.loc 1 7996 0
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L3389:
	.loc 1 7997 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 7998 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -12(%ebp)
	jmp	.L3391
.L3387:
	.loc 1 8011 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 8012 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -12(%ebp)
	.loc 1 8013 0
	movl	20(%ebp), %eax
	negl	%eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L3391:
	.loc 1 8016 0
	movl	-12(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3386:
	movl	-40(%ebp), %eax
	.loc 1 8017 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE78:
	.size	inc_for_reload, .-inc_for_reload
	.type	reload_cse_noop_set_p, @function
reload_cse_noop_set_p:
.LFB79:
	.loc 1 8024 0
	pushl	%ebp
.LCFI313:
	movl	%esp, %ebp
.LCFI314:
	pushl	%ebx
.LCFI315:
	subl	$20, %esp
.LCFI316:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8025 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_for_cselib_p@PLT
	.loc 1 8026 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE79:
	.size	reload_cse_noop_set_p, .-reload_cse_noop_set_p
	.type	reload_cse_simplify, @function
reload_cse_simplify:
.LFB80:
	.loc 1 8033 0
	pushl	%ebp
.LCFI317:
	movl	%esp, %ebp
.LCFI318:
	pushl	%ebx
.LCFI319:
	subl	$52, %esp
.LCFI320:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8034 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 8036 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3396
.LBB222:
	.loc 1 8038 0
	movl	$0, -28(%ebp)
	.loc 1 8045 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_simplify_set
	addl	%eax, -28(%ebp)
	.loc 1 8047 0
	cmpl	$0, -28(%ebp)
	jne	.L3398
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_noop_set_p
	testl	%eax, %eax
	je	.L3398
.LBB223:
	.loc 1 8049 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 8050 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3401
	movl	-24(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	jne	.L3401
	.loc 1 8052 0
	movl	$0, -24(%ebp)
.L3401:
	.loc 1 8053 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn_and_edges@PLT
	.loc 1 8054 0
	jmp	.L3429
.L3398:
.LBE223:
	.loc 1 8057 0
	cmpl	$0, -28(%ebp)
	jle	.L3405
	.loc 1 8058 0
	call	apply_change_group@PLT
	jmp	.L3429
.L3405:
	.loc 1 8060 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_simplify_operands
	jmp	.L3429
.L3396:
.LBE222:
	.loc 1 8062 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L3429
.LBB224:
	.loc 1 8065 0
	movl	$0, -16(%ebp)
	.loc 1 8066 0
	movl	$0, -12(%ebp)
	.loc 1 8070 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3409
.L3410:
.LBB225:
	.loc 1 8072 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, -8(%ebp)
	.loc 1 8073 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3411
	.loc 1 8075 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_noop_set_p
	testl	%eax, %eax
	je	.L3413
	.loc 1 8077 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3419
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	3(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	je	.L3419
	.loc 1 8080 0
	cmpl	$0, -12(%ebp)
	jne	.L3413
	.loc 1 8082 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	jmp	.L3419
.L3411:
	.loc 1 8085 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L3413
.L3419:
.LBE225:
	.loc 1 8070 0
	subl	$1, -20(%ebp)
.L3409:
	cmpl	$0, -20(%ebp)
	jns	.L3410
.L3413:
	.loc 1 8089 0
	cmpl	$0, -20(%ebp)
	jns	.L3420
	.loc 1 8091 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn_and_edges@PLT
	.loc 1 8093 0
	jmp	.L3429
.L3420:
	.loc 1 8097 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3422
.L3423:
	.loc 1 8098 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3424
	.loc 1 8099 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_cse_simplify_set
	addl	%eax, -16(%ebp)
.L3424:
	.loc 1 8097 0
	subl	$1, -20(%ebp)
.L3422:
	cmpl	$0, -20(%ebp)
	jns	.L3423
	.loc 1 8101 0
	cmpl	$0, -16(%ebp)
	jle	.L3427
	.loc 1 8102 0
	call	apply_change_group@PLT
	jmp	.L3429
.L3427:
	.loc 1 8104 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_simplify_operands
.L3429:
.LBE224:
	.loc 1 8106 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE80:
	.size	reload_cse_simplify, .-reload_cse_simplify
	.type	reload_cse_regs_1, @function
reload_cse_regs_1:
.LFB81:
	.loc 1 8128 0
	pushl	%ebp
.LCFI321:
	movl	%esp, %ebp
.LCFI322:
	pushl	%ebx
.LCFI323:
	subl	$36, %esp
.LCFI324:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8130 0
	movl	$-1, 4(%esp)
	movl	$0, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -8(%ebp)
	.loc 1 8132 0
	call	cselib_init@PLT
	.loc 1 8133 0
	call	init_alias_analysis@PLT
	.loc 1 8135 0
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L3431
.L3432:
	.loc 1 8137 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3433
	.loc 1 8138 0
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_simplify
.L3433:
	.loc 1 8140 0
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	cselib_process_insn@PLT
	.loc 1 8135 0
	movl	-12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -12(%ebp)
.L3431:
	cmpl	$0, -12(%ebp)
	jne	.L3432
	.loc 1 8144 0
	call	end_alias_analysis@PLT
	.loc 1 8145 0
	call	cselib_finish@PLT
	.loc 1 8146 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE81:
	.size	reload_cse_regs_1, .-reload_cse_regs_1
.globl reload_cse_regs
	.type	reload_cse_regs, @function
reload_cse_regs:
.LFB82:
	.loc 1 8153 0
	pushl	%ebp
.LCFI325:
	movl	%esp, %ebp
.LCFI326:
	pushl	%ebx
.LCFI327:
	subl	$4, %esp
.LCFI328:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8154 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_regs_1
	.loc 1 8155 0
	call	reload_combine
	.loc 1 8156 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_move2add
	.loc 1 8157 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3440
	.loc 1 8158 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reload_cse_regs_1
.L3440:
	.loc 1 8159 0
	addl	$4, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE82:
	.size	reload_cse_regs, .-reload_cse_regs
	.section	.rodata
	.type	__FUNCTION__.25911, @object
	.size	__FUNCTION__.25911, 24
__FUNCTION__.25911:
	.string	"reload_cse_simplify_set"
	.text
	.type	reload_cse_simplify_set, @function
reload_cse_simplify_set:
.LFB83:
	.loc 1 8171 0
	pushl	%ebp
.LCFI329:
	movl	%esp, %ebp
.LCFI330:
	pushl	%edi
.LCFI331:
	pushl	%esi
.LCFI332:
	pushl	%ebx
.LCFI333:
	subl	$124, %esp
.LCFI334:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8172 0
	movl	$0, -60(%ebp)
	.loc 1 8180 0
	movl	$1, -32(%ebp)
	.loc 1 8183 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -56(%ebp)
	.loc 1 8184 0
	cmpl	$0, -56(%ebp)
	jns	.L3442
	.loc 1 8185 0
	movl	$0, -116(%ebp)
	jmp	.L3444
.L3442:
	.loc 1 8187 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 8188 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L3445
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	testl	%eax, %eax
	js	.L3447
.L3445:
	.loc 1 8189 0
	movl	$0, -116(%ebp)
	jmp	.L3444
.L3447:
	.loc 1 8191 0
	movl	-56(%ebp), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -48(%ebp)
	.loc 1 8198 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3448
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -112(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3450
	movl	$64, -108(%ebp)
	jmp	.L3452
.L3450:
	movl	$32, -108(%ebp)
.L3452:
	movl	-108(%ebp), %eax
	cmpl	%eax, -112(%ebp)
	jge	.L3448
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3454
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3456
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L3454
.L3456:
	movl	$130, -104(%ebp)
	jmp	.L3458
.L3454:
	movl	$131, -104(%ebp)
.L3458:
	movl	-104(%ebp), %esi
	movl	%esi, -32(%ebp)
	cmpl	$1, -32(%ebp)
	je	.L3448
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3448
	.loc 1 8202 0
	movl	$0, -116(%ebp)
	jmp	.L3444
.L3448:
	.loc 1 8206 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3461
	.loc 1 8207 0
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L3463
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L3465
.L3463:
	movl	$6, -100(%ebp)
	jmp	.L3466
.L3465:
	movl	$4, -100(%ebp)
.L3466:
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$1, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	memory_move_secondary_cost@PLT
	addl	-100(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L3467
.L3461:
	.loc 1 8208 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3468
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3476
.L3468:
	.loc 1 8209 0
	movl	$57, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, -44(%ebp)
	.loc 1 8208 0
	jmp	.L3467
.L3476:
	.loc 1 8210 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3477
	.loc 1 8211 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	mips_register_move_cost@PLT
	movl	%eax, -44(%ebp)
	jmp	.L3467
.L3477:
	.loc 1 8215 0
	movl	$57, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, -44(%ebp)
.L3467:
	.loc 1 8217 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	cselib_lookup@PLT
	movl	%eax, -40(%ebp)
	.loc 1 8218 0
	cmpl	$0, -40(%ebp)
	jne	.L3479
	.loc 1 8219 0
	movl	$0, -116(%ebp)
	jmp	.L3444
.L3479:
	.loc 1 8220 0
	movl	-40(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L3481
.L3482:
.LBB226:
	.loc 1 8222 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 8225 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3483
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3491
.L3483:
	movl	$0, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	references_value_p@PLT
	testl	%eax, %eax
	jne	.L3491
	.loc 1 8228 0
	cmpl	$1, -32(%ebp)
	je	.L3493
.LBB227:
	.loc 1 8234 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3495
	.loc 1 8237 0
	movl	-28(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 8238 0
	movl	-32(%ebp), %edi
	movl	%edi, -120(%ebp)
	cmpl	$130, -120(%ebp)
	je	.L3498
	cmpl	$131, -120(%ebp)
	je	.L3499
	jmp	.L3497
.L3499:
	.loc 1 8241 0
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -96(%ebp)
	movl	%edi, -92(%ebp)
	movl	-72(%ebp), %esi
	movl	-68(%ebp), %edi
	movl	-96(%ebp), %eax
	andl	%esi, %eax
	movl	-92(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 8242 0
	jmp	.L3500
.L3498:
	.loc 1 8245 0
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%edx, %ecx
	xorl	-68(%ebp), %ecx
	xorl	-72(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L3500
.L3497:
	.loc 1 8248 0
	leal	__FUNCTION__.25911@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8248, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3500:
	.loc 1 8250 0
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -28(%ebp)
.L3493:
.LBE227:
	.loc 1 8253 0
	movl	$57, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, -24(%ebp)
	.loc 1 8225 0
	jmp	.L3501
.L3491:
	.loc 1 8255 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3495
	.loc 1 8258 0
	cmpl	$1, -32(%ebp)
	je	.L3503
	.loc 1 8260 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -28(%ebp)
	.loc 1 8261 0
	movl	$57, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, -24(%ebp)
	jmp	.L3501
.L3503:
	.loc 1 8265 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	mips_register_move_cost@PLT
	movl	%eax, -24(%ebp)
.L3501:
	.loc 1 8274 0
	movl	-24(%ebp), %eax
	cmpl	-44(%ebp), %eax
	jl	.L3505
	movl	-24(%ebp), %eax
	cmpl	-44(%ebp), %eax
	jne	.L3495
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3495
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3495
.L3505:
	.loc 1 8280 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -88(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3509
	movl	$64, -84(%ebp)
	jmp	.L3511
.L3509:
	movl	$32, -84(%ebp)
.L3511:
	movl	-84(%ebp), %edi
	cmpl	%edi, -88(%ebp)
	jge	.L3512
	cmpl	$1, -32(%ebp)
	je	.L3512
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_cannot_change_mode_class@PLT
	xorl	$1, %eax
	testb	%al, %al
	je	.L3512
.LBB228:
	.loc 1 8289 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -20(%ebp)
	.loc 1 8290 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%edx, 12(%eax)
	.loc 1 8291 0
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	$1, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
.L3512:
.LBE228:
	.loc 1 8295 0
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	$1, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	.loc 1 8296 0
	movl	-24(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	$1, -60(%ebp)
.L3495:
.LBE226:
	.loc 1 8220 0
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
.L3481:
	cmpl	$0, -36(%ebp)
	jne	.L3482
	.loc 1 8300 0
	movl	-60(%ebp), %eax
	movl	%eax, -116(%ebp)
.L3444:
	movl	-116(%ebp), %eax
	.loc 1 8301 0
	addl	$124, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE83:
	.size	reload_cse_simplify_set, .-reload_cse_simplify_set
	.section	.rodata
	.type	__FUNCTION__.26111, @object
	.size	__FUNCTION__.26111, 29
__FUNCTION__.26111:
	.string	"reload_cse_simplify_operands"
	.text
	.type	reload_cse_simplify_operands, @function
reload_cse_simplify_operands:
.LFB84:
	.loc 1 8318 0
	pushl	%ebp
.LCFI335:
	movl	%esp, %ebp
.LCFI336:
	pushl	%edi
.LCFI337:
	pushl	%esi
.LCFI338:
	pushl	%ebx
.LCFI339:
	subl	$1132, %esp
.LCFI340:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -1076(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -1080(%ebp)
	.loc 1 8318 0
	movl	%gs:20, %eax
	movl	%eax, -20(%ebp)
	xorl	%eax, %eax
	.loc 1 8338 0
	movl	-1076(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_insn@PLT
	.loc 1 8340 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	testb	%al, %al
	je	.L3519
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	testb	%al, %al
	jne	.L3521
.L3519:
	.loc 1 8341 0
	movl	$0, -1120(%ebp)
	jmp	.L3522
.L3521:
	.loc 1 8344 0
	movl	$1, (%esp)
	call	constrain_operands@PLT
	testl	%eax, %eax
	jne	.L3523
	.loc 1 8345 0
	leal	__FUNCTION__.26111@GOTOFF(%ebx), %eax
	movl	%eax, 12(%esp)
	movl	$8345, 8(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	-1076(%ebp), %eax
	movl	%eax, (%esp)
	call	_fatal_insn_not_found@PLT
.L3523:
	.loc 1 8347 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %edx
	movl	%edx, -1116(%ebp)
	movl	-1116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1116(%ebp)
	movl	-1116(%ebp), %ecx
	movl	%ecx, -100(%ebp)
	.loc 1 8348 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -1112(%ebp)
	movl	-1112(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1112(%ebp)
	movl	-1112(%ebp), %edx
	movl	%edx, -96(%ebp)
	.loc 1 8349 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %ecx
	movl	%ecx, -1108(%ebp)
	movl	-1108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1108(%ebp)
	movl	-1108(%ebp), %eax
	movl	%eax, -92(%ebp)
	.loc 1 8350 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	leal	0(,%eax,4), %edx
	movl	-100(%ebp), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 8351 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	leal	0(,%eax,4), %edx
	movl	-96(%ebp), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 8354 0
	movl	$0, -108(%ebp)
	jmp	.L3525
.L3526:
.LBB229:
.LBB230:
	.loc 1 8359 0
	movl	-108(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	leal	-1072(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-80(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-80(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE230:
	.loc 1 8364 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L3527
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3529
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3537
.L3529:
	movl	-108(%ebp), %eax
	movl	recog_data@GOT(%ebx), %edx
	movl	360(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L3527
.L3537:
	.loc 1 8369 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	360(%eax,%edx,4), %ecx
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	cselib_lookup@PLT
	movl	%eax, -88(%ebp)
	.loc 1 8370 0
	cmpl	$0, -88(%ebp)
	je	.L3527
	.loc 1 8373 0
	movl	-88(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L3539
.L3540:
	.loc 1 8374 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3541
	.loc 1 8375 0
	movl	-108(%ebp), %edx
	movl	%edx, -1104(%ebp)
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	shrl	$6, %eax
	movl	%eax, -1100(%ebp)
	movl	-108(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	-1072(%ebp,%eax,8), %edx
	movl	-1068(%ebp,%eax,8), %ecx
	movl	%edx, -1096(%ebp)
	movl	%ecx, -1092(%ebp)
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3608
	movl	%esi, %edi
	xorl	%esi, %esi
.L3608:
	movl	-1096(%ebp), %eax
	orl	%esi, %eax
	movl	-1092(%ebp), %edx
	orl	%edi, %edx
	movl	-1104(%ebp), %ecx
	addl	%ecx, %ecx
	addl	-1104(%ebp), %ecx
	addl	-1100(%ebp), %ecx
	movl	%eax, -1072(%ebp,%ecx,8)
	movl	%edx, -1068(%ebp,%ecx,8)
.L3541:
	.loc 1 8373 0
	movl	-84(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
.L3539:
	cmpl	$0, -84(%ebp)
	jne	.L3540
.L3527:
.LBE229:
	.loc 1 8354 0
	addl	$1, -108(%ebp)
.L3525:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	movzbl	%al, %eax
	cmpl	-108(%ebp), %eax
	jg	.L3526
	.loc 1 8378 0
	movl	$0, -108(%ebp)
	jmp	.L3544
.L3545:
.LBB231:
	.loc 1 8384 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %ecx
	movl	%ecx, -1088(%ebp)
	movl	-1088(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1088(%ebp)
	movl	-1088(%ebp), %eax
	movl	%eax, -348(%ebp,%edx,4)
	.loc 1 8385 0
	movl	$0, -104(%ebp)
	jmp	.L3546
.L3547:
	.loc 1 8386 0
	movl	-108(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	$-1, (%eax)
	.loc 1 8385 0
	addl	$1, -104(%ebp)
.L3546:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	cmpl	-104(%ebp), %eax
	jg	.L3547
	.loc 1 8388 0
	movl	-108(%ebp), %ecx
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	240(%eax,%edx,4), %eax
	movl	%eax, -228(%ebp,%ecx,4)
	movl	-228(%ebp,%ecx,4), %eax
	movl	%eax, -68(%ebp)
	.loc 1 8389 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	360(%eax,%edx,4), %eax
	movl	%eax, -76(%ebp)
	.loc 1 8393 0
	movl	$0, -104(%ebp)
	.loc 1 8394 0
	jmp	.L3606
.L3550:
.LBB232:
	.loc 1 8396 0
	movl	-68(%ebp), %eax
	movzbl	(%eax), %eax
	movb	%al, -22(%ebp)
	addl	$1, -68(%ebp)
	.loc 1 8397 0
	cmpb	$44, -22(%ebp)
	jne	.L3551
	.loc 1 8398 0
	addl	$1, -104(%ebp)
	jmp	.L3549
.L3551:
	.loc 1 8399 0
	cmpb	$63, -22(%ebp)
	jne	.L3553
	.loc 1 8400 0
	movl	-104(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-100(%ebp), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	addl	-100(%ebp), %eax
	movl	(%eax), %eax
	addl	$3, %eax
	movl	%eax, (%edx)
	jmp	.L3549
.L3553:
	.loc 1 8401 0
	cmpb	$33, -22(%ebp)
	jne	.L3549
	.loc 1 8402 0
	movl	-104(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-100(%ebp), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	addl	-100(%ebp), %eax
	movl	(%eax), %eax
	addl	$300, %eax
	movl	%eax, (%edx)
.L3549:
.L3606:
.LBE232:
	.loc 1 8394 0
	movl	-68(%ebp), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	jne	.L3550
	.loc 1 8407 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, (%esp)
	call	true_regnum@PLT
	movl	%eax, -72(%ebp)
	.loc 1 8408 0
	cmpl	$0, -72(%ebp)
	jns	.L3557
	movl	-108(%ebp), %eax
	movl	-228(%ebp,%eax,4), %eax
	movzbl	(%eax), %eax
	cmpb	$61, %al
	je	.L3557
	movl	-108(%ebp), %eax
	movl	-228(%ebp,%eax,4), %eax
	movzbl	(%eax), %eax
	cmpb	$43, %al
	je	.L3557
	.loc 1 8413 0
	movl	$0, -72(%ebp)
	jmp	.L3561
.L3562:
.LBB233:
	.loc 1 8415 0
	movl	$0, -64(%ebp)
	.loc 1 8417 0
	movl	-108(%ebp), %edx
	movl	-72(%ebp), %eax
	movl	%eax, %ecx
	shrl	$6, %ecx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	addl	%ecx, %eax
	movl	-1068(%ebp,%eax,8), %edx
	movl	-1072(%ebp,%eax,8), %eax
	movl	-72(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3607
	movl	%edx, %eax
	xorl	%edx, %edx
.L3607:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L3563
	.loc 1 8420 0
	movl	-72(%ebp), %edx
	movl	-1080(%ebp), %eax
	movl	%edx, 4(%eax)
	.loc 1 8421 0
	movl	-76(%ebp), %eax
	movl	%eax, %edx
	movl	-1080(%ebp), %eax
	movb	%dl, 2(%eax)
	.loc 1 8426 0
	movl	$0, -104(%ebp)
	.loc 1 8427 0
	movl	-108(%ebp), %eax
	movl	-228(%ebp,%eax,4), %eax
	movl	%eax, -68(%ebp)
.L3565:
.LBB234:
	.loc 1 8430 0
	movl	-68(%ebp), %eax
	movzbl	(%eax), %eax
	movb	%al, -21(%ebp)
	addl	$1, -68(%ebp)
	.loc 1 8432 0
	movzbl	-21(%ebp), %eax
	movl	%eax, -1084(%ebp)
	cmpl	$115, -1084(%ebp)
	ja	.L3566
	movl	-1084(%ebp), %eax
	sall	$2, %eax
	movl	.L3570@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3570:
	.long	.L3567@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3567@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3569@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3571@GOTOFF
	.long	.L3566@GOTOFF
	.long	.L3569@GOTOFF
	.long	.L3571@GOTOFF
	.text
.L3569:
	.loc 1 8449 0
	movl	-64(%ebp), %eax
	movl	reg_class_subunion@GOT(%ebx), %edx
	imull	$100, %eax, %eax
	addl	%edx, %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 8450 0
	jmp	.L3571
.L3566:
	.loc 1 8453 0
	movl	-64(%ebp), %ecx
	movzbl	-21(%ebp), %edx
	movl	mips_char_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, %esi
	movl	reg_class_subunion@GOT(%ebx), %edi
	movl	%ecx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	leal	0(,%eax,4), %edx
	addl	%edx, %eax
	addl	%esi, %eax
	movl	(%edi,%eax,4), %eax
	movl	%eax, -64(%ebp)
	.loc 1 8455 0
	jmp	.L3571
.L3567:
	.loc 1 8462 0
	movl	-108(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	$-1, %eax
	jne	.L3572
	movl	-64(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-1080(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_fits_class_p@PLT
	testl	%eax, %eax
	je	.L3572
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3575
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	$57, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, %esi
	movl	$57, 4(%esp)
	movl	-1080(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	cmpl	%eax, %esi
	jle	.L3572
.L3575:
	.loc 1 8468 0
	movl	-104(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-96(%ebp), %edx
	movl	(%edx), %eax
	addl	$1, %eax
	movl	%eax, (%edx)
	.loc 1 8469 0
	movl	-108(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	-72(%ebp), %eax
	movl	%eax, (%edx)
.L3572:
	.loc 1 8471 0
	addl	$1, -104(%ebp)
.L3571:
	.loc 1 8475 0
	cmpb	$0, -21(%ebp)
	je	.L3563
	.loc 1 8477 0
	jmp	.L3565
.L3563:
.LBE234:
.LBE233:
	.loc 1 8413 0
	addl	$1, -72(%ebp)
.L3561:
	cmpl	$175, -72(%ebp)
	jle	.L3562
.L3557:
.LBE231:
	.loc 1 8378 0
	addl	$1, -108(%ebp)
.L3544:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	movzbl	%al, %eax
	cmpl	-108(%ebp), %eax
	jg	.L3545
	.loc 1 8483 0
	movl	$0, -104(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	jmp	.L3579
.L3580:
	.loc 1 8484 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	addl	-100(%ebp), %eax
	movl	(%eax), %edx
	movl	which_alternative@GOT(%ebx), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	-100(%ebp), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jg	.L3581
	.loc 1 8485 0
	movl	-104(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-92(%ebp), %edx
	movl	-108(%ebp), %eax
	movl	%eax, (%edx)
	addl	$1, -104(%ebp)
.L3581:
	.loc 1 8483 0
	addl	$1, -108(%ebp)
.L3579:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	cmpl	-108(%ebp), %eax
	jg	.L3580
	.loc 1 8486 0
	movl	-104(%ebp), %eax
	movl	%eax, %edx
	movl	recog_data@GOT(%ebx), %eax
	movb	%dl, 612(%eax)
	.loc 1 8490 0
	movl	$0, -108(%ebp)
	jmp	.L3584
.L3585:
.LBB235:
	.loc 1 8492 0
	movl	-108(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 8493 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	addl	-92(%ebp), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	-100(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 8494 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	addl	-92(%ebp), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 8497 0
	movl	-108(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -104(%ebp)
	jmp	.L3586
.L3587:
.LBB236:
	.loc 1 8499 0
	movl	-104(%ebp), %eax
	sall	$2, %eax
	addl	-92(%ebp), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	-100(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 8500 0
	movl	-104(%ebp), %eax
	sall	$2, %eax
	addl	-92(%ebp), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 8502 0
	movl	-44(%ebp), %eax
	cmpl	-56(%ebp), %eax
	jl	.L3588
	movl	-44(%ebp), %eax
	cmpl	-56(%ebp), %eax
	jne	.L3590
	movl	-40(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jge	.L3590
.L3588:
	.loc 1 8505 0
	movl	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 8506 0
	movl	-44(%ebp), %eax
	movl	%eax, -56(%ebp)
	.loc 1 8507 0
	movl	-40(%ebp), %eax
	movl	%eax, -52(%ebp)
.L3590:
.LBE236:
	.loc 1 8497 0
	addl	$1, -104(%ebp)
.L3586:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	cmpl	-104(%ebp), %eax
	jg	.L3587
	.loc 1 8511 0
	movl	-60(%ebp), %eax
	sall	$2, %eax
	addl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 8512 0
	movl	-60(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-92(%ebp), %edx
	movl	-108(%ebp), %eax
	sall	$2, %eax
	addl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, (%edx)
	.loc 1 8513 0
	movl	-108(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-92(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, (%edx)
.LBE235:
	.loc 1 8490 0
	addl	$1, -108(%ebp)
.L3584:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	612(%eax), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	cmpl	-108(%ebp), %eax
	jg	.L3585
	.loc 1 8518 0
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 8520 0
	movl	$0, -108(%ebp)
	jmp	.L3594
.L3595:
.LBB237:
	.loc 1 8522 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	360(%eax,%edx,4), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8523 0
	movl	-108(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	$-1, %eax
	je	.L3596
	.loc 1 8526 0
	movl	-108(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, %ecx
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	120(%eax,%edx,4), %eax
	movl	$1, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-1076(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
.L3596:
.LBE237:
	.loc 1 8520 0
	addl	$1, -108(%ebp)
.L3594:
	movl	recog_data@GOT(%ebx), %eax
	movzbl	610(%eax), %eax
	movzbl	%al, %eax
	cmpl	-108(%ebp), %eax
	jg	.L3595
	.loc 1 8530 0
	movl	recog_data@GOT(%ebx), %eax
	movzbl	611(%eax), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -108(%ebp)
	jmp	.L3599
.L3600:
.LBB238:
	.loc 1 8532 0
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movzbl	608(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 8533 0
	movl	-32(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	360(%eax,%edx,4), %eax
	movl	%eax, -28(%ebp)
	.loc 1 8535 0
	movl	-32(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	$-1, %eax
	je	.L3601
	.loc 1 8538 0
	movl	-32(%ebp), %eax
	movl	-348(%ebp,%eax,4), %edx
	movl	-104(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, %ecx
	movl	-108(%ebp), %edx
	movl	recog_data@GOT(%ebx), %eax
	movl	600(%eax,%edx,4), %eax
	movl	$1, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-1076(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
.L3601:
.LBE238:
	.loc 1 8530 0
	subl	$1, -108(%ebp)
.L3599:
	cmpl	$0, -108(%ebp)
	jns	.L3600
	.loc 1 8542 0
	call	apply_change_group@PLT
	movl	%eax, -1120(%ebp)
.L3522:
	movl	-1120(%ebp), %eax
	.loc 1 8543 0
	movl	-20(%ebp), %edx
	xorl	%gs:20, %edx
	je	.L3605
	call	__stack_chk_fail_local
.L3605:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE84:
	.size	reload_cse_simplify_operands, .-reload_cse_simplify_operands
	.type	reload_combine, @function
reload_combine:
.LFB85:
	.loc 1 8588 0
	pushl	%ebp
.LCFI341:
	movl	%esp, %ebp
.LCFI342:
	pushl	%edi
.LCFI343:
	pushl	%esi
.LCFI344:
	pushl	%ebx
.LCFI345:
	subl	$284, %esp
.LCFI346:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8590 0
	movl	$-1, -156(%ebp)
	.loc 1 8591 0
	movl	$0, -152(%ebp)
	.loc 1 8607 0
	movl	$0, -140(%ebp)
	jmp	.L3610
.L3611:
	.loc 1 8608 0
	movl	-140(%ebp), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	reg_class_contents@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-140(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3736
	movl	%edx, %eax
	xorl	%edx, %edx
.L3736:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L3612
	.loc 1 8610 0
	cmpl	$-1, -156(%ebp)
	jne	.L3614
	.loc 1 8611 0
	movl	-140(%ebp), %eax
	movl	%eax, -156(%ebp)
.L3614:
	.loc 1 8613 0
	movl	-140(%ebp), %eax
	movl	%eax, -152(%ebp)
.L3612:
	.loc 1 8607 0
	addl	$1, -140(%ebp)
.L3610:
	cmpl	$175, -140(%ebp)
	jbe	.L3611
	.loc 1 8617 0
	cmpl	$-1, -156(%ebp)
	je	.L3730
	.loc 1 8624 0
	call	get_first_label_num@PLT
	movl	%eax, -132(%ebp)
	.loc 1 8625 0
	call	max_label_num@PLT
	subl	-132(%ebp), %eax
	movl	%eax, -128(%ebp)
	.loc 1 8626 0
	movl	-128(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, -124(%ebp)
.LBB239:
	.loc 1 8627 0
	leal	-192(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-120(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-120(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE239:
	.loc 1 8629 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	movl	48(%eax), %eax
	movl	%eax, -144(%ebp)
	jmp	.L3619
.L3620:
	.loc 1 8631 0
	movl	-144(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -164(%ebp)
	.loc 1 8632 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L3621
.LBB240:
.LBB241:
	.loc 1 8636 0
	leal	-216(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-116(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-116(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE241:
	movl	-144(%ebp), %eax
	movl	32(%eax), %eax
	movl	%eax, 4(%esp)
	leal	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_to_hard_reg_set@PLT
	.loc 1 8638 0
	movl	-144(%ebp), %eax
	movl	32(%eax), %eax
	movl	%eax, 4(%esp)
	leal	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	compute_use_by_pseudos@PLT
.LBB242:
	.loc 1 8640 0
	movl	-164(%ebp), %eax
	movl	52(%eax), %eax
	subl	-132(%ebp), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	addl	-124(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-112(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-112(%ebp), %ecx
	addl	$8, %ecx
	movl	-108(%ebp), %eax
	addl	$8, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-112(%ebp), %ecx
	addl	$16, %ecx
	movl	-108(%ebp), %eax
	addl	$16, %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.LBE242:
.LBB243:
	.loc 1 8641 0
	leal	-192(%ebp), %eax
	movl	%eax, -104(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -272(%ebp)
	movl	%ecx, -268(%ebp)
	movl	-100(%ebp), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-272(%ebp), %eax
	orl	%esi, %eax
	movl	-268(%ebp), %edx
	orl	%edi, %edx
	movl	-104(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-104(%ebp), %ecx
	addl	$8, %ecx
	movl	-104(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -264(%ebp)
	movl	%edi, -260(%ebp)
	movl	-100(%ebp), %eax
	addl	$8, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-264(%ebp), %eax
	orl	%esi, %eax
	movl	-260(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	-104(%ebp), %ecx
	addl	$16, %ecx
	movl	-104(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -256(%ebp)
	movl	%edi, -252(%ebp)
	movl	-100(%ebp), %eax
	addl	$16, %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	-256(%ebp), %eax
	orl	%esi, %eax
	movl	-252(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.L3621:
.LBE243:
.LBE240:
	.loc 1 8629 0
	movl	-144(%ebp), %eax
	movl	48(%eax), %eax
	movl	%eax, -144(%ebp)
.L3619:
	movl	entry_exit_blocks@GOT(%ebx), %eax
	cmpl	%eax, -144(%ebp)
	jne	.L3620
	.loc 1 8646 0
	movl	$0, reload_combine_ruid@GOTOFF(%ebx)
	movl	reload_combine_ruid@GOTOFF(%ebx), %eax
	movl	%eax, -136(%ebp)
	.loc 1 8647 0
	movl	$0, -140(%ebp)
	jmp	.L3624
.L3625:
	.loc 1 8649 0
	movl	-140(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
	.loc 1 8650 0
	movl	-140(%ebp), %edx
	movl	fixed_regs@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	je	.L3626
	.loc 1 8651 0
	movl	-140(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
	jmp	.L3628
.L3626:
	.loc 1 8653 0
	movl	-140(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$6, (%eax)
.L3628:
	.loc 1 8647 0
	addl	$1, -140(%ebp)
.L3624:
	cmpl	$175, -140(%ebp)
	jbe	.L3625
	.loc 1 8656 0
	call	get_last_insn@PLT
	movl	%eax, -164(%ebp)
	jmp	.L3630
.L3631:
.LBB244:
	.loc 1 8663 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L3632
	.loc 1 8664 0
	movl	reload_combine_ruid@GOTOFF(%ebx), %eax
	movl	%eax, -136(%ebp)
	jmp	.L3634
.L3632:
	.loc 1 8665 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$45, %ax
	jne	.L3634
	.loc 1 8666 0
	movl	$0, -140(%ebp)
	jmp	.L3636
.L3637:
	.loc 1 8667 0
	movl	-140(%ebp), %eax
	movl	fixed_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L3638
	.loc 1 8668 0
	movl	-140(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$6, (%eax)
.L3638:
	.loc 1 8666 0
	addl	$1, -140(%ebp)
.L3636:
	cmpl	$175, -140(%ebp)
	jbe	.L3637
.L3634:
	.loc 1 8670 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3640
	.loc 1 8673 0
	movl	reload_combine_ruid@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, reload_combine_ruid@GOTOFF(%ebx)
	.loc 1 8686 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3642
	movl	-164(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3644
	movl	-164(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -240(%ebp)
	jmp	.L3646
.L3644:
	movl	-164(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -240(%ebp)
.L3646:
	movl	-240(%ebp), %edi
	movl	%edi, -244(%ebp)
	jmp	.L3647
.L3642:
	movl	$0, -244(%ebp)
.L3647:
	movl	-244(%ebp), %eax
	movl	%eax, -160(%ebp)
	.loc 1 8687 0
	cmpl	$0, -160(%ebp)
	je	.L3648
	movl	-160(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3648
	movl	-160(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-160(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	cmpl	$1, %eax
	jne	.L3648
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3648
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3648
	movl	-160(%ebp), %eax
	movl	4(%eax), %edx
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3648
	movl	-160(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	leal	12+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	-136(%ebp), %eax
	jle	.L3648
.LBB245:
	.loc 1 8697 0
	movl	-160(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 8698 0
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -88(%ebp)
	.loc 1 8699 0
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -84(%ebp)
	.loc 1 8700 0
	movl	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_nonnote_insn@PLT
	movl	%eax, -80(%ebp)
	.loc 1 8701 0
	cmpl	$0, -80(%ebp)
	je	.L3656
	movl	-80(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3658
	movl	-80(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3660
	movl	-80(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -228(%ebp)
	jmp	.L3662
.L3660:
	movl	-80(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -228(%ebp)
.L3662:
	movl	-228(%ebp), %edx
	movl	%edx, -232(%ebp)
	jmp	.L3663
.L3658:
	movl	$0, -232(%ebp)
.L3663:
	movl	-232(%ebp), %ecx
	movl	%ecx, -236(%ebp)
	jmp	.L3664
.L3656:
	movl	$0, -236(%ebp)
.L3664:
	movl	-236(%ebp), %esi
	movl	%esi, -76(%ebp)
	.loc 1 8702 0
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 8703 0
	movl	$0, -68(%ebp)
	.loc 1 8704 0
	movl	$0, -64(%ebp)
	.loc 1 8714 0
	movl	-72(%ebp), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	reg_class_contents@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-72(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3735
	movl	%edx, %eax
	xorl	%edx, %edx
.L3735:
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L3665
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	reg_class_contents@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3734
	movl	%edx, %eax
	xorl	%edx, %edx
.L3734:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L3667
.L3665:
	.loc 1 8718 0
	movl	-92(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 8719 0
	movl	-88(%ebp), %eax
	movl	%eax, -64(%ebp)
	.loc 1 8714 0
	jmp	.L3668
.L3667:
	.loc 1 8727 0
	movl	-156(%ebp), %eax
	movl	%eax, -148(%ebp)
	jmp	.L3669
.L3670:
	.loc 1 8729 0
	movl	-148(%ebp), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	reg_class_contents@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3733
	movl	%edx, %eax
	xorl	%edx, %edx
.L3733:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L3671
	movl	-148(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	$6, %eax
	jne	.L3671
	movl	-148(%ebp), %eax
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %ecx
	movl	-72(%ebp), %eax
	leal	12+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	jg	.L3671
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	cmpl	$1, %eax
	jne	.L3671
.LBB246:
	.loc 1 8735 0
	movl	-148(%ebp), %edx
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -60(%ebp)
	.loc 1 8737 0
	movl	-60(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 8738 0
	movl	-92(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-84(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -64(%ebp)
	.loc 1 8739 0
	jmp	.L3668
.L3671:
.LBE246:
	.loc 1 8727 0
	addl	$1, -148(%ebp)
.L3669:
	movl	-148(%ebp), %eax
	cmpl	-152(%ebp), %eax
	jle	.L3670
.L3668:
	.loc 1 8747 0
	cmpl	$0, -76(%ebp)
	je	.L3648
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3648
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3648
	movl	-72(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	js	.L3648
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %ecx
	movl	-72(%ebp), %eax
	leal	12+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	cmpl	%eax, %ecx
	jg	.L3648
	cmpl	$0, -64(%ebp)
	je	.L3648
.LBB247:
	.loc 1 8759 0
	movl	-76(%ebp), %edx
	addl	$4, %edx
	movl	$1, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	.loc 1 8760 0
	movl	-72(%ebp), %eax
	leal	4+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	je	.L3682
	.loc 1 8761 0
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-72(%ebp), %eax
	leal	4+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	-76(%ebp), %edx
	addl	$12, %edx
	movl	$1, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
.L3682:
	.loc 1 8769 0
	movl	-72(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 8770 0
	jmp	.L3684
.L3685:
	.loc 1 8771 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %esi
	movl	-72(%ebp), %eax
	movl	-56(%ebp), %edx
	sall	$3, %eax
	addl	%edx, %eax
	movl	4+reg_state@GOTOFF(%ebx,%eax,8), %ecx
	movl	-72(%ebp), %eax
	movl	-56(%ebp), %edx
	sall	$3, %eax
	addl	%edx, %eax
	movl	reg_state@GOTOFF(%ebx,%eax,8), %eax
	movl	$1, 12(%esp)
	movl	%esi, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	validate_change@PLT
	.loc 1 8770 0
	addl	$1, -56(%ebp)
.L3684:
	cmpl	$5, -56(%ebp)
	jle	.L3685
	.loc 1 8777 0
	call	apply_change_group@PLT
	testl	%eax, %eax
	je	.L3648
.LBB248:
	.loc 1 8782 0
	movl	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
	.loc 1 8784 0
	movl	-72(%ebp), %eax
	leal	4+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	je	.L3688
	.loc 1 8787 0
	movl	-80(%ebp), %eax
	addl	$68, %eax
	movl	%eax, -52(%ebp)
	jmp	.L3731
.L3691:
	.loc 1 8789 0
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3692
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$3, %al
	jne	.L3694
.L3692:
	.loc 1 8791 0
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 8789 0
	jmp	.L3690
.L3694:
	.loc 1 8793 0
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	%eax, -52(%ebp)
.L3690:
.L3731:
	.loc 1 8787 0
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3691
.L3688:
	.loc 1 8796 0
	movl	-72(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$6, (%eax)
	.loc 1 8797 0
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
	.loc 1 8799 0
	jmp	.L3640
.L3648:
.LBE248:
.LBE247:
.LBE245:
	.loc 1 8804 0
	movl	-164(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	leal	reload_combine_note_store@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
	.loc 1 8806 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L3695
.LBB249:
	.loc 1 8810 0
	movl	$0, -140(%ebp)
	jmp	.L3697
.L3698:
	.loc 1 8811 0
	movl	-140(%ebp), %eax
	movl	call_used_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3699
	.loc 1 8813 0
	movl	-140(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$6, (%eax)
	.loc 1 8814 0
	movl	-140(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
.L3699:
	.loc 1 8810 0
	addl	$1, -140(%ebp)
.L3697:
	cmpl	$175, -140(%ebp)
	jbe	.L3698
	.loc 1 8817 0
	movl	-164(%ebp), %eax
	movl	76(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3702
.L3703:
.LBB250:
	.loc 1 8820 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 8821 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3704
.LBB251:
	.loc 1 8824 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8826 0
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-36(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -32(%ebp)
	.loc 1 8827 0
	movl	-32(%ebp), %eax
	addl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -28(%ebp)
	.loc 1 8828 0
	movl	-36(%ebp), %eax
	movl	%eax, -40(%ebp)
	jmp	.L3706
.L3707:
	.loc 1 8829 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L3708
	.loc 1 8831 0
	movl	-40(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$6, (%eax)
	.loc 1 8832 0
	movl	-40(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
	jmp	.L3710
.L3708:
	.loc 1 8835 0
	movl	-40(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
.L3710:
	.loc 1 8828 0
	addl	$1, -40(%ebp)
.L3706:
	movl	-40(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jbe	.L3707
.L3704:
.LBE251:
.LBE250:
	.loc 1 8818 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
.L3702:
	.loc 1 8817 0
	cmpl	$0, -48(%ebp)
	jne	.L3703
	jmp	.L3712
.L3695:
.LBE249:
	.loc 1 8840 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L3712
	movl	-164(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$61, %ax
	je	.L3712
.LBB252:
	.loc 1 8847 0
	movl	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	condjump_p@PLT
	testl	%eax, %eax
	jne	.L3715
	movl	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	condjump_in_parallel_p@PLT
	testl	%eax, %eax
	je	.L3717
.L3715:
	movl	-164(%ebp), %eax
	movl	76(%eax), %eax
	testl	%eax, %eax
	je	.L3717
	.loc 1 8849 0
	movl	-164(%ebp), %eax
	movl	76(%eax), %eax
	movl	52(%eax), %eax
	subl	-132(%ebp), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	addl	-124(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 8847 0
	jmp	.L3719
.L3717:
	.loc 1 8851 0
	leal	-192(%ebp), %eax
	movl	%eax, -24(%ebp)
.L3719:
	.loc 1 8853 0
	movl	$175, -148(%ebp)
	jmp	.L3720
.L3721:
	.loc 1 8854 0
	movl	-148(%ebp), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	-24(%ebp), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	-148(%ebp), %ecx
	andl	$63, %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3732
	movl	%edx, %eax
	xorl	%edx, %edx
.L3732:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L3722
	.loc 1 8855 0
	movl	-148(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
.L3722:
	.loc 1 8853 0
	subl	$1, -148(%ebp)
.L3720:
	cmpl	$0, -148(%ebp)
	jns	.L3721
.L3712:
.LBE252:
	.loc 1 8858 0
	movl	-164(%ebp), %edx
	addl	$44, %edx
	movl	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_combine_note_use
	.loc 1 8859 0
	movl	-164(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -96(%ebp)
	jmp	.L3724
.L3725:
	.loc 1 8861 0
	movl	-96(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$2, %al
	jne	.L3726
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3726
.LBB253:
	.loc 1 8864 0
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 8866 0
	movl	-20(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
	.loc 1 8867 0
	movl	-20(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
.L3726:
.LBE253:
	.loc 1 8859 0
	movl	-96(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -96(%ebp)
.L3724:
	cmpl	$0, -96(%ebp)
	jne	.L3725
.L3640:
.LBE244:
	.loc 1 8656 0
	movl	-164(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -164(%ebp)
.L3630:
	cmpl	$0, -164(%ebp)
	jne	.L3631
	.loc 1 8872 0
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	free@PLT
.L3730:
	.loc 1 8873 0
	addl	$284, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE85:
	.size	reload_combine, .-reload_combine
	.type	reload_combine_note_store, @function
reload_combine_note_store:
.LFB86:
	.loc 1 8883 0
	pushl	%ebp
.LCFI347:
	movl	%esp, %ebp
.LCFI348:
	pushl	%esi
.LCFI349:
	pushl	%ebx
.LCFI350:
	subl	$32, %esp
.LCFI351:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8884 0
	movl	$0, -20(%ebp)
	.loc 1 8886 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 8888 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3738
	.loc 1 8890 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	subreg_regno_offset@PLT
	movl	%eax, -20(%ebp)
	.loc 1 8894 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L3738:
	.loc 1 8896 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3752
	.loc 1 8898 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 8904 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3742
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L3742
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$142, %ax
	je	.L3742
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	jne	.L3746
.L3742:
	.loc 1 8909 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	leal	(%edx,%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L3747
.L3748:
	.loc 1 8911 0
	movl	-16(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
	.loc 1 8912 0
	movl	-16(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
	.loc 1 8909 0
	subl	$1, -16(%ebp)
.L3747:
	movl	-16(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jge	.L3748
	.loc 1 8904 0
	jmp	.L3752
.L3746:
	.loc 1 8917 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	leal	(%edx,%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L3750
.L3751:
	.loc 1 8919 0
	movl	-16(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	8+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
	.loc 1 8920 0
	movl	-16(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$6, (%eax)
	.loc 1 8917 0
	subl	$1, -16(%ebp)
.L3750:
	movl	-16(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jge	.L3751
.L3752:
	.loc 1 8923 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE86:
	.size	reload_combine_note_store, .-reload_combine_note_store
	.section	.rodata
	.type	__FUNCTION__.27082, @object
	.size	__FUNCTION__.27082, 24
__FUNCTION__.27082:
	.string	"reload_combine_note_use"
	.text
	.type	reload_combine_note_use, @function
reload_combine_note_use:
.LFB87:
	.loc 1 8932 0
	pushl	%ebp
.LCFI352:
	movl	%esp, %ebp
.LCFI353:
	pushl	%esi
.LCFI354:
	pushl	%ebx
.LCFI355:
	subl	$64, %esp
.LCFI356:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8933 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 8934 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -52(%ebp)
	.loc 1 8937 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8939 0
	movl	-52(%ebp), %eax
	subl	$57, %eax
	movl	%eax, -60(%ebp)
	cmpl	$28, -60(%ebp)
	ja	.L3754
	movl	-60(%ebp), %eax
	sall	$2, %eax
	movl	.L3760@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3760:
	.long	.L3755@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3757@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3758@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3754@GOTOFF
	.long	.L3759@GOTOFF
	.text
.L3755:
	.loc 1 8942 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3754
	.loc 1 8944 0
	movl	-56(%ebp), %edx
	addl	$12, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_combine_note_use
	.loc 1 8945 0
	jmp	.L3797
.L3756:
	.loc 1 8951 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3754
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	3(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	je	.L3754
.LBB254:
	.loc 1 8954 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 8955 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 8956 0
	movl	-32(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -24(%ebp)
	.loc 1 8958 0
	jmp	.L3767
.L3768:
	.loc 1 8959 0
	movl	-24(%ebp), %eax
	addl	-28(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
.L3767:
	.loc 1 8958 0
	subl	$1, -24(%ebp)
	cmpl	$0, -24(%ebp)
	jns	.L3768
	.loc 1 8960 0
	jmp	.L3797
.L3757:
.LBE254:
	.loc 1 8965 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3754
	.loc 1 8968 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L3797
	.loc 1 8969 0
	leal	__FUNCTION__.27082@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8969, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3759:
	.loc 1 8976 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3754
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3754
	.loc 1 8979 0
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8980 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3758:
.LBB255:
	.loc 1 8984 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 8989 0
	cmpl	$175, -20(%ebp)
	jle	.L3776
	.loc 1 8990 0
	leal	__FUNCTION__.27082@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8990, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3776:
	.loc 1 8992 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -12(%ebp)
	.loc 1 8995 0
	cmpl	$1, -12(%ebp)
	jle	.L3778
	.loc 1 8997 0
	jmp	.L3780
.L3781:
	.loc 1 8998 0
	movl	-12(%ebp), %eax
	addl	-20(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
.L3780:
	.loc 1 8997 0
	subl	$1, -12(%ebp)
	cmpl	$0, -12(%ebp)
	jns	.L3781
	.loc 1 8999 0
	jmp	.L3797
.L3778:
	.loc 1 9006 0
	movl	-20(%ebp), %ecx
	leal	reg_state@GOTOFF(%ebx), %edx
	movl	%ecx, %eax
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	leal	-1(%eax), %esi
	leal	reg_state@GOTOFF(%ebx), %edx
	movl	%ecx, %eax
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%esi, (%eax)
	leal	reg_state@GOTOFF(%ebx), %edx
	movl	%ecx, %eax
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 9007 0
	cmpl	$0, -16(%ebp)
	js	.L3797
	.loc 1 9010 0
	cmpl	$5, -16(%ebp)
	je	.L3784
	.loc 1 9015 0
	movl	-20(%ebp), %eax
	leal	4+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L3788
	.loc 1 9017 0
	movl	-20(%ebp), %eax
	leal	reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	$-1, (%eax)
	.loc 1 9018 0
	jmp	.L3797
.L3784:
	.loc 1 9025 0
	movl	-20(%ebp), %eax
	leal	4+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	leal	48(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 9026 0
	movl	-20(%ebp), %eax
	movl	reload_combine_ruid@GOTOFF(%ebx), %ecx
	leal	12+reg_state@GOTOFF(%ebx), %edx
	sall	$6, %eax
	addl	%edx, %eax
	addl	$48, %eax
	movl	%ecx, (%eax)
.L3788:
	.loc 1 9028 0
	movl	-20(%ebp), %eax
	movl	-16(%ebp), %edx
	sall	$3, %eax
	leal	(%eax,%edx), %edx
	movl	12(%ebp), %eax
	movl	%eax, reg_state@GOTOFF(%ebx,%edx,8)
	.loc 1 9029 0
	movl	-20(%ebp), %eax
	movl	-16(%ebp), %edx
	sall	$3, %eax
	leal	(%eax,%edx), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4+reg_state@GOTOFF(%ebx,%edx,8)
	.loc 1 9030 0
	jmp	.L3797
.L3754:
.LBE255:
	.loc 1 9038 0
	movl	-52(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -48(%ebp)
	.loc 1 9039 0
	movl	-52(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3789
.L3790:
	.loc 1 9041 0
	movl	-44(%ebp), %eax
	addl	-48(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L3791
	.loc 1 9042 0
	movl	-44(%ebp), %eax
	sall	$3, %eax
	addl	-56(%ebp), %eax
	leal	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_combine_note_use
	jmp	.L3793
.L3791:
	.loc 1 9043 0
	movl	-44(%ebp), %eax
	addl	-48(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L3793
	.loc 1 9045 0
	movl	-44(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -40(%ebp)
	jmp	.L3795
.L3796:
	.loc 1 9046 0
	movl	-44(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	leal	4(%eax), %edx
	movl	-40(%ebp), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reload_combine_note_use
	.loc 1 9045 0
	subl	$1, -40(%ebp)
.L3795:
	cmpl	$0, -40(%ebp)
	jns	.L3796
.L3793:
	.loc 1 9039 0
	subl	$1, -44(%ebp)
.L3789:
	cmpl	$0, -44(%ebp)
	jns	.L3790
.L3797:
	.loc 1 9049 0
	addl	$64, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE87:
	.size	reload_combine_note_use, .-reload_combine_note_use
	.type	sext_for_mode, @function
sext_for_mode:
.LFB88:
	.loc 1 9086 0
	pushl	%ebp
.LCFI357:
	movl	%esp, %ebp
.LCFI358:
	pushl	%edi
.LCFI359:
	pushl	%esi
.LCFI360:
	pushl	%ebx
.LCFI361:
	subl	$36, %esp
.LCFI362:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	12(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 9087 0
	movl	8(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -48(%ebp)
	movl	%edi, -44(%ebp)
	movl	-40(%ebp), %esi
	movl	-36(%ebp), %edi
	movl	-48(%ebp), %eax
	andl	%esi, %eax
	movl	-44(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 9088 0
	movl	8(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -20(%ebp)
	.loc 1 9092 0
	cmpl	$0, -20(%ebp)
	jle	.L3799
	cmpl	$63, -20(%ebp)
	jg	.L3799
	movl	-20(%ebp), %ecx
	subl	$1, %ecx
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	shrdl	%edx, %eax
	sarl	%cl, %edx
	testb	$32, %cl
	je	.L3805
	movl	%edx, %eax
	sarl	$31, %edx
.L3805:
	andl	$1, %eax
	testb	%al, %al
	je	.L3799
	.loc 1 9094 0
	movl	-20(%ebp), %ecx
	movl	$-1, %eax
	movl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3804
	movl	%esi, %edi
	xorl	%esi, %esi
.L3804:
	movl	-32(%ebp), %eax
	orl	%esi, %eax
	movl	-28(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
.L3799:
	.loc 1 9096 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	.loc 1 9097 0
	addl	$36, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE88:
	.size	sext_for_mode, .-sext_for_mode
	.type	reload_cse_move2add, @function
reload_cse_move2add:
.LFB89:
	.loc 1 9110 0
	pushl	%ebp
.LCFI363:
	movl	%esp, %ebp
.LCFI364:
	pushl	%edi
.LCFI365:
	pushl	%esi
.LCFI366:
	pushl	%ebx
.LCFI367:
	subl	$140, %esp
.LCFI368:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9114 0
	movl	$175, -76(%ebp)
	jmp	.L3807
.L3808:
	.loc 1 9115 0
	movl	-76(%ebp), %eax
	movl	$0, reg_set_luid@GOTOFF(%ebx,%eax,4)
	.loc 1 9114 0
	subl	$1, -76(%ebp)
.L3807:
	cmpl	$0, -76(%ebp)
	jns	.L3808
	.loc 1 9117 0
	movl	$0, move2add_last_label_luid@GOTOFF(%ebx)
	.loc 1 9118 0
	movl	$2, move2add_luid@GOTOFF(%ebx)
	.loc 1 9119 0
	movl	8(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3810
.L3811:
.LBB256:
	.loc 1 9123 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L3812
	.loc 1 9125 0
	movl	move2add_luid@GOTOFF(%ebx), %eax
	movl	%eax, move2add_last_label_luid@GOTOFF(%ebx)
	.loc 1 9129 0
	movl	move2add_luid@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, move2add_luid@GOTOFF(%ebx)
	.loc 1 9130 0
	jmp	.L3814
.L3812:
	.loc 1 9132 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3814
	.loc 1 9134 0
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 9137 0
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3816
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3816
.LBB257:
	.loc 1 9140 0
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 9141 0
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 9142 0
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 9146 0
	movl	-56(%ebp), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %edx
	movl	move2add_last_label_luid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L3816
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-56(%ebp), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	je	.L3820
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-56(%ebp), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L3816
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3820
	movl	-56(%ebp), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3820
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3816
.L3820:
	.loc 1 9157 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3825
	movl	-56(%ebp), %eax
	movl	reg_base_reg@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	jns	.L3825
.LBB258:
	.loc 1 9159 0
	movl	$0, -48(%ebp)
	.loc 1 9160 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -128(%ebp)
	movl	%ecx, -124(%ebp)
	movl	-56(%ebp), %eax
	movl	4+reg_offset@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_offset@GOTOFF(%ebx,%eax,8), %eax
	movl	-128(%ebp), %esi
	movl	-124(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %edx
	movl	%edi, %ecx
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	sext_for_mode
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -44(%ebp)
	.loc 1 9169 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-44(%ebp), %eax
	jne	.L3828
	.loc 1 9170 0
	movl	-68(%ebp), %edx
	addl	$12, %edx
	movl	$0, 12(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	movl	%eax, -48(%ebp)
	jmp	.L3830
.L3828:
	.loc 1 9171 0
	movl	$85, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, %esi
	movl	$57, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	cmpl	%eax, %esi
	jge	.L3830
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	have_add2_insn@PLT
	testl	%eax, %eax
	je	.L3830
	.loc 1 9173 0
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	-72(%ebp), %edx
	addl	$44, %edx
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	movl	%eax, -48(%ebp)
.L3830:
	.loc 1 9175 0
	movl	-56(%ebp), %edx
	movl	move2add_luid@GOTOFF(%ebx), %eax
	movl	%eax, reg_set_luid@GOTOFF(%ebx,%edx,4)
	.loc 1 9176 0
	movl	-56(%ebp), %edx
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, reg_mode@GOTOFF(%ebx,%edx,4)
	.loc 1 9177 0
	movl	-56(%ebp), %ecx
	movl	-52(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, reg_offset@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_offset@GOTOFF(%ebx,%ecx,8)
	.loc 1 9178 0
	jmp	.L3814
.L3825:
.LBE258:
	.loc 1 9191 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3816
	movl	-56(%ebp), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %eax
	cmpl	%eax, %edx
	jne	.L3816
	movl	-56(%ebp), %eax
	movl	reg_base_reg@GOTOFF(%ebx,%eax,4), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_base_reg@GOTOFF(%ebx,%eax,4), %eax
	cmpl	%eax, %edx
	jne	.L3816
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	je	.L3836
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L3816
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3836
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3836
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3816
.L3836:
.LBB259:
	.loc 1 9197 0
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	next_nonnote_insn@PLT
	movl	%eax, -40(%ebp)
	.loc 1 9198 0
	movl	$0, -36(%ebp)
	.loc 1 9199 0
	cmpl	$0, -40(%ebp)
	je	.L3841
	.loc 1 9200 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3843
	movl	-40(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3845
	movl	-40(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -116(%ebp)
	jmp	.L3847
.L3845:
	movl	-40(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -116(%ebp)
.L3847:
	movl	-116(%ebp), %edi
	movl	%edi, -120(%ebp)
	jmp	.L3848
.L3843:
	movl	$0, -120(%ebp)
.L3848:
	movl	-120(%ebp), %eax
	movl	%eax, -36(%ebp)
.L3841:
	.loc 1 9201 0
	cmpl	$0, -36(%ebp)
	je	.L3816
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-60(%ebp), %eax
	jne	.L3816
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3816
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-60(%ebp), %eax
	jne	.L3816
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3816
.LBB260:
	.loc 1 9207 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 9208 0
	movl	-32(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	.loc 1 9209 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4+reg_offset@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_offset@GOTOFF(%ebx,%eax,8), %eax
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	.loc 1 9210 0
	movl	-56(%ebp), %eax
	movl	4+reg_offset@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_offset@GOTOFF(%ebx,%eax,8), %eax
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	.loc 1 9211 0
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	addl	-104(%ebp), %eax
	adcl	-100(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	subl	-88(%ebp), %edx
	sbbl	-84(%ebp), %ecx
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	sext_for_mode
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -28(%ebp)
	.loc 1 9215 0
	movl	$0, -24(%ebp)
	.loc 1 9217 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-28(%ebp), %eax
	jne	.L3854
	.loc 1 9219 0
	movl	-36(%ebp), %edx
	addl	$12, %edx
	movl	$0, 12(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	movl	%eax, -24(%ebp)
	jmp	.L3856
.L3854:
	.loc 1 9221 0
	movl	$85, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, %esi
	movl	$57, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	addl	$4, %eax
	cmpl	%eax, %esi
	jge	.L3856
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	have_add2_insn@PLT
	testl	%eax, %eax
	je	.L3856
	.loc 1 9224 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_add2_insn@PLT
	movl	-40(%ebp), %edx
	addl	$44, %edx
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	validate_change@PLT
	movl	%eax, -24(%ebp)
.L3856:
	.loc 1 9227 0
	cmpl	$0, -24(%ebp)
	je	.L3859
	.loc 1 9228 0
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
.L3859:
	.loc 1 9229 0
	movl	-40(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 9230 0
	movl	-56(%ebp), %edx
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, reg_mode@GOTOFF(%ebx,%edx,4)
	.loc 1 9231 0
	movl	-56(%ebp), %esi
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	addl	-104(%ebp), %edx
	adcl	-100(%ebp), %ecx
	movl	-60(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	sext_for_mode
	movl	%eax, reg_offset@GOTOFF(%ebx,%esi,8)
	movl	%edx, 4+reg_offset@GOTOFF(%ebx,%esi,8)
	.loc 1 9234 0
	jmp	.L3814
.L3816:
.LBE260:
.LBE259:
.LBE257:
	.loc 1 9240 0
	movl	-72(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3861
.L3862:
	.loc 1 9242 0
	movl	-64(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$2, %al
	jne	.L3863
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3863
.LBB261:
	.loc 1 9246 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 9247 0
	cmpl	$175, -20(%ebp)
	jg	.L3863
	.loc 1 9248 0
	movl	-20(%ebp), %eax
	movl	$0, reg_set_luid@GOTOFF(%ebx,%eax,4)
.L3863:
.LBE261:
	.loc 1 9240 0
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -64(%ebp)
.L3861:
	cmpl	$0, -64(%ebp)
	jne	.L3862
	.loc 1 9251 0
	movl	-72(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	leal	move2add_note_store@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
	.loc 1 9254 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L3814
	.loc 1 9256 0
	movl	$175, -76(%ebp)
	jmp	.L3869
.L3870:
	.loc 1 9258 0
	movl	-76(%ebp), %eax
	movl	call_used_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3871
	.loc 1 9260 0
	movl	-76(%ebp), %eax
	movl	$0, reg_set_luid@GOTOFF(%ebx,%eax,4)
.L3871:
	.loc 1 9256 0
	subl	$1, -76(%ebp)
.L3869:
	cmpl	$0, -76(%ebp)
	jns	.L3870
.L3814:
.LBE256:
	.loc 1 9119 0
	movl	-72(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -72(%ebp)
	movl	move2add_luid@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, move2add_luid@GOTOFF(%ebx)
.L3810:
	cmpl	$0, -72(%ebp)
	jne	.L3811
	.loc 1 9264 0
	addl	$140, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE89:
	.size	reload_cse_move2add, .-reload_cse_move2add
	.type	move2add_note_store, @function
move2add_note_store:
.LFB90:
	.loc 1 9274 0
	pushl	%ebp
.LCFI369:
	movl	%esp, %ebp
.LCFI370:
	pushl	%esi
.LCFI371:
	pushl	%ebx
.LCFI372:
	subl	$80, %esp
.LCFI373:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9275 0
	movl	$0, -40(%ebp)
	.loc 1 9277 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 9279 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3876
	.loc 1 9281 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	subreg_regno_offset@PLT
	movl	%eax, -40(%ebp)
	.loc 1 9285 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L3876:
	.loc 1 9290 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3878
	.loc 1 9292 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
	.loc 1 9293 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$107, %ax
	je	.L3880
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$109, %ax
	je	.L3880
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L3880
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L3928
.L3880:
	.loc 1 9295 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, reg_set_luid@GOTOFF(%ebx,%eax,4)
	.loc 1 9296 0
	jmp	.L3928
.L3878:
	.loc 1 9298 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3928
	.loc 1 9301 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	addl	%eax, -40(%ebp)
	.loc 1 9303 0
	movl	-40(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	cmpl	$1, %eax
	jne	.L3887
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L3887
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L3887
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$142, %ax
	je	.L3887
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L3887
.LBB262:
	.loc 1 9308 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 9314 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
	.loc 1 9316 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	cmpl	$71, -60(%ebp)
	je	.L3895
	cmpl	$85, -60(%ebp)
	je	.L3896
	cmpl	$64, -60(%ebp)
	je	.L3894
	jmp	.L3893
.L3896:
	.loc 1 9319 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3893
	.loc 1 9321 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 9323 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3899
	.loc 1 9324 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	jmp	.L3918
.L3899:
	.loc 1 9325 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3893
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %edx
	movl	move2add_last_label_luid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L3893
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	je	.L3904
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L3893
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3904
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3904
	movl	-16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L3893
.L3904:
	.loc 1 9331 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_base_reg@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	jns	.L3909
	.loc 1 9332 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	4+reg_offset@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_offset@GOTOFF(%ebx,%eax,8), %eax
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	jmp	.L3918
.L3909:
	.loc 1 9335 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %edx
	movl	move2add_last_label_luid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L3893
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	je	.L3912
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L3893
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3912
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3912
	movl	-16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L3893
.L3912:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	reg_base_reg@GOTOFF(%ebx,%eax,4), %eax
	testl	%eax, %eax
	jns	.L3893
	.loc 1 9341 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	4+reg_offset@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_offset@GOTOFF(%ebx,%eax,8), %eax
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 9342 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 9350 0
	jmp	.L3918
.L3895:
	.loc 1 9356 0
	movl	-28(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 9357 0
	movl	$0, -48(%ebp)
	movl	$0, -44(%ebp)
	.loc 1 9358 0
	jmp	.L3918
.L3894:
	.loc 1 9362 0
	movl	-40(%ebp), %eax
	movl	$-1, reg_base_reg@GOTOFF(%ebx,%eax,4)
	.loc 1 9363 0
	movl	-40(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, reg_offset@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+reg_offset@GOTOFF(%ebx,%ecx,8)
	.loc 1 9365 0
	movl	-40(%ebp), %edx
	movl	move2add_last_label_luid@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, reg_set_luid@GOTOFF(%ebx,%edx,4)
	.loc 1 9366 0
	movl	-40(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, reg_mode@GOTOFF(%ebx,%edx,4)
	.loc 1 9367 0
	jmp	.L3928
.L3893:
	.loc 1 9372 0
	movl	-40(%ebp), %eax
	movl	$0, reg_set_luid@GOTOFF(%ebx,%eax,4)
	.loc 1 9373 0
	jmp	.L3928
.L3918:
	.loc 1 9376 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 9380 0
	movl	-20(%ebp), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %edx
	movl	move2add_last_label_luid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jg	.L3919
	.loc 1 9382 0
	movl	-20(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, reg_base_reg@GOTOFF(%ebx,%edx,4)
	.loc 1 9383 0
	movl	-20(%ebp), %eax
	movl	$0, reg_offset@GOTOFF(%ebx,%eax,8)
	movl	$0, 4+reg_offset@GOTOFF(%ebx,%eax,8)
	.loc 1 9384 0
	movl	-20(%ebp), %edx
	movl	move2add_luid@GOTOFF(%ebx), %eax
	movl	%eax, reg_set_luid@GOTOFF(%ebx,%edx,4)
	.loc 1 9385 0
	movl	-20(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, reg_mode@GOTOFF(%ebx,%edx,4)
	jmp	.L3921
.L3919:
	.loc 1 9387 0
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-20(%ebp), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	je	.L3921
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-20(%ebp), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L3893
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3921
	movl	-20(%ebp), %eax
	movl	reg_mode@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L3921
	movl	-16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L3893
.L3921:
	.loc 1 9391 0
	movl	-40(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, reg_mode@GOTOFF(%ebx,%edx,4)
	.loc 1 9394 0
	movl	-40(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	reg_set_luid@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, reg_set_luid@GOTOFF(%ebx,%edx,4)
	.loc 1 9395 0
	movl	-40(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	reg_base_reg@GOTOFF(%ebx,%eax,4), %eax
	movl	%eax, reg_base_reg@GOTOFF(%ebx,%edx,4)
	.loc 1 9398 0
	movl	-40(%ebp), %esi
	movl	-20(%ebp), %eax
	movl	4+reg_offset@GOTOFF(%ebx,%eax,8), %edx
	movl	reg_offset@GOTOFF(%ebx,%eax,8), %eax
	addl	-48(%ebp), %eax
	adcl	-44(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	sext_for_mode
	movl	%eax, reg_offset@GOTOFF(%ebx,%esi,8)
	movl	%edx, 4+reg_offset@GOTOFF(%ebx,%esi,8)
	.loc 1 9303 0
	jmp	.L3928
.L3887:
.LBE262:
.LBB263:
	.loc 1 9404 0
	movl	-40(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-40(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 9406 0
	movl	-40(%ebp), %eax
	movl	%eax, -36(%ebp)
	jmp	.L3926
.L3927:
	.loc 1 9408 0
	movl	-36(%ebp), %eax
	movl	$0, reg_set_luid@GOTOFF(%ebx,%eax,4)
	.loc 1 9406 0
	addl	$1, -36(%ebp)
.L3926:
	movl	-36(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jb	.L3927
.L3928:
.LBE263:
	.loc 1 9410 0
	addl	$80, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE90:
	.size	move2add_note_store, .-move2add_note_store
	.type	copy_eh_notes, @function
copy_eh_notes:
.LFB91:
	.loc 1 9447 0
	pushl	%ebp
.LCFI374:
	movl	%esp, %ebp
.LCFI375:
	pushl	%ebx
.LCFI376:
	subl	$36, %esp
.LCFI377:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9448 0
	movl	$0, 8(%esp)
	movl	$22, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -8(%ebp)
	.loc 1 9449 0
	cmpl	$0, -8(%ebp)
	je	.L3936
	.loc 1 9451 0
	jmp	.L3932
.L3933:
	.loc 1 9453 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	may_trap_p@PLT
	testl	%eax, %eax
	je	.L3934
	.loc 1 9454 0
	movl	12(%ebp), %eax
	movl	68(%eax), %edx
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$22, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, 68(%eax)
.L3934:
	.loc 1 9451 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 12(%ebp)
.L3932:
	cmpl	$0, 12(%ebp)
	jne	.L3933
.L3936:
	.loc 1 9459 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE91:
	.size	copy_eh_notes, .-copy_eh_notes
	.section	.rodata
	.type	__FUNCTION__.27746, @object
	.size	__FUNCTION__.27746, 21
__FUNCTION__.27746:
	.string	"fixup_abnormal_edges"
	.text
.globl fixup_abnormal_edges
	.type	fixup_abnormal_edges, @function
fixup_abnormal_edges:
.LFB92:
	.loc 1 9469 0
	pushl	%ebp
.LCFI378:
	movl	%esp, %ebp
.LCFI379:
	pushl	%ebx
.LCFI380:
	subl	$52, %esp
.LCFI381:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9470 0
	movb	$0, -5(%ebp)
	.loc 1 9473 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3938
.L3939:
.LBB264:
	.loc 1 9479 0
	movl	-28(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3940
.L3941:
	.loc 1 9481 0
	movl	-24(%ebp), %eax
	movl	24(%eax), %eax
	andl	$4, %eax
	testl	%eax, %eax
	jne	.L3942
	.loc 1 9483 0
	movl	-24(%ebp), %eax
	movl	24(%eax), %eax
	andl	$10, %eax
	cmpl	$10, %eax
	je	.L3942
	.loc 1 9479 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3940:
	cmpl	$0, -24(%ebp)
	jne	.L3941
.L3942:
	.loc 1 9487 0
	cmpl	$0, -24(%ebp)
	je	.L3945
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	je	.L3945
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	can_throw_internal@PLT
	xorl	$1, %eax
	testb	%al, %al
	je	.L3945
.LBB265:
	.loc 1 9489 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 9491 0
	movl	-28(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3949
.L3950:
	.loc 1 9492 0
	movl	-24(%ebp), %eax
	movl	24(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L3953
	.loc 1 9491 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3949:
	cmpl	$0, -24(%ebp)
	jne	.L3950
	.loc 1 9496 0
	jmp	.L3953
.L3954:
	.loc 1 9499 0
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
.L3953:
	.loc 1 9496 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	je	.L3955
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	jne	.L3957
.L3955:
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	can_throw_internal@PLT
	xorl	$1, %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3957
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	cmpl	-20(%ebp), %eax
	jne	.L3954
.L3957:
	.loc 1 9500 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	je	.L3959
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	can_throw_internal@PLT
	xorl	$1, %eax
	testb	%al, %al
	je	.L3959
	.loc 1 9501 0
	leal	__FUNCTION__.27746@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9501, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3959:
	.loc 1 9502 0
	movl	-28(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 9503 0
	movb	$1, -5(%ebp)
	.loc 1 9504 0
	movl	-20(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 9505 0
	jmp	.L3962
.L3963:
	.loc 1 9507 0
	movl	-20(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 9508 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L3964
	.loc 1 9510 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insn@PLT
	.loc 1 9517 0
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L3964
	.loc 1 9520 0
	movl	-20(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$-9, %eax
	movb	%al, 3(%edx)
	.loc 1 9521 0
	movl	-20(%ebp), %eax
	movl	$0, 12(%eax)
	.loc 1 9522 0
	movl	-20(%ebp), %eax
	movl	$0, 20(%eax)
	.loc 1 9524 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	insert_insn_on_edge@PLT
.L3964:
	.loc 1 9527 0
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3962:
	.loc 1 9505 0
	cmpl	$0, -20(%ebp)
	je	.L3945
	movl	-20(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jne	.L3963
.L3945:
.LBE265:
.LBE264:
	.loc 1 9473 0
	movl	-28(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -28(%ebp)
.L3938:
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, -28(%ebp)
	jne	.L3939
	.loc 1 9531 0
	cmpb	$0, -5(%ebp)
	je	.L3971
	.loc 1 9532 0
	call	commit_edge_insertions@PLT
.L3971:
	.loc 1 9533 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE92:
	.size	fixup_abnormal_edges, .-fixup_abnormal_edges
	.local	reg_last_reload_reg
	.comm	reg_last_reload_reg,4,4
	.local	reg_has_output_reload
	.comm	reg_has_output_reload,4,4
	.local	reg_is_output_reload
	.comm	reg_is_output_reload,24,8
	.local	reg_max_ref_width
	.comm	reg_max_ref_width,4,4
	.local	reg_equiv_init
	.comm	reg_equiv_init,4,4
	.local	reg_old_renumber
	.comm	reg_old_renumber,4,4
	.local	reg_reloaded_contents
	.comm	reg_reloaded_contents,704,32
	.local	reg_reloaded_insn
	.comm	reg_reloaded_insn,704,32
	.local	reg_reloaded_valid
	.comm	reg_reloaded_valid,24,8
	.local	reg_reloaded_dead
	.comm	reg_reloaded_dead,24,8
	.local	n_spills
	.comm	n_spills,4,4
	.local	spill_reg_rtx
	.comm	spill_reg_rtx,704,32
	.local	spill_reg_store
	.comm	spill_reg_store,704,32
	.local	spill_reg_stored_to
	.comm	spill_reg_stored_to,704,32
	.local	spill_reg_order
	.comm	spill_reg_order,352,32
	.local	bad_spill_regs
	.comm	bad_spill_regs,24,8
	.local	bad_spill_regs_global
	.comm	bad_spill_regs_global,24,8
	.local	spill_regs
	.comm	spill_regs,352,32
	.local	pseudo_previous_regs
	.comm	pseudo_previous_regs,4,4
	.local	pseudo_forbidden_regs
	.comm	pseudo_forbidden_regs,4,4
	.local	used_spill_regs
	.comm	used_spill_regs,24,8
	.local	last_spill_reg
	.comm	last_spill_reg,4,4
	.local	spill_indirect_levels
	.comm	spill_indirect_levels,1,1
	.local	spill_stack_slot
	.comm	spill_stack_slot,704,32
	.local	spill_stack_slot_width
	.comm	spill_stack_slot_width,704,32
	.local	spilled_pseudos
	.comm	spilled_pseudos,16,4
	.local	pseudos_counted
	.comm	pseudos_counted,16,4
	.local	reload_insn_firstobj
	.comm	reload_insn_firstobj,4,4
	.local	insns_need_reload
	.comm	insns_need_reload,4,4
	.local	num_eliminable
	.comm	num_eliminable,4,4
	.local	num_eliminable_invariants
	.comm	num_eliminable_invariants,4,4
	.local	first_label_num
	.comm	first_label_num,4,4
	.local	offsets_known_at
	.comm	offsets_known_at,4,4
	.local	offsets_at
	.comm	offsets_at,4,4
	.local	num_labels
	.comm	num_labels,4,4
	.local	something_needs_elimination
	.comm	something_needs_elimination,4,4
	.local	failure
	.comm	failure,4,4
	.local	spill_cost
	.comm	spill_cost,704,32
	.local	spill_add_cost
	.comm	spill_add_cost,704,32
	.local	reload_order
	.comm	reload_order,240,32
	.local	used_spill_regs_local
	.comm	used_spill_regs_local,24,8
	.local	reload_reg_unavailable
	.comm	reload_reg_unavailable,24,8
	.local	reload_reg_used
	.comm	reload_reg_used,24,8
	.local	reload_reg_used_in_input_addr
	.comm	reload_reg_used_in_input_addr,720,32
	.local	reload_reg_used_in_inpaddr_addr
	.comm	reload_reg_used_in_inpaddr_addr,720,32
	.local	reload_reg_used_in_output_addr
	.comm	reload_reg_used_in_output_addr,720,32
	.local	reload_reg_used_in_outaddr_addr
	.comm	reload_reg_used_in_outaddr_addr,720,32
	.local	reload_reg_used_in_input
	.comm	reload_reg_used_in_input,720,32
	.local	reload_reg_used_in_output
	.comm	reload_reg_used_in_output,720,32
	.local	reload_reg_used_in_op_addr
	.comm	reload_reg_used_in_op_addr,24,8
	.local	reload_reg_used_in_op_addr_reload
	.comm	reload_reg_used_in_op_addr_reload,24,8
	.local	reload_reg_used_in_insn
	.comm	reload_reg_used_in_insn,24,8
	.local	reload_reg_used_in_other_addr
	.comm	reload_reg_used_in_other_addr,24,8
	.local	reload_reg_used_at_all
	.comm	reload_reg_used_at_all,24,8
	.local	reload_reg_used_for_inherit
	.comm	reload_reg_used_for_inherit,24,8
	.local	reg_used_in_insn
	.comm	reg_used_in_insn,24,8
	.local	input_reload_insns
	.comm	input_reload_insns,120,32
	.local	input_address_reload_insns
	.comm	input_address_reload_insns,120,32
	.local	inpaddr_address_reload_insns
	.comm	inpaddr_address_reload_insns,120,32
	.local	output_reload_insns
	.comm	output_reload_insns,120,32
	.local	output_address_reload_insns
	.comm	output_address_reload_insns,120,32
	.local	outaddr_address_reload_insns
	.comm	outaddr_address_reload_insns,120,32
	.local	other_output_reload_insns
	.comm	other_output_reload_insns,120,32
	.local	new_spill_reg_store
	.comm	new_spill_reg_store,704,32
	.local	reg_reloaded_died
	.comm	reg_reloaded_died,24,8
	.local	reg_state
	.comm	reg_state,11264,32
	.local	reload_combine_ruid
	.comm	reload_combine_ruid,4,4
	.local	reg_set_luid
	.comm	reg_set_luid,704,32
	.local	reg_offset
	.comm	reg_offset,1408,32
	.local	reg_base_reg
	.comm	reg_base_reg,704,32
	.local	reg_mode
	.comm	reg_mode,704,32
	.local	move2add_luid
	.comm	move2add_luid,4,4
	.local	move2add_last_label_luid
	.comm	move2add_last_label_luid,4,4
	.comm	reload_in_optab,216,32
	.comm	reload_out_optab,216,32
	.comm	caller_save_needed,4,4
	.comm	reg_equiv_constant,4,4
	.comm	reg_equiv_memory_loc,4,4
	.comm	reg_equiv_address,4,4
	.comm	reg_equiv_mem,4,4
	.comm	reload_first_uid,4,4
	.comm	indirect_symref_ok,1,1
	.comm	double_reg_address_ok,1,1
	.comm	num_not_at_initial_offset,4,4
	.comm	reload_insn_chain,4,4
	.comm	reload_obstack,44,32
	.comm	reload_startobj,4,4
	.comm	reload_firstobj,4,4
	.comm	something_needs_operands_changed,4,4
	.comm	reload_inherited,120,32
	.comm	reload_inheritance_insn,480,32
	.comm	reload_override_in,480,32
	.comm	reload_spill_index,480,32
	.section	.debug_frame,"",@progbits
.Lframe0:
	.long	.LECIE0-.LSCIE0
.LSCIE0:
	.long	0xffffffff
	.byte	0x1
	.string	""
	.uleb128 0x1
	.sleb128 -4
	.byte	0x8
	.byte	0xc
	.uleb128 0x4
	.uleb128 0x4
	.byte	0x88
	.uleb128 0x1
	.align 4
.LECIE0:
.LSFDE0:
	.long	.LEFDE0-.LASFDE0
.LASFDE0:
	.long	.Lframe0
	.long	.LFB15
	.long	.LFE15-.LFB15
	.byte	0x4
	.long	.LCFI0-.LFB15
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI4-.LCFI1
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE0:
.LSFDE2:
	.long	.LEFDE2-.LASFDE2
.LASFDE2:
	.long	.Lframe0
	.long	.LFB16
	.long	.LFE16-.LFB16
	.byte	0x4
	.long	.LCFI5-.LFB16
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI6-.LCFI5
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI9-.LCFI6
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE2:
.LSFDE4:
	.long	.LEFDE4-.LASFDE4
.LASFDE4:
	.long	.Lframe0
	.long	.LFB17
	.long	.LFE17-.LFB17
	.byte	0x4
	.long	.LCFI10-.LFB17
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI11-.LCFI10
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI15-.LCFI11
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE4:
.LSFDE6:
	.long	.LEFDE6-.LASFDE6
.LASFDE6:
	.long	.Lframe0
	.long	.LFB18
	.long	.LFE18-.LFB18
	.byte	0x4
	.long	.LCFI16-.LFB18
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI17-.LCFI16
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI19-.LCFI17
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE6:
.LSFDE8:
	.long	.LEFDE8-.LASFDE8
.LASFDE8:
	.long	.Lframe0
	.long	.LFB19
	.long	.LFE19-.LFB19
	.byte	0x4
	.long	.LCFI20-.LFB19
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI21-.LCFI20
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI25-.LCFI21
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE8:
.LSFDE10:
	.long	.LEFDE10-.LASFDE10
.LASFDE10:
	.long	.Lframe0
	.long	.LFB20
	.long	.LFE20-.LFB20
	.byte	0x4
	.long	.LCFI26-.LFB20
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI27-.LCFI26
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE10:
.LSFDE12:
	.long	.LEFDE12-.LASFDE12
.LASFDE12:
	.long	.Lframe0
	.long	.LFB21
	.long	.LFE21-.LFB21
	.byte	0x4
	.long	.LCFI28-.LFB21
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI29-.LCFI28
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI33-.LCFI29
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE12:
.LSFDE14:
	.long	.LEFDE14-.LASFDE14
.LASFDE14:
	.long	.Lframe0
	.long	.LFB22
	.long	.LFE22-.LFB22
	.byte	0x4
	.long	.LCFI34-.LFB22
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI35-.LCFI34
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI38-.LCFI35
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE14:
.LSFDE16:
	.long	.LEFDE16-.LASFDE16
.LASFDE16:
	.long	.Lframe0
	.long	.LFB23
	.long	.LFE23-.LFB23
	.byte	0x4
	.long	.LCFI39-.LFB23
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI40-.LCFI39
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI42-.LCFI40
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE16:
.LSFDE18:
	.long	.LEFDE18-.LASFDE18
.LASFDE18:
	.long	.Lframe0
	.long	.LFB24
	.long	.LFE24-.LFB24
	.byte	0x4
	.long	.LCFI43-.LFB24
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI44-.LCFI43
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI46-.LCFI44
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE18:
.LSFDE20:
	.long	.LEFDE20-.LASFDE20
.LASFDE20:
	.long	.Lframe0
	.long	.LFB25
	.long	.LFE25-.LFB25
	.byte	0x4
	.long	.LCFI47-.LFB25
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI48-.LCFI47
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI52-.LCFI48
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE20:
.LSFDE22:
	.long	.LEFDE22-.LASFDE22
.LASFDE22:
	.long	.Lframe0
	.long	.LFB26
	.long	.LFE26-.LFB26
	.byte	0x4
	.long	.LCFI53-.LFB26
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI54-.LCFI53
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI57-.LCFI54
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE22:
.LSFDE24:
	.long	.LEFDE24-.LASFDE24
.LASFDE24:
	.long	.Lframe0
	.long	.LFB27
	.long	.LFE27-.LFB27
	.byte	0x4
	.long	.LCFI58-.LFB27
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI59-.LCFI58
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI63-.LCFI59
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE24:
.LSFDE26:
	.long	.LEFDE26-.LASFDE26
.LASFDE26:
	.long	.Lframe0
	.long	.LFB28
	.long	.LFE28-.LFB28
	.byte	0x4
	.long	.LCFI64-.LFB28
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI65-.LCFI64
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI69-.LCFI65
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE26:
.LSFDE28:
	.long	.LEFDE28-.LASFDE28
.LASFDE28:
	.long	.Lframe0
	.long	.LFB29
	.long	.LFE29-.LFB29
	.byte	0x4
	.long	.LCFI70-.LFB29
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI71-.LCFI70
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI73-.LCFI71
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE28:
.LSFDE30:
	.long	.LEFDE30-.LASFDE30
.LASFDE30:
	.long	.Lframe0
	.long	.LFB30
	.long	.LFE30-.LFB30
	.byte	0x4
	.long	.LCFI74-.LFB30
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI75-.LCFI74
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI77-.LCFI75
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE30:
.LSFDE32:
	.long	.LEFDE32-.LASFDE32
.LASFDE32:
	.long	.Lframe0
	.long	.LFB31
	.long	.LFE31-.LFB31
	.byte	0x4
	.long	.LCFI78-.LFB31
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI79-.LCFI78
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI81-.LCFI79
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE32:
.LSFDE34:
	.long	.LEFDE34-.LASFDE34
.LASFDE34:
	.long	.Lframe0
	.long	.LFB32
	.long	.LFE32-.LFB32
	.byte	0x4
	.long	.LCFI82-.LFB32
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI83-.LCFI82
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI85-.LCFI83
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE34:
.LSFDE36:
	.long	.LEFDE36-.LASFDE36
.LASFDE36:
	.long	.Lframe0
	.long	.LFB33
	.long	.LFE33-.LFB33
	.byte	0x4
	.long	.LCFI86-.LFB33
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI87-.LCFI86
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI91-.LCFI87
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE36:
.LSFDE38:
	.long	.LEFDE38-.LASFDE38
.LASFDE38:
	.long	.Lframe0
	.long	.LFB34
	.long	.LFE34-.LFB34
	.byte	0x4
	.long	.LCFI92-.LFB34
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI93-.LCFI92
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI95-.LCFI93
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE38:
.LSFDE40:
	.long	.LEFDE40-.LASFDE40
.LASFDE40:
	.long	.Lframe0
	.long	.LFB35
	.long	.LFE35-.LFB35
	.byte	0x4
	.long	.LCFI96-.LFB35
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI97-.LCFI96
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI99-.LCFI97
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE40:
.LSFDE42:
	.long	.LEFDE42-.LASFDE42
.LASFDE42:
	.long	.Lframe0
	.long	.LFB36
	.long	.LFE36-.LFB36
	.byte	0x4
	.long	.LCFI100-.LFB36
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI101-.LCFI100
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI105-.LCFI101
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE42:
.LSFDE44:
	.long	.LEFDE44-.LASFDE44
.LASFDE44:
	.long	.Lframe0
	.long	.LFB37
	.long	.LFE37-.LFB37
	.byte	0x4
	.long	.LCFI106-.LFB37
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI107-.LCFI106
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI109-.LCFI107
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE44:
.LSFDE46:
	.long	.LEFDE46-.LASFDE46
.LASFDE46:
	.long	.Lframe0
	.long	.LFB38
	.long	.LFE38-.LFB38
	.byte	0x4
	.long	.LCFI110-.LFB38
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI111-.LCFI110
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI113-.LCFI111
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE46:
.LSFDE48:
	.long	.LEFDE48-.LASFDE48
.LASFDE48:
	.long	.Lframe0
	.long	.LFB39
	.long	.LFE39-.LFB39
	.byte	0x4
	.long	.LCFI114-.LFB39
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI115-.LCFI114
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI118-.LCFI115
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE48:
.LSFDE50:
	.long	.LEFDE50-.LASFDE50
.LASFDE50:
	.long	.Lframe0
	.long	.LFB40
	.long	.LFE40-.LFB40
	.byte	0x4
	.long	.LCFI119-.LFB40
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI120-.LCFI119
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE50:
.LSFDE52:
	.long	.LEFDE52-.LASFDE52
.LASFDE52:
	.long	.Lframe0
	.long	.LFB41
	.long	.LFE41-.LFB41
	.byte	0x4
	.long	.LCFI122-.LFB41
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI123-.LCFI122
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI125-.LCFI123
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE52:
.LSFDE54:
	.long	.LEFDE54-.LASFDE54
.LASFDE54:
	.long	.Lframe0
	.long	.LFB42
	.long	.LFE42-.LFB42
	.byte	0x4
	.long	.LCFI126-.LFB42
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI127-.LCFI126
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI129-.LCFI127
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE54:
.LSFDE56:
	.long	.LEFDE56-.LASFDE56
.LASFDE56:
	.long	.Lframe0
	.long	.LFB43
	.long	.LFE43-.LFB43
	.byte	0x4
	.long	.LCFI130-.LFB43
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI131-.LCFI130
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI133-.LCFI131
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE56:
.LSFDE58:
	.long	.LEFDE58-.LASFDE58
.LASFDE58:
	.long	.Lframe0
	.long	.LFB44
	.long	.LFE44-.LFB44
	.byte	0x4
	.long	.LCFI134-.LFB44
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI135-.LCFI134
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI138-.LCFI135
	.byte	0x83
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE58:
.LSFDE60:
	.long	.LEFDE60-.LASFDE60
.LASFDE60:
	.long	.Lframe0
	.long	.LFB45
	.long	.LFE45-.LFB45
	.byte	0x4
	.long	.LCFI139-.LFB45
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI140-.LCFI139
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE60:
.LSFDE62:
	.long	.LEFDE62-.LASFDE62
.LASFDE62:
	.long	.Lframe0
	.long	.LFB46
	.long	.LFE46-.LFB46
	.byte	0x4
	.long	.LCFI142-.LFB46
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI143-.LCFI142
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI147-.LCFI143
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE62:
.LSFDE64:
	.long	.LEFDE64-.LASFDE64
.LASFDE64:
	.long	.Lframe0
	.long	.LFB47
	.long	.LFE47-.LFB47
	.byte	0x4
	.long	.LCFI148-.LFB47
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI149-.LCFI148
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI151-.LCFI149
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE64:
.LSFDE66:
	.long	.LEFDE66-.LASFDE66
.LASFDE66:
	.long	.Lframe0
	.long	.LFB48
	.long	.LFE48-.LFB48
	.byte	0x4
	.long	.LCFI152-.LFB48
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI153-.LCFI152
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI157-.LCFI153
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE66:
.LSFDE68:
	.long	.LEFDE68-.LASFDE68
.LASFDE68:
	.long	.Lframe0
	.long	.LFB49
	.long	.LFE49-.LFB49
	.byte	0x4
	.long	.LCFI158-.LFB49
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI159-.LCFI158
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI162-.LCFI159
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE68:
.LSFDE70:
	.long	.LEFDE70-.LASFDE70
.LASFDE70:
	.long	.Lframe0
	.long	.LFB50
	.long	.LFE50-.LFB50
	.byte	0x4
	.long	.LCFI163-.LFB50
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI164-.LCFI163
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI168-.LCFI164
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE70:
.LSFDE72:
	.long	.LEFDE72-.LASFDE72
.LASFDE72:
	.long	.Lframe0
	.long	.LFB51
	.long	.LFE51-.LFB51
	.byte	0x4
	.long	.LCFI169-.LFB51
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI170-.LCFI169
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI172-.LCFI170
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE72:
.LSFDE74:
	.long	.LEFDE74-.LASFDE74
.LASFDE74:
	.long	.Lframe0
	.long	.LFB52
	.long	.LFE52-.LFB52
	.byte	0x4
	.long	.LCFI173-.LFB52
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI174-.LCFI173
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI178-.LCFI174
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE74:
.LSFDE76:
	.long	.LEFDE76-.LASFDE76
.LASFDE76:
	.long	.Lframe0
	.long	.LFB53
	.long	.LFE53-.LFB53
	.byte	0x4
	.long	.LCFI179-.LFB53
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI180-.LCFI179
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI184-.LCFI180
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE76:
.LSFDE78:
	.long	.LEFDE78-.LASFDE78
.LASFDE78:
	.long	.Lframe0
	.long	.LFB54
	.long	.LFE54-.LFB54
	.byte	0x4
	.long	.LCFI185-.LFB54
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI186-.LCFI185
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI190-.LCFI186
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE78:
.LSFDE80:
	.long	.LEFDE80-.LASFDE80
.LASFDE80:
	.long	.Lframe0
	.long	.LFB55
	.long	.LFE55-.LFB55
	.byte	0x4
	.long	.LCFI191-.LFB55
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI192-.LCFI191
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI196-.LCFI192
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE80:
.LSFDE82:
	.long	.LEFDE82-.LASFDE82
.LASFDE82:
	.long	.Lframe0
	.long	.LFB56
	.long	.LFE56-.LFB56
	.byte	0x4
	.long	.LCFI197-.LFB56
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI198-.LCFI197
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI202-.LCFI198
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE82:
.LSFDE84:
	.long	.LEFDE84-.LASFDE84
.LASFDE84:
	.long	.Lframe0
	.long	.LFB57
	.long	.LFE57-.LFB57
	.byte	0x4
	.long	.LCFI203-.LFB57
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI204-.LCFI203
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI208-.LCFI204
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE84:
.LSFDE86:
	.long	.LEFDE86-.LASFDE86
.LASFDE86:
	.long	.Lframe0
	.long	.LFB58
	.long	.LFE58-.LFB58
	.byte	0x4
	.long	.LCFI209-.LFB58
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI210-.LCFI209
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI212-.LCFI210
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE86:
.LSFDE88:
	.long	.LEFDE88-.LASFDE88
.LASFDE88:
	.long	.Lframe0
	.long	.LFB59
	.long	.LFE59-.LFB59
	.byte	0x4
	.long	.LCFI213-.LFB59
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI214-.LCFI213
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI217-.LCFI214
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE88:
.LSFDE90:
	.long	.LEFDE90-.LASFDE90
.LASFDE90:
	.long	.Lframe0
	.long	.LFB60
	.long	.LFE60-.LFB60
	.byte	0x4
	.long	.LCFI218-.LFB60
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI219-.LCFI218
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI221-.LCFI219
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE90:
.LSFDE92:
	.long	.LEFDE92-.LASFDE92
.LASFDE92:
	.long	.Lframe0
	.long	.LFB61
	.long	.LFE61-.LFB61
	.byte	0x4
	.long	.LCFI222-.LFB61
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI223-.LCFI222
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI225-.LCFI223
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE92:
.LSFDE94:
	.long	.LEFDE94-.LASFDE94
.LASFDE94:
	.long	.Lframe0
	.long	.LFB62
	.long	.LFE62-.LFB62
	.byte	0x4
	.long	.LCFI226-.LFB62
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI227-.LCFI226
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI229-.LCFI227
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE94:
.LSFDE96:
	.long	.LEFDE96-.LASFDE96
.LASFDE96:
	.long	.Lframe0
	.long	.LFB63
	.long	.LFE63-.LFB63
	.byte	0x4
	.long	.LCFI230-.LFB63
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI231-.LCFI230
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI234-.LCFI231
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE96:
.LSFDE98:
	.long	.LEFDE98-.LASFDE98
.LASFDE98:
	.long	.Lframe0
	.long	.LFB64
	.long	.LFE64-.LFB64
	.byte	0x4
	.long	.LCFI235-.LFB64
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI236-.LCFI235
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI240-.LCFI236
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE98:
.LSFDE100:
	.long	.LEFDE100-.LASFDE100
.LASFDE100:
	.long	.Lframe0
	.long	.LFB65
	.long	.LFE65-.LFB65
	.byte	0x4
	.long	.LCFI241-.LFB65
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI242-.LCFI241
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI246-.LCFI242
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE100:
.LSFDE102:
	.long	.LEFDE102-.LASFDE102
.LASFDE102:
	.long	.Lframe0
	.long	.LFB66
	.long	.LFE66-.LFB66
	.byte	0x4
	.long	.LCFI247-.LFB66
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI248-.LCFI247
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI252-.LCFI248
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE102:
.LSFDE104:
	.long	.LEFDE104-.LASFDE104
.LASFDE104:
	.long	.Lframe0
	.long	.LFB67
	.long	.LFE67-.LFB67
	.byte	0x4
	.long	.LCFI253-.LFB67
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI254-.LCFI253
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI257-.LCFI254
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE104:
.LSFDE106:
	.long	.LEFDE106-.LASFDE106
.LASFDE106:
	.long	.Lframe0
	.long	.LFB68
	.long	.LFE68-.LFB68
	.byte	0x4
	.long	.LCFI258-.LFB68
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI259-.LCFI258
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI261-.LCFI259
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE106:
.LSFDE108:
	.long	.LEFDE108-.LASFDE108
.LASFDE108:
	.long	.Lframe0
	.long	.LFB69
	.long	.LFE69-.LFB69
	.byte	0x4
	.long	.LCFI262-.LFB69
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI263-.LCFI262
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI267-.LCFI263
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE108:
.LSFDE110:
	.long	.LEFDE110-.LASFDE110
.LASFDE110:
	.long	.Lframe0
	.long	.LFB70
	.long	.LFE70-.LFB70
	.byte	0x4
	.long	.LCFI268-.LFB70
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI269-.LCFI268
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI273-.LCFI269
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE110:
.LSFDE112:
	.long	.LEFDE112-.LASFDE112
.LASFDE112:
	.long	.Lframe0
	.long	.LFB71
	.long	.LFE71-.LFB71
	.byte	0x4
	.long	.LCFI274-.LFB71
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI275-.LCFI274
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI279-.LCFI275
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE112:
.LSFDE114:
	.long	.LEFDE114-.LASFDE114
.LASFDE114:
	.long	.Lframe0
	.long	.LFB72
	.long	.LFE72-.LFB72
	.byte	0x4
	.long	.LCFI280-.LFB72
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI281-.LCFI280
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI283-.LCFI281
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE114:
.LSFDE116:
	.long	.LEFDE116-.LASFDE116
.LASFDE116:
	.long	.Lframe0
	.long	.LFB73
	.long	.LFE73-.LFB73
	.byte	0x4
	.long	.LCFI284-.LFB73
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI285-.LCFI284
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI289-.LCFI285
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE116:
.LSFDE118:
	.long	.LEFDE118-.LASFDE118
.LASFDE118:
	.long	.Lframe0
	.long	.LFB74
	.long	.LFE74-.LFB74
	.byte	0x4
	.long	.LCFI290-.LFB74
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI291-.LCFI290
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI294-.LCFI291
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE118:
.LSFDE120:
	.long	.LEFDE120-.LASFDE120
.LASFDE120:
	.long	.Lframe0
	.long	.LFB75
	.long	.LFE75-.LFB75
	.byte	0x4
	.long	.LCFI295-.LFB75
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI296-.LCFI295
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI298-.LCFI296
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE120:
.LSFDE122:
	.long	.LEFDE122-.LASFDE122
.LASFDE122:
	.long	.Lframe0
	.long	.LFB76
	.long	.LFE76-.LFB76
	.byte	0x4
	.long	.LCFI299-.LFB76
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI300-.LCFI299
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI304-.LCFI300
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE122:
.LSFDE124:
	.long	.LEFDE124-.LASFDE124
.LASFDE124:
	.long	.Lframe0
	.long	.LFB77
	.long	.LFE77-.LFB77
	.byte	0x4
	.long	.LCFI305-.LFB77
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI306-.LCFI305
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI308-.LCFI306
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE124:
.LSFDE126:
	.long	.LEFDE126-.LASFDE126
.LASFDE126:
	.long	.Lframe0
	.long	.LFB78
	.long	.LFE78-.LFB78
	.byte	0x4
	.long	.LCFI309-.LFB78
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI310-.LCFI309
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI312-.LCFI310
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE126:
.LSFDE128:
	.long	.LEFDE128-.LASFDE128
.LASFDE128:
	.long	.Lframe0
	.long	.LFB79
	.long	.LFE79-.LFB79
	.byte	0x4
	.long	.LCFI313-.LFB79
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI314-.LCFI313
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI316-.LCFI314
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE128:
.LSFDE130:
	.long	.LEFDE130-.LASFDE130
.LASFDE130:
	.long	.Lframe0
	.long	.LFB80
	.long	.LFE80-.LFB80
	.byte	0x4
	.long	.LCFI317-.LFB80
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI318-.LCFI317
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI320-.LCFI318
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE130:
.LSFDE132:
	.long	.LEFDE132-.LASFDE132
.LASFDE132:
	.long	.Lframe0
	.long	.LFB81
	.long	.LFE81-.LFB81
	.byte	0x4
	.long	.LCFI321-.LFB81
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI322-.LCFI321
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI324-.LCFI322
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE132:
.LSFDE134:
	.long	.LEFDE134-.LASFDE134
.LASFDE134:
	.long	.Lframe0
	.long	.LFB82
	.long	.LFE82-.LFB82
	.byte	0x4
	.long	.LCFI325-.LFB82
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI326-.LCFI325
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI328-.LCFI326
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE134:
.LSFDE136:
	.long	.LEFDE136-.LASFDE136
.LASFDE136:
	.long	.Lframe0
	.long	.LFB83
	.long	.LFE83-.LFB83
	.byte	0x4
	.long	.LCFI329-.LFB83
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI330-.LCFI329
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI334-.LCFI330
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE136:
.LSFDE138:
	.long	.LEFDE138-.LASFDE138
.LASFDE138:
	.long	.Lframe0
	.long	.LFB84
	.long	.LFE84-.LFB84
	.byte	0x4
	.long	.LCFI335-.LFB84
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI336-.LCFI335
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI340-.LCFI336
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE138:
.LSFDE140:
	.long	.LEFDE140-.LASFDE140
.LASFDE140:
	.long	.Lframe0
	.long	.LFB85
	.long	.LFE85-.LFB85
	.byte	0x4
	.long	.LCFI341-.LFB85
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI342-.LCFI341
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI346-.LCFI342
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE140:
.LSFDE142:
	.long	.LEFDE142-.LASFDE142
.LASFDE142:
	.long	.Lframe0
	.long	.LFB86
	.long	.LFE86-.LFB86
	.byte	0x4
	.long	.LCFI347-.LFB86
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI348-.LCFI347
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI351-.LCFI348
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE142:
.LSFDE144:
	.long	.LEFDE144-.LASFDE144
.LASFDE144:
	.long	.Lframe0
	.long	.LFB87
	.long	.LFE87-.LFB87
	.byte	0x4
	.long	.LCFI352-.LFB87
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI353-.LCFI352
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI356-.LCFI353
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE144:
.LSFDE146:
	.long	.LEFDE146-.LASFDE146
.LASFDE146:
	.long	.Lframe0
	.long	.LFB88
	.long	.LFE88-.LFB88
	.byte	0x4
	.long	.LCFI357-.LFB88
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI358-.LCFI357
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI362-.LCFI358
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE146:
.LSFDE148:
	.long	.LEFDE148-.LASFDE148
.LASFDE148:
	.long	.Lframe0
	.long	.LFB89
	.long	.LFE89-.LFB89
	.byte	0x4
	.long	.LCFI363-.LFB89
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI364-.LCFI363
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI368-.LCFI364
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE148:
.LSFDE150:
	.long	.LEFDE150-.LASFDE150
.LASFDE150:
	.long	.Lframe0
	.long	.LFB90
	.long	.LFE90-.LFB90
	.byte	0x4
	.long	.LCFI369-.LFB90
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI370-.LCFI369
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI373-.LCFI370
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE150:
.LSFDE152:
	.long	.LEFDE152-.LASFDE152
.LASFDE152:
	.long	.Lframe0
	.long	.LFB91
	.long	.LFE91-.LFB91
	.byte	0x4
	.long	.LCFI374-.LFB91
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI375-.LCFI374
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI377-.LCFI375
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE152:
.LSFDE154:
	.long	.LEFDE154-.LASFDE154
.LASFDE154:
	.long	.Lframe0
	.long	.LFB92
	.long	.LFE92-.LFB92
	.byte	0x4
	.long	.LCFI378-.LFB92
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI379-.LCFI378
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI381-.LCFI379
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE154:
	.file 2 "../../../kg++fe/gnu/MIPS/config.h"
	.file 3 "../../../kg++fe/gnu/rtl.h"
	.file 4 "../../../kg++fe/gnu/machmode.h"
	.file 5 "../../../kg++fe/gnu/cselib.h"
	.file 6 "../../../kg++fe/gnu/varray.h"
	.file 7 "../../../kg++fe/gnu/bitmap.h"
	.file 8 "../../../kg++fe/gnu/tree.h"
	.file 9 "../../../kg++fe/gnu/real.h"
	.file 10 "../../../kg++fe/gnu/hashtable.h"
	.file 11 "../../../kg++fe/gnu/location.h"
	.file 12 "../../../kg++fe/gnu/function.h"
	.file 13 "../../../kg++fe/gnu/MIPS/mips.h"
	.file 14 "../../../kg++fe/omp_types.h"
	.file 15 "../../../kg++fe/gnu/basic-block.h"
	.file 16 "../../../kg++fe/gnu/sbitmap.h"
	.file 17 "/usr/include/stdio.h"
	.file 18 "../../../include/gnu/obstack.h"
	.file 19 "../../../kg++fe/gnu/reload.h"
	.file 20 "../../../kg++fe/gnu/MIPS/insn-codes.h"
	.file 21 "../../../kg++fe/gnu/hard-reg-set.h"
	.file 22 "../../../kg++fe/gnu/flags.h"
	.file 23 "../../../kg++fe/gnu/optabs.h"
	.file 24 "../../../kg++fe/gnu/regs.h"
	.file 25 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h"
	.file 26 "../../../kg++fe/gnu/recog.h"
	.file 27 "../../../kg++fe/gnu/output.h"
	.file 28 "/usr/include/libio.h"
	.file 29 "/usr/include/bits/types.h"
	.text
.Letext0:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
.LLST0:
	.long	.LFB15-.Ltext0
	.long	.LCFI0-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI0-.Ltext0
	.long	.LCFI1-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI1-.Ltext0
	.long	.LFE15-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST1:
	.long	.LFB16-.Ltext0
	.long	.LCFI5-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI5-.Ltext0
	.long	.LCFI6-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI6-.Ltext0
	.long	.LFE16-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST2:
	.long	.LFB17-.Ltext0
	.long	.LCFI10-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI10-.Ltext0
	.long	.LCFI11-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI11-.Ltext0
	.long	.LFE17-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST3:
	.long	.LFB18-.Ltext0
	.long	.LCFI16-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI16-.Ltext0
	.long	.LCFI17-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI17-.Ltext0
	.long	.LFE18-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST4:
	.long	.LFB19-.Ltext0
	.long	.LCFI20-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI20-.Ltext0
	.long	.LCFI21-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI21-.Ltext0
	.long	.LFE19-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST5:
	.long	.LFB20-.Ltext0
	.long	.LCFI26-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI26-.Ltext0
	.long	.LCFI27-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI27-.Ltext0
	.long	.LFE20-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST6:
	.long	.LFB21-.Ltext0
	.long	.LCFI28-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI28-.Ltext0
	.long	.LCFI29-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI29-.Ltext0
	.long	.LFE21-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST7:
	.long	.LFB22-.Ltext0
	.long	.LCFI34-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI34-.Ltext0
	.long	.LCFI35-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI35-.Ltext0
	.long	.LFE22-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST8:
	.long	.LFB23-.Ltext0
	.long	.LCFI39-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI39-.Ltext0
	.long	.LCFI40-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI40-.Ltext0
	.long	.LFE23-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST9:
	.long	.LFB24-.Ltext0
	.long	.LCFI43-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI43-.Ltext0
	.long	.LCFI44-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI44-.Ltext0
	.long	.LFE24-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST10:
	.long	.LFB25-.Ltext0
	.long	.LCFI47-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI47-.Ltext0
	.long	.LCFI48-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI48-.Ltext0
	.long	.LFE25-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST11:
	.long	.LFB26-.Ltext0
	.long	.LCFI53-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI53-.Ltext0
	.long	.LCFI54-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI54-.Ltext0
	.long	.LFE26-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST12:
	.long	.LFB27-.Ltext0
	.long	.LCFI58-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI58-.Ltext0
	.long	.LCFI59-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI59-.Ltext0
	.long	.LFE27-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST13:
	.long	.LFB28-.Ltext0
	.long	.LCFI64-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI64-.Ltext0
	.long	.LCFI65-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI65-.Ltext0
	.long	.LFE28-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST14:
	.long	.LFB29-.Ltext0
	.long	.LCFI70-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI70-.Ltext0
	.long	.LCFI71-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI71-.Ltext0
	.long	.LFE29-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST15:
	.long	.LFB30-.Ltext0
	.long	.LCFI74-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI74-.Ltext0
	.long	.LCFI75-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI75-.Ltext0
	.long	.LFE30-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST16:
	.long	.LFB31-.Ltext0
	.long	.LCFI78-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI78-.Ltext0
	.long	.LCFI79-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI79-.Ltext0
	.long	.LFE31-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST17:
	.long	.LFB32-.Ltext0
	.long	.LCFI82-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI82-.Ltext0
	.long	.LCFI83-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI83-.Ltext0
	.long	.LFE32-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST18:
	.long	.LFB33-.Ltext0
	.long	.LCFI86-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI86-.Ltext0
	.long	.LCFI87-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI87-.Ltext0
	.long	.LFE33-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST19:
	.long	.LFB34-.Ltext0
	.long	.LCFI92-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI92-.Ltext0
	.long	.LCFI93-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI93-.Ltext0
	.long	.LFE34-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST20:
	.long	.LFB35-.Ltext0
	.long	.LCFI96-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI96-.Ltext0
	.long	.LCFI97-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI97-.Ltext0
	.long	.LFE35-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST21:
	.long	.LFB36-.Ltext0
	.long	.LCFI100-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI100-.Ltext0
	.long	.LCFI101-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI101-.Ltext0
	.long	.LFE36-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST22:
	.long	.LFB37-.Ltext0
	.long	.LCFI106-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI106-.Ltext0
	.long	.LCFI107-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI107-.Ltext0
	.long	.LFE37-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST23:
	.long	.LFB38-.Ltext0
	.long	.LCFI110-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI110-.Ltext0
	.long	.LCFI111-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI111-.Ltext0
	.long	.LFE38-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST24:
	.long	.LFB39-.Ltext0
	.long	.LCFI114-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI114-.Ltext0
	.long	.LCFI115-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI115-.Ltext0
	.long	.LFE39-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST25:
	.long	.LFB40-.Ltext0
	.long	.LCFI119-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI119-.Ltext0
	.long	.LCFI120-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI120-.Ltext0
	.long	.LFE40-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST26:
	.long	.LFB41-.Ltext0
	.long	.LCFI122-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI122-.Ltext0
	.long	.LCFI123-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI123-.Ltext0
	.long	.LFE41-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST27:
	.long	.LFB42-.Ltext0
	.long	.LCFI126-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI126-.Ltext0
	.long	.LCFI127-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI127-.Ltext0
	.long	.LFE42-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST28:
	.long	.LFB43-.Ltext0
	.long	.LCFI130-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI130-.Ltext0
	.long	.LCFI131-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI131-.Ltext0
	.long	.LFE43-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST29:
	.long	.LFB44-.Ltext0
	.long	.LCFI134-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI134-.Ltext0
	.long	.LCFI135-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI135-.Ltext0
	.long	.LFE44-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST30:
	.long	.LFB45-.Ltext0
	.long	.LCFI139-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI139-.Ltext0
	.long	.LCFI140-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI140-.Ltext0
	.long	.LFE45-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST31:
	.long	.LFB46-.Ltext0
	.long	.LCFI142-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI142-.Ltext0
	.long	.LCFI143-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI143-.Ltext0
	.long	.LFE46-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST32:
	.long	.LFB47-.Ltext0
	.long	.LCFI148-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI148-.Ltext0
	.long	.LCFI149-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI149-.Ltext0
	.long	.LFE47-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST33:
	.long	.LFB48-.Ltext0
	.long	.LCFI152-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI152-.Ltext0
	.long	.LCFI153-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI153-.Ltext0
	.long	.LFE48-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST34:
	.long	.LFB49-.Ltext0
	.long	.LCFI158-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI158-.Ltext0
	.long	.LCFI159-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI159-.Ltext0
	.long	.LFE49-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST35:
	.long	.LFB50-.Ltext0
	.long	.LCFI163-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI163-.Ltext0
	.long	.LCFI164-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI164-.Ltext0
	.long	.LFE50-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST36:
	.long	.LFB51-.Ltext0
	.long	.LCFI169-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI169-.Ltext0
	.long	.LCFI170-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI170-.Ltext0
	.long	.LFE51-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST37:
	.long	.LFB52-.Ltext0
	.long	.LCFI173-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI173-.Ltext0
	.long	.LCFI174-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI174-.Ltext0
	.long	.LFE52-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST38:
	.long	.LFB53-.Ltext0
	.long	.LCFI179-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI179-.Ltext0
	.long	.LCFI180-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI180-.Ltext0
	.long	.LFE53-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST39:
	.long	.LFB54-.Ltext0
	.long	.LCFI185-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI185-.Ltext0
	.long	.LCFI186-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI186-.Ltext0
	.long	.LFE54-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST40:
	.long	.LFB55-.Ltext0
	.long	.LCFI191-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI191-.Ltext0
	.long	.LCFI192-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI192-.Ltext0
	.long	.LFE55-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST41:
	.long	.LFB56-.Ltext0
	.long	.LCFI197-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI197-.Ltext0
	.long	.LCFI198-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI198-.Ltext0
	.long	.LFE56-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST42:
	.long	.LFB57-.Ltext0
	.long	.LCFI203-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI203-.Ltext0
	.long	.LCFI204-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI204-.Ltext0
	.long	.LFE57-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST43:
	.long	.LFB58-.Ltext0
	.long	.LCFI209-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI209-.Ltext0
	.long	.LCFI210-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI210-.Ltext0
	.long	.LFE58-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST44:
	.long	.LFB59-.Ltext0
	.long	.LCFI213-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI213-.Ltext0
	.long	.LCFI214-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI214-.Ltext0
	.long	.LFE59-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST45:
	.long	.LFB60-.Ltext0
	.long	.LCFI218-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI218-.Ltext0
	.long	.LCFI219-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI219-.Ltext0
	.long	.LFE60-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST46:
	.long	.LFB61-.Ltext0
	.long	.LCFI222-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI222-.Ltext0
	.long	.LCFI223-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI223-.Ltext0
	.long	.LFE61-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST47:
	.long	.LFB62-.Ltext0
	.long	.LCFI226-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI226-.Ltext0
	.long	.LCFI227-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI227-.Ltext0
	.long	.LFE62-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST48:
	.long	.LFB63-.Ltext0
	.long	.LCFI230-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI230-.Ltext0
	.long	.LCFI231-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI231-.Ltext0
	.long	.LFE63-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST49:
	.long	.LFB64-.Ltext0
	.long	.LCFI235-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI235-.Ltext0
	.long	.LCFI236-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI236-.Ltext0
	.long	.LFE64-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST50:
	.long	.LFB65-.Ltext0
	.long	.LCFI241-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI241-.Ltext0
	.long	.LCFI242-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI242-.Ltext0
	.long	.LFE65-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST51:
	.long	.LFB66-.Ltext0
	.long	.LCFI247-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI247-.Ltext0
	.long	.LCFI248-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI248-.Ltext0
	.long	.LFE66-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST52:
	.long	.LFB67-.Ltext0
	.long	.LCFI253-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI253-.Ltext0
	.long	.LCFI254-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI254-.Ltext0
	.long	.LFE67-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST53:
	.long	.LFB68-.Ltext0
	.long	.LCFI258-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI258-.Ltext0
	.long	.LCFI259-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI259-.Ltext0
	.long	.LFE68-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST54:
	.long	.LFB69-.Ltext0
	.long	.LCFI262-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI262-.Ltext0
	.long	.LCFI263-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI263-.Ltext0
	.long	.LFE69-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST55:
	.long	.LFB70-.Ltext0
	.long	.LCFI268-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI268-.Ltext0
	.long	.LCFI269-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI269-.Ltext0
	.long	.LFE70-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST56:
	.long	.LFB71-.Ltext0
	.long	.LCFI274-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI274-.Ltext0
	.long	.LCFI275-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI275-.Ltext0
	.long	.LFE71-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST57:
	.long	.LFB72-.Ltext0
	.long	.LCFI280-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI280-.Ltext0
	.long	.LCFI281-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI281-.Ltext0
	.long	.LFE72-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST58:
	.long	.LFB73-.Ltext0
	.long	.LCFI284-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI284-.Ltext0
	.long	.LCFI285-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI285-.Ltext0
	.long	.LFE73-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST59:
	.long	.LFB74-.Ltext0
	.long	.LCFI290-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI290-.Ltext0
	.long	.LCFI291-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI291-.Ltext0
	.long	.LFE74-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST60:
	.long	.LFB75-.Ltext0
	.long	.LCFI295-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI295-.Ltext0
	.long	.LCFI296-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI296-.Ltext0
	.long	.LFE75-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST61:
	.long	.LFB76-.Ltext0
	.long	.LCFI299-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI299-.Ltext0
	.long	.LCFI300-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI300-.Ltext0
	.long	.LFE76-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST62:
	.long	.LFB77-.Ltext0
	.long	.LCFI305-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI305-.Ltext0
	.long	.LCFI306-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI306-.Ltext0
	.long	.LFE77-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST63:
	.long	.LFB78-.Ltext0
	.long	.LCFI309-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI309-.Ltext0
	.long	.LCFI310-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI310-.Ltext0
	.long	.LFE78-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST64:
	.long	.LFB79-.Ltext0
	.long	.LCFI313-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI313-.Ltext0
	.long	.LCFI314-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI314-.Ltext0
	.long	.LFE79-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST65:
	.long	.LFB80-.Ltext0
	.long	.LCFI317-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI317-.Ltext0
	.long	.LCFI318-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI318-.Ltext0
	.long	.LFE80-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST66:
	.long	.LFB81-.Ltext0
	.long	.LCFI321-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI321-.Ltext0
	.long	.LCFI322-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI322-.Ltext0
	.long	.LFE81-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST67:
	.long	.LFB82-.Ltext0
	.long	.LCFI325-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI325-.Ltext0
	.long	.LCFI326-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI326-.Ltext0
	.long	.LFE82-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST68:
	.long	.LFB83-.Ltext0
	.long	.LCFI329-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI329-.Ltext0
	.long	.LCFI330-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI330-.Ltext0
	.long	.LFE83-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST69:
	.long	.LFB84-.Ltext0
	.long	.LCFI335-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI335-.Ltext0
	.long	.LCFI336-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI336-.Ltext0
	.long	.LFE84-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST70:
	.long	.LFB85-.Ltext0
	.long	.LCFI341-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI341-.Ltext0
	.long	.LCFI342-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI342-.Ltext0
	.long	.LFE85-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST71:
	.long	.LFB86-.Ltext0
	.long	.LCFI347-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI347-.Ltext0
	.long	.LCFI348-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI348-.Ltext0
	.long	.LFE86-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST72:
	.long	.LFB87-.Ltext0
	.long	.LCFI352-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI352-.Ltext0
	.long	.LCFI353-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI353-.Ltext0
	.long	.LFE87-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST73:
	.long	.LFB88-.Ltext0
	.long	.LCFI357-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI357-.Ltext0
	.long	.LCFI358-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI358-.Ltext0
	.long	.LFE88-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST74:
	.long	.LFB89-.Ltext0
	.long	.LCFI363-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI363-.Ltext0
	.long	.LCFI364-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI364-.Ltext0
	.long	.LFE89-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST75:
	.long	.LFB90-.Ltext0
	.long	.LCFI369-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI369-.Ltext0
	.long	.LCFI370-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI370-.Ltext0
	.long	.LFE90-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST76:
	.long	.LFB91-.Ltext0
	.long	.LCFI374-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI374-.Ltext0
	.long	.LCFI375-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI375-.Ltext0
	.long	.LFE91-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST77:
	.long	.LFB92-.Ltext0
	.long	.LCFI378-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI378-.Ltext0
	.long	.LCFI379-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI379-.Ltext0
	.long	.LFE92-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
	.section	.debug_info
	.long	0x104b5
	.value	0x2
	.long	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.long	.Ldebug_line0
	.long	.Letext0
	.long	.Ltext0
	.string	"GNU C 4.1.2 (Ubuntu 4.1.2-0ubuntu4)"
	.byte	0x1
	.string	"../../../kg++fe/gnu/reload1.c"
	.string	"/usa/handong/simplnano/cmplr-open64-merge/targia32_sl1/g++fe/gnu"
	.uleb128 0x2
	.string	"rtx"
	.byte	0x2
	.byte	0xc
	.long	0xa7
	.uleb128 0x3
	.byte	0x4
	.long	0xad
	.uleb128 0x4
	.long	0x19b
	.string	"rtx_def"
	.byte	0xc
	.byte	0x2
	.byte	0xb
	.uleb128 0x5
	.long	.LASF0
	.byte	0x3
	.byte	0x84
	.long	0xe4d
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x3
	.byte	0x87
	.long	0xb18
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"jump"
	.byte	0x3
	.byte	0x8e
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"call"
	.byte	0x3
	.byte	0x91
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"unchanging"
	.byte	0x3
	.byte	0x99
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"volatil"
	.byte	0x3
	.byte	0xa2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"in_struct"
	.byte	0x3
	.byte	0xb4
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"used"
	.byte	0x3
	.byte	0xbb
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"integrated"
	.byte	0x3
	.byte	0xc0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"frame_related"
	.byte	0x3
	.byte	0xc9
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"fld"
	.byte	0x3
	.byte	0xce
	.long	0x1aa8
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"rtvec"
	.byte	0x2
	.byte	0xe
	.long	0x1a8
	.uleb128 0x3
	.byte	0x4
	.long	0x1ae
	.uleb128 0x4
	.long	0x1e3
	.string	"rtvec_def"
	.byte	0x8
	.byte	0x2
	.byte	0xd
	.uleb128 0x7
	.string	"num_elem"
	.byte	0x3
	.byte	0xf2
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"elem"
	.byte	0x3
	.byte	0xf3
	.long	0x1ab8
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"tree"
	.byte	0x2
	.byte	0x10
	.long	0x1ef
	.uleb128 0x3
	.byte	0x4
	.long	0x1f5
	.uleb128 0x8
	.long	0x2ce
	.string	"tree_node"
	.byte	0xa0
	.byte	0x2
	.byte	0xf
	.uleb128 0x9
	.long	.LASF2
	.byte	0x8
	.value	0x887
	.long	0x864b
	.uleb128 0xa
	.string	"int_cst"
	.byte	0x8
	.value	0x888
	.long	0x8966
	.uleb128 0xa
	.string	"real_cst"
	.byte	0x8
	.value	0x889
	.long	0x89ae
	.uleb128 0xa
	.string	"vector"
	.byte	0x8
	.value	0x88a
	.long	0x8abe
	.uleb128 0xa
	.string	"string"
	.byte	0x8
	.value	0x88b
	.long	0x89fc
	.uleb128 0xa
	.string	"complex"
	.byte	0x8
	.value	0x88c
	.long	0x8a69
	.uleb128 0xa
	.string	"identifier"
	.byte	0x8
	.value	0x88d
	.long	0x8b44
	.uleb128 0xa
	.string	"decl"
	.byte	0x8
	.value	0x88e
	.long	0x91f6
	.uleb128 0x9
	.long	.LASF3
	.byte	0x8
	.value	0x88f
	.long	0x8da7
	.uleb128 0xa
	.string	"list"
	.byte	0x8
	.value	0x890
	.long	0x8b7b
	.uleb128 0xa
	.string	"vec"
	.byte	0x8
	.value	0x891
	.long	0x8bc0
	.uleb128 0xa
	.string	"exp"
	.byte	0x8
	.value	0x892
	.long	0x8c11
	.uleb128 0xa
	.string	"block"
	.byte	0x8
	.value	0x893
	.long	0x8c5d
	.uleb128 0xa
	.string	"omp"
	.byte	0x8
	.value	0x895
	.long	0x9bce
	.byte	0x0
	.uleb128 0xb
	.long	0x44e
	.string	"processor_type"
	.byte	0x4
	.byte	0xd
	.byte	0x3b
	.uleb128 0xc
	.string	"PROCESSOR_DEFAULT"
	.sleb128 0
	.uleb128 0xc
	.string	"PROCESSOR_R3000"
	.sleb128 1
	.uleb128 0xc
	.string	"PROCESSOR_R3900"
	.sleb128 2
	.uleb128 0xc
	.string	"PROCESSOR_R6000"
	.sleb128 3
	.uleb128 0xc
	.string	"PROCESSOR_R4000"
	.sleb128 4
	.uleb128 0xc
	.string	"PROCESSOR_R4100"
	.sleb128 5
	.uleb128 0xc
	.string	"PROCESSOR_R4111"
	.sleb128 6
	.uleb128 0xc
	.string	"PROCESSOR_R4120"
	.sleb128 7
	.uleb128 0xc
	.string	"PROCESSOR_R4300"
	.sleb128 8
	.uleb128 0xc
	.string	"PROCESSOR_R4600"
	.sleb128 9
	.uleb128 0xc
	.string	"PROCESSOR_R4650"
	.sleb128 10
	.uleb128 0xc
	.string	"PROCESSOR_R5000"
	.sleb128 11
	.uleb128 0xc
	.string	"PROCESSOR_R5400"
	.sleb128 12
	.uleb128 0xc
	.string	"PROCESSOR_R5500"
	.sleb128 13
	.uleb128 0xc
	.string	"PROCESSOR_R8000"
	.sleb128 14
	.uleb128 0xc
	.string	"PROCESSOR_R4KC"
	.sleb128 15
	.uleb128 0xc
	.string	"PROCESSOR_R5KC"
	.sleb128 16
	.uleb128 0xc
	.string	"PROCESSOR_R20KC"
	.sleb128 17
	.uleb128 0xc
	.string	"PROCESSOR_SR71000"
	.sleb128 18
	.uleb128 0xc
	.string	"PROCESSOR_SB1"
	.sleb128 19
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x454
	.uleb128 0xd
	.long	0x459
	.uleb128 0xe
	.string	"char"
	.byte	0x1
	.byte	0x8
	.uleb128 0xe
	.string	"int"
	.byte	0x4
	.byte	0x5
	.uleb128 0xf
	.long	0x5de
	.string	"reg_class"
	.byte	0x4
	.byte	0xd
	.value	0x7ec
	.uleb128 0xc
	.string	"NO_REGS"
	.sleb128 0
	.uleb128 0xc
	.string	"M16_NA_REGS"
	.sleb128 1
	.uleb128 0xc
	.string	"M16_REGS"
	.sleb128 2
	.uleb128 0xc
	.string	"T_REG"
	.sleb128 3
	.uleb128 0xc
	.string	"M16_T_REGS"
	.sleb128 4
	.uleb128 0xc
	.string	"GR_REGS"
	.sleb128 5
	.uleb128 0xc
	.string	"FP_REGS"
	.sleb128 6
	.uleb128 0xc
	.string	"HI_REG"
	.sleb128 7
	.uleb128 0xc
	.string	"LO_REG"
	.sleb128 8
	.uleb128 0xc
	.string	"HILO_REG"
	.sleb128 9
	.uleb128 0xc
	.string	"MD_REGS"
	.sleb128 10
	.uleb128 0xc
	.string	"COP0_REGS"
	.sleb128 11
	.uleb128 0xc
	.string	"COP2_REGS"
	.sleb128 12
	.uleb128 0xc
	.string	"COP3_REGS"
	.sleb128 13
	.uleb128 0xc
	.string	"HI_AND_GR_REGS"
	.sleb128 14
	.uleb128 0xc
	.string	"LO_AND_GR_REGS"
	.sleb128 15
	.uleb128 0xc
	.string	"HILO_AND_GR_REGS"
	.sleb128 16
	.uleb128 0xc
	.string	"HI_AND_FP_REGS"
	.sleb128 17
	.uleb128 0xc
	.string	"COP0_AND_GR_REGS"
	.sleb128 18
	.uleb128 0xc
	.string	"COP2_AND_GR_REGS"
	.sleb128 19
	.uleb128 0xc
	.string	"COP3_AND_GR_REGS"
	.sleb128 20
	.uleb128 0xc
	.string	"ALL_COP_REGS"
	.sleb128 21
	.uleb128 0xc
	.string	"ALL_COP_AND_GR_REGS"
	.sleb128 22
	.uleb128 0xc
	.string	"ST_REGS"
	.sleb128 23
	.uleb128 0xc
	.string	"ALL_REGS"
	.sleb128 24
	.uleb128 0xc
	.string	"LIM_REG_CLASSES"
	.sleb128 25
	.byte	0x0
	.uleb128 0x10
	.long	0x6b0
	.string	"mips_args"
	.byte	0x40
	.byte	0xd
	.value	0xaaa
	.uleb128 0x11
	.string	"gp_reg_found"
	.byte	0xd
	.value	0xaad
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"arg_number"
	.byte	0xd
	.value	0xab0
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x11
	.string	"num_gprs"
	.byte	0xd
	.value	0xab5
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x11
	.string	"num_fprs"
	.byte	0xd
	.value	0xab8
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x11
	.string	"stack_words"
	.byte	0xd
	.value	0xabb
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"fp_code"
	.byte	0xd
	.value	0xac8
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x11
	.string	"prototype"
	.byte	0xd
	.value	0xacb
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x11
	.string	"num_adjusts"
	.byte	0xd
	.value	0xad3
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x11
	.string	"adjust"
	.byte	0xd
	.value	0xad4
	.long	0x6b7
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.byte	0x0
	.uleb128 0x12
	.long	.LASF4
	.byte	0x4
	.byte	0x7
	.uleb128 0x13
	.long	0x6c7
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x7
	.byte	0x0
	.uleb128 0x12
	.long	.LASF4
	.byte	0x4
	.byte	0x7
	.uleb128 0x15
	.string	"CUMULATIVE_ARGS"
	.byte	0xd
	.value	0xad5
	.long	0x5de
	.uleb128 0x2
	.string	"size_t"
	.byte	0x19
	.byte	0xd6
	.long	0x6b0
	.uleb128 0xe
	.string	"unsigned char"
	.byte	0x1
	.byte	0x8
	.uleb128 0xe
	.string	"short unsigned int"
	.byte	0x2
	.byte	0x7
	.uleb128 0xe
	.string	"long unsigned int"
	.byte	0x4
	.byte	0x7
	.uleb128 0xe
	.string	"signed char"
	.byte	0x1
	.byte	0x6
	.uleb128 0xe
	.string	"short int"
	.byte	0x2
	.byte	0x5
	.uleb128 0xe
	.string	"long long int"
	.byte	0x8
	.byte	0x5
	.uleb128 0xe
	.string	"long long unsigned int"
	.byte	0x8
	.byte	0x7
	.uleb128 0x2
	.string	"__quad_t"
	.byte	0x1d
	.byte	0x3b
	.long	0x74c
	.uleb128 0x2
	.string	"__off_t"
	.byte	0x1d
	.byte	0x90
	.long	0x796
	.uleb128 0xe
	.string	"long int"
	.byte	0x4
	.byte	0x5
	.uleb128 0x2
	.string	"__off64_t"
	.byte	0x1d
	.byte	0x91
	.long	0x777
	.uleb128 0x16
	.byte	0x4
	.uleb128 0x3
	.byte	0x4
	.long	0x459
	.uleb128 0x2
	.string	"FILE"
	.byte	0x11
	.byte	0x2e
	.long	0x7c7
	.uleb128 0x17
	.long	0xa42
	.long	.LASF5
	.byte	0x94
	.byte	0x11
	.byte	0x2e
	.uleb128 0x11
	.string	"_flags"
	.byte	0x1c
	.value	0x10c
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"_IO_read_ptr"
	.byte	0x1c
	.value	0x111
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x11
	.string	"_IO_read_end"
	.byte	0x1c
	.value	0x112
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x11
	.string	"_IO_read_base"
	.byte	0x1c
	.value	0x113
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x11
	.string	"_IO_write_base"
	.byte	0x1c
	.value	0x114
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"_IO_write_ptr"
	.byte	0x1c
	.value	0x115
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x11
	.string	"_IO_write_end"
	.byte	0x1c
	.value	0x116
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x11
	.string	"_IO_buf_base"
	.byte	0x1c
	.value	0x117
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x11
	.string	"_IO_buf_end"
	.byte	0x1c
	.value	0x118
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x11
	.string	"_IO_save_base"
	.byte	0x1c
	.value	0x11a
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x11
	.string	"_IO_backup_base"
	.byte	0x1c
	.value	0x11b
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x11
	.string	"_IO_save_end"
	.byte	0x1c
	.value	0x11c
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x11
	.string	"_markers"
	.byte	0x1c
	.value	0x11e
	.long	0xab4
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x11
	.string	"_chain"
	.byte	0x1c
	.value	0x120
	.long	0xaba
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x11
	.string	"_fileno"
	.byte	0x1c
	.value	0x122
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x11
	.string	"_flags2"
	.byte	0x1c
	.value	0x126
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x11
	.string	"_old_offset"
	.byte	0x1c
	.value	0x128
	.long	0x787
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x11
	.string	"_cur_column"
	.byte	0x1c
	.value	0x12c
	.long	0x705
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x11
	.string	"_vtable_offset"
	.byte	0x1c
	.value	0x12d
	.long	0x730
	.byte	0x2
	.byte	0x23
	.uleb128 0x46
	.uleb128 0x11
	.string	"_shortbuf"
	.byte	0x1c
	.value	0x12e
	.long	0xac0
	.byte	0x2
	.byte	0x23
	.uleb128 0x47
	.uleb128 0x11
	.string	"_lock"
	.byte	0x1c
	.value	0x132
	.long	0xad0
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x11
	.string	"_offset"
	.byte	0x1c
	.value	0x13b
	.long	0x7a2
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x11
	.string	"__pad1"
	.byte	0x1c
	.value	0x144
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x11
	.string	"__pad2"
	.byte	0x1c
	.value	0x145
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x11
	.string	"__pad3"
	.byte	0x1c
	.value	0x146
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x11
	.string	"__pad4"
	.byte	0x1c
	.value	0x147
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x11
	.string	"__pad5"
	.byte	0x1c
	.value	0x148
	.long	0x6e6
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x11
	.string	"_mode"
	.byte	0x1c
	.value	0x14a
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x11
	.string	"_unused2"
	.byte	0x1c
	.value	0x14c
	.long	0xad6
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.byte	0x0
	.uleb128 0x13
	.long	0xa52
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x3
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xa58
	.uleb128 0xd
	.long	0x6f4
	.uleb128 0x3
	.byte	0x4
	.long	0x6f4
	.uleb128 0x18
	.string	"_IO_lock_t"
	.byte	0x1c
	.byte	0xb0
	.uleb128 0x4
	.long	0xab4
	.string	"_IO_marker"
	.byte	0xc
	.byte	0x1c
	.byte	0xb6
	.uleb128 0x7
	.string	"_next"
	.byte	0x1c
	.byte	0xb7
	.long	0xab4
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"_sbuf"
	.byte	0x1c
	.byte	0xb8
	.long	0xaba
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"_pos"
	.byte	0x1c
	.byte	0xbc
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xa71
	.uleb128 0x3
	.byte	0x4
	.long	0x7c7
	.uleb128 0x13
	.long	0xad0
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xa63
	.uleb128 0x13
	.long	0xae6
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x27
	.byte	0x0
	.uleb128 0x13
	.long	0xaf6
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x17
	.byte	0x0
	.uleb128 0x13
	.long	0xb06
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x13
	.byte	0x0
	.uleb128 0xd
	.long	0x461
	.uleb128 0x3
	.byte	0x4
	.long	0x461
	.uleb128 0x3
	.byte	0x4
	.long	0xb17
	.uleb128 0x19
	.uleb128 0xb
	.long	0xd61
	.string	"machine_mode"
	.byte	0x4
	.byte	0x4
	.byte	0x1d
	.uleb128 0xc
	.string	"VOIDmode"
	.sleb128 0
	.uleb128 0xc
	.string	"BImode"
	.sleb128 1
	.uleb128 0xc
	.string	"QImode"
	.sleb128 2
	.uleb128 0xc
	.string	"HImode"
	.sleb128 3
	.uleb128 0xc
	.string	"SImode"
	.sleb128 4
	.uleb128 0xc
	.string	"DImode"
	.sleb128 5
	.uleb128 0xc
	.string	"TImode"
	.sleb128 6
	.uleb128 0xc
	.string	"OImode"
	.sleb128 7
	.uleb128 0xc
	.string	"PQImode"
	.sleb128 8
	.uleb128 0xc
	.string	"PHImode"
	.sleb128 9
	.uleb128 0xc
	.string	"PSImode"
	.sleb128 10
	.uleb128 0xc
	.string	"PDImode"
	.sleb128 11
	.uleb128 0xc
	.string	"QFmode"
	.sleb128 12
	.uleb128 0xc
	.string	"HFmode"
	.sleb128 13
	.uleb128 0xc
	.string	"TQFmode"
	.sleb128 14
	.uleb128 0xc
	.string	"SFmode"
	.sleb128 15
	.uleb128 0xc
	.string	"DFmode"
	.sleb128 16
	.uleb128 0xc
	.string	"XFmode"
	.sleb128 17
	.uleb128 0xc
	.string	"TFmode"
	.sleb128 18
	.uleb128 0xc
	.string	"QCmode"
	.sleb128 19
	.uleb128 0xc
	.string	"HCmode"
	.sleb128 20
	.uleb128 0xc
	.string	"SCmode"
	.sleb128 21
	.uleb128 0xc
	.string	"DCmode"
	.sleb128 22
	.uleb128 0xc
	.string	"XCmode"
	.sleb128 23
	.uleb128 0xc
	.string	"TCmode"
	.sleb128 24
	.uleb128 0xc
	.string	"CQImode"
	.sleb128 25
	.uleb128 0xc
	.string	"CHImode"
	.sleb128 26
	.uleb128 0xc
	.string	"CSImode"
	.sleb128 27
	.uleb128 0xc
	.string	"CDImode"
	.sleb128 28
	.uleb128 0xc
	.string	"CTImode"
	.sleb128 29
	.uleb128 0xc
	.string	"COImode"
	.sleb128 30
	.uleb128 0xc
	.string	"V1DImode"
	.sleb128 31
	.uleb128 0xc
	.string	"V2QImode"
	.sleb128 32
	.uleb128 0xc
	.string	"V2HImode"
	.sleb128 33
	.uleb128 0xc
	.string	"V2SImode"
	.sleb128 34
	.uleb128 0xc
	.string	"V2DImode"
	.sleb128 35
	.uleb128 0xc
	.string	"V4QImode"
	.sleb128 36
	.uleb128 0xc
	.string	"V4HImode"
	.sleb128 37
	.uleb128 0xc
	.string	"V4SImode"
	.sleb128 38
	.uleb128 0xc
	.string	"V4DImode"
	.sleb128 39
	.uleb128 0xc
	.string	"V8QImode"
	.sleb128 40
	.uleb128 0xc
	.string	"V8HImode"
	.sleb128 41
	.uleb128 0xc
	.string	"V8SImode"
	.sleb128 42
	.uleb128 0xc
	.string	"V8DImode"
	.sleb128 43
	.uleb128 0xc
	.string	"V16QImode"
	.sleb128 44
	.uleb128 0xc
	.string	"V2SFmode"
	.sleb128 45
	.uleb128 0xc
	.string	"V2DFmode"
	.sleb128 46
	.uleb128 0xc
	.string	"V4SFmode"
	.sleb128 47
	.uleb128 0xc
	.string	"V4DFmode"
	.sleb128 48
	.uleb128 0xc
	.string	"V8SFmode"
	.sleb128 49
	.uleb128 0xc
	.string	"V8DFmode"
	.sleb128 50
	.uleb128 0xc
	.string	"V16SFmode"
	.sleb128 51
	.uleb128 0xc
	.string	"BLKmode"
	.sleb128 52
	.uleb128 0xc
	.string	"CCmode"
	.sleb128 53
	.uleb128 0xc
	.string	"MAX_MACHINE_MODE"
	.sleb128 54
	.byte	0x0
	.uleb128 0x1a
	.long	0xe10
	.long	.LASF6
	.byte	0x4
	.byte	0x4
	.byte	0x2c
	.uleb128 0xc
	.string	"MODE_RANDOM"
	.sleb128 0
	.uleb128 0xc
	.string	"MODE_INT"
	.sleb128 1
	.uleb128 0xc
	.string	"MODE_FLOAT"
	.sleb128 2
	.uleb128 0xc
	.string	"MODE_PARTIAL_INT"
	.sleb128 3
	.uleb128 0xc
	.string	"MODE_CC"
	.sleb128 4
	.uleb128 0xc
	.string	"MODE_COMPLEX_INT"
	.sleb128 5
	.uleb128 0xc
	.string	"MODE_COMPLEX_FLOAT"
	.sleb128 6
	.uleb128 0xc
	.string	"MODE_VECTOR_INT"
	.sleb128 7
	.uleb128 0xc
	.string	"MODE_VECTOR_FLOAT"
	.sleb128 8
	.uleb128 0xc
	.string	"MAX_MODE_CLASS"
	.sleb128 9
	.byte	0x0
	.uleb128 0x2
	.string	"HARD_REG_ELT_TYPE"
	.byte	0x15
	.byte	0x29
	.long	0x75d
	.uleb128 0x2
	.string	"HARD_REG_SET"
	.byte	0x15
	.byte	0x34
	.long	0xe3d
	.uleb128 0x13
	.long	0xe4d
	.long	0xe10
	.uleb128 0x14
	.long	0x6c7
	.byte	0x2
	.byte	0x0
	.uleb128 0xb
	.long	0x161c
	.string	"rtx_code"
	.byte	0x4
	.byte	0x3
	.byte	0x29
	.uleb128 0xc
	.string	"UNKNOWN"
	.sleb128 0
	.uleb128 0xc
	.string	"NIL"
	.sleb128 1
	.uleb128 0xc
	.string	"INCLUDE"
	.sleb128 2
	.uleb128 0xc
	.string	"EXPR_LIST"
	.sleb128 3
	.uleb128 0xc
	.string	"INSN_LIST"
	.sleb128 4
	.uleb128 0xc
	.string	"MATCH_OPERAND"
	.sleb128 5
	.uleb128 0xc
	.string	"MATCH_SCRATCH"
	.sleb128 6
	.uleb128 0xc
	.string	"MATCH_DUP"
	.sleb128 7
	.uleb128 0xc
	.string	"MATCH_OPERATOR"
	.sleb128 8
	.uleb128 0xc
	.string	"MATCH_PARALLEL"
	.sleb128 9
	.uleb128 0xc
	.string	"MATCH_OP_DUP"
	.sleb128 10
	.uleb128 0xc
	.string	"MATCH_PAR_DUP"
	.sleb128 11
	.uleb128 0xc
	.string	"MATCH_INSN"
	.sleb128 12
	.uleb128 0xc
	.string	"DEFINE_INSN"
	.sleb128 13
	.uleb128 0xc
	.string	"DEFINE_PEEPHOLE"
	.sleb128 14
	.uleb128 0xc
	.string	"DEFINE_SPLIT"
	.sleb128 15
	.uleb128 0xc
	.string	"DEFINE_INSN_AND_SPLIT"
	.sleb128 16
	.uleb128 0xc
	.string	"DEFINE_PEEPHOLE2"
	.sleb128 17
	.uleb128 0xc
	.string	"DEFINE_COMBINE"
	.sleb128 18
	.uleb128 0xc
	.string	"DEFINE_EXPAND"
	.sleb128 19
	.uleb128 0xc
	.string	"DEFINE_DELAY"
	.sleb128 20
	.uleb128 0xc
	.string	"DEFINE_FUNCTION_UNIT"
	.sleb128 21
	.uleb128 0xc
	.string	"DEFINE_ASM_ATTRIBUTES"
	.sleb128 22
	.uleb128 0xc
	.string	"DEFINE_COND_EXEC"
	.sleb128 23
	.uleb128 0xc
	.string	"SEQUENCE"
	.sleb128 24
	.uleb128 0xc
	.string	"ADDRESS"
	.sleb128 25
	.uleb128 0xc
	.string	"DEFINE_CPU_UNIT"
	.sleb128 26
	.uleb128 0xc
	.string	"DEFINE_QUERY_CPU_UNIT"
	.sleb128 27
	.uleb128 0xc
	.string	"EXCLUSION_SET"
	.sleb128 28
	.uleb128 0xc
	.string	"PRESENCE_SET"
	.sleb128 29
	.uleb128 0xc
	.string	"ABSENCE_SET"
	.sleb128 30
	.uleb128 0xc
	.string	"DEFINE_BYPASS"
	.sleb128 31
	.uleb128 0xc
	.string	"DEFINE_AUTOMATON"
	.sleb128 32
	.uleb128 0xc
	.string	"AUTOMATA_OPTION"
	.sleb128 33
	.uleb128 0xc
	.string	"DEFINE_RESERVATION"
	.sleb128 34
	.uleb128 0xc
	.string	"DEFINE_INSN_RESERVATION"
	.sleb128 35
	.uleb128 0xc
	.string	"DEFINE_ATTR"
	.sleb128 36
	.uleb128 0xc
	.string	"ATTR"
	.sleb128 37
	.uleb128 0xc
	.string	"SET_ATTR"
	.sleb128 38
	.uleb128 0xc
	.string	"SET_ATTR_ALTERNATIVE"
	.sleb128 39
	.uleb128 0xc
	.string	"EQ_ATTR"
	.sleb128 40
	.uleb128 0xc
	.string	"ATTR_FLAG"
	.sleb128 41
	.uleb128 0xc
	.string	"INSN"
	.sleb128 42
	.uleb128 0xc
	.string	"JUMP_INSN"
	.sleb128 43
	.uleb128 0xc
	.string	"CALL_INSN"
	.sleb128 44
	.uleb128 0xc
	.string	"BARRIER"
	.sleb128 45
	.uleb128 0xc
	.string	"CODE_LABEL"
	.sleb128 46
	.uleb128 0xc
	.string	"NOTE"
	.sleb128 47
	.uleb128 0xc
	.string	"COND_EXEC"
	.sleb128 48
	.uleb128 0xc
	.string	"PARALLEL"
	.sleb128 49
	.uleb128 0xc
	.string	"ASM_INPUT"
	.sleb128 50
	.uleb128 0xc
	.string	"ASM_OPERANDS"
	.sleb128 51
	.uleb128 0xc
	.string	"UNSPEC"
	.sleb128 52
	.uleb128 0xc
	.string	"UNSPEC_VOLATILE"
	.sleb128 53
	.uleb128 0xc
	.string	"ADDR_VEC"
	.sleb128 54
	.uleb128 0xc
	.string	"ADDR_DIFF_VEC"
	.sleb128 55
	.uleb128 0xc
	.string	"PREFETCH"
	.sleb128 56
	.uleb128 0xc
	.string	"SET"
	.sleb128 57
	.uleb128 0xc
	.string	"USE"
	.sleb128 58
	.uleb128 0xc
	.string	"CLOBBER"
	.sleb128 59
	.uleb128 0xc
	.string	"CALL"
	.sleb128 60
	.uleb128 0xc
	.string	"RETURN"
	.sleb128 61
	.uleb128 0xc
	.string	"TRAP_IF"
	.sleb128 62
	.uleb128 0xc
	.string	"RESX"
	.sleb128 63
	.uleb128 0xc
	.string	"CONST_INT"
	.sleb128 64
	.uleb128 0xc
	.string	"CONST_DOUBLE"
	.sleb128 65
	.uleb128 0xc
	.string	"CONST_VECTOR"
	.sleb128 66
	.uleb128 0xc
	.string	"CONST_STRING"
	.sleb128 67
	.uleb128 0xc
	.string	"CONST"
	.sleb128 68
	.uleb128 0xc
	.string	"PC"
	.sleb128 69
	.uleb128 0xc
	.string	"VALUE"
	.sleb128 70
	.uleb128 0xc
	.string	"REG"
	.sleb128 71
	.uleb128 0xc
	.string	"SCRATCH"
	.sleb128 72
	.uleb128 0xc
	.string	"SUBREG"
	.sleb128 73
	.uleb128 0xc
	.string	"STRICT_LOW_PART"
	.sleb128 74
	.uleb128 0xc
	.string	"CONCAT"
	.sleb128 75
	.uleb128 0xc
	.string	"MEM"
	.sleb128 76
	.uleb128 0xc
	.string	"LABEL_REF"
	.sleb128 77
	.uleb128 0xc
	.string	"SYMBOL_REF"
	.sleb128 78
	.uleb128 0xc
	.string	"CC0"
	.sleb128 79
	.uleb128 0xc
	.string	"ADDRESSOF"
	.sleb128 80
	.uleb128 0xc
	.string	"QUEUED"
	.sleb128 81
	.uleb128 0xc
	.string	"IF_THEN_ELSE"
	.sleb128 82
	.uleb128 0xc
	.string	"COND"
	.sleb128 83
	.uleb128 0xc
	.string	"COMPARE"
	.sleb128 84
	.uleb128 0xc
	.string	"PLUS"
	.sleb128 85
	.uleb128 0xc
	.string	"MINUS"
	.sleb128 86
	.uleb128 0xc
	.string	"NEG"
	.sleb128 87
	.uleb128 0xc
	.string	"MULT"
	.sleb128 88
	.uleb128 0xc
	.string	"DIV"
	.sleb128 89
	.uleb128 0xc
	.string	"MOD"
	.sleb128 90
	.uleb128 0xc
	.string	"UDIV"
	.sleb128 91
	.uleb128 0xc
	.string	"UMOD"
	.sleb128 92
	.uleb128 0xc
	.string	"AND"
	.sleb128 93
	.uleb128 0xc
	.string	"IOR"
	.sleb128 94
	.uleb128 0xc
	.string	"XOR"
	.sleb128 95
	.uleb128 0xc
	.string	"NOT"
	.sleb128 96
	.uleb128 0xc
	.string	"ASHIFT"
	.sleb128 97
	.uleb128 0xc
	.string	"ROTATE"
	.sleb128 98
	.uleb128 0xc
	.string	"ASHIFTRT"
	.sleb128 99
	.uleb128 0xc
	.string	"LSHIFTRT"
	.sleb128 100
	.uleb128 0xc
	.string	"ROTATERT"
	.sleb128 101
	.uleb128 0xc
	.string	"SMIN"
	.sleb128 102
	.uleb128 0xc
	.string	"SMAX"
	.sleb128 103
	.uleb128 0xc
	.string	"UMIN"
	.sleb128 104
	.uleb128 0xc
	.string	"UMAX"
	.sleb128 105
	.uleb128 0xc
	.string	"PRE_DEC"
	.sleb128 106
	.uleb128 0xc
	.string	"PRE_INC"
	.sleb128 107
	.uleb128 0xc
	.string	"POST_DEC"
	.sleb128 108
	.uleb128 0xc
	.string	"POST_INC"
	.sleb128 109
	.uleb128 0xc
	.string	"PRE_MODIFY"
	.sleb128 110
	.uleb128 0xc
	.string	"POST_MODIFY"
	.sleb128 111
	.uleb128 0xc
	.string	"NE"
	.sleb128 112
	.uleb128 0xc
	.string	"EQ"
	.sleb128 113
	.uleb128 0xc
	.string	"GE"
	.sleb128 114
	.uleb128 0xc
	.string	"GT"
	.sleb128 115
	.uleb128 0xc
	.string	"LE"
	.sleb128 116
	.uleb128 0xc
	.string	"LT"
	.sleb128 117
	.uleb128 0xc
	.string	"GEU"
	.sleb128 118
	.uleb128 0xc
	.string	"GTU"
	.sleb128 119
	.uleb128 0xc
	.string	"LEU"
	.sleb128 120
	.uleb128 0xc
	.string	"LTU"
	.sleb128 121
	.uleb128 0xc
	.string	"UNORDERED"
	.sleb128 122
	.uleb128 0xc
	.string	"ORDERED"
	.sleb128 123
	.uleb128 0xc
	.string	"UNEQ"
	.sleb128 124
	.uleb128 0xc
	.string	"UNGE"
	.sleb128 125
	.uleb128 0xc
	.string	"UNGT"
	.sleb128 126
	.uleb128 0xc
	.string	"UNLE"
	.sleb128 127
	.uleb128 0xc
	.string	"UNLT"
	.sleb128 128
	.uleb128 0xc
	.string	"LTGT"
	.sleb128 129
	.uleb128 0xc
	.string	"SIGN_EXTEND"
	.sleb128 130
	.uleb128 0xc
	.string	"ZERO_EXTEND"
	.sleb128 131
	.uleb128 0xc
	.string	"TRUNCATE"
	.sleb128 132
	.uleb128 0xc
	.string	"FLOAT_EXTEND"
	.sleb128 133
	.uleb128 0xc
	.string	"FLOAT_TRUNCATE"
	.sleb128 134
	.uleb128 0xc
	.string	"FLOAT"
	.sleb128 135
	.uleb128 0xc
	.string	"FIX"
	.sleb128 136
	.uleb128 0xc
	.string	"UNSIGNED_FLOAT"
	.sleb128 137
	.uleb128 0xc
	.string	"UNSIGNED_FIX"
	.sleb128 138
	.uleb128 0xc
	.string	"ABS"
	.sleb128 139
	.uleb128 0xc
	.string	"SQRT"
	.sleb128 140
	.uleb128 0xc
	.string	"FFS"
	.sleb128 141
	.uleb128 0xc
	.string	"SIGN_EXTRACT"
	.sleb128 142
	.uleb128 0xc
	.string	"ZERO_EXTRACT"
	.sleb128 143
	.uleb128 0xc
	.string	"HIGH"
	.sleb128 144
	.uleb128 0xc
	.string	"LO_SUM"
	.sleb128 145
	.uleb128 0xc
	.string	"RANGE_INFO"
	.sleb128 146
	.uleb128 0xc
	.string	"RANGE_REG"
	.sleb128 147
	.uleb128 0xc
	.string	"RANGE_VAR"
	.sleb128 148
	.uleb128 0xc
	.string	"RANGE_LIVE"
	.sleb128 149
	.uleb128 0xc
	.string	"CONSTANT_P_RTX"
	.sleb128 150
	.uleb128 0xc
	.string	"CALL_PLACEHOLDER"
	.sleb128 151
	.uleb128 0xc
	.string	"VEC_MERGE"
	.sleb128 152
	.uleb128 0xc
	.string	"VEC_SELECT"
	.sleb128 153
	.uleb128 0xc
	.string	"VEC_CONCAT"
	.sleb128 154
	.uleb128 0xc
	.string	"VEC_DUPLICATE"
	.sleb128 155
	.uleb128 0xc
	.string	"SS_PLUS"
	.sleb128 156
	.uleb128 0xc
	.string	"US_PLUS"
	.sleb128 157
	.uleb128 0xc
	.string	"SS_MINUS"
	.sleb128 158
	.uleb128 0xc
	.string	"US_MINUS"
	.sleb128 159
	.uleb128 0xc
	.string	"SS_TRUNCATE"
	.sleb128 160
	.uleb128 0xc
	.string	"US_TRUNCATE"
	.sleb128 161
	.uleb128 0xc
	.string	"PHI"
	.sleb128 162
	.uleb128 0xc
	.string	"LAST_AND_UNUSED_RTX_CODE"
	.sleb128 163
	.byte	0x0
	.uleb128 0x1b
	.long	0x16f6
	.byte	0x4
	.byte	0x3
	.byte	0x47
	.uleb128 0x6
	.string	"min_align"
	.byte	0x3
	.byte	0x49
	.long	0x6b0
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"base_after_vec"
	.byte	0x3
	.byte	0x4b
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"min_after_vec"
	.byte	0x3
	.byte	0x4c
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"max_after_vec"
	.byte	0x3
	.byte	0x4e
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"min_after_base"
	.byte	0x3
	.byte	0x50
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"max_after_base"
	.byte	0x3
	.byte	0x52
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"offset_unsigned"
	.byte	0x3
	.byte	0x55
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"scale"
	.byte	0x3
	.byte	0x57
	.long	0x6b0
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.byte	0x0
	.uleb128 0x2
	.string	"addr_diff_vec_flags"
	.byte	0x3
	.byte	0x58
	.long	0x161c
	.uleb128 0x17
	.long	0x1769
	.long	.LASF7
	.byte	0x18
	.byte	0x3
	.byte	0x62
	.uleb128 0x7
	.string	"alias"
	.byte	0x3
	.byte	0x63
	.long	0x74c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"expr"
	.byte	0x3
	.byte	0x64
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1c
	.long	.LASF8
	.byte	0x3
	.byte	0x65
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1c
	.long	.LASF9
	.byte	0x3
	.byte	0x66
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"align"
	.byte	0x3
	.byte	0x67
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x1d
	.long	.LASF7
	.byte	0x3
	.byte	0x68
	.long	0x1711
	.uleb128 0x8
	.long	0x1846
	.string	"rtunion_def"
	.byte	0x8
	.byte	0x3
	.byte	0x6d
	.uleb128 0x1e
	.string	"rtwint"
	.byte	0x3
	.byte	0x6e
	.long	0x74c
	.uleb128 0x1e
	.string	"rtint"
	.byte	0x3
	.byte	0x6f
	.long	0x461
	.uleb128 0x1e
	.string	"rtuint"
	.byte	0x3
	.byte	0x70
	.long	0x6b0
	.uleb128 0x1e
	.string	"rtstr"
	.byte	0x3
	.byte	0x71
	.long	0x44e
	.uleb128 0x1e
	.string	"rtx"
	.byte	0x3
	.byte	0x72
	.long	0x9c
	.uleb128 0x1e
	.string	"rtvec"
	.byte	0x3
	.byte	0x73
	.long	0x19b
	.uleb128 0x1e
	.string	"rttype"
	.byte	0x3
	.byte	0x74
	.long	0xb18
	.uleb128 0x1e
	.string	"rt_addr_diff_vec_flags"
	.byte	0x3
	.byte	0x75
	.long	0x16f6
	.uleb128 0x1e
	.string	"rt_cselib"
	.byte	0x3
	.byte	0x76
	.long	0x189e
	.uleb128 0x1e
	.string	"rtbit"
	.byte	0x3
	.byte	0x77
	.long	0x1904
	.uleb128 0x1e
	.string	"rttree"
	.byte	0x3
	.byte	0x78
	.long	0x1e3
	.uleb128 0x1e
	.string	"bb"
	.byte	0x3
	.byte	0x79
	.long	0x1a8d
	.uleb128 0x1e
	.string	"rtmem"
	.byte	0x3
	.byte	0x7a
	.long	0x1a93
	.byte	0x0
	.uleb128 0x4
	.long	0x189e
	.string	"cselib_val_struct"
	.byte	0x10
	.byte	0x3
	.byte	0x76
	.uleb128 0x1c
	.long	.LASF10
	.byte	0x5
	.byte	0x1a
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"u"
	.byte	0x5
	.byte	0x21
	.long	0x5e28
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"locs"
	.byte	0x5
	.byte	0x25
	.long	0x5eb6
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"addr_list"
	.byte	0x5
	.byte	0x28
	.long	0x5143
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1846
	.uleb128 0x4
	.long	0x1904
	.string	"bitmap_head_def"
	.byte	0x10
	.byte	0x3
	.byte	0x77
	.uleb128 0x1c
	.long	.LASF11
	.byte	0x7
	.byte	0x3d
	.long	0x527e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"current"
	.byte	0x7
	.byte	0x3e
	.long	0x527e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"indx"
	.byte	0x7
	.byte	0x3f
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"using_obstack"
	.byte	0x7
	.byte	0x40
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x18a4
	.uleb128 0x4
	.long	0x1a8d
	.string	"basic_block_def"
	.byte	0x50
	.byte	0x3
	.byte	0x79
	.uleb128 0x7
	.string	"head"
	.byte	0xf
	.byte	0xb5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"end"
	.byte	0xf
	.byte	0xb5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"head_tree"
	.byte	0xf
	.byte	0xb8
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"end_tree"
	.byte	0xf
	.byte	0xb9
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"pred"
	.byte	0xf
	.byte	0xbc
	.long	0x53f4
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"succ"
	.byte	0xf
	.byte	0xbc
	.long	0x53f4
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"local_set"
	.byte	0xf
	.byte	0xc1
	.long	0x5326
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"cond_local_set"
	.byte	0xf
	.byte	0xc5
	.long	0x5326
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"global_live_at_start"
	.byte	0xf
	.byte	0xcb
	.long	0x5326
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"global_live_at_end"
	.byte	0xf
	.byte	0xcd
	.long	0x5326
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"aux"
	.byte	0xf
	.byte	0xd0
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"index"
	.byte	0xf
	.byte	0xd3
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"prev_bb"
	.byte	0xf
	.byte	0xd6
	.long	0x1a8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"next_bb"
	.byte	0xf
	.byte	0xd6
	.long	0x1a8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"loop_depth"
	.byte	0xf
	.byte	0xd9
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x7
	.string	"loop_father"
	.byte	0xf
	.byte	0xdc
	.long	0x566d
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x1c
	.long	.LASF12
	.byte	0xf
	.byte	0xdf
	.long	0x5334
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x7
	.string	"frequency"
	.byte	0xf
	.byte	0xe2
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x7
	.string	"flags"
	.byte	0xf
	.byte	0xe5
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x190a
	.uleb128 0x3
	.byte	0x4
	.long	0x1769
	.uleb128 0x2
	.string	"rtunion"
	.byte	0x3
	.byte	0x7c
	.long	0x1774
	.uleb128 0x13
	.long	0x1ab8
	.long	0x1a99
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x1ac8
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9c
	.uleb128 0x4
	.long	0x1b17
	.string	"_obstack_chunk"
	.byte	0xc
	.byte	0x12
	.byte	0xa2
	.uleb128 0x7
	.string	"limit"
	.byte	0x12
	.byte	0xa3
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1c
	.long	.LASF13
	.byte	0x12
	.byte	0xa4
	.long	0x1b17
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"contents"
	.byte	0x12
	.byte	0xa5
	.long	0xa42
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1ace
	.uleb128 0x10
	.long	0x1c44
	.string	"obstack"
	.byte	0x2c
	.byte	0x11
	.value	0x31b
	.uleb128 0x7
	.string	"chunk_size"
	.byte	0x12
	.byte	0xaa
	.long	0x796
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"chunk"
	.byte	0x12
	.byte	0xab
	.long	0x1b17
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"object_base"
	.byte	0x12
	.byte	0xac
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1c
	.long	.LASF14
	.byte	0x12
	.byte	0xad
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"chunk_limit"
	.byte	0x12
	.byte	0xae
	.long	0x7b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"temp"
	.byte	0x12
	.byte	0xaf
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"alignment_mask"
	.byte	0x12
	.byte	0xb0
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"chunkfun"
	.byte	0x12
	.byte	0xb5
	.long	0x1c59
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"freefun"
	.byte	0x12
	.byte	0xb6
	.long	0x1c70
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"extra_arg"
	.byte	0x12
	.byte	0xb7
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x6
	.string	"use_extra_arg"
	.byte	0x12
	.byte	0xbd
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x6
	.string	"maybe_empty_object"
	.byte	0x12
	.byte	0xbe
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x6
	.string	"alloc_failed"
	.byte	0x12
	.byte	0xc2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x1f
	.long	0x1c59
	.byte	0x1
	.long	0x1b17
	.uleb128 0x20
	.long	0x7b3
	.uleb128 0x20
	.long	0x796
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1c44
	.uleb128 0x21
	.long	0x1c70
	.byte	0x1
	.uleb128 0x20
	.long	0x7b3
	.uleb128 0x20
	.long	0x1b17
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1c5f
	.uleb128 0x4
	.long	0x1cdb
	.string	"var_refs_queue"
	.byte	0x10
	.byte	0xc
	.byte	0x17
	.uleb128 0x7
	.string	"modified"
	.byte	0xc
	.byte	0x18
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"promoted_mode"
	.byte	0xc
	.byte	0x19
	.long	0xb18
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"unsignedp"
	.byte	0xc
	.byte	0x1a
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1c
	.long	.LASF15
	.byte	0xc
	.byte	0x1b
	.long	0x1cdb
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1c76
	.uleb128 0x17
	.long	0x1d27
	.long	.LASF16
	.byte	0x10
	.byte	0xc
	.byte	0x24
	.uleb128 0x1c
	.long	.LASF11
	.byte	0xc
	.byte	0x26
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"last"
	.byte	0xc
	.byte	0x27
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1c
	.long	.LASF17
	.byte	0xc
	.byte	0x28
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1c
	.long	.LASF15
	.byte	0xc
	.byte	0x29
	.long	0x1d27
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1ce1
	.uleb128 0x3
	.byte	0x4
	.long	0x1b1d
	.uleb128 0x4
	.long	0x1e82
	.string	"emit_status"
	.byte	0x34
	.byte	0xc
	.byte	0x37
	.uleb128 0x7
	.string	"x_reg_rtx_no"
	.byte	0xc
	.byte	0x3a
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"x_first_label_num"
	.byte	0xc
	.byte	0x3d
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"x_first_insn"
	.byte	0xc
	.byte	0x44
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"x_last_insn"
	.byte	0xc
	.byte	0x45
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1c
	.long	.LASF17
	.byte	0xc
	.byte	0x4a
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1c
	.long	.LASF16
	.byte	0xc
	.byte	0x50
	.long	0x1d27
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"x_cur_insn_uid"
	.byte	0xc
	.byte	0x54
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"x_last_linenum"
	.byte	0xc
	.byte	0x58
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"x_last_filename"
	.byte	0xc
	.byte	0x59
	.long	0x44e
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"regno_pointer_align_length"
	.byte	0xc
	.byte	0x5f
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"regno_pointer_align"
	.byte	0xc
	.byte	0x65
	.long	0xa5d
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"regno_decl"
	.byte	0xc
	.byte	0x69
	.long	0x1e82
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"x_regno_reg_rtx"
	.byte	0xc
	.byte	0x70
	.long	0x1ac8
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1e3
	.uleb128 0x4
	.long	0x1f68
	.string	"expr_status"
	.byte	0x1c
	.byte	0xc
	.byte	0x7d
	.uleb128 0x7
	.string	"x_pending_stack_adjust"
	.byte	0xc
	.byte	0x80
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"x_inhibit_defer_pop"
	.byte	0xc
	.byte	0x91
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"x_stack_pointer_delta"
	.byte	0xc
	.byte	0x97
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"x_saveregs_value"
	.byte	0xc
	.byte	0x9c
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"x_apply_args_value"
	.byte	0xc
	.byte	0x9f
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"x_forced_labels"
	.byte	0xc
	.byte	0xa2
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"x_pending_chain"
	.byte	0xc
	.byte	0xa5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.byte	0x0
	.uleb128 0x22
	.long	0x1fd2
	.long	.LASF18
	.byte	0x4
	.byte	0xc
	.value	0x1f1
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_UNLIKELY_EXECUTED"
	.sleb128 0
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_NORMAL"
	.sleb128 1
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_HOT"
	.sleb128 2
	.byte	0x0
	.uleb128 0x23
	.long	0x2991
	.string	"function"
	.value	0x134
	.byte	0x3
	.byte	0x19
	.uleb128 0x7
	.string	"eh"
	.byte	0xc
	.byte	0xb5
	.long	0x299d
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"stmt"
	.byte	0xc
	.byte	0xb6
	.long	0x29b1
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"expr"
	.byte	0xc
	.byte	0xb7
	.long	0x29b7
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"emit"
	.byte	0xc
	.byte	0xb8
	.long	0x29bd
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"varasm"
	.byte	0xc
	.byte	0xb9
	.long	0x29d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"name"
	.byte	0xc
	.byte	0xbe
	.long	0x44e
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"decl"
	.byte	0xc
	.byte	0xc1
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"outer"
	.byte	0xc
	.byte	0xc4
	.long	0x29d9
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"pops_args"
	.byte	0xc
	.byte	0xc9
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"args_size"
	.byte	0xc
	.byte	0xce
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"pretend_args_size"
	.byte	0xc
	.byte	0xd3
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"outgoing_args_size"
	.byte	0xc
	.byte	0xd7
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"arg_offset_rtx"
	.byte	0xc
	.byte	0xdb
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"args_info"
	.byte	0xc
	.byte	0xdf
	.long	0x6ce
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"return_rtx"
	.byte	0xc
	.byte	0xe5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x7
	.string	"internal_arg_pointer"
	.byte	0xc
	.byte	0xe8
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x7
	.string	"cannot_inline"
	.byte	0xc
	.byte	0xec
	.long	0x44e
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x7
	.string	"hard_reg_initial_vals"
	.byte	0xc
	.byte	0xf0
	.long	0x29f6
	.byte	0x3
	.byte	0x23
	.uleb128 0x80
	.uleb128 0x7
	.string	"x_function_call_count"
	.byte	0xc
	.byte	0xf3
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0x84
	.uleb128 0x7
	.string	"x_nonlocal_labels"
	.byte	0xc
	.byte	0xf8
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0x88
	.uleb128 0x7
	.string	"x_nonlocal_goto_handler_slots"
	.byte	0xc
	.byte	0xfe
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x8c
	.uleb128 0x11
	.string	"x_nonlocal_goto_handler_labels"
	.byte	0xc
	.value	0x102
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x90
	.uleb128 0x11
	.string	"x_nonlocal_goto_stack_level"
	.byte	0xc
	.value	0x107
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x94
	.uleb128 0x11
	.string	"x_cleanup_label"
	.byte	0xc
	.value	0x10d
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x98
	.uleb128 0x11
	.string	"x_return_label"
	.byte	0xc
	.value	0x112
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x9c
	.uleb128 0x11
	.string	"computed_goto_common_label"
	.byte	0xc
	.value	0x115
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xa0
	.uleb128 0x11
	.string	"computed_goto_common_reg"
	.byte	0xc
	.value	0x116
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xa4
	.uleb128 0x11
	.string	"x_save_expr_regs"
	.byte	0xc
	.value	0x11a
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xa8
	.uleb128 0x11
	.string	"x_stack_slot_list"
	.byte	0xc
	.value	0x11e
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xac
	.uleb128 0x11
	.string	"x_rtl_expr_chain"
	.byte	0xc
	.value	0x121
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0xb0
	.uleb128 0x11
	.string	"x_tail_recursion_label"
	.byte	0xc
	.value	0x125
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xb4
	.uleb128 0x11
	.string	"x_tail_recursion_reentry"
	.byte	0xc
	.value	0x128
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xb8
	.uleb128 0x11
	.string	"x_arg_pointer_save_area"
	.byte	0xc
	.value	0x12e
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xbc
	.uleb128 0x11
	.string	"x_clobber_return_insn"
	.byte	0xc
	.value	0x133
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xc0
	.uleb128 0x11
	.string	"x_frame_offset"
	.byte	0xc
	.value	0x138
	.long	0x74c
	.byte	0x3
	.byte	0x23
	.uleb128 0xc4
	.uleb128 0x11
	.string	"x_context_display"
	.byte	0xc
	.value	0x13d
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0xcc
	.uleb128 0x11
	.string	"x_trampoline_list"
	.byte	0xc
	.value	0x146
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0xd0
	.uleb128 0x11
	.string	"x_parm_birth_insn"
	.byte	0xc
	.value	0x149
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xd4
	.uleb128 0x11
	.string	"x_last_parm_insn"
	.byte	0xc
	.value	0x14d
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xd8
	.uleb128 0x11
	.string	"x_max_parm_reg"
	.byte	0xc
	.value	0x151
	.long	0x6b0
	.byte	0x3
	.byte	0x23
	.uleb128 0xdc
	.uleb128 0x11
	.string	"x_parm_reg_stack_loc"
	.byte	0xc
	.value	0x157
	.long	0x1ac8
	.byte	0x3
	.byte	0x23
	.uleb128 0xe0
	.uleb128 0x11
	.string	"x_temp_slots"
	.byte	0xc
	.value	0x15a
	.long	0x2a08
	.byte	0x3
	.byte	0x23
	.uleb128 0xe4
	.uleb128 0x11
	.string	"x_temp_slot_level"
	.byte	0xc
	.value	0x15d
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.uleb128 0x11
	.string	"x_var_temp_slot_level"
	.byte	0xc
	.value	0x160
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0xec
	.uleb128 0x11
	.string	"x_target_temp_slot_level"
	.byte	0xc
	.value	0x166
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0xf0
	.uleb128 0x11
	.string	"fixup_var_refs_queue"
	.byte	0xc
	.value	0x16a
	.long	0x1cdb
	.byte	0x3
	.byte	0x23
	.uleb128 0xf4
	.uleb128 0x11
	.string	"inlinable"
	.byte	0xc
	.value	0x16d
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0xf8
	.uleb128 0x11
	.string	"no_debugging_symbols"
	.byte	0xc
	.value	0x16e
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0xfc
	.uleb128 0x11
	.string	"original_arg_vector"
	.byte	0xc
	.value	0x16f
	.long	0x19b
	.byte	0x3
	.byte	0x23
	.uleb128 0x100
	.uleb128 0x11
	.string	"original_decl_initial"
	.byte	0xc
	.value	0x170
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0x104
	.uleb128 0x11
	.string	"inl_last_parm_insn"
	.byte	0xc
	.value	0x173
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x108
	.uleb128 0x11
	.string	"inl_max_label_num"
	.byte	0xc
	.value	0x175
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0x10c
	.uleb128 0x11
	.string	"funcdef_no"
	.byte	0xc
	.value	0x178
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0x110
	.uleb128 0x11
	.string	"machine"
	.byte	0xc
	.value	0x17d
	.long	0x2a21
	.byte	0x3
	.byte	0x23
	.uleb128 0x114
	.uleb128 0x11
	.string	"stack_alignment_needed"
	.byte	0xc
	.value	0x17f
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0x118
	.uleb128 0x11
	.string	"preferred_stack_boundary"
	.byte	0xc
	.value	0x181
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0x11c
	.uleb128 0x11
	.string	"language"
	.byte	0xc
	.value	0x184
	.long	0x2a3b
	.byte	0x3
	.byte	0x23
	.uleb128 0x120
	.uleb128 0x11
	.string	"epilogue_delay_list"
	.byte	0xc
	.value	0x18a
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x124
	.uleb128 0x24
	.string	"returns_struct"
	.byte	0xc
	.value	0x190
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"returns_pcc_struct"
	.byte	0xc
	.value	0x194
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"returns_pointer"
	.byte	0xc
	.value	0x197
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"needs_context"
	.byte	0xc
	.value	0x19a
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"calls_setjmp"
	.byte	0xc
	.value	0x19d
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"calls_longjmp"
	.byte	0xc
	.value	0x1a0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"calls_alloca"
	.byte	0xc
	.value	0x1a4
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"calls_eh_return"
	.byte	0xc
	.value	0x1a7
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"has_nonlocal_label"
	.byte	0xc
	.value	0x1ab
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"has_nonlocal_goto"
	.byte	0xc
	.value	0x1af
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"contains_functions"
	.byte	0xc
	.value	0x1b2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"has_computed_jump"
	.byte	0xc
	.value	0x1b5
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"is_thunk"
	.byte	0xc
	.value	0x1ba
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"all_throwers_are_sibcalls"
	.byte	0xc
	.value	0x1c1
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"instrument_entry_exit"
	.byte	0xc
	.value	0x1c5
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"arc_profile"
	.byte	0xc
	.value	0x1c8
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"profile"
	.byte	0xc
	.value	0x1cb
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"limit_stack"
	.byte	0xc
	.value	0x1cf
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"stdarg"
	.byte	0xc
	.value	0x1d2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"x_whole_function_mode_p"
	.byte	0xc
	.value	0x1d8
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"x_dont_save_pending_sizes_p"
	.byte	0xc
	.value	0x1e1
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"uses_const_pool"
	.byte	0xc
	.value	0x1e4
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"uses_pic_offset_table"
	.byte	0xc
	.value	0x1e7
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"uses_eh_lsda"
	.byte	0xc
	.value	0x1ea
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x24
	.string	"arg_pointer_save_area_init"
	.byte	0xc
	.value	0x1ed
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x25
	.long	.LASF18
	.byte	0xc
	.value	0x1fa
	.long	0x1f68
	.byte	0x3
	.byte	0x23
	.uleb128 0x12c
	.uleb128 0x11
	.string	"max_jumptable_ents"
	.byte	0xc
	.value	0x1fe
	.long	0x461
	.byte	0x3
	.byte	0x23
	.uleb128 0x130
	.byte	0x0
	.uleb128 0x26
	.string	"eh_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2991
	.uleb128 0x26
	.string	"stmt_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x29a3
	.uleb128 0x3
	.byte	0x4
	.long	0x1e88
	.uleb128 0x3
	.byte	0x4
	.long	0x1d33
	.uleb128 0x26
	.string	"varasm_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x29c3
	.uleb128 0x3
	.byte	0x4
	.long	0x1fd2
	.uleb128 0x26
	.string	"initial_value_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x29df
	.uleb128 0x26
	.string	"temp_slot"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x29fc
	.uleb128 0x26
	.string	"machine_function"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2a0e
	.uleb128 0x26
	.string	"language_function"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2a27
	.uleb128 0x1a
	.long	0x4ba0
	.long	.LASF19
	.byte	0x4
	.byte	0x14
	.byte	0x7
	.uleb128 0xc
	.string	"CODE_FOR_trap"
	.sleb128 0
	.uleb128 0xc
	.string	"CODE_FOR_adddf3"
	.sleb128 2
	.uleb128 0xc
	.string	"CODE_FOR_addsf3"
	.sleb128 3
	.uleb128 0xc
	.string	"CODE_FOR_addsi3_internal"
	.sleb128 4
	.uleb128 0xc
	.string	"CODE_FOR_adddi3_internal_1"
	.sleb128 8
	.uleb128 0xc
	.string	"CODE_FOR_adddi3_internal_2"
	.sleb128 9
	.uleb128 0xc
	.string	"CODE_FOR_adddi3_internal_3"
	.sleb128 10
	.uleb128 0xc
	.string	"CODE_FOR_addsi3_internal_2"
	.sleb128 14
	.uleb128 0xc
	.string	"CODE_FOR_subdf3"
	.sleb128 16
	.uleb128 0xc
	.string	"CODE_FOR_subsf3"
	.sleb128 17
	.uleb128 0xc
	.string	"CODE_FOR_subsi3_internal"
	.sleb128 18
	.uleb128 0xc
	.string	"CODE_FOR_subdi3_internal"
	.sleb128 22
	.uleb128 0xc
	.string	"CODE_FOR_subdi3_internal_2"
	.sleb128 23
	.uleb128 0xc
	.string	"CODE_FOR_subdi3_internal_3"
	.sleb128 24
	.uleb128 0xc
	.string	"CODE_FOR_subsi3_internal_2"
	.sleb128 28
	.uleb128 0xc
	.string	"CODE_FOR_muldf3_internal"
	.sleb128 30
	.uleb128 0xc
	.string	"CODE_FOR_muldf3_r4300"
	.sleb128 31
	.uleb128 0xc
	.string	"CODE_FOR_mulsf3_internal"
	.sleb128 32
	.uleb128 0xc
	.string	"CODE_FOR_mulsf3_r4300"
	.sleb128 33
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3_mult3"
	.sleb128 34
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3_internal"
	.sleb128 35
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3_r4000"
	.sleb128 36
	.uleb128 0xc
	.string	"CODE_FOR_muldi3_internal"
	.sleb128 41
	.uleb128 0xc
	.string	"CODE_FOR_muldi3_internal2"
	.sleb128 42
	.uleb128 0xc
	.string	"CODE_FOR_mulsidi3_internal"
	.sleb128 43
	.uleb128 0xc
	.string	"CODE_FOR_mulsidi3_64bit"
	.sleb128 44
	.uleb128 0xc
	.string	"CODE_FOR_xmulsi3_highpart_internal"
	.sleb128 47
	.uleb128 0xc
	.string	"CODE_FOR_xmulsi3_highpart_mulhi"
	.sleb128 48
	.uleb128 0xc
	.string	"CODE_FOR_smuldi3_highpart"
	.sleb128 50
	.uleb128 0xc
	.string	"CODE_FOR_umuldi3_highpart"
	.sleb128 51
	.uleb128 0xc
	.string	"CODE_FOR_madsi"
	.sleb128 52
	.uleb128 0xc
	.string	"CODE_FOR_divdf3"
	.sleb128 63
	.uleb128 0xc
	.string	"CODE_FOR_divsf3"
	.sleb128 64
	.uleb128 0xc
	.string	"CODE_FOR_divmodsi4_internal"
	.sleb128 67
	.uleb128 0xc
	.string	"CODE_FOR_divmoddi4_internal"
	.sleb128 68
	.uleb128 0xc
	.string	"CODE_FOR_udivmodsi4_internal"
	.sleb128 69
	.uleb128 0xc
	.string	"CODE_FOR_udivmoddi4_internal"
	.sleb128 70
	.uleb128 0xc
	.string	"CODE_FOR_div_trap_normal"
	.sleb128 71
	.uleb128 0xc
	.string	"CODE_FOR_div_trap_mips16"
	.sleb128 72
	.uleb128 0xc
	.string	"CODE_FOR_divsi3_internal"
	.sleb128 73
	.uleb128 0xc
	.string	"CODE_FOR_divdi3_internal"
	.sleb128 74
	.uleb128 0xc
	.string	"CODE_FOR_modsi3_internal"
	.sleb128 75
	.uleb128 0xc
	.string	"CODE_FOR_moddi3_internal"
	.sleb128 76
	.uleb128 0xc
	.string	"CODE_FOR_udivsi3_internal"
	.sleb128 77
	.uleb128 0xc
	.string	"CODE_FOR_udivdi3_internal"
	.sleb128 78
	.uleb128 0xc
	.string	"CODE_FOR_umodsi3_internal"
	.sleb128 79
	.uleb128 0xc
	.string	"CODE_FOR_umoddi3_internal"
	.sleb128 80
	.uleb128 0xc
	.string	"CODE_FOR_sqrtdf2"
	.sleb128 81
	.uleb128 0xc
	.string	"CODE_FOR_sqrtsf2"
	.sleb128 82
	.uleb128 0xc
	.string	"CODE_FOR_abssi2"
	.sleb128 85
	.uleb128 0xc
	.string	"CODE_FOR_absdi2"
	.sleb128 86
	.uleb128 0xc
	.string	"CODE_FOR_absdf2"
	.sleb128 87
	.uleb128 0xc
	.string	"CODE_FOR_abssf2"
	.sleb128 88
	.uleb128 0xc
	.string	"CODE_FOR_ffssi2"
	.sleb128 89
	.uleb128 0xc
	.string	"CODE_FOR_ffsdi2"
	.sleb128 90
	.uleb128 0xc
	.string	"CODE_FOR_negsi2"
	.sleb128 91
	.uleb128 0xc
	.string	"CODE_FOR_negdi2_internal"
	.sleb128 92
	.uleb128 0xc
	.string	"CODE_FOR_negdi2_internal_2"
	.sleb128 93
	.uleb128 0xc
	.string	"CODE_FOR_negdf2"
	.sleb128 94
	.uleb128 0xc
	.string	"CODE_FOR_negsf2"
	.sleb128 95
	.uleb128 0xc
	.string	"CODE_FOR_one_cmplsi2"
	.sleb128 96
	.uleb128 0xc
	.string	"CODE_FOR_one_cmpldi2"
	.sleb128 97
	.uleb128 0xc
	.string	"CODE_FOR_anddi3_internal1"
	.sleb128 102
	.uleb128 0xc
	.string	"CODE_FOR_xordi3_immed"
	.sleb128 112
	.uleb128 0xc
	.string	"CODE_FOR_truncdfsf2"
	.sleb128 115
	.uleb128 0xc
	.string	"CODE_FOR_truncdisi2"
	.sleb128 116
	.uleb128 0xc
	.string	"CODE_FOR_truncdihi2"
	.sleb128 117
	.uleb128 0xc
	.string	"CODE_FOR_truncdiqi2"
	.sleb128 118
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendsidi2_internal"
	.sleb128 125
	.uleb128 0xc
	.string	"CODE_FOR_extendhidi2_internal"
	.sleb128 137
	.uleb128 0xc
	.string	"CODE_FOR_extendhisi2_internal"
	.sleb128 138
	.uleb128 0xc
	.string	"CODE_FOR_extendqihi2_internal"
	.sleb128 139
	.uleb128 0xc
	.string	"CODE_FOR_extendqisi2_insn"
	.sleb128 140
	.uleb128 0xc
	.string	"CODE_FOR_extendqidi2_insn"
	.sleb128 141
	.uleb128 0xc
	.string	"CODE_FOR_extendsfdf2"
	.sleb128 142
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfsi2_insn"
	.sleb128 143
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfsi2_macro"
	.sleb128 144
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfsi2_insn"
	.sleb128 145
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfsi2_macro"
	.sleb128 146
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfdi2"
	.sleb128 147
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfdi2"
	.sleb128 148
	.uleb128 0xc
	.string	"CODE_FOR_floatsidf2"
	.sleb128 149
	.uleb128 0xc
	.string	"CODE_FOR_floatdidf2"
	.sleb128 150
	.uleb128 0xc
	.string	"CODE_FOR_floatsisf2"
	.sleb128 151
	.uleb128 0xc
	.string	"CODE_FOR_floatdisf2"
	.sleb128 152
	.uleb128 0xc
	.string	"CODE_FOR_movsi_ulw"
	.sleb128 153
	.uleb128 0xc
	.string	"CODE_FOR_movsi_usw"
	.sleb128 154
	.uleb128 0xc
	.string	"CODE_FOR_movdi_uld"
	.sleb128 155
	.uleb128 0xc
	.string	"CODE_FOR_movdi_usd"
	.sleb128 156
	.uleb128 0xc
	.string	"CODE_FOR_high"
	.sleb128 157
	.uleb128 0xc
	.string	"CODE_FOR_low"
	.sleb128 158
	.uleb128 0xc
	.string	"CODE_FOR_movdi_internal"
	.sleb128 160
	.uleb128 0xc
	.string	"CODE_FOR_movdi_internal2"
	.sleb128 162
	.uleb128 0xc
	.string	"CODE_FOR_movsi_internal"
	.sleb128 166
	.uleb128 0xc
	.string	"CODE_FOR_hilo_delay"
	.sleb128 168
	.uleb128 0xc
	.string	"CODE_FOR_movcc"
	.sleb128 169
	.uleb128 0xc
	.string	"CODE_FOR_movhi_internal"
	.sleb128 178
	.uleb128 0xc
	.string	"CODE_FOR_movqi_internal"
	.sleb128 180
	.uleb128 0xc
	.string	"CODE_FOR_movsf_internal1"
	.sleb128 182
	.uleb128 0xc
	.string	"CODE_FOR_movsf_internal2"
	.sleb128 183
	.uleb128 0xc
	.string	"CODE_FOR_movdf_internal1"
	.sleb128 185
	.uleb128 0xc
	.string	"CODE_FOR_movdf_internal1a"
	.sleb128 186
	.uleb128 0xc
	.string	"CODE_FOR_movdf_internal2"
	.sleb128 187
	.uleb128 0xc
	.string	"CODE_FOR_loadgp"
	.sleb128 189
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi_internal"
	.sleb128 190
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi_internal2"
	.sleb128 192
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi_internal3"
	.sleb128 194
	.uleb128 0xc
	.string	"CODE_FOR_ashlsi3_internal1"
	.sleb128 195
	.uleb128 0xc
	.string	"CODE_FOR_ashlsi3_internal2"
	.sleb128 196
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal"
	.sleb128 197
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal2"
	.sleb128 198
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal3"
	.sleb128 199
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal4"
	.sleb128 200
	.uleb128 0xc
	.string	"CODE_FOR_ashrsi3_internal1"
	.sleb128 202
	.uleb128 0xc
	.string	"CODE_FOR_ashrsi3_internal2"
	.sleb128 203
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal"
	.sleb128 204
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal2"
	.sleb128 205
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal3"
	.sleb128 206
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal4"
	.sleb128 207
	.uleb128 0xc
	.string	"CODE_FOR_lshrsi3_internal1"
	.sleb128 209
	.uleb128 0xc
	.string	"CODE_FOR_lshrsi3_internal2"
	.sleb128 210
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal"
	.sleb128 212
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal2"
	.sleb128 213
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal3"
	.sleb128 214
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal4"
	.sleb128 215
	.uleb128 0xc
	.string	"CODE_FOR_rotrsi3"
	.sleb128 217
	.uleb128 0xc
	.string	"CODE_FOR_rotrdi3"
	.sleb128 218
	.uleb128 0xc
	.string	"CODE_FOR_branch_fp"
	.sleb128 219
	.uleb128 0xc
	.string	"CODE_FOR_branch_fp_inverted"
	.sleb128 220
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero"
	.sleb128 221
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero_inverted"
	.sleb128 222
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero_di"
	.sleb128 223
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero_di_inverted"
	.sleb128 224
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality"
	.sleb128 225
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality_di"
	.sleb128 226
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality_inverted"
	.sleb128 227
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality_di_inverted"
	.sleb128 228
	.uleb128 0xc
	.string	"CODE_FOR_seq_si_zero"
	.sleb128 231
	.uleb128 0xc
	.string	"CODE_FOR_seq_di_zero"
	.sleb128 233
	.uleb128 0xc
	.string	"CODE_FOR_sne_si_zero"
	.sleb128 235
	.uleb128 0xc
	.string	"CODE_FOR_sne_di_zero"
	.sleb128 236
	.uleb128 0xc
	.string	"CODE_FOR_sgt_si"
	.sleb128 237
	.uleb128 0xc
	.string	"CODE_FOR_sgt_di"
	.sleb128 239
	.uleb128 0xc
	.string	"CODE_FOR_slt_si"
	.sleb128 241
	.uleb128 0xc
	.string	"CODE_FOR_slt_di"
	.sleb128 243
	.uleb128 0xc
	.string	"CODE_FOR_sle_si_const"
	.sleb128 245
	.uleb128 0xc
	.string	"CODE_FOR_sle_di_const"
	.sleb128 247
	.uleb128 0xc
	.string	"CODE_FOR_sgtu_si"
	.sleb128 249
	.uleb128 0xc
	.string	"CODE_FOR_sgtu_di"
	.sleb128 251
	.uleb128 0xc
	.string	"CODE_FOR_sltu_si"
	.sleb128 253
	.uleb128 0xc
	.string	"CODE_FOR_sltu_di"
	.sleb128 255
	.uleb128 0xc
	.string	"CODE_FOR_sleu_si_const"
	.sleb128 257
	.uleb128 0xc
	.string	"CODE_FOR_sleu_di_const"
	.sleb128 259
	.uleb128 0xc
	.string	"CODE_FOR_sunordered_df"
	.sleb128 261
	.uleb128 0xc
	.string	"CODE_FOR_sunlt_df"
	.sleb128 262
	.uleb128 0xc
	.string	"CODE_FOR_suneq_df"
	.sleb128 263
	.uleb128 0xc
	.string	"CODE_FOR_sunle_df"
	.sleb128 264
	.uleb128 0xc
	.string	"CODE_FOR_seq_df"
	.sleb128 265
	.uleb128 0xc
	.string	"CODE_FOR_slt_df"
	.sleb128 266
	.uleb128 0xc
	.string	"CODE_FOR_sle_df"
	.sleb128 267
	.uleb128 0xc
	.string	"CODE_FOR_sgt_df"
	.sleb128 268
	.uleb128 0xc
	.string	"CODE_FOR_sge_df"
	.sleb128 269
	.uleb128 0xc
	.string	"CODE_FOR_sunordered_sf"
	.sleb128 270
	.uleb128 0xc
	.string	"CODE_FOR_sunlt_sf"
	.sleb128 271
	.uleb128 0xc
	.string	"CODE_FOR_suneq_sf"
	.sleb128 272
	.uleb128 0xc
	.string	"CODE_FOR_sunle_sf"
	.sleb128 273
	.uleb128 0xc
	.string	"CODE_FOR_seq_sf"
	.sleb128 274
	.uleb128 0xc
	.string	"CODE_FOR_slt_sf"
	.sleb128 275
	.uleb128 0xc
	.string	"CODE_FOR_sle_sf"
	.sleb128 276
	.uleb128 0xc
	.string	"CODE_FOR_sgt_sf"
	.sleb128 277
	.uleb128 0xc
	.string	"CODE_FOR_sge_sf"
	.sleb128 278
	.uleb128 0xc
	.string	"CODE_FOR_jump"
	.sleb128 279
	.uleb128 0xc
	.string	"CODE_FOR_indirect_jump_internal1"
	.sleb128 281
	.uleb128 0xc
	.string	"CODE_FOR_indirect_jump_internal2"
	.sleb128 282
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal1"
	.sleb128 283
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal2"
	.sleb128 284
	.uleb128 0xc
	.string	"CODE_FOR_casesi_internal"
	.sleb128 287
	.uleb128 0xc
	.string	"CODE_FOR_casesi_internal_di"
	.sleb128 288
	.uleb128 0xc
	.string	"CODE_FOR_blockage"
	.sleb128 289
	.uleb128 0xc
	.string	"CODE_FOR_return"
	.sleb128 290
	.uleb128 0xc
	.string	"CODE_FOR_return_internal"
	.sleb128 291
	.uleb128 0xc
	.string	"CODE_FOR_get_fnaddr"
	.sleb128 292
	.uleb128 0xc
	.string	"CODE_FOR_eh_set_lr_si"
	.sleb128 293
	.uleb128 0xc
	.string	"CODE_FOR_eh_set_lr_di"
	.sleb128 294
	.uleb128 0xc
	.string	"CODE_FOR_exception_receiver"
	.sleb128 295
	.uleb128 0xc
	.string	"CODE_FOR_call_internal1"
	.sleb128 297
	.uleb128 0xc
	.string	"CODE_FOR_call_internal2"
	.sleb128 298
	.uleb128 0xc
	.string	"CODE_FOR_call_internal3a"
	.sleb128 299
	.uleb128 0xc
	.string	"CODE_FOR_call_internal3b"
	.sleb128 300
	.uleb128 0xc
	.string	"CODE_FOR_call_internal3c"
	.sleb128 301
	.uleb128 0xc
	.string	"CODE_FOR_call_internal4a"
	.sleb128 302
	.uleb128 0xc
	.string	"CODE_FOR_call_internal4b"
	.sleb128 303
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal1"
	.sleb128 305
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal2"
	.sleb128 306
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal3a"
	.sleb128 307
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal3b"
	.sleb128 308
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal3c"
	.sleb128 309
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal4a"
	.sleb128 310
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal4b"
	.sleb128 311
	.uleb128 0xc
	.string	"CODE_FOR_call_value_multiple_internal1"
	.sleb128 312
	.uleb128 0xc
	.string	"CODE_FOR_call_value_multiple_internal2"
	.sleb128 313
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_si_address"
	.sleb128 314
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_si"
	.sleb128 315
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_di_address"
	.sleb128 316
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_di"
	.sleb128 317
	.uleb128 0xc
	.string	"CODE_FOR_nop"
	.sleb128 318
	.uleb128 0xc
	.string	"CODE_FOR_consttable_qi"
	.sleb128 331
	.uleb128 0xc
	.string	"CODE_FOR_consttable_hi"
	.sleb128 332
	.uleb128 0xc
	.string	"CODE_FOR_consttable_si"
	.sleb128 333
	.uleb128 0xc
	.string	"CODE_FOR_consttable_di"
	.sleb128 334
	.uleb128 0xc
	.string	"CODE_FOR_consttable_sf"
	.sleb128 335
	.uleb128 0xc
	.string	"CODE_FOR_consttable_df"
	.sleb128 336
	.uleb128 0xc
	.string	"CODE_FOR_align_2"
	.sleb128 337
	.uleb128 0xc
	.string	"CODE_FOR_align_4"
	.sleb128 338
	.uleb128 0xc
	.string	"CODE_FOR_align_8"
	.sleb128 339
	.uleb128 0xc
	.string	"CODE_FOR_leasi"
	.sleb128 340
	.uleb128 0xc
	.string	"CODE_FOR_leadi"
	.sleb128 341
	.uleb128 0xc
	.string	"CODE_FOR_conditional_trap"
	.sleb128 342
	.uleb128 0xc
	.string	"CODE_FOR_addsi3"
	.sleb128 343
	.uleb128 0xc
	.string	"CODE_FOR_adddi3"
	.sleb128 346
	.uleb128 0xc
	.string	"CODE_FOR_subsi3"
	.sleb128 353
	.uleb128 0xc
	.string	"CODE_FOR_subdi3"
	.sleb128 356
	.uleb128 0xc
	.string	"CODE_FOR_muldf3"
	.sleb128 363
	.uleb128 0xc
	.string	"CODE_FOR_mulsf3"
	.sleb128 364
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3"
	.sleb128 365
	.uleb128 0xc
	.string	"CODE_FOR_muldi3"
	.sleb128 371
	.uleb128 0xc
	.string	"CODE_FOR_mulsidi3"
	.sleb128 372
	.uleb128 0xc
	.string	"CODE_FOR_umulsidi3"
	.sleb128 373
	.uleb128 0xc
	.string	"CODE_FOR_smulsi3_highpart"
	.sleb128 374
	.uleb128 0xc
	.string	"CODE_FOR_umulsi3_highpart"
	.sleb128 375
	.uleb128 0xc
	.string	"CODE_FOR_divmodsi4"
	.sleb128 376
	.uleb128 0xc
	.string	"CODE_FOR_divmoddi4"
	.sleb128 377
	.uleb128 0xc
	.string	"CODE_FOR_udivmodsi4"
	.sleb128 378
	.uleb128 0xc
	.string	"CODE_FOR_udivmoddi4"
	.sleb128 379
	.uleb128 0xc
	.string	"CODE_FOR_div_trap"
	.sleb128 380
	.uleb128 0xc
	.string	"CODE_FOR_divsi3"
	.sleb128 381
	.uleb128 0xc
	.string	"CODE_FOR_divdi3"
	.sleb128 382
	.uleb128 0xc
	.string	"CODE_FOR_modsi3"
	.sleb128 383
	.uleb128 0xc
	.string	"CODE_FOR_moddi3"
	.sleb128 384
	.uleb128 0xc
	.string	"CODE_FOR_udivsi3"
	.sleb128 385
	.uleb128 0xc
	.string	"CODE_FOR_udivdi3"
	.sleb128 386
	.uleb128 0xc
	.string	"CODE_FOR_umodsi3"
	.sleb128 387
	.uleb128 0xc
	.string	"CODE_FOR_umoddi3"
	.sleb128 388
	.uleb128 0xc
	.string	"CODE_FOR_negdi2"
	.sleb128 389
	.uleb128 0xc
	.string	"CODE_FOR_andsi3"
	.sleb128 391
	.uleb128 0xc
	.string	"CODE_FOR_anddi3"
	.sleb128 392
	.uleb128 0xc
	.string	"CODE_FOR_iorsi3"
	.sleb128 394
	.uleb128 0xc
	.string	"CODE_FOR_iordi3"
	.sleb128 395
	.uleb128 0xc
	.string	"CODE_FOR_xorsi3"
	.sleb128 397
	.uleb128 0xc
	.string	"CODE_FOR_xordi3"
	.sleb128 398
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendsidi2"
	.sleb128 401
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendhisi2"
	.sleb128 402
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendhidi2"
	.sleb128 403
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendqihi2"
	.sleb128 404
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendqisi2"
	.sleb128 405
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendqidi2"
	.sleb128 406
	.uleb128 0xc
	.string	"CODE_FOR_extendsidi2"
	.sleb128 407
	.uleb128 0xc
	.string	"CODE_FOR_extendhidi2"
	.sleb128 408
	.uleb128 0xc
	.string	"CODE_FOR_extendhisi2"
	.sleb128 409
	.uleb128 0xc
	.string	"CODE_FOR_extendqihi2"
	.sleb128 410
	.uleb128 0xc
	.string	"CODE_FOR_extendqisi2"
	.sleb128 411
	.uleb128 0xc
	.string	"CODE_FOR_extendqidi2"
	.sleb128 412
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfsi2"
	.sleb128 413
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfsi2"
	.sleb128 414
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncdfsi2"
	.sleb128 415
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncdfdi2"
	.sleb128 416
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncsfsi2"
	.sleb128 417
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncsfdi2"
	.sleb128 418
	.uleb128 0xc
	.string	"CODE_FOR_extv"
	.sleb128 419
	.uleb128 0xc
	.string	"CODE_FOR_extzv"
	.sleb128 420
	.uleb128 0xc
	.string	"CODE_FOR_insv"
	.sleb128 421
	.uleb128 0xc
	.string	"CODE_FOR_movdi"
	.sleb128 422
	.uleb128 0xc
	.string	"CODE_FOR_reload_indi"
	.sleb128 425
	.uleb128 0xc
	.string	"CODE_FOR_reload_outdi"
	.sleb128 426
	.uleb128 0xc
	.string	"CODE_FOR_movsi"
	.sleb128 428
	.uleb128 0xc
	.string	"CODE_FOR_reload_outsi"
	.sleb128 432
	.uleb128 0xc
	.string	"CODE_FOR_reload_insi"
	.sleb128 433
	.uleb128 0xc
	.string	"CODE_FOR_reload_incc"
	.sleb128 434
	.uleb128 0xc
	.string	"CODE_FOR_reload_outcc"
	.sleb128 435
	.uleb128 0xc
	.string	"CODE_FOR_movhi"
	.sleb128 436
	.uleb128 0xc
	.string	"CODE_FOR_movqi"
	.sleb128 438
	.uleb128 0xc
	.string	"CODE_FOR_movsf"
	.sleb128 440
	.uleb128 0xc
	.string	"CODE_FOR_movdf"
	.sleb128 441
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi"
	.sleb128 443
	.uleb128 0xc
	.string	"CODE_FOR_ashlsi3"
	.sleb128 444
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3"
	.sleb128 446
	.uleb128 0xc
	.string	"CODE_FOR_ashrsi3"
	.sleb128 452
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3"
	.sleb128 454
	.uleb128 0xc
	.string	"CODE_FOR_lshrsi3"
	.sleb128 460
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3"
	.sleb128 463
	.uleb128 0xc
	.string	"CODE_FOR_cmpsi"
	.sleb128 469
	.uleb128 0xc
	.string	"CODE_FOR_tstsi"
	.sleb128 470
	.uleb128 0xc
	.string	"CODE_FOR_cmpdi"
	.sleb128 471
	.uleb128 0xc
	.string	"CODE_FOR_tstdi"
	.sleb128 472
	.uleb128 0xc
	.string	"CODE_FOR_cmpdf"
	.sleb128 473
	.uleb128 0xc
	.string	"CODE_FOR_cmpsf"
	.sleb128 474
	.uleb128 0xc
	.string	"CODE_FOR_bunordered"
	.sleb128 475
	.uleb128 0xc
	.string	"CODE_FOR_bordered"
	.sleb128 476
	.uleb128 0xc
	.string	"CODE_FOR_bunlt"
	.sleb128 477
	.uleb128 0xc
	.string	"CODE_FOR_bunge"
	.sleb128 478
	.uleb128 0xc
	.string	"CODE_FOR_buneq"
	.sleb128 479
	.uleb128 0xc
	.string	"CODE_FOR_bltgt"
	.sleb128 480
	.uleb128 0xc
	.string	"CODE_FOR_bunle"
	.sleb128 481
	.uleb128 0xc
	.string	"CODE_FOR_bungt"
	.sleb128 482
	.uleb128 0xc
	.string	"CODE_FOR_beq"
	.sleb128 483
	.uleb128 0xc
	.string	"CODE_FOR_bne"
	.sleb128 484
	.uleb128 0xc
	.string	"CODE_FOR_bgt"
	.sleb128 485
	.uleb128 0xc
	.string	"CODE_FOR_bge"
	.sleb128 486
	.uleb128 0xc
	.string	"CODE_FOR_blt"
	.sleb128 487
	.uleb128 0xc
	.string	"CODE_FOR_ble"
	.sleb128 488
	.uleb128 0xc
	.string	"CODE_FOR_bgtu"
	.sleb128 489
	.uleb128 0xc
	.string	"CODE_FOR_bgeu"
	.sleb128 490
	.uleb128 0xc
	.string	"CODE_FOR_bltu"
	.sleb128 491
	.uleb128 0xc
	.string	"CODE_FOR_bleu"
	.sleb128 492
	.uleb128 0xc
	.string	"CODE_FOR_seq"
	.sleb128 493
	.uleb128 0xc
	.string	"CODE_FOR_sne"
	.sleb128 494
	.uleb128 0xc
	.string	"CODE_FOR_sgt"
	.sleb128 495
	.uleb128 0xc
	.string	"CODE_FOR_sge"
	.sleb128 496
	.uleb128 0xc
	.string	"CODE_FOR_slt"
	.sleb128 497
	.uleb128 0xc
	.string	"CODE_FOR_sle"
	.sleb128 498
	.uleb128 0xc
	.string	"CODE_FOR_sgtu"
	.sleb128 499
	.uleb128 0xc
	.string	"CODE_FOR_sgeu"
	.sleb128 500
	.uleb128 0xc
	.string	"CODE_FOR_sltu"
	.sleb128 501
	.uleb128 0xc
	.string	"CODE_FOR_sleu"
	.sleb128 502
	.uleb128 0xc
	.string	"CODE_FOR_indirect_jump"
	.sleb128 503
	.uleb128 0xc
	.string	"CODE_FOR_tablejump"
	.sleb128 504
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal3"
	.sleb128 505
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_mips161"
	.sleb128 506
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_mips162"
	.sleb128 507
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal4"
	.sleb128 508
	.uleb128 0xc
	.string	"CODE_FOR_casesi"
	.sleb128 509
	.uleb128 0xc
	.string	"CODE_FOR_builtin_setjmp_setup"
	.sleb128 510
	.uleb128 0xc
	.string	"CODE_FOR_builtin_setjmp_setup_32"
	.sleb128 511
	.uleb128 0xc
	.string	"CODE_FOR_builtin_setjmp_setup_64"
	.sleb128 512
	.uleb128 0xc
	.string	"CODE_FOR_builtin_longjmp"
	.sleb128 513
	.uleb128 0xc
	.string	"CODE_FOR_prologue"
	.sleb128 514
	.uleb128 0xc
	.string	"CODE_FOR_epilogue"
	.sleb128 515
	.uleb128 0xc
	.string	"CODE_FOR_eh_return"
	.sleb128 516
	.uleb128 0xc
	.string	"CODE_FOR_call"
	.sleb128 518
	.uleb128 0xc
	.string	"CODE_FOR_call_internal0"
	.sleb128 519
	.uleb128 0xc
	.string	"CODE_FOR_call_value"
	.sleb128 520
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal0"
	.sleb128 521
	.uleb128 0xc
	.string	"CODE_FOR_call_value_multiple_internal0"
	.sleb128 522
	.uleb128 0xc
	.string	"CODE_FOR_untyped_call"
	.sleb128 523
	.uleb128 0xc
	.string	"CODE_FOR_prefetch"
	.sleb128 524
	.uleb128 0xc
	.string	"CODE_FOR_movsicc"
	.sleb128 525
	.uleb128 0xc
	.string	"CODE_FOR_movdicc"
	.sleb128 526
	.uleb128 0xc
	.string	"CODE_FOR_movsfcc"
	.sleb128 527
	.uleb128 0xc
	.string	"CODE_FOR_movdfcc"
	.sleb128 528
	.uleb128 0xc
	.string	"CODE_FOR_nothing"
	.sleb128 529
	.byte	0x0
	.uleb128 0x4
	.long	0x4bd8
	.string	"optab_handlers"
	.byte	0x8
	.byte	0x17
	.byte	0x2c
	.uleb128 0x1c
	.long	.LASF19
	.byte	0x17
	.byte	0x2d
	.long	0x2a41
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"libfunc"
	.byte	0x17
	.byte	0x2e
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x23
	.long	0x4c09
	.string	"optab"
	.value	0x1b4
	.byte	0x17
	.byte	0x2a
	.uleb128 0x1c
	.long	.LASF0
	.byte	0x17
	.byte	0x2b
	.long	0xe4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"handlers"
	.byte	0x17
	.byte	0x2f
	.long	0x4c09
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x13
	.long	0x4c19
	.long	0x4ba0
	.uleb128 0x14
	.long	0x6c7
	.byte	0x35
	.byte	0x0
	.uleb128 0x2
	.string	"optab"
	.byte	0x17
	.byte	0x31
	.long	0x4c26
	.uleb128 0x3
	.byte	0x4
	.long	0x4bd8
	.uleb128 0x4
	.long	0x4c62
	.string	"const_equiv_data"
	.byte	0x8
	.byte	0x6
	.byte	0x24
	.uleb128 0x7
	.string	"rtx"
	.byte	0x6
	.byte	0x32
	.long	0xa7
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"age"
	.byte	0x6
	.byte	0x36
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0xb
	.long	0x4dfd
	.string	"varray_data_enum"
	.byte	0x4
	.byte	0x6
	.byte	0x3c
	.uleb128 0xc
	.string	"VARRAY_DATA_C"
	.sleb128 0
	.uleb128 0xc
	.string	"VARRAY_DATA_UC"
	.sleb128 1
	.uleb128 0xc
	.string	"VARRAY_DATA_S"
	.sleb128 2
	.uleb128 0xc
	.string	"VARRAY_DATA_US"
	.sleb128 3
	.uleb128 0xc
	.string	"VARRAY_DATA_I"
	.sleb128 4
	.uleb128 0xc
	.string	"VARRAY_DATA_U"
	.sleb128 5
	.uleb128 0xc
	.string	"VARRAY_DATA_L"
	.sleb128 6
	.uleb128 0xc
	.string	"VARRAY_DATA_UL"
	.sleb128 7
	.uleb128 0xc
	.string	"VARRAY_DATA_HINT"
	.sleb128 8
	.uleb128 0xc
	.string	"VARRAY_DATA_UHINT"
	.sleb128 9
	.uleb128 0xc
	.string	"VARRAY_DATA_GENERIC"
	.sleb128 10
	.uleb128 0xc
	.string	"VARRAY_DATA_CPTR"
	.sleb128 11
	.uleb128 0xc
	.string	"VARRAY_DATA_RTX"
	.sleb128 12
	.uleb128 0xc
	.string	"VARRAY_DATA_RTVEC"
	.sleb128 13
	.uleb128 0xc
	.string	"VARRAY_DATA_TREE"
	.sleb128 14
	.uleb128 0xc
	.string	"VARRAY_DATA_BITMAP"
	.sleb128 15
	.uleb128 0xc
	.string	"VARRAY_DATA_REG"
	.sleb128 16
	.uleb128 0xc
	.string	"VARRAY_DATA_CONST_EQUIV"
	.sleb128 17
	.uleb128 0xc
	.string	"VARRAY_DATA_BB"
	.sleb128 18
	.uleb128 0xc
	.string	"VARRAY_DATA_TE"
	.sleb128 19
	.uleb128 0xc
	.string	"NUM_VARRAY_DATA"
	.sleb128 20
	.byte	0x0
	.uleb128 0x8
	.long	0x4ef9
	.string	"varray_data_tag"
	.byte	0x8
	.byte	0x6
	.byte	0x55
	.uleb128 0x1e
	.string	"c"
	.byte	0x6
	.byte	0x56
	.long	0xac0
	.uleb128 0x1e
	.string	"uc"
	.byte	0x6
	.byte	0x58
	.long	0x4ef9
	.uleb128 0x1e
	.string	"s"
	.byte	0x6
	.byte	0x5a
	.long	0x4f09
	.uleb128 0x1e
	.string	"us"
	.byte	0x6
	.byte	0x5c
	.long	0x4f19
	.uleb128 0x1e
	.string	"i"
	.byte	0x6
	.byte	0x5e
	.long	0x4f29
	.uleb128 0x1e
	.string	"u"
	.byte	0x6
	.byte	0x60
	.long	0x4f39
	.uleb128 0x1e
	.string	"l"
	.byte	0x6
	.byte	0x62
	.long	0x4f49
	.uleb128 0x1e
	.string	"ul"
	.byte	0x6
	.byte	0x64
	.long	0x4f59
	.uleb128 0x1e
	.string	"hint"
	.byte	0x6
	.byte	0x66
	.long	0x4f69
	.uleb128 0x1e
	.string	"uhint"
	.byte	0x6
	.byte	0x68
	.long	0x4f79
	.uleb128 0x1e
	.string	"generic"
	.byte	0x6
	.byte	0x6a
	.long	0x4f89
	.uleb128 0x1e
	.string	"cptr"
	.byte	0x6
	.byte	0x6c
	.long	0x4f99
	.uleb128 0x1e
	.string	"rtx"
	.byte	0x6
	.byte	0x6e
	.long	0x4fa9
	.uleb128 0x1e
	.string	"rtvec"
	.byte	0x6
	.byte	0x70
	.long	0x4fb9
	.uleb128 0x1e
	.string	"tree"
	.byte	0x6
	.byte	0x72
	.long	0x4fc9
	.uleb128 0x1e
	.string	"bitmap"
	.byte	0x6
	.byte	0x74
	.long	0x4fd9
	.uleb128 0x1e
	.string	"reg"
	.byte	0x6
	.byte	0x76
	.long	0x4fe9
	.uleb128 0x1e
	.string	"const_equiv"
	.byte	0x6
	.byte	0x78
	.long	0x50e5
	.uleb128 0x1e
	.string	"bb"
	.byte	0x6
	.byte	0x7a
	.long	0x50f5
	.uleb128 0x1e
	.string	"te"
	.byte	0x6
	.byte	0x7c
	.long	0x5105
	.byte	0x0
	.uleb128 0x13
	.long	0x4f09
	.long	0x6f4
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f19
	.long	0x73f
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f29
	.long	0x705
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f39
	.long	0x461
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f49
	.long	0x6b0
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f59
	.long	0x796
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f69
	.long	0x71b
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f79
	.long	0x74c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f89
	.long	0x75d
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4f99
	.long	0x7b3
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4fa9
	.long	0x7b5
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4fb9
	.long	0xa7
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4fc9
	.long	0x1a8
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4fd9
	.long	0x1ef
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4fe9
	.long	0x1904
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x4ff9
	.long	0x50df
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x4
	.long	0x50df
	.string	"reg_info_def"
	.byte	0x2c
	.byte	0x6
	.byte	0x76
	.uleb128 0x7
	.string	"first_uid"
	.byte	0x18
	.byte	0x31
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"last_uid"
	.byte	0x18
	.byte	0x32
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"last_note_uid"
	.byte	0x18
	.byte	0x33
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"sets"
	.byte	0x18
	.byte	0x36
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"refs"
	.byte	0x18
	.byte	0x39
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"freq"
	.byte	0x18
	.byte	0x3a
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"deaths"
	.byte	0x18
	.byte	0x3b
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"live_length"
	.byte	0x18
	.byte	0x3c
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"calls_crossed"
	.byte	0x18
	.byte	0x3d
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x1c
	.long	.LASF20
	.byte	0x18
	.byte	0x3e
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"changes_mode"
	.byte	0x18
	.byte	0x3f
	.long	0x459
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x4ff9
	.uleb128 0x13
	.long	0x50f5
	.long	0x4c2c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x5105
	.long	0x1a8d
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.long	0x5115
	.long	0x5143
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x4
	.long	0x5143
	.string	"elt_list"
	.byte	0x8
	.byte	0x6
	.byte	0x7c
	.uleb128 0x1c
	.long	.LASF15
	.byte	0x5
	.byte	0x3b
	.long	0x5143
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"elt"
	.byte	0x5
	.byte	0x3c
	.long	0x5ed7
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5115
	.uleb128 0x2
	.string	"varray_data"
	.byte	0x6
	.byte	0x7e
	.long	0x4dfd
	.uleb128 0x4
	.long	0x51d0
	.string	"varray_head_tag"
	.byte	0x18
	.byte	0x6
	.byte	0x81
	.uleb128 0x7
	.string	"num_elements"
	.byte	0x6
	.byte	0x82
	.long	0x6e6
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"elements_used"
	.byte	0x6
	.byte	0x83
	.long	0x6e6
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1c
	.long	.LASF3
	.byte	0x6
	.byte	0x85
	.long	0x4c62
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"name"
	.byte	0x6
	.byte	0x86
	.long	0x44e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"data"
	.byte	0x6
	.byte	0x87
	.long	0x5149
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.byte	0x0
	.uleb128 0x2
	.string	"varray_type"
	.byte	0x6
	.byte	0x8a
	.long	0x51e3
	.uleb128 0x3
	.byte	0x4
	.long	0x515c
	.uleb128 0x2
	.string	"BITMAP_WORD"
	.byte	0x7
	.byte	0x1d
	.long	0x71b
	.uleb128 0x4
	.long	0x5252
	.string	"bitmap_element_def"
	.byte	0x1c
	.byte	0x7
	.byte	0x34
	.uleb128 0x1c
	.long	.LASF15
	.byte	0x7
	.byte	0x35
	.long	0x5252
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1c
	.long	.LASF13
	.byte	0x7
	.byte	0x36
	.long	0x5252
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"indx"
	.byte	0x7
	.byte	0x37
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"bits"
	.byte	0x7
	.byte	0x38
	.long	0x5258
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x51fc
	.uleb128 0x13
	.long	0x5268
	.long	0x51e9
	.uleb128 0x14
	.long	0x6c7
	.byte	0x3
	.byte	0x0
	.uleb128 0x2
	.string	"bitmap_element"
	.byte	0x7
	.byte	0x39
	.long	0x51fc
	.uleb128 0x3
	.byte	0x4
	.long	0x5268
	.uleb128 0x2
	.string	"bitmap_head"
	.byte	0x7
	.byte	0x42
	.long	0x18a4
	.uleb128 0x2
	.string	"bitmap"
	.byte	0x7
	.byte	0x43
	.long	0x1904
	.uleb128 0x4
	.long	0x52fe
	.string	"simple_bitmap_def"
	.byte	0x14
	.byte	0x10
	.byte	0x20
	.uleb128 0x7
	.string	"n_bits"
	.byte	0x10
	.byte	0x21
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1c
	.long	.LASF9
	.byte	0x10
	.byte	0x22
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"bytes"
	.byte	0x10
	.byte	0x23
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"elms"
	.byte	0x10
	.byte	0x24
	.long	0x4f79
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x2
	.string	"sbitmap"
	.byte	0x10
	.byte	0x25
	.long	0x530d
	.uleb128 0x3
	.byte	0x4
	.long	0x52a5
	.uleb128 0x2
	.string	"regset_head"
	.byte	0xf
	.byte	0x20
	.long	0x5284
	.uleb128 0x2
	.string	"regset"
	.byte	0xf
	.byte	0x22
	.long	0x5297
	.uleb128 0x2
	.string	"gcov_type"
	.byte	0xf
	.byte	0x75
	.long	0x74c
	.uleb128 0x4
	.long	0x53ee
	.string	"edge_def"
	.byte	0x28
	.byte	0xf
	.byte	0x78
	.uleb128 0x7
	.string	"pred_next"
	.byte	0xf
	.byte	0x7a
	.long	0x53ee
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"succ_next"
	.byte	0xf
	.byte	0x7a
	.long	0x53ee
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"src"
	.byte	0xf
	.byte	0x7d
	.long	0x1a8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"dest"
	.byte	0xf
	.byte	0x7d
	.long	0x1a8d
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"insns"
	.byte	0xf
	.byte	0x80
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"aux"
	.byte	0xf
	.byte	0x83
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"flags"
	.byte	0xf
	.byte	0x85
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"probability"
	.byte	0xf
	.byte	0x86
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x1c
	.long	.LASF12
	.byte	0xf
	.byte	0x87
	.long	0x5334
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5345
	.uleb128 0x2
	.string	"edge"
	.byte	0xf
	.byte	0x89
	.long	0x53ee
	.uleb128 0x4
	.long	0x566d
	.string	"loop"
	.byte	0x80
	.byte	0xf
	.byte	0xdc
	.uleb128 0x11
	.string	"num"
	.byte	0xf
	.value	0x176
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"header"
	.byte	0xf
	.value	0x179
	.long	0x5673
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x11
	.string	"latch"
	.byte	0xf
	.value	0x17c
	.long	0x5673
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x11
	.string	"pre_header"
	.byte	0xf
	.value	0x17f
	.long	0x5673
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x11
	.string	"pre_header_edges"
	.byte	0xf
	.value	0x184
	.long	0x567e
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"num_pre_header_edges"
	.byte	0xf
	.value	0x187
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x25
	.long	.LASF11
	.byte	0xf
	.value	0x18b
	.long	0x5673
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x11
	.string	"last"
	.byte	0xf
	.value	0x18f
	.long	0x5673
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x11
	.string	"nodes"
	.byte	0xf
	.value	0x192
	.long	0x52fe
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x11
	.string	"num_nodes"
	.byte	0xf
	.value	0x195
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x11
	.string	"entry_edges"
	.byte	0xf
	.value	0x198
	.long	0x567e
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x11
	.string	"num_entries"
	.byte	0xf
	.value	0x19b
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x11
	.string	"exit_edges"
	.byte	0xf
	.value	0x19e
	.long	0x567e
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x11
	.string	"num_exits"
	.byte	0xf
	.value	0x1a1
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x11
	.string	"exits_doms"
	.byte	0xf
	.value	0x1a4
	.long	0x52fe
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x11
	.string	"depth"
	.byte	0xf
	.value	0x1a7
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x11
	.string	"pred"
	.byte	0xf
	.value	0x1aa
	.long	0x5684
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x11
	.string	"level"
	.byte	0xf
	.value	0x1ae
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x11
	.string	"outer"
	.byte	0xf
	.value	0x1b1
	.long	0x566d
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x11
	.string	"inner"
	.byte	0xf
	.value	0x1b4
	.long	0x566d
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x25
	.long	.LASF15
	.byte	0xf
	.value	0x1b7
	.long	0x566d
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x11
	.string	"invalid"
	.byte	0xf
	.value	0x1ba
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x11
	.string	"aux"
	.byte	0xf
	.value	0x1bd
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x11
	.string	"vtop"
	.byte	0xf
	.value	0x1c3
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x11
	.string	"cont"
	.byte	0xf
	.value	0x1c7
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x11
	.string	"start"
	.byte	0xf
	.value	0x1ca
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x11
	.string	"end"
	.byte	0xf
	.value	0x1cd
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x11
	.string	"top"
	.byte	0xf
	.value	0x1d1
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.uleb128 0x11
	.string	"scan_start"
	.byte	0xf
	.value	0x1d4
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.uleb128 0x11
	.string	"sink"
	.byte	0xf
	.value	0x1d7
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x11
	.string	"exit_labels"
	.byte	0xf
	.value	0x1e2
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x11
	.string	"exit_count"
	.byte	0xf
	.value	0x1e6
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5400
	.uleb128 0x1d
	.long	.LASF20
	.byte	0xf
	.byte	0xe6
	.long	0x1a8d
	.uleb128 0x3
	.byte	0x4
	.long	0x53f4
	.uleb128 0x3
	.byte	0x4
	.long	0x566d
	.uleb128 0xb
	.long	0x57a9
	.string	"reload_type"
	.byte	0x4
	.byte	0x13
	.byte	0x4d
	.uleb128 0xc
	.string	"RELOAD_FOR_INPUT"
	.sleb128 0
	.uleb128 0xc
	.string	"RELOAD_FOR_OUTPUT"
	.sleb128 1
	.uleb128 0xc
	.string	"RELOAD_FOR_INSN"
	.sleb128 2
	.uleb128 0xc
	.string	"RELOAD_FOR_INPUT_ADDRESS"
	.sleb128 3
	.uleb128 0xc
	.string	"RELOAD_FOR_INPADDR_ADDRESS"
	.sleb128 4
	.uleb128 0xc
	.string	"RELOAD_FOR_OUTPUT_ADDRESS"
	.sleb128 5
	.uleb128 0xc
	.string	"RELOAD_FOR_OUTADDR_ADDRESS"
	.sleb128 6
	.uleb128 0xc
	.string	"RELOAD_FOR_OPERAND_ADDRESS"
	.sleb128 7
	.uleb128 0xc
	.string	"RELOAD_FOR_OPADDR_ADDR"
	.sleb128 8
	.uleb128 0xc
	.string	"RELOAD_OTHER"
	.sleb128 9
	.uleb128 0xc
	.string	"RELOAD_FOR_OTHER_ADDRESS"
	.sleb128 10
	.byte	0x0
	.uleb128 0x4
	.long	0x596a
	.string	"reload"
	.byte	0x4c
	.byte	0x13
	.byte	0x58
	.uleb128 0x7
	.string	"in"
	.byte	0x13
	.byte	0x5a
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"out"
	.byte	0x13
	.byte	0x5d
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1c
	.long	.LASF21
	.byte	0x13
	.byte	0x60
	.long	0x468
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"inmode"
	.byte	0x13
	.byte	0x63
	.long	0xb18
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"outmode"
	.byte	0x13
	.byte	0x65
	.long	0xb18
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1c
	.long	.LASF1
	.byte	0x13
	.byte	0x68
	.long	0xb18
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x1c
	.long	.LASF22
	.byte	0x13
	.byte	0x6b
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"inc"
	.byte	0x13
	.byte	0x70
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"in_reg"
	.byte	0x13
	.byte	0x75
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"out_reg"
	.byte	0x13
	.byte	0x76
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x1c
	.long	.LASF23
	.byte	0x13
	.byte	0x79
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"reg_rtx"
	.byte	0x13
	.byte	0x7e
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x1c
	.long	.LASF24
	.byte	0x13
	.byte	0x83
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"secondary_in_reload"
	.byte	0x13
	.byte	0x87
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"secondary_out_reload"
	.byte	0x13
	.byte	0x8a
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x7
	.string	"secondary_in_icode"
	.byte	0x13
	.byte	0x8e
	.long	0x2a41
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x7
	.string	"secondary_out_icode"
	.byte	0x13
	.byte	0x90
	.long	0x2a41
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x7
	.string	"when_needed"
	.byte	0x13
	.byte	0x95
	.long	0x568a
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x6
	.string	"optional"
	.byte	0x13
	.byte	0x99
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x6
	.string	"nocombine"
	.byte	0x13
	.byte	0x9b
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x6
	.string	"secondary_p"
	.byte	0x13
	.byte	0x9d
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x6
	.string	"nongroup"
	.byte	0x13
	.byte	0xa0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.byte	0x0
	.uleb128 0x4
	.long	0x5999
	.string	"needs"
	.byte	0x96
	.byte	0x13
	.byte	0xc4
	.uleb128 0x7
	.string	"regs"
	.byte	0x13
	.byte	0xc6
	.long	0x5999
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"groups"
	.byte	0x13
	.byte	0xc7
	.long	0x59af
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.byte	0x0
	.uleb128 0x13
	.long	0x59af
	.long	0x73f
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.byte	0x0
	.uleb128 0x13
	.long	0x59bf
	.long	0x73f
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.byte	0x0
	.uleb128 0x4
	.long	0x5b07
	.string	"insn_chain"
	.byte	0xec
	.byte	0x13
	.byte	0xcf
	.uleb128 0x1c
	.long	.LASF15
	.byte	0x13
	.byte	0xd1
	.long	0x5b07
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1c
	.long	.LASF13
	.byte	0x13
	.byte	0xd1
	.long	0x5b07
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"next_need_reload"
	.byte	0x13
	.byte	0xd5
	.long	0x5b07
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"block"
	.byte	0x13
	.byte	0xd8
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1c
	.long	.LASF25
	.byte	0x13
	.byte	0xda
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"live_throughout"
	.byte	0x13
	.byte	0xdd
	.long	0x5313
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"dead_or_set"
	.byte	0x13
	.byte	0xde
	.long	0x5313
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"rld"
	.byte	0x13
	.byte	0xe1
	.long	0x5b0d
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x1c
	.long	.LASF26
	.byte	0x13
	.byte	0xe2
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x1c
	.long	.LASF27
	.byte	0x13
	.byte	0xe5
	.long	0xe29
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x7
	.string	"need"
	.byte	0x13
	.byte	0xe8
	.long	0x596a
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x6
	.string	"need_reload"
	.byte	0x13
	.byte	0xeb
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.uleb128 0x6
	.string	"need_operand_change"
	.byte	0x13
	.byte	0xee
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.uleb128 0x6
	.string	"need_elim"
	.byte	0x13
	.byte	0xf0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.uleb128 0x6
	.string	"is_caller_save_insn"
	.byte	0x13
	.byte	0xf2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x59bf
	.uleb128 0x3
	.byte	0x4
	.long	0x57a9
	.uleb128 0xb
	.long	0x5b40
	.string	"op_type"
	.byte	0x4
	.byte	0x1a
	.byte	0x1c
	.uleb128 0xc
	.string	"OP_IN"
	.sleb128 0
	.uleb128 0xc
	.string	"OP_OUT"
	.sleb128 1
	.uleb128 0xc
	.string	"OP_INOUT"
	.sleb128 2
	.byte	0x0
	.uleb128 0x27
	.long	0x5c1a
	.long	.LASF28
	.value	0x26c
	.byte	0x1a
	.byte	0x9b
	.uleb128 0x7
	.string	"operand"
	.byte	0x1a
	.byte	0xa3
	.long	0x5c1a
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"operand_loc"
	.byte	0x1a
	.byte	0xa6
	.long	0x5c2a
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x1c
	.long	.LASF29
	.byte	0x1a
	.byte	0xa9
	.long	0x5c3a
	.byte	0x3
	.byte	0x23
	.uleb128 0xf0
	.uleb128 0x7
	.string	"operand_mode"
	.byte	0x1a
	.byte	0xac
	.long	0x5c4a
	.byte	0x3
	.byte	0x23
	.uleb128 0x168
	.uleb128 0x7
	.string	"operand_type"
	.byte	0x1a
	.byte	0xaf
	.long	0x5c5a
	.byte	0x3
	.byte	0x23
	.uleb128 0x1e0
	.uleb128 0x7
	.string	"dup_loc"
	.byte	0x1a
	.byte	0xb3
	.long	0x5c6a
	.byte	0x3
	.byte	0x23
	.uleb128 0x258
	.uleb128 0x7
	.string	"dup_num"
	.byte	0x1a
	.byte	0xb7
	.long	0x5c7a
	.byte	0x3
	.byte	0x23
	.uleb128 0x260
	.uleb128 0x1c
	.long	.LASF30
	.byte	0x1a
	.byte	0xc4
	.long	0x459
	.byte	0x3
	.byte	0x23
	.uleb128 0x262
	.uleb128 0x7
	.string	"n_dups"
	.byte	0x1a
	.byte	0xc7
	.long	0x459
	.byte	0x3
	.byte	0x23
	.uleb128 0x263
	.uleb128 0x1c
	.long	.LASF31
	.byte	0x1a
	.byte	0xca
	.long	0x459
	.byte	0x3
	.byte	0x23
	.uleb128 0x264
	.uleb128 0x1c
	.long	.LASF25
	.byte	0x1a
	.byte	0xcd
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x268
	.byte	0x0
	.uleb128 0x13
	.long	0x5c2a
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0x13
	.long	0x5c3a
	.long	0x1ac8
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0x13
	.long	0x5c4a
	.long	0x44e
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0x13
	.long	0x5c5a
	.long	0xb18
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0x13
	.long	0x5c6a
	.long	0x5b13
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0x13
	.long	0x5c7a
	.long	0x1ac8
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1
	.byte	0x0
	.uleb128 0x13
	.long	0x5c8a
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1
	.byte	0x0
	.uleb128 0x2
	.string	"insn_operand_predicate_fn"
	.byte	0x1a
	.byte	0xd9
	.long	0x5cab
	.uleb128 0x3
	.byte	0x4
	.long	0x5cb1
	.uleb128 0x1f
	.long	0x5cc6
	.byte	0x1
	.long	0x461
	.uleb128 0x20
	.long	0x9c
	.uleb128 0x20
	.long	0xb18
	.byte	0x0
	.uleb128 0x2
	.string	"insn_gen_fn"
	.byte	0x1a
	.byte	0xdb
	.long	0x5cd9
	.uleb128 0x3
	.byte	0x4
	.long	0x5cdf
	.uleb128 0x1f
	.long	0x5cf0
	.byte	0x1
	.long	0x9c
	.uleb128 0x20
	.long	0x9c
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x4
	.long	0x5d6f
	.string	"insn_operand_data"
	.byte	0xc
	.byte	0x1a
	.byte	0xde
	.uleb128 0x7
	.string	"predicate"
	.byte	0x1a
	.byte	0xdf
	.long	0x5d6f
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"constraint"
	.byte	0x1a
	.byte	0xe1
	.long	0x5d74
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x5
	.long	.LASF1
	.byte	0x1a
	.byte	0xe3
	.long	0x5d79
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"strict_low"
	.byte	0x1a
	.byte	0xe5
	.long	0x454
	.byte	0x2
	.byte	0x23
	.uleb128 0xa
	.uleb128 0x7
	.string	"eliminable"
	.byte	0x1a
	.byte	0xe7
	.long	0x454
	.byte	0x2
	.byte	0x23
	.uleb128 0xb
	.byte	0x0
	.uleb128 0xd
	.long	0x5c8a
	.uleb128 0xd
	.long	0x44e
	.uleb128 0xd
	.long	0xb18
	.uleb128 0x17
	.long	0x5e13
	.long	.LASF32
	.byte	0x14
	.byte	0x1a
	.byte	0xf2
	.uleb128 0x7
	.string	"name"
	.byte	0x1a
	.byte	0xf3
	.long	0x5d74
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"output"
	.byte	0x1a
	.byte	0xf4
	.long	0xb11
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"genfun"
	.byte	0x1a
	.byte	0xf5
	.long	0x5e13
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"operand"
	.byte	0x1a
	.byte	0xf6
	.long	0x5e18
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1c
	.long	.LASF30
	.byte	0x1a
	.byte	0xf8
	.long	0x454
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"n_dups"
	.byte	0x1a
	.byte	0xf9
	.long	0x454
	.byte	0x2
	.byte	0x23
	.uleb128 0x11
	.uleb128 0x1c
	.long	.LASF31
	.byte	0x1a
	.byte	0xfa
	.long	0x454
	.byte	0x2
	.byte	0x23
	.uleb128 0x12
	.uleb128 0x7
	.string	"output_format"
	.byte	0x1a
	.byte	0xfb
	.long	0x454
	.byte	0x2
	.byte	0x23
	.uleb128 0x13
	.byte	0x0
	.uleb128 0xd
	.long	0x5cc6
	.uleb128 0xd
	.long	0x5e1d
	.uleb128 0x3
	.byte	0x4
	.long	0x5e23
	.uleb128 0xd
	.long	0x5cf0
	.uleb128 0x8
	.long	0x5e58
	.string	"cselib_val_u"
	.byte	0x4
	.byte	0x5
	.byte	0x1c
	.uleb128 0x1e
	.string	"val_rtx"
	.byte	0x5
	.byte	0x1e
	.long	0x9c
	.uleb128 0x29
	.long	.LASF14
	.byte	0x5
	.byte	0x20
	.long	0x189e
	.byte	0x0
	.uleb128 0x4
	.long	0x5eb6
	.string	"elt_loc_list"
	.byte	0x10
	.byte	0x5
	.byte	0x25
	.uleb128 0x1c
	.long	.LASF15
	.byte	0x5
	.byte	0x2f
	.long	0x5eb6
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"loc"
	.byte	0x5
	.byte	0x31
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"setting_insn"
	.byte	0x5
	.byte	0x33
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"in_libcall"
	.byte	0x5
	.byte	0x35
	.long	0x5ece
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5e58
	.uleb128 0x2
	.string	"cselib_val"
	.byte	0x5
	.byte	0x29
	.long	0x1846
	.uleb128 0xe
	.string	"_Bool"
	.byte	0x1
	.byte	0x2
	.uleb128 0x3
	.byte	0x4
	.long	0x5ebc
	.uleb128 0xb
	.long	0x5f23
	.string	"real_value_class"
	.byte	0x4
	.byte	0x9
	.byte	0x22
	.uleb128 0xc
	.string	"rvc_zero"
	.sleb128 0
	.uleb128 0xc
	.string	"rvc_normal"
	.sleb128 1
	.uleb128 0xc
	.string	"rvc_inf"
	.sleb128 2
	.uleb128 0xc
	.string	"rvc_nan"
	.sleb128 3
	.byte	0x0
	.uleb128 0x4
	.long	0x5f79
	.string	"real_value"
	.byte	0x18
	.byte	0x9
	.byte	0x30
	.uleb128 0x5
	.long	.LASF21
	.byte	0x9
	.byte	0x35
	.long	0x5edd
	.byte	0x4
	.byte	0x2
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"sign"
	.byte	0x9
	.byte	0x37
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"exp"
	.byte	0x9
	.byte	0x38
	.long	0x461
	.byte	0x4
	.byte	0x1d
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"sig"
	.byte	0x9
	.byte	0x39
	.long	0x5f79
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x13
	.long	0x5f89
	.long	0x71b
	.uleb128 0x14
	.long	0x6c7
	.byte	0x4
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5f23
	.uleb128 0x4
	.long	0x5fc1
	.string	"location_s"
	.byte	0x8
	.byte	0xb
	.byte	0x1c
	.uleb128 0x7
	.string	"file"
	.byte	0xb
	.byte	0x1e
	.long	0x44e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"line"
	.byte	0xb
	.byte	0x21
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"location_t"
	.byte	0xb
	.byte	0x23
	.long	0x5f8f
	.uleb128 0xb
	.long	0x68f5
	.string	"tree_code"
	.byte	0x4
	.byte	0x8
	.byte	0x25
	.uleb128 0xc
	.string	"ERROR_MARK"
	.sleb128 0
	.uleb128 0xc
	.string	"IDENTIFIER_NODE"
	.sleb128 1
	.uleb128 0xc
	.string	"OP_IDENTIFIER"
	.sleb128 2
	.uleb128 0xc
	.string	"TREE_LIST"
	.sleb128 3
	.uleb128 0xc
	.string	"TREE_VEC"
	.sleb128 4
	.uleb128 0xc
	.string	"BLOCK"
	.sleb128 5
	.uleb128 0xc
	.string	"VOID_TYPE"
	.sleb128 6
	.uleb128 0xc
	.string	"INTEGER_TYPE"
	.sleb128 7
	.uleb128 0xc
	.string	"REAL_TYPE"
	.sleb128 8
	.uleb128 0xc
	.string	"COMPLEX_TYPE"
	.sleb128 9
	.uleb128 0xc
	.string	"VECTOR_TYPE"
	.sleb128 10
	.uleb128 0xc
	.string	"ENUMERAL_TYPE"
	.sleb128 11
	.uleb128 0xc
	.string	"BOOLEAN_TYPE"
	.sleb128 12
	.uleb128 0xc
	.string	"CHAR_TYPE"
	.sleb128 13
	.uleb128 0xc
	.string	"POINTER_TYPE"
	.sleb128 14
	.uleb128 0xc
	.string	"OFFSET_TYPE"
	.sleb128 15
	.uleb128 0xc
	.string	"REFERENCE_TYPE"
	.sleb128 16
	.uleb128 0xc
	.string	"METHOD_TYPE"
	.sleb128 17
	.uleb128 0xc
	.string	"FILE_TYPE"
	.sleb128 18
	.uleb128 0xc
	.string	"ARRAY_TYPE"
	.sleb128 19
	.uleb128 0xc
	.string	"SET_TYPE"
	.sleb128 20
	.uleb128 0xc
	.string	"RECORD_TYPE"
	.sleb128 21
	.uleb128 0xc
	.string	"UNION_TYPE"
	.sleb128 22
	.uleb128 0xc
	.string	"QUAL_UNION_TYPE"
	.sleb128 23
	.uleb128 0xc
	.string	"FUNCTION_TYPE"
	.sleb128 24
	.uleb128 0xc
	.string	"LANG_TYPE"
	.sleb128 25
	.uleb128 0xc
	.string	"INTEGER_CST"
	.sleb128 26
	.uleb128 0xc
	.string	"REAL_CST"
	.sleb128 27
	.uleb128 0xc
	.string	"COMPLEX_CST"
	.sleb128 28
	.uleb128 0xc
	.string	"VECTOR_CST"
	.sleb128 29
	.uleb128 0xc
	.string	"STRING_CST"
	.sleb128 30
	.uleb128 0xc
	.string	"FUNCTION_DECL"
	.sleb128 31
	.uleb128 0xc
	.string	"LABEL_DECL"
	.sleb128 32
	.uleb128 0xc
	.string	"CONST_DECL"
	.sleb128 33
	.uleb128 0xc
	.string	"TYPE_DECL"
	.sleb128 34
	.uleb128 0xc
	.string	"VAR_DECL"
	.sleb128 35
	.uleb128 0xc
	.string	"PARM_DECL"
	.sleb128 36
	.uleb128 0xc
	.string	"RESULT_DECL"
	.sleb128 37
	.uleb128 0xc
	.string	"FIELD_DECL"
	.sleb128 38
	.uleb128 0xc
	.string	"NAMESPACE_DECL"
	.sleb128 39
	.uleb128 0xc
	.string	"COMPONENT_REF"
	.sleb128 40
	.uleb128 0xc
	.string	"BIT_FIELD_REF"
	.sleb128 41
	.uleb128 0xc
	.string	"INDIRECT_REF"
	.sleb128 42
	.uleb128 0xc
	.string	"BUFFER_REF"
	.sleb128 43
	.uleb128 0xc
	.string	"ARRAY_REF"
	.sleb128 44
	.uleb128 0xc
	.string	"ARRAY_RANGE_REF"
	.sleb128 45
	.uleb128 0xc
	.string	"VTABLE_REF"
	.sleb128 46
	.uleb128 0xc
	.string	"CONSTRUCTOR"
	.sleb128 47
	.uleb128 0xc
	.string	"COMPOUND_EXPR"
	.sleb128 48
	.uleb128 0xc
	.string	"MODIFY_EXPR"
	.sleb128 49
	.uleb128 0xc
	.string	"INIT_EXPR"
	.sleb128 50
	.uleb128 0xc
	.string	"TARGET_EXPR"
	.sleb128 51
	.uleb128 0xc
	.string	"COND_EXPR"
	.sleb128 52
	.uleb128 0xc
	.string	"BIND_EXPR"
	.sleb128 53
	.uleb128 0xc
	.string	"CALL_EXPR"
	.sleb128 54
	.uleb128 0xc
	.string	"METHOD_CALL_EXPR"
	.sleb128 55
	.uleb128 0xc
	.string	"WITH_CLEANUP_EXPR"
	.sleb128 56
	.uleb128 0xc
	.string	"CLEANUP_POINT_EXPR"
	.sleb128 57
	.uleb128 0xc
	.string	"PLACEHOLDER_EXPR"
	.sleb128 58
	.uleb128 0xc
	.string	"WITH_RECORD_EXPR"
	.sleb128 59
	.uleb128 0xc
	.string	"PLUS_EXPR"
	.sleb128 60
	.uleb128 0xc
	.string	"MINUS_EXPR"
	.sleb128 61
	.uleb128 0xc
	.string	"MULT_EXPR"
	.sleb128 62
	.uleb128 0xc
	.string	"TRUNC_DIV_EXPR"
	.sleb128 63
	.uleb128 0xc
	.string	"CEIL_DIV_EXPR"
	.sleb128 64
	.uleb128 0xc
	.string	"FLOOR_DIV_EXPR"
	.sleb128 65
	.uleb128 0xc
	.string	"ROUND_DIV_EXPR"
	.sleb128 66
	.uleb128 0xc
	.string	"TRUNC_MOD_EXPR"
	.sleb128 67
	.uleb128 0xc
	.string	"CEIL_MOD_EXPR"
	.sleb128 68
	.uleb128 0xc
	.string	"FLOOR_MOD_EXPR"
	.sleb128 69
	.uleb128 0xc
	.string	"ROUND_MOD_EXPR"
	.sleb128 70
	.uleb128 0xc
	.string	"RDIV_EXPR"
	.sleb128 71
	.uleb128 0xc
	.string	"EXACT_DIV_EXPR"
	.sleb128 72
	.uleb128 0xc
	.string	"FIX_TRUNC_EXPR"
	.sleb128 73
	.uleb128 0xc
	.string	"FIX_CEIL_EXPR"
	.sleb128 74
	.uleb128 0xc
	.string	"FIX_FLOOR_EXPR"
	.sleb128 75
	.uleb128 0xc
	.string	"FIX_ROUND_EXPR"
	.sleb128 76
	.uleb128 0xc
	.string	"FLOAT_EXPR"
	.sleb128 77
	.uleb128 0xc
	.string	"EXPON_EXPR"
	.sleb128 78
	.uleb128 0xc
	.string	"NEGATE_EXPR"
	.sleb128 79
	.uleb128 0xc
	.string	"MIN_EXPR"
	.sleb128 80
	.uleb128 0xc
	.string	"MAX_EXPR"
	.sleb128 81
	.uleb128 0xc
	.string	"ABS_EXPR"
	.sleb128 82
	.uleb128 0xc
	.string	"FFS_EXPR"
	.sleb128 83
	.uleb128 0xc
	.string	"LSHIFT_EXPR"
	.sleb128 84
	.uleb128 0xc
	.string	"RSHIFT_EXPR"
	.sleb128 85
	.uleb128 0xc
	.string	"LROTATE_EXPR"
	.sleb128 86
	.uleb128 0xc
	.string	"RROTATE_EXPR"
	.sleb128 87
	.uleb128 0xc
	.string	"BIT_IOR_EXPR"
	.sleb128 88
	.uleb128 0xc
	.string	"BIT_XOR_EXPR"
	.sleb128 89
	.uleb128 0xc
	.string	"BIT_AND_EXPR"
	.sleb128 90
	.uleb128 0xc
	.string	"BIT_ANDTC_EXPR"
	.sleb128 91
	.uleb128 0xc
	.string	"BIT_NOT_EXPR"
	.sleb128 92
	.uleb128 0xc
	.string	"TRUTH_ANDIF_EXPR"
	.sleb128 93
	.uleb128 0xc
	.string	"TRUTH_ORIF_EXPR"
	.sleb128 94
	.uleb128 0xc
	.string	"TRUTH_AND_EXPR"
	.sleb128 95
	.uleb128 0xc
	.string	"TRUTH_OR_EXPR"
	.sleb128 96
	.uleb128 0xc
	.string	"TRUTH_XOR_EXPR"
	.sleb128 97
	.uleb128 0xc
	.string	"TRUTH_NOT_EXPR"
	.sleb128 98
	.uleb128 0xc
	.string	"LT_EXPR"
	.sleb128 99
	.uleb128 0xc
	.string	"LE_EXPR"
	.sleb128 100
	.uleb128 0xc
	.string	"GT_EXPR"
	.sleb128 101
	.uleb128 0xc
	.string	"GE_EXPR"
	.sleb128 102
	.uleb128 0xc
	.string	"EQ_EXPR"
	.sleb128 103
	.uleb128 0xc
	.string	"NE_EXPR"
	.sleb128 104
	.uleb128 0xc
	.string	"UNORDERED_EXPR"
	.sleb128 105
	.uleb128 0xc
	.string	"ORDERED_EXPR"
	.sleb128 106
	.uleb128 0xc
	.string	"UNLT_EXPR"
	.sleb128 107
	.uleb128 0xc
	.string	"UNLE_EXPR"
	.sleb128 108
	.uleb128 0xc
	.string	"UNGT_EXPR"
	.sleb128 109
	.uleb128 0xc
	.string	"UNGE_EXPR"
	.sleb128 110
	.uleb128 0xc
	.string	"UNEQ_EXPR"
	.sleb128 111
	.uleb128 0xc
	.string	"IN_EXPR"
	.sleb128 112
	.uleb128 0xc
	.string	"SET_LE_EXPR"
	.sleb128 113
	.uleb128 0xc
	.string	"CARD_EXPR"
	.sleb128 114
	.uleb128 0xc
	.string	"RANGE_EXPR"
	.sleb128 115
	.uleb128 0xc
	.string	"CONVERT_EXPR"
	.sleb128 116
	.uleb128 0xc
	.string	"NOP_EXPR"
	.sleb128 117
	.uleb128 0xc
	.string	"NON_LVALUE_EXPR"
	.sleb128 118
	.uleb128 0xc
	.string	"VIEW_CONVERT_EXPR"
	.sleb128 119
	.uleb128 0xc
	.string	"SAVE_EXPR"
	.sleb128 120
	.uleb128 0xc
	.string	"UNSAVE_EXPR"
	.sleb128 121
	.uleb128 0xc
	.string	"RTL_EXPR"
	.sleb128 122
	.uleb128 0xc
	.string	"ADDR_EXPR"
	.sleb128 123
	.uleb128 0xc
	.string	"REFERENCE_EXPR"
	.sleb128 124
	.uleb128 0xc
	.string	"ENTRY_VALUE_EXPR"
	.sleb128 125
	.uleb128 0xc
	.string	"FDESC_EXPR"
	.sleb128 126
	.uleb128 0xc
	.string	"COMPLEX_EXPR"
	.sleb128 127
	.uleb128 0xc
	.string	"CONJ_EXPR"
	.sleb128 128
	.uleb128 0xc
	.string	"REALPART_EXPR"
	.sleb128 129
	.uleb128 0xc
	.string	"IMAGPART_EXPR"
	.sleb128 130
	.uleb128 0xc
	.string	"PREDECREMENT_EXPR"
	.sleb128 131
	.uleb128 0xc
	.string	"PREINCREMENT_EXPR"
	.sleb128 132
	.uleb128 0xc
	.string	"POSTDECREMENT_EXPR"
	.sleb128 133
	.uleb128 0xc
	.string	"POSTINCREMENT_EXPR"
	.sleb128 134
	.uleb128 0xc
	.string	"VA_ARG_EXPR"
	.sleb128 135
	.uleb128 0xc
	.string	"TRY_CATCH_EXPR"
	.sleb128 136
	.uleb128 0xc
	.string	"TRY_FINALLY_EXPR"
	.sleb128 137
	.uleb128 0xc
	.string	"GOTO_SUBROUTINE_EXPR"
	.sleb128 138
	.uleb128 0xc
	.string	"POPDHC_EXPR"
	.sleb128 139
	.uleb128 0xc
	.string	"POPDCC_EXPR"
	.sleb128 140
	.uleb128 0xc
	.string	"LABEL_EXPR"
	.sleb128 141
	.uleb128 0xc
	.string	"GOTO_EXPR"
	.sleb128 142
	.uleb128 0xc
	.string	"RETURN_EXPR"
	.sleb128 143
	.uleb128 0xc
	.string	"EXIT_EXPR"
	.sleb128 144
	.uleb128 0xc
	.string	"LOOP_EXPR"
	.sleb128 145
	.uleb128 0xc
	.string	"LABELED_BLOCK_EXPR"
	.sleb128 146
	.uleb128 0xc
	.string	"EXIT_BLOCK_EXPR"
	.sleb128 147
	.uleb128 0xc
	.string	"EXPR_WITH_FILE_LOCATION"
	.sleb128 148
	.uleb128 0xc
	.string	"SWITCH_EXPR"
	.sleb128 149
	.uleb128 0xc
	.string	"EXC_PTR_EXPR"
	.sleb128 150
	.uleb128 0xc
	.string	"LAST_AND_UNUSED_TREE_CODE"
	.sleb128 151
	.byte	0x0
	.uleb128 0x2
	.string	"LABEL_IDX"
	.byte	0x8
	.byte	0x2f
	.long	0x6b0
	.uleb128 0x4
	.long	0x6942
	.string	"mongoose_gcc_DST_IDX"
	.byte	0x8
	.byte	0x8
	.byte	0x30
	.uleb128 0x7
	.string	"block"
	.byte	0x8
	.byte	0x30
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1c
	.long	.LASF8
	.byte	0x8
	.byte	0x30
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"ST"
	.byte	0x8
	.byte	0x34
	.long	0x694c
	.uleb128 0x26
	.string	"st"
	.byte	0x1
	.uleb128 0x1a
	.long	0x69a1
	.long	.LASF33
	.byte	0x4
	.byte	0x8
	.byte	0x58
	.uleb128 0xc
	.string	"NOT_BUILT_IN"
	.sleb128 0
	.uleb128 0xc
	.string	"BUILT_IN_FRONTEND"
	.sleb128 1
	.uleb128 0xc
	.string	"BUILT_IN_MD"
	.sleb128 2
	.uleb128 0xc
	.string	"BUILT_IN_NORMAL"
	.sleb128 3
	.byte	0x0
	.uleb128 0xb
	.long	0x864b
	.string	"built_in_function"
	.byte	0x4
	.byte	0x8
	.byte	0x67
	.uleb128 0xc
	.string	"BUILT_IN_ALLOCA"
	.sleb128 0
	.uleb128 0xc
	.string	"BUILT_IN_ABS"
	.sleb128 1
	.uleb128 0xc
	.string	"BUILT_IN_LABS"
	.sleb128 2
	.uleb128 0xc
	.string	"BUILT_IN_FABS"
	.sleb128 3
	.uleb128 0xc
	.string	"BUILT_IN_FABSF"
	.sleb128 4
	.uleb128 0xc
	.string	"BUILT_IN_FABSL"
	.sleb128 5
	.uleb128 0xc
	.string	"BUILT_IN_LLABS"
	.sleb128 6
	.uleb128 0xc
	.string	"BUILT_IN_IMAXABS"
	.sleb128 7
	.uleb128 0xc
	.string	"BUILT_IN_CONJ"
	.sleb128 8
	.uleb128 0xc
	.string	"BUILT_IN_CONJF"
	.sleb128 9
	.uleb128 0xc
	.string	"BUILT_IN_CONJL"
	.sleb128 10
	.uleb128 0xc
	.string	"BUILT_IN_CREAL"
	.sleb128 11
	.uleb128 0xc
	.string	"BUILT_IN_CREALF"
	.sleb128 12
	.uleb128 0xc
	.string	"BUILT_IN_CREALL"
	.sleb128 13
	.uleb128 0xc
	.string	"BUILT_IN_CIMAG"
	.sleb128 14
	.uleb128 0xc
	.string	"BUILT_IN_CIMAGF"
	.sleb128 15
	.uleb128 0xc
	.string	"BUILT_IN_CIMAGL"
	.sleb128 16
	.uleb128 0xc
	.string	"BUILT_IN_DIV"
	.sleb128 17
	.uleb128 0xc
	.string	"BUILT_IN_LDIV"
	.sleb128 18
	.uleb128 0xc
	.string	"BUILT_IN_FFLOOR"
	.sleb128 19
	.uleb128 0xc
	.string	"BUILT_IN_FCEIL"
	.sleb128 20
	.uleb128 0xc
	.string	"BUILT_IN_FMOD"
	.sleb128 21
	.uleb128 0xc
	.string	"BUILT_IN_FREM"
	.sleb128 22
	.uleb128 0xc
	.string	"BUILT_IN_BZERO"
	.sleb128 23
	.uleb128 0xc
	.string	"BUILT_IN_BCOPY"
	.sleb128 24
	.uleb128 0xc
	.string	"BUILT_IN_BCMP"
	.sleb128 25
	.uleb128 0xc
	.string	"BUILT_IN_FFS"
	.sleb128 26
	.uleb128 0xc
	.string	"BUILT_IN_INDEX"
	.sleb128 27
	.uleb128 0xc
	.string	"BUILT_IN_RINDEX"
	.sleb128 28
	.uleb128 0xc
	.string	"BUILT_IN_MEMCPY"
	.sleb128 29
	.uleb128 0xc
	.string	"BUILT_IN_MEMMOVE"
	.sleb128 30
	.uleb128 0xc
	.string	"BUILT_IN_MEMCMP"
	.sleb128 31
	.uleb128 0xc
	.string	"BUILT_IN_MEMSET"
	.sleb128 32
	.uleb128 0xc
	.string	"BUILT_IN_MEMPCPY"
	.sleb128 33
	.uleb128 0xc
	.string	"BUILT_IN_STRCAT"
	.sleb128 34
	.uleb128 0xc
	.string	"BUILT_IN_STRNCAT"
	.sleb128 35
	.uleb128 0xc
	.string	"BUILT_IN_STPCPY"
	.sleb128 36
	.uleb128 0xc
	.string	"BUILT_IN_STRCPY"
	.sleb128 37
	.uleb128 0xc
	.string	"BUILT_IN_STRNCPY"
	.sleb128 38
	.uleb128 0xc
	.string	"BUILT_IN_STRCMP"
	.sleb128 39
	.uleb128 0xc
	.string	"BUILT_IN_STRNCMP"
	.sleb128 40
	.uleb128 0xc
	.string	"BUILT_IN_STRLEN"
	.sleb128 41
	.uleb128 0xc
	.string	"BUILT_IN_STRSTR"
	.sleb128 42
	.uleb128 0xc
	.string	"BUILT_IN_STRPBRK"
	.sleb128 43
	.uleb128 0xc
	.string	"BUILT_IN_STRSPN"
	.sleb128 44
	.uleb128 0xc
	.string	"BUILT_IN_STRCSPN"
	.sleb128 45
	.uleb128 0xc
	.string	"BUILT_IN_STRCHR"
	.sleb128 46
	.uleb128 0xc
	.string	"BUILT_IN_STRRCHR"
	.sleb128 47
	.uleb128 0xc
	.string	"BUILT_IN_CVT64_LOW"
	.sleb128 48
	.uleb128 0xc
	.string	"BUILT_IN_CVT64_HIGH"
	.sleb128 49
	.uleb128 0xc
	.string	"BUILT_IN_CVT32"
	.sleb128 50
	.uleb128 0xc
	.string	"BUILT_IN_PERIPHERAL_RW_BEGIN"
	.sleb128 51
	.uleb128 0xc
	.string	"BUILT_IN_PERIPHERAL_RW_END"
	.sleb128 52
	.uleb128 0xc
	.string	"BUILT_IN_VBUF_OFFSET"
	.sleb128 53
	.uleb128 0xc
	.string	"BUILT_IN_SBUF_OFFSET"
	.sleb128 54
	.uleb128 0xc
	.string	"BUILD_IN_MUL_SHIFT_HI"
	.sleb128 55
	.uleb128 0xc
	.string	"BUILD_IN_MUL_SHIFT"
	.sleb128 56
	.uleb128 0xc
	.string	"BUILD_IN_C3_LEAD"
	.sleb128 57
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC"
	.sleb128 58
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN"
	.sleb128 59
	.uleb128 0xc
	.string	"BUILD_IN_C3_ROUND"
	.sleb128 60
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDS"
	.sleb128 61
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUBS"
	.sleb128 62
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA"
	.sleb128 63
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_ACC"
	.sleb128 64
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAVE_ACC"
	.sleb128 65
	.uleb128 0xc
	.string	"BUILD_IN_MPY_32_16"
	.sleb128 66
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACD"
	.sleb128 67
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULAD"
	.sleb128 68
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDSH"
	.sleb128 69
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUBSH"
	.sleb128 70
	.uleb128 0xc
	.string	"BUILD_IN_C3_MVFS"
	.sleb128 71
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_ADDR"
	.sleb128 72
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAVE_ADDR"
	.sleb128 73
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC_A"
	.sleb128 74
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN_A"
	.sleb128 75
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMAC_A"
	.sleb128 76
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMACN_A"
	.sleb128 77
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_DACC"
	.sleb128 78
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAVE_DACC"
	.sleb128 79
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDH_A"
	.sleb128 80
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUBH_A"
	.sleb128 81
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAMULSH"
	.sleb128 82
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA_A"
	.sleb128 83
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAMULH_A"
	.sleb128 84
	.uleb128 0xc
	.string	"BUILD_IN_C3_PTR"
	.sleb128 85
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC_AR"
	.sleb128 86
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN_AR"
	.sleb128 87
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA_AR"
	.sleb128 88
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_PTR"
	.sleb128 89
	.uleb128 0xc
	.string	"BUILD_IN_C3_TRBACK"
	.sleb128 90
	.uleb128 0xc
	.string	"BUILD_IN_C3_VITERBI"
	.sleb128 91
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULT"
	.sleb128 92
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULT_A"
	.sleb128 93
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULTN"
	.sleb128 94
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULTN_A"
	.sleb128 95
	.uleb128 0xc
	.string	"BUILD_IN_SET_CIRCBUF"
	.sleb128 96
	.uleb128 0xc
	.string	"BUILD_IN_RESET_CIRCBUF"
	.sleb128 97
	.uleb128 0xc
	.string	"BUILD_IN_C3_DADD"
	.sleb128 98
	.uleb128 0xc
	.string	"BUILD_IN_C3_DSUB"
	.sleb128 99
	.uleb128 0xc
	.string	"BUILD_IN_C3_FFT"
	.sleb128 100
	.uleb128 0xc
	.string	"BUILD_IN_C3_FFTLD"
	.sleb128 101
	.uleb128 0xc
	.string	"BUILD_IN_C3_FFTST"
	.sleb128 102
	.uleb128 0xc
	.string	"BUILD_IN_DEPOSIT"
	.sleb128 103
	.uleb128 0xc
	.string	"BUILD_IN_EXTRACT"
	.sleb128 104
	.uleb128 0xc
	.string	"BUILD_IN_C3_BITR"
	.sleb128 105
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMAC"
	.sleb128 106
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMACN"
	.sleb128 107
	.uleb128 0xc
	.string	"BUILD_IN_C3_LOAD"
	.sleb128 108
	.uleb128 0xc
	.string	"BUILD_IN_C3_STORE"
	.sleb128 109
	.uleb128 0xc
	.string	"BUILD_IN_C3_REVB"
	.sleb128 110
	.uleb128 0xc
	.string	"BUILD_IN_C3_DSHL_I"
	.sleb128 111
	.uleb128 0xc
	.string	"BUILD_IN_C3_DSHR_I"
	.sleb128 112
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC_I"
	.sleb128 113
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN_I"
	.sleb128 114
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA_I"
	.sleb128 115
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADD_A"
	.sleb128 116
	.uleb128 0xc
	.string	"BUILD_IN_C3_SADDHA"
	.sleb128 117
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDHA_A"
	.sleb128 118
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUB_A"
	.sleb128 119
	.uleb128 0xc
	.string	"BUILD_IN_COPY_ADDR"
	.sleb128 120
	.uleb128 0xc
	.string	"BUILD_IN_SET_ADDR"
	.sleb128 121
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_G2R"
	.sleb128 122
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_R2G"
	.sleb128 123
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_G2S"
	.sleb128 124
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_S2G"
	.sleb128 125
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGC_C2G"
	.sleb128 126
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGC_G2C"
	.sleb128 127
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V"
	.sleb128 128
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_G"
	.sleb128 129
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_S"
	.sleb128 130
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_V"
	.sleb128 131
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G"
	.sleb128 132
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_G_IMM"
	.sleb128 133
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_C_IMM"
	.sleb128 134
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V_IMM"
	.sleb128 135
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_V_IMM"
	.sleb128 136
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_C_IMM"
	.sleb128 137
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G_IMM"
	.sleb128 138
	.uleb128 0xc
	.string	"BUILT_IN_C2_VADDS"
	.sleb128 139
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSUBS"
	.sleb128 140
	.uleb128 0xc
	.string	"BUILT_IN_C2_VMUL"
	.sleb128 141
	.uleb128 0xc
	.string	"BUILT_IN_C2_VNEG"
	.sleb128 142
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSHFT"
	.sleb128 143
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCLP"
	.sleb128 144
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCLG"
	.sleb128 145
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCMOV"
	.sleb128 146
	.uleb128 0xc
	.string	"BUILT_IN_C2_LCZERO"
	.sleb128 147
	.uleb128 0xc
	.string	"BUILT_IN_C2_VRND"
	.sleb128 148
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSPAS"
	.sleb128 149
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSPEL"
	.sleb128 150
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSPEL_MAC"
	.sleb128 151
	.uleb128 0xc
	.string	"BUILT_IN_C2_MMUL"
	.sleb128 152
	.uleb128 0xc
	.string	"BUILT_IN_C2_VMOV"
	.sleb128 153
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCOPY"
	.sleb128 154
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCMPR"
	.sleb128 155
	.uleb128 0xc
	.string	"BUILT_IN_C2_SAD"
	.sleb128 156
	.uleb128 0xc
	.string	"BUILT_IN_C2_SAD_TMP"
	.sleb128 157
	.uleb128 0xc
	.string	"BUILT_IN_C2_SATD"
	.sleb128 158
	.uleb128 0xc
	.string	"BUILT_IN_C2_INTRA"
	.sleb128 159
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVSEL"
	.sleb128 160
	.uleb128 0xc
	.string	"BUILT_IN_C2_BCST"
	.sleb128 161
	.uleb128 0xc
	.string	"BUILT_IN_C2_VLCS_R"
	.sleb128 162
	.uleb128 0xc
	.string	"BUILT_IN_C2_VLCS"
	.sleb128 163
	.uleb128 0xc
	.string	"BUILT_IN_C2_ADDS"
	.sleb128 164
	.uleb128 0xc
	.string	"BUILT_IN_C2_ADDS_R"
	.sleb128 165
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUBS"
	.sleb128 166
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUBS_R"
	.sleb128 167
	.uleb128 0xc
	.string	"BUILT_IN_C2_MULS"
	.sleb128 168
	.uleb128 0xc
	.string	"BUILT_IN_C2_MADS"
	.sleb128 169
	.uleb128 0xc
	.string	"BUILT_IN_C2_SMADS"
	.sleb128 170
	.uleb128 0xc
	.string	"BUILT_IN_C2_CMOV"
	.sleb128 171
	.uleb128 0xc
	.string	"BUILT_IN_C2_MOV"
	.sleb128 172
	.uleb128 0xc
	.string	"BUILT_IN_C2_MOV_R"
	.sleb128 173
	.uleb128 0xc
	.string	"BUILT_IN_C2_CLP"
	.sleb128 174
	.uleb128 0xc
	.string	"BUILT_IN_C2_CHKRNG"
	.sleb128 175
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND"
	.sleb128 176
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_R_WB"
	.sleb128 177
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_R"
	.sleb128 178
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_BR"
	.sleb128 179
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_BR_R"
	.sleb128 180
	.uleb128 0xc
	.string	"BUILT_IN_C2_BOP"
	.sleb128 181
	.uleb128 0xc
	.string	"BUILT_IN_C2_BDEP"
	.sleb128 182
	.uleb128 0xc
	.string	"BUILT_IN_C2_WRAP"
	.sleb128 183
	.uleb128 0xc
	.string	"BUILT_IN_C2_BXTR"
	.sleb128 184
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUM4"
	.sleb128 185
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUM3_SADDR"
	.sleb128 186
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUM4_R"
	.sleb128 187
	.uleb128 0xc
	.string	"BUILT_IN_C2_MED"
	.sleb128 188
	.uleb128 0xc
	.string	"BUILT_IN_C2_GSUMS"
	.sleb128 189
	.uleb128 0xc
	.string	"BUILT_IN_C2_CLZOB"
	.sleb128 190
	.uleb128 0xc
	.string	"BUILT_IN_C2_THCTRL"
	.sleb128 191
	.uleb128 0xc
	.string	"BUILT_IN_C2_BR_F"
	.sleb128 192
	.uleb128 0xc
	.string	"BUILT_IN_C2_BR_T"
	.sleb128 193
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V2G"
	.sleb128 194
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V2G_IMM"
	.sleb128 195
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G2V"
	.sleb128 196
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G2V_IMM"
	.sleb128 197
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_R2S"
	.sleb128 198
	.uleb128 0xc
	.string	"BUILT_IN_C2_FORK"
	.sleb128 199
	.uleb128 0xc
	.string	"BUILT_IN_C2_JOINT"
	.sleb128 200
	.uleb128 0xc
	.string	"BUILT_IN_C2_THREAD_MAJOR"
	.sleb128 201
	.uleb128 0xc
	.string	"BUILT_IN_C2_THREAD_MINOR"
	.sleb128 202
	.uleb128 0xc
	.string	"BUILT_IN_FLOOR"
	.sleb128 203
	.uleb128 0xc
	.string	"BUILT_IN_FLOORF"
	.sleb128 204
	.uleb128 0xc
	.string	"BUILT_IN_FLOORL"
	.sleb128 205
	.uleb128 0xc
	.string	"BUILT_IN_POW"
	.sleb128 206
	.uleb128 0xc
	.string	"BUILT_IN_TAN"
	.sleb128 207
	.uleb128 0xc
	.string	"BUILT_IN_ACOS"
	.sleb128 208
	.uleb128 0xc
	.string	"BUILT_IN_ACOSF"
	.sleb128 209
	.uleb128 0xc
	.string	"BUILT_IN_ACOSH"
	.sleb128 210
	.uleb128 0xc
	.string	"BUILT_IN_ACOSHF"
	.sleb128 211
	.uleb128 0xc
	.string	"BUILT_IN_ACOSHL"
	.sleb128 212
	.uleb128 0xc
	.string	"BUILT_IN_ACOSL"
	.sleb128 213
	.uleb128 0xc
	.string	"BUILT_IN_ASIN"
	.sleb128 214
	.uleb128 0xc
	.string	"BUILT_IN_ASINF"
	.sleb128 215
	.uleb128 0xc
	.string	"BUILT_IN_ASINH"
	.sleb128 216
	.uleb128 0xc
	.string	"BUILT_IN_ASINHF"
	.sleb128 217
	.uleb128 0xc
	.string	"BUILT_IN_ASINHL"
	.sleb128 218
	.uleb128 0xc
	.string	"BUILT_IN_ASINL"
	.sleb128 219
	.uleb128 0xc
	.string	"BUILT_IN_ATAN"
	.sleb128 220
	.uleb128 0xc
	.string	"BUILT_IN_ATAN2"
	.sleb128 221
	.uleb128 0xc
	.string	"BUILT_IN_ATAN2F"
	.sleb128 222
	.uleb128 0xc
	.string	"BUILT_IN_ATAN2L"
	.sleb128 223
	.uleb128 0xc
	.string	"BUILT_IN_ATANF"
	.sleb128 224
	.uleb128 0xc
	.string	"BUILT_IN_ATANH"
	.sleb128 225
	.uleb128 0xc
	.string	"BUILT_IN_ATANHF"
	.sleb128 226
	.uleb128 0xc
	.string	"BUILT_IN_ATANHL"
	.sleb128 227
	.uleb128 0xc
	.string	"BUILT_IN_ATANL"
	.sleb128 228
	.uleb128 0xc
	.string	"BUILT_IN_CEIL"
	.sleb128 229
	.uleb128 0xc
	.string	"BUILT_IN_CEILF"
	.sleb128 230
	.uleb128 0xc
	.string	"BUILT_IN_CEILL"
	.sleb128 231
	.uleb128 0xc
	.string	"BUILT_IN_FMODF"
	.sleb128 232
	.uleb128 0xc
	.string	"BUILT_IN_FMODL"
	.sleb128 233
	.uleb128 0xc
	.string	"BUILT_IN_FREXP"
	.sleb128 234
	.uleb128 0xc
	.string	"BUILT_IN_FREXPF"
	.sleb128 235
	.uleb128 0xc
	.string	"BUILT_IN_FREXPL"
	.sleb128 236
	.uleb128 0xc
	.string	"BUILT_IN_LDEXP"
	.sleb128 237
	.uleb128 0xc
	.string	"BUILT_IN_LDEXPF"
	.sleb128 238
	.uleb128 0xc
	.string	"BUILT_IN_LDEXPL"
	.sleb128 239
	.uleb128 0xc
	.string	"BUILT_IN_LOG10"
	.sleb128 240
	.uleb128 0xc
	.string	"BUILT_IN_LOG10F"
	.sleb128 241
	.uleb128 0xc
	.string	"BUILT_IN_LOG10L"
	.sleb128 242
	.uleb128 0xc
	.string	"BUILT_IN_MODF"
	.sleb128 243
	.uleb128 0xc
	.string	"BUILT_IN_MODFF"
	.sleb128 244
	.uleb128 0xc
	.string	"BUILT_IN_MODFL"
	.sleb128 245
	.uleb128 0xc
	.string	"BUILT_IN_POWF"
	.sleb128 246
	.uleb128 0xc
	.string	"BUILT_IN_POWL"
	.sleb128 247
	.uleb128 0xc
	.string	"BUILT_IN_SINH"
	.sleb128 248
	.uleb128 0xc
	.string	"BUILT_IN_SINHF"
	.sleb128 249
	.uleb128 0xc
	.string	"BUILT_IN_SINHL"
	.sleb128 250
	.uleb128 0xc
	.string	"BUILT_IN_TANF"
	.sleb128 251
	.uleb128 0xc
	.string	"BUILT_IN_TANH"
	.sleb128 252
	.uleb128 0xc
	.string	"BUILT_IN_TANHF"
	.sleb128 253
	.uleb128 0xc
	.string	"BUILT_IN_TANHL"
	.sleb128 254
	.uleb128 0xc
	.string	"BUILT_IN_TANL"
	.sleb128 255
	.uleb128 0xc
	.string	"BUILT_IN_COSH"
	.sleb128 256
	.uleb128 0xc
	.string	"BUILT_IN_COSHF"
	.sleb128 257
	.uleb128 0xc
	.string	"BUILT_IN_COSHL"
	.sleb128 258
	.uleb128 0xc
	.string	"BUILT_IN_POPCOUNT"
	.sleb128 259
	.uleb128 0xc
	.string	"BUILT_IN_POPCOUNTL"
	.sleb128 260
	.uleb128 0xc
	.string	"BUILT_IN_POPCOUNTLL"
	.sleb128 261
	.uleb128 0xc
	.string	"BUILT_IN_CTZ"
	.sleb128 262
	.uleb128 0xc
	.string	"BUILT_IN_CTZL"
	.sleb128 263
	.uleb128 0xc
	.string	"BUILT_IN_CTZLL"
	.sleb128 264
	.uleb128 0xc
	.string	"BUILT_IN_SQRT"
	.sleb128 265
	.uleb128 0xc
	.string	"BUILT_IN_SIN"
	.sleb128 266
	.uleb128 0xc
	.string	"BUILT_IN_COS"
	.sleb128 267
	.uleb128 0xc
	.string	"BUILT_IN_EXP"
	.sleb128 268
	.uleb128 0xc
	.string	"BUILT_IN_LOG"
	.sleb128 269
	.uleb128 0xc
	.string	"BUILT_IN_SQRTF"
	.sleb128 270
	.uleb128 0xc
	.string	"BUILT_IN_SINF"
	.sleb128 271
	.uleb128 0xc
	.string	"BUILT_IN_COSF"
	.sleb128 272
	.uleb128 0xc
	.string	"BUILT_IN_EXPF"
	.sleb128 273
	.uleb128 0xc
	.string	"BUILT_IN_LOGF"
	.sleb128 274
	.uleb128 0xc
	.string	"BUILT_IN_SQRTL"
	.sleb128 275
	.uleb128 0xc
	.string	"BUILT_IN_SINL"
	.sleb128 276
	.uleb128 0xc
	.string	"BUILT_IN_COSL"
	.sleb128 277
	.uleb128 0xc
	.string	"BUILT_IN_EXPL"
	.sleb128 278
	.uleb128 0xc
	.string	"BUILT_IN_LOGL"
	.sleb128 279
	.uleb128 0xc
	.string	"BUILT_IN_INF"
	.sleb128 280
	.uleb128 0xc
	.string	"BUILT_IN_INFF"
	.sleb128 281
	.uleb128 0xc
	.string	"BUILT_IN_INFL"
	.sleb128 282
	.uleb128 0xc
	.string	"BUILT_IN_HUGE_VAL"
	.sleb128 283
	.uleb128 0xc
	.string	"BUILT_IN_HUGE_VALF"
	.sleb128 284
	.uleb128 0xc
	.string	"BUILT_IN_HUGE_VALL"
	.sleb128 285
	.uleb128 0xc
	.string	"BUILT_IN_NAN"
	.sleb128 286
	.uleb128 0xc
	.string	"BUILT_IN_NANF"
	.sleb128 287
	.uleb128 0xc
	.string	"BUILT_IN_NANL"
	.sleb128 288
	.uleb128 0xc
	.string	"BUILT_IN_NANS"
	.sleb128 289
	.uleb128 0xc
	.string	"BUILT_IN_NANSF"
	.sleb128 290
	.uleb128 0xc
	.string	"BUILT_IN_NANSL"
	.sleb128 291
	.uleb128 0xc
	.string	"BUILT_IN_SAVEREGS"
	.sleb128 292
	.uleb128 0xc
	.string	"BUILT_IN_CLASSIFY_TYPE"
	.sleb128 293
	.uleb128 0xc
	.string	"BUILT_IN_NEXT_ARG"
	.sleb128 294
	.uleb128 0xc
	.string	"BUILT_IN_ARGS_INFO"
	.sleb128 295
	.uleb128 0xc
	.string	"BUILT_IN_CONSTANT_P"
	.sleb128 296
	.uleb128 0xc
	.string	"BUILT_IN_FRAME_ADDRESS"
	.sleb128 297
	.uleb128 0xc
	.string	"BUILT_IN_RETURN_ADDRESS"
	.sleb128 298
	.uleb128 0xc
	.string	"BUILT_IN_AGGREGATE_INCOMING_ADDRESS"
	.sleb128 299
	.uleb128 0xc
	.string	"BUILT_IN_APPLY_ARGS"
	.sleb128 300
	.uleb128 0xc
	.string	"BUILT_IN_APPLY"
	.sleb128 301
	.uleb128 0xc
	.string	"BUILT_IN_RETURN"
	.sleb128 302
	.uleb128 0xc
	.string	"BUILT_IN_SETJMP"
	.sleb128 303
	.uleb128 0xc
	.string	"BUILT_IN_LONGJMP"
	.sleb128 304
	.uleb128 0xc
	.string	"BUILT_IN_TRAP"
	.sleb128 305
	.uleb128 0xc
	.string	"BUILT_IN_PREFETCH"
	.sleb128 306
	.uleb128 0xc
	.string	"BUILT_IN_PRINTF"
	.sleb128 307
	.uleb128 0xc
	.string	"BUILT_IN_PUTCHAR"
	.sleb128 308
	.uleb128 0xc
	.string	"BUILT_IN_PUTS"
	.sleb128 309
	.uleb128 0xc
	.string	"BUILT_IN_SNPRINTF"
	.sleb128 310
	.uleb128 0xc
	.string	"BUILT_IN_SPRINTF"
	.sleb128 311
	.uleb128 0xc
	.string	"BUILT_IN_SCANF"
	.sleb128 312
	.uleb128 0xc
	.string	"BUILT_IN_SSCANF"
	.sleb128 313
	.uleb128 0xc
	.string	"BUILT_IN_VPRINTF"
	.sleb128 314
	.uleb128 0xc
	.string	"BUILT_IN_VSCANF"
	.sleb128 315
	.uleb128 0xc
	.string	"BUILT_IN_VSSCANF"
	.sleb128 316
	.uleb128 0xc
	.string	"BUILT_IN_VSNPRINTF"
	.sleb128 317
	.uleb128 0xc
	.string	"BUILT_IN_VSPRINTF"
	.sleb128 318
	.uleb128 0xc
	.string	"BUILT_IN_FPUTC"
	.sleb128 319
	.uleb128 0xc
	.string	"BUILT_IN_FPUTS"
	.sleb128 320
	.uleb128 0xc
	.string	"BUILT_IN_FWRITE"
	.sleb128 321
	.uleb128 0xc
	.string	"BUILT_IN_FPRINTF"
	.sleb128 322
	.uleb128 0xc
	.string	"BUILT_IN_PUTCHAR_UNLOCKED"
	.sleb128 323
	.uleb128 0xc
	.string	"BUILT_IN_PUTS_UNLOCKED"
	.sleb128 324
	.uleb128 0xc
	.string	"BUILT_IN_PRINTF_UNLOCKED"
	.sleb128 325
	.uleb128 0xc
	.string	"BUILT_IN_FPUTC_UNLOCKED"
	.sleb128 326
	.uleb128 0xc
	.string	"BUILT_IN_FPUTS_UNLOCKED"
	.sleb128 327
	.uleb128 0xc
	.string	"BUILT_IN_FWRITE_UNLOCKED"
	.sleb128 328
	.uleb128 0xc
	.string	"BUILT_IN_ISGREATER"
	.sleb128 329
	.uleb128 0xc
	.string	"BUILT_IN_ISGREATEREQUAL"
	.sleb128 330
	.uleb128 0xc
	.string	"BUILT_IN_ISLESS"
	.sleb128 331
	.uleb128 0xc
	.string	"BUILT_IN_ISLESSEQUAL"
	.sleb128 332
	.uleb128 0xc
	.string	"BUILT_IN_ISLESSGREATER"
	.sleb128 333
	.uleb128 0xc
	.string	"BUILT_IN_ISUNORDERED"
	.sleb128 334
	.uleb128 0xc
	.string	"BUILT_IN_UNWIND_INIT"
	.sleb128 335
	.uleb128 0xc
	.string	"BUILT_IN_DWARF_CFA"
	.sleb128 336
	.uleb128 0xc
	.string	"BUILT_IN_DWARF_SP_COLUMN"
	.sleb128 337
	.uleb128 0xc
	.string	"BUILT_IN_INIT_DWARF_REG_SIZES"
	.sleb128 338
	.uleb128 0xc
	.string	"BUILT_IN_FROB_RETURN_ADDR"
	.sleb128 339
	.uleb128 0xc
	.string	"BUILT_IN_EXTRACT_RETURN_ADDR"
	.sleb128 340
	.uleb128 0xc
	.string	"BUILT_IN_EH_RETURN"
	.sleb128 341
	.uleb128 0xc
	.string	"BUILT_IN_EH_RETURN_DATA_REGNO"
	.sleb128 342
	.uleb128 0xc
	.string	"BUILT_IN_VA_START"
	.sleb128 343
	.uleb128 0xc
	.string	"BUILT_IN_STDARG_START"
	.sleb128 344
	.uleb128 0xc
	.string	"BUILT_IN_VA_END"
	.sleb128 345
	.uleb128 0xc
	.string	"BUILT_IN_VA_COPY"
	.sleb128 346
	.uleb128 0xc
	.string	"BUILT_IN_EXPECT"
	.sleb128 347
	.uleb128 0xc
	.string	"BUILT_IN_EXTEND_POINTER"
	.sleb128 348
	.uleb128 0xc
	.string	"BUILT_IN_NEW"
	.sleb128 349
	.uleb128 0xc
	.string	"BUILT_IN_VEC_NEW"
	.sleb128 350
	.uleb128 0xc
	.string	"BUILT_IN_DELETE"
	.sleb128 351
	.uleb128 0xc
	.string	"BUILT_IN_VEC_DELETE"
	.sleb128 352
	.uleb128 0xc
	.string	"BUILT_IN_ABORT"
	.sleb128 353
	.uleb128 0xc
	.string	"BUILT_IN_EXIT"
	.sleb128 354
	.uleb128 0xc
	.string	"BUILT_IN__EXIT"
	.sleb128 355
	.uleb128 0xc
	.string	"BUILT_IN__EXIT2"
	.sleb128 356
	.uleb128 0xc
	.string	"END_BUILTINS"
	.sleb128 357
	.byte	0x0
	.uleb128 0x4
	.long	0x892a
	.string	"tree_common"
	.byte	0x10
	.byte	0x8
	.byte	0x8c
	.uleb128 0x1c
	.long	.LASF34
	.byte	0x8
	.byte	0x8d
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1c
	.long	.LASF3
	.byte	0x8
	.byte	0x8e
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x5
	.long	.LASF0
	.byte	0x8
	.byte	0x90
	.long	0x5fd3
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"side_effects_flag"
	.byte	0x8
	.byte	0x92
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"constant_flag"
	.byte	0x8
	.byte	0x93
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"addressable_flag"
	.byte	0x8
	.byte	0x94
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"volatile_flag"
	.byte	0x8
	.byte	0x95
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"readonly_flag"
	.byte	0x8
	.byte	0x96
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"unsigned_flag"
	.byte	0x8
	.byte	0x97
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"asm_written_flag"
	.byte	0x8
	.byte	0x98
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"not_emitted_by_gxx"
	.byte	0x8
	.byte	0x9a
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"used_flag"
	.byte	0x8
	.byte	0x9f
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"nothrow_flag"
	.byte	0x8
	.byte	0xa0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"static_flag"
	.byte	0x8
	.byte	0xa1
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"public_flag"
	.byte	0x8
	.byte	0xa2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"private_flag"
	.byte	0x8
	.byte	0xa3
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"protected_flag"
	.byte	0x8
	.byte	0xa4
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"bounded_flag"
	.byte	0x8
	.byte	0xa5
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"deprecated_flag"
	.byte	0x8
	.byte	0xa6
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF35
	.byte	0x8
	.byte	0xa8
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF36
	.byte	0x8
	.byte	0xa9
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF37
	.byte	0x8
	.byte	0xaa
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF38
	.byte	0x8
	.byte	0xab
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF39
	.byte	0x8
	.byte	0xac
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF40
	.byte	0x8
	.byte	0xad
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF41
	.byte	0x8
	.byte	0xae
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF42
	.byte	0x8
	.byte	0xb0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"sbuf"
	.byte	0x8
	.byte	0xb5
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"sdram"
	.byte	0x8
	.byte	0xb6
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"v1buf"
	.byte	0x8
	.byte	0xb7
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"v2buf"
	.byte	0x8
	.byte	0xb8
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"v4buf"
	.byte	0x8
	.byte	0xb9
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x10
	.long	0x8966
	.string	"tree_int_cst_lowhi"
	.byte	0x10
	.byte	0x8
	.value	0x30a
	.uleb128 0x11
	.string	"low"
	.byte	0x8
	.value	0x30b
	.long	0x75d
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"high"
	.byte	0x8
	.value	0x30c
	.long	0x74c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x10
	.long	0x89ae
	.string	"tree_int_cst"
	.byte	0x24
	.byte	0x8
	.value	0x303
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x304
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"rtl"
	.byte	0x8
	.value	0x305
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"int_cst"
	.byte	0x8
	.value	0x30d
	.long	0x892a
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x10
	.long	0x89fc
	.string	"tree_real_cst"
	.byte	0x18
	.byte	0x8
	.value	0x31f
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x320
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"rtl"
	.byte	0x8
	.value	0x321
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"real_cst_ptr"
	.byte	0x8
	.value	0x322
	.long	0x5f89
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x10
	.long	0x8a63
	.string	"tree_string"
	.byte	0x20
	.byte	0x8
	.value	0x333
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x334
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"rtl"
	.byte	0x8
	.value	0x335
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"length"
	.byte	0x8
	.value	0x336
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x11
	.string	"pointer"
	.byte	0x8
	.value	0x337
	.long	0x44e
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x11
	.string	"st"
	.byte	0x8
	.value	0x339
	.long	0x8a63
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x6942
	.uleb128 0x10
	.long	0x8abe
	.string	"tree_complex"
	.byte	0x1c
	.byte	0x8
	.value	0x342
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x343
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"rtl"
	.byte	0x8
	.value	0x344
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"real"
	.byte	0x8
	.value	0x345
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x11
	.string	"imag"
	.byte	0x8
	.value	0x346
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.byte	0x0
	.uleb128 0x10
	.long	0x8b06
	.string	"tree_vector"
	.byte	0x18
	.byte	0x8
	.value	0x355
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x356
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"rtl"
	.byte	0x8
	.value	0x357
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"elements"
	.byte	0x8
	.value	0x358
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x17
	.long	0x8b44
	.long	.LASF43
	.byte	0xc
	.byte	0xa
	.byte	0x19
	.uleb128 0x7
	.string	"str"
	.byte	0xa
	.byte	0x1c
	.long	0xa52
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"len"
	.byte	0xa
	.byte	0x1d
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"hash_value"
	.byte	0xa
	.byte	0x1e
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x10
	.long	0x8b7b
	.string	"tree_identifier"
	.byte	0x1c
	.byte	0x8
	.value	0x376
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x377
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"id"
	.byte	0x8
	.value	0x378
	.long	0x8b06
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.byte	0x0
	.uleb128 0x10
	.long	0x8bc0
	.string	"tree_list"
	.byte	0x18
	.byte	0x8
	.value	0x380
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x381
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"purpose"
	.byte	0x8
	.value	0x382
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x25
	.long	.LASF10
	.byte	0x8
	.value	0x383
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x10
	.long	0x8c01
	.string	"tree_vec"
	.byte	0x18
	.byte	0x8
	.value	0x38e
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x38f
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"length"
	.byte	0x8
	.value	0x390
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"a"
	.byte	0x8
	.value	0x391
	.long	0x8c01
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x13
	.long	0x8c11
	.long	0x1e3
	.uleb128 0x14
	.long	0x6c7
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x8c5d
	.string	"tree_exp"
	.byte	0x18
	.byte	0x8
	.value	0x3d4
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x3d5
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"complexity"
	.byte	0x8
	.value	0x3d6
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"operands"
	.byte	0x8
	.value	0x3d9
	.long	0x8c01
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x10
	.long	0x8d4d
	.string	"tree_block"
	.byte	0x2c
	.byte	0x8
	.value	0x40a
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x40b
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x24
	.string	"handler_block_flag"
	.byte	0x8
	.value	0x40d
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x2a
	.long	.LASF44
	.byte	0x8
	.value	0x40e
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x24
	.string	"block_num"
	.byte	0x8
	.value	0x40f
	.long	0x6b0
	.byte	0x4
	.byte	0x1e
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"vars"
	.byte	0x8
	.value	0x411
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x11
	.string	"subblocks"
	.byte	0x8
	.value	0x412
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x11
	.string	"supercontext"
	.byte	0x8
	.value	0x413
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x25
	.long	.LASF45
	.byte	0x8
	.value	0x414
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x11
	.string	"fragment_origin"
	.byte	0x8
	.value	0x415
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x11
	.string	"fragment_chain"
	.byte	0x8
	.value	0x416
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x2b
	.long	0x8d94
	.string	"tree_type_symtab"
	.byte	0x4
	.byte	0x8
	.value	0x570
	.uleb128 0xa
	.string	"address"
	.byte	0x8
	.value	0x571
	.long	0x461
	.uleb128 0xa
	.string	"pointer"
	.byte	0x8
	.value	0x572
	.long	0x7b5
	.uleb128 0xa
	.string	"die"
	.byte	0x8
	.value	0x573
	.long	0x8da1
	.byte	0x0
	.uleb128 0x26
	.string	"die_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x8d94
	.uleb128 0x10
	.long	0x90f3
	.string	"tree_type"
	.byte	0x74
	.byte	0x8
	.value	0x551
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x552
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"values"
	.byte	0x8
	.value	0x553
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x25
	.long	.LASF9
	.byte	0x8
	.value	0x554
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x25
	.long	.LASF46
	.byte	0x8
	.value	0x555
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x25
	.long	.LASF47
	.byte	0x8
	.value	0x556
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x11
	.string	"uid"
	.byte	0x8
	.value	0x557
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"precision"
	.byte	0x8
	.value	0x559
	.long	0x6b0
	.byte	0x4
	.byte	0x9
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF1
	.byte	0x8
	.value	0x55a
	.long	0xb18
	.byte	0x4
	.byte	0x7
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"string_flag"
	.byte	0x8
	.value	0x55c
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"no_force_blk_flag"
	.byte	0x8
	.value	0x55d
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"needs_constructing_flag"
	.byte	0x8
	.value	0x55e
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"transparent_union_flag"
	.byte	0x8
	.value	0x55f
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"packed_flag"
	.byte	0x8
	.value	0x560
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"restrict_flag"
	.byte	0x8
	.value	0x561
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF48
	.byte	0x8
	.value	0x562
	.long	0x6b0
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF35
	.byte	0x8
	.value	0x564
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF36
	.byte	0x8
	.value	0x565
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF37
	.byte	0x8
	.value	0x566
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF38
	.byte	0x8
	.value	0x567
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF39
	.byte	0x8
	.value	0x568
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF40
	.byte	0x8
	.value	0x569
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF41
	.byte	0x8
	.value	0x56a
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF49
	.byte	0x8
	.value	0x56b
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x11
	.string	"align"
	.byte	0x8
	.value	0x56d
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x11
	.string	"pointer_to"
	.byte	0x8
	.value	0x56e
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x11
	.string	"reference_to"
	.byte	0x8
	.value	0x56f
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x11
	.string	"symtab"
	.byte	0x8
	.value	0x574
	.long	0x8d4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x11
	.string	"name"
	.byte	0x8
	.value	0x576
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x11
	.string	"minval"
	.byte	0x8
	.value	0x577
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x11
	.string	"maxval"
	.byte	0x8
	.value	0x578
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x11
	.string	"next_variant"
	.byte	0x8
	.value	0x579
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x11
	.string	"main_variant"
	.byte	0x8
	.value	0x57a
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x11
	.string	"binfo"
	.byte	0x8
	.value	0x57b
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x11
	.string	"context"
	.byte	0x8
	.value	0x57c
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x11
	.string	"alias_set"
	.byte	0x8
	.value	0x57d
	.long	0x74c
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x25
	.long	.LASF50
	.byte	0x8
	.value	0x57f
	.long	0x90ff
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x11
	.string	"ty_idx"
	.byte	0x8
	.value	0x581
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x11
	.string	"field_ids_used"
	.byte	0x8
	.value	0x582
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x11
	.string	"dst_id"
	.byte	0x8
	.value	0x583
	.long	0x6906
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x11
	.string	"extra_methods"
	.byte	0x8
	.value	0x58a
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.byte	0x0
	.uleb128 0x26
	.string	"lang_type"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x90f3
	.uleb128 0x10
	.long	0x914a
	.string	"tree_decl_u1_a"
	.byte	0x4
	.byte	0x8
	.value	0x817
	.uleb128 0x24
	.string	"align"
	.byte	0x8
	.value	0x818
	.long	0x6b0
	.byte	0x4
	.byte	0x18
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x24
	.string	"off_align"
	.byte	0x8
	.value	0x819
	.long	0x6b0
	.byte	0x4
	.byte	0x8
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x917f
	.string	"tree_decl_u1"
	.byte	0x8
	.byte	0x8
	.value	0x80e
	.uleb128 0xa
	.string	"f"
	.byte	0x8
	.value	0x811
	.long	0x69a1
	.uleb128 0xa
	.string	"i"
	.byte	0x8
	.value	0x814
	.long	0x74c
	.uleb128 0xa
	.string	"a"
	.byte	0x8
	.value	0x81a
	.long	0x9105
	.byte	0x0
	.uleb128 0x2b
	.long	0x91be
	.string	"tree_decl_u2"
	.byte	0x4
	.byte	0x8
	.value	0x837
	.uleb128 0xa
	.string	"f"
	.byte	0x8
	.value	0x838
	.long	0x29d9
	.uleb128 0xa
	.string	"r"
	.byte	0x8
	.value	0x839
	.long	0x9c
	.uleb128 0xa
	.string	"t"
	.byte	0x8
	.value	0x83a
	.long	0x1e3
	.uleb128 0xa
	.string	"i"
	.byte	0x8
	.value	0x83b
	.long	0x461
	.byte	0x0
	.uleb128 0x2c
	.long	0x91f6
	.byte	0x4
	.byte	0x8
	.value	0x84e
	.uleb128 0xa
	.string	"st"
	.byte	0x8
	.value	0x84f
	.long	0x8a63
	.uleb128 0xa
	.string	"label_idx"
	.byte	0x8
	.value	0x850
	.long	0x68f5
	.uleb128 0xa
	.string	"field_id"
	.byte	0x8
	.value	0x851
	.long	0x6b0
	.byte	0x0
	.uleb128 0x10
	.long	0x993e
	.string	"tree_decl"
	.byte	0xa0
	.byte	0x8
	.value	0x7c5
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x7c6
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"locus"
	.byte	0x8
	.value	0x7c7
	.long	0x5fc1
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"uid"
	.byte	0x8
	.value	0x7c8
	.long	0x6b0
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x25
	.long	.LASF9
	.byte	0x8
	.value	0x7c9
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x2a
	.long	.LASF1
	.byte	0x8
	.value	0x7ca
	.long	0xb18
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"external_flag"
	.byte	0x8
	.value	0x7cc
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"nonlocal_flag"
	.byte	0x8
	.value	0x7cd
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"regdecl_flag"
	.byte	0x8
	.value	0x7ce
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"inline_flag"
	.byte	0x8
	.value	0x7cf
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"bit_field_flag"
	.byte	0x8
	.value	0x7d0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"virtual_flag"
	.byte	0x8
	.value	0x7d1
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"ignored_flag"
	.byte	0x8
	.value	0x7d2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x2a
	.long	.LASF44
	.byte	0x8
	.value	0x7d3
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"sbuf_flag"
	.byte	0x8
	.value	0x7d7
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"sdram_flag"
	.byte	0x8
	.value	0x7d8
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"v1buf_flag"
	.byte	0x8
	.value	0x7d9
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"v2buf_flag"
	.byte	0x8
	.value	0x7da
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"v4buf_flag"
	.byte	0x8
	.value	0x7db
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"in_system_header_flag"
	.byte	0x8
	.value	0x7df
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"common_flag"
	.byte	0x8
	.value	0x7e0
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"defer_output"
	.byte	0x8
	.value	0x7e1
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"transparent_union"
	.byte	0x8
	.value	0x7e2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"static_ctor_flag"
	.byte	0x8
	.value	0x7e3
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"static_dtor_flag"
	.byte	0x8
	.value	0x7e4
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"artificial_flag"
	.byte	0x8
	.value	0x7e5
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"weak_flag"
	.byte	0x8
	.value	0x7e6
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"non_addr_const_p"
	.byte	0x8
	.value	0x7e8
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"no_instrument_function_entry_exit"
	.byte	0x8
	.value	0x7e9
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"comdat_flag"
	.byte	0x8
	.value	0x7ea
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.string	"malloc_flag"
	.byte	0x8
	.value	0x7eb
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"no_limit_stack"
	.byte	0x8
	.value	0x7ec
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF33
	.byte	0x8
	.value	0x7ed
	.long	0x6951
	.byte	0x4
	.byte	0x2
	.byte	0x1c
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"pure_flag"
	.byte	0x8
	.value	0x7ee
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF48
	.byte	0x8
	.value	0x7f0
	.long	0x6b0
	.byte	0x4
	.byte	0x2
	.byte	0x19
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"non_addressable"
	.byte	0x8
	.value	0x7f1
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF49
	.byte	0x8
	.value	0x7f2
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"uninlinable"
	.byte	0x8
	.value	0x7f3
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"thread_local_flag"
	.byte	0x8
	.value	0x7f4
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"inlined_function_flag"
	.byte	0x8
	.value	0x7f5
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"threadprivate_flag"
	.byte	0x8
	.value	0x7f7
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF35
	.byte	0x8
	.value	0x7fa
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF36
	.byte	0x8
	.value	0x7fb
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF37
	.byte	0x8
	.value	0x7fc
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF38
	.byte	0x8
	.value	0x7fd
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF39
	.byte	0x8
	.value	0x7fe
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF40
	.byte	0x8
	.value	0x7ff
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF41
	.byte	0x8
	.value	0x800
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x2a
	.long	.LASF42
	.byte	0x8
	.value	0x801
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"syscall_linkage_flag"
	.byte	0x8
	.value	0x804
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"widen_retval_flag"
	.byte	0x8
	.value	0x805
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.string	"emitted_by_gxx"
	.byte	0x8
	.value	0x808
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x11
	.string	"u1"
	.byte	0x8
	.value	0x81b
	.long	0x914a
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x25
	.long	.LASF46
	.byte	0x8
	.value	0x81d
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x11
	.string	"name"
	.byte	0x8
	.value	0x81e
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x11
	.string	"context"
	.byte	0x8
	.value	0x81f
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x11
	.string	"arguments"
	.byte	0x8
	.value	0x820
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x11
	.string	"result"
	.byte	0x8
	.value	0x821
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x11
	.string	"initial"
	.byte	0x8
	.value	0x822
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x11
	.string	"initial_2"
	.byte	0x8
	.value	0x824
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x11
	.string	"alias_target"
	.byte	0x8
	.value	0x825
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x11
	.string	"thunk_delta"
	.byte	0x8
	.value	0x829
	.long	0x74c
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x25
	.long	.LASF45
	.byte	0x8
	.value	0x82b
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x11
	.string	"assembler_name"
	.byte	0x8
	.value	0x82c
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x11
	.string	"section_name"
	.byte	0x8
	.value	0x82d
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x25
	.long	.LASF47
	.byte	0x8
	.value	0x82e
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x11
	.string	"rtl"
	.byte	0x8
	.value	0x82f
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x11
	.string	"live_range_rtl"
	.byte	0x8
	.value	0x830
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.uleb128 0x11
	.string	"u2"
	.byte	0x8
	.value	0x83c
	.long	0x917f
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.uleb128 0x11
	.string	"saved_tree"
	.byte	0x8
	.value	0x83f
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x11
	.string	"inlined_fns"
	.byte	0x8
	.value	0x843
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x11
	.string	"vindex"
	.byte	0x8
	.value	0x845
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x11
	.string	"pointer_alias_set"
	.byte	0x8
	.value	0x846
	.long	0x74c
	.byte	0x3
	.byte	0x23
	.uleb128 0x80
	.uleb128 0x25
	.long	.LASF50
	.byte	0x8
	.value	0x848
	.long	0x994a
	.byte	0x3
	.byte	0x23
	.uleb128 0x88
	.uleb128 0x24
	.string	"symtab_idx"
	.byte	0x8
	.value	0x84b
	.long	0x6b0
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x3
	.byte	0x23
	.uleb128 0x8c
	.uleb128 0x24
	.string	"label_defined"
	.byte	0x8
	.value	0x84c
	.long	0x6b0
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x3
	.byte	0x23
	.uleb128 0x8c
	.uleb128 0x11
	.string	"sgi_u1"
	.byte	0x8
	.value	0x852
	.long	0x91be
	.byte	0x3
	.byte	0x23
	.uleb128 0x90
	.uleb128 0x11
	.string	"decl_dst_id"
	.byte	0x8
	.value	0x858
	.long	0x6906
	.byte	0x3
	.byte	0x23
	.uleb128 0x94
	.uleb128 0x11
	.string	"sl_model_name"
	.byte	0x8
	.value	0x85c
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0x9c
	.byte	0x0
	.uleb128 0x26
	.string	"lang_decl"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x993e
	.uleb128 0xb
	.long	0x9bce
	.string	"omp_tree_type"
	.byte	0x4
	.byte	0xe
	.byte	0x1d
	.uleb128 0xc
	.string	"parallel_dir_b"
	.sleb128 0
	.uleb128 0xc
	.string	"parallel_dir_e"
	.sleb128 1
	.uleb128 0xc
	.string	"for_dir_b"
	.sleb128 2
	.uleb128 0xc
	.string	"for_dir_e"
	.sleb128 3
	.uleb128 0xc
	.string	"sections_cons_b"
	.sleb128 4
	.uleb128 0xc
	.string	"sections_cons_e"
	.sleb128 5
	.uleb128 0xc
	.string	"section_cons_b"
	.sleb128 6
	.uleb128 0xc
	.string	"section_cons_e"
	.sleb128 7
	.uleb128 0xc
	.string	"single_cons_b"
	.sleb128 8
	.uleb128 0xc
	.string	"single_cons_e"
	.sleb128 9
	.uleb128 0xc
	.string	"par_for_cons_b"
	.sleb128 10
	.uleb128 0xc
	.string	"par_for_cons_e"
	.sleb128 11
	.uleb128 0xc
	.string	"par_sctn_cons_b"
	.sleb128 12
	.uleb128 0xc
	.string	"par_sctn_cons_e"
	.sleb128 13
	.uleb128 0xc
	.string	"master_cons_b"
	.sleb128 14
	.uleb128 0xc
	.string	"master_cons_e"
	.sleb128 15
	.uleb128 0xc
	.string	"critical_cons_b"
	.sleb128 16
	.uleb128 0xc
	.string	"critical_cons_e"
	.sleb128 17
	.uleb128 0xc
	.string	"barrier_dir"
	.sleb128 18
	.uleb128 0xc
	.string	"flush_dir"
	.sleb128 19
	.uleb128 0xc
	.string	"atomic_cons"
	.sleb128 20
	.uleb128 0xc
	.string	"atomic_cons_b"
	.sleb128 21
	.uleb128 0xc
	.string	"atomic_cons_e"
	.sleb128 22
	.uleb128 0xc
	.string	"thdprv_dir"
	.sleb128 23
	.uleb128 0xc
	.string	"ordered_cons_b"
	.sleb128 24
	.uleb128 0xc
	.string	"ordered_cons_e"
	.sleb128 25
	.uleb128 0xc
	.string	"options_dir"
	.sleb128 26
	.uleb128 0xc
	.string	"exec_freq_dir"
	.sleb128 27
	.uleb128 0xc
	.string	"sl2_sections_cons_b"
	.sleb128 28
	.uleb128 0xc
	.string	"sl2_minor_sections_cons_b"
	.sleb128 29
	.uleb128 0xc
	.string	"sl2_sections_cons_e"
	.sleb128 30
	.uleb128 0xc
	.string	"sl2_section_cons_b"
	.sleb128 31
	.uleb128 0xc
	.string	"sl2_section_cons_e"
	.sleb128 32
	.uleb128 0xc
	.string	"sl2_minor_section_cons_b"
	.sleb128 33
	.uleb128 0xc
	.string	"sl2_minor_section_cons_e"
	.sleb128 34
	.byte	0x0
	.uleb128 0x10
	.long	0x9c1d
	.string	"tree_omp"
	.byte	0x18
	.byte	0x8
	.value	0x864
	.uleb128 0x25
	.long	.LASF2
	.byte	0x8
	.value	0x865
	.long	0x864b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"choice"
	.byte	0x8
	.value	0x866
	.long	0x9950
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x11
	.string	"omp_clause_list"
	.byte	0x8
	.value	0x867
	.long	0x7b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x10
	.long	0x9d10
	.string	"elim_table"
	.byte	0x28
	.byte	0x1
	.value	0x12e
	.uleb128 0x11
	.string	"from"
	.byte	0x1
	.value	0x12f
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"to"
	.byte	0x1
	.value	0x130
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x11
	.string	"initial_offset"
	.byte	0x1
	.value	0x131
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x11
	.string	"can_eliminate"
	.byte	0x1
	.value	0x132
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x11
	.string	"can_eliminate_previous"
	.byte	0x1
	.value	0x133
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x25
	.long	.LASF8
	.byte	0x1
	.value	0x135
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x11
	.string	"previous_offset"
	.byte	0x1
	.value	0x136
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x11
	.string	"ref_outside_mem"
	.byte	0x1
	.value	0x137
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x11
	.string	"from_rtx"
	.byte	0x1
	.value	0x138
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x11
	.string	"to_rtx"
	.byte	0x1
	.value	0x13d
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x10
	.long	0x9d45
	.string	"elim_table_1"
	.byte	0x8
	.byte	0x1
	.value	0x145
	.uleb128 0x11
	.string	"from"
	.byte	0x1
	.value	0x146
	.long	0xb06
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"to"
	.byte	0x1
	.value	0x147
	.long	0xb06
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2d
	.long	0x9df1
	.byte	0x1
	.string	"init_reload"
	.byte	0x1
	.value	0x1d4
	.byte	0x1
	.long	.LFB15
	.long	.LFE15
	.long	.LLST0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1d5
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1db
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LBB2
	.long	.LBE2
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x202
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	0x9dc7
	.long	.LBB3
	.long	.LBE3
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x202
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x202
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB4
	.long	.LBE4
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x202
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x202
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.long	0x9e95
	.byte	0x1
	.string	"new_insn_chain"
	.byte	0x1
	.value	0x20e
	.byte	0x1
	.long	0x5b07
	.long	.LFB16
	.long	.LFE16
	.long	.LLST1
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0x20f
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LBB5
	.long	.LBE5
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x214
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	0x9e6b
	.long	.LBB6
	.long	.LBE6
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x214
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x214
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB7
	.long	.LBE7
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x214
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x214
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x9fa2
	.byte	0x1
	.string	"compute_use_by_pseudos"
	.byte	0x1
	.value	0x22b
	.byte	0x1
	.long	.LFB17
	.long	.LFE17
	.long	.LLST2
	.uleb128 0x33
	.string	"to"
	.byte	0x1
	.value	0x229
	.long	0x9fa2
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"from"
	.byte	0x1
	.value	0x22a
	.long	0x5326
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x22c
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.long	0x9f91
	.long	.LBB8
	.long	.LBE8
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0x22e
	.long	0x527e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0x22e
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0x22e
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0x22e
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.long	.LBB9
	.long	.LBE9
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0x22e
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LBB10
	.long	.LBE10
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0x22e
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB11
	.long	.LBE11
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x22e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x22e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xf070
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.14459
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xe29
	.uleb128 0x35
	.long	0xa07d
	.string	"replace_pseudos_in_call_usage"
	.byte	0x1
	.value	0x24e
	.byte	0x1
	.long	.LFB18
	.long	.LFE18
	.long	.LLST3
	.uleb128 0x33
	.string	"loc"
	.byte	0x1
	.value	0x24b
	.long	0x1ac8
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF60
	.byte	0x1
	.value	0x24c
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"usage"
	.byte	0x1
	.value	0x24d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x24f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x250
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x251
	.long	0x44e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x252
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x252
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	0xa06c
	.long	.LBB12
	.long	.LBE12
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x25a
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xf06b
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.14535
	.byte	0x0
	.uleb128 0x32
	.long	0xa4ab
	.byte	0x1
	.string	"reload"
	.byte	0x1
	.value	0x2a1
	.byte	0x1
	.long	0x461
	.long	.LFB19
	.long	.LFE19
	.long	.LLST4
	.uleb128 0x36
	.long	.LASF11
	.byte	0x1
	.value	0x29f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF61
	.byte	0x1
	.value	0x2a0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x2a2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x2a3
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0x2a4
	.long	0xa4ab
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2e
	.string	"bb"
	.byte	0x1
	.value	0x2a5
	.long	0x5673
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x37
	.string	"failed"
	.byte	0x1
	.value	0x467
	.long	.L280
	.uleb128 0x30
	.long	0xa17d
	.long	.LBB13
	.long	.LBE13
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x2ac
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x30
	.long	0xa152
	.long	.LBB14
	.long	.LBE14
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x2ac
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x2ac
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB15
	.long	.LBE15
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x2ac
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x2ac
	.long	0x7b3
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xa19b
	.long	.LBB16
	.long	.LBE16
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x2e6
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.byte	0x0
	.uleb128 0x30
	.long	0xa1ec
	.long	.LBB17
	.long	.LBE17
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x2f2
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2f
	.long	.LBB18
	.long	.LBE18
	.uleb128 0x2e
	.string	"note"
	.byte	0x1
	.value	0x303
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.long	.LBB19
	.long	.LBE19
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x310
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xa20a
	.long	.LBB20
	.long	.LBE20
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x380
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.uleb128 0x30
	.long	0xa357
	.long	.LBB21
	.long	.LBE21
	.uleb128 0x31
	.long	.LASF63
	.byte	0x1
	.value	0x394
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.string	"did_spill"
	.byte	0x1
	.value	0x395
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"starting_frame_size"
	.byte	0x1
	.value	0x397
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x30
	.long	0xa279
	.long	.LBB22
	.long	.LBE22
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x3c0
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.byte	0x0
	.uleb128 0x30
	.long	0xa2ef
	.long	.LBB23
	.long	.LBE23
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x3e7
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.long	0xa2c4
	.long	.LBB24
	.long	.LBE24
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x3e7
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x3e7
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB25
	.long	.LBE25
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x3e7
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x3e7
	.long	0x7b3
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xa32c
	.long	.LBB26
	.long	.LBE26
	.uleb128 0x2e
	.string	"to_spill"
	.byte	0x1
	.value	0x3f7
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x2f
	.long	.LBB27
	.long	.LBE27
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x3f8
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB28
	.long	.LBE28
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x41a
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"__obj"
	.byte	0x1
	.value	0x41a
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xa395
	.long	.LBB29
	.long	.LBE29
	.uleb128 0x2e
	.string	"list"
	.byte	0x1
	.value	0x42f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB30
	.long	.LBE30
	.uleb128 0x2e
	.string	"equiv_insn"
	.byte	0x1
	.value	0x432
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xa3be
	.long	.LBB31
	.long	.LBE31
	.uleb128 0x2e
	.string	"old_frame_size"
	.byte	0x1
	.value	0x44f
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.byte	0x0
	.uleb128 0x30
	.long	0xa3f5
	.long	.LBB32
	.long	.LBE32
	.uleb128 0x2e
	.string	"addr"
	.byte	0x1
	.value	0x478
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.long	.LBB33
	.long	.LBE33
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x484
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xa414
	.long	.LBB34
	.long	.LBE34
	.uleb128 0x2e
	.string	"pnote"
	.byte	0x1
	.value	0x4a8
	.long	0x1ac8
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x30
	.long	0xa432
	.long	.LBB35
	.long	.LBE35
	.uleb128 0x31
	.long	.LASF9
	.byte	0x1
	.value	0x4d9
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.byte	0x0
	.uleb128 0x30
	.long	0xa44f
	.long	.LBB36
	.long	.LBE36
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x500
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x30
	.long	0xa47d
	.long	.LBB37
	.long	.LBE37
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x505
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"__obj"
	.byte	0x1
	.value	0x505
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xf056
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.14731
	.uleb128 0x2e
	.string	"verbose_warned"
	.byte	0x1
	.value	0x4da
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	verbose_warned.14749
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9c1d
	.uleb128 0x3
	.byte	0x4
	.long	0xe10
	.uleb128 0x38
	.string	"maybe_fix_stack_asms"
	.byte	0x1
	.value	0x51a
	.byte	0x1
	.long	.LFB20
	.long	.LFE20
	.long	.LLST5
	.uleb128 0x35
	.long	0xa5ed
	.string	"copy_reloads"
	.byte	0x1
	.value	0x58a
	.byte	0x1
	.long	.LFB21
	.long	.LFE21
	.long	.LLST6
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x589
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x30
	.long	0xa57f
	.long	.LBB38
	.long	.LBE38
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x58d
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.long	0xa556
	.long	.LBB39
	.long	.LBE39
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x58d
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x58d
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB40
	.long	.LBE40
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x58d
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x58d
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB41
	.long	.LBE41
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x590
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	0xa5c3
	.long	.LBB42
	.long	.LBE42
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x590
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x590
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB43
	.long	.LBE43
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x590
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x590
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xa7c1
	.string	"calculate_needs_all_insns"
	.byte	0x1
	.value	0x599
	.byte	0x1
	.long	.LFB22
	.long	.LFE22
	.long	.LLST7
	.uleb128 0x36
	.long	.LASF61
	.byte	0x1
	.value	0x598
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"pprev_reload"
	.byte	0x1
	.value	0x59a
	.long	0xa7c1
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x31
	.long	.LASF34
	.byte	0x1
	.value	0x59b
	.long	0x5b07
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0x59b
	.long	0x5b07
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.long	0xa6d8
	.long	.LBB44
	.long	.LBE44
	.uleb128 0x2e
	.string	"__h"
	.byte	0x1
	.value	0x59f
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.long	0xa6af
	.long	.LBB45
	.long	.LBE45
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x59f
	.long	0x1d2d
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x31
	.long	.LASF51
	.byte	0x1
	.value	0x59f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB46
	.long	.LBE46
	.uleb128 0x31
	.long	.LASF52
	.byte	0x1
	.value	0x59f
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x59f
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB47
	.long	.LBE47
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x5a2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB48
	.long	.LBE48
	.uleb128 0x31
	.long	.LASF64
	.byte	0x1
	.value	0x5b6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"old_code"
	.byte	0x1
	.value	0x5b7
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"old_notes"
	.byte	0x1
	.value	0x5b8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"did_elimination"
	.byte	0x1
	.value	0x5b9
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"operands_changed"
	.byte	0x1
	.value	0x5ba
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x5bb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	0xa794
	.long	.LBB49
	.long	.LBE49
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x5d4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB50
	.long	.LBE50
	.uleb128 0x2e
	.string	"__o"
	.byte	0x1
	.value	0x5f3
	.long	0x1d2d
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"__obj"
	.byte	0x1
	.value	0x5f3
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5b07
	.uleb128 0x39
	.long	0xa83f
	.string	"reload_reg_class_lower"
	.byte	0x1
	.value	0x60e
	.byte	0x1
	.long	0x461
	.long	.LFB23
	.long	.LFE23
	.long	.LLST8
	.uleb128 0x33
	.string	"r1p"
	.byte	0x1
	.value	0x60c
	.long	0xb11
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"r2p"
	.byte	0x1
	.value	0x60d
	.long	0xb11
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"r1"
	.byte	0x1
	.value	0x60f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"r2"
	.byte	0x1
	.value	0x60f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"t"
	.byte	0x1
	.value	0x610
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xa8ad
	.string	"count_pseudo"
	.byte	0x1
	.value	0x639
	.byte	0x1
	.long	.LFB24
	.long	.LFE24
	.long	.LLST9
	.uleb128 0x33
	.string	"reg"
	.byte	0x1
	.value	0x638
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"freq"
	.byte	0x1
	.value	0x63a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x63b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x63c
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x34
	.long	.LASF59
	.long	0xf041
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16072
	.byte	0x0
	.uleb128 0x35
	.long	0xaad2
	.string	"order_regs_for_reload"
	.byte	0x1
	.value	0x654
	.byte	0x1
	.long	.LFB25
	.long	.LFE25
	.long	.LLST10
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x653
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x655
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x31
	.long	.LASF65
	.byte	0x1
	.value	0x656
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x31
	.long	.LASF66
	.byte	0x1
	.value	0x657
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x30
	.long	0xa943
	.long	.LBB51
	.long	.LBE51
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x659
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x659
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.byte	0x0
	.uleb128 0x30
	.long	0xa961
	.long	.LBB52
	.long	.LBE52
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x662
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.byte	0x0
	.uleb128 0x30
	.long	0xa97f
	.long	.LBB53
	.long	.LBE53
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x663
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.byte	0x0
	.uleb128 0x30
	.long	0xa9ad
	.long	.LBB54
	.long	.LBE54
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x664
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x664
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.byte	0x0
	.uleb128 0x30
	.long	0xa9db
	.long	.LBB55
	.long	.LBE55
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x665
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x665
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.byte	0x0
	.uleb128 0x30
	.long	0xaa59
	.long	.LBB56
	.long	.LBE56
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0x66b
	.long	0x527e
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0x66b
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0x66b
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0x66b
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.long	.LBB57
	.long	.LBE57
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0x66b
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB58
	.long	.LBE58
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0x66b
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB59
	.long	.LBE59
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0x670
	.long	0x527e
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0x670
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0x670
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0x670
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB60
	.long	.LBE60
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0x670
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB61
	.long	.LBE61
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0x670
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xab54
	.string	"count_spilled_pseudo"
	.byte	0x1
	.value	0x687
	.byte	0x1
	.long	.LFB26
	.long	.LFE26
	.long	.LLST11
	.uleb128 0x33
	.string	"spilled"
	.byte	0x1
	.value	0x686
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"spilled_nregs"
	.byte	0x1
	.value	0x686
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"reg"
	.byte	0x1
	.value	0x686
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x688
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x689
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x39
	.long	0xae6d
	.string	"find_reg"
	.byte	0x1
	.value	0x69c
	.byte	0x1
	.long	0x461
	.long	.LFB27
	.long	.LFE27
	.long	.LLST12
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x69a
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"order"
	.byte	0x1
	.value	0x69b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"rnum"
	.byte	0x1
	.value	0x69d
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2e
	.string	"rl"
	.byte	0x1
	.value	0x69e
	.long	0x5b0d
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.string	"best_cost"
	.byte	0x1
	.value	0x69f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2e
	.string	"best_reg"
	.byte	0x1
	.value	0x6a0
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x6a1
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x6a1
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x6a2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2e
	.string	"not_usable"
	.byte	0x1
	.value	0x6a3
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2e
	.string	"used_by_other_reload"
	.byte	0x1
	.value	0x6a4
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x30
	.long	0xac71
	.long	.LBB62
	.long	.LBE62
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x6a6
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x6a6
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.byte	0x0
	.uleb128 0x30
	.long	0xac9f
	.long	.LBB63
	.long	.LBE63
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x6a7
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x6a7
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.byte	0x0
	.uleb128 0x30
	.long	0xaccd
	.long	.LBB64
	.long	.LBE64
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x6a8
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x6a8
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.byte	0x0
	.uleb128 0x30
	.long	0xaceb
	.long	.LBB65
	.long	.LBE65
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x6aa
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.byte	0x0
	.uleb128 0x30
	.long	0xad0b
	.long	.LBB66
	.long	.LBE66
	.uleb128 0x2e
	.string	"other"
	.byte	0x1
	.value	0x6ad
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.byte	0x0
	.uleb128 0x30
	.long	0xad62
	.long	.LBB67
	.long	.LBE67
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x6b6
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.long	.LBB68
	.long	.LBE68
	.uleb128 0x31
	.long	.LASF68
	.byte	0x1
	.value	0x6bc
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"ok"
	.byte	0x1
	.value	0x6bd
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x31
	.long	.LASF69
	.byte	0x1
	.value	0x6be
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xade0
	.long	.LBB69
	.long	.LBE69
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0x6e8
	.long	0x527e
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0x6e8
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0x6e8
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0x6e8
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.long	.LBB70
	.long	.LBE70
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0x6e8
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB71
	.long	.LBE71
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0x6e8
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xae5c
	.long	.LBB72
	.long	.LBE72
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0x6ee
	.long	0x527e
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0x6ee
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0x6ee
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0x6ee
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB73
	.long	.LBE73
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0x6ee
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB74
	.long	.LBE74
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0x6ee
	.long	0x51e9
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xf02c
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16380
	.byte	0x0
	.uleb128 0x35
	.long	0xaf59
	.string	"find_reload_regs"
	.byte	0x1
	.value	0x707
	.byte	0x1
	.long	.LFB28
	.long	.LFE28
	.long	.LLST13
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x706
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x708
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.long	0xaecc
	.long	.LBB75
	.long	.LBE75
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x713
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x30
	.long	0xaee9
	.long	.LBB76
	.long	.LBE76
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x720
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x30
	.long	0xaf04
	.long	.LBB77
	.long	.LBE77
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x72d
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x30
	.long	0xaf30
	.long	.LBB78
	.long	.LBE78
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x73b
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x73b
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB79
	.long	.LBE79
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x73c
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x73c
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xaf91
	.string	"select_reload_regs"
	.byte	0x1
	.value	0x743
	.byte	0x1
	.long	.LFB29
	.long	.LFE29
	.long	.LLST14
	.uleb128 0x31
	.long	.LASF34
	.byte	0x1
	.value	0x744
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xaff5
	.string	"delete_caller_save_insns"
	.byte	0x1
	.value	0x750
	.byte	0x1
	.long	.LFB30
	.long	.LFE30
	.long	.LLST15
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0x751
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.long	.LBB80
	.long	.LBE80
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0x757
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x758
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xb065
	.string	"spill_failure"
	.byte	0x1
	.value	0x772
	.byte	0x1
	.long	.LFB31
	.long	.LFE31
	.long	.LLST16
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x770
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF21
	.byte	0x1
	.value	0x771
	.long	0x468
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"reg_class_names"
	.byte	0x1
	.value	0x773
	.long	0xf012
	.byte	0x5
	.byte	0x3
	.long	reg_class_names.16788
	.uleb128 0x34
	.long	.LASF59
	.long	0xf017
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16789
	.byte	0x0
	.uleb128 0x35
	.long	0xb0bf
	.string	"delete_dead_insn"
	.byte	0x1
	.value	0x785
	.byte	0x1
	.long	.LFB32
	.long	.LFE32
	.long	.LLST17
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x784
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF13
	.byte	0x1
	.value	0x786
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"prev_dest"
	.byte	0x1
	.value	0x787
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xb1a5
	.string	"alter_reg"
	.byte	0x1
	.value	0x7a3
	.byte	0x1
	.long	.LFB33
	.long	.LFE33
	.long	.LLST18
	.uleb128 0x33
	.string	"i"
	.byte	0x1
	.value	0x7a1
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"from_reg"
	.byte	0x1
	.value	0x7a2
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.long	.LBB81
	.long	.LBE81
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x7bb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"inherent_size"
	.byte	0x1
	.value	0x7bc
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"total_size"
	.byte	0x1
	.value	0x7bd
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"adjust"
	.byte	0x1
	.value	0x7be
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	0xb189
	.long	.LBB82
	.long	.LBE82
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x7e6
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"stack_slot"
	.byte	0x1
	.value	0x7e7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB83
	.long	.LBE83
	.uleb128 0x2e
	.string	"decl"
	.byte	0x1
	.value	0x81d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0xb1f6
	.byte	0x1
	.string	"mark_home_live"
	.byte	0x1
	.value	0x837
	.byte	0x1
	.long	.LFB34
	.long	.LFE34
	.long	.LLST19
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x836
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x838
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"lim"
	.byte	0x1
	.value	0x838
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xb287
	.string	"set_label_offsets"
	.byte	0x1
	.value	0x851
	.byte	0x1
	.long	.LFB35
	.long	.LFE35
	.long	.LLST20
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0x84e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x84f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"initial_p"
	.byte	0x1
	.value	0x850
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x852
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x853
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x854
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0x855
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x32
	.long	0xb473
	.byte	0x1
	.string	"eliminate_regs"
	.byte	0x1
	.value	0x8f7
	.byte	0x1
	.long	0x9c
	.long	.LFB36
	.long	.LFE36
	.long	.LLST21
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0x8f4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF60
	.byte	0x1
	.value	0x8f5
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x8f6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x8f8
	.long	0xe4d
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0x8f9
	.long	0xa4ab
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x8fa
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.string	"new"
	.byte	0x1
	.value	0x8fb
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x8fc
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x8fc
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x8fd
	.long	0x44e
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.string	"copied"
	.byte	0x1
	.value	0x8fe
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.long	0xb387
	.long	.LBB84
	.long	.LBE84
	.uleb128 0x2e
	.string	"new0"
	.byte	0x1
	.value	0x969
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"new1"
	.byte	0x1
	.value	0x96a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.uleb128 0x30
	.long	0xb3b5
	.long	.LBB85
	.long	.LBE85
	.uleb128 0x2e
	.string	"new0"
	.byte	0x1
	.value	0x9b2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"new1"
	.byte	0x1
	.value	0x9b3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x30
	.long	0xb3e9
	.long	.LBB86
	.long	.LBE86
	.uleb128 0x2e
	.string	"x_size"
	.byte	0x1
	.value	0xa03
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"new_size"
	.byte	0x1
	.value	0xa04
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x30
	.long	0xb408
	.long	.LBB87
	.long	.LBE87
	.uleb128 0x2e
	.string	"new_x"
	.byte	0x1
	.value	0xa46
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x30
	.long	0xb462
	.long	.LBB88
	.long	.LBE88
	.uleb128 0x2e
	.string	"copied_vec"
	.byte	0x1
	.value	0xa51
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB89
	.long	.LBE89
	.uleb128 0x2e
	.string	"new_v"
	.byte	0x1
	.value	0xa57
	.long	0x19b
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB90
	.long	.LBE90
	.uleb128 0x2e
	.string	"new_x"
	.byte	0x1
	.value	0xa5b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xeffd
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17452
	.byte	0x0
	.uleb128 0x35
	.long	0xb558
	.string	"elimination_effects"
	.byte	0x1
	.value	0xa77
	.byte	0x1
	.long	.LFB37
	.long	.LFE37
	.long	.LLST22
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0xa74
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF60
	.byte	0x1
	.value	0xa75
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0xa78
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xa79
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0xa7a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xa7b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0xa7b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0xa7c
	.long	0x44e
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	0xb52a
	.long	.LBB91
	.long	.LBE91
	.uleb128 0x31
	.long	.LASF9
	.byte	0x1
	.value	0xab1
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x30
	.long	0xb547
	.long	.LBB92
	.long	.LBE92
	.uleb128 0x2e
	.string	"src"
	.byte	0x1
	.value	0xb0b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xefe8
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18021
	.byte	0x0
	.uleb128 0x35
	.long	0xb5f6
	.string	"check_eliminable_occurrences"
	.byte	0x1
	.value	0xb39
	.byte	0x1
	.long	.LFB38
	.long	.LFE38
	.long	.LLST23
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0xb38
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0xb3a
	.long	0x44e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xb3b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0xb3c
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	0xb5de
	.long	.LBB93
	.long	.LBE93
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xb45
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB94
	.long	.LBE94
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0xb54
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xb853
	.string	"eliminate_regs_in_insn"
	.byte	0x1
	.value	0xb6c
	.byte	0x1
	.long	0x461
	.long	.LFB39
	.long	.LFE39
	.long	.LLST24
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0xb6a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"replace"
	.byte	0x1
	.value	0xb6b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"icode"
	.byte	0x1
	.value	0xb6d
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x31
	.long	.LASF64
	.byte	0x1
	.value	0xb6e
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.string	"insn_is_asm"
	.byte	0x1
	.value	0xb6f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"old_set"
	.byte	0x1
	.value	0xb70
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.string	"new_body"
	.byte	0x1
	.value	0xb71
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.string	"val"
	.byte	0x1
	.value	0xb72
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xb73
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.string	"any_changes"
	.byte	0x1
	.value	0xb73
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"substed_operand"
	.byte	0x1
	.value	0xb74
	.long	0x5c1a
	.byte	0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x2e
	.string	"orig_operand"
	.byte	0x1
	.value	0xb75
	.long	0x5c1a
	.byte	0x3
	.byte	0x91
	.sleb128 -336
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xb76
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x37
	.string	"done"
	.byte	0x1
	.value	0xcb3
	.long	.L1154
	.uleb128 0x30
	.long	0xb7bd
	.long	.LBB95
	.long	.LBE95
	.uleb128 0x2e
	.string	"base"
	.byte	0x1
	.value	0xb93
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"base_insn"
	.byte	0x1
	.value	0xb94
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x31
	.long	.LASF8
	.byte	0x1
	.value	0xb95
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.long	0xb7a3
	.long	.LBB96
	.long	.LBE96
	.uleb128 0x2e
	.string	"prev_insn"
	.byte	0x1
	.value	0xb99
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	.LASF70
	.byte	0x1
	.value	0xb99
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB97
	.long	.LBE97
	.uleb128 0x2e
	.string	"src"
	.byte	0x1
	.value	0xbae
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xb825
	.long	.LBB98
	.long	.LBE98
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0xbe7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF8
	.byte	0x1
	.value	0xbe8
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.long	.LBB99
	.long	.LBE99
	.uleb128 0x2e
	.string	"num_clobbers"
	.byte	0x1
	.value	0xbf1
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.long	.LBB100
	.long	.LBE100
	.uleb128 0x2e
	.string	"vec"
	.byte	0x1
	.value	0xbfd
	.long	0x19b
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xb842
	.long	.LBB101
	.long	.LBE101
	.uleb128 0x31
	.long	.LASF71
	.byte	0x1
	.value	0xc89
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xefe3
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18367
	.byte	0x0
	.uleb128 0x35
	.long	0xb891
	.string	"update_eliminable_offsets"
	.byte	0x1
	.value	0xcc7
	.byte	0x1
	.long	.LFB40
	.long	.LFE40
	.long	.LLST25
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xcc8
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.uleb128 0x35
	.long	0xb8f5
	.string	"mark_not_eliminable"
	.byte	0x1
	.value	0xce6
	.byte	0x1
	.long	.LFB41
	.long	.LFE41
	.long	.LLST26
	.uleb128 0x33
	.string	"dest"
	.byte	0x1
	.value	0xce3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0xce4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"data"
	.byte	0x1
	.value	0xce5
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xce7
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xb952
	.string	"verify_initial_elim_offsets"
	.byte	0x1
	.value	0xd06
	.byte	0x1
	.long	.LFB42
	.long	.LFE42
	.long	.LLST27
	.uleb128 0x2e
	.string	"t"
	.byte	0x1
	.value	0xd07
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xd0a
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x34
	.long	.LASF59
	.long	0xefde
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18899
	.byte	0x0
	.uleb128 0x35
	.long	0xb98f
	.string	"set_initial_elim_offsets"
	.byte	0x1
	.value	0xd1d
	.byte	0x1
	.long	.LFB43
	.long	.LFE43
	.long	.LLST28
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xd1e
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xb9cc
	.string	"set_initial_label_offsets"
	.byte	0x1
	.value	0xd37
	.byte	0x1
	.long	.LFB44
	.long	.LFE44
	.long	.LLST29
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0xd38
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x35
	.long	0xba36
	.string	"set_offsets_for_label"
	.byte	0x1
	.value	0xd46
	.byte	0x1
	.long	.LFB45
	.long	.LFE45
	.long	.LLST30
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0xd45
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xd47
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"label_nr"
	.byte	0x1
	.value	0xd48
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xd49
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.uleb128 0x35
	.long	0xbad0
	.string	"update_eliminables"
	.byte	0x1
	.value	0xd5e
	.byte	0x1
	.long	.LFB46
	.long	.LFE46
	.long	.LLST31
	.uleb128 0x33
	.string	"pset"
	.byte	0x1
	.value	0xd5d
	.long	0x9fa2
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"previous_frame_pointer_needed"
	.byte	0x1
	.value	0xd5f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xd60
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB102
	.long	.LBE102
	.uleb128 0x2e
	.string	"op"
	.byte	0x1
	.value	0xd73
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"new_to"
	.byte	0x1
	.value	0xd74
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xbb13
	.string	"init_elim_table"
	.byte	0x1
	.value	0xdaa
	.byte	0x1
	.long	.LFB47
	.long	.LFE47
	.long	.LLST32
	.uleb128 0x2e
	.string	"ep"
	.byte	0x1
	.value	0xdab
	.long	0xa4ab
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"ep1"
	.byte	0x1
	.value	0xdad
	.long	0xbb13
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xbb19
	.uleb128 0xd
	.long	0x9d10
	.uleb128 0x35
	.long	0xbb79
	.string	"spill_hard_reg"
	.byte	0x1
	.value	0xdef
	.byte	0x1
	.long	.LFB48
	.long	.LFE48
	.long	.LLST33
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0xded
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"cant_eliminate"
	.byte	0x1
	.value	0xdee
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xdf0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x35
	.long	0xbbe8
	.string	"ior_hard_reg_set"
	.byte	0x1
	.value	0xe0b
	.byte	0x1
	.long	.LFB49
	.long	.LFE49
	.long	.LLST34
	.uleb128 0x33
	.string	"set1"
	.byte	0x1
	.value	0xe0a
	.long	0x9fa2
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"set2"
	.byte	0x1
	.value	0xe0a
	.long	0x9fa2
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.long	.LBB103
	.long	.LBE103
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe0c
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe0c
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xc002
	.string	"finish_spills"
	.byte	0x1
	.value	0xe17
	.byte	0x1
	.long	0x461
	.long	.LFB50
	.long	.LFE50
	.long	.LLST35
	.uleb128 0x36
	.long	.LASF61
	.byte	0x1
	.value	0xe16
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF34
	.byte	0x1
	.value	0xe18
	.long	0x5b07
	.byte	0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x31
	.long	.LASF63
	.byte	0x1
	.value	0xe19
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xe1a
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x37
	.string	"ok"
	.byte	0x1
	.value	0xe8c
	.long	.L1511
	.uleb128 0x30
	.long	0xbcd9
	.long	.LBB104
	.long	.LBE104
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0xe35
	.long	0x527e
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0xe35
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0xe35
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0xe35
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2f
	.long	.LBB105
	.long	.LBE105
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0xe35
	.long	0x51e9
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2f
	.long	.LBB106
	.long	.LBE106
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0xe35
	.long	0x51e9
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xbd5b
	.long	.LBB107
	.long	.LBE107
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0xe4e
	.long	0x527e
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0xe4e
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0xe4e
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0xe4e
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2f
	.long	.LBB108
	.long	.LBE108
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0xe4e
	.long	0x51e9
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2f
	.long	.LBB109
	.long	.LBE109
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0xe4e
	.long	0x51e9
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xbddd
	.long	.LBB110
	.long	.LBE110
	.uleb128 0x31
	.long	.LASF53
	.byte	0x1
	.value	0xe54
	.long	0x527e
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x31
	.long	.LASF54
	.byte	0x1
	.value	0xe54
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x31
	.long	.LASF55
	.byte	0x1
	.value	0xe54
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x31
	.long	.LASF56
	.byte	0x1
	.value	0xe54
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.long	.LBB111
	.long	.LBE111
	.uleb128 0x31
	.long	.LASF57
	.byte	0x1
	.value	0xe54
	.long	0x51e9
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2f
	.long	.LBB112
	.long	.LBE112
	.uleb128 0x31
	.long	.LASF58
	.byte	0x1
	.value	0xe54
	.long	0x51e9
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xbe87
	.long	.LBB113
	.long	.LBE113
	.uleb128 0x2e
	.string	"forbidden"
	.byte	0x1
	.value	0xe64
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x30
	.long	0xbe2e
	.long	.LBB114
	.long	.LBE114
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe65
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe65
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.byte	0x0
	.uleb128 0x30
	.long	0xbe5c
	.long	.LBB115
	.long	.LBE115
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe66
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe66
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB116
	.long	.LBE116
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe67
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe67
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xbfd4
	.long	.LBB117
	.long	.LBE117
	.uleb128 0x31
	.long	.LASF65
	.byte	0x1
	.value	0xe73
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x31
	.long	.LASF66
	.byte	0x1
	.value	0xe74
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x30
	.long	0xbed2
	.long	.LBB118
	.long	.LBE118
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe7d
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.byte	0x0
	.uleb128 0x30
	.long	0xbef0
	.long	.LBB119
	.long	.LBE119
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe7e
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.uleb128 0x30
	.long	0xbf1d
	.long	.LBB120
	.long	.LBE120
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe7f
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe7f
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.byte	0x0
	.uleb128 0x30
	.long	0xbf49
	.long	.LBB121
	.long	.LBE121
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe82
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe82
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.uleb128 0x30
	.long	0xbf75
	.long	.LBB122
	.long	.LBE122
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe86
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe86
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x30
	.long	0xbfa1
	.long	.LBB123
	.long	.LBE123
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xe87
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xe87
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB124
	.long	.LBE124
	.uleb128 0x2e
	.string	"scan_xp_"
	.byte	0x1
	.value	0xe8a
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"scan_yp_"
	.byte	0x1
	.value	0xe8a
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xbff1
	.long	.LBB125
	.long	.LBE125
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0xe93
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xefc9
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.19332
	.byte	0x0
	.uleb128 0x35
	.long	0xc080
	.string	"scan_paradoxical_subregs"
	.byte	0x1
	.value	0xead
	.byte	0x1
	.long	.LFB51
	.long	.LFE51
	.long	.LLST36
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0xeac
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0xeae
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0xeaf
	.long	0x44e
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0xeb0
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.long	.LBB126
	.long	.LBE126
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0xeda
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xc1dd
	.string	"reload_as_needed"
	.byte	0x1
	.value	0xeed
	.byte	0x1
	.long	.LFB52
	.long	.LFE52
	.long	.LLST37
	.uleb128 0x33
	.string	"live_known"
	.byte	0x1
	.value	0xeec
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF34
	.byte	0x1
	.value	0xeee
	.long	0x5b07
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0xef2
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.long	0xc0f8
	.long	.LBB127
	.long	.LBE127
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xef8
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB128
	.long	.LBE128
	.uleb128 0x31
	.long	.LASF13
	.byte	0x1
	.value	0xefe
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0xeff
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"old_next"
	.byte	0x1
	.value	0xf00
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.long	0xc196
	.long	.LBB129
	.long	.LBE129
	.uleb128 0x2e
	.string	"oldpat"
	.byte	0x1
	.value	0xf09
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.long	0xc16f
	.long	.LBB130
	.long	.LBE130
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xf33
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB131
	.long	.LBE131
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0xf3b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0xf3c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xc1b3
	.long	.LBB132
	.long	.LBE132
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xfed
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB133
	.long	.LBE133
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0xff2
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0xff2
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xc26c
	.string	"forget_old_reloads_1"
	.byte	0x1
	.value	0x1006
	.byte	0x1
	.long	.LFB53
	.long	.LFE53
	.long	.LLST38
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0x1003
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"ignored"
	.byte	0x1
	.value	0x1004
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"data"
	.byte	0x1
	.value	0x1005
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x1007
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x1008
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB134
	.long	.LBE134
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x101d
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xc2f1
	.string	"mark_reload_reg_in_use"
	.byte	0x1
	.value	0x106a
	.byte	0x1
	.long	.LFB54
	.long	.LFE54
	.long	.LLST39
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x1066
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x1067
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x1068
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x1069
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x106b
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x106c
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x35
	.long	0xc43b
	.string	"clear_reload_reg_in_use"
	.byte	0x1
	.value	0x10ab
	.byte	0x1
	.long	.LFB55
	.long	.LFE55
	.long	.LLST40
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x10a7
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x10a8
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x10a9
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x10aa
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x10ac
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF72
	.byte	0x1
	.value	0x10ad
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"end_regno"
	.byte	0x1
	.value	0x10ad
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x10ad
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x10ae
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"check_opnum"
	.byte	0x1
	.value	0x10b3
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"check_any"
	.byte	0x1
	.value	0x10b4
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"used_in_set"
	.byte	0x1
	.value	0x10b5
	.long	0x9fa2
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	0xc42a
	.long	.LBB135
	.long	.LBE135
	.uleb128 0x2e
	.string	"conflict_start"
	.byte	0x1
	.value	0x10fd
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"conflict_end"
	.byte	0x1
	.value	0x10fe
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xefc4
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.20269
	.byte	0x0
	.uleb128 0x39
	.long	0xc4b1
	.string	"reload_reg_free_p"
	.byte	0x1
	.value	0x111a
	.byte	0x1
	.long	0x461
	.long	.LFB56
	.long	.LFE56
	.long	.LLST41
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x1117
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x1118
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x1119
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x111b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF59
	.long	0xefbf
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.20391
	.byte	0x0
	.uleb128 0x39
	.long	0xc52e
	.string	"reload_reg_reaches_end_p"
	.byte	0x1
	.value	0x11c0
	.byte	0x1
	.long	0x461
	.long	.LFB57
	.long	.LFE57
	.long	.LLST42
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x11bd
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x11be
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x11bf
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x11c1
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF59
	.long	0xefaa
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.20814
	.byte	0x0
	.uleb128 0x32
	.long	0xc5d4
	.byte	0x1
	.string	"reloads_conflict"
	.byte	0x1
	.value	0x1243
	.byte	0x1
	.long	0x461
	.long	.LFB58
	.long	.LFE58
	.long	.LLST43
	.uleb128 0x33
	.string	"r1"
	.byte	0x1
	.value	0x1242
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"r2"
	.byte	0x1
	.value	0x1242
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"r1_type"
	.byte	0x1
	.value	0x1244
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"r2_type"
	.byte	0x1
	.value	0x1245
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"r1_opnum"
	.byte	0x1
	.value	0x1246
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"r2_opnum"
	.byte	0x1
	.value	0x1247
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x34
	.long	.LASF59
	.long	0xefa5
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.21157
	.byte	0x0
	.uleb128 0x39
	.long	0xc723
	.string	"reload_reg_free_for_value_p"
	.byte	0x1
	.value	0x12a5
	.byte	0x1
	.long	0x461
	.long	.LFB59
	.long	.LFE59
	.long	.LLST44
	.uleb128 0x36
	.long	.LASF72
	.byte	0x1
	.value	0x129f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x129f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x12a0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x12a1
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x36
	.long	.LASF10
	.byte	0x1
	.value	0x12a2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x33
	.string	"out"
	.byte	0x1
	.value	0x12a2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.long	.LASF73
	.byte	0x1
	.value	0x12a3
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x36
	.long	.LASF74
	.byte	0x1
	.value	0x12a4
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x2e
	.string	"time1"
	.byte	0x1
	.value	0x12a6
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"check_earlyclobber"
	.byte	0x1
	.value	0x12aa
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x12ab
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"copy"
	.byte	0x1
	.value	0x12ac
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB136
	.long	.LBE136
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x12f6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.long	.LBB137
	.long	.LBE137
	.uleb128 0x2e
	.string	"other_input"
	.byte	0x1
	.value	0x12fc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.long	.LBB138
	.long	.LBE138
	.uleb128 0x2e
	.string	"time2"
	.byte	0x1
	.value	0x1306
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xc7d5
	.string	"free_for_value_p"
	.byte	0x1
	.value	0x139a
	.byte	0x1
	.long	0x461
	.long	.LFB60
	.long	.LFE60
	.long	.LLST45
	.uleb128 0x36
	.long	.LASF23
	.byte	0x1
	.value	0x1393
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x1394
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x1395
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x1396
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x36
	.long	.LASF10
	.byte	0x1
	.value	0x1397
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x33
	.string	"out"
	.byte	0x1
	.value	0x1397
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.long	.LASF73
	.byte	0x1
	.value	0x1398
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x36
	.long	.LASF74
	.byte	0x1
	.value	0x1399
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x139b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x39
	.long	0xc821
	.string	"conflicts_with_override"
	.byte	0x1
	.value	0x13aa
	.byte	0x1
	.long	0x461
	.long	.LFB61
	.long	.LFE61
	.long	.LLST46
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0x13a9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x13ab
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xc871
	.string	"failed_reload"
	.byte	0x1
	.value	0x13b9
	.byte	0x1
	.long	.LFB62
	.long	.LFE62
	.long	.LLST47
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x13b7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"r"
	.byte	0x1
	.value	0x13b8
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x34
	.long	.LASF59
	.long	0xefa0
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.21488
	.byte	0x0
	.uleb128 0x39
	.long	0xc8f1
	.string	"set_reload_reg"
	.byte	0x1
	.value	0x13cf
	.byte	0x1
	.long	0x461
	.long	.LFB63
	.long	.LFE63
	.long	.LLST48
	.uleb128 0x33
	.string	"i"
	.byte	0x1
	.value	0x13ce
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"r"
	.byte	0x1
	.value	0x13ce
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x13d0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x13d1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.long	.LBB139
	.long	.LBE139
	.uleb128 0x2e
	.string	"test_mode"
	.byte	0x1
	.value	0x13dd
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xc9f1
	.string	"allocate_reload_reg"
	.byte	0x1
	.value	0x1409
	.byte	0x1
	.long	0x461
	.long	.LFB64
	.long	.LFE64
	.long	.LLST49
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x1406
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"r"
	.byte	0x1
	.value	0x1407
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"last_reload"
	.byte	0x1
	.value	0x1408
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x140a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"pass"
	.byte	0x1
	.value	0x140a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	.LASF12
	.byte	0x1
	.value	0x140a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"force_group"
	.byte	0x1
	.value	0x1419
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LBB140
	.long	.LBE140
	.uleb128 0x31
	.long	.LASF21
	.byte	0x1
	.value	0x1432
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"regnum"
	.byte	0x1
	.value	0x1433
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB141
	.long	.LBE141
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x144e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.long	.LBB142
	.long	.LBE142
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x1460
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xccc1
	.string	"choose_reload_regs_init"
	.byte	0x1
	.value	0x1484
	.byte	0x1
	.long	.LFB65
	.long	.LFE65
	.long	.LLST50
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x1482
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF75
	.byte	0x1
	.value	0x1483
	.long	0x1ac8
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1485
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x30
	.long	0xca68
	.long	.LBB143
	.long	.LBE143
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x148e
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.byte	0x0
	.uleb128 0x30
	.long	0xca86
	.long	.LBB144
	.long	.LBE144
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x148f
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.byte	0x0
	.uleb128 0x30
	.long	0xcaa4
	.long	.LBB145
	.long	.LBE145
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1490
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.uleb128 0x30
	.long	0xcac2
	.long	.LBB146
	.long	.LBE146
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1491
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.byte	0x0
	.uleb128 0x30
	.long	0xcae0
	.long	.LBB147
	.long	.LBE147
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1492
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.byte	0x0
	.uleb128 0x30
	.long	0xcafe
	.long	.LBB148
	.long	.LBE148
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1493
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.byte	0x0
	.uleb128 0x30
	.long	0xcb1c
	.long	.LBB149
	.long	.LBE149
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1495
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.uleb128 0x30
	.long	0xcbcd
	.long	.LBB150
	.long	.LBE150
	.uleb128 0x2e
	.string	"tmp"
	.byte	0x1
	.value	0x1497
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x30
	.long	0xcb57
	.long	.LBB151
	.long	.LBE151
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1498
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.byte	0x0
	.uleb128 0x30
	.long	0xcb85
	.long	.LBB152
	.long	.LBE152
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1499
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x1499
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.byte	0x0
	.uleb128 0x30
	.long	0xcba3
	.long	.LBB153
	.long	.LBE153
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x149a
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB154
	.long	.LBE154
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x149b
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x149b
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xcbea
	.long	.LBB155
	.long	.LBE155
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14a2
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.uleb128 0x30
	.long	0xcc07
	.long	.LBB156
	.long	.LBE156
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14a3
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.uleb128 0x30
	.long	0xcc24
	.long	.LBB157
	.long	.LBE157
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14a4
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x30
	.long	0xcc41
	.long	.LBB158
	.long	.LBE158
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14a5
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x30
	.long	0xcc5e
	.long	.LBB159
	.long	.LBE159
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14a6
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x30
	.long	0xcc7b
	.long	.LBB160
	.long	.LBE160
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14a7
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x30
	.long	0xcca7
	.long	.LBB161
	.long	.LBE161
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14aa
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x14aa
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB162
	.long	.LBE162
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x14ac
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xd00b
	.string	"choose_reload_regs"
	.byte	0x1
	.value	0x14c0
	.byte	0x1
	.long	.LFB66
	.long	.LFE66
	.long	.LLST51
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x14bf
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x14c1
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x14c2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x14c2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.string	"max_group_size"
	.byte	0x1
	.value	0x14c3
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2e
	.string	"group_class"
	.byte	0x1
	.value	0x14c4
	.long	0x468
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.string	"pass"
	.byte	0x1
	.value	0x14c5
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2e
	.string	"win"
	.byte	0x1
	.value	0x14c5
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2e
	.string	"inheritance"
	.byte	0x1
	.value	0x14c5
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x31
	.long	.LASF75
	.byte	0x1
	.value	0x14c7
	.long	0xd00b
	.byte	0x3
	.byte	0x91
	.sleb128 -640
	.uleb128 0x30
	.long	0xcf50
	.long	.LBB163
	.long	.LBE163
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x1502
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2e
	.string	"search_equiv"
	.byte	0x1
	.value	0x1503
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x30
	.long	0xcee1
	.long	.LBB164
	.long	.LBE164
	.uleb128 0x2e
	.string	"byte"
	.byte	0x1
	.value	0x1536
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x1537
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x1538
	.long	0xb18
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.long	.LBB165
	.long	.LBE165
	.uleb128 0x31
	.long	.LASF21
	.byte	0x1
	.value	0x1566
	.long	0x468
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2e
	.string	"last_class"
	.byte	0x1
	.value	0x1566
	.long	0x468
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.string	"last_reg"
	.byte	0x1
	.value	0x1567
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.string	"need_mode"
	.byte	0x1
	.value	0x1568
	.long	0xb18
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.long	.LBB166
	.long	.LBE166
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x159e
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x159f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.long	.LBB167
	.long	.LBE167
	.uleb128 0x2e
	.string	"i1"
	.byte	0x1
	.value	0x15a8
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"bad_for_class"
	.byte	0x1
	.value	0x15a9
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.long	.LBB168
	.long	.LBE168
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x15e2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xceff
	.long	.LBB169
	.long	.LBE169
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1608
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB170
	.long	.LBE170
	.uleb128 0x2e
	.string	"equiv"
	.byte	0x1
	.value	0x1612
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x1615
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.long	.LBB171
	.long	.LBE171
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x167a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x167b
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xcf6b
	.long	.LBB172
	.long	.LBE172
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x16c3
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x30
	.long	0xcf9b
	.long	.LBB173
	.long	.LBE173
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x1700
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"check_reg"
	.byte	0x1
	.value	0x1701
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x30
	.long	0xcfb8
	.long	.LBB174
	.long	.LBE174
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x1737
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x30
	.long	0xcffa
	.long	.LBB175
	.long	.LBE175
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x1743
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB176
	.long	.LBE176
	.uleb128 0x31
	.long	.LASF76
	.byte	0x1
	.value	0x174d
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x174e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef8b
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.21927
	.byte	0x0
	.uleb128 0x13
	.long	0xd01b
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x77
	.byte	0x0
	.uleb128 0x2d
	.long	0xd064
	.byte	0x1
	.string	"deallocate_reload_reg"
	.byte	0x1
	.value	0x176b
	.byte	0x1
	.long	.LFB67
	.long	.LFE67
	.long	.LLST52
	.uleb128 0x33
	.string	"r"
	.byte	0x1
	.value	0x176a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x176c
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x35
	.long	0xd156
	.string	"merge_assigned_reloads"
	.byte	0x1
	.value	0x1788
	.byte	0x1
	.long	.LFB68
	.long	.LFE68
	.long	.LLST53
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x1787
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1789
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x1789
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	0xd145
	.long	.LBB177
	.long	.LBE177
	.uleb128 0x2e
	.string	"conflicting_input"
	.byte	0x1
	.value	0x1791
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"max_input_address_opnum"
	.byte	0x1
	.value	0x1792
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"min_conflicting_input_opnum"
	.byte	0x1
	.value	0x1793
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.long	.LBB178
	.long	.LBE178
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x17e7
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef76
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.22953
	.byte	0x0
	.uleb128 0x35
	.long	0xd3cd
	.string	"emit_input_reload_insns"
	.byte	0x1
	.value	0x1818
	.byte	0x1
	.long	.LFB69
	.long	.LFE69
	.long	.LLST54
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x1814
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"rl"
	.byte	0x1
	.value	0x1815
	.long	0x5b0d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"old"
	.byte	0x1
	.value	0x1816
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x33
	.string	"j"
	.byte	0x1
	.value	0x1817
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1819
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x31
	.long	.LASF77
	.byte	0x1
	.value	0x181a
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.string	"oldequiv_reg"
	.byte	0x1
	.value	0x181b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.string	"oldequiv"
	.byte	0x1
	.value	0x181c
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"special"
	.byte	0x1
	.value	0x181d
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x181e
	.long	0xb18
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.string	"where"
	.byte	0x1
	.value	0x181f
	.long	0x1ac8
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x30
	.long	0xd25e
	.long	.LBB179
	.long	.LBE179
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x1865
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x30
	.long	0xd297
	.long	.LBB180
	.long	.LBE180
	.uleb128 0x2e
	.string	"temp"
	.byte	0x1
	.value	0x1903
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.long	.LBB181
	.long	.LBE181
	.uleb128 0x2e
	.string	"old"
	.byte	0x1
	.value	0x1910
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xd39f
	.long	.LBB182
	.long	.LBE182
	.uleb128 0x2e
	.string	"second_reload_reg"
	.byte	0x1
	.value	0x1944
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF78
	.byte	0x1
	.value	0x1945
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF79
	.byte	0x1
	.value	0x1946
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x31
	.long	.LASF80
	.byte	0x1
	.value	0x1947
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"tmp"
	.byte	0x1
	.value	0x1948
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"icode"
	.byte	0x1
	.value	0x1949
	.long	0x2a41
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.long	0xd35f
	.long	.LBB183
	.long	.LBE183
	.uleb128 0x2e
	.string	"new_class"
	.byte	0x1
	.value	0x197e
	.long	0x468
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.long	.LBB184
	.long	.LBE184
	.uleb128 0x31
	.long	.LASF71
	.byte	0x1
	.value	0x1986
	.long	0x2a41
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"new_mode"
	.byte	0x1
	.value	0x1987
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB185
	.long	.LBE185
	.uleb128 0x31
	.long	.LASF81
	.byte	0x1
	.value	0x19be
	.long	0x2a41
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB186
	.long	.LBE186
	.uleb128 0x2e
	.string	"third_reload_reg"
	.byte	0x1
	.value	0x19c3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xd3bc
	.long	.LBB187
	.long	.LBE187
	.uleb128 0x31
	.long	.LASF79
	.byte	0x1
	.value	0x19d7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef61
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.23183
	.byte	0x0
	.uleb128 0x35
	.long	0xd5eb
	.string	"emit_output_reload_insns"
	.byte	0x1
	.value	0x1a02
	.byte	0x1
	.long	.LFB70
	.long	.LFE70
	.long	.LLST55
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x19ff
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"rl"
	.byte	0x1
	.value	0x1a00
	.long	0x5b0d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"j"
	.byte	0x1
	.value	0x1a01
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF77
	.byte	0x1
	.value	0x1a03
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1a04
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"special"
	.byte	0x1
	.value	0x1a05
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2e
	.string	"old"
	.byte	0x1
	.value	0x1a06
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x1a07
	.long	0xb18
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0x1a08
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.long	0xd529
	.long	.LBB188
	.long	.LBE188
	.uleb128 0x31
	.long	.LASF80
	.byte	0x1
	.value	0x1a29
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.long	.LBB189
	.long	.LBE189
	.uleb128 0x2e
	.string	"second_reloadreg"
	.byte	0x1
	.value	0x1a33
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.long	.LBB190
	.long	.LBE190
	.uleb128 0x31
	.long	.LASF78
	.byte	0x1
	.value	0x1a43
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF81
	.byte	0x1
	.value	0x1a44
	.long	0x2a41
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.long	.LBB191
	.long	.LBE191
	.uleb128 0x2e
	.string	"third_reloadreg"
	.byte	0x1
	.value	0x1a4c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1a4e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xd546
	.long	.LBB192
	.long	.LBE192
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1a74
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x30
	.long	0xd5da
	.long	.LBB193
	.long	.LBE193
	.uleb128 0x2e
	.string	"pat"
	.byte	0x1
	.value	0x1a86
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.long	.LBB194
	.long	.LBE194
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1a90
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	0xd597
	.long	.LBB195
	.long	.LBE195
	.uleb128 0x2e
	.string	"src"
	.byte	0x1
	.value	0x1a95
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB196
	.long	.LBE196
	.uleb128 0x2e
	.string	"s"
	.byte	0x1
	.value	0x1a9e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB197
	.long	.LBE197
	.uleb128 0x2e
	.string	"s_reg"
	.byte	0x1
	.value	0x1ab0
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0x1ab1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef5c
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.23803
	.byte	0x0
	.uleb128 0x35
	.long	0xd677
	.string	"do_input_reload"
	.byte	0x1
	.value	0x1ad8
	.byte	0x1
	.long	.LFB71
	.long	.LFE71
	.long	.LLST56
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x1ad5
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"rl"
	.byte	0x1
	.value	0x1ad6
	.long	0x5b0d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"j"
	.byte	0x1
	.value	0x1ad7
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"expect_occurrences"
	.byte	0x1
	.value	0x1ad9
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1ada
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"old"
	.byte	0x1
	.value	0x1adb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x35
	.long	0xd74a
	.string	"do_output_reload"
	.byte	0x1
	.value	0x1b17
	.byte	0x1
	.long	.LFB72
	.long	.LFE72
	.long	.LLST57
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x1b14
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"rl"
	.byte	0x1
	.value	0x1b15
	.long	0x5b0d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"j"
	.byte	0x1
	.value	0x1b16
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"note"
	.byte	0x1
	.value	0x1b18
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"old"
	.byte	0x1
	.value	0x1b18
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1b19
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"pseudo"
	.byte	0x1
	.value	0x1b1d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	0xd739
	.long	.LBB198
	.long	.LBE198
	.uleb128 0x2e
	.string	"pseudo_no"
	.byte	0x1
	.value	0x1b26
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x31
	.long	.LASF82
	.byte	0x1
	.value	0x1b27
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef47
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.24233
	.byte	0x0
	.uleb128 0x35
	.long	0xda34
	.string	"emit_reload_insns"
	.byte	0x1
	.value	0x1b5d
	.byte	0x1
	.long	.LFB73
	.long	.LFE73
	.long	.LLST58
	.uleb128 0x36
	.long	.LASF34
	.byte	0x1
	.value	0x1b5c
	.long	0x5b07
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1b5e
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x1b60
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x30
	.long	0xd7bc
	.long	.LBB199
	.long	.LBE199
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1b62
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.byte	0x0
	.uleb128 0x30
	.long	0xd7d8
	.long	.LBB200
	.long	.LBE200
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x1bac
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.byte	0x0
	.uleb128 0x30
	.long	0xda0b
	.long	.LBB201
	.long	.LBE201
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x1bbb
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1bbc
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x30
	.long	0xd853
	.long	.LBB202
	.long	.LBE202
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x1bc5
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2f
	.long	.LBB203
	.long	.LBE203
	.uleb128 0x31
	.long	.LASF76
	.byte	0x1
	.value	0x1bce
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2f
	.long	.LBB204
	.long	.LBE204
	.uleb128 0x31
	.long	.LASF82
	.byte	0x1
	.value	0x1bd2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xd91f
	.long	.LBB205
	.long	.LBE205
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x1be0
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x1be1
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.string	"part_reaches_end"
	.byte	0x1
	.value	0x1be2
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.string	"all_reaches_end"
	.byte	0x1
	.value	0x1be3
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.long	0xd8f4
	.long	.LBB206
	.long	.LBE206
	.uleb128 0x2e
	.string	"out"
	.byte	0x1
	.value	0x1c02
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x31
	.long	.LASF76
	.byte	0x1
	.value	0x1c07
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2e
	.string	"nnr"
	.byte	0x1
	.value	0x1c08
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB207
	.long	.LBE207
	.uleb128 0x31
	.long	.LASF76
	.byte	0x1
	.value	0x1c36
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.string	"nnr"
	.byte	0x1
	.value	0x1c37
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB208
	.long	.LBE208
	.uleb128 0x2e
	.string	"out"
	.byte	0x1
	.value	0x1c7c
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x31
	.long	.LASF76
	.byte	0x1
	.value	0x1c7e
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.long	0xd9f0
	.long	.LBB209
	.long	.LBE209
	.uleb128 0x2e
	.string	"src_reg"
	.byte	0x1
	.value	0x1c81
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"store_insn"
	.byte	0x1
	.value	0x1c81
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.long	0xd9b2
	.long	.LBB210
	.long	.LBE210
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1c8e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB211
	.long	.LBE211
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x1c91
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB212
	.long	.LBE212
	.uleb128 0x2e
	.string	"src_regno"
	.byte	0x1
	.value	0x1ca4
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"nr"
	.byte	0x1
	.value	0x1ca5
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"note"
	.byte	0x1
	.value	0x1caa
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB213
	.long	.LBE213
	.uleb128 0x31
	.long	.LASF83
	.byte	0x1
	.value	0x1cc0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB214
	.long	.LBE214
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x1cc7
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x1cc7
	.long	0xa4b1
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.long	0xdb09
	.byte	0x1
	.string	"gen_reload"
	.byte	0x1
	.value	0x1cd6
	.byte	0x1
	.long	0x9c
	.long	.LFB74
	.long	.LFE74
	.long	.LLST59
	.uleb128 0x33
	.string	"out"
	.byte	0x1
	.value	0x1cd2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"in"
	.byte	0x1
	.value	0x1cd3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF24
	.byte	0x1
	.value	0x1cd4
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.long	.LASF3
	.byte	0x1
	.value	0x1cd5
	.long	0x568a
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2e
	.string	"last"
	.byte	0x1
	.value	0x1cd7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1cd8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.long	.LBB215
	.long	.LBE215
	.uleb128 0x2e
	.string	"op0"
	.byte	0x1
	.value	0x1d17
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"op1"
	.byte	0x1
	.value	0x1d17
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"tem"
	.byte	0x1
	.value	0x1d17
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1d17
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x1d18
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xdc62
	.string	"delete_output_reload"
	.byte	0x1
	.value	0x1db5
	.byte	0x1
	.long	.LFB75
	.long	.LFE75
	.long	.LLST60
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x1db2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"j"
	.byte	0x1
	.value	0x1db3
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"last_reload_reg"
	.byte	0x1
	.value	0x1db4
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.string	"output_reload_insn"
	.byte	0x1
	.value	0x1db6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x1db7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"k"
	.byte	0x1
	.value	0x1db8
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"n_occurrences"
	.byte	0x1
	.value	0x1db9
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"n_inherited"
	.byte	0x1
	.value	0x1dba
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"i1"
	.byte	0x1
	.value	0x1dbb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"substed"
	.byte	0x1
	.value	0x1dbc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	0xdc13
	.long	.LBB216
	.long	.LBE216
	.uleb128 0x2e
	.string	"reg2"
	.byte	0x1
	.value	0x1dcd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB217
	.long	.LBE217
	.uleb128 0x2e
	.string	"i2"
	.byte	0x1
	.value	0x1e20
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	0xdc47
	.long	.LBB218
	.long	.LBE218
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1e28
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB219
	.long	.LBE219
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1e40
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xdd12
	.string	"delete_address_reloads"
	.byte	0x1
	.value	0x1e5d
	.byte	0x1
	.long	.LFB76
	.long	.LFE76
	.long	.LLST61
	.uleb128 0x36
	.long	.LASF84
	.byte	0x1
	.value	0x1e5c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF85
	.byte	0x1
	.value	0x1e5c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1e5e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"set2"
	.byte	0x1
	.value	0x1e5f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"dst"
	.byte	0x1
	.value	0x1e5f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	.LASF13
	.byte	0x1
	.value	0x1e5f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0x1e5f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.long	.LBB220
	.long	.LBE220
	.uleb128 0x2e
	.string	"dst"
	.byte	0x1
	.value	0x1e62
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xdde9
	.string	"delete_address_reloads_1"
	.byte	0x1
	.value	0x1e82
	.byte	0x1
	.long	.LFB77
	.long	.LFE77
	.long	.LLST62
	.uleb128 0x36
	.long	.LASF84
	.byte	0x1
	.value	0x1e81
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0x1e81
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF85
	.byte	0x1
	.value	0x1e81
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF13
	.byte	0x1
	.value	0x1e83
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x1e83
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"dst"
	.byte	0x1
	.value	0x1e83
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"i2"
	.byte	0x1
	.value	0x1e83
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1e84
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x1e84
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x1e85
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.long	.LBB221
	.long	.LBE221
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x1e89
	.long	0x44e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xdedc
	.string	"inc_for_reload"
	.byte	0x1
	.value	0x1efb
	.byte	0x1
	.long	0x9c
	.long	.LFB78
	.long	.LFE78
	.long	.LLST63
	.uleb128 0x36
	.long	.LASF77
	.byte	0x1
	.value	0x1ef8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"in"
	.byte	0x1
	.value	0x1ef9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.long	.LASF10
	.byte	0x1
	.value	0x1ef9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x33
	.string	"inc_amount"
	.byte	0x1
	.value	0x1efa
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2e
	.string	"incloc"
	.byte	0x1
	.value	0x1efd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"post"
	.byte	0x1
	.value	0x1eff
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"last"
	.byte	0x1
	.value	0x1f00
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"inc"
	.byte	0x1
	.value	0x1f01
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2e
	.string	"add_insn"
	.byte	0x1
	.value	0x1f02
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x1f03
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2e
	.string	"store"
	.byte	0x1
	.value	0x1f04
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2e
	.string	"real_in"
	.byte	0x1
	.value	0x1f05
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x39
	.long	0xdf1b
	.string	"reload_cse_noop_set_p"
	.byte	0x1
	.value	0x1f58
	.byte	0x1
	.long	0x461
	.long	.LFB79
	.long	.LFE79
	.long	.LLST64
	.uleb128 0x33
	.string	"set"
	.byte	0x1
	.value	0x1f57
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x35
	.long	0xdff8
	.string	"reload_cse_simplify"
	.byte	0x1
	.value	0x1f61
	.byte	0x1
	.long	.LFB80
	.long	.LFE80
	.long	.LLST65
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x1f5f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF86
	.byte	0x1
	.value	0x1f60
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"body"
	.byte	0x1
	.value	0x1f62
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	0xdfa8
	.long	.LBB222
	.long	.LBE222
	.uleb128 0x31
	.long	.LASF12
	.byte	0x1
	.value	0x1f66
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.long	.LBB223
	.long	.LBE223
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x1f71
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB224
	.long	.LBE224
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x1f80
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	.LASF12
	.byte	0x1
	.value	0x1f81
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF10
	.byte	0x1
	.value	0x1f82
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.long	.LBB225
	.long	.LBE225
	.uleb128 0x2e
	.string	"part"
	.byte	0x1
	.value	0x1f88
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xe04d
	.string	"reload_cse_regs_1"
	.byte	0x1
	.value	0x1fc0
	.byte	0x1
	.long	.LFB81
	.long	.LFE81
	.long	.LLST66
	.uleb128 0x36
	.long	.LASF11
	.byte	0x1
	.value	0x1fbf
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x1fc1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x31
	.long	.LASF86
	.byte	0x1
	.value	0x1fc2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2d
	.long	0xe083
	.byte	0x1
	.string	"reload_cse_regs"
	.byte	0x1
	.value	0x1fd9
	.byte	0x1
	.long	.LFB82
	.long	.LFE82
	.long	.LLST67
	.uleb128 0x36
	.long	.LASF11
	.byte	0x1
	.value	0x1fd8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x39
	.long	0xe1e3
	.string	"reload_cse_simplify_set"
	.byte	0x1
	.value	0x1feb
	.byte	0x1
	.long	0x461
	.long	.LFB83
	.long	.LFE83
	.long	.LLST68
	.uleb128 0x33
	.string	"set"
	.byte	0x1
	.value	0x1fe9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x1fea
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"did_change"
	.byte	0x1
	.value	0x1fec
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.string	"dreg"
	.byte	0x1
	.value	0x1fed
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"src"
	.byte	0x1
	.value	0x1fee
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"dclass"
	.byte	0x1
	.value	0x1fef
	.long	0x468
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"old_cost"
	.byte	0x1
	.value	0x1ff0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"val"
	.byte	0x1
	.value	0x1ff1
	.long	0x5ed7
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"l"
	.byte	0x1
	.value	0x1ff2
	.long	0x5eb6
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2e
	.string	"extend_op"
	.byte	0x1
	.value	0x1ff4
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	0xe1d2
	.long	.LBB226
	.long	.LBE226
	.uleb128 0x2e
	.string	"this_rtx"
	.byte	0x1
	.value	0x201e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	.LASF68
	.byte	0x1
	.value	0x201f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	0xe1b2
	.long	.LBB227
	.long	.LBE227
	.uleb128 0x2e
	.string	"this_val"
	.byte	0x1
	.value	0x2026
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB228
	.long	.LBE228
	.uleb128 0x2e
	.string	"wide_dest"
	.byte	0x1
	.value	0x2061
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef32
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.25911
	.byte	0x0
	.uleb128 0x39
	.long	0xe4a0
	.string	"reload_cse_simplify_operands"
	.byte	0x1
	.value	0x207e
	.byte	0x1
	.long	0x461
	.long	.LFB84
	.long	.LFE84
	.long	.LLST69
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x207c
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -1084
	.uleb128 0x36
	.long	.LASF86
	.byte	0x1
	.value	0x207d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -1088
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x207f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x207f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.string	"equiv_regs"
	.byte	0x1
	.value	0x2082
	.long	0xe4a0
	.byte	0x3
	.byte	0x91
	.sleb128 -1080
	.uleb128 0x31
	.long	.LASF29
	.byte	0x1
	.value	0x2084
	.long	0x5c3a
	.byte	0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x2e
	.string	"alternative_reject"
	.byte	0x1
	.value	0x2087
	.long	0xb0b
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2e
	.string	"alternative_nregs"
	.byte	0x1
	.value	0x208a
	.long	0xb0b
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.string	"op_alt_regno"
	.byte	0x1
	.value	0x208e
	.long	0xe4b6
	.byte	0x3
	.byte	0x91
	.sleb128 -356
	.uleb128 0x2e
	.string	"alternative_order"
	.byte	0x1
	.value	0x2090
	.long	0xb0b
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x30
	.long	0xe334
	.long	.LBB229
	.long	.LBE229
	.uleb128 0x2e
	.string	"v"
	.byte	0x1
	.value	0x20a4
	.long	0x5ed7
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"l"
	.byte	0x1
	.value	0x20a5
	.long	0x5eb6
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.long	.LBB230
	.long	.LBE230
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x20a7
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xe3bc
	.long	.LBB231
	.long	.LBE231
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x20bc
	.long	0xb18
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x20bd
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.string	"p"
	.byte	0x1
	.value	0x20be
	.long	0x44e
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.long	0xe38a
	.long	.LBB232
	.long	.LBE232
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0x20cc
	.long	0x459
	.byte	0x2
	.byte	0x91
	.sleb128 -30
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB233
	.long	.LBE233
	.uleb128 0x31
	.long	.LASF21
	.byte	0x1
	.value	0x20df
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.long	.LBB234
	.long	.LBE234
	.uleb128 0x2e
	.string	"c"
	.byte	0x1
	.value	0x20ee
	.long	0x459
	.byte	0x2
	.byte	0x91
	.sleb128 -29
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xe447
	.long	.LBB235
	.long	.LBE235
	.uleb128 0x2e
	.string	"best"
	.byte	0x1
	.value	0x212c
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2e
	.string	"best_reject"
	.byte	0x1
	.value	0x212d
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"best_nregs"
	.byte	0x1
	.value	0x212e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"tmp"
	.byte	0x1
	.value	0x212f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB236
	.long	.LBE236
	.uleb128 0x2e
	.string	"this_reject"
	.byte	0x1
	.value	0x2133
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x31
	.long	.LASF69
	.byte	0x1
	.value	0x2134
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xe464
	.long	.LBB237
	.long	.LBE237
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x214a
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x30
	.long	0xe48f
	.long	.LBB238
	.long	.LBE238
	.uleb128 0x2e
	.string	"op"
	.byte	0x1
	.value	0x2154
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x2155
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef2d
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.26111
	.byte	0x0
	.uleb128 0x13
	.long	0xe4b6
	.long	0xe10
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.uleb128 0x14
	.long	0x6c7
	.byte	0x2
	.byte	0x0
	.uleb128 0x13
	.long	0xe4c6
	.long	0xb0b
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0x10
	.long	0xe4f7
	.string	"reg_use"
	.byte	0x8
	.byte	0x1
	.value	0x216c
	.uleb128 0x25
	.long	.LASF25
	.byte	0x1
	.value	0x216c
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x11
	.string	"usep"
	.byte	0x1
	.value	0x216c
	.long	0x1ac8
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x3a
	.long	0xe55c
	.byte	0x40
	.byte	0x1
	.value	0x217a
	.uleb128 0x11
	.string	"reg_use"
	.byte	0x1
	.value	0x217b
	.long	0xe55c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x25
	.long	.LASF87
	.byte	0x1
	.value	0x217c
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x25
	.long	.LASF8
	.byte	0x1
	.value	0x217d
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x11
	.string	"store_ruid"
	.byte	0x1
	.value	0x217e
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x11
	.string	"use_ruid"
	.byte	0x1
	.value	0x217f
	.long	0x461
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.byte	0x0
	.uleb128 0x13
	.long	0xe56c
	.long	0xe4c6
	.uleb128 0x14
	.long	0x6c7
	.byte	0x5
	.byte	0x0
	.uleb128 0x35
	.long	0xe90f
	.string	"reload_combine"
	.byte	0x1
	.value	0x218c
	.byte	0x1
	.long	.LFB85
	.long	.LFE85
	.long	.LLST70
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x218d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x218d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x2e
	.string	"first_index_reg"
	.byte	0x1
	.value	0x218e
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x2e
	.string	"last_index_reg"
	.byte	0x1
	.value	0x218f
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x2190
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2e
	.string	"bb"
	.byte	0x1
	.value	0x2191
	.long	0x5673
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2e
	.string	"r"
	.byte	0x1
	.value	0x2192
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x2e
	.string	"last_label_ruid"
	.byte	0x1
	.value	0x2193
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2e
	.string	"min_labelno"
	.byte	0x1
	.value	0x2194
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2e
	.string	"n_labels"
	.byte	0x1
	.value	0x2194
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2e
	.string	"ever_live_at_start"
	.byte	0x1
	.value	0x2195
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x2e
	.string	"label_live"
	.byte	0x1
	.value	0x2195
	.long	0x9fa2
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x30
	.long	0xe6af
	.long	.LBB239
	.long	.LBE239
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x21b3
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.byte	0x0
	.uleb128 0x30
	.long	0xe744
	.long	.LBB240
	.long	.LBE240
	.uleb128 0x2e
	.string	"live"
	.byte	0x1
	.value	0x21ba
	.long	0xe29
	.byte	0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x30
	.long	0xe6eb
	.long	.LBB241
	.long	.LBE241
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x21bc
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.byte	0x0
	.uleb128 0x30
	.long	0xe719
	.long	.LBB242
	.long	.LBE242
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x21c0
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x21c0
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB243
	.long	.LBE243
	.uleb128 0x31
	.long	.LASF62
	.byte	0x1
	.value	0x21c1
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x31
	.long	.LASF67
	.byte	0x1
	.value	0x21c1
	.long	0xa4b1
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB244
	.long	.LBE244
	.uleb128 0x2e
	.string	"note"
	.byte	0x1
	.value	0x21d2
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x30
	.long	0xe84b
	.long	.LBB245
	.long	.LBE245
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x21f9
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2e
	.string	"plus"
	.byte	0x1
	.value	0x21fa
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"base"
	.byte	0x1
	.value	0x21fb
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x31
	.long	.LASF13
	.byte	0x1
	.value	0x21fc
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x31
	.long	.LASF70
	.byte	0x1
	.value	0x21fd
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x21fe
	.long	0x6b0
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2e
	.string	"const_reg"
	.byte	0x1
	.value	0x21ff
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.string	"reg_sum"
	.byte	0x1
	.value	0x2200
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.long	0xe81b
	.long	.LBB246
	.long	.LBE246
	.uleb128 0x2e
	.string	"index_reg"
	.byte	0x1
	.value	0x221f
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB247
	.long	.LBE247
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x2233
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.long	.LBB248
	.long	.LBE248
	.uleb128 0x2e
	.string	"np"
	.byte	0x1
	.value	0x224b
	.long	0x1ac8
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xe8d6
	.long	.LBB249
	.long	.LBE249
	.uleb128 0x2e
	.string	"link"
	.byte	0x1
	.value	0x2268
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.long	.LBB250
	.long	.LBE250
	.uleb128 0x2e
	.string	"usage_rtx"
	.byte	0x1
	.value	0x2274
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.long	.LBB251
	.long	.LBE251
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x2277
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"start_reg"
	.byte	0x1
	.value	0x2278
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	.LASF83
	.byte	0x1
	.value	0x2279
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"end_reg"
	.byte	0x1
	.value	0x227b
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.long	0xe8f4
	.long	.LBB252
	.long	.LBE252
	.uleb128 0x2e
	.string	"live"
	.byte	0x1
	.value	0x228d
	.long	0x9fa2
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB253
	.long	.LBE253
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x22a0
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xe998
	.string	"reload_combine_note_store"
	.byte	0x1
	.value	0x22b3
	.byte	0x1
	.long	.LFB86
	.long	.LFE86
	.long	.LLST71
	.uleb128 0x33
	.string	"dst"
	.byte	0x1
	.value	0x22b1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"set"
	.byte	0x1
	.value	0x22b1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"data"
	.byte	0x1
	.value	0x22b2
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x22b4
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x22b5
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x22b6
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x35
	.long	0xeabd
	.string	"reload_combine_note_use"
	.byte	0x1
	.value	0x22e4
	.byte	0x1
	.long	.LFB87
	.long	.LFE87
	.long	.LLST72
	.uleb128 0x33
	.string	"xp"
	.byte	0x1
	.value	0x22e3
	.long	0x1ac8
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x22e3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"x"
	.byte	0x1
	.value	0x22e5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	.LASF0
	.byte	0x1
	.value	0x22e6
	.long	0xe4d
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2e
	.string	"fmt"
	.byte	0x1
	.value	0x22e7
	.long	0x44e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x22e8
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2e
	.string	"j"
	.byte	0x1
	.value	0x22e8
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	.LASF8
	.byte	0x1
	.value	0x22e9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	0xea71
	.long	.LBB254
	.long	.LBE254
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x22fa
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x22fb
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x22fc
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x30
	.long	0xeaac
	.long	.LBB255
	.long	.LBE255
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x2318
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	.LASF87
	.byte	0x1
	.value	0x2319
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF22
	.byte	0x1
	.value	0x231a
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef18
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.27082
	.byte	0x0
	.uleb128 0x39
	.long	0xeb24
	.string	"sext_for_mode"
	.byte	0x1
	.value	0x237e
	.byte	0x1
	.long	0x74c
	.long	.LFB88
	.long	.LFE88
	.long	.LLST73
	.uleb128 0x36
	.long	.LASF1
	.byte	0x1
	.value	0x237c
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.long	.LASF10
	.byte	0x1
	.value	0x237d
	.long	0x74c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"cval"
	.byte	0x1
	.value	0x237f
	.long	0x74c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"width"
	.byte	0x1
	.value	0x2380
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x35
	.long	0xece1
	.string	"reload_cse_move2add"
	.byte	0x1
	.value	0x2396
	.byte	0x1
	.long	.LFB89
	.long	.LFE89
	.long	.LLST74
	.uleb128 0x36
	.long	.LASF11
	.byte	0x1
	.value	0x2395
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x2397
	.long	0x461
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x2398
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.long	.LBB256
	.long	.LBE256
	.uleb128 0x2e
	.string	"pat"
	.byte	0x1
	.value	0x23a1
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2e
	.string	"note"
	.byte	0x1
	.value	0x23a1
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.long	0xecc6
	.long	.LBB257
	.long	.LBE257
	.uleb128 0x2e
	.string	"reg"
	.byte	0x1
	.value	0x23b4
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x23b5
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2e
	.string	"src"
	.byte	0x1
	.value	0x23b6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.long	0xec13
	.long	.LBB258
	.long	.LBE258
	.uleb128 0x2e
	.string	"success"
	.byte	0x1
	.value	0x23c7
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"new_src"
	.byte	0x1
	.value	0x23c8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB259
	.long	.LBE259
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0x23ed
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"set"
	.byte	0x1
	.value	0x23ee
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.long	.LBB260
	.long	.LBE260
	.uleb128 0x2e
	.string	"src3"
	.byte	0x1
	.value	0x23f7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2e
	.string	"added_offset"
	.byte	0x1
	.value	0x23f8
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2e
	.string	"base_offset"
	.byte	0x1
	.value	0x23f9
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2e
	.string	"regno_offset"
	.byte	0x1
	.value	0x23fa
	.long	0x74c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2e
	.string	"new_src"
	.byte	0x1
	.value	0x23fb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"success"
	.byte	0x1
	.value	0x23ff
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB261
	.long	.LBE261
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x241e
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xedff
	.string	"move2add_note_store"
	.byte	0x1
	.value	0x243a
	.byte	0x1
	.long	.LFB90
	.long	.LFE90
	.long	.LLST75
	.uleb128 0x33
	.string	"dst"
	.byte	0x1
	.value	0x2438
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"set"
	.byte	0x1
	.value	0x2438
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x33
	.string	"data"
	.byte	0x1
	.value	0x2439
	.long	0x7b3
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x31
	.long	.LASF23
	.byte	0x1
	.value	0x243b
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.string	"i"
	.byte	0x1
	.value	0x243c
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	.LASF1
	.byte	0x1
	.value	0x243d
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x37
	.string	"invalidate"
	.byte	0x1
	.value	0x249a
	.long	.L3893
	.uleb128 0x30
	.long	0xede0
	.long	.LBB262
	.long	.LBE262
	.uleb128 0x2e
	.string	"src"
	.byte	0x1
	.value	0x245c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2e
	.string	"base_reg"
	.byte	0x1
	.value	0x245d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	.LASF8
	.byte	0x1
	.value	0x245e
	.long	0x74c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2e
	.string	"base_regno"
	.byte	0x1
	.value	0x245f
	.long	0x461
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"dst_mode"
	.byte	0x1
	.value	0x2462
	.long	0xb18
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2f
	.long	.LBB263
	.long	.LBE263
	.uleb128 0x2e
	.string	"endregno"
	.byte	0x1
	.value	0x24bc
	.long	0x6b0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xee52
	.string	"copy_eh_notes"
	.byte	0x1
	.value	0x24e7
	.byte	0x1
	.long	.LFB91
	.long	.LFE91
	.long	.LLST76
	.uleb128 0x36
	.long	.LASF25
	.byte	0x1
	.value	0x24e5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x33
	.string	"x"
	.byte	0x1
	.value	0x24e6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.string	"eh_note"
	.byte	0x1
	.value	0x24e8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2d
	.long	0xef03
	.byte	0x1
	.string	"fixup_abnormal_edges"
	.byte	0x1
	.value	0x24fd
	.byte	0x1
	.long	.LFB92
	.long	.LFE92
	.long	.LLST77
	.uleb128 0x2e
	.string	"inserted"
	.byte	0x1
	.value	0x24fe
	.long	0x5ece
	.byte	0x2
	.byte	0x91
	.sleb128 -13
	.uleb128 0x2e
	.string	"bb"
	.byte	0x1
	.value	0x24ff
	.long	0x5673
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	0xeef2
	.long	.LBB264
	.long	.LBE264
	.uleb128 0x2e
	.string	"e"
	.byte	0x1
	.value	0x2503
	.long	0x53f4
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.long	.LBB265
	.long	.LBE265
	.uleb128 0x31
	.long	.LASF25
	.byte	0x1
	.value	0x2511
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2e
	.string	"stop"
	.byte	0x1
	.value	0x2511
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	.LASF15
	.byte	0x1
	.value	0x2512
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF59
	.long	0xef13
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.27746
	.byte	0x0
	.uleb128 0x13
	.long	0xef13
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x14
	.byte	0x0
	.uleb128 0xd
	.long	0xef03
	.uleb128 0xd
	.long	0xae6
	.uleb128 0x13
	.long	0xef2d
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1c
	.byte	0x0
	.uleb128 0xd
	.long	0xef1d
	.uleb128 0xd
	.long	0xae6
	.uleb128 0x13
	.long	0xef47
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x10
	.byte	0x0
	.uleb128 0xd
	.long	0xef37
	.uleb128 0x13
	.long	0xef5c
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.byte	0x0
	.uleb128 0xd
	.long	0xef4c
	.uleb128 0xd
	.long	0xae6
	.uleb128 0x13
	.long	0xef76
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x16
	.byte	0x0
	.uleb128 0xd
	.long	0xef66
	.uleb128 0x13
	.long	0xef8b
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x12
	.byte	0x0
	.uleb128 0xd
	.long	0xef7b
	.uleb128 0x13
	.long	0xefa0
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0xd
	.byte	0x0
	.uleb128 0xd
	.long	0xef90
	.uleb128 0xd
	.long	0xef37
	.uleb128 0xd
	.long	0xef4c
	.uleb128 0x13
	.long	0xefbf
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x11
	.byte	0x0
	.uleb128 0xd
	.long	0xefaf
	.uleb128 0xd
	.long	0xae6
	.uleb128 0xd
	.long	0xef90
	.uleb128 0x13
	.long	0xefde
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1b
	.byte	0x0
	.uleb128 0xd
	.long	0xefce
	.uleb128 0xd
	.long	0xef66
	.uleb128 0xd
	.long	0xaf6
	.uleb128 0x13
	.long	0xeffd
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0xe
	.byte	0x0
	.uleb128 0xd
	.long	0xefed
	.uleb128 0x13
	.long	0xf012
	.long	0x44e
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.byte	0x0
	.uleb128 0xd
	.long	0xf002
	.uleb128 0xd
	.long	0xef90
	.uleb128 0x13
	.long	0xf02c
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x8
	.byte	0x0
	.uleb128 0xd
	.long	0xf01c
	.uleb128 0x13
	.long	0xf041
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0xc
	.byte	0x0
	.uleb128 0xd
	.long	0xf031
	.uleb128 0x13
	.long	0xf056
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x6
	.byte	0x0
	.uleb128 0xd
	.long	0xf046
	.uleb128 0x13
	.long	0xf06b
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1d
	.byte	0x0
	.uleb128 0xd
	.long	0xf05b
	.uleb128 0xd
	.long	0xef66
	.uleb128 0x3b
	.string	"reg_last_reload_reg"
	.byte	0x1
	.byte	0x5a
	.long	0x1ac8
	.byte	0x5
	.byte	0x3
	.long	reg_last_reload_reg
	.uleb128 0x3b
	.string	"reg_has_output_reload"
	.byte	0x1
	.byte	0x5e
	.long	0x7b5
	.byte	0x5
	.byte	0x3
	.long	reg_has_output_reload
	.uleb128 0x3b
	.string	"reg_is_output_reload"
	.byte	0x1
	.byte	0x62
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reg_is_output_reload
	.uleb128 0x3b
	.string	"reg_max_ref_width"
	.byte	0x1
	.byte	0x7a
	.long	0xf0fa
	.byte	0x5
	.byte	0x3
	.long	reg_max_ref_width
	.uleb128 0x3
	.byte	0x4
	.long	0x6b0
	.uleb128 0x3b
	.string	"reg_equiv_init"
	.byte	0x1
	.byte	0x7e
	.long	0x1ac8
	.byte	0x5
	.byte	0x3
	.long	reg_equiv_init
	.uleb128 0x3b
	.string	"reg_old_renumber"
	.byte	0x1
	.byte	0x81
	.long	0xf13a
	.byte	0x5
	.byte	0x3
	.long	reg_old_renumber
	.uleb128 0x3
	.byte	0x4
	.long	0x73f
	.uleb128 0x13
	.long	0xf150
	.long	0x461
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x3b
	.string	"reg_reloaded_contents"
	.byte	0x1
	.byte	0x87
	.long	0xf140
	.byte	0x5
	.byte	0x3
	.long	reg_reloaded_contents
	.uleb128 0x13
	.long	0xf183
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x3b
	.string	"reg_reloaded_insn"
	.byte	0x1
	.byte	0x8c
	.long	0xf173
	.byte	0x5
	.byte	0x3
	.long	reg_reloaded_insn
	.uleb128 0x3b
	.string	"reg_reloaded_valid"
	.byte	0x1
	.byte	0x8f
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reg_reloaded_valid
	.uleb128 0x3b
	.string	"reg_reloaded_dead"
	.byte	0x1
	.byte	0x92
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reg_reloaded_dead
	.uleb128 0x3b
	.string	"n_spills"
	.byte	0x1
	.byte	0x95
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	n_spills
	.uleb128 0x3b
	.string	"spill_reg_rtx"
	.byte	0x1
	.byte	0x9b
	.long	0xf173
	.byte	0x5
	.byte	0x3
	.long	spill_reg_rtx
	.uleb128 0x3b
	.string	"spill_reg_store"
	.byte	0x1
	.byte	0xa0
	.long	0xf173
	.byte	0x5
	.byte	0x3
	.long	spill_reg_store
	.uleb128 0x3b
	.string	"spill_reg_stored_to"
	.byte	0x1
	.byte	0xa5
	.long	0xf173
	.byte	0x5
	.byte	0x3
	.long	spill_reg_stored_to
	.uleb128 0x13
	.long	0xf260
	.long	0x73f
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x3b
	.string	"spill_reg_order"
	.byte	0x1
	.byte	0xad
	.long	0xf250
	.byte	0x5
	.byte	0x3
	.long	spill_reg_order
	.uleb128 0x3b
	.string	"bad_spill_regs"
	.byte	0x1
	.byte	0xb3
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	bad_spill_regs
	.uleb128 0x3b
	.string	"bad_spill_regs_global"
	.byte	0x1
	.byte	0xb9
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	bad_spill_regs_global
	.uleb128 0x3b
	.string	"spill_regs"
	.byte	0x1
	.byte	0xc4
	.long	0xf250
	.byte	0x5
	.byte	0x3
	.long	spill_regs
	.uleb128 0x3b
	.string	"pseudo_previous_regs"
	.byte	0x1
	.byte	0xcb
	.long	0x9fa2
	.byte	0x5
	.byte	0x3
	.long	pseudo_previous_regs
	.uleb128 0x3b
	.string	"pseudo_forbidden_regs"
	.byte	0x1
	.byte	0xd1
	.long	0x9fa2
	.byte	0x5
	.byte	0x3
	.long	pseudo_forbidden_regs
	.uleb128 0x3c
	.long	.LASF27
	.byte	0x1
	.byte	0xd5
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	used_spill_regs
	.uleb128 0x3b
	.string	"last_spill_reg"
	.byte	0x1
	.byte	0xd9
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	last_spill_reg
	.uleb128 0x3b
	.string	"spill_indirect_levels"
	.byte	0x1
	.byte	0xe1
	.long	0x459
	.byte	0x5
	.byte	0x3
	.long	spill_indirect_levels
	.uleb128 0x3b
	.string	"spill_stack_slot"
	.byte	0x1
	.byte	0xec
	.long	0xf173
	.byte	0x5
	.byte	0x3
	.long	spill_stack_slot
	.uleb128 0x13
	.long	0xf397
	.long	0x6b0
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x3b
	.string	"spill_stack_slot_width"
	.byte	0x1
	.byte	0xef
	.long	0xf387
	.byte	0x5
	.byte	0x3
	.long	spill_stack_slot_width
	.uleb128 0x3b
	.string	"spilled_pseudos"
	.byte	0x1
	.byte	0xf2
	.long	0x5313
	.byte	0x5
	.byte	0x3
	.long	spilled_pseudos
	.uleb128 0x3b
	.string	"pseudos_counted"
	.byte	0x1
	.byte	0xf6
	.long	0x5313
	.byte	0x5
	.byte	0x3
	.long	pseudos_counted
	.uleb128 0x2e
	.string	"reload_insn_firstobj"
	.byte	0x1
	.value	0x119
	.long	0x7b5
	.byte	0x5
	.byte	0x3
	.long	reload_insn_firstobj
	.uleb128 0x2e
	.string	"insns_need_reload"
	.byte	0x1
	.value	0x126
	.long	0x5b07
	.byte	0x5
	.byte	0x3
	.long	insns_need_reload
	.uleb128 0x2e
	.string	"reg_eliminate"
	.byte	0x1
	.value	0x140
	.long	0xa4ab
	.byte	0x5
	.byte	0x3
	.long	reg_eliminate
	.uleb128 0x13
	.long	0xf464
	.long	0x9d10
	.uleb128 0x14
	.long	0x6c7
	.byte	0x8
	.byte	0x0
	.uleb128 0x2e
	.string	"reg_eliminate_1"
	.byte	0x1
	.value	0x148
	.long	0xf482
	.byte	0x5
	.byte	0x3
	.long	reg_eliminate_1
	.uleb128 0xd
	.long	0xf454
	.uleb128 0x2e
	.string	"num_eliminable"
	.byte	0x1
	.value	0x15c
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	num_eliminable
	.uleb128 0x2e
	.string	"num_eliminable_invariants"
	.byte	0x1
	.value	0x15f
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	num_eliminable_invariants
	.uleb128 0x2e
	.string	"first_label_num"
	.byte	0x1
	.value	0x16a
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	first_label_num
	.uleb128 0x2e
	.string	"offsets_known_at"
	.byte	0x1
	.value	0x16b
	.long	0x7b5
	.byte	0x5
	.byte	0x3
	.long	offsets_known_at
	.uleb128 0x13
	.long	0xf519
	.long	0x461
	.uleb128 0x14
	.long	0x6c7
	.byte	0x8
	.byte	0x0
	.uleb128 0x2e
	.string	"offsets_at"
	.byte	0x1
	.value	0x16c
	.long	0xf532
	.byte	0x5
	.byte	0x3
	.long	offsets_at
	.uleb128 0x3
	.byte	0x4
	.long	0xf509
	.uleb128 0x2e
	.string	"num_labels"
	.byte	0x1
	.value	0x170
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	num_labels
	.uleb128 0x2e
	.string	"unused_insn_chains"
	.byte	0x1
	.value	0x209
	.long	0x5b07
	.byte	0x5
	.byte	0x3
	.long	unused_insn_chains
	.uleb128 0x2e
	.string	"something_needs_elimination"
	.byte	0x1
	.value	0x289
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	something_needs_elimination
	.uleb128 0x2e
	.string	"failure"
	.byte	0x1
	.value	0x28e
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	failure
	.uleb128 0x2e
	.string	"spill_cost"
	.byte	0x1
	.value	0x62d
	.long	0xf140
	.byte	0x5
	.byte	0x3
	.long	spill_cost
	.uleb128 0x2e
	.string	"spill_add_cost"
	.byte	0x1
	.value	0x632
	.long	0xf140
	.byte	0x5
	.byte	0x3
	.long	spill_add_cost
	.uleb128 0x13
	.long	0xf5f8
	.long	0x73f
	.uleb128 0x14
	.long	0x6c7
	.byte	0x77
	.byte	0x0
	.uleb128 0x2e
	.string	"reload_order"
	.byte	0x1
	.value	0x67a
	.long	0xf5e8
	.byte	0x5
	.byte	0x3
	.long	reload_order
	.uleb128 0x2e
	.string	"used_spill_regs_local"
	.byte	0x1
	.value	0x67d
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	used_spill_regs_local
	.uleb128 0x2e
	.string	"reload_reg_unavailable"
	.byte	0x1
	.value	0x103d
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_unavailable
	.uleb128 0x2e
	.string	"reload_reg_used"
	.byte	0x1
	.value	0x103f
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used
	.uleb128 0x2e
	.string	"reload_reg_used_in_input_addr"
	.byte	0x1
	.value	0x1041
	.long	0xe4a0
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_input_addr
	.uleb128 0x2e
	.string	"reload_reg_used_in_inpaddr_addr"
	.byte	0x1
	.value	0x1043
	.long	0xe4a0
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_inpaddr_addr
	.uleb128 0x2e
	.string	"reload_reg_used_in_output_addr"
	.byte	0x1
	.value	0x1045
	.long	0xe4a0
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_output_addr
	.uleb128 0x2e
	.string	"reload_reg_used_in_outaddr_addr"
	.byte	0x1
	.value	0x1047
	.long	0xe4a0
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_outaddr_addr
	.uleb128 0x2e
	.string	"reload_reg_used_in_input"
	.byte	0x1
	.value	0x1049
	.long	0xe4a0
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_input
	.uleb128 0x2e
	.string	"reload_reg_used_in_output"
	.byte	0x1
	.value	0x104b
	.long	0xe4a0
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_output
	.uleb128 0x2e
	.string	"reload_reg_used_in_op_addr"
	.byte	0x1
	.value	0x104d
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_op_addr
	.uleb128 0x2e
	.string	"reload_reg_used_in_op_addr_reload"
	.byte	0x1
	.value	0x104f
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_op_addr_reload
	.uleb128 0x2e
	.string	"reload_reg_used_in_insn"
	.byte	0x1
	.value	0x1051
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_insn
	.uleb128 0x2e
	.string	"reload_reg_used_in_other_addr"
	.byte	0x1
	.value	0x1053
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_in_other_addr
	.uleb128 0x2e
	.string	"reload_reg_used_at_all"
	.byte	0x1
	.value	0x1056
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_at_all
	.uleb128 0x2e
	.string	"reload_reg_used_for_inherit"
	.byte	0x1
	.value	0x105a
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reload_reg_used_for_inherit
	.uleb128 0x2e
	.string	"reg_used_in_insn"
	.byte	0x1
	.value	0x105e
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reg_used_in_insn
	.uleb128 0x2e
	.string	"input_reload_insns"
	.byte	0x1
	.value	0x17ff
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	input_reload_insns
	.uleb128 0x2e
	.string	"other_input_address_reload_insns"
	.byte	0x1
	.value	0x1800
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	other_input_address_reload_insns
	.uleb128 0x2e
	.string	"other_input_reload_insns"
	.byte	0x1
	.value	0x1801
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	other_input_reload_insns
	.uleb128 0x2e
	.string	"input_address_reload_insns"
	.byte	0x1
	.value	0x1802
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	input_address_reload_insns
	.uleb128 0x2e
	.string	"inpaddr_address_reload_insns"
	.byte	0x1
	.value	0x1803
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	inpaddr_address_reload_insns
	.uleb128 0x2e
	.string	"output_reload_insns"
	.byte	0x1
	.value	0x1804
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	output_reload_insns
	.uleb128 0x2e
	.string	"output_address_reload_insns"
	.byte	0x1
	.value	0x1805
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	output_address_reload_insns
	.uleb128 0x2e
	.string	"outaddr_address_reload_insns"
	.byte	0x1
	.value	0x1806
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	outaddr_address_reload_insns
	.uleb128 0x2e
	.string	"operand_reload_insns"
	.byte	0x1
	.value	0x1807
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	operand_reload_insns
	.uleb128 0x2e
	.string	"other_operand_reload_insns"
	.byte	0x1
	.value	0x1808
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	other_operand_reload_insns
	.uleb128 0x2e
	.string	"other_output_reload_insns"
	.byte	0x1
	.value	0x1809
	.long	0x5c1a
	.byte	0x5
	.byte	0x3
	.long	other_output_reload_insns
	.uleb128 0x2e
	.string	"new_spill_reg_store"
	.byte	0x1
	.value	0x180c
	.long	0xf173
	.byte	0x5
	.byte	0x3
	.long	new_spill_reg_store
	.uleb128 0x2e
	.string	"reg_reloaded_died"
	.byte	0x1
	.value	0x180d
	.long	0xe29
	.byte	0x5
	.byte	0x3
	.long	reg_reloaded_died
	.uleb128 0x13
	.long	0xfa9f
	.long	0xe4f7
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x2e
	.string	"reg_state"
	.byte	0x1
	.value	0x2180
	.long	0xfa8f
	.byte	0x5
	.byte	0x3
	.long	reg_state
	.uleb128 0x2e
	.string	"reload_combine_ruid"
	.byte	0x1
	.value	0x2185
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	reload_combine_ruid
	.uleb128 0x2e
	.string	"reg_set_luid"
	.byte	0x1
	.value	0x2364
	.long	0xf140
	.byte	0x5
	.byte	0x3
	.long	reg_set_luid
	.uleb128 0x13
	.long	0xfb04
	.long	0x74c
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x2e
	.string	"reg_offset"
	.byte	0x1
	.value	0x236b
	.long	0xfaf4
	.byte	0x5
	.byte	0x3
	.long	reg_offset
	.uleb128 0x2e
	.string	"reg_base_reg"
	.byte	0x1
	.value	0x236c
	.long	0xf140
	.byte	0x5
	.byte	0x3
	.long	reg_base_reg
	.uleb128 0x13
	.long	0xfb48
	.long	0xb18
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x2e
	.string	"reg_mode"
	.byte	0x1
	.value	0x236d
	.long	0xfb38
	.byte	0x5
	.byte	0x3
	.long	reg_mode
	.uleb128 0x2e
	.string	"move2add_luid"
	.byte	0x1
	.value	0x2372
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	move2add_luid
	.uleb128 0x2e
	.string	"move2add_last_label_luid"
	.byte	0x1
	.value	0x2376
	.long	0x461
	.byte	0x5
	.byte	0x3
	.long	move2add_last_label_luid
	.uleb128 0x13
	.long	0xfbb2
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x3d
	.string	"call_used_regs"
	.byte	0x15
	.value	0x196
	.long	0xfba2
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"target_flags"
	.byte	0xd
	.byte	0x21
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"mips_tune"
	.byte	0xd
	.byte	0xa4
	.long	0x2ce
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"mips_abi"
	.byte	0xd
	.value	0x3ca
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfc18
	.long	0x459
	.uleb128 0x3f
	.uleb128 0x14
	.long	0x6c7
	.byte	0xaf
	.byte	0x0
	.uleb128 0x3d
	.string	"mips_hard_regno_mode_ok"
	.byte	0xd
	.value	0x778
	.long	0xfc07
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfc45
	.long	0x468
	.uleb128 0x3f
	.byte	0x0
	.uleb128 0x3d
	.string	"mips_regno_to_class"
	.byte	0xd
	.value	0x85d
	.long	0xfc63
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfc3a
	.uleb128 0x13
	.long	0xfc78
	.long	0x468
	.uleb128 0x14
	.long	0x6c7
	.byte	0xff
	.byte	0x0
	.uleb128 0x3d
	.string	"mips_char_to_class"
	.byte	0xd
	.value	0x8b0
	.long	0xfc68
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfca5
	.long	0xd61
	.uleb128 0x14
	.long	0x6c7
	.byte	0x35
	.byte	0x0
	.uleb128 0x40
	.long	.LASF6
	.byte	0x4
	.byte	0x34
	.long	0xfcb2
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfc95
	.uleb128 0x13
	.long	0xfcc7
	.long	0x6f4
	.uleb128 0x14
	.long	0x6c7
	.byte	0x35
	.byte	0x0
	.uleb128 0x3e
	.string	"mode_size"
	.byte	0x4
	.byte	0x59
	.long	0xfcda
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfcb7
	.uleb128 0x13
	.long	0xfcef
	.long	0x705
	.uleb128 0x14
	.long	0x6c7
	.byte	0x35
	.byte	0x0
	.uleb128 0x3e
	.string	"mode_bitsize"
	.byte	0x4
	.byte	0x69
	.long	0xfd05
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfcdf
	.uleb128 0x13
	.long	0xfd1a
	.long	0x75d
	.uleb128 0x14
	.long	0x6c7
	.byte	0x35
	.byte	0x0
	.uleb128 0x3e
	.string	"mode_mask_array"
	.byte	0x4
	.byte	0x73
	.long	0xfd33
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfd0a
	.uleb128 0x3e
	.string	"word_mode"
	.byte	0x4
	.byte	0xad
	.long	0xb18
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"fixed_regs"
	.byte	0x15
	.value	0x18b
	.long	0xfba2
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"fixed_reg_set"
	.byte	0x15
	.value	0x18f
	.long	0xe29
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"call_used_reg_set"
	.byte	0x15
	.value	0x19e
	.long	0xe29
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"inv_reg_alloc_order"
	.byte	0x15
	.value	0x1c6
	.long	0xf140
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfdc8
	.long	0xe10
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.uleb128 0x14
	.long	0x6c7
	.byte	0x2
	.byte	0x0
	.uleb128 0x3d
	.string	"reg_class_contents"
	.byte	0x15
	.value	0x1cb
	.long	0xfdb2
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfdf5
	.long	0x6b0
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.byte	0x0
	.uleb128 0x3d
	.string	"reg_class_size"
	.byte	0x15
	.value	0x1cf
	.long	0xfde5
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfe24
	.long	0x468
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.uleb128 0x14
	.long	0x6c7
	.byte	0x18
	.byte	0x0
	.uleb128 0x3d
	.string	"reg_class_subunion"
	.byte	0x15
	.value	0x1dc
	.long	0xfe0e
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"reg_class_superunion"
	.byte	0x15
	.value	0x1e1
	.long	0xfe0e
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xfe70
	.long	0x6f4
	.uleb128 0x14
	.long	0x6c7
	.byte	0xa2
	.byte	0x0
	.uleb128 0x3e
	.string	"rtx_length"
	.byte	0x3
	.byte	0x36
	.long	0xfe84
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfe60
	.uleb128 0x13
	.long	0xfe99
	.long	0x44e
	.uleb128 0x14
	.long	0x6c7
	.byte	0xa2
	.byte	0x0
	.uleb128 0x3e
	.string	"rtx_format"
	.byte	0x3
	.byte	0x3c
	.long	0xfead
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfe89
	.uleb128 0x13
	.long	0xfec2
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0xa2
	.byte	0x0
	.uleb128 0x3e
	.string	"rtx_class"
	.byte	0x3
	.byte	0x3f
	.long	0xfed5
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xfeb2
	.uleb128 0x13
	.long	0xfeea
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0x80
	.byte	0x0
	.uleb128 0x3d
	.string	"const_int_rtx"
	.byte	0x3
	.value	0x69e
	.long	0xfeda
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0xff12
	.long	0x9c
	.uleb128 0x14
	.long	0x6c7
	.byte	0xa
	.byte	0x0
	.uleb128 0x3d
	.string	"global_rtl"
	.byte	0x3
	.value	0x6df
	.long	0xff02
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"reload_completed"
	.byte	0x3
	.value	0x75d
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x41
	.string	"reload_in_progress"
	.byte	0x1
	.value	0x102
	.long	0x461
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_in_progress
	.uleb128 0x3e
	.string	"optimize"
	.byte	0x16
	.byte	0x41
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"flag_expensive_optimizations"
	.byte	0x16
	.value	0x141
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"flag_omit_frame_pointer"
	.byte	0x16
	.value	0x151
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"flag_pic"
	.byte	0x16
	.value	0x1dd
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"flag_stack_check"
	.byte	0x16
	.value	0x246
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"frame_pointer_needed"
	.byte	0x16
	.value	0x26a
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"flag_non_call_exceptions"
	.byte	0x16
	.value	0x2b2
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3d
	.string	"cfun"
	.byte	0xc
	.value	0x202
	.long	0x29d9
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0x1004e
	.long	0x4c19
	.uleb128 0x14
	.long	0x6c7
	.byte	0x32
	.byte	0x0
	.uleb128 0x3e
	.string	"optab_table"
	.byte	0x17
	.byte	0xa0
	.long	0x1003e
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0x10073
	.long	0x2a41
	.uleb128 0x14
	.long	0x6c7
	.byte	0x35
	.byte	0x0
	.uleb128 0x41
	.string	"reload_in_optab"
	.byte	0x1
	.value	0x107
	.long	0x10063
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_in_optab
	.uleb128 0x41
	.string	"reload_out_optab"
	.byte	0x1
	.value	0x108
	.long	0x10063
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_out_optab
	.uleb128 0x13
	.long	0x100c2
	.long	0x190a
	.uleb128 0x14
	.long	0x6c7
	.byte	0x1
	.byte	0x0
	.uleb128 0x3d
	.string	"entry_exit_blocks"
	.byte	0xf
	.value	0x139
	.long	0x100b2
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"max_regno"
	.byte	0x18
	.byte	0x2c
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"reg_n_info"
	.byte	0x18
	.byte	0x43
	.long	0x51d0
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"reg_renumber"
	.byte	0x18
	.byte	0x9a
	.long	0xf13a
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"regs_ever_live"
	.byte	0x18
	.byte	0x9f
	.long	0xfba2
	.byte	0x1
	.byte	0x1
	.uleb128 0x42
	.string	"caller_save_needed"
	.byte	0x1
	.byte	0xfe
	.long	0x461
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	caller_save_needed
	.uleb128 0x13
	.long	0x10164
	.long	0x57a9
	.uleb128 0x14
	.long	0x6c7
	.byte	0x77
	.byte	0x0
	.uleb128 0x3e
	.string	"rld"
	.byte	0x13
	.byte	0xa3
	.long	0x10154
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.long	.LASF26
	.byte	0x13
	.byte	0xa4
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x42
	.string	"reg_equiv_constant"
	.byte	0x1
	.byte	0x68
	.long	0x1ac8
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reg_equiv_constant
	.uleb128 0x42
	.string	"reg_equiv_memory_loc"
	.byte	0x1
	.byte	0x6e
	.long	0x1ac8
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reg_equiv_memory_loc
	.uleb128 0x42
	.string	"reg_equiv_address"
	.byte	0x1
	.byte	0x73
	.long	0x1ac8
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reg_equiv_address
	.uleb128 0x42
	.string	"reg_equiv_mem"
	.byte	0x1
	.byte	0x77
	.long	0x1ac8
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reg_equiv_mem
	.uleb128 0x3e
	.string	"n_earlyclobbers"
	.byte	0x13
	.byte	0xae
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"reload_earlyclobbers"
	.byte	0x13
	.byte	0xaf
	.long	0x5c1a
	.byte	0x1
	.byte	0x1
	.uleb128 0x3e
	.string	"reload_n_operands"
	.byte	0x13
	.byte	0xb2
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x42
	.string	"reload_first_uid"
	.byte	0x1
	.byte	0xfa
	.long	0x461
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_first_uid
	.uleb128 0x42
	.string	"indirect_symref_ok"
	.byte	0x1
	.byte	0xe6
	.long	0x459
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	indirect_symref_ok
	.uleb128 0x42
	.string	"double_reg_address_ok"
	.byte	0x1
	.byte	0xe9
	.long	0x459
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	double_reg_address_ok
	.uleb128 0x41
	.string	"num_not_at_initial_offset"
	.byte	0x1
	.value	0x159
	.long	0x461
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	num_not_at_initial_offset
	.uleb128 0x41
	.string	"reload_insn_chain"
	.byte	0x1
	.value	0x11d
	.long	0x5b07
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_insn_chain
	.uleb128 0x3e
	.string	"which_alternative"
	.byte	0x1a
	.byte	0x96
	.long	0x461
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.long	.LASF28
	.byte	0x1a
	.byte	0xd0
	.long	0x5b40
	.byte	0x1
	.byte	0x1
	.uleb128 0x13
	.long	0x10331
	.long	0x5d7e
	.uleb128 0x3f
	.byte	0x0
	.uleb128 0x40
	.long	.LASF32
	.byte	0x1a
	.byte	0xfe
	.long	0x1033e
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0x10326
	.uleb128 0x3d
	.string	"rtl_dump_file"
	.byte	0x1b
	.value	0x1b8
	.long	0x1035b
	.byte	0x1
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x7bb
	.uleb128 0x3d
	.string	"current_function_decl"
	.byte	0x1
	.value	0x120
	.long	0x1e3
	.byte	0x1
	.byte	0x1
	.uleb128 0x41
	.string	"reload_obstack"
	.byte	0x1
	.value	0x10d
	.long	0x1b1d
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_obstack
	.uleb128 0x41
	.string	"reload_startobj"
	.byte	0x1
	.value	0x111
	.long	0x7b5
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_startobj
	.uleb128 0x41
	.string	"reload_firstobj"
	.byte	0x1
	.value	0x115
	.long	0x7b5
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_firstobj
	.uleb128 0x41
	.string	"something_needs_operands_changed"
	.byte	0x1
	.value	0x28b
	.long	0x461
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	something_needs_operands_changed
	.uleb128 0x13
	.long	0x1041d
	.long	0x459
	.uleb128 0x14
	.long	0x6c7
	.byte	0x77
	.byte	0x0
	.uleb128 0x41
	.string	"reload_inherited"
	.byte	0x1
	.value	0x128a
	.long	0x1040d
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_inherited
	.uleb128 0x41
	.string	"reload_inheritance_insn"
	.byte	0x1
	.value	0x128e
	.long	0xd00b
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_inheritance_insn
	.uleb128 0x41
	.string	"reload_override_in"
	.byte	0x1
	.value	0x1292
	.long	0xd00b
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_override_in
	.uleb128 0x13
	.long	0x10496
	.long	0x461
	.uleb128 0x14
	.long	0x6c7
	.byte	0x77
	.byte	0x0
	.uleb128 0x41
	.string	"reload_spill_index"
	.byte	0x1
	.value	0x1296
	.long	0x10486
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	reload_spill_index
	.byte	0x0
	.section	.debug_abbrev
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x10
	.uleb128 0x6
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x25
	.uleb128 0x8
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1b
	.uleb128 0x8
	.byte	0x0
	.byte	0x0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0x0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x8
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x9
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xb
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0xc
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0x0
	.byte	0x0
	.uleb128 0xd
	.uleb128 0x26
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xe
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0xf
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x11
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x12
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x14
	.uleb128 0x21
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x15
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x16
	.uleb128 0xf
	.byte	0x0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x17
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x18
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x19
	.uleb128 0x26
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x1a
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x1b
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x1d
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x1f
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x20
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x21
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x27
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x22
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x23
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x25
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x26
	.uleb128 0x13
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x27
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x28
	.uleb128 0x18
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x29
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x2a
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x2e
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x33
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0xc
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x36
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x37
	.uleb128 0xa
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x38
	.uleb128 0x2e
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x3a
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x3b
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x3c
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x3d
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x3e
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x3f
	.uleb128 0x21
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x40
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x41
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x42
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.section	.debug_pubnames,"",@progbits
	.long	0x2d0
	.value	0x2
	.long	.Ldebug_info0
	.long	0x104b9
	.long	0x9d45
	.string	"init_reload"
	.long	0x9df1
	.string	"new_insn_chain"
	.long	0x9e95
	.string	"compute_use_by_pseudos"
	.long	0xa07d
	.string	"reload"
	.long	0xb1a5
	.string	"mark_home_live"
	.long	0xb287
	.string	"eliminate_regs"
	.long	0xc52e
	.string	"reloads_conflict"
	.long	0xd01b
	.string	"deallocate_reload_reg"
	.long	0xda34
	.string	"gen_reload"
	.long	0xe04d
	.string	"reload_cse_regs"
	.long	0xee52
	.string	"fixup_abnormal_edges"
	.long	0xff42
	.string	"reload_in_progress"
	.long	0x10073
	.string	"reload_in_optab"
	.long	0x10092
	.string	"reload_out_optab"
	.long	0x10133
	.string	"caller_save_needed"
	.long	0x1017e
	.string	"reg_equiv_constant"
	.long	0x1019f
	.string	"reg_equiv_memory_loc"
	.long	0x101c2
	.string	"reg_equiv_address"
	.long	0x101e2
	.string	"reg_equiv_mem"
	.long	0x10250
	.string	"reload_first_uid"
	.long	0x1026f
	.string	"indirect_symref_ok"
	.long	0x10290
	.string	"double_reg_address_ok"
	.long	0x102b4
	.string	"num_not_at_initial_offset"
	.long	0x102dd
	.string	"reload_insn_chain"
	.long	0x10381
	.string	"reload_obstack"
	.long	0x1039f
	.string	"reload_startobj"
	.long	0x103be
	.string	"reload_firstobj"
	.long	0x103dd
	.string	"something_needs_operands_changed"
	.long	0x1041d
	.string	"reload_inherited"
	.long	0x1043d
	.string	"reload_inheritance_insn"
	.long	0x10464
	.string	"reload_override_in"
	.long	0x10496
	.string	"reload_spill_index"
	.long	0x0
	.section	.debug_aranges,"",@progbits
	.long	0x1c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x4
	.byte	0x0
	.value	0x0
	.value	0x0
	.long	.Ltext0
	.long	.Letext0-.Ltext0
	.long	0x0
	.long	0x0
	.section	.debug_str,"",@progbits
.LASF12:
	.string	"count"
.LASF23:
	.string	"regno"
.LASF64:
	.string	"old_body"
.LASF35:
	.string	"lang_flag_0"
.LASF36:
	.string	"lang_flag_1"
.LASF37:
	.string	"lang_flag_2"
.LASF41:
	.string	"lang_flag_6"
.LASF76:
	.string	"nregno"
.LASF3:
	.string	"type"
.LASF9:
	.string	"size"
.LASF11:
	.string	"first"
.LASF7:
	.string	"mem_attrs"
.LASF68:
	.string	"this_cost"
.LASF79:
	.string	"real_oldequiv"
.LASF52:
	.string	"__o1"
.LASF87:
	.string	"use_index"
.LASF74:
	.string	"ignore_address_reloads"
.LASF2:
	.string	"common"
.LASF50:
	.string	"lang_specific"
.LASF69:
	.string	"this_nregs"
.LASF17:
	.string	"sequence_rtl_expr"
.LASF63:
	.string	"something_changed"
.LASF83:
	.string	"num_regs"
.LASF16:
	.string	"sequence_stack"
.LASF18:
	.string	"function_frequency"
.LASF61:
	.string	"global"
.LASF38:
	.string	"lang_flag_3"
.LASF67:
	.string	"scan_fp_"
.LASF15:
	.string	"next"
.LASF72:
	.string	"start_regno"
.LASF4:
	.string	"unsigned int"
.LASF45:
	.string	"abstract_origin"
.LASF59:
	.string	"__FUNCTION__"
.LASF48:
	.string	"pointer_depth"
.LASF49:
	.string	"user_align"
.LASF51:
	.string	"__len"
.LASF80:
	.string	"real_old"
.LASF75:
	.string	"save_reload_reg_rtx"
.LASF84:
	.string	"dead_insn"
.LASF78:
	.string	"secondary_reload"
.LASF73:
	.string	"reloadnum"
.LASF30:
	.string	"n_operands"
.LASF46:
	.string	"size_unit"
.LASF66:
	.string	"used_by_pseudos2"
.LASF21:
	.string	"class"
.LASF54:
	.string	"indx_"
.LASF10:
	.string	"value"
.LASF77:
	.string	"reloadreg"
.LASF24:
	.string	"opnum"
.LASF14:
	.string	"next_free"
.LASF22:
	.string	"nregs"
.LASF25:
	.string	"insn"
.LASF28:
	.string	"recog_data"
.LASF29:
	.string	"constraints"
.LASF39:
	.string	"lang_flag_4"
.LASF40:
	.string	"lang_flag_5"
.LASF42:
	.string	"lang_flag_7"
.LASF44:
	.string	"abstract_flag"
.LASF31:
	.string	"n_alternatives"
.LASF70:
	.string	"prev_set"
.LASF55:
	.string	"bit_num_"
.LASF13:
	.string	"prev"
.LASF0:
	.string	"code"
.LASF82:
	.string	"last_regno"
.LASF6:
	.string	"mode_class"
.LASF43:
	.string	"ht_identifier"
.LASF8:
	.string	"offset"
.LASF19:
	.string	"insn_code"
.LASF34:
	.string	"chain"
.LASF60:
	.string	"mem_mode"
.LASF33:
	.string	"built_in_class"
.LASF20:
	.string	"basic_block"
.LASF85:
	.string	"current_insn"
.LASF71:
	.string	"new_icode"
.LASF27:
	.string	"used_spill_regs"
.LASF65:
	.string	"used_by_pseudos"
.LASF81:
	.string	"tertiary_icode"
.LASF86:
	.string	"testreg"
.LASF26:
	.string	"n_reloads"
.LASF1:
	.string	"mode"
.LASF58:
	.string	"mask_"
.LASF53:
	.string	"ptr_"
.LASF57:
	.string	"word_"
.LASF32:
	.string	"insn_data"
.LASF5:
	.string	"_IO_FILE"
.LASF47:
	.string	"attributes"
.LASF56:
	.string	"word_num_"
.LASF62:
	.string	"scan_tp_"
	.ident	"GCC: (GNU) 4.1.2 (Ubuntu 4.1.2-0ubuntu4)"
	.section	.text.__i686.get_pc_thunk.cx,"axG",@progbits,__i686.get_pc_thunk.cx,comdat
.globl __i686.get_pc_thunk.cx
	.hidden	__i686.get_pc_thunk.cx
	.type	__i686.get_pc_thunk.cx, @function
__i686.get_pc_thunk.cx:
	movl	(%esp), %ecx
	ret
	.section	.text.__i686.get_pc_thunk.bx,"axG",@progbits,__i686.get_pc_thunk.bx,comdat
.globl __i686.get_pc_thunk.bx
	.hidden	__i686.get_pc_thunk.bx
	.type	__i686.get_pc_thunk.bx, @function
__i686.get_pc_thunk.bx:
	movl	(%esp), %ebx
	ret
	.section	.note.GNU-stack,"",@progbits
