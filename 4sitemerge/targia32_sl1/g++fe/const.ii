# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
# 59 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
#pragma hdrstop


# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 1
# 82 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 323 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 313 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 314 "/usr/include/sys/cdefs.h" 2 3 4
# 324 "/usr/include/features.h" 2 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 347 "/usr/include/features.h" 2 3 4
# 29 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 214 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 3 4
typedef unsigned int size_t;
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 32 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 134 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 135 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4









typedef struct _IO_FILE FILE;





# 62 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 72 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 14 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 355 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 15 "/usr/include/_G_config.h" 2 3 4
# 24 "/usr/include/_G_config.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 51 "/usr/include/wchar.h" 2 3 4
# 76 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 25 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 44 "/usr/include/_G_config.h" 3 4
# 1 "/usr/include/gconv.h" 1 3 4
# 28 "/usr/include/gconv.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4
# 29 "/usr/include/gconv.h" 2 3 4


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 32 "/usr/include/gconv.h" 2 3 4





enum
{
  __GCONV_OK = 0,
  __GCONV_NOCONV,
  __GCONV_NODB,
  __GCONV_NOMEM,

  __GCONV_EMPTY_INPUT,
  __GCONV_FULL_OUTPUT,
  __GCONV_ILLEGAL_INPUT,
  __GCONV_INCOMPLETE_INPUT,

  __GCONV_ILLEGAL_DESCRIPTOR,
  __GCONV_INTERNAL_ERROR
};



enum
{
  __GCONV_IS_LAST = 0x0001,
  __GCONV_IGNORE_ERRORS = 0x0002
};



struct __gconv_step;
struct __gconv_step_data;
struct __gconv_loaded_object;
struct __gconv_trans_data;



typedef int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
       __const unsigned char **, __const unsigned char *,
       unsigned char **, size_t *, int, int);


typedef wint_t (*__gconv_btowc_fct) (struct __gconv_step *, unsigned char);


typedef int (*__gconv_init_fct) (struct __gconv_step *);
typedef void (*__gconv_end_fct) (struct __gconv_step *);



typedef int (*__gconv_trans_fct) (struct __gconv_step *,
      struct __gconv_step_data *, void *,
      __const unsigned char *,
      __const unsigned char **,
      __const unsigned char *, unsigned char **,
      size_t *);


typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,
       __const unsigned char *,
       unsigned char *, unsigned char *);


typedef int (*__gconv_trans_query_fct) (__const char *, __const char ***,
     size_t *);


typedef int (*__gconv_trans_init_fct) (void **, const char *);
typedef void (*__gconv_trans_end_fct) (void *);

struct __gconv_trans_data
{

  __gconv_trans_fct __trans_fct;
  __gconv_trans_context_fct __trans_context_fct;
  __gconv_trans_end_fct __trans_end_fct;
  void *__data;
  struct __gconv_trans_data *__next;
};



struct __gconv_step
{
  struct __gconv_loaded_object *__shlib_handle;
  __const char *__modname;

  int __counter;

  char *__from_name;
  char *__to_name;

  __gconv_fct __fct;
  __gconv_btowc_fct __btowc_fct;
  __gconv_init_fct __init_fct;
  __gconv_end_fct __end_fct;



  int __min_needed_from;
  int __max_needed_from;
  int __min_needed_to;
  int __max_needed_to;


  int __stateful;

  void *__data;
};



struct __gconv_step_data
{
  unsigned char *__outbuf;
  unsigned char *__outbufend;



  int __flags;



  int __invocation_counter;



  int __internal_use;

  __mbstate_t *__statep;
  __mbstate_t __state;



  struct __gconv_trans_data *__trans;
};



typedef struct __gconv_info
{
  size_t __nsteps;
  struct __gconv_step *__steps;
  __extension__ struct __gconv_step_data __data [];
} *__gconv_t;
# 45 "/usr/include/_G_config.h" 2 3 4
typedef union
{
  struct __gconv_info __cd;
  struct
  {
    struct __gconv_info __cd;
    struct __gconv_step_data __data;
  } __combined;
} _G_iconv_t;

typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stdarg.h" 1 3 4
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 166 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 176 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 199 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 267 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 315 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 324 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 360 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *) throw ();
extern int __uflow (_IO_FILE *) throw ();
extern int __overflow (_IO_FILE *, int) throw ();
extern wint_t __wunderflow (_IO_FILE *) throw ();
extern wint_t __wuflow (_IO_FILE *) throw ();
extern wint_t __woverflow (_IO_FILE *, wint_t) throw ();
# 450 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp) throw ();
extern int _IO_putc (int __c, _IO_FILE *__fp) throw ();
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp) throw ();





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 480 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t) throw ();
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t) throw ();

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int) throw ();
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int) throw ();

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 542 "/usr/include/libio.h" 3 4
}
# 73 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 86 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 138 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 139 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void);
# 179 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void);



extern char *tmpnam (char *__s) throw ();





extern char *tmpnam_r (char *__s) throw ();
# 201 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 226 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 236 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes);




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream);
# 267 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes);
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream);




extern FILE *fdopen (int __fd, __const char *__modes) throw ();





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw ();


extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes) throw ();




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw ();






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));







extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 458 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 469 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 502 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 548 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 564 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 625 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 636 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 672 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 691 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 714 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 753 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 772 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 842 "/usr/include/stdio.h" 3 4
}
# 83 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 236 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;
# 237 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;






extern double __strtod_internal (__const char *__restrict __nptr,
     char **__restrict __endptr, int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern float __strtof_internal (__const char *__restrict __nptr,
    char **__restrict __endptr, int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern long double __strtold_internal (__const char *__restrict __nptr,
           char **__restrict __endptr,
           int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern long int __strtol_internal (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern unsigned long int __strtoul_internal (__const char *__restrict __nptr,
          char **__restrict __endptr,
          int __base, int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int __strtoll_internal (__const char *__restrict __nptr,
      char **__restrict __endptr,
      int __base, int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



__extension__
extern unsigned long long int __strtoull_internal (__const char *
         __restrict __nptr,
         char **__restrict __endptr,
         int __base, int __group)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 429 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 75 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 93 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 105 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 23 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 121 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4
extern "C" {
# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);


}
# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 29 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern __inline unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern __inline unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern __inline unsigned long long int gnu_dev_makedev (unsigned int __major,
       unsigned int __minor)
     throw ();


__extension__ extern __inline unsigned int
gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline unsigned int
gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline unsigned long long int
gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}
# 224 "/usr/include/sys/types.h" 2 3 4




typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 36 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;


typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned int __flags;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4


}
# 439 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;







extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 613 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));






extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw ();






extern int clearenv (void) throw ();
# 698 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 709 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 719 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 729 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;








extern int system (__const char *__command) ;







extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 757 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;






extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));



extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 822 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 910 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 978 "/usr/include/stdlib.h" 3 4
}
# 84 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 2
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 152 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 85 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4




extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memchr (__const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern void *rawmemchr (__const void *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 121 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/string.h" 3 4


extern char *strchr (__const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

extern char *strrchr (__const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strchrnul (__const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strpbrk (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strstr (__const char *__haystack, __const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));




extern char *strcasestr (__const char *__haystack, __const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 281 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *index (__const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern char *rindex (__const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));



extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));






extern char *basename (__const char *__filename) throw () __attribute__ ((__nonnull__ (1)));
# 426 "/usr/include/string.h" 3 4
}
# 86 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 2
# 1 "../include/bstring.h" 1
# 87 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 2




# 1 "/usr/include/stdint.h" 1 3 4
# 28 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 126 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 138 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 92 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h" 2


extern "C" {
# 230 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
typedef signed int INT;
typedef signed int INT8;
typedef signed int INT16;
typedef signed int INT32;
typedef signed long long INT64;
typedef unsigned long INTPTR;
typedef unsigned int UINT;
typedef unsigned int UINT8;
typedef unsigned int UINT16;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef int BOOL;
typedef signed char mINT8;
typedef signed short mINT16;
typedef signed int mINT32;
typedef signed long long mINT64;
typedef unsigned char mUINT8;
typedef unsigned short mUINT16;
typedef unsigned int mUINT32;
typedef unsigned long long mUINT64;
typedef unsigned char mBOOL;


typedef signed long INTSC;
typedef unsigned long UINTSC;


typedef signed long INTPS;
typedef unsigned long UINTPS;
# 282 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
typedef long double QUADFP;
# 294 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
typedef void *MEM_PTR;



typedef char *STRING;
# 309 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
typedef INT64 TARG_INT;
typedef mINT64 mTARG_INT;
typedef UINT64 TARG_UINT;
typedef mUINT64 mTARG_UINT;
# 354 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
typedef UINT16 CLASS_INDEX;
typedef mUINT16 mCLASS_INDEX;


typedef INT32 PREG_NUM;
typedef mINT32 mPREG_NUM;


typedef mUINT32 IDTYPE;
# 374 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
inline INT Max(INT i, INT j)
{
  return ((i>=j)?i:j);
}
inline INT Min(INT i, INT j)
{
  return ((i<=j)?i:j);
}
# 397 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/defs.h"
}
# 63 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 1
# 48 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 1 3
# 52 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++config.h" 1 3
# 35 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++config.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/os_defines.h" 1 3
# 36 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++config.h" 2 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/cpu_defines.h" 1 3
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++config.h" 2 3




namespace __gnu_debug_def { }

namespace __gnu_debug
{
  using namespace __gnu_debug_def;
}
# 65 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstring" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstring" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstring" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstddef" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstddef" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstddef" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstddef" 2 3

namespace std
{
  using ::ptrdiff_t;
  using ::size_t;
}
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstring" 2 3
# 78 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstring" 3
namespace std
{
  using ::memcpy;
  using ::memmove;
  using ::strcpy;
  using ::strncpy;
  using ::strcat;
  using ::strncat;
  using ::memcmp;
  using ::strcmp;
  using ::strcoll;
  using ::strncmp;
  using ::strxfrm;
  using ::strcspn;
  using ::strspn;
  using ::strtok;
  using ::memset;
  using ::strerror;
  using ::strlen;

  using ::memchr;

  inline void*
  memchr(void* __p, int __c, size_t __n)
  { return memchr(const_cast<const void*>(__p), __c, __n); }

  using ::strchr;

  inline char*
  strchr(char* __s1, int __n)
  { return __builtin_strchr(const_cast<const char*>(__s1), __n); }

  using ::strpbrk;

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(const_cast<const char*>(__s1), __s2); }

  using ::strrchr;

  inline char*
  strrchr(char* __s1, int __n)
  { return __builtin_strrchr(const_cast<const char*>(__s1), __n); }

  using ::strstr;

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(const_cast<const char*>(__s1), __s2); }
}
# 66 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/climits" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/climits" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/climits" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/limits.h" 1 3 4
# 11 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/limits.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/limits.h" 1 3 4
# 122 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 153 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 36 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 37 "/usr/include/bits/local_lim.h" 2 3 4
# 154 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/syslimits.h" 2 3 4
# 12 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/limits.h" 2 3 4
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/climits" 2 3
# 67 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdlib" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdlib" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdlib" 3
# 103 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdlib" 3
namespace std
{
  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }
}
# 159 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdlib" 3
namespace __gnu_cxx
{

  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 192 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;
}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 68 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 3
       
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 1 3
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 3
       
# 40 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdio" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdio" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdio" 3
# 98 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 154 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdio" 3
namespace __gnu_cxx
{
# 169 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using __gnu_cxx::snprintf;
  using __gnu_cxx::vfscanf;
  using __gnu_cxx::vscanf;
  using __gnu_cxx::vsnprintf;
  using __gnu_cxx::vsscanf;
}
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/clocale" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/clocale" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/clocale" 3

# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 27 "/usr/include/bits/locale.h" 3 4
enum
{
  __LC_CTYPE = 0,
  __LC_NUMERIC = 1,
  __LC_TIME = 2,
  __LC_COLLATE = 3,
  __LC_MONETARY = 4,
  __LC_MESSAGES = 5,
  __LC_ALL = 6,
  __LC_PAPER = 7,
  __LC_NAME = 8,
  __LC_ADDRESS = 9,
  __LC_TELEPHONE = 10,
  __LC_MEASUREMENT = 11,
  __LC_IDENTIFICATION = 12
};
# 31 "/usr/include/locale.h" 2 3 4

extern "C" {
# 52 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 119 "/usr/include/locale.h" 3 4
};





extern char *setlocale (int __category, __const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 148 "/usr/include/locale.h" 3 4
typedef __locale_t locale_t;





extern __locale_t newlocale (int __category_mask, __const char *__locale,
        __locale_t __base) throw ();
# 189 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/clocale" 2 3





namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 2 3
# 1 "/usr/include/langinfo.h" 1 3 4
# 24 "/usr/include/langinfo.h" 3 4
# 1 "/usr/include/nl_types.h" 1 3 4
# 31 "/usr/include/nl_types.h" 3 4
extern "C" {


typedef void *nl_catd;


typedef int nl_item;





extern nl_catd catopen (__const char *__cat_name, int __flag) __attribute__ ((__nonnull__ (1)));



extern char *catgets (nl_catd __catalog, int __set, int __number,
        __const char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern int catclose (nl_catd __catalog) throw () __attribute__ ((__nonnull__ (1)));

}
# 25 "/usr/include/langinfo.h" 2 3 4

# 1 "/usr/include/bits/locale.h" 1 3 4
# 27 "/usr/include/langinfo.h" 2 3 4


extern "C" {
# 42 "/usr/include/langinfo.h" 3 4
enum
{



  ABDAY_1 = (((__LC_TIME) << 16) | (0)),

  ABDAY_2,

  ABDAY_3,

  ABDAY_4,

  ABDAY_5,

  ABDAY_6,

  ABDAY_7,



  DAY_1,

  DAY_2,

  DAY_3,

  DAY_4,

  DAY_5,

  DAY_6,

  DAY_7,



  ABMON_1,

  ABMON_2,

  ABMON_3,

  ABMON_4,

  ABMON_5,

  ABMON_6,

  ABMON_7,

  ABMON_8,

  ABMON_9,

  ABMON_10,

  ABMON_11,

  ABMON_12,



  MON_1,

  MON_2,

  MON_3,

  MON_4,

  MON_5,

  MON_6,

  MON_7,

  MON_8,

  MON_9,

  MON_10,

  MON_11,

  MON_12,


  AM_STR,

  PM_STR,


  D_T_FMT,

  D_FMT,

  T_FMT,

  T_FMT_AMPM,


  ERA,

  __ERA_YEAR,



  ERA_D_FMT,

  ALT_DIGITS,

  ERA_D_T_FMT,

  ERA_T_FMT,


  _NL_TIME_ERA_NUM_ENTRIES,
  _NL_TIME_ERA_ENTRIES,

  _NL_WABDAY_1,
  _NL_WABDAY_2,
  _NL_WABDAY_3,
  _NL_WABDAY_4,
  _NL_WABDAY_5,
  _NL_WABDAY_6,
  _NL_WABDAY_7,


  _NL_WDAY_1,
  _NL_WDAY_2,
  _NL_WDAY_3,
  _NL_WDAY_4,
  _NL_WDAY_5,
  _NL_WDAY_6,
  _NL_WDAY_7,


  _NL_WABMON_1,
  _NL_WABMON_2,
  _NL_WABMON_3,
  _NL_WABMON_4,
  _NL_WABMON_5,
  _NL_WABMON_6,
  _NL_WABMON_7,
  _NL_WABMON_8,
  _NL_WABMON_9,
  _NL_WABMON_10,
  _NL_WABMON_11,
  _NL_WABMON_12,


  _NL_WMON_1,
  _NL_WMON_2,
  _NL_WMON_3,
  _NL_WMON_4,
  _NL_WMON_5,
  _NL_WMON_6,
  _NL_WMON_7,
  _NL_WMON_8,
  _NL_WMON_9,
  _NL_WMON_10,
  _NL_WMON_11,
  _NL_WMON_12,

  _NL_WAM_STR,
  _NL_WPM_STR,

  _NL_WD_T_FMT,
  _NL_WD_FMT,
  _NL_WT_FMT,
  _NL_WT_FMT_AMPM,

  _NL_WERA_YEAR,
  _NL_WERA_D_FMT,
  _NL_WALT_DIGITS,
  _NL_WERA_D_T_FMT,
  _NL_WERA_T_FMT,

  _NL_TIME_WEEK_NDAYS,
  _NL_TIME_WEEK_1STDAY,
  _NL_TIME_WEEK_1STWEEK,
  _NL_TIME_FIRST_WEEKDAY,
  _NL_TIME_FIRST_WORKDAY,
  _NL_TIME_CAL_DIRECTION,
  _NL_TIME_TIMEZONE,

  _DATE_FMT,

  _NL_W_DATE_FMT,

  _NL_TIME_CODESET,

  _NL_NUM_LC_TIME,




  _NL_COLLATE_NRULES = (((__LC_COLLATE) << 16) | (0)),
  _NL_COLLATE_RULESETS,
  _NL_COLLATE_TABLEMB,
  _NL_COLLATE_WEIGHTMB,
  _NL_COLLATE_EXTRAMB,
  _NL_COLLATE_INDIRECTMB,
  _NL_COLLATE_GAP1,
  _NL_COLLATE_GAP2,
  _NL_COLLATE_GAP3,
  _NL_COLLATE_TABLEWC,
  _NL_COLLATE_WEIGHTWC,
  _NL_COLLATE_EXTRAWC,
  _NL_COLLATE_INDIRECTWC,
  _NL_COLLATE_SYMB_HASH_SIZEMB,
  _NL_COLLATE_SYMB_TABLEMB,
  _NL_COLLATE_SYMB_EXTRAMB,
  _NL_COLLATE_COLLSEQMB,
  _NL_COLLATE_COLLSEQWC,
  _NL_COLLATE_CODESET,
  _NL_NUM_LC_COLLATE,




  _NL_CTYPE_CLASS = (((__LC_CTYPE) << 16) | (0)),
  _NL_CTYPE_TOUPPER,
  _NL_CTYPE_GAP1,
  _NL_CTYPE_TOLOWER,
  _NL_CTYPE_GAP2,
  _NL_CTYPE_CLASS32,
  _NL_CTYPE_GAP3,
  _NL_CTYPE_GAP4,
  _NL_CTYPE_GAP5,
  _NL_CTYPE_GAP6,
  _NL_CTYPE_CLASS_NAMES,
  _NL_CTYPE_MAP_NAMES,
  _NL_CTYPE_WIDTH,
  _NL_CTYPE_MB_CUR_MAX,
  _NL_CTYPE_CODESET_NAME,
  CODESET = _NL_CTYPE_CODESET_NAME,

  _NL_CTYPE_TOUPPER32,
  _NL_CTYPE_TOLOWER32,
  _NL_CTYPE_CLASS_OFFSET,
  _NL_CTYPE_MAP_OFFSET,
  _NL_CTYPE_INDIGITS_MB_LEN,
  _NL_CTYPE_INDIGITS0_MB,
  _NL_CTYPE_INDIGITS1_MB,
  _NL_CTYPE_INDIGITS2_MB,
  _NL_CTYPE_INDIGITS3_MB,
  _NL_CTYPE_INDIGITS4_MB,
  _NL_CTYPE_INDIGITS5_MB,
  _NL_CTYPE_INDIGITS6_MB,
  _NL_CTYPE_INDIGITS7_MB,
  _NL_CTYPE_INDIGITS8_MB,
  _NL_CTYPE_INDIGITS9_MB,
  _NL_CTYPE_INDIGITS_WC_LEN,
  _NL_CTYPE_INDIGITS0_WC,
  _NL_CTYPE_INDIGITS1_WC,
  _NL_CTYPE_INDIGITS2_WC,
  _NL_CTYPE_INDIGITS3_WC,
  _NL_CTYPE_INDIGITS4_WC,
  _NL_CTYPE_INDIGITS5_WC,
  _NL_CTYPE_INDIGITS6_WC,
  _NL_CTYPE_INDIGITS7_WC,
  _NL_CTYPE_INDIGITS8_WC,
  _NL_CTYPE_INDIGITS9_WC,
  _NL_CTYPE_OUTDIGIT0_MB,
  _NL_CTYPE_OUTDIGIT1_MB,
  _NL_CTYPE_OUTDIGIT2_MB,
  _NL_CTYPE_OUTDIGIT3_MB,
  _NL_CTYPE_OUTDIGIT4_MB,
  _NL_CTYPE_OUTDIGIT5_MB,
  _NL_CTYPE_OUTDIGIT6_MB,
  _NL_CTYPE_OUTDIGIT7_MB,
  _NL_CTYPE_OUTDIGIT8_MB,
  _NL_CTYPE_OUTDIGIT9_MB,
  _NL_CTYPE_OUTDIGIT0_WC,
  _NL_CTYPE_OUTDIGIT1_WC,
  _NL_CTYPE_OUTDIGIT2_WC,
  _NL_CTYPE_OUTDIGIT3_WC,
  _NL_CTYPE_OUTDIGIT4_WC,
  _NL_CTYPE_OUTDIGIT5_WC,
  _NL_CTYPE_OUTDIGIT6_WC,
  _NL_CTYPE_OUTDIGIT7_WC,
  _NL_CTYPE_OUTDIGIT8_WC,
  _NL_CTYPE_OUTDIGIT9_WC,
  _NL_CTYPE_TRANSLIT_TAB_SIZE,
  _NL_CTYPE_TRANSLIT_FROM_IDX,
  _NL_CTYPE_TRANSLIT_FROM_TBL,
  _NL_CTYPE_TRANSLIT_TO_IDX,
  _NL_CTYPE_TRANSLIT_TO_TBL,
  _NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN,
  _NL_CTYPE_TRANSLIT_DEFAULT_MISSING,
  _NL_CTYPE_TRANSLIT_IGNORE_LEN,
  _NL_CTYPE_TRANSLIT_IGNORE,
  _NL_CTYPE_MAP_TO_NONASCII,
  _NL_CTYPE_EXTRA_MAP_1,
  _NL_CTYPE_EXTRA_MAP_2,
  _NL_CTYPE_EXTRA_MAP_3,
  _NL_CTYPE_EXTRA_MAP_4,
  _NL_CTYPE_EXTRA_MAP_5,
  _NL_CTYPE_EXTRA_MAP_6,
  _NL_CTYPE_EXTRA_MAP_7,
  _NL_CTYPE_EXTRA_MAP_8,
  _NL_CTYPE_EXTRA_MAP_9,
  _NL_CTYPE_EXTRA_MAP_10,
  _NL_CTYPE_EXTRA_MAP_11,
  _NL_CTYPE_EXTRA_MAP_12,
  _NL_CTYPE_EXTRA_MAP_13,
  _NL_CTYPE_EXTRA_MAP_14,
  _NL_NUM_LC_CTYPE,




  __INT_CURR_SYMBOL = (((__LC_MONETARY) << 16) | (0)),



  __CURRENCY_SYMBOL,



  __MON_DECIMAL_POINT,



  __MON_THOUSANDS_SEP,



  __MON_GROUPING,



  __POSITIVE_SIGN,



  __NEGATIVE_SIGN,



  __INT_FRAC_DIGITS,



  __FRAC_DIGITS,



  __P_CS_PRECEDES,



  __P_SEP_BY_SPACE,



  __N_CS_PRECEDES,



  __N_SEP_BY_SPACE,



  __P_SIGN_POSN,



  __N_SIGN_POSN,



  _NL_MONETARY_CRNCYSTR,

  __INT_P_CS_PRECEDES,



  __INT_P_SEP_BY_SPACE,



  __INT_N_CS_PRECEDES,



  __INT_N_SEP_BY_SPACE,



  __INT_P_SIGN_POSN,



  __INT_N_SIGN_POSN,



  _NL_MONETARY_DUO_INT_CURR_SYMBOL,
  _NL_MONETARY_DUO_CURRENCY_SYMBOL,
  _NL_MONETARY_DUO_INT_FRAC_DIGITS,
  _NL_MONETARY_DUO_FRAC_DIGITS,
  _NL_MONETARY_DUO_P_CS_PRECEDES,
  _NL_MONETARY_DUO_P_SEP_BY_SPACE,
  _NL_MONETARY_DUO_N_CS_PRECEDES,
  _NL_MONETARY_DUO_N_SEP_BY_SPACE,
  _NL_MONETARY_DUO_INT_P_CS_PRECEDES,
  _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE,
  _NL_MONETARY_DUO_INT_N_CS_PRECEDES,
  _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE,
  _NL_MONETARY_DUO_P_SIGN_POSN,
  _NL_MONETARY_DUO_N_SIGN_POSN,
  _NL_MONETARY_DUO_INT_P_SIGN_POSN,
  _NL_MONETARY_DUO_INT_N_SIGN_POSN,
  _NL_MONETARY_UNO_VALID_FROM,
  _NL_MONETARY_UNO_VALID_TO,
  _NL_MONETARY_DUO_VALID_FROM,
  _NL_MONETARY_DUO_VALID_TO,
  _NL_MONETARY_CONVERSION_RATE,
  _NL_MONETARY_DECIMAL_POINT_WC,
  _NL_MONETARY_THOUSANDS_SEP_WC,
  _NL_MONETARY_CODESET,
  _NL_NUM_LC_MONETARY,



  __DECIMAL_POINT = (((__LC_NUMERIC) << 16) | (0)),



  RADIXCHAR = __DECIMAL_POINT,

  __THOUSANDS_SEP,



  THOUSEP = __THOUSANDS_SEP,

  __GROUPING,



  _NL_NUMERIC_DECIMAL_POINT_WC,
  _NL_NUMERIC_THOUSANDS_SEP_WC,
  _NL_NUMERIC_CODESET,
  _NL_NUM_LC_NUMERIC,

  __YESEXPR = (((__LC_MESSAGES) << 16) | (0)),

  __NOEXPR,

  __YESSTR,



  __NOSTR,



  _NL_MESSAGES_CODESET,
  _NL_NUM_LC_MESSAGES,

  _NL_PAPER_HEIGHT = (((__LC_PAPER) << 16) | (0)),
  _NL_PAPER_WIDTH,
  _NL_PAPER_CODESET,
  _NL_NUM_LC_PAPER,

  _NL_NAME_NAME_FMT = (((__LC_NAME) << 16) | (0)),
  _NL_NAME_NAME_GEN,
  _NL_NAME_NAME_MR,
  _NL_NAME_NAME_MRS,
  _NL_NAME_NAME_MISS,
  _NL_NAME_NAME_MS,
  _NL_NAME_CODESET,
  _NL_NUM_LC_NAME,

  _NL_ADDRESS_POSTAL_FMT = (((__LC_ADDRESS) << 16) | (0)),
  _NL_ADDRESS_COUNTRY_NAME,
  _NL_ADDRESS_COUNTRY_POST,
  _NL_ADDRESS_COUNTRY_AB2,
  _NL_ADDRESS_COUNTRY_AB3,
  _NL_ADDRESS_COUNTRY_CAR,
  _NL_ADDRESS_COUNTRY_NUM,
  _NL_ADDRESS_COUNTRY_ISBN,
  _NL_ADDRESS_LANG_NAME,
  _NL_ADDRESS_LANG_AB,
  _NL_ADDRESS_LANG_TERM,
  _NL_ADDRESS_LANG_LIB,
  _NL_ADDRESS_CODESET,
  _NL_NUM_LC_ADDRESS,

  _NL_TELEPHONE_TEL_INT_FMT = (((__LC_TELEPHONE) << 16) | (0)),
  _NL_TELEPHONE_TEL_DOM_FMT,
  _NL_TELEPHONE_INT_SELECT,
  _NL_TELEPHONE_INT_PREFIX,
  _NL_TELEPHONE_CODESET,
  _NL_NUM_LC_TELEPHONE,

  _NL_MEASUREMENT_MEASUREMENT = (((__LC_MEASUREMENT) << 16) | (0)),
  _NL_MEASUREMENT_CODESET,
  _NL_NUM_LC_MEASUREMENT,

  _NL_IDENTIFICATION_TITLE = (((__LC_IDENTIFICATION) << 16) | (0)),
  _NL_IDENTIFICATION_SOURCE,
  _NL_IDENTIFICATION_ADDRESS,
  _NL_IDENTIFICATION_CONTACT,
  _NL_IDENTIFICATION_EMAIL,
  _NL_IDENTIFICATION_TEL,
  _NL_IDENTIFICATION_FAX,
  _NL_IDENTIFICATION_LANGUAGE,
  _NL_IDENTIFICATION_TERRITORY,
  _NL_IDENTIFICATION_AUDIENCE,
  _NL_IDENTIFICATION_APPLICATION,
  _NL_IDENTIFICATION_ABBREVIATION,
  _NL_IDENTIFICATION_REVISION,
  _NL_IDENTIFICATION_DATE,
  _NL_IDENTIFICATION_CATEGORY,
  _NL_IDENTIFICATION_CODESET,
  _NL_NUM_LC_IDENTIFICATION,


  _NL_NUM
};
# 582 "/usr/include/langinfo.h" 3 4
extern char *nl_langinfo (nl_item __item) throw ();
# 593 "/usr/include/langinfo.h" 3 4
extern char *nl_langinfo_l (nl_item __item, __locale_t l);


}
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 2 3
# 1 "/usr/include/iconv.h" 1 3 4
# 24 "/usr/include/iconv.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 25 "/usr/include/iconv.h" 2 3 4


extern "C" {


typedef void *iconv_t;







extern iconv_t iconv_open (__const char *__tocode, __const char *__fromcode);




extern size_t iconv (iconv_t __cd, char **__restrict __inbuf,
       size_t *__restrict __inbytesleft,
       char **__restrict __outbuf,
       size_t *__restrict __outbytesleft);





extern int iconv_close (iconv_t __cd);

}
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 2 3
# 1 "../../kg++fe/gnu/MIPS/libintl.h" 1 3
# 47 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx
{
  extern "C" __typeof(uselocale) __uselocale;
}


namespace std
{
  typedef __locale_t __c_locale;





  template<typename _Tv>
    int
    __convert_from_v(char* __out,
       const int __size __attribute__ ((__unused__)),
       const char* __fmt,

       _Tv __v, const __c_locale& __cloc, int __prec)
    {
      __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 86 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++locale.h" 3
      const int __ret = std::snprintf(__out, __size, __fmt, __prec, __v);





      __gnu_cxx::__uselocale(__old);




      return __ret;
    }
}
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++io.h" 1 3
# 38 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++io.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr.h" 1 3
# 33 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 114 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/bits/sched.h" 1 3 4
# 65 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


}







struct __sched_param
  {
    int __sched_priority;
  };
# 104 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 33 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 76 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 31 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 40 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 44 "/usr/include/time.h" 2 3 4
# 132 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 181 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();

extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 312 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 327 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 389 "/usr/include/time.h" 3 4
extern int getdate_err;
# 398 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 412 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 25 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/bits/sigset.h" 1 3 4
# 34 "/usr/include/signal.h" 2 3 4
# 400 "/usr/include/signal.h" 3 4
}
# 28 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 29 "/usr/include/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED_NP,
  PTHREAD_MUTEX_ROBUST_NP
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 113 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 143 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 178 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 216 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 462 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 474 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 508 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 708 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
                                    __const struct timespec *__restrict
                                    __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 842 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 954 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
                                        __restrict __attr,
                                        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
                                        int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 998 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
                                           int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1065 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1099 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1113 "/usr/include/pthread.h" 3 4
}
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 171 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 172 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 176 "/usr/include/unistd.h" 2 3 4
# 195 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 196 "/usr/include/unistd.h" 2 3 4
# 243 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 256 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 299 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 310 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 341 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 369 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;
# 391 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 403 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 427 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 469 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();






extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();


extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw ();




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));




extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,


    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

  };
# 553 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw () __attribute__ ((__const__));



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 589 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 615 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 632 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();






extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 835 "/usr/include/unistd.h" 3 4
# 1 "../../include/gnu/getopt.h" 1 3 4
# 31 "../../include/gnu/getopt.h" 3 4
extern "C" {
# 40 "../../include/gnu/getopt.h" 3 4
extern char *optarg;
# 54 "../../include/gnu/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 86 "../../include/gnu/getopt.h" 3 4
struct option
{

  const char *name;





  int has_arg;
  int *flag;
  int val;
};
# 117 "../../include/gnu/getopt.h" 3 4
extern int getopt (int argc, char *const *argv, const char *shortopts);







extern int getopt_long (int argc, char *const *argv, const char *shortopts,
          const struct option *longopts, int *longind);
extern int getopt_long_only (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind);


extern int _getopt_internal (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind,
        int long_only);
# 145 "../../include/gnu/getopt.h" 3 4
}
# 836 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 921 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) throw ();




extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();




extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 958 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 968 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 978 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 988 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1009 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1032 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1042 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1063 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes) throw ();







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1101 "/usr/include/unistd.h" 3 4
}
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
# 88 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 3
extern __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
extern __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
extern __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));
extern __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
extern __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));
extern __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
extern __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));
extern __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
extern __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));


extern __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
extern __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
extern __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
extern __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
extern __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 145 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;
  return __gthread_active_ptr != 0;
}
# 512 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_once (__gthread_once_t *once, void (*func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (once, func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))
{
  return __gthrw_pthread_key_create (key, dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t key)
{
  return __gthrw_pthread_key_delete (key);
}

static inline void *
__gthread_getspecific (__gthread_key_t key)
{
  return __gthrw_pthread_getspecific (key);
}

static inline int
__gthread_setspecific (__gthread_key_t key, const void *ptr)
{
  return __gthrw_pthread_setspecific (key, ptr);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (mutex);
  else
    return 0;
}
# 594 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex)
{
  return __gthread_mutex_lock (mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex)
{
  return __gthread_mutex_trylock (mutex);
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex)
{
  return __gthread_mutex_unlock (mutex);
}
# 115 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++io.h" 2 3

namespace std
{
  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;
}
# 47 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cctype" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cctype" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 30 "/usr/include/ctype.h" 3 4
extern "C" {
# 48 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__const));
# 96 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 247 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 323 "/usr/include/ctype.h" 3 4
}
# 52 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cctype" 2 3
# 68 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stringfwd.h" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stringfwd.h" 3
       
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stringfwd.h" 3



namespace std
{
  template<typename _Alloc>
    class allocator;

  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;

}
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 1 3
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 3
       
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 3



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ctime" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ctime" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ctime" 3
# 65 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 53 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 40 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stdarg.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4







# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4
# 93 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;



# 118 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (__const wchar_t *__s1, __const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (__const wchar_t *__s1, __const wchar_t *__s2) throw ();


extern int wcsncasecmp (__const wchar_t *__s1, __const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (__const wchar_t *__s1, __const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         __const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (__const wchar_t *__s1, __const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, __const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (__const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern wchar_t *wcschr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));

extern wchar_t *wcsrchr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern wchar_t *wcschrnul (__const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (__const wchar_t *__wcs, __const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));

extern wchar_t *wcspbrk (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));

extern wchar_t *wcsstr (__const wchar_t *__haystack, __const wchar_t *__needle)
     throw () __attribute__ ((__pure__));


extern wchar_t *wcstok (wchar_t *__restrict __s,
   __const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (__const wchar_t *__s) throw () __attribute__ ((__pure__));




extern wchar_t *wcswcs (__const wchar_t *__haystack, __const wchar_t *__needle)
     throw () __attribute__ ((__pure__));




extern size_t wcsnlen (__const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern wchar_t *wmemchr (__const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));


extern int wmemcmp (__const wchar_t *__restrict __s1,
      __const wchar_t *__restrict __s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    __const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     __const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (__const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         __const char *__restrict __s, size_t __n,
         mbstate_t *__p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (__const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (__const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 348 "/usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    __const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    __const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     __const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     __const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (__const wchar_t *__s, size_t __n) throw ();






extern double wcstod (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();





extern long int wcstol (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 467 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();





extern double __wcstod_internal (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __group)
     throw ();
extern float __wcstof_internal (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr, int __group)
     throw ();
extern long double __wcstold_internal (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __group) throw ();
# 593 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__dest, __const wchar_t *__src) throw ();



extern wchar_t *wcpncpy (wchar_t *__dest, __const wchar_t *__src, size_t __n)
     throw ();
# 607 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       __const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (__const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       __const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (__const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      __const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (__const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (__const wchar_t *__restrict __s,
      __const wchar_t *__restrict __format, ...)
     throw () ;











extern int vfwscanf (__FILE *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (__const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (__const wchar_t *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;










extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (__const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 768 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 794 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 804 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (__const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   __const wchar_t *__restrict __format,
   __const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     __const wchar_t *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 858 "/usr/include/wchar.h" 3 4
}
# 56 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 2 3
# 70 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 142 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 3
namespace std
{
  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;
  using ::swprintf;
  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;

  using ::vswprintf;

  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;

  using ::wcschr;

  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  using ::wcspbrk;

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  using ::wcsrchr;

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  using ::wcsstr;

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  using ::wmemchr;

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }
}







namespace __gnu_cxx
{





  using ::wcstold;
# 259 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using __gnu_cxx::wcstold;
  using __gnu_cxx::wcstoll;
  using __gnu_cxx::wcstoull;
}
# 47 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 2 3





namespace std
{
# 72 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 3
  typedef int64_t streamoff;





  typedef ptrdiff_t streamsize;

  template<typename _StateT>
    class fpos;
# 94 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 116 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }






      bool
      operator==(const fpos& __other) const
      { return _M_off == __other._M_off; }


      bool
      operator!=(const fpos& __other) const
      { return _M_off != __other._M_off; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
}
# 50 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/functexcept.h" 1 3
# 41 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/functexcept.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/exception_defines.h" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/functexcept.h" 2 3

namespace std
{

  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));
}
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 2 3

namespace std
{
  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  class ios_base;
# 135 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iosfwd" 3
  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;


  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;


}
# 70 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_pair.h" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_pair.h" 3
namespace std
{

  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 142 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }
}
# 71 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/cpp_type_traits.h" 1 3
# 41 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/cpp_type_traits.h" 3
       
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/cpp_type_traits.h" 3
# 75 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/cpp_type_traits.h" 3
namespace __gnu_internal
{
  typedef char __one;
  typedef char __two[2];

  template<typename _Tp>
  __one __test_type(int _Tp::*);
  template<typename _Tp>
  __two& __test_type(...);
}


namespace __gnu_cxx
{
  template<typename _Iterator, typename _Container>
    class __normal_iterator;
}

struct __true_type { };
struct __false_type { };

namespace std
{
  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename, bool>
    struct __enable_if
    {
    };

  template<typename _Tp>
    struct __enable_if<_Tp, true>
    {
      typedef _Tp __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_pod
    {
      enum
 {
   __value = (sizeof(__gnu_internal::__test_type<_Tp>(0))
       != sizeof(__gnu_internal::__one))
 };
    };




  template<typename _Tp>
    struct __is_empty
    {
    private:
      template<typename>
        struct __first { };
      template<typename _Up>
        struct __second
        : public _Up { };

    public:
      enum
 {
   __value = sizeof(__first<_Tp>) == sizeof(__second<_Tp>)
 };
    };

}
# 72 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_types.h" 1 3
# 67 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_types.h" 3
       
# 68 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_types.h" 3

namespace std
{
# 80 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag {};

  struct output_iterator_tag {};

  struct forward_iterator_tag : public input_iterator_tag {};


  struct bidirectional_iterator_tag : public forward_iterator_tag {};


  struct random_access_iterator_tag : public bidirectional_iterator_tag {};
# 104 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };







  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };

  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };







  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }

}
# 73 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_funcs.h" 1 3
# 67 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_funcs.h" 3
       
# 68 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_funcs.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/concept_check.h" 1 3
# 38 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/concept_check.h" 3
       
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/concept_check.h" 3
# 69 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_funcs.h" 2 3

namespace std
{
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 112 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
              bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 170 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      std::__advance(__i, __n, std::__iterator_category(__i));
    }
}
# 74 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 1 3
# 70 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
namespace std
{
# 91 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

    public:
      typedef _Iterator iterator_type;
      typedef typename iterator_traits<_Iterator>::difference_type
              difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

    public:






      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 278 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() - __x.base(); }
# 382 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 408 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }


      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 442 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 457 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 482 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }


      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 516 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 535 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 577 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }


      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 612 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }
}

namespace __gnu_cxx
{







  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

    public:
      typedef typename iterator_traits<_Iterator>::iterator_category
                                                             iterator_category;
      typedef typename iterator_traits<_Iterator>::value_type value_type;
      typedef typename iterator_traits<_Iterator>::difference_type
                                                             difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename std::__enable_if<_Container,
     (std::__are_same<_Iter,
      typename _Container::pointer>::__value)
     >::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 728 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
}
# 75 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/debug/debug.h" 1 3
# 77 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 2 3

namespace std
{
# 90 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {

     

      _Tp __tmp = __a;
      __a = __b;
      __b = __tmp;
    }




  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = *__a;
          *__a = *__b;
          *__b = __tmp;
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 140 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;


     

     

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value &&
 __are_same<_ValueType1 &, _ReferenceType1>::__value &&
 __are_same<_ValueType2 &, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 182 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 204 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 226 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 246 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }







  template<bool, typename>
    struct __copy
    {
      template<typename _II, typename _OI>
        static _OI
        copy(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };

  template<bool _BoolType>
    struct __copy<_BoolType, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        copy(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };

  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
   return __result + (__last - __first);
 }
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
    }

  template<bool, bool>
    struct __copy_normal
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
        { return std::__copy_aux(__first, __last, __result); }
    };

  template<>
    struct __copy_normal<true, false>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
        { return std::__copy_aux(__first.base(), __last.base(), __result); }
    };

  template<>
    struct __copy_normal<false, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
        { return _OI(std::__copy_aux(__first, __last, __result.base())); }
    };

  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
         __result.base())); }
    };
# 373 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

      ;

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
            __result);
    }

  template<bool, typename>
    struct __copy_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };

  template<bool _BoolType>
    struct __copy_backward<_BoolType, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };

  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
              __result);
    }

  template<bool, bool>
    struct __copy_backward_normal
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
        { return std::__copy_backward_aux(__first, __last, __result); }
    };

  template<>
    struct __copy_backward_normal<true, false>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
        { return std::__copy_backward_aux(__first.base(), __last.base(),
       __result); }
    };

  template<>
    struct __copy_backward_normal<false, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
        { return _BI2(std::__copy_backward_aux(__first, __last,
            __result.base())); }
    };

  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
            __result.base())); }
    };
# 502 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
         __result);
    }

  template<bool>
    struct __fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        fill(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
        {
   for (; __first != __last; ++__first)
     *__first = __value;
 }
    };

  template<>
    struct __fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        fill(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
        {
   const _Tp __tmp = __value;
   for (; __first != __last; ++__first)
     *__first = __tmp;
 }
    };
# 558 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      const bool __scalar = __is_scalar<_Tp>::__value;
      std::__fill<__scalar>::fill(__first, __last, __value);
    }


  inline void
  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
  {
    ;
    const unsigned char __tmp = __c;
    std::memset(__first, __tmp, __last - __first);
  }

  inline void
  fill(signed char* __first, signed char* __last, const signed char& __c)
  {
    ;
    const signed char __tmp = __c;
    std::memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
  }

  inline void
  fill(char* __first, char* __last, const char& __c)
  {
    ;
    const char __tmp = __c;
    std::memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
  }

  template<bool>
    struct __fill_n
    {
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
        {
   for (; __n > 0; --__n, ++__first)
     *__first = __value;
   return __first;
 }
    };

  template<>
    struct __fill_n<true>
    {
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
        {
   const _Tp __tmp = __value;
   for (; __n > 0; --__n, ++__first)
     *__first = __tmp;
   return __first;
 }
    };
# 634 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _OutputIterator, typename _Size, typename _Tp>
    _OutputIterator
    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    {

     

      const bool __scalar = __is_scalar<_Tp>::__value;
      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);
    }

  template<typename _Size>
    inline unsigned char*
    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)
    {
      std::fill(__first, __first + __n, __c);
      return __first + __n;
    }

  template<typename _Size>
    inline signed char*
    fill_n(char* __first, _Size __n, const signed char& __c)
    {
      std::fill(__first, __first + __n, __c);
      return __first + __n;
    }

  template<typename _Size>
    inline char*
    fill_n(char* __first, _Size __n, const char& __c)
    {
      std::fill(__first, __first + __n, __c);
      return __first + __n;
    }
# 681 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 716 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      while (__first1 != __last1 && __binary_pred(*__first1, *__first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 746 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    equal(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return true;
    }
# 778 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline bool
    equal(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2,
   _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!__binary_pred(*__first1, *__first2))
   return false;
      return true;
    }
# 810 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     


      ;
      ;

      for (; __first1 != __last1 && __first2 != __last2;
    ++__first1, ++__first2)
 {
   if (*__first1 < *__first2)
     return true;
   if (*__first2 < *__first1)
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 850 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _Compare __comp)
    {

     
     
      ;
      ;

      for (; __first1 != __last1 && __first2 != __last2;
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  inline bool
  lexicographical_compare(const unsigned char* __first1,
     const unsigned char* __last1,
     const unsigned char* __first2,
     const unsigned char* __last2)
  {
    ;
    ;

    const size_t __len1 = __last1 - __first1;
    const size_t __len2 = __last2 - __first2;
    const int __result = std::memcmp(__first1, __first2,
         std::min(__len1, __len2));
    return __result != 0 ? __result < 0 : __len1 < __len2;
  }

  inline bool
  lexicographical_compare(const char* __first1, const char* __last1,
     const char* __first2, const char* __last2)
  {
    ;
    ;







    return std::lexicographical_compare((const unsigned char*) __first1,
     (const unsigned char*) __last1,
     (const unsigned char*) __first2,
     (const unsigned char*) __last2);

  }

}
# 53 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/allocator.h" 1 3
# 52 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/allocator.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++allocator.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/new_allocator.h" 1 3
# 37 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/new_allocator.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/new" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/new" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/exception" 1 3
# 40 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/exception" 3
#pragma GCC visibility push(default)

extern "C++" {

namespace std
{
# 54 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();


    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }


    virtual ~bad_exception() throw();
  };


  typedef void (*terminate_handler) ();

  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();


  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();


  void unexpected() __attribute__ ((__noreturn__));
# 102 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/exception" 3
  bool uncaught_exception() throw();
}

namespace __gnu_cxx
{
# 117 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/exception" 3
  void __verbose_terminate_handler ();
}

}

#pragma GCC visibility pop
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{





  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    virtual ~bad_alloc() throw();
  };

  struct nothrow_t { };
  extern const nothrow_t nothrow;


  typedef void (*new_handler)();

  new_handler set_new_handler(new_handler) throw();
}
# 84 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 38 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/new_allocator.h" 2 3


namespace __gnu_cxx
{







  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return &__x; }

      const_pointer
      address(const_reference __x) const { return &__x; }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__builtin_expect(__n > this->max_size(), false))
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new(__p) _Tp(__val); }

      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }
}
# 35 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/c++allocator.h" 2 3
# 53 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/allocator.h" 2 3

namespace std
{
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };







  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;




}
# 54 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h" 1 3
# 67 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h" 3
namespace std
{






  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }







  template<typename _T1>
    inline void
    _Construct(_T1* __p)
    {


      ::new(static_cast<void*>(__p)) _T1();
    }






  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }
# 116 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h" 3
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
    __false_type)
    {
      for (; __first != __last; ++__first)
 std::_Destroy(&*__first);
    }
# 134 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h" 3
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
    { }
# 146 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h" 3
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
                _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    }
# 166 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h" 3
  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(&*__first);
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>)
    {
      _Destroy(__first, __last);
    }


}
# 55 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_uninitialized.h" 1 3
# 66 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_uninitialized.h" 3
namespace std
{

  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result,
        __true_type)
    { return std::copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result,
        __false_type)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++__first, ++__cur)
     std::_Construct(&*__cur, *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }
# 105 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
        _Is_POD());
    }

  inline char*
  uninitialized_copy(const char* __first, const char* __last, char* __result)
  {
    std::memmove(__result, __first, __last - __first);
    return __result + (__last - __first);
  }

  inline wchar_t*
  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,
       wchar_t* __result)
  {
    std::memmove(__result, __first, sizeof(wchar_t) * (__last - __first));
    return __result + (__last - __first);
  }



  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_fill_aux(_ForwardIterator __first,
        _ForwardIterator __last,
        const _Tp& __x, __true_type)
    { std::fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Tp>
    void
    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x, __false_type)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++__cur)
     std::_Construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur);
   throw;
 }
    }
# 167 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_aux(__first, __last, __x, _Is_POD());
    }



  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
          const _Tp& __x, __true_type)
    { std::fill_n(__first, __n, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
          const _Tp& __x, __false_type)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; --__n, ++__cur)
     std::_Construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur);
   throw;
 }
    }
# 212 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result,
      _Allocator __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(&*__cur, *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result,
      allocator<_Tp>)
    {
      return std::uninitialized_copy(__first, __last, __result);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>)
    {
      std::uninitialized_fill(__first, __last, __x);
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x,
        _Allocator __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x,
        allocator<_Tp2>)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    }
# 323 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last,
         _Allocator __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_copy_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }

}
# 56 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 2 3


namespace __gnu_cxx
{
  using std::size_t;
  using std::ptrdiff_t;
  using std::_Construct;
  using std::_Destroy;
  using std::allocator;

  struct _Slist_node_base
  {
    _Slist_node_base* _M_next;
  };

  inline _Slist_node_base*
  __slist_make_link(_Slist_node_base* __prev_node,
      _Slist_node_base* __new_node)
  {
    __new_node->_M_next = __prev_node->_M_next;
    __prev_node->_M_next = __new_node;
    return __new_node;
  }

  inline _Slist_node_base*
  __slist_previous(_Slist_node_base* __head,
     const _Slist_node_base* __node)
  {
    while (__head && __head->_M_next != __node)
      __head = __head->_M_next;
    return __head;
  }

  inline const _Slist_node_base*
  __slist_previous(const _Slist_node_base* __head,
     const _Slist_node_base* __node)
  {
    while (__head && __head->_M_next != __node)
      __head = __head->_M_next;
    return __head;
  }

  inline void
  __slist_splice_after(_Slist_node_base* __pos,
         _Slist_node_base* __before_first,
         _Slist_node_base* __before_last)
  {
    if (__pos != __before_first && __pos != __before_last)
      {
 _Slist_node_base* __first = __before_first->_M_next;
 _Slist_node_base* __after = __pos->_M_next;
 __before_first->_M_next = __before_last->_M_next;
 __pos->_M_next = __first;
 __before_last->_M_next = __after;
      }
  }

  inline void
  __slist_splice_after(_Slist_node_base* __pos, _Slist_node_base* __head)
  {
    _Slist_node_base* __before_last = __slist_previous(__head, 0);
    if (__before_last != __head)
      {
 _Slist_node_base* __after = __pos->_M_next;
 __pos->_M_next = __head->_M_next;
 __head->_M_next = 0;
 __before_last->_M_next = __after;
      }
  }

  inline _Slist_node_base*
  __slist_reverse(_Slist_node_base* __node)
  {
    _Slist_node_base* __result = __node;
    __node = __node->_M_next;
    __result->_M_next = 0;
    while(__node)
      {
 _Slist_node_base* __next = __node->_M_next;
 __node->_M_next = __result;
 __result = __node;
 __node = __next;
      }
    return __result;
  }

  inline size_t
  __slist_size(_Slist_node_base* __node)
  {
    size_t __result = 0;
    for (; __node != 0; __node = __node->_M_next)
      ++__result;
    return __result;
  }

  template <class _Tp>
    struct _Slist_node : public _Slist_node_base
    {
      _Tp _M_data;
    };

  struct _Slist_iterator_base
  {
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef std::forward_iterator_tag iterator_category;

    _Slist_node_base* _M_node;

    _Slist_iterator_base(_Slist_node_base* __x)
    : _M_node(__x) {}

    void
    _M_incr()
    { _M_node = _M_node->_M_next; }

    bool
    operator==(const _Slist_iterator_base& __x) const
    { return _M_node == __x._M_node; }

    bool
    operator!=(const _Slist_iterator_base& __x) const
    { return _M_node != __x._M_node; }
  };

  template <class _Tp, class _Ref, class _Ptr>
    struct _Slist_iterator : public _Slist_iterator_base
    {
      typedef _Slist_iterator<_Tp, _Tp&, _Tp*> iterator;
      typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
      typedef _Slist_iterator<_Tp, _Ref, _Ptr> _Self;

      typedef _Tp value_type;
      typedef _Ptr pointer;
      typedef _Ref reference;
      typedef _Slist_node<_Tp> _Node;

      explicit
      _Slist_iterator(_Node* __x)
      : _Slist_iterator_base(__x) {}

      _Slist_iterator()
      : _Slist_iterator_base(0) {}

      _Slist_iterator(const iterator& __x)
      : _Slist_iterator_base(__x._M_node) {}

      reference
      operator*() const
      { return ((_Node*) _M_node)->_M_data; }

      pointer
      operator->() const
      { return &(operator*()); }

      _Self&
      operator++()
      {
 _M_incr();
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_incr();
 return __tmp;
      }
    };

  template <class _Tp, class _Alloc>
    struct _Slist_base
    : public _Alloc::template rebind<_Slist_node<_Tp> >::other
    {
      typedef typename _Alloc::template rebind<_Slist_node<_Tp> >::other
        _Node_alloc;
      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const
      { return *static_cast<const _Node_alloc*>(this); }

      _Slist_base(const allocator_type& __a)
      : _Node_alloc(__a)
      { this->_M_head._M_next = 0; }

      ~_Slist_base()
      { _M_erase_after(&this->_M_head, 0); }

    protected:
      _Slist_node_base _M_head;

      _Slist_node<_Tp>*
      _M_get_node()
      { return _Node_alloc::allocate(1); }

      void
      _M_put_node(_Slist_node<_Tp>* __p)
      { _Node_alloc::deallocate(__p, 1); }

    protected:
      _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)
      {
 _Slist_node<_Tp>* __next = (_Slist_node<_Tp>*) (__pos->_M_next);
 _Slist_node_base* __next_next = __next->_M_next;
 __pos->_M_next = __next_next;
 get_allocator().destroy(&__next->_M_data);
 _M_put_node(__next);
 return __next_next;
      }
      _Slist_node_base* _M_erase_after(_Slist_node_base*, _Slist_node_base*);
    };

  template <class _Tp, class _Alloc>
    _Slist_node_base*
    _Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,
         _Slist_node_base* __last_node)
    {
      _Slist_node<_Tp>* __cur = (_Slist_node<_Tp>*) (__before_first->_M_next);
      while (__cur != __last_node)
 {
   _Slist_node<_Tp>* __tmp = __cur;
   __cur = (_Slist_node<_Tp>*) __cur->_M_next;
   get_allocator().destroy(&__tmp->_M_data);
   _M_put_node(__tmp);
 }
      __before_first->_M_next = __last_node;
      return __last_node;
    }






  template <class _Tp, class _Alloc = allocator<_Tp> >
    class slist : private _Slist_base<_Tp,_Alloc>
    {

     

    private:
      typedef _Slist_base<_Tp,_Alloc> _Base;

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef _Slist_iterator<_Tp, _Tp&, _Tp*> iterator;
      typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;

      typedef typename _Base::allocator_type allocator_type;

      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }

    private:
      typedef _Slist_node<_Tp> _Node;
      typedef _Slist_node_base _Node_base;
      typedef _Slist_iterator_base _Iterator_base;

      _Node*
      _M_create_node(const value_type& __x)
      {
 _Node* __node = this->_M_get_node();
 try
   {
     get_allocator().construct(&__node->_M_data, __x);
     __node->_M_next = 0;
   }
 catch(...)
   {
     this->_M_put_node(__node);
     throw;
   }
 return __node;
      }

      _Node*
      _M_create_node()
      {
 _Node* __node = this->_M_get_node();
 try
   {
     get_allocator().construct(&__node->_M_data, value_type());
     __node->_M_next = 0;
   }
 catch(...)
   {
     this->_M_put_node(__node);
     throw;
   }
 return __node;
      }

    public:
      explicit
      slist(const allocator_type& __a = allocator_type())
      : _Base(__a) {}

      slist(size_type __n, const value_type& __x,
     const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_insert_after_fill(&this->_M_head, __n, __x); }

      explicit
      slist(size_type __n)
      : _Base(allocator_type())
      { _M_insert_after_fill(&this->_M_head, __n, value_type()); }



      template <class _InputIterator>
        slist(_InputIterator __first, _InputIterator __last,
       const allocator_type& __a = allocator_type())
 : _Base(__a)
        { _M_insert_after_range(&this->_M_head, __first, __last); }

      slist(const slist& __x)
      : _Base(__x.get_allocator())
      { _M_insert_after_range(&this->_M_head, __x.begin(), __x.end()); }

      slist&
      operator= (const slist& __x);

      ~slist() {}

    public:





      void
      assign(size_type __n, const _Tp& __val)
      { _M_fill_assign(__n, __val); }

      void
      _M_fill_assign(size_type __n, const _Tp& __val);

      template <class _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }

      template <class _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign((size_type) __n, (_Tp) __val); }

      template <class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type);

    public:

      iterator
      begin()
      { return iterator((_Node*)this->_M_head._M_next); }

      const_iterator
      begin() const
      { return const_iterator((_Node*)this->_M_head._M_next);}

      iterator
      end()
      { return iterator(0); }

      const_iterator
      end() const
      { return const_iterator(0); }
# 446 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/slist" 3
      iterator
      before_begin()
      { return iterator((_Node*) &this->_M_head); }

      const_iterator
      before_begin() const
      { return const_iterator((_Node*) &this->_M_head); }

      size_type
      size() const
      { return __slist_size(this->_M_head._M_next); }

      size_type
      max_size() const
      { return size_type(-1); }

      bool
      empty() const
      { return this->_M_head._M_next == 0; }

      void
      swap(slist& __x)
      { std::swap(this->_M_head._M_next, __x._M_head._M_next); }

    public:

      reference
      front()
      { return ((_Node*) this->_M_head._M_next)->_M_data; }

      const_reference
      front() const
      { return ((_Node*) this->_M_head._M_next)->_M_data; }

      void
      push_front(const value_type& __x)
      { __slist_make_link(&this->_M_head, _M_create_node(__x)); }

      void
      push_front()
      { __slist_make_link(&this->_M_head, _M_create_node()); }

      void
      pop_front()
      {
 _Node* __node = (_Node*) this->_M_head._M_next;
 this->_M_head._M_next = __node->_M_next;
 get_allocator().destroy(&__node->_M_data);
 this->_M_put_node(__node);
      }

      iterator
      previous(const_iterator __pos)
      { return iterator((_Node*) __slist_previous(&this->_M_head,
        __pos._M_node)); }

      const_iterator
      previous(const_iterator __pos) const
      { return const_iterator((_Node*) __slist_previous(&this->_M_head,
       __pos._M_node)); }

    private:
      _Node*
      _M_insert_after(_Node_base* __pos, const value_type& __x)
      { return (_Node*) (__slist_make_link(__pos, _M_create_node(__x))); }

      _Node*
      _M_insert_after(_Node_base* __pos)
      { return (_Node*) (__slist_make_link(__pos, _M_create_node())); }

      void
      _M_insert_after_fill(_Node_base* __pos,
      size_type __n, const value_type& __x)
      {
 for (size_type __i = 0; __i < __n; ++__i)
   __pos = __slist_make_link(__pos, _M_create_node(__x));
      }


      template <class _InIterator>
        void
        _M_insert_after_range(_Node_base* __pos,
         _InIterator __first, _InIterator __last)
        {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_insert_after_range(__pos, __first, __last, _Integral());
 }

      template <class _Integer>
        void
        _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,
         __true_type)
        { _M_insert_after_fill(__pos, __n, __x); }

      template <class _InIterator>
        void
        _M_insert_after_range(_Node_base* __pos,
         _InIterator __first, _InIterator __last,
         __false_type)
        {
   while (__first != __last)
     {
       __pos = __slist_make_link(__pos, _M_create_node(*__first));
       ++__first;
     }
 }

    public:
      iterator
      insert_after(iterator __pos, const value_type& __x)
      { return iterator(_M_insert_after(__pos._M_node, __x)); }

      iterator
      insert_after(iterator __pos)
      { return insert_after(__pos, value_type()); }

      void
      insert_after(iterator __pos, size_type __n, const value_type& __x)
      { _M_insert_after_fill(__pos._M_node, __n, __x); }



      template <class _InIterator>
        void
        insert_after(iterator __pos, _InIterator __first, _InIterator __last)
        { _M_insert_after_range(__pos._M_node, __first, __last); }

      iterator
      insert(iterator __pos, const value_type& __x)
      { return iterator(_M_insert_after(__slist_previous(&this->_M_head,
        __pos._M_node),
     __x)); }

      iterator
      insert(iterator __pos)
      { return iterator(_M_insert_after(__slist_previous(&this->_M_head,
        __pos._M_node),
     value_type())); }

      void
      insert(iterator __pos, size_type __n, const value_type& __x)
      { _M_insert_after_fill(__slist_previous(&this->_M_head, __pos._M_node),
        __n, __x); }



      template <class _InIterator>
        void
        insert(iterator __pos, _InIterator __first, _InIterator __last)
        { _M_insert_after_range(__slist_previous(&this->_M_head, __pos._M_node),
    __first, __last); }

    public:
      iterator
      erase_after(iterator __pos)
      { return iterator((_Node*) this->_M_erase_after(__pos._M_node)); }

      iterator
      erase_after(iterator __before_first, iterator __last)
      {
 return iterator((_Node*) this->_M_erase_after(__before_first._M_node,
            __last._M_node));
      }

      iterator
      erase(iterator __pos)
      {
 return iterator((_Node*) this->_M_erase_after
   (__slist_previous(&this->_M_head, __pos._M_node)));
      }

      iterator
      erase(iterator __first, iterator __last)
      {
 return iterator((_Node*) this->_M_erase_after
   (__slist_previous(&this->_M_head, __first._M_node),
    __last._M_node));
      }

      void
      resize(size_type new_size, const _Tp& __x);

      void
      resize(size_type new_size)
      { resize(new_size, _Tp()); }

      void
      clear()
      { this->_M_erase_after(&this->_M_head, 0); }

    public:


      void
      splice_after(iterator __pos,
     iterator __before_first, iterator __before_last)
      {
 if (__before_first != __before_last)
   __slist_splice_after(__pos._M_node, __before_first._M_node,
          __before_last._M_node);
      }



      void
      splice_after(iterator __pos, iterator __prev)
      { __slist_splice_after(__pos._M_node,
        __prev._M_node, __prev._M_node->_M_next); }




      void
      splice_after(iterator __pos, slist& __x)
      { __slist_splice_after(__pos._M_node, &__x._M_head); }


      void
      splice(iterator __pos, slist& __x)
      {
 if (__x._M_head._M_next)
   __slist_splice_after(__slist_previous(&this->_M_head, __pos._M_node),
          &__x._M_head,
          __slist_previous(&__x._M_head, 0)); }


      void
      splice(iterator __pos, slist& __x, iterator __i)
      { __slist_splice_after(__slist_previous(&this->_M_head, __pos._M_node),
        __slist_previous(&__x._M_head, __i._M_node),
        __i._M_node); }



      void
      splice(iterator __pos, slist& __x, iterator __first, iterator __last)
      {
 if (__first != __last)
   __slist_splice_after(__slist_previous(&this->_M_head, __pos._M_node),
          __slist_previous(&__x._M_head, __first._M_node),
          __slist_previous(__first._M_node,
      __last._M_node));
      }

    public:
      void
      reverse()
      {
 if (this->_M_head._M_next)
   this->_M_head._M_next = __slist_reverse(this->_M_head._M_next);
      }

      void
      remove(const _Tp& __val);

      void
      unique();

      void
      merge(slist& __x);

      void
      sort();

      template <class _Predicate>
        void
        remove_if(_Predicate __pred);

      template <class _BinaryPredicate>
        void
        unique(_BinaryPredicate __pred);

      template <class _StrictWeakOrdering>
        void
        merge(slist&, _StrictWeakOrdering);

      template <class _StrictWeakOrdering>
        void
        sort(_StrictWeakOrdering __comp);
    };

  template <class _Tp, class _Alloc>
    slist<_Tp, _Alloc>&
    slist<_Tp, _Alloc>::operator=(const slist<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   _Node_base* __p1 = &this->_M_head;
   _Node* __n1 = (_Node*) this->_M_head._M_next;
   const _Node* __n2 = (const _Node*) __x._M_head._M_next;
   while (__n1 && __n2)
     {
       __n1->_M_data = __n2->_M_data;
       __p1 = __n1;
       __n1 = (_Node*) __n1->_M_next;
       __n2 = (const _Node*) __n2->_M_next;
     }
   if (__n2 == 0)
     this->_M_erase_after(__p1, 0);
   else
     _M_insert_after_range(__p1, const_iterator((_Node*)__n2),
                                  const_iterator(0));
 }
      return *this;
    }

  template <class _Tp, class _Alloc>
    void
    slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val)
    {
      _Node_base* __prev = &this->_M_head;
      _Node* __node = (_Node*) this->_M_head._M_next;
      for (; __node != 0 && __n > 0; --__n)
 {
   __node->_M_data = __val;
   __prev = __node;
   __node = (_Node*) __node->_M_next;
 }
      if (__n > 0)
 _M_insert_after_fill(__prev, __n, __val);
      else
 this->_M_erase_after(__prev, 0);
    }

  template <class _Tp, class _Alloc>
    template <class _InputIterator>
      void
      slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIterator __first,
          _InputIterator __last,
          __false_type)
      {
 _Node_base* __prev = &this->_M_head;
 _Node* __node = (_Node*) this->_M_head._M_next;
 while (__node != 0 && __first != __last)
   {
     __node->_M_data = *__first;
     __prev = __node;
     __node = (_Node*) __node->_M_next;
     ++__first;
   }
 if (__first != __last)
   _M_insert_after_range(__prev, __first, __last);
 else
   this->_M_erase_after(__prev, 0);
      }

  template <class _Tp, class _Alloc>
    inline bool
    operator==(const slist<_Tp, _Alloc>& _SL1, const slist<_Tp, _Alloc>& _SL2)
    {
      typedef typename slist<_Tp,_Alloc>::const_iterator const_iterator;
      const_iterator __end1 = _SL1.end();
      const_iterator __end2 = _SL2.end();

      const_iterator __i1 = _SL1.begin();
      const_iterator __i2 = _SL2.begin();
      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
 {
   ++__i1;
   ++__i2;
 }
      return __i1 == __end1 && __i2 == __end2;
    }


  template <class _Tp, class _Alloc>
    inline bool
    operator<(const slist<_Tp, _Alloc>& _SL1, const slist<_Tp, _Alloc>& _SL2)
    { return std::lexicographical_compare(_SL1.begin(), _SL1.end(),
       _SL2.begin(), _SL2.end()); }

  template <class _Tp, class _Alloc>
    inline bool
    operator!=(const slist<_Tp, _Alloc>& _SL1, const slist<_Tp, _Alloc>& _SL2)
    { return !(_SL1 == _SL2); }

  template <class _Tp, class _Alloc>
    inline bool
    operator>(const slist<_Tp, _Alloc>& _SL1, const slist<_Tp, _Alloc>& _SL2)
    { return _SL2 < _SL1; }

  template <class _Tp, class _Alloc>
    inline bool
    operator<=(const slist<_Tp, _Alloc>& _SL1, const slist<_Tp, _Alloc>& _SL2)
    { return !(_SL2 < _SL1); }

  template <class _Tp, class _Alloc>
    inline bool
    operator>=(const slist<_Tp, _Alloc>& _SL1, const slist<_Tp, _Alloc>& _SL2)
    { return !(_SL1 < _SL2); }

  template <class _Tp, class _Alloc>
    inline void
    swap(slist<_Tp, _Alloc>& __x, slist<_Tp, _Alloc>& __y)
    { __x.swap(__y); }

  template <class _Tp, class _Alloc>
    void
    slist<_Tp, _Alloc>::resize(size_type __len, const _Tp& __x)
    {
      _Node_base* __cur = &this->_M_head;
      while (__cur->_M_next != 0 && __len > 0)
 {
   --__len;
   __cur = __cur->_M_next;
 }
      if (__cur->_M_next)
 this->_M_erase_after(__cur, 0);
      else
 _M_insert_after_fill(__cur, __len, __x);
    }

  template <class _Tp, class _Alloc>
    void
    slist<_Tp, _Alloc>::remove(const _Tp& __val)
    {
      _Node_base* __cur = &this->_M_head;
      while (__cur && __cur->_M_next)
 {
   if (((_Node*) __cur->_M_next)->_M_data == __val)
     this->_M_erase_after(__cur);
   else
     __cur = __cur->_M_next;
 }
    }

  template <class _Tp, class _Alloc>
    void
    slist<_Tp, _Alloc>::unique()
    {
      _Node_base* __cur = this->_M_head._M_next;
      if (__cur)
 {
   while (__cur->_M_next)
     {
       if (((_Node*)__cur)->_M_data
    == ((_Node*)(__cur->_M_next))->_M_data)
  this->_M_erase_after(__cur);
       else
  __cur = __cur->_M_next;
     }
 }
    }

  template <class _Tp, class _Alloc>
    void
    slist<_Tp, _Alloc>::merge(slist<_Tp, _Alloc>& __x)
    {
      _Node_base* __n1 = &this->_M_head;
      while (__n1->_M_next && __x._M_head._M_next)
 {
   if (((_Node*) __x._M_head._M_next)->_M_data
       < ((_Node*) __n1->_M_next)->_M_data)
     __slist_splice_after(__n1, &__x._M_head, __x._M_head._M_next);
   __n1 = __n1->_M_next;
 }
      if (__x._M_head._M_next)
 {
   __n1->_M_next = __x._M_head._M_next;
   __x._M_head._M_next = 0;
 }
    }

  template <class _Tp, class _Alloc>
    void
    slist<_Tp, _Alloc>::sort()
    {
      if (this->_M_head._M_next && this->_M_head._M_next->_M_next)
 {
   slist __carry;
   slist __counter[64];
   int __fill = 0;
   while (!empty())
     {
       __slist_splice_after(&__carry._M_head,
       &this->_M_head, this->_M_head._M_next);
       int __i = 0;
       while (__i < __fill && !__counter[__i].empty())
  {
    __counter[__i].merge(__carry);
    __carry.swap(__counter[__i]);
    ++__i;
  }
       __carry.swap(__counter[__i]);
       if (__i == __fill)
  ++__fill;
     }

   for (int __i = 1; __i < __fill; ++__i)
     __counter[__i].merge(__counter[__i-1]);
   this->swap(__counter[__fill-1]);
 }
    }

  template <class _Tp, class _Alloc>
    template <class _Predicate>
      void slist<_Tp, _Alloc>::remove_if(_Predicate __pred)
      {
 _Node_base* __cur = &this->_M_head;
 while (__cur->_M_next)
   {
     if (__pred(((_Node*) __cur->_M_next)->_M_data))
       this->_M_erase_after(__cur);
     else
       __cur = __cur->_M_next;
   }
      }

  template <class _Tp, class _Alloc>
    template <class _BinaryPredicate>
      void
      slist<_Tp, _Alloc>::unique(_BinaryPredicate __pred)
      {
 _Node* __cur = (_Node*) this->_M_head._M_next;
 if (__cur)
   {
     while (__cur->_M_next)
       {
  if (__pred(((_Node*)__cur)->_M_data,
      ((_Node*)(__cur->_M_next))->_M_data))
    this->_M_erase_after(__cur);
  else
    __cur = (_Node*) __cur->_M_next;
       }
   }
      }

  template <class _Tp, class _Alloc>
    template <class _StrictWeakOrdering>
      void
      slist<_Tp, _Alloc>::merge(slist<_Tp, _Alloc>& __x,
          _StrictWeakOrdering __comp)
      {
 _Node_base* __n1 = &this->_M_head;
 while (__n1->_M_next && __x._M_head._M_next)
   {
     if (__comp(((_Node*) __x._M_head._M_next)->_M_data,
         ((_Node*) __n1->_M_next)->_M_data))
       __slist_splice_after(__n1, &__x._M_head, __x._M_head._M_next);
     __n1 = __n1->_M_next;
   }
 if (__x._M_head._M_next)
   {
     __n1->_M_next = __x._M_head._M_next;
     __x._M_head._M_next = 0;
   }
      }

  template <class _Tp, class _Alloc>
    template <class _StrictWeakOrdering>
      void
      slist<_Tp, _Alloc>::sort(_StrictWeakOrdering __comp)
      {
 if (this->_M_head._M_next && this->_M_head._M_next->_M_next)
   {
     slist __carry;
     slist __counter[64];
     int __fill = 0;
     while (!empty())
       {
  __slist_splice_after(&__carry._M_head,
         &this->_M_head, this->_M_head._M_next);
  int __i = 0;
  while (__i < __fill && !__counter[__i].empty())
    {
      __counter[__i].merge(__carry, __comp);
      __carry.swap(__counter[__i]);
      ++__i;
    }
  __carry.swap(__counter[__i]);
  if (__i == __fill)
    ++__fill;
       }

     for (int __i = 1; __i < __fill; ++__i)
       __counter[__i].merge(__counter[__i-1], __comp);
     this->swap(__counter[__fill-1]);
   }
      }

}

namespace std
{



  template <class _Tp, class _Alloc>
    class insert_iterator<__gnu_cxx::slist<_Tp, _Alloc> >
    {
    protected:
      typedef __gnu_cxx::slist<_Tp, _Alloc> _Container;
      _Container* container;
      typename _Container::iterator iter;

    public:
      typedef _Container container_type;
      typedef output_iterator_tag iterator_category;
      typedef void value_type;
      typedef void difference_type;
      typedef void pointer;
      typedef void reference;

      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x)
      {
 if (__i == __x.begin())
   iter = __x.before_begin();
 else
   iter = __x.previous(__i);
      }

      insert_iterator<_Container>&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert_after(iter, __value);
 return *this;
      }

      insert_iterator<_Container>&
      operator*()
      { return *this; }

      insert_iterator<_Container>&
      operator++()
      { return *this; }

      insert_iterator<_Container>&
      operator++(int)
      { return *this; }
};

}
# 49 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2


# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h" 1
# 57 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 1 3
# 63 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 3
       
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 3






# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 1 3
# 68 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
namespace std
{





  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 _Tp* _M_start;
 _Tp* _M_finish;
 _Tp* _M_end_of_storage;
 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a)
      { }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 157 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef vector<_Tp, _Alloc> vector_type;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector_type>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:





      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      explicit
      vector(const allocator_type& __a = allocator_type())
      : _Base(__a)
      { }
# 213 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_start + __n;
      }
# 232 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x.get_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 255 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
      }
# 284 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 297 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 313 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }


      using _Base::get_allocator;







      iterator
      begin()
      { return iterator (this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator (this->_M_impl._M_start); }






      iterator
      end()
      { return iterator (this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator (this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }



      size_type
      size() const
      { return size_type(end() - begin()); }


      size_type
      max_size() const
      { return size_type(-1) / sizeof(value_type); }
# 420 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size < size())
   erase(begin() + __new_size, end());
 else
   insert(end(), __new_size - size(), __x);
      }





      size_type
      capacity() const
      { return size_type(const_iterator(this->_M_impl._M_end_of_storage)
    - begin()); }





      bool
      empty() const
      { return begin() == end(); }
# 463 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 478 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(begin() + __n); }
# 493 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(begin() + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 518 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 536 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 582 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      pointer
      data()
      { return pointer(this->_M_impl._M_start); }

      const_pointer
      data() const
      { return const_pointer(this->_M_impl._M_start); }
# 601 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }
# 622 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 640 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 656 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 674 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 699 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 720 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 732 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
      void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);
      }







      void
      clear()
      {
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_start;
      }

    protected:






      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }





      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }






      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        {
   _M_fill_assign(static_cast<size_type>(__n),
    static_cast<value_type>(__val));
 }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);





      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        {
   _M_fill_insert(__pos, static_cast<size_type>(__n),
    static_cast<value_type>(__val));
 }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);


      void
      _M_insert_aux(iterator __position, const value_type& __x);
    };
# 930 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 947 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }
}
# 71 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_bvector.h" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_bvector.h" 3
namespace std
{
  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   _M_offset = static_cast<unsigned int>(__n + int(_S_word_bit));
   --_M_p;
 }
      else
 _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  template<class _Alloc>
    class _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;
 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }

      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };
}




namespace std
{
# 425 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : public _Bvector_base<_Alloc>
  {
  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;

    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;

    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;

    typedef typename _Bvector_base<_Alloc>::allocator_type allocator_type;

    allocator_type get_allocator() const
    { return _Bvector_base<_Alloc>::get_allocator(); }

  protected:
    using _Bvector_base<_Alloc>::_M_allocate;
    using _Bvector_base<_Alloc>::_M_deallocate;

  protected:
    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len = size() ? 2 * size()
                                  : static_cast<size_type>(_S_word_bit);
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = std::copy(begin(), __position, iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

    template<class _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 this->_M_impl._M_start = iterator();
 this->_M_impl._M_finish = iterator();
 this->_M_impl._M_end_of_storage = 0;
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<class _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }

    template<class _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<class _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len = size() + std::max(size(), __n);
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = std::copy(begin(), __position,
      iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  public:
    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }

    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    { return size_type(-1); }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }
    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    { return *(begin() + difference_type(__n)); }

    const_reference
    operator[](size_type __n) const
    { return *(begin() + difference_type(__n)); }

    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    explicit
    vector(const allocator_type& __a = allocator_type())
    : _Bvector_base<_Alloc>(__a) { }

    vector(size_type __n, bool __value,
    const allocator_type& __a = allocator_type())
    : _Bvector_base<_Alloc>(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    explicit
    vector(size_type __n)
    : _Bvector_base<_Alloc>(allocator_type())
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p,
  this->_M_impl._M_end_of_storage, 0);
    }

    vector(const vector& __x)
    : _Bvector_base<_Alloc>(__x.get_allocator())
    {
      _M_initialize(__x.size());
      std::copy(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    template<class _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(__n);
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<class _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<class _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Bvector_base<_Alloc>(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      std::copy(__x.begin(), __x.end(), begin());
      this->_M_impl._M_finish = begin() + difference_type(__x.size());
      return *this;
    }






    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   erase(begin() + __n, end());
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    void
    assign(size_t __n, bool __x)
    { _M_fill_assign(__n, __x); }

    template<class _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }

    template<class _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign((size_t) __n, (bool) __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    template<class _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   erase(__cur, end());
 else
   insert(end(), __first, __last);
      }

    template<class _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   erase(std::copy(__first, __last, begin()), end());
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }

    void
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = std::copy(begin(), end(),
           iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector<bool, _Alloc>& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, bool __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }



    template<class _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<class _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    template<class _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len = size() + std::max(size(), __n);
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = std::copy(begin(), __position, iterator(__q, 0));
   std::fill_n(__i, __n, __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

    void
    insert(iterator __position, size_type __n, bool __x)
    { _M_fill_insert(__position, __n, __x); }

    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      this->_M_impl._M_finish = std::copy(__last, end(), __first);
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        erase(begin() + difference_type(__new_size), end());
      else
        insert(end(), __new_size - size(), __x);
    }

    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { erase(begin(), end()); }
  };
}
# 72 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 2 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/vector.tcc" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/vector.tcc" 3
namespace std
{
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
            this->_M_impl._M_start,
            this->_M_impl._M_finish);
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      iterator __i(std::copy(__last, end(), __first));
      std::_Destroy(__i, end(), _M_get_Tp_allocator());
      this->_M_impl._M_finish = this->_M_impl._M_finish - (__last - __first);
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       iterator __i(std::copy(__x.begin(), __x.end(), begin()));
       std::_Destroy(__i, end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x.begin(), __x.begin() + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x.begin() + size(),
       __x.end(), this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        erase(std::fill_n(begin(), __n, __val), end());
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur(begin());
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   erase(__cur, end());
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   {
     iterator __new_finish(std::copy(__first, __last,
           this->_M_impl._M_start));
     std::_Destroy(__new_finish, end(), _M_get_Tp_allocator());
     this->_M_impl._M_finish = __new_finish.base();
   }
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      *(this->_M_impl._M_finish - 1));
   ++this->_M_impl._M_finish;
   _Tp __x_copy = __x;
   std::copy_backward(__position,
        iterator(this->_M_impl._M_finish-2),
        iterator(this->_M_impl._M_finish-1));
   *__position = __x_copy;
 }
      else
 {
   const size_type __old_size = size();
   if (__old_size == this->max_size())
     __throw_length_error(("vector::_M_insert_aux"));




   size_type __len = __old_size != 0 ? 2 * __old_size : 1;
   if (__len < __old_size)
     __len = this->max_size();

   iterator __new_start(this->_M_allocate(__len));
   iterator __new_finish(__new_start);
   try
     {
       __new_finish =
  std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
         __position,
         __new_start,
         _M_get_Tp_allocator());
       this->_M_impl.construct(__new_finish.base(), __x);
       ++__new_finish;
       __new_finish =
  std::__uninitialized_copy_a(__position,
         iterator(this->_M_impl._M_finish),
         __new_finish,
         _M_get_Tp_allocator());
     }
   catch(...)
     {
       std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start.base(),__len);
       throw;
     }
   std::_Destroy(begin(), end(), _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start.base();
   this->_M_impl._M_finish = __new_finish.base();
   this->_M_impl._M_end_of_storage = __new_start.base() + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       iterator __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_copy_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position, __old_finish - __n,
         __old_finish);
    std::fill(__position, __position + __n, __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_copy_a(__position, __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position, __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __old_size = size();
       if (this->max_size() - __old_size < __n)
  __throw_length_error(("vector::_M_fill_insert"));


       size_type __len = __old_size + std::max(__old_size, __n);
       if (__len < __old_size)
  __len = this->max_size();

       iterator __new_start(this->_M_allocate(__len));
       iterator __new_finish(__new_start);
       try
  {
    __new_finish =
      std::__uninitialized_copy_a(begin(), __position,
      __new_start,
      _M_get_Tp_allocator());
    std::__uninitialized_fill_n_a(__new_finish, __n, __x,
      _M_get_Tp_allocator());
    __new_finish += __n;
    __new_finish =
      std::__uninitialized_copy_a(__position, end(), __new_finish,
      _M_get_Tp_allocator());
  }
       catch(...)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start.base(), __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start.base();
       this->_M_impl._M_finish = __new_finish.base();
       this->_M_impl._M_end_of_storage = __new_start.base() + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc> template<typename _InputIterator>
    void
    vector<_Tp, _Alloc>::
    _M_range_insert(iterator __pos, _InputIterator __first,
      _InputIterator __last, std::input_iterator_tag)
    {
      for (; __first != __last; ++__first)
 {
   __pos = insert(__pos, *__first);
   ++__pos;
 }
    }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  iterator __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_copy_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position, __old_finish - __n,
           __old_finish);
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_copy_a(__position, __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __old_size = size();
  if (this->max_size() - __old_size < __n)
    __throw_length_error(("vector::_M_range_insert"));


  size_type __len = __old_size + std::max(__old_size, __n);
  if (__len < __old_size)
    __len = this->max_size();

  iterator __new_start(this->_M_allocate(__len));
  iterator __new_finish(__new_start);
  try
    {
      __new_finish =
        std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
        __position,
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last, __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__position,
        iterator(this->_M_impl._M_finish),
        __new_finish,
        _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start,__new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start.base(), __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start.base();
  this->_M_impl._M_finish = __new_finish.base();
  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
       }
   }
      }
}
# 75 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 2 3
# 58 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h" 2





# 1 "../../common/util/errors.h" 1
# 43 "../../common/util/errors.h"
# 1 "../../common/util/errdesc.h" 1
# 39 "../../common/util/errdesc.h"
extern "C" {
# 59 "../../common/util/errdesc.h"
# 1 "../../common/com/defs.h" 1
# 60 "../../common/util/errdesc.h" 2




typedef enum {
  RAG_EN_FIRST = 2000,
  RAG_EN_NONE,
  RAG_EN_RTN_UNINIT,
  RAG_EN_FORMAL_REF,
  RAG_EN_UNINIT_REF,
  RAG_EN_FOLD_ARITH_TOO_BIG,
  RAG_EN_FOLD_ARITH_TOO_BIG2,
  RAG_EN_CONST_COPY_TOO_BIG,
  RAG_EN_CONST_COPY_TOO_BIG2,
  RAG_EN_GOPT_TOO_BIG,
  RAG_EN_GOPT_TOO_BIG2,
  RAG_EN_LNO,

  RAG_EN_LAST
} Rag_Err_Num;
# 104 "../../common/util/errdesc.h"
typedef struct {
    mINT16 ecode;
    mINT16 flags;
    Rag_Err_Num rag_errnum;
    char *emsg;
    mUINT8 parms;
    mUINT8 kinds[6];
} ERROR_DESC;
# 128 "../../common/util/errdesc.h"
typedef struct error_desc_table {
    INT phase;
    ERROR_DESC *descriptors;
    char *name;
} ERROR_DESC_TABLE;


}
# 44 "../../common/util/errors.h" 2



extern "C" {
# 398 "../../common/util/errors.h"
extern void Abort_Compiler_Location (
  char* file_name,
  INT line_number
);
#pragma mips_frequency_hint NEVER Abort_Compiler_Location


extern void Fail_Assertion ( INT ecode, ... );
#pragma mips_frequency_hint NEVER Fail_Assertion



extern void Fail_FmtAssertion ( const char *fmt, ... );
#pragma mips_frequency_hint NEVER Fail_FmtAssertion



extern void Fatal_Error ( const char *fmt, ... );
#pragma mips_frequency_hint NEVER Fatal_Error
# 426 "../../common/util/errors.h"
extern void ErrMsg ( INT ErrCode, ... );
#pragma mips_frequency_hint NEVER ErrMsg


extern void ErrMsgLine ( INT ErrCode, INT LineNo, ... );
#pragma mips_frequency_hint NEVER ErrMsgLine
# 473 "../../common/util/errors.h"
extern void DevWarn( const char* FormatString,... )

 __attribute__((format(printf,1,2)))

 ;
#pragma mips_frequency_hint NEVER DevWarn

extern void DevWarn_Toggle( void );
#pragma mips_frequency_hint NEVER DevWarn_Toggle

extern BOOL Count_Limit_DevWarn( const char *const src_fname,
     const UINT src_line,
     const UINT limit );
#pragma mips_frequency_hint NEVER Count_Limit_DevWarn
# 563 "../../common/util/errors.h"
# 1 "../../common/com/err_host.h" 1
# 39 "../../common/com/err_host.h"
extern "C" {
# 104 "../../common/com/err_host.h"
extern char *Host_Format_Parm (
  INT kind,
  MEM_PTR parm
);




extern void Signal_Cleanup (
  INT sig
);


}
# 564 "../../common/util/errors.h" 2





# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4
extern "C" {



# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4






# 1 "/usr/include/asm-i386/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 5 "/usr/include/asm-i386/errno.h" 2 3 4
# 8 "/usr/include/asm/errno.h" 2 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 43 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 55 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 69 "/usr/include/errno.h" 3 4
typedef int error_t;
# 570 "../../common/util/errors.h" 2



extern INT Min_Error_Severity;
extern INT Conformance_Level;





struct error_desc_table;
extern void Set_Error_Tables(
  struct error_desc_table *edt,
  const char *errlist[] );

extern void
Set_Error_Descriptor (INT, ERROR_DESC *);


extern void Set_Error_File (
    const char *filename
);
extern void Set_Error_Trace (
    FILE *stream
);


extern void Set_Error_Source (
    const char *filename
);



extern void Set_Error_Line (
    INT LineNo
);
# 615 "../../common/util/errors.h"
extern void Set_Error_Phase (
    const char *phasename
);
extern const char *Get_Error_Phase (void);


extern BOOL Get_Error_Count (
    INT *Error_Count,
    INT *Warning_Count
);


extern void Init_Error_Handler ( INT Max_Allowed_Errors );


extern void Handle_Signals ( void );
# 640 "../../common/util/errors.h"
extern void Rag_Handle_Woff_Args(char *wstring);


extern BOOL Had_Internal_Error (void);


}




class Temporary_Error_Phase
{
private:
  const char* saved_error_phase;

public:
  Temporary_Error_Phase(const char* new_error_phase) {
    saved_error_phase = Get_Error_Phase();
    Set_Error_Phase(new_error_phase);
  }

  ~Temporary_Error_Phase() {
    if (saved_error_phase)
      Set_Error_Phase(saved_error_phase);
  }
};
# 64 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h" 2



# 1 "../../common/util/mempool.h" 1
# 436 "../../common/util/mempool.h"
extern "C" {
# 456 "../../common/util/mempool.h"
typedef struct mem_block MEM_BLOCK;



typedef struct mem_pool_blocks MEM_POOL_BLOCKS;



typedef struct mem_stat MEM_STAT;



typedef struct mem_pure_stack MEM_PURE_STACK;







typedef struct mem_pool MEM_POOL;
struct mem_pool {
  char *name;


  MEM_POOL_BLOCKS *blocks;



  MEM_POOL *rest;


  MEM_PURE_STACK *pure_stack;



  mBOOL bz;


  mBOOL frozen;




  mUINT16 magic_num;





  MEM_STAT *alloc_site_list;




};



extern void
MEM_Initialize(void);





extern MEM_POOL MEM_local_pool;
extern MEM_POOL MEM_src_pool;
extern MEM_POOL MEM_pu_pool;
extern MEM_POOL MEM_phase_pool;

extern MEM_POOL *MEM_local_pool_ptr;
extern MEM_POOL *MEM_src_pool_ptr;
extern MEM_POOL *MEM_pu_pool_ptr;
extern MEM_POOL *MEM_phase_pool_ptr;





extern MEM_POOL MEM_local_nz_pool;
extern MEM_POOL MEM_src_nz_pool;
extern MEM_POOL MEM_pu_nz_pool;
extern MEM_POOL MEM_phase_nz_pool;

extern MEM_POOL *MEM_local_nz_pool_ptr;
extern MEM_POOL *MEM_src_nz_pool_ptr;
extern MEM_POOL *MEM_pu_nz_pool_ptr;
extern MEM_POOL *MEM_phase_nz_pool_ptr;

extern void MEM_Trace(void);

extern void
Trace_Memory_Allocation(
  INT phase,
  const char *pname
);

extern void MEM_Tracing_Enable(void);

extern MEM_PTR
MEM_POOL_Alloc_P
(
  MEM_POOL *mempool,
  size_t size
  ,INT32 line, const char *file
);

extern MEM_PTR
MEM_POOL_Realloc_P
(
  MEM_POOL *mempool,
  MEM_PTR old_block,
  size_t old_size,
  size_t new_size
  ,INT32 line, const char *file
);

extern void
MEM_POOL_Push_P
(
  MEM_POOL *pool
  ,INT32 line, const char *file
);

extern void
MEM_POOL_Push_Freeze_P
(
  MEM_POOL *pool
  ,INT32 line, const char *file
);

extern void
MEM_POOL_Pop_P
(
  MEM_POOL *pool
  ,INT32 line, const char *file
);

extern void
MEM_POOL_Pop_Unfreeze_P
(
  MEM_POOL *pool
  ,INT32 line, const char *file
);

extern void MEM_POOL_Set_Default(MEM_POOL *pool);
extern void MEM_POOL_FREE(MEM_POOL *pool, void *data);
extern void MEM_POOL_Delete(MEM_POOL *pool);

extern void
MEM_POOL_Initialize_P
(
  MEM_POOL *pool,
  char *name,
  BOOL bz
  ,INT32 line, const char *file
);
# 694 "../../common/util/mempool.h"
MEM_PTR Realloc_Clear (
  MEM_PTR ptr,
  INT32 new_size,
  INT32 old_size
);
MEM_PTR Re_Calloc (
  MEM_PTR ptr,
  INT32 new_nelem,
  INT32 elsize,
  INT32 old_nelem
);



}
# 751 "../../common/util/mempool.h"
class MEM_POOL_Popper {
  MEM_POOL *pool;
public:
  MEM_POOL_Popper(MEM_POOL *_pool) : pool(_pool) { MEM_POOL_Push_P(pool,754,"../../common/util/mempool.h"); }
  ~MEM_POOL_Popper() { MEM_POOL_Pop_P(pool,755,"../../common/util/mempool.h"); }

  MEM_POOL* Pool () const { return pool; }
};





class CXX_MEM_POOL {
  MEM_POOL mem_pool;

public:
  MEM_POOL *operator()() { return &mem_pool; }

  CXX_MEM_POOL(char *name, BOOL do_bzero) {
    mem_pool.magic_num = 0;
    MEM_POOL_Initialize_P(&mem_pool,name,do_bzero,772,"../../common/util/mempool.h");
    MEM_POOL_Push_P(&mem_pool,773,"../../common/util/mempool.h");
  };
  ~CXX_MEM_POOL() {
    MEM_POOL_Pop_P(&mem_pool,776,"../../common/util/mempool.h");
    MEM_POOL_Delete(&mem_pool);
  }
};






class MEM_POOL_Constructor
{
private:
   MEM_POOL *pool;

public:

    MEM_POOL_Constructor (MEM_POOL* p, char* name, BOOL zero) : pool (p) {
 MEM_POOL_Initialize_P(pool,name,zero,794,"../../common/util/mempool.h");
 MEM_POOL_Push_P(pool,795,"../../common/util/mempool.h");
    }

    ~MEM_POOL_Constructor () {
 MEM_POOL_Pop_P(pool,799,"../../common/util/mempool.h");
 MEM_POOL_Delete (pool);
    }

    MEM_POOL* Pool () const { return pool; };
};
# 68 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h" 2



# 1 "../../common/util/mempool_allocator.h" 1
# 45 "../../common/util/mempool_allocator.h"
template <class T>
class mempool_allocator {
private:
  MEM_POOL* pool;
  template <class U> friend class mempool_allocator;

public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef T* pointer;
  typedef const T* const_pointer;
  typedef T& reference;
  typedef const T& const_reference;
  typedef T value_type;

  template <class U> struct rebind {
    typedef mempool_allocator<U> other;
  };

  mempool_allocator() : pool((MEM_POOL *) 1) {}
  mempool_allocator(MEM_POOL* p) : pool(p) {}
  mempool_allocator(const mempool_allocator& a) : pool(a.pool) {}
  template <class U> mempool_allocator(const mempool_allocator<U>& a)
    : pool(a.pool) {}
  ~mempool_allocator() {}

  pointer address(reference x) const { return &x; }
  const_pointer address(const_reference x) const { return &x; }

  pointer allocate(size_type n, const void* = 0)
    { return n != 0 ? ((T *) MEM_POOL_Alloc_P(pool,sizeof(T) * (n),75,"../../common/util/mempool_allocator.h")) : pointer(0); }

  void deallocate(pointer p, size_type ) {
    if (p)
      MEM_POOL_FREE(pool, p);
  }

  size_type max_size() const { return size_t(-1) / sizeof(T); }

  void construct(pointer p, const T& val) { new(p) T(val); }
  void destroy(pointer p) { p->~T(); }
};

template<>
class mempool_allocator<void> {
public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef void* pointer;
  typedef const void* const_pointer;
  typedef void value_type;

  template <class U> struct rebind {
    typedef mempool_allocator<U> other;
  };
};
# 72 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h" 2



using std::pair;
using std::vector;
using std::forward_iterator_tag;
# 93 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h"
template <class ARRAY_Ptr, class T, class _PTR, class REF>
class SEGMENTED_ARRAY_ITERATOR
{
public:
  typedef T value_type;
  typedef UINT difference_type;
  typedef std::forward_iterator_tag iterator_category;
  typedef _PTR pointer;
  typedef REF reference;

private:

    ARRAY_Ptr segmented_array;
    _PTR ptr;
    _PTR segment_last;
    UINT map_idx;

private:

    typedef SEGMENTED_ARRAY_ITERATOR self;

public:

    SEGMENTED_ARRAY_ITERATOR (ARRAY_Ptr sa, T* p, T* last, UINT idx)
 : segmented_array (sa), ptr (p), segment_last (last) {
     map_idx = sa->Block_index(idx);
    }

    SEGMENTED_ARRAY_ITERATOR (ARRAY_Ptr sa, UINT idx)
 : segmented_array (sa) {
            map_idx = sa->Block_index(idx);
     ptr = &(sa->Entry(idx));
            segment_last = sa->Block_end(map_idx);
    }

    SEGMENTED_ARRAY_ITERATOR () {}

    REF operator* () const { return *ptr; }
    _PTR Ptr () const { return ptr; }
    _PTR operator->() const { return ptr; }
    UINT Index () const {
      return map_idx * segmented_array->Block_size() +
             (ptr - segmented_array->Block_begin(map_idx));
    }

    self& operator ++ () {
        ++ptr;
 if (ptr == segment_last) {
     UINT map_entries =
  (segment_last - segmented_array->Block_begin(map_idx)) /
  segmented_array->Block_size ();
            if (map_idx + map_entries < segmented_array->Block_index_end()) {
                map_idx += map_entries;
                ptr = segmented_array->Block_begin(map_idx);
                segment_last = segmented_array->Block_end(map_idx);
            }
        }
 return *this;
    }

    self operator ++ (int) {
 self tmp = *this;
 ++(*this);
 return tmp;
    }

    BOOL operator == (const self& x) const { return ptr == x.ptr; }
    BOOL operator != (const self& x) const { return !(*this == x); }

};


template <class T, UINT block_size = 128>
class SEGMENTED_ARRAY
{
private:
    typedef std::pair<T *, BOOL> thingy;
    std::vector<thingy, mempool_allocator<thingy> > map;
    MEM_POOL *pool;
    UINT size_;
    UINT max_size_;
    INT block_base;


    UINT next_block_size;
    T *block;

private:
    typedef SEGMENTED_ARRAY<T, block_size> self;

public:
    typedef T base_type;

    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    typedef UINT size_type;
    typedef INT difference_type;

    typedef SEGMENTED_ARRAY_ITERATOR<self*, T, pointer, reference>
            iterator;
    typedef SEGMENTED_ARRAY_ITERATOR<const self*, T,
                                     const_pointer, const_reference>
            const_iterator;

private:



    UINT Round_up (UINT s) {
 UINT mask = block_size - 1;
 return (s + mask) & ~mask;
    }

    void Update_Map (T *marker, UINT new_size, BOOL own_memory);

    void Pop_Map ();


    void Allocate ();

    T& New_entry () {
 if (size_ == max_size_) Allocate ();
 return block[size_++ - block_base];
    }


    void Copy (const T* x, UINT n) {
 std::copy(x, x + n, block + (size_ - block_base));
 size_ += n;
    }



    UINT next_block_idx(UINT block_idx) const {
      for ( ; block_idx + 1 < map.size() &&
              map[block_idx].first + block_size == map[block_idx + 1].first ;
            ++block_idx)
        {}
      return block_idx + 1;
    }

public:

  SEGMENTED_ARRAY(MEM_POOL *m = (MEM_POOL *) 1) : pool (m), map (m) {
    size_ = max_size_ = next_block_size = 0;
    block_base = -1;
    block = 0;
  }

  ~SEGMENTED_ARRAY() {


    for (typename std::vector<thingy, mempool_allocator<thingy> >::iterator
    entry = map.begin();
  entry != map.end();
  ++entry) {

      if (entry->second) {
 MEM_POOL_FREE(pool, entry->first);
      }
    }
  }

  UINT Block_size () const { return block_size; }

  UINT Size () const { return size_; }
  UINT size () const { return size_; }

    T& Entry (UINT idx) {
 ( idx < size_ ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h", 265 ), Fail_FmtAssertion ("Array subscript out of bound")) );
 return map[idx / block_size].first[idx % block_size];
    }

    const T& Entry (UINT idx) const {
 ( idx < size_ ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h", 270 ), Fail_FmtAssertion ("Array subscript out of bound")) );
 return map[idx / block_size].first[idx % block_size];
    }
    T& operator[] (UINT idx) { return Entry(idx); }
    const T& operator[] (UINT idx) const { return Entry(idx); }

    iterator begin () {
 return iterator (this, map[0].first, Block_end (0), 0);
    }

    iterator end () {
 return iterator (this, block + (size_ - block_base),
    block + (max_size_ - block_base), size_);
    }

    const_iterator begin () const {
 return const_iterator (this, map[0].first, Block_end (0), 0);
    }

    const_iterator end () const {
 return const_iterator (this, block + (size_ - block_base),
                               block + (max_size_ - block_base), size_);
    }


    T& New_entry (UINT& idx) { idx = size_; return New_entry (); }

    UINT Insert (const T& x);

    void Delete_last () {
 --size_;
 if (size_ == block_base)
     Pop_Map ();
    }


    void Delete_last (UINT n);

    void Delete_down_to (UINT idx) {
 if (size_ > idx)
     Delete_last (size_ - idx);
    }


    UINT Insert (const T* x, UINT n_elemt);


    UINT Transfer (T* x, UINT n_elemt);



    void Reserve (UINT n_elemt) {
 if (max_size_ - size_ + next_block_size < n_elemt)
     next_block_size = n_elemt - (max_size_ - size_);
    }


    UINT Get_block_size (UINT idx) const {
      UINT block_idx = idx / block_size;
      return std::min(next_block_idx(block_idx) * block_size, size_) - idx;
    }

    UINT Block_index (UINT idx) const { return idx / block_size; }


    UINT Block_index_end () const { return map.size(); }

    T* Block_begin (UINT block_idx) { return map[block_idx].first; }
    const T* Block_begin (UINT block_idx) const { return map[block_idx].first; }

    T* Block_end(UINT block_idx) {
      return Block_begin(block_idx) +
             (next_block_idx(block_idx) - block_idx) * block_size;
    }

    const T* Block_end(UINT block_idx) const {
      return Block_begin(block_idx) +
             (next_block_idx(block_idx) - block_idx) * block_size;
    }

};


template <class T, UINT block_size>
inline void
SEGMENTED_ARRAY<T,block_size>::Update_Map(T *marker,
       UINT new_size,
       BOOL own_memory)
{
  do {
    map.push_back(std::pair<T*, BOOL>(marker, own_memory));

    new_size -= block_size;
    marker += block_size;
  } while (new_size);
}



template <class T, UINT block_size>
void
SEGMENTED_ARRAY<T,block_size>::Pop_Map ()
{
    next_block_size += max_size_ - block_base;
    MEM_POOL_FREE (pool, block);

    T *last_map_entry;
    do {
      last_map_entry = (map.end() - 1)->first;
      map.pop_back ();
    } while (last_map_entry != block);

    max_size_ = size_;
    if (size_ > 0) {
      ( size_ >= block_size ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h", 385 ), Fail_FmtAssertion ("SEGMENTED_ARRAY: size in limbo")) );

      block_base = size_ - block_size;
      UINT idx = block_base / block_size;
      block = map[idx].first;
      while (idx > 0 && map[idx - 1].first + block_size == block) {
 block = map[--idx].first;
 block_base -= block_size;
      }
    }
    else {
      ( map.begin() == map.end() ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h", 396 ), Fail_FmtAssertion ("SEGMENTED_ARRAY::Pop_Map: Map should be empty")) );

      block_base = -1;
      block = __null;
    }
}


template <class T, UINT block_size>
void
SEGMENTED_ARRAY<T,block_size>::Allocate ()
{
    ( size_ == max_size_ ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h", 407 ), Fail_FmtAssertion ("Invalid internal state in segmented array")) );

    UINT new_size;

    if (next_block_size == 0)
 new_size = block_size;
    else {
 new_size = Round_up (next_block_size);
 next_block_size = 0;
    }

    block = (T *) MEM_POOL_Alloc_P(pool,new_size * sizeof(T),418,"/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h");
    max_size_ += new_size;
    block_base = size_;

    Update_Map (block, new_size, ((BOOL) 1));

}


template <class T, UINT block_size>
void
SEGMENTED_ARRAY<T,block_size>::Delete_last (UINT n)
{
    while (n >= size_ - block_base) {
 n -= size_ - block_base;
 size_ = block_base;
 Pop_Map ();
    }

    size_ -= n;
}


template <class T, UINT block_size>
inline UINT
SEGMENTED_ARRAY<T,block_size>::Insert (const T& x)
{
    UINT idx = size_;
    T &entry = New_entry ();

    entry = x;
    return idx;
}


template <class T, UINT block_size>
UINT
SEGMENTED_ARRAY<T,block_size>::Insert (const T* x, UINT n_elemt)
{
    UINT result = size_;
    if (size_ + n_elemt <= max_size_) {
 Copy (x, n_elemt);
 return result;
    }

    UINT space_left = max_size_ - size_;
    Copy (x, space_left);
    n_elemt -= space_left;

    Reserve (n_elemt);
    Allocate ();
    Copy (x + space_left, n_elemt);

    return result;
}


template <class T, UINT block_size>
UINT
SEGMENTED_ARRAY<T,block_size>::Transfer (T* x, UINT n_elemt)
{
    UINT result = size_;

    if (size_ + n_elemt <= max_size_) {
 Copy (x, n_elemt);
 return result;
    }

    UINT space_left = max_size_ - size_;
    if (space_left > 0) {
 Copy (x, space_left);
 n_elemt -= space_left;
 x += space_left;
    }

    if (n_elemt >= block_size) {
 UINT reused_size = n_elemt & ~(block_size - 1);
 block = x;
 Update_Map (block, reused_size, ((BOOL) 0));
 block_base = size_;
 size_ += reused_size;
 max_size_ += reused_size;
 n_elemt -= reused_size;
 x += reused_size;
 if (next_block_size > reused_size)
     next_block_size -= reused_size;
 else
     next_block_size = 0;
    }

    if (n_elemt > 0) {
 Allocate ();
 Copy (x, n_elemt);
    }

    return result;

}


template <class T, UINT block_size, class OP>
inline void
For_all_entries (SEGMENTED_ARRAY<T, block_size>& array, const OP &op,
   UINT32 first = 0)
{
    UINT last = array.size ();

    while (first < last) {
 T *block = &array[first];
 UINT size = array.Get_block_size (first);
 for (UINT j = 0; j < size; ++j, ++block)
     op (first + j, block);
 first += size;
    }
}
# 557 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h"
template <class T, UINT block_size, class OP>
inline void
For_all_blocks (SEGMENTED_ARRAY<T, block_size>& array, const OP &op)
{
    UINT max_size = array.size ();
    UINT i = 0;

    while (i < max_size) {
 T *block = &array[i];
 UINT size = array.Get_block_size (i);
 op (i, block, size);
 i += size;
    }
}




template <class T, UINT block_size, class PREDICATE>
inline UINT
Find_entry_if (const SEGMENTED_ARRAY<T, block_size>& array,
        const PREDICATE& pred, UINT i = 0)
{
    UINT max_size = array.size ();

    while (i < max_size) {
 const T *block = &array[i];
 UINT size = array.Get_block_size (i);
 for (UINT j = 0; j < size; ++j, ++block)
     if (pred (i+j, block))
  return i + j;
 i += size;
    }

    return (UINT) ((UINT) -1);
}





template <class T, UINT block_size>
UINT32
Copy_array_range (const SEGMENTED_ARRAY<T, block_size>& from_array,
    SEGMENTED_ARRAY<T, block_size>& to_array,
    UINT32 first_idx = 0, UINT32 last_idx = (UINT32) -1)
{
    if (last_idx > from_array.size ())
 last_idx = from_array.size ();

    ( last_idx >= first_idx ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/segmented_array.h", 607 ), Fail_FmtAssertion ("Invalid copy range")) );

    UINT32 entries = last_idx - first_idx;

    to_array.Reserve (entries);

    while (first_idx < last_idx) {
 const T* block = &from_array[first_idx];
 UINT32 size = from_array.Get_block_size (first_idx);
 if (size > last_idx - first_idx)
     size = last_idx - first_idx;

 to_array.Insert (block, size);
 first_idx += size;
    }

    return entries;
}
# 52 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h" 1
# 57 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/algorithm" 1 3
# 63 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/algorithm" 3
       
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/algorithm" 3




# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 1 3
# 65 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 1 3
# 65 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
namespace std
{



  template<typename _RandomAccessIterator, typename _Distance>
    bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return false;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return true;
    }

  template<typename _RandomAccessIterator, typename _Distance,
           typename _StrictWeakOrdering>
    bool
    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,
       _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return false;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return true;
    }

  template<typename _RandomAccessIterator>
    bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _StrictWeakOrdering>
    bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _StrictWeakOrdering __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }



  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = *(__first + __parent);
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = __value;
    }
# 139 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;


      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), _ValueType(*(__last - 1)));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
     typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = *(__first + __parent);
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = __value;
    }
# 187 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;

      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), _ValueType(*(__last - 1)), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = 2 * __holeIndex + 2;
      while (__secondChild < __len)
 {
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = *(__first + __secondChild);
   __holeIndex = __secondChild;
   __secondChild = 2 * (__secondChild + 1);
 }
      if (__secondChild == __len)
 {
   *(__first + __holeIndex) = *(__first + (__secondChild - 1));
   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex, __value);
    }

  template<typename _RandomAccessIterator, typename _Tp>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Tp __value)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      *__result = *__first;
      std::__adjust_heap(__first, _Distance(0), _Distance(__last - __first),
    __value);
    }
# 251 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      std::__pop_heap(__first, __last - 1, __last - 1,
        _ValueType(*(__last - 1)));
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = 2 * __holeIndex + 2;
      while (__secondChild < __len)
 {
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = *(__first + __secondChild);
   __holeIndex = __secondChild;
   __secondChild = 2 * (__secondChild + 1);
 }
      if (__secondChild == __len)
 {
   *(__first + __holeIndex) = *(__first + (__secondChild - 1));
   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex, __value, __comp);
    }

  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Tp __value, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      *__result = *__first;
      std::__adjust_heap(__first, _Distance(0), _Distance(__last - __first),
    __value, __comp);
    }
# 317 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;

      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      std::__pop_heap(__first, __last - 1, __last - 1,
        _ValueType(*(__last - 1)), __comp);
    }
# 342 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   std::__adjust_heap(__first, __parent, __len,
        _ValueType(*(__first + __parent)));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 382 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   std::__adjust_heap(__first, __parent, __len,
        _ValueType(*(__first + __parent)), __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 420 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;


      while (__last - __first > 1)
 std::pop_heap(__first, __last--);
    }
# 446 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      while (__last - __first > 1)
 std::pop_heap(__first, __last--, __comp);
    }

}
# 66 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_tempbuf.h" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_tempbuf.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 1 3
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
       
# 52 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3






# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_raw_storage_iter.h" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_raw_storage_iter.h" 3
namespace std
{




  template <class _ForwardIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _ForwardIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_ForwardIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(&*_M_iter, __element);
 return *this;
      }

      raw_storage_iterator<_ForwardIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_ForwardIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };
}
# 59 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 2 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/limits" 1 3
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/limits" 3
       
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/limits" 3
# 149 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/limits" 3
namespace std
{





  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;

    static const int digits10 = 0;

    static const bool is_signed = false;





    static const bool is_integer = false;




    static const bool is_exact = false;


    static const int radix = 0;



    static const int min_exponent = 0;


    static const int min_exponent10 = 0;



    static const int max_exponent = 0;


    static const int max_exponent10 = 0;


    static const bool has_infinity = false;


    static const bool has_quiet_NaN = false;


    static const bool has_signaling_NaN = false;

    static const float_denorm_style has_denorm = denorm_absent;


    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;



    static const bool is_bounded = false;




    static const bool is_modulo = false;


    static const bool traps = false;

    static const bool tinyness_before = false;



    static const float_round_style round_style = round_toward_zero;
  };
# 284 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp min() throw() { return static_cast<_Tp>(0); }

      static _Tp max() throw() { return static_cast<_Tp>(0); }


      static _Tp epsilon() throw() { return static_cast<_Tp>(0); }

      static _Tp round_error() throw() { return static_cast<_Tp>(0); }

      static _Tp infinity() throw() { return static_cast<_Tp>(0); }

      static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }


      static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }



      static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }
    };





  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool min() throw()
      { return false; }
      static bool max() throw()
      { return true; }

      static const int digits = 1;
      static const int digits10 = 0;
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static bool epsilon() throw()
      { return false; }
      static bool round_error() throw()
      { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool infinity() throw()
      { return false; }
      static bool quiet_NaN() throw()
      { return false; }
      static bool signaling_NaN() throw()
      { return false; }
      static bool denorm_min() throw()
      { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char min() throw()
      { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }
      static char max() throw()
      { return (((char)(-1) < 0) ? ((char)1 << (sizeof(char) * 8 - ((char)(-1) < 0))) - 1 : ~(char)0); }

      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static char epsilon() throw()
      { return 0; }
      static char round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static char infinity() throw()
      { return char(); }
      static char quiet_NaN() throw()
      { return char(); }
      static char signaling_NaN() throw()
      { return char(); }
      static char denorm_min() throw()
      { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char min() throw()
      { return -127 - 1; }
      static signed char max() throw()
      { return 127; }

      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10 = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static signed char epsilon() throw()
      { return 0; }
      static signed char round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char infinity() throw()
      { return static_cast<signed char>(0); }
      static signed char quiet_NaN() throw()
      { return static_cast<signed char>(0); }
      static signed char signaling_NaN() throw()
      { return static_cast<signed char>(0); }
      static signed char denorm_min() throw()
      { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char min() throw()
      { return 0; }
      static unsigned char max() throw()
      { return 127 * 2U + 1; }

      static const int digits = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned char epsilon() throw()
      { return 0; }
      static unsigned char round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char infinity() throw()
      { return static_cast<unsigned char>(0); }
      static unsigned char quiet_NaN() throw()
      { return static_cast<unsigned char>(0); }
      static unsigned char signaling_NaN() throw()
      { return static_cast<unsigned char>(0); }
      static unsigned char denorm_min() throw()
      { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t min() throw()
      { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }
      static wchar_t max() throw()
      { return (((wchar_t)(-1) < 0) ? ((wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0))) - 1 : ~(wchar_t)0); }

      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10 = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static wchar_t epsilon() throw()
      { return 0; }
      static wchar_t round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t infinity() throw()
      { return wchar_t(); }
      static wchar_t quiet_NaN() throw()
      { return wchar_t(); }
      static wchar_t signaling_NaN() throw()
      { return wchar_t(); }
      static wchar_t denorm_min() throw()
      { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short min() throw()
      { return -32767 - 1; }
      static short max() throw()
      { return 32767; }

      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static short epsilon() throw()
      { return 0; }
      static short round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static short infinity() throw()
      { return short(); }
      static short quiet_NaN() throw()
      { return short(); }
      static short signaling_NaN() throw()
      { return short(); }
      static short denorm_min() throw()
      { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short min() throw()
      { return 0; }
      static unsigned short max() throw()
      { return 32767 * 2U + 1; }

      static const int digits = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned short epsilon() throw()
      { return 0; }
      static unsigned short round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short infinity() throw()
      { return static_cast<unsigned short>(0); }
      static unsigned short quiet_NaN() throw()
      { return static_cast<unsigned short>(0); }
      static unsigned short signaling_NaN() throw()
      { return static_cast<unsigned short>(0); }
      static unsigned short denorm_min() throw()
      { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int min() throw()
      { return -2147483647 - 1; }
      static int max() throw()
      { return 2147483647; }

      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static int epsilon() throw()
      { return 0; }
      static int round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static int infinity() throw()
      { return static_cast<int>(0); }
      static int quiet_NaN() throw()
      { return static_cast<int>(0); }
      static int signaling_NaN() throw()
      { return static_cast<int>(0); }
      static int denorm_min() throw()
      { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int min() throw()
      { return 0; }
      static unsigned int max() throw()
      { return 2147483647 * 2U + 1; }

      static const int digits = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned int epsilon() throw()
      { return 0; }
      static unsigned int round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int infinity() throw()
      { return static_cast<unsigned int>(0); }
      static unsigned int quiet_NaN() throw()
      { return static_cast<unsigned int>(0); }
      static unsigned int signaling_NaN() throw()
      { return static_cast<unsigned int>(0); }
      static unsigned int denorm_min() throw()
      { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long min() throw()
      { return -2147483647L - 1; }
      static long max() throw()
      { return 2147483647L; }

      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static long epsilon() throw()
      { return 0; }
      static long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static long infinity() throw()
      { return static_cast<long>(0); }
      static long quiet_NaN() throw()
      { return static_cast<long>(0); }
      static long signaling_NaN() throw()
      { return static_cast<long>(0); }
      static long denorm_min() throw()
      { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long min() throw()
      { return 0; }
      static unsigned long max() throw()
      { return 2147483647L * 2UL + 1; }

      static const int digits = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned long epsilon() throw()
      { return 0; }
      static unsigned long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long infinity() throw()
      { return static_cast<unsigned long>(0); }
      static unsigned long quiet_NaN() throw()
      { return static_cast<unsigned long>(0); }
      static unsigned long signaling_NaN() throw()
      { return static_cast<unsigned long>(0); }
      static unsigned long denorm_min() throw()
      { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long min() throw()
      { return -9223372036854775807LL - 1; }
      static long long max() throw()
      { return 9223372036854775807LL; }

      static const int digits = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10 = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static long long epsilon() throw()
      { return 0; }
      static long long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long infinity() throw()
      { return static_cast<long long>(0); }
      static long long quiet_NaN() throw()
      { return static_cast<long long>(0); }
      static long long signaling_NaN() throw()
      { return static_cast<long long>(0); }
      static long long denorm_min() throw()
      { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long min() throw()
      { return 0; }
      static unsigned long long max() throw()
      { return 9223372036854775807LL * 2ULL + 1; }

      static const int digits = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned long long epsilon() throw()
      { return 0; }
      static unsigned long long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long infinity() throw()
      { return static_cast<unsigned long long>(0); }
      static unsigned long long quiet_NaN() throw()
      { return static_cast<unsigned long long>(0); }
      static unsigned long long signaling_NaN() throw()
      { return static_cast<unsigned long long>(0); }
      static unsigned long long denorm_min() throw()
      { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float min() throw()
      { return 1.17549435e-38F; }
      static float max() throw()
      { return 3.40282347e+38F; }

      static const int digits = 24;
      static const int digits10 = 6;
      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;
      static float epsilon() throw()
      { return 1.19209290e-7F; }
      static float round_error() throw()
      { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1.40129846e-45F) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss = false;

      static float infinity() throw()
      { return __builtin_huge_valf (); }
      static float quiet_NaN() throw()
      { return __builtin_nanf (""); }
      static float signaling_NaN() throw()
      { return __builtin_nansf (""); }
      static float denorm_min() throw()
      { return 1.40129846e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double min() throw()
      { return 2.2250738585072014e-308; }
      static double max() throw()
      { return 1.7976931348623157e+308; }

      static const int digits = 53;
      static const int digits10 = 15;
      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;
      static double epsilon() throw()
      { return 2.2204460492503131e-16; }
      static double round_error() throw()
      { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(4.9406564584124654e-324) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss = false;

      static double infinity() throw()
      { return __builtin_huge_val(); }
      static double quiet_NaN() throw()
      { return __builtin_nan (""); }
      static double signaling_NaN() throw()
      { return __builtin_nans (""); }
      static double denorm_min() throw()
      { return 4.9406564584124654e-324; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double min() throw()
      { return 3.36210314311209350626e-4932L; }
      static long double max() throw()
      { return 1.18973149535723176502e+4932L; }

      static const int digits = 64;
      static const int digits10 = 18;
      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;
      static long double epsilon() throw()
      { return 1.08420217248550443401e-19L; }
      static long double round_error() throw()
      { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(3.64519953188247460253e-4951L) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double infinity() throw()
      { return __builtin_huge_vall (); }
      static long double quiet_NaN() throw()
      { return __builtin_nanl (""); }
      static long double signaling_NaN() throw()
      { return __builtin_nansl (""); }
      static long double denorm_min() throw()
      { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_to_nearest;
    };





}
# 61 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 2 3

namespace std
{
# 72 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    __get_temporary_buffer(ptrdiff_t __len, _Tp*)
    {
      const ptrdiff_t __max = numeric_limits<ptrdiff_t>::max() / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       nothrow));
   if (__tmp != 0)
     return pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 108 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
  template<typename _Tp>
    inline pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    { return std::__get_temporary_buffer(__len, static_cast<_Tp*>(0)); }
# 120 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
  template<typename _Tp>
    void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, nothrow); }
# 132 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    };
# 173 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 199 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 211 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 222 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 239 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 259 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      ~auto_ptr() { delete _M_ptr; }
# 269 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 299 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 313 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 328 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 349 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/memory" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
  };
}
# 65 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_tempbuf.h" 2 3

namespace std
{







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

 public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

      void
      _M_initialize_buffer(const _Tp&, __true_type) { }

      void
      _M_initialize_buffer(const _Tp& val, __false_type)
      { std::uninitialized_fill_n(_M_buffer, _M_len, val); }

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {

      typedef typename std::__is_scalar<_Tp>::__type _Trivial;

      try
 {
   pair<pointer, size_type> __p(get_temporary_buffer<
           value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_len > 0)
     _M_initialize_buffer(*__first, _Trivial());
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }
}
# 67 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 2 3




namespace std
{
# 85 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _Tp>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)
    {

     
      if (__a < __b)
 if (__b < __c)
   return __b;
 else if (__a < __c)
   return __c;
 else
   return __a;
      else if (__a < __c)
 return __a;
      else if (__b < __c)
 return __c;
      else
 return __b;
    }
# 119 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
    {

     
      if (__comp(__a, __b))
 if (__comp(__b, __c))
   return __b;
 else if (__comp(__a, __c))
   return __c;
 else
   return __a;
      else if (__comp(__a, __c))
 return __a;
      else if (__comp(__b, __c))
 return __c;
      else
 return __b;
    }
# 151 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for ( ; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }






  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }






  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(*__first))
 ++__first;
      return __first;
    }






  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for ( ; __trip_count > 0 ; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }






  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for ( ; __trip_count > 0 ; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 305 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 327 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 349 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 380 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 411 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for ( ; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 435 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for ( ; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 474 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __tmp(__first2);
      ++__tmp;
      if (__tmp == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p1, __p;
      __p1 = __first2; ++__p1;
      _ForwardIterator1 __current = __first1;

      while (__first1 != __last1)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 545 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __tmp(__first2);
      ++__tmp;
      if (__tmp == __last2)
 {
   while (__first1 != __last1 && !__predicate(*__first1, *__first2))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p1, __p;
      __p1 = __first2; ++__p1;
      _ForwardIterator1 __current = __first1;

      while (__first1 != __last1)
 {
   while (__first1 != __last1)
     {
       if (__predicate(*__first1, *__first2))
  break;
       ++__first1;
     }
   while (__first1 != __last1 && !__predicate(*__first1, *__first2))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 617 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }
# 651 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 709 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 736 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !__binary_pred(*__first, __val))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __binary_pred(*__i, __val))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last && !__binary_pred(*__first, __val))
     ++__first;
 }
      return __last;
    }
# 776 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!__binary_pred(*__lookAhead, __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 837 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !__binary_pred(*__first, __val))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 873 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

     


     


      ;

      for ( ; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 911 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for ( ; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 946 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for ( ; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 978 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for ( ; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 1009 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for ( ; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 1042 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      for ( ; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 1078 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      for ( ; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 1112 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for ( ; __first != __last; ++__first)
 *__first = __gen();
    }
# 1138 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      for ( ; __n > 0; --__n, ++__first)
 *__first = __gen();
      return __first;
    }
# 1165 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      for ( ; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 1201 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for ( ; __first != __last; ++__first)
 if (!__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 1240 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      __first = std::find(__first, __last, __value);
      _ForwardIterator __i = __first;
      return __first == __last ? __first
          : std::remove_copy(++__i, __last,
        __first, __value);
    }
# 1275 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      __first = std::find_if(__first, __last, __pred);
      _ForwardIterator __i = __first;
      return __first == __last ? __first
          : std::remove_copy_if(++__i, __last,
           __first, __pred);
    }
# 1301 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }
# 1326 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }
# 1348 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    _BinaryPredicate __binary_pred,
    output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!__binary_pred(__value, *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }
# 1380 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    _BinaryPredicate __binary_pred,
    forward_iterator_tag)
    {

     



      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(*__result, *__first)) *++__result = *__first;
      return ++__result;
    }
# 1412 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      typedef typename iterator_traits<_OutputIterator>::iterator_category
 _IterType;

      if (__first == __last) return __result;
      return std::__unique_copy(__first, __last, __result, _IterType());
    }
# 1447 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      typedef typename iterator_traits<_OutputIterator>::iterator_category
 _IterType;

      if (__first == __last) return __result;
      return std::__unique_copy(__first, __last, __result,
    __binary_pred, _IterType());
    }
# 1481 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = *__first;
      return ++__dest;
    }
# 1520 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {

     

     


      ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(*__dest, *__first))
   *++__dest = *__first;
      return ++__dest;
    }
# 1554 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }
# 1576 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1603 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1629 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
        _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }
# 1657 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }






  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   swap(*__first, *__first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   swap(*__first, *__first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }






  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   swap(*__first, *--__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }






  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      const _Distance __n = __last - __first;
      const _Distance __k = __middle - __first;
      const _Distance __l = __n - __k;

      if (__k == __l)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      const _Distance __d = __gcd(__n, __k);

      for (_Distance __i = 0; __i < __d; __i++)
 {
   _ValueType __tmp = *__first;
   _RandomAccessIterator __p = __first;

   if (__k < __l)
     {
       for (_Distance __j = 0; __j < __l / __d; __j++)
  {
    if (__p > __first + __l)
      {
        *__p = *(__p - __l);
        __p -= __l;
      }

    *__p = *(__p + __k);
    __p += __k;
  }
     }
   else
     {
       for (_Distance __j = 0; __j < __k / __d - 1; __j ++)
  {
    if (__p < __last - __k)
      {
        *__p = *(__p + __k);
        __p += __k;
      }
    *__p = * (__p - __l);
    __p -= __l;
  }
     }

   *__p = __tmp;
   ++__first;
 }
    }
# 1836 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1869 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }
# 1895 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 1922 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _RandomNumberGenerator& __rand)
    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }







  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred,
  forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     swap(*__first, *__next);
     ++__first;
   }

      return __first;
    }






  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred,
  bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!__pred(*__last))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 2016 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }







  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }






  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for ( ; __first != __last ; ++__first)
     if (__pred(*__first))
       {
  *__result1 = *__first;
  ++__result1;
       }
     else
       {
  *__result2 = *__first;
  ++__result2;
       }
   std::copy(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 2127 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(), __buf.size());
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }






  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Tp __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }






  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _Tp __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }







  enum { _S_threshold = 16 };






  template<typename _RandomAccessIterator, typename _Tp>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)
    {
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = *__next;
   __last = __next;
   --__next;
 }
      *__last = __val;
    }






  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,
         _Compare __comp)
    {
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = *__next;
   __last = __next;
   --__next;
 }
      *__last = __val;
    }






  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   typename iterator_traits<_RandomAccessIterator>::value_type
     __val = *__i;
   if (__val < *__first)
     {
       std::copy_backward(__first, __i, __i + 1);
       *__first = __val;
     }
   else
     std::__unguarded_linear_insert(__i, __val);
 }
    }






  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   typename iterator_traits<_RandomAccessIterator>::value_type
     __val = *__i;
   if (__comp(__val, *__first))
     {
       std::copy_backward(__first, __i, __i + 1);
       *__first = __val;
     }
   else
     std::__unguarded_linear_insert(__i, __val, __comp);
 }
    }






  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, _ValueType(*__i));
    }






  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, _ValueType(*__i), __comp);
    }






  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }






  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }






  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 1; __n >>= 1)
 ++__k;
      return __k;
    }
# 2416 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i, _ValueType(*__i));
      std::sort_heap(__first, __middle);
    }
# 2457 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, _ValueType(*__i), __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 2499 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     
     
      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2563 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     

      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }






  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last
          - 1))));
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }






  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last - 1),
        __comp)),
           __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }
# 2698 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last, __lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 2732 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last, __lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 2765 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






     
     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2820 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2867 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;



     
     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2919 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }






  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }






  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }






  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }






  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3117 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {

     
     
     

     


     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 3175 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {

     
     
     


     

     


      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::merge(__first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::merge(__first, __first + __step_size, __first + __step_size, __last,
   __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::merge(__first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result,
    __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::merge(__first, __first + __step_size,
   __first + __step_size, __last,
   __result,
   __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }






  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    _BidirectionalIterator3
    __merge_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 return std::copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
 return std::copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = *__last1;
       if (__first1 == __last1)
  return std::copy_backward(__first2, ++__last2, __result);
       --__last1;
     }
   else
     {
       *--__result = *__last2;
       if (__first2 == __last2)
  return std::copy_backward(__first1, ++__last1, __result);
       --__last2;
     }
 }
    }






  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    _BidirectionalIterator3
    __merge_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 return std::copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
 return std::copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = *__last1;
       if (__first1 == __last1)
  return std::copy_backward(__first2, ++__last2, __result);
       --__last1;
     }
   else
     {
       *--__result = *__last2;
       if (__first2 == __last2)
  return std::copy_backward(__first1, ++__last1, __result);
       --__last2;
     }
 }
    }






  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   __buffer_end = std::copy(__middle, __last, __buffer);
   std::copy_backward(__first, __middle, __last);
   return std::copy(__buffer, __buffer_end, __first);
 }
      else if (__len1 <= __buffer_size)
 {
   __buffer_end = std::copy(__first, __middle, __buffer);
   std::copy(__middle, __last, __first);
   return std::copy_backward(__buffer, __buffer_end, __last);
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }






  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::merge(__buffer, __buffer_end, __middle, __last, __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__merge_backward(__first, __middle, __buffer,
    __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }






  template<typename _BidirectionalIterator, typename _Distance, typename _Pointer,
    typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::merge(__buffer, __buffer_end, __middle, __last, __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__merge_backward(__first, __middle, __buffer, __buffer_end,
    __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }
# 3595 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     
      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3649 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     

      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }
# 3758 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     
      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType>
 buf(__first, __last);
      if (buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, buf.begin(),
        _DistanceType(buf.size()));
    }
# 3799 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     


      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> buf(__first, __last);
      if (buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, buf.begin(),
        _DistanceType(buf.size()), __comp);
    }
# 3840 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    void
    nth_element(_RandomAccessIterator __first,
  _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      while (__last - __first > 3)
 {
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last
          - 1))));
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }
# 3891 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    nth_element(_RandomAccessIterator __first,
  _RandomAccessIterator __nth,
  _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      while (__last - __first > 3)
 {
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last - 1),
             __comp)), __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 3944 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;



     
     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       __left = std::lower_bound(__first, __middle, __val);
       std::advance(__first, __len);
       __right = std::upper_bound(++__middle, __first, __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 4006 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val,
  _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

     

      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __left = std::lower_bound(__first, __middle, __val, __comp);
       std::advance(__first, __len);
       __right = std::upper_bound(++__middle, __first, __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 4064 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {


     
     

     
      ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 4096 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {

     
     

     

      ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !__comp(__val, *__i);
    }
# 4134 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 4180 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
    {

     
     
     


     


      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 4226 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 4288 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     


     

     


      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 4349 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 4403 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     


     

     


      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 4457 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {

     
     
     

     


     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 4515 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {

     
     
     


     

     


      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 4569 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {

     
     
     

     


     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 4630 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {

     
     
     


     

     


      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 4683 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 4710 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first)) __result = __first;
      return __result;
    }







  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 4762 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 4797 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 4853 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(*__i, *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 4908 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 4964 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(*--__j, *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 5023 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for ( ; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 5059 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for ( ; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 5089 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 5239 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 5284 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }

}
# 69 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/algorithm" 2 3
# 58 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h" 2
# 73 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/vector" 1 3
# 74 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h" 2
# 106 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h"
using std::find;
using __gnu_cxx::slist;
# 170 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h"
class growing_table {
protected:
  UINT size;

private:
  typedef slist<growing_table *> kids_type;

  kids_type kids;

  virtual void Construct_new_entry(void) = 0;
  virtual void Construct_new_entry(UINT n) = 0;
  virtual void Delete_last(void) = 0;
  virtual void Delete_last(UINT n) = 0;

protected:





  void Decrease_kids_size(void)
    {
      for (kids_type::iterator kid = kids.begin();
    kid != kids.end();
    ++kid) {
        (*kid)->Delete_last();
      }
    }

  void Decrease_kids_size(UINT n)
    {
      for (kids_type::iterator kid = kids.begin();
    kid != kids.end();
    ++kid) {
        (*kid)->Delete_last(n);
      }
    }

  void Increase_kids_size(void)
    {
      for (kids_type::iterator kid = kids.begin();
    kid != kids.end();
    ++kid) {
        (*kid)->Construct_new_entry();
      }
    }

  void Increase_kids_size(UINT n)
    {
      for (kids_type::iterator kid = kids.begin();
    kid != kids.end();
    ++kid) {
        (*kid)->Construct_new_entry(n);
      }
    }

public:



  void Register(growing_table &kid)
    {

      ( kid.size <= size ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 235 ), Fail_FmtAssertion ("growing_table::Register: child must not be larger " "than parent")) );



      while (kid.size < size) {
 kid.Construct_new_entry();
      }


      kids.push_front(&kid);
    }

  void Un_register(growing_table &kid)
    {
      kids_type::iterator kid_ptr = find(kids.begin(), kids.end(), &kid);
      if (kid_ptr != kids.end()) {
        kids.erase(kid_ptr);
      }
      else {
 Fail_FmtAssertion("RELATED_SEGMENTED_ARRAY: Cannot un-register "
     "an unregistered kid");
      }
    }
};

template <class T, UINT block_size = 128>
class RELATED_SEGMENTED_ARRAY : public growing_table {
private:
    typedef std::pair<T *, BOOL> thingy;
    std::vector<thingy, mempool_allocator<thingy> > map;
    MEM_POOL *pool;
    UINT max_size;
    INT block_base;


    UINT next_block_size;
    T *block;

private:

    typedef RELATED_SEGMENTED_ARRAY<T, block_size> self;

public:
    typedef T base_type;

    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    typedef UINT size_type;
    typedef INT difference_type;

    typedef SEGMENTED_ARRAY_ITERATOR<self*, T, pointer, reference>
            iterator;
    typedef SEGMENTED_ARRAY_ITERATOR<const self*, T,
                                     const_pointer, const_reference>
            const_iterator;

private:


    virtual void Construct_new_entry(void)
      {
 if (size == max_size) Allocate();
 Increase_kids_size();
 new(&block[size++ - block_base]) T();




      }

    virtual void Construct_new_entry(UINT n)
      {


 for (; n > 0; n--) {
   Construct_new_entry();
 }
      }

    UINT Round_up (UINT s) {
 UINT mask = block_size - 1;
 return (s + mask) & ~mask;
    }

    void Update_Map (T *marker, UINT new_size, BOOL own_memory);

    void Pop_Map ();


    void Allocate ();

    T& New_entry () {
 if (size == max_size) Allocate ();
 Increase_kids_size();
 return block[size++ - block_base];
    }


    void Copy (const T* x, UINT n) {
 std::copy(x, x + n, block + (size - block_base));
 size += n;
 Increase_kids_size(n);
    }



    UINT next_block_idx(UINT block_idx) const {
      for ( ; block_idx + 1 < map.size() &&
              map[block_idx].first + block_size == map[block_idx + 1].first;
            ++block_idx)
        {}
      return block_idx + 1;
    }

public:

  RELATED_SEGMENTED_ARRAY(MEM_POOL *m = (MEM_POOL *) 1) :
    pool (m), map(m) {
      size = max_size = next_block_size = 0;
      block_base = -1;
      block = 0;
  }

  ~RELATED_SEGMENTED_ARRAY() {


    for (typename std::vector<thingy, mempool_allocator<thingy> >::iterator
    entry = map.begin();
  entry != map.end();
  ++entry) {

      if (entry->second) {
 MEM_POOL_FREE(pool, entry->first);
      }
    }
  }

  UINT Block_size () const { return block_size; }

  UINT Size () const { return growing_table::size; }

  T& Entry (UINT idx) {
    ( idx < size ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 378 ), Fail_FmtAssertion ("Array subscript out of bound")) );
    return map[idx / block_size].first[idx % block_size];
  }

  const T& Entry (UINT idx) const {
    ( idx < size ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 383 ), Fail_FmtAssertion ("Array subscript out of bound")) );
    return map[idx / block_size].first[idx % block_size];
  }


  T& operator[] (UINT idx) { return Entry(idx); }
  const T& operator[] (UINT idx) const { return Entry(idx); }

  iterator begin () {
    return iterator (this, map[0].first, Block_end (0), 0);
  }

  iterator end () {
    return iterator (this, block + (size - block_base),
       block + (max_size - block_base), size);
  }

  const_iterator begin () const {
    return const_iterator (this, map[0].first, Block_end (0), 0);
  }

  const_iterator end () const {
    return const_iterator (this, block + (size - block_base),
      block + (max_size - block_base), size);
  }

    T& New_entry (UINT& idx) { idx = size; return New_entry (); }

    UINT Insert (const T& x);

    virtual void Delete_last () {
      size--;
      Decrease_kids_size();
      if (size == block_base)
 Pop_Map ();
    }

    virtual void Delete_last (UINT n);


    UINT Insert (const T* x, UINT n_elemt);


    UINT Transfer (T* x, UINT n_elemt);



    void Reserve (UINT n_elemt) {
 if (max_size - size + next_block_size < n_elemt)
     next_block_size = n_elemt - (max_size - size);
    }


    UINT Get_block_size (UINT idx) const {
      UINT block_idx = idx / block_size;
      return std::min(next_block_idx(block_idx) * block_size, size) - idx;
    }

    UINT Block_index (UINT idx) const { return idx / block_size; }


    UINT Block_index_end () const { return map.size(); }

    T* Block_begin (UINT block_idx) { return map[block_idx].first; }
    const T* Block_begin (UINT block_idx) const { return map[block_idx].first; }

    T* Block_end(UINT block_idx) {
      return Block_begin(block_idx) +
             (next_block_idx(block_idx) - block_idx) * block_size;
    }

    const T* Block_end(UINT block_idx) const {
      return Block_begin(block_idx) +
             (next_block_idx(block_idx) - block_idx) * block_size;
    }

    void Clear(void);
};

template <class T, UINT block_size>
inline void
RELATED_SEGMENTED_ARRAY<T,block_size>::Update_Map(T *marker,
        UINT new_size,
        BOOL own_memory)
{
  do {
    map.push_back(pair<T*, BOOL>(marker, own_memory));
    new_size -= block_size;
    marker += block_size;
    own_memory += false;

  } while (new_size);
}



template <class T, UINT block_size>
void
RELATED_SEGMENTED_ARRAY<T,block_size>::Pop_Map ()
{
    next_block_size += max_size - block_base;
    MEM_POOL_FREE (pool, block);

    T *last_map_entry;
    do {
      last_map_entry = (map.end() - 1)->first;
      map.pop_back ();
    } while (last_map_entry != block);

    max_size = size;
    if (size > 0) {
      ( size >= block_size ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 495 ), Fail_FmtAssertion ("RELATED_SEGMENTED_ARRAY: size in limbo")) );

      block_base = size - block_size;
      UINT idx = block_base / block_size;
      block = map[idx].first;
      while (idx > 0 && map[idx - 1].first + block_size == block) {
 block = map[--idx].first;
 block_base -= block_size;
      }
    }
    else {
      ( map.begin() == map.end() ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 506 ), Fail_FmtAssertion ("RELATED_SEGMENTED_ARRAY::Pop_Map: Map should be empty")) );

      block_base = -1;
      block = __null;
    }
}


template <class T, UINT block_size>
void
RELATED_SEGMENTED_ARRAY<T,block_size>::Allocate ()
{
    ( size == max_size ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 517 ), Fail_FmtAssertion ("Invalid internal state in segmented array")) );

    UINT new_size;

    if (next_block_size == 0)
 new_size = block_size;
    else {
 new_size = Round_up (next_block_size);
 next_block_size = 0;
    }

    block = (T *) MEM_POOL_Alloc_P(pool,new_size * sizeof(T),528,"/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h");
    max_size += new_size;
    block_base = size;

    Update_Map (block, new_size, ((BOOL) 1));
}


template <class T, UINT block_size>
void
RELATED_SEGMENTED_ARRAY<T,block_size>::Delete_last (UINT n)
{
  while (n >= size - block_base) {
    n -= size - block_base;
    size = block_base;
    Pop_Map ();
  }
  size -= n;
  Decrease_kids_size(n);
}


template <class T, UINT block_size>
inline UINT
RELATED_SEGMENTED_ARRAY<T,block_size>::Insert (const T& x)
{
    UINT idx = size;
    T &entry = New_entry ();

    entry = x;
    return idx;
}


template <class T, UINT block_size>
UINT
RELATED_SEGMENTED_ARRAY<T,block_size>::Insert (const T* x, UINT n_elemt)
{
    UINT result = size;
    if (size + n_elemt <= max_size) {
 Copy (x, n_elemt);
 return result;
    }

    UINT space_left = max_size - size;
    Copy (x, space_left);
    n_elemt -= space_left;

    Reserve (n_elemt);
    Allocate ();
    Copy (x + space_left, n_elemt);

    return result;
}


template <class T, UINT block_size>
UINT
RELATED_SEGMENTED_ARRAY<T,block_size>::Transfer (T* x, UINT n_elemt)
{
    UINT result = size;

    if (size + n_elemt <= max_size) {
 Copy (x, n_elemt);
 return result;
    }

    UINT space_left = max_size - size;
    if (space_left > 0) {
 Copy (x, space_left);
 n_elemt -= space_left;
 x += space_left;
    }

    if (n_elemt >= block_size) {
 UINT reused_size = n_elemt & ~(block_size - 1);
 block = x;
 Update_Map (block, reused_size, ((BOOL) 0));
 block_base = size;
 size += reused_size;
 max_size += reused_size;
 n_elemt -= reused_size;
 x += reused_size;
 if (next_block_size > reused_size)
     next_block_size -= reused_size;
 else
     next_block_size = 0;
    }

    if (n_elemt > 0) {
 Allocate ();
 Copy (x, n_elemt);
    }

    return result;
}



template <class T, UINT block_size>
void
RELATED_SEGMENTED_ARRAY<T,block_size>::Clear(void)
{
  if (growing_table::size > 0) {
    Delete_last(growing_table::size);
  }
  ( map.begin() == map.end() ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 635 ), Fail_FmtAssertion ("RELATED_SEGMENTED_ARRAY::Clear: Map should be empty")) );

}

template <class T, UINT block_size, class OP>
inline void
For_all_entries (RELATED_SEGMENTED_ARRAY<T, block_size>& array,
                 const OP &op,
   UINT32 first = 0)
{
    UINT last = array.Size ();

    while (first < last) {
 T *block = &array[first];
 UINT size = array.Get_block_size (first);
 for (UINT j = 0; j < size; ++j, ++block)
     op (first + j, block);
 first += size;
    }
}
# 679 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h"
template <class T, UINT block_size, class OP>
inline void
For_all_blocks (RELATED_SEGMENTED_ARRAY<T, block_size>& array, const OP &op)
{
    UINT max_size = array.Size ();
    UINT i = 0;

    while (i < max_size) {
 T *block = &array[i];
 UINT size = array.Get_block_size (i);
 op (i, block, size);
 i += size;
    }
}




template <class T, UINT block_size, class PREDICATE>
inline UINT
Find_entry_if (const RELATED_SEGMENTED_ARRAY<T, block_size>& array,
        const PREDICATE& pred, UINT i = 0)
{
    UINT max_size = array.Size ();

    while (i < max_size) {
 const T *block = &array[i];
 UINT size = array.Get_block_size (i);
 for (UINT j = 0; j < size; ++j, ++block)
     if (pred (i+j, block))
  return i + j;
 i += size;
    }

    return (UINT) ((UINT) -1);
}





template <class T, UINT block_size>
UINT32
Copy_array_range (const RELATED_SEGMENTED_ARRAY<T, block_size>& from_array,
    RELATED_SEGMENTED_ARRAY<T, block_size>& to_array,
    UINT32 first_idx = 0, UINT32 last_idx = (UINT32) -1)
{
    if (last_idx > from_array.Size ())
 last_idx = from_array.Size ();

    ( last_idx >= first_idx ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/cmplr_segmented_array.h", 729 ), Fail_FmtAssertion ("Invalid copy range")) );

    UINT32 entries = last_idx - first_idx;

    to_array.Reserve (entries);

    while (first_idx < last_idx) {
 const T* block = &from_array[first_idx];
 UINT32 size = from_array.Get_block_size (first_idx);
 if (size > last_idx - first_idx)
     size = last_idx - first_idx;

 to_array.Insert (block, size);
 first_idx += size;
    }

    return entries;
}





template <class T, UINT block_size>
UINT32
Delete_array_item (const RELATED_SEGMENTED_ARRAY<T, block_size>& from_array,
    RELATED_SEGMENTED_ARRAY<T, block_size>& to_array,
    UINT32 first_idx = 0, UINT32 last_idx = (UINT32) -1)
{
  UINT32 index;
  index = to_array.Size() - from_array.Size();

  while ( index < to_array.Size()) {
 T* block = &to_array[index];
        if (block->name_idx !=0 )
                block->name_idx = 0;
        index ++;
  }
}
# 56 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_idx.h" 1
# 51 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_idx.h"
typedef mUINT32 ST_IDX;
typedef mUINT32 TY_IDX;
typedef mUINT32 FLD_IDX;
typedef mUINT32 ARB_IDX;
typedef mUINT32 TYLIST_IDX;
typedef mUINT32 PU_IDX;
typedef mUINT32 TARGET_INFO_IDX;
typedef mUINT32 TCON_IDX;
typedef mUINT32 LABEL_IDX;
typedef mUINT32 PREG_IDX;
typedef mUINT32 ST_ATTR_IDX;
typedef mUINT32 BLK_IDX;
typedef mUINT32 INITO_IDX;
typedef mUINT32 INITV_IDX;
typedef mUINT64 STR_IDX;
typedef mUINT8 SYMTAB_IDX;



static const ST_IDX ST_IDX_ZERO = 0;
static const TY_IDX TY_IDX_ZERO = 0;
static const FLD_IDX FLD_IDX_ZERO = 0;
static const ARB_IDX ARB_IDX_ZERO = 0;
static const TYLIST_IDX TYLIST_IDX_ZERO = 0;
static const PU_IDX PU_IDX_ZERO = 0;
static const TARGET_INFO_IDX TARGET_INFO_IDX_ZERO = 0;
static const TCON_IDX TCON_IDX_ZERO = 0;
static const LABEL_IDX LABEL_IDX_ZERO = 0;
static const PREG_IDX PREG_IDX_ZERO = 0;
static const ST_ATTR_IDX ST_ATTR_IDX_ZERO = 0;
static const BLK_IDX BLK_IDX_ZERO = 0;
static const INITO_IDX INITO_IDX_ZERO = 0;
static const INITV_IDX INITV_IDX_ZERO = 0;
static const STR_IDX STR_IDX_ZERO = 0;
static const SYMTAB_IDX SYMTAB_IDX_ZERO = 0;



struct ST;
struct TY;
struct FLD;
struct ARB;
struct PU;
struct TCON;
struct LABEL;
struct PREG;
struct ST_ATTR;
struct INITO;
struct INITV;
struct SCOPE;
struct FILE_INFO;
# 115 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_idx.h"
template<class INDEX_TYPE, class LEVEL_INDEX_TYPE>
inline LEVEL_INDEX_TYPE Extract_level8(INDEX_TYPE idx, LEVEL_INDEX_TYPE *)
{
  return idx & 0xff;
}

template<class INDEX_TYPE>
inline UINT32 Extract_index24(INDEX_TYPE idx) { return idx >> 8; }

inline SYMTAB_IDX
ST_IDX_level (ST_IDX st_idx)
{
  return Extract_level8(st_idx, (SYMTAB_IDX *) 0);
}

inline UINT32
ST_IDX_index (ST_IDX st_idx) { return Extract_index24(st_idx); }

inline ST_IDX
make_ST_IDX (UINT index, SYMTAB_IDX level) {
    return (ST_IDX)((index << 8)|level);
}


inline SYMTAB_IDX
INITO_IDX_level (INITO_IDX inito_idx)
{
  return Extract_level8(inito_idx, (SYMTAB_IDX *) 0);
}

inline UINT32
INITO_IDX_index (INITO_IDX inito_idx) { return Extract_index24(inito_idx); }

inline INITO_IDX
make_INITO_IDX (UINT index, SYMTAB_IDX level) {
    return (INITO_IDX) ((index << 8)|level);
}

template<class ENTRY_TYPE,
         class INDEX_TYPE,
         class LEVEL_INDEX_TYPE,
         class LEVEL_CONTAINER_TYPE,
         LEVEL_CONTAINER_TYPE *level_container_ptr,
         class LEVEL_MEMBER_ACCESSOR>
struct TABLE_INDEXED_BY_LEVEL8_AND_INDEX24 {
  ENTRY_TYPE &operator[](INDEX_TYPE idx)
    {
      LEVEL_INDEX_TYPE level = Extract_level8(idx, (LEVEL_INDEX_TYPE *) 0);
      UINT32 index = Extract_index24(idx);
      return LEVEL_MEMBER_ACCESSOR()(level_container_ptr, level)->Entry(index);
    }

  ENTRY_TYPE &operator()(LEVEL_CONTAINER_TYPE *lev_container_ptr,
    INDEX_TYPE idx)
    {
      LEVEL_INDEX_TYPE level = Extract_level8(idx, (LEVEL_INDEX_TYPE *) 0);
      UINT32 index = Extract_index24(idx);
      return LEVEL_MEMBER_ACCESSOR()(lev_container_ptr, level)->Entry(index);
    }

  ENTRY_TYPE &operator()(LEVEL_INDEX_TYPE level, UINT32 index)
    {




      return LEVEL_MEMBER_ACCESSOR()(level_container_ptr, level)->Entry(index);
    }

  ENTRY_TYPE &operator()(LEVEL_CONTAINER_TYPE *lev_container_ptr,
    LEVEL_INDEX_TYPE level, UINT32 index)
    {




      return LEVEL_MEMBER_ACCESSOR()(lev_container_ptr, level)->Entry(index);
    }
};
# 210 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_idx.h"
const UINT32 TY_RESTRICT = 0x00000080;
const UINT32 TY_VOLATILE = 0x00000040;
const UINT32 TY_CONST = 0x00000020;
const UINT32 TY_ALIGN = 0x0000001f;

inline UINT32 TY_IDX_index (TY_IDX ty_idx) { return ty_idx >> 8; }
inline void Set_TY_IDX_index (TY_IDX &ty_idx, UINT32 index)
{
    ty_idx = (ty_idx & 0xff) | (index << 8);
}

inline TY_IDX
make_TY_IDX (UINT32 index) { return index << 8; }

inline BOOL TY_is_const (TY_IDX ty_idx) { return ty_idx & TY_CONST; }
inline void Set_TY_is_const (TY_IDX &ty_idx) { ty_idx |= TY_CONST; }
inline void Clear_TY_is_const (TY_IDX &ty_idx) { ty_idx &= ~TY_CONST; }

inline BOOL TY_is_volatile (TY_IDX ty_idx) { return ty_idx & TY_VOLATILE;}
inline void Set_TY_is_volatile (TY_IDX &ty_idx) { ty_idx |= TY_VOLATILE; }
inline void Clear_TY_is_volatile (TY_IDX &ty_idx){ ty_idx &= ~TY_VOLATILE; }

inline BOOL TY_is_restrict (TY_IDX ty_idx) { return ty_idx & TY_RESTRICT;}
inline void Set_TY_is_restrict (TY_IDX &ty_idx) { ty_idx |= TY_RESTRICT; }
inline void Clear_TY_is_restrict (TY_IDX &ty_idx){ ty_idx &= ~TY_RESTRICT; }



inline UINT TY_align_exp (TY_IDX ty_idx) { return ty_idx & TY_ALIGN; }
inline void Set_TY_align_exp (TY_IDX &ty_idx, UINT exp) {
    ty_idx = (ty_idx & ~TY_ALIGN) | (exp & TY_ALIGN);
}

inline UINT TY_align (TY_IDX ty_idx) { return 1 << (ty_idx & TY_ALIGN); }
inline void Set_TY_align (TY_IDX &ty_idx, UINT32 align) {
    extern UINT32 TY_log_base2 (UINT32 align);

    if (align & 0x3f)
 Set_TY_align_exp (ty_idx,
     (align & 0x7) ? (align >> 1) : 3 + (align >> 4));
    else
 Set_TY_align_exp (ty_idx, TY_log_base2 (align));
}
# 60 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h" 1
# 43 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h"
extern "C" {
# 157 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h"
typedef UINT8 TYPE_ID;
typedef mUINT8 mTYPE_ID;
# 178 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h"
typedef struct type_desc {
  mCLASS_INDEX id;
  mUINT16 bit_size;
  mUINT16 byte_size;
  mUINT16 dummy1;
  mUINT8 alignment;
  mUINT8 dummy2;
  mUINT8 dummy3;

  mBOOL signed_type;
  mBOOL float_type;
  mCLASS_INDEX dummy4;
  char *name;
  mUINT8 type_class_bits;
  mUINT8 type_order;
  mCLASS_INDEX complement;
} TYPE_DESC;




extern TYPE_DESC Machine_Types[];
# 251 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h"
typedef UINT32 MTYPE_MASK;
# 263 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h"
extern MTYPE_MASK Machine_Types_Available;
# 287 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/mtypes.h"
extern char *Mtype_Name ( TYPE_ID );
extern TYPE_ID Mtype_AlignmentClass( INT32 , mUINT8 );
extern TYPE_ID Mtype_Promote_to_A4A8( TYPE_ID );
extern TYPE_ID Mtype_TransferSign( TYPE_ID, TYPE_ID );
extern TYPE_ID Mtype_TransferSize( TYPE_ID, TYPE_ID );
extern TYPE_ID Mtype_complex_to_real( TYPE_ID);
extern TYPE_ID Mtype_comparison( TYPE_ID );
extern TYPE_ID Mtype_next_alignment( TYPE_ID);
extern TYPE_ID Mtype_prev_alignment( TYPE_ID);



}
# 64 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h" 1
# 97 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config_host.h" 1
# 39 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config_host.h"
extern "C" {
# 98 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config_host.h"
extern void Preconfigure_Host (void);


extern void Configure_Host (void);


extern void Configure_Source_Host ( char *filename );


}
# 98 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h" 2




extern "C" {



struct ty;



typedef QUADFP QUAD_TYPE;
# 143 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h"
struct TCON {
    mTYPE_ID ty;
    UINT32 flags;




    union {
 struct {

     mINT32 v0, v1, v2, v3;



 } ival;
 struct {

     mUINT32 u0, u1, u2, u3;



 } uval;

 struct {
     mINT64 ll0;
     mINT64 ll1;
 } llval;

 mINT32 word0;
 mINT64 i0;
 mUINT64 k0;
 float fval;
 double dval;
 QUAD_TYPE qval;
 struct {
     mUINT32 cp;
     mUINT32 len;
 } sval;
    } vals;
    union {
 struct {

     mINT32 v0, v1, v2, v3;



 } ival;

 mINT32 word0;
 mINT64 i0;

 float fival;
 double dival;
 QUAD_TYPE qival;
    } cmplxval;
};


inline TYPE_ID
TCON_ty (const TCON& tcon) { return tcon.ty; }
inline void
Set_TCON_ty (TCON& tcon, TYPE_ID mtype) { tcon.ty = mtype; }
inline INT32
TCON_ival (const TCON& tcon) { return tcon.vals.word0; }

inline INT32
TCON_cival (const TCON& tcon) { return tcon.cmplxval.word0; }
inline INT64
TCON_ci0 (const TCON& tcon) { return tcon.cmplxval.i0; }

inline UINT32
TCON_uval (const TCON& tcon) { return (UINT32) tcon.vals.word0; }
inline INT64
TCON_i0 (const TCON& tcon) { return tcon.vals.i0; }
inline UINT64
TCON_k0 (const TCON& tcon) { return tcon.vals.k0; }
inline float
TCON_fval (const TCON& tcon) { return tcon.vals.fval; }
inline double
TCON_dval (const TCON& tcon) { return tcon.vals.dval; }
inline QUAD_TYPE
TCON_qval (const TCON& tcon) { return tcon.vals.qval; }
inline mUINT32
TCON_str_idx (const TCON& tcon) { return tcon.vals.sval.cp; }
inline mUINT32
TCON_str_len (const TCON& tcon) { return tcon.vals.sval.len; }
# 269 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h"
extern TCON Targ_IntrinsicOp ( UINT32 intrinsic, TCON c[],
       BOOL *folded );


extern TCON Targ_Pow ( TCON mantissa, TCON exponent );


extern TCON Targ_Conv ( TYPE_ID newtype, TCON cvalue );


extern TCON Targ_Cast ( TYPE_ID newtype, TCON cvalue );


extern TCON Targ_Atoc ( TYPE_ID ctype, char *ascii );




extern TCON Targ_Hexfptoc ( const TYPE_ID ty, const char * const str );




extern INT64 Targ_To_Host ( TCON cvalue );




extern INT64 Targ_To_Signed_Host ( TCON cvalue );


extern TCON Host_To_Targ ( TYPE_ID ctype, INT64 ivalue );


extern TCON Host_To_Targ_Float ( TYPE_ID ctype, double fvalue );
extern TCON Host_To_Targ_Float_4 ( TYPE_ID ctype, float fvalue );
extern TCON Host_To_Targ_Quad ( QUAD_TYPE fvalue );






extern double Targ_To_Host_Float ( TCON fvalue );
extern QUAD_TYPE Targ_To_Host_Quad ( TCON fvalue );


extern TCON Host_To_Targ_Complex_4 ( TYPE_ID ctype, float real, float imag );
extern TCON Host_To_Targ_Complex ( TYPE_ID ctype, double real, double imag );
extern TCON Host_To_Targ_Complex_Quad ( QUAD_TYPE real, QUAD_TYPE imag );


extern TCON Make_Complex ( TYPE_ID ctype, TCON real, TCON imag );


extern TCON Host_To_Targ_UV(TYPE_ID ctype);


extern TCON Extract_Complex_Real( TCON complex);
extern TCON Extract_Complex_Imag( TCON complex);


extern TCON Extract_Quad_Hi( TCON q);
extern TCON Extract_Quad_Lo( TCON q);



extern TCON Extract_Double_Hi( TCON q);
extern TCON Extract_Double_Lo( TCON q);


extern TCON Extract_LongLong_Hi(TCON q);
extern TCON Extract_LongLong_Lo( TCON q);
# 352 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h"
extern TCON Host_To_Targ_String ( TYPE_ID ctype, const char *cp, UINT32 len );
extern char *Targ_String_Address ( TCON cvalue );
extern mUINT32 Targ_String_Length ( TCON cvalue );





extern char *Targ_Print ( char *fmt, TCON cvalue );





extern BOOL Targ_Format_String (
  char *s,
  INT32 slen,
  char *buf,
  INT32 blen,
  INT32 line,
  char *divider
);






extern void Targ_Emit_String ( FILE *fl, char *str, INT32 len, INTSC loc );





extern void Targ_Emit_Const ( FILE *fl, TCON tvalue, BOOL add_null, INTSC rc, INTSC loc );

extern void Targ_Emit_EH_Const ( FILE *fl, TCON tvalue, BOOL add_null, INTSC rc, INTSC loc, INT format=0 );
# 399 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/targ_const.h"
extern void Targ_Emit_Space ( FILE *fl, INT len, INT loc );


extern void Targ_Emit_Cmt ( FILE *fl, char *cmt );




extern void Targ_Emit_Dim ( FILE *fl, struct ty *ty, INT dim );





extern char *Tcon_To_Str ( char *buf, TCON cval );




extern TCON Str_To_Tcon ( TYPE_ID ctype, char *buf );
extern TCON Bit_Str_To_Tcon ( TYPE_ID ctype, char *buf );


extern TCON Zero_I4_Tcon;
extern TCON Zero_I8_Tcon;
extern TCON Quad_Zero_Tcon;


extern BOOL Targ_Is_Zero ( TCON t );




extern BOOL Targ_Is_Integral ( TCON t, INT64 *iv );


extern BOOL Targ_Is_Power_Of_Two ( TCON t );




extern BOOL Targ_Contains_One_Bit_On ( TCON t, INT32 *onebit);





extern BOOL Targ_Determine_High_Bit ( TCON t, INT32 *highbit );


extern UINT32 Hash_TCON ( TCON * t, UINT32 modulus );

extern INT32 Targ_fp_class(TCON fvalue);



extern void Check_TCON (TCON *tc);



}
# 68 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/strtab.h" 1
# 68 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/strtab.h"
namespace __new_hash
{
template <class _Key> struct hash { };

  template<> struct hash<unsigned long long> {
    size_t operator()(unsigned long long __x) const { return __x; }
  };
}







extern void
Initialize_Strtab (UINT32 size);


extern void
Initialize_Strtab (const char *buf, UINT32 size);


extern STR_IDX
Save_Str (const char *str);


extern STR_IDX
Save_Str2 (const char *s1, const char *s2);


extern STR_IDX
Save_Str2i (const char *s1, const char *s2, UINT i);

extern char *
Index_To_Str (STR_IDX idx);

struct STRING_TABLE
{
    char &operator[] (STR_IDX idx) {
 return *Index_To_Str (idx);
    }
};


extern STRING_TABLE Str_Table;

extern STR_IDX
STR_Table_Size ();


inline char *
Index_To_Str (STR_IDX idx, void *) { return Index_To_Str (idx); }




extern UINT32
TCON_strtab_size ();

extern char *
TCON_strtab_buffer ();

extern void
Initialize_TCON_strtab (UINT32 size);

extern void
Initialize_TCON_strtab (const char *buf, UINT32 size);


extern UINT32
Save_StrN (const char *s1, UINT32 len);

extern char *
Index_to_char_array (UINT32 idx);
# 72 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/irbdata_defs.h" 1
# 53 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/irbdata_defs.h"
struct INITO {
    ST_IDX st_idx;
    INITV_IDX val;

    void Verify (UINT level) const;
    void Print (FILE* f) const;
};




enum INITVKIND {
    INITVKIND_UNK = 0,
    INITVKIND_SYMOFF = 1,
    INITVKIND_ZERO = 2,
    INITVKIND_ONE = 3,
    INITVKIND_VAL = 4,
    INITVKIND_BLOCK = 5,
    INITVKIND_PAD = 6,
    INITVKIND_SYMDIFF = 7,
    INITVKIND_SYMDIFF16 = 8,




    INITVKIND_LABEL = 9

};


enum INITVFLAGS {
    INITVFLAGS_UNDEFINED = 0,
    INITVFLAGS_ACTION_REC,
    INITVFLAGS_TYPEINFO,
    INITVFLAGS_EH_SPEC,
    INITVFLAGS_SUMMARIZED,
    INITVFLAGS_UPDATED
};


struct INITV
{
    INITV_IDX next;
    INITVKIND kind : 16;
    mUINT16 repeat1;

    union {

 struct {
     ST_IDX st;
     mINT32 ofst;
 } sto;


 struct {
     LABEL_IDX lab;
     mINT32 unused;
 } lab;

 struct {
     LABEL_IDX lab1;
     ST_IDX st2;
 } stdiff;

 struct {
     union {
  TCON_IDX tc;
  mTYPE_ID mtype;

     } u;
     mUINT32 repeat2;
 } tcval;

 struct {
     INITV_IDX blk;

     mINT32 flags;



 } blk;

 struct {
     mINT32 pad;
     mINT32 unused;
 } pad;
    } u;

    ST_IDX St () const { return u.sto.st; }
    INT32 Ofst () const { return u.sto.ofst; }

    LABEL_IDX Lab () const { return u.lab.lab; }

    LABEL_IDX Lab1 () const { return u.stdiff.lab1; }
    ST_IDX St2 () const { return u.stdiff.st2; }

    TCON_IDX Tc () const { return u.tcval.u.tc; }
    TYPE_ID Mtype () const { return u.tcval.u.mtype; }
    UINT32 Repeat2 () const { return u.tcval.repeat2; }

    INITV_IDX Blk () const { return u.blk.blk; }
    INT32 Pad () const { return u.pad.pad; }

    void Verify (UINT level) const;
};
# 76 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2


# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h" 1
# 58 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h"
enum ST_CLASS
{
    CLASS_UNK = 0,
    CLASS_VAR = 1,
    CLASS_FUNC = 2,
    CLASS_CONST = 3,
    CLASS_PREG = 4,
    CLASS_BLOCK = 5,
   CLASS_NAME = 6,
    CLASS_COUNT = 7
};


enum ST_SCLASS
{

    SCLASS_UNKNOWN = 0,
    SCLASS_AUTO = 1,
    SCLASS_FORMAL = 2,
    SCLASS_FORMAL_REF = 3,
    SCLASS_PSTATIC = 4,
    SCLASS_FSTATIC = 5,
    SCLASS_COMMON = 6,
    SCLASS_EXTERN = 7,
    SCLASS_UGLOBAL = 8,
    SCLASS_DGLOBAL = 9,
    SCLASS_TEXT = 10,
    SCLASS_REG = 11,
    SCLASS_CPLINIT = 12,
    SCLASS_EH_REGION = 13,
    SCLASS_EH_REGION_SUPP = 14,
    SCLASS_DISTR_ARRAY = 15,
    SCLASS_COMMENT = 16,
    SCLASS_THREAD_PRIVATE_FUNCS = 17,
    SCLASS_COUNT = 18

};


enum ST_EXPORT
{
    EXPORT_LOCAL = 0,
    EXPORT_LOCAL_INTERNAL = 1,

    EXPORT_INTERNAL = 2,



    EXPORT_HIDDEN = 3,




    EXPORT_PROTECTED = 4,

    EXPORT_PREEMPTIBLE = 5,
    EXPORT_OPTIONAL = 6,
    EXPORT_COUNT = 7

};


enum ST_FLAGS
{
    ST_IS_WEAK_SYMBOL = 0x00000001,
    ST_IS_SPLIT_COMMON = 0x00000002,
    ST_IS_NOT_USED = 0x00000004,
    ST_IS_INITIALIZED = 0x00000008,
    ST_IS_RETURN_VAR = 0x00000010,
    ST_IS_VALUE_PARM = 0x00000020,
    ST_PROMOTE_PARM = 0x00000040,
    ST_KEEP_NAME_W2F = 0x00000080,
    ST_IS_DATAPOOL = 0x00000100,
    ST_IS_RESHAPED = 0x00000200,
    ST_EMIT_SYMBOL = 0x00000400,
    ST_HAS_NESTED_REF = 0x00000800,
    ST_INIT_VALUE_ZERO = 0x00001000,
    ST_GPREL = 0x00002000,
    ST_NOT_GPREL = 0x00004000,
    ST_IS_NAMELIST = 0x00008000,
    ST_IS_F90_TARGET = 0x00010000,
    ST_DECLARED_STATIC = 0x00020000,
    ST_IS_EQUIVALENCED = 0x00040000,
    ST_IS_FILL_ALIGN = 0x00080000,
    ST_IS_OPTIONAL_ARGUMENT = 0x00100000,
    ST_PT_TO_UNIQUE_MEM = 0x00200000,
    ST_IS_TEMP_VAR = 0x00400000,
    ST_IS_CONST_VAR = 0x00800000,
    ST_ADDR_SAVED = 0x01000000,
    ST_ADDR_PASSED = 0x02000000,
    ST_IS_THREAD_PRIVATE = 0x04000000,

    ST_PT_TO_COMPILER_GENERATED_MEM = 0x08000000,

    ST_IS_SHARED_AUTO = 0x10000000,

    ST_ASSIGNED_TO_DEDICATED_PREG = 0x20000000,

    ST_ASM_FUNCTION_ST = 0x40000000,

    ST_HAS_NAMED_SECTION = 0x80000000

};


enum ST_FLAGS_EXT
{
    ST_ONE_PER_PU = 0x01,
    ST_COPY_CONSTRUCTOR_ST = 0x02,
    ST_INITV_IN_OTHER_ST = 0x04,
    ST_IS_INITIALIZED_IN_F90 = 0x8,
    ST_IS_METHOD_FUNC = 0x10,

    ST_IS_THIS_PTR = 0x20,

    ST_IN_V1BUF = 0x40,
    ST_IN_V2BUF = 0x80,
    ST_IN_V4BUF = 0x100,
    ST_IN_SDRAM = 0x200,
    ST_IN_SBUF = 0x400,
    ST_IS_VBUF_OFFSET = 0x800,
    ST_IS_SBUF_OFFSET = 0x1000,

    ST_IS_PURE_VFUNC = 0x2000,
    ST_IS_THREAD_LOCAL = 0x4000,
};



class ST
{
public:
    union {
 STR_IDX name_idx;
 TCON_IDX tcon;
    } u1;

    mUINT32 flags;

    mUINT16 flags_ext;



    ST_CLASS sym_class : 8;
    ST_SCLASS storage_class : 8;
    ST_EXPORT export_class : 8;

    union {
 TY_IDX type;
 PU_IDX pu;
 BLK_IDX blk;
    } u2;

    mUINT64 offset;

    ST_IDX base_idx;

    ST_IDX st_idx;



    ST () {Fail_FmtAssertion("ST default constructor must not be called.");}

    void Verify(UINT level) const;

    void Print(FILE *f, BOOL verbose = ((BOOL) 1)) const;

    BOOL operator==(ST &st) const;

};
# 236 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h"
enum FLD_FLAGS
{
    FLD_LAST_FIELD = 0x0001,
    FLD_EQUIVALENCE = 0x0002,
    FLD_BEGIN_UNION = 0x0004,
    FLD_END_UNION = 0x0008,
    FLD_BEGIN_MAP = 0x0010,
    FLD_END_MAP = 0x0020,
    FLD_IS_BIT_FIELD = 0x0040,
    FLD_IS_ANONYMOUS = 0x0080,
    FLD_IS_BASE_CLASS = 0x0100
};

struct FLD
{
    STR_IDX name_idx;

    mUINT64 ofst;

    mUINT8 bsize;
    mUINT8 bofst;

    mUINT16 flags;

    ST_IDX st;

    TY_IDX type;



    FLD ();

    void Verify (UINT64 record_size) const;

    void Print (FILE *f) const;

};


typedef TY_IDX TYLIST;






enum ARB_FLAGS
{
    ARB_CONST_LBND = 0x0001,
    ARB_CONST_UBND = 0x0002,
    ARB_CONST_STRIDE = 0x0004,
    ARB_FIRST_DIMEN = 0x0008,
    ARB_LAST_DIMEN = 0x0010
};

struct ARB
{
    mUINT16 flags;
    mUINT16 dimension;

    mUINT32 unused;

    union {
 mINT64 lbnd_val;
 struct {
     ST_IDX lbnd_var;

     mINT32 unused;
 } var;
    } u1;

    union {
 mINT64 ubnd_val;
 struct {
     ST_IDX ubnd_var;

     mINT32 unused;
 } var;
    } u2;

    union {
 mINT64 stride_val;
 struct {
     ST_IDX stride_var;

     mINT32 unused;
 } var;
    } u3;


    INT64 Lbnd_val () const { return u1.lbnd_val; }
    void Set_lbnd_val (INT64 val) { u1.lbnd_val = val; }

    ST_IDX Lbnd_var () const { return u1.var.lbnd_var; }
    void Set_lbnd_var (ST_IDX st) {
 u1.var.lbnd_var = st;
 u1.var.unused = 0;
    }

    INT64 Ubnd_val () const { return u2.ubnd_val; }
    void Set_ubnd_val (INT64 val) { u2.ubnd_val = val; }

    ST_IDX Ubnd_var () const { return u2.var.ubnd_var; }
    void Set_ubnd_var (ST_IDX st) {
 u2.var.ubnd_var = st;
 u2.var.unused = 0;
    }

    INT64 Stride_val () const { return u3.stride_val; }
    void Set_stride_val (INT64 val) { u3.stride_val = val; }

    ST_IDX Stride_var () const { return u3.var.stride_var; }
    void Set_stride_var (ST_IDX st) {
 u3.var.stride_var = st;
 u3.var.unused = 0;
    }







    ARB () { bzero (this, sizeof(ARB)); }


    void Verify (mUINT16 dim) const;

    void Print (FILE *f) const;

};


enum LABEL_KIND
{
    LKIND_DEFAULT = 0,
    LKIND_ASSIGNED = 1,
    LKIND_BEGIN_EH_RANGE = 2,
    LKIND_END_EH_RANGE = 3,
    LKIND_BEGIN_HANDLER = 4,
    LKIND_END_HANDLER = 5,
    LKIND_TAG = 6
};

enum LABEL_FLAGS
{
    LABEL_TARGET_OF_GOTO_OUTER_BLOCK = 1,
    LABEL_ADDR_SAVED = 2,
    LABEL_ADDR_PASSED = 4
};

struct LABEL
{
    STR_IDX name_idx;
    mUINT32 flags:24;
    LABEL_KIND kind:8;



    LABEL () {Fail_FmtAssertion("LABEL default constructor must not be called.");}

    LABEL (STR_IDX idx, LABEL_KIND k) : name_idx (idx), kind (k) {}

    void Verify(UINT level) const;

    void Print (FILE *f) const;
};


struct PREG
{
    STR_IDX name_idx;


    PREG(void)
      {
 Fail_FmtAssertion("PREG default constructor must not be called.");
      }

    PREG (STR_IDX idx) : name_idx (idx) { }

    void Verify(UINT level) const;

    void Print (FILE *f) const;

};



enum ST_ATTR_KIND
{
    ST_ATTR_UNKNOWN = 0,
    ST_ATTR_DEDICATED_REGISTER = 1,
    ST_ATTR_SECTION_NAME = 2
};

class ST_ATTR
{
    public:
    ST_IDX st_idx;
    ST_ATTR_KIND kind;
    private:
    union {
 mUINT32 value;
 mPREG_NUM reg_id;
 STR_IDX section_name;
    } u;

    public:

    ST_ATTR () {
 Fail_FmtAssertion("ST_ATTR default constructor must not be called.");
    }

    ST_ATTR (ST_IDX idx, ST_ATTR_KIND akind, UINT64 val) :
 st_idx (idx), kind (akind) {
 u.section_name = val;
    }


    void Set_u (UINT64 val) {
        u.section_name = val;
    }


    void Set_reg_id (mPREG_NUM r) {
        u.reg_id = r;
    }

    mPREG_NUM Get_reg_id (void) const {
        return u.reg_id;
    }


    void Set_section_name (STR_IDX i) {
        u.section_name = i;
    }

    STR_IDX Get_section_name (void) const {
        return u.section_name;
    }


    void Verify (UINT level) const;

    void Print (FILE* f) const;
};




enum TY_KIND
{
    KIND_INVALID = 0,
    KIND_SCALAR = 1,
    KIND_ARRAY = 2,
    KIND_STRUCT = 3,
    KIND_POINTER = 4,
    KIND_FUNCTION = 5,
    KIND_VOID = 6,
    KIND_LAST = 8
};


enum TY_FLAGS
{
    TY_IS_CHARACTER = 0x0001,
    TY_IS_LOGICAL = 0x0002,
    TY_IS_UNION = 0x0004,
    TY_IS_PACKED = 0x0008,
    TY_PTR_AS_ARRAY = 0x0010,
    TY_ANONYMOUS = 0x0020,
    TY_SPLIT = 0x0040,

    TY_IS_F90_POINTER = 0x0080,
    TY_NOT_IN_UNION = 0x0100,
    TY_NO_ANSI_ALIAS = 0x0200,
    TY_IS_NON_POD = 0x0400,

    TY_RETURN_IN_MEM = 0x0800,

    TY_CONTENT_SEEN = 0x1000,



};



enum TY_PU_FLAGS
{
    TY_RETURN_TO_PARAM = 0x00000001,
    TY_IS_VARARGS = 0x00000002,
    TY_HAS_PROTOTYPE = 0x00000004
};

class TY
{
public:
    mUINT64 size;

    TY_KIND kind : 8;
    mTYPE_ID mtype : 8;
    mUINT16 flags;

    union {
 FLD_IDX fld;
 TYLIST_IDX tylist;
 ARB_IDX arb;
    } u1;

    STR_IDX name_idx;

    union {
 TY_IDX etype;
 TY_IDX pointed;
 mUINT32 pu_flags;

 ST_IDX copy_constructor;

    } u2;

    union {
        INITV_IDX vtable;
        TY_IDX baseclass;
    } u3;



    FLD_IDX Fld () const { return u1.fld; }
    void Set_fld (FLD_IDX idx) { u1.fld = idx; }

    TYLIST_IDX Tylist () const { return u1.tylist; }
    void Set_tylist (TYLIST_IDX idx) { u1.tylist = idx; }

    ARB_IDX Arb () const { return u1.arb; }
    void Set_arb (ARB_IDX idx) { u1.arb = idx; }

    TY_IDX Etype () const
      {
 ( kind == KIND_ARRAY ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h", 577 ), Fail_FmtAssertion ("non-KIND_ARRAY type has no element type")) );

 return u2.etype;
      }
    void Set_etype (TY_IDX idx) { u2.etype = idx; }

    TY_IDX Pointed () const
      {
 ( kind == KIND_POINTER ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h", 585 ), Fail_FmtAssertion ("non-KIND_POINTER type doesn't point")) );

 return u2.pointed;
      }
    void Set_pointed (TY_IDX idx) { u2.pointed = idx; }


    ST_IDX Copy_constructor () const
      {
 ( kind == KIND_STRUCT ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h", 594 ), Fail_FmtAssertion ("non-KIND_STRUCT type has no copy constructor")) );

 return u2.copy_constructor;
      }
    void Set_copy_constructor (ST_IDX idx) { u2.copy_constructor = idx; }


    PU_IDX Pu_flags () const { return u2.pu_flags; }
    void Set_pu_flag (TY_PU_FLAGS f) { u2.pu_flags |= f; }
    void Clear_pu_flag (TY_PU_FLAGS f) { u2.pu_flags &= ~f; }



    TY ();

    void Verify(UINT level) const;

    void Print (FILE *f) const;

};
# 683 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h"
enum PU_SRC_LANG_FLAGS
{
    PU_UNKNOWN_LANG = 0x00,
    PU_MIXED_LANG = 0x01,
    PU_C_LANG = 0x02,
    PU_CXX_LANG = 0x04,
    PU_F77_LANG = 0x08,
    PU_F90_LANG = 0x10,
    PU_JAVA_LANG = 0x20
};

struct PU
{
    TARGET_INFO_IDX target_idx;


    TY_IDX prototype;
    INITO_IDX eh_info;
    SYMTAB_IDX lexical_level;
    mUINT8 gp_group;
    mUINT8 src_lang;


    mUINT8 unused : 8;
    mUINT64 flags;



    PU ();

    void Verify(UINT level) const;

    void Print (FILE *f) const;

};






class BLK
{
private:

 mUINT64 size;
 mUINT16 align;
 mUINT16 flags;
 mUINT16 section_idx;
 mUINT16 scninfo_idx;

public:

 BLK () : size (0), section_idx(0), scninfo_idx(0), flags (0) {}




 void Init (void) { bzero (this, sizeof(BLK)); }


public:



    UINT64 Size () const { return size; }
    void Set_size (UINT64 s) { size = s; }

    UINT16 Align () const { return align; }
    void Set_align (UINT16 s) { align = s; }

    UINT16 Section_idx () const { return section_idx; }
    void Set_section_idx (UINT16 s) { section_idx = s; }
    UINT16 Scninfo_idx () const { return scninfo_idx; }
    void Set_scninfo_idx (UINT16 s) { scninfo_idx = s; }

    UINT16 Flags () const { return flags; }
    BOOL Is_set (UINT16 f) const { return flags & f; }
    void Set_flags (UINT16 f) { flags |= f; }
    void Clear_flags (UINT16 f) { flags &= ~f; }
    void Clear_all_flags () { flags = 0; }

    void Print (FILE *f) const;
};
# 781 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h"
enum FILE_INFO_FLAGS
{
    FI_IPA = 0x1,
    FI_NEEDS_LNO = 0x2,
    FI_HAS_INLINES = 0x4,
    FI_HAS_MP = 0x8
};

struct FILE_INFO
{
    mUINT32 flags;
    mUINT8 gp_group;
    mUINT32 unused : 24;

    void Verify() const;
    void Print (FILE *f) const;
    FILE_INFO () : flags (0), gp_group (0), unused (0) {}

};




typedef SEGMENTED_ARRAY<PU> PU_TAB;
typedef RELATED_SEGMENTED_ARRAY<ST> ST_TAB;
typedef SEGMENTED_ARRAY<TY> TY_TAB;
typedef SEGMENTED_ARRAY<FLD> FLD_TAB;
typedef SEGMENTED_ARRAY<TYLIST> TYLIST_TAB;
typedef SEGMENTED_ARRAY<ARB> ARB_TAB;
typedef RELATED_SEGMENTED_ARRAY<LABEL> LABEL_TAB;
typedef RELATED_SEGMENTED_ARRAY<PREG> PREG_TAB;
typedef SEGMENTED_ARRAY<ST_ATTR> ST_ATTR_TAB;
typedef SEGMENTED_ARRAY<BLK> BLK_TAB;
typedef SEGMENTED_ARRAY<TCON,64> TCON_TAB;
typedef SEGMENTED_ARRAY<INITO> INITO_TAB;
typedef SEGMENTED_ARRAY<INITV> INITV_TAB;

typedef PU_TAB::iterator PU_ITER;
typedef ST_TAB::iterator ST_ITER;
typedef TY_TAB::iterator TY_ITER;
typedef FLD_TAB::iterator FLD_ITER;
typedef TYLIST_TAB::iterator TYLIST_ITER;
typedef ARB_TAB::iterator ARB_ITER;
typedef LABEL_TAB::iterator LABEL_ITER;
typedef PREG_TAB::iterator PREG_ITER;
typedef ST_ATTR_TAB::iterator ST_ATTR_ITER;
typedef BLK_TAB::iterator BLK_ITER;
typedef TCON_TAB::iterator TCON_ITER;
typedef INITO_TAB::iterator INITO_ITER;
typedef INITV_TAB::iterator INITV_ITER;


struct SCOPE
{
    MEM_POOL *pool;
    ST* st;
    ST_TAB *st_tab;
    LABEL_TAB *label_tab;
    PREG_TAB *preg_tab;
    INITO_TAB *inito_tab;
    ST_ATTR_TAB *st_attr_tab;

    void Init (ST_TAB *s) {

 pool = __null;
 st_tab = s;
 st = __null;
 label_tab = __null;
 preg_tab = __null;
 inito_tab = __null;
 st_attr_tab = __null;
    }

    void Init (ST_TAB *s, LABEL_TAB *l, PREG_TAB *p, INITO_TAB *io,
        ST_ATTR_TAB* d, MEM_POOL *mp = (MEM_POOL *) 1) {
 pool = mp;
 st = __null;
 st_tab = s;
 label_tab = l;
 preg_tab = p;
 inito_tab = io;
 st_attr_tab = d;

    }


};





struct SCOPE_TAB_SYMTAB_ACCESS {
  SCOPE_TAB_SYMTAB_ACCESS(void) { }

  ST_TAB *operator()(SCOPE **scope_tab, SYMTAB_IDX level)
    { return (*scope_tab)[level].st_tab; }
};

struct SCOPE_TAB_INITO_ACCESS {
  SCOPE_TAB_INITO_ACCESS(void) { }

  INITO_TAB *operator()(SCOPE **scope_tab, SYMTAB_IDX level)
    { return (*scope_tab)[level].inito_tab; }
};


extern SCOPE *Scope_tab;


typedef TABLE_INDEXED_BY_LEVEL8_AND_INDEX24<ST, ST_IDX, SYMTAB_IDX,
                                            SCOPE *, &Scope_tab,
         SCOPE_TAB_SYMTAB_ACCESS>
        SYMBOL_TABLE;

typedef TABLE_INDEXED_BY_LEVEL8_AND_INDEX24<INITO, INITO_IDX, SYMTAB_IDX,
                                            SCOPE *, &Scope_tab,
         SCOPE_TAB_INITO_ACCESS>
        INITO_TABLE;

struct LABEL_TABLE
{
  inline LABEL& operator[] (LABEL_IDX idx);
  inline LABEL& operator() (SYMTAB_IDX level, LABEL_IDX idx);
};

struct PREG_TABLE
{
  inline PREG& operator[] (PREG_IDX idx);
  inline PREG& operator() (SYMTAB_IDX level, PREG_IDX idx);
};

struct ST_ATTR_TABLE
{
  inline ST_ATTR& operator[] (ST_ATTR_IDX idx);
  inline ST_ATTR& operator() (SYMTAB_IDX level, ST_ATTR_IDX idx);
};

struct TYPE_TABLE
{
  inline TY& operator[] (TY_IDX idx);
  inline TY_TAB* operator& ();
};


extern FILE_INFO File_info;
extern PU_TAB Pu_Table;
extern SYMBOL_TABLE St_Table;
extern TY_TAB Ty_tab;
extern TYPE_TABLE Ty_Table;
extern FLD_TAB Fld_Table;
extern TYLIST_TAB Tylist_Table;
extern ARB_TAB Arb_Table;
extern STRING_TABLE Str_Table;
extern TCON_TAB Tcon_Table;
extern INITV_TAB Initv_Table;
extern INITO_TABLE Inito_Table;
extern PREG_TABLE Preg_Table;
extern ST_ATTR_TABLE St_Attr_Table;
extern LABEL_TABLE Label_Table;

extern BLK_TAB Blk_Table;



extern SYMTAB_IDX Current_scope;
extern PU* Current_pu;
# 956 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h"
enum SHDR_TYPE
{
    SHDR_UNK = 0,
    SHDR_FILE = 1,
    SHDR_ST = 2,
    SHDR_TY = 3,
    SHDR_PU = 4,
    SHDR_FLD = 5,
    SHDR_ARB = 6,
    SHDR_TYLIST = 7,
    SHDR_TCON = 8,
    SHDR_STR = 9,
    SHDR_LABEL = 10,
    SHDR_PREG = 11,
    SHDR_INITO = 12,
    SHDR_INITV = 13,
    SHDR_BLK = 14,
    SHDR_ST_ATTR= 15
};


struct SYMTAB_HEADER
{
    mUINT64 offset;
    mUINT64 size;
    mUINT32 entsize;

    mUINT16 align;
    mUINT16 type;

    void Init (UINT64 _offset, UINT64 _size, UINT32 _entsize,
        UINT16 _align, SHDR_TYPE _type) {
 offset = _offset;
 size = _size;
 entsize = _entsize;
 align = _align;
 type = _type;
    }

};
# 1005 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_defs.h"
template <UINT table_size>
struct SYMTAB_HEADER_TABLE
{
    mUINT32 size;
    mUINT32 entries;

    SYMTAB_HEADER header[table_size];

    typedef SYMTAB_HEADER_TABLE<table_size> self;

    SYMTAB_HEADER_TABLE () {
 size = sizeof(self);
 entries = table_size;



 bzero (header, sizeof(header));

    }

};

typedef SYMTAB_HEADER_TABLE<(13)> GLOBAL_SYMTAB_HEADER_TABLE;
typedef SYMTAB_HEADER_TABLE<(5)> LOCAL_SYMTAB_HEADER_TABLE;
# 79 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_verify.h" 1
# 40 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_verify.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h" 1
# 263 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
# 1 "../../common/com/MIPS/config_targ.h" 1
# 43 "../../common/com/MIPS/config_targ.h"
extern "C" {
# 90 "../../common/com/MIPS/config_targ.h"
# 1 "../../common/com/mtypes.h" 1
# 91 "../../common/com/MIPS/config_targ.h" 2
# 112 "../../common/com/MIPS/config_targ.h"
typedef enum {
  ABI_UNDEF,
  ABI_N32,
  ABI_N64
} TARGET_ABI;

extern TARGET_ABI Target_ABI;
# 127 "../../common/com/MIPS/config_targ.h"
typedef enum {
  TARGET_UNDEF,
  TARGET_sb1,
  TARGET_R10K,
  TARGET_sl1_pcore,
  TARGET_sl1_dsp,
  TARGET_sl2_pcore,
  TARGET_sl2_mcore,
} TARGET_PROCESSOR;
# 147 "../../common/com/MIPS/config_targ.h"
extern TARGET_PROCESSOR Target;


extern char *Targ_Name (TARGET_PROCESSOR target);
# 159 "../../common/com/MIPS/config_targ.h"
typedef enum {
  TARGET_ISA_UNDEF,
  TARGET_ISA_M1,
  TARGET_ISA_M2,
  TARGET_ISA_M3,
  TARGET_ISA_M4,
  TARGET_ISA_Mips64
} TARGET_ISA;

extern TARGET_ISA Target_ISA;


extern char *Isa_Name (TARGET_ISA target_isa);
# 195 "../../common/com/MIPS/config_targ.h"
extern CLASS_INDEX Spill_Int_Mtype;
extern CLASS_INDEX Spill_Float_Mtype;




extern CLASS_INDEX Max_Int_Mtype, Max_Uint_Mtype;





extern CLASS_INDEX Def_Int_Mtype, Def_Uint_Mtype;






extern BOOL Use_32_Bit_Pointers;


extern INT Pointer_Size;
extern CLASS_INDEX Pointer_Mtype;
extern CLASS_INDEX Pointer_Mtype2;


extern TYPE_ID Pointer_type;
extern TYPE_ID Pointer_type2;
extern TYPE_ID Boolean_type;
extern TYPE_ID Boolean_type2;
extern TYPE_ID Integer_type;
# 258 "../../common/com/MIPS/config_targ.h"
extern INT Comparison_Result_Size;
extern CLASS_INDEX Comparison_Result_Mtype;
# 273 "../../common/com/MIPS/config_targ.h"
extern INT16 FP_Exception_Enable_Max;
extern INT16 FP_Exception_Enable_Min;


extern BOOL Char_Type_Is_Signed;
# 299 "../../common/com/MIPS/config_targ.h"
extern INT16 Symbolic_Debug_Mode;
extern INT16 Max_Symbolic_Debug_Mode;
# 345 "../../common/com/MIPS/config_targ.h"
extern BOOL Allow_Word_Aligned_Doubles;


extern BOOL Generate_Position_Independent_Code;


extern BOOL Split_64_Bit_Int_Ops;


extern BOOL Split_Quad_Ops;


extern BOOL Simulate_32_Bit_Interface;


extern BOOL No_Quad_Aligned_Branch;
extern BOOL No_Quad_Aligned_Branch;


extern BOOL Only_Unsigned_64_Bit_Ops;

extern INT32 Align_Instructions;

extern BOOL Eager_Bottom_Load;
extern BOOL Eager_Ptr_Deref;
extern BOOL Eager_Null_Ptr_Deref;


extern BOOL Has_GP_Groups;




extern BOOL Use_Load_Store_Offset;
# 389 "../../common/com/MIPS/config_targ.h"
extern void Preconfigure_Target (void);


extern void Configure_Target (void);
extern void IPA_Configure_Target (void);


extern void Configure_Source_Target ( char *filename );


extern BOOL Set_Target_ABI (BOOL is_64bit, INT isa);







extern BOOL ARCH_mask_shift_counts;
extern BOOL ARCH_generate_nor;







}
# 264 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h" 2






# 1 "../../common/util/flags.h" 1
# 279 "../../common/util/flags.h"
extern "C" {


extern char Cmdname[];


extern INT64 Get_Numeric_Flag (
  char **cp,
  INT64 min,
  INT64 max,
  INT64 def,
  char *flag
);


extern BOOL Atoi_KMG (
  const char* s,
  INT64* val,
  BOOL suffix_required
);



typedef enum {
  OVK_INVALID,
  OVK_NONE,
  OVK_BOOL,
  OVK_INT32,
  OVK_INT64,
  OVK_UINT32,
  OVK_UINT64,
  OVK_NAME,
  OVK_SELF,
  OVK_LIST,
  OVK_OBSOLETE,
  OVK_OLD_COUNT,



  OVK_REPLACED,
  OVK_UNIMPLEMENTED,

  OVK_COUNT=63
} OPTION_KIND;


typedef enum {
  OV_VISIBLE,
  OV_SHY,
  OV_INTERNAL
} OPTION_VISIBILITY;


typedef struct option_list {
  struct option_list *next;
  char *opt;
  char *val;
} OPTION_LIST;






typedef struct option_desc {
  mINT8 kind;
  mINT8 visibility;
  BOOL can_change_by_pragma;
  char * name;
  char * abbrev;
  INT64 def_val;
  INT64 min_val;
  INT64 max_val;
  void * variable;
  void * aux;
  char * description;
} OPTION_DESC;
# 369 "../../common/util/flags.h"
typedef struct option_group {
  char * name;
  char separator;
  char valmarker;
  OPTION_DESC * options;
  void * aux;
  char * description;
} OPTION_GROUP;
# 385 "../../common/util/flags.h"
extern OPTION_GROUP Common_Option_Groups[];


extern void Initialize_Option_Groups ( OPTION_GROUP *ogroups );





extern void Set_Option_Internal ( OPTION_GROUP *ogroup, char *name );


extern BOOL Process_Command_Line_Group (
  char *flag,
  OPTION_GROUP *opt_groups );


extern void Print_Option_Group (
  FILE *tf,
  OPTION_GROUP *opt_group,
  char *prefix,
  BOOL internal,
  BOOL full,
  BOOL update );
extern void Trace_Option_Group (
  FILE *tf,
  OPTION_GROUP *opt_group,
  BOOL full );


extern void Print_Option_Groups (
  FILE *tf,
  OPTION_GROUP *opt_group,
  char *prefix,
  BOOL internal,
  BOOL full,
  BOOL update );
extern void Trace_Option_Groups (
  FILE *tf,
  OPTION_GROUP *opt_group,
  BOOL full );


extern OPTION_GROUP *Get_Command_Line_Group (
  OPTION_GROUP *og,
  char *name );

extern void Trace_Command_Line_Group(FILE *, OPTION_GROUP *);

extern void Save_or_restore_options(char *, INT32, BOOL);


}
# 271 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h" 2
# 311 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/language.h" 1
# 66 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/language.h"
extern "C" {



typedef enum {
  LANG_UNKNOWN,
  LANG_F77,
  LANG_F90,
  LANG_KR_C,
  LANG_ANSI_C,
  LANG_CPLUS,
  LANG_DELTA,
  LANG_COUNT
} LANGUAGE;


}
# 312 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h" 2


extern "C" {


extern LANGUAGE Language;
# 327 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
extern BOOL Use_C_Like_Logicals;


extern BOOL CXX_Bool_On;
extern BOOL CXX_Bool_Set;
extern BOOL CXX_Exceptions_On;
extern BOOL CXX_Exceptions_Set;
extern BOOL CXX_Alias_Const;
extern BOOL CXX_Alias_Const_Set;
extern BOOL LANG_Recursive;
extern BOOL LANG_Recursive_Set;
extern BOOL CXX_Wchar_On;
extern BOOL CXX_Wchar_Set;

extern BOOL CXX_Namespaces_On;
extern BOOL CXX_Namespaces_Set;
extern BOOL CXX_Ansi_For_Init_Scope_On;
extern BOOL CXX_Ansi_For_Init_Scope_Set;
extern BOOL CXX_Explicit_On;
extern BOOL CXX_Explicit_Set;
extern BOOL CXX_Typename_On;
extern BOOL CXX_Typename_Set;
extern BOOL CXX_Mutable_On;
extern BOOL CXX_Mutable_Set;
extern BOOL CXX_Packed_On;
extern BOOL CXX_Packed_Set;

extern BOOL CXX_Standard_C_Plus_Plus_On;
extern BOOL CXX_Standard_C_Plus_Plus_Set;

extern BOOL LANG_Pch;
extern BOOL LANG_Pch_Set;
extern char *LANG_Create_Pch;
extern BOOL LANG_Create_Pch_Set;
extern char *LANG_Use_Pch;
extern BOOL LANG_Use_Pch_Set;
extern char *LANG_Pchdir;
extern BOOL LANG_Pchdir_Set;

extern char *LANG_cxx_dialect;
extern BOOL LANG_cxx_dialect_Set;

extern BOOL LANG_Microsoft_Mode;
extern BOOL LANG_Microsoft_Mode_Set;

extern BOOL LANG_Ansi_Setjmp_On;
extern BOOL LANG_Ansi_Setjmp_Set;

extern BOOL LANG_Ignore_Carriage_Return_On;
extern BOOL LANG_Ignore_Carriage_Return_Set;


extern BOOL LANG_IEEE_Minus_Zero_On;
extern BOOL LANG_IEEE_Minus_Zero_Set;


extern BOOL C_Restrict_On;
extern BOOL C_Restrict_Set;

extern char *C_Auto_Restrict;
extern BOOL C_Auto_Restrict_Set;

extern BOOL FTN_Short_Circuit_On;
extern BOOL FTN_Short_Circuit_Set;

extern BOOL WHIRL_Comma_Rcomma_On;
extern BOOL WHIRL_Comma_Rcomma_Set;

extern BOOL Macro_Expand_Pragmas_On;
extern BOOL Macro_Expand_Pragmas_Set;

extern BOOL C_VLA_On;
extern BOOL C_VLA_Set;

extern BOOL WHIRL_Merge_Types_On;
extern BOOL WHIRL_Merge_Types_Set;

extern BOOL LANG_Symtab_Verify_On;
extern BOOL LANG_Symtab_Verify_Set;

extern BOOL LANG_Formal_Deref_Unsafe;
extern BOOL LANG_Math_Errno;


extern BOOL WHIRL_Mtype_A_On;
extern BOOL WHIRL_Mtype_B_On;
extern BOOL WHIRL_Mtype_BS_On;
extern BOOL WHIRL_Return_Val_On;
extern BOOL WHIRL_Flatten_Field_On;
extern BOOL WHIRL_Mldid_Mstid_On;
extern BOOL WHIRL_Vfcall_On;
extern BOOL WHIRL_Addr_Passed_On;
extern BOOL WHIRL_Addr_Saved_For_Passed_On;
extern BOOL WHIRL_Addr_Saved_On;
extern BOOL WHIRL_Keep_Cvt_On;
extern BOOL WHIRL_Return_Info_On;

extern BOOL Global_Pragmas_In_Dummy_PU_On;
extern BOOL Malloc_Free_On;
extern BOOL Alloca_Dealloca_On;
extern BOOL Barrier_Lvalues_On;

extern BOOL Use_Call_Shared_Link;
extern BOOL Gp_Save_Restore_Opt;
extern BOOL Gp_Rel_Aggresive_Opt;


extern BOOL Allow_Exceptions;


extern BOOL Tracing_Enabled;


extern BOOL Open_IJ_Files;


extern INT8 Debug_Level;


typedef enum {
  EAGER_NONE,
  EAGER_SAFE,
  EAGER_ARITH,
  EAGER_DIVIDE,
  EAGER_MEMORY,
  EAGER_OTHER,
  EAGER_EXCESS
} EAGER_LEVEL;
extern EAGER_LEVEL Eager_Level;



extern BOOL Idict_Commutable_Match;
extern BOOL Enable_FE_Optimization;
extern BOOL Alias_Pointer_Parms;
extern BOOL Alias_Pointer_Types;
extern BOOL Alias_Not_In_Union;
extern BOOL Alias_Pointer_Strongly_Typed;
extern BOOL Alias_Pointer_Named_Data;
extern BOOL Alias_Pointer_Restricted;
extern BOOL Alias_Pointer_Disjoint;
extern BOOL Alias_Pointer_Cray;
extern BOOL Alias_Common_Scalar;


extern BOOL CSE_Elim_Enabled;



extern BOOL Enable_GOT_Call_Conversion;
extern BOOL OPT_Unroll_Analysis;
extern BOOL OPT_Unroll_Analysis_Set;


extern BOOL Enable_Copy_Propagate;


extern BOOL Zeroinit_in_bss;


typedef enum {
  IEEE_STRICT = 0,



  IEEE_ACCURATE = 1,
  IEEE_INEXACT = 2,
  IEEE_ANY = 3
} IEEE_LEVEL;
extern IEEE_LEVEL IEEE_Arithmetic;
extern BOOL IEEE_Arith_Set;


typedef enum {
  ROUNDOFF_NONE,
  ROUNDOFF_SIMPLE,
  ROUNDOFF_ASSOC,
  ROUNDOFF_ANY
} ROUNDOFF;
extern ROUNDOFF Roundoff_Level;
extern BOOL Roundoff_Set;
extern BOOL Enable_WN_Simp;
extern BOOL Regions_Around_Inner_Loops;
extern BOOL Region_Boundary_Info;
extern BOOL Cray_Ivdep;
extern BOOL Liberal_Ivdep;



extern BOOL Rsqrt_Allowed;

extern BOOL Recip_Allowed;
extern BOOL Enable_Cfold_Aggressive;
extern BOOL Ptr_Opt_Allowed;
extern BOOL Fast_Complex_Allowed;
extern BOOL Fast_Complex_Set;
extern BOOL Fast_Bit_Allowed;
extern BOOL Fast_Bit_Set;
extern BOOL Fast_NINT_Allowed;
extern BOOL Fast_NINT_Set;




extern BOOL Fast_trunc_Allowed;
extern BOOL Fast_trunc_Set;
extern BOOL Fast_IO_Allowed;
extern BOOL Inline_Intrinsics_Allowed;
extern BOOL Inline_Intrinsics_Set;
extern BOOL Simp_Multiply_To_Shift;
extern BOOL Simp_Canonicalize;
extern BOOL Simp_Fold_Unsigned_Relops;
extern BOOL Simp_Unsafe_Relops;
extern BOOL Enable_NaryExpr;
extern BOOL Enable_NaryExpr_Set;


extern BOOL Enable_WFE_DFE;



extern BOOL GCM_Eager_Null_Ptr_Deref;


extern BOOL GCM_Eager_Null_Ptr_Deref_Set;





extern INT32 Opt_Level;
extern INT32 OPT_unroll_times;
extern BOOL OPT_unroll_times_overridden;
extern INT32 OPT_unroll_size;
extern BOOL OPT_unroll_size_overridden;
extern BOOL OPT_Lower_Speculate;
extern BOOL OPT_Lower_Treeheight;
extern BOOL OPT_Inline_Divide;
extern BOOL OPT_Space;
extern INT32 Olimit;
extern BOOL Olimit_opt;

extern BOOL CG_mem_intrinsics;
extern INT32 CG_memmove_inst_count;
extern BOOL CG_memmove_inst_count_overridden;
extern BOOL CG_bcopy_cannot_overlap;
extern BOOL CG_memcpy_cannot_overlap;
extern BOOL CG_memmove_cannot_overlap;
extern BOOL CG_memmove_nonconst;
extern BOOL Allow_wrap_around_opt;

extern INT32 Fold_Arith_Max_INS_CNT;

extern INT32 Const_Copy_TN_CNT;

extern INT32 Gopt_TN_CNT;
extern BOOL Enable_BB_Splitting;
extern INT32 Split_BB_Length;
# 595 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
extern UINT8 Host_Byte_Sex;
extern UINT8 Target_Byte_Sex;
extern BOOL Same_Byte_Sex;

extern INT32 iolist_reuse_limit;


extern INT32 Aggregate_Alignment;

extern BOOL Align_Object;
extern BOOL Align_Padding;
extern BOOL UseAlignedCopyForStructs;


extern BOOL Gen_PIC_Call_Shared;
extern BOOL Gen_PIC_Shared;
extern BOOL Gen_PIC_Calls;
extern BOOL Guaranteed_Small_GOT;
extern BOOL Non_Volatile_GOT;
extern BOOL PIC_Local_Names;
extern BOOL PIC_Protected_Names;
extern BOOL PIC_Fixed_Addresses;
extern BOOL PIC_No_Page_Offset;
extern BOOL Force_Mem_Formals;
extern BOOL Kernel_Code;
extern INT32 Short_Data;
extern INT32 Short_Lits;
extern INT32 Max_Sdata_Elt_Size;
extern INT32 Gspace_Available;
extern BOOL Force_GP_Prolog;
extern INT32 Heap_Allocation_Threshold;




extern BOOL Strings_Not_Gprelative;


extern BOOL Varargs_Prototypes;
extern BOOL Gen_Profile;
extern char *Gen_Profile_Name;
extern BOOL Call_Mcount;
extern BOOL GP_Is_Preserved;
extern BOOL Constant_GP;

extern char *Emit_Global_Data;
extern char *Read_Global_Data;

extern char *Library_Name;




extern BOOL Omit_UE_DESTROY_FRAME;

extern INT target_io_library;


extern BOOL Sl2_Inibuf;
extern char* Sl2_Ibuf_Name;
# 677 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
extern BOOL Meld_Schedule;
extern BOOL Gap_Schedule;
extern BOOL Attempt_Bypass;
extern BOOL Enable_SWP;
extern BOOL Enable_SWP_overridden;
extern BOOL Enable_LOH;
extern BOOL Enable_LOH_overridden;
extern BOOL Enable_Spec_Loads;
extern BOOL Isolate_Lines;
extern BOOL Fill_Delay_Slots;
extern BOOL Enable_GDSE;
extern BOOL Enable_CG_Peephole;
extern BOOL Optimize_CVTL_Exp;
extern BOOL Enable_EBO_Post_Proc_Rgn;
extern BOOL Optimize_CVTL_Exp;
extern BOOL Enable_CVT_Opt;
extern BOOL Indexed_Loads_Allowed;
extern BOOL Early_MP_Processing;
extern BOOL Implied_Do_Io_Opt;
# 720 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
extern char *Inline_Path;




extern char *Schedlist_Option;


extern BOOL Force_Long_EH_Range_Offsets;

extern BOOL Force_Large_Stack_Model;
# 755 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
extern BOOL Section_For_Each_Function;


extern OPTION_LIST *Registers_Not_Allocatable;


extern INT32 Ipa_Ident_Number;




extern char *IPA_old_ld_library_path;


extern char *IPA_lang;


extern BOOL Scalar_Formal_Ref;
extern BOOL Non_Scalar_Formal_Ref;
# 802 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
typedef struct skiplist SKIPLIST;
struct option_list;


SKIPLIST *Build_Skiplist ( struct option_list *olist );


BOOL Query_Skiplist ( SKIPLIST *slist, INT32 elmt );


extern SKIPLIST *Optimization_Skip_List;
extern SKIPLIST *Region_Skip_List;

extern SKIPLIST *Goto_Skip_List;


extern SKIPLIST *DDB_Skip_List;
# 828 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
extern void Preconfigure (void);


extern void Configure_Olegacy (BOOL in_FE);


extern void Configure (void);


extern void Configure_Source ( char *filename );


extern void Configure_Alias_Options (struct option_list *);

extern void Configure_Feedback_Options (struct option_list *);



extern BOOL Process_Trace_Option ( char *option );


extern void List_Compile_Options (
  FILE *file,
  char *pfx,
  BOOL internal,
  BOOL full_list,
  BOOL update );
# 911 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/config.h"
}
# 41 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_verify.h" 2




extern void ST_Verify_Class_Sclass (ST_CLASS, ST_SCLASS );

extern void ST_Verify_Sclass_Export (ST_SCLASS, ST_EXPORT, const ST* st = __null);

extern void TY_Verify_Kind_Mtype (TY_KIND , mTYPE_ID );


inline void TY_Verify_Kind_Function(TY_KIND k, UINT64 s, TYPE_ID t) {
  ( k == KIND_FUNCTION && s == 0 && t == 0 ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_verify.h", 55 ), Fail_FmtAssertion ("ty.size/mtype should be 0 for KIND_FUNCTION")) );


}


extern void Verify_LOCAL_SYMTAB (const SCOPE& , SYMTAB_IDX );

extern void Verify_GLOBAL_SYMTAB ();





inline void
Verify_SYMTAB (SYMTAB_IDX level)
{
  if (!LANG_Symtab_Verify_On) {
    DevWarn ("The NEW SYMTAB Verification is turned OFF; Proceed on your own");
    return;
  }



  if (level > (1))
    Verify_LOCAL_SYMTAB (Scope_tab[level], level);
  else
    Verify_GLOBAL_SYMTAB ();
}
# 80 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h" 1
# 59 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h"
class FLD_HANDLE
{
private:
    FLD* entry;
    FLD_IDX idx;

public:
    FLD_HANDLE () : entry (__null), idx (0) {}

    explicit FLD_HANDLE (FLD_IDX fld_idx) :
 entry (fld_idx == 0 ? __null : &Fld_Table[fld_idx]), idx (fld_idx) {}

    FLD_HANDLE (FLD* fld, FLD_IDX fld_idx) : entry (fld), idx (fld_idx) {
 ( (fld_idx == 0 && fld == __null) || (&Fld_Table[fld_idx] == fld) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 73 ), Fail_FmtAssertion ("Inconsistent FLD* and FLD_IDX")) );

    }

    FLD_HANDLE (const FLD_HANDLE& fld) : entry (fld.entry), idx (fld.idx) {}

    FLD_HANDLE (const FLD_ITER& iter) : entry (&(*iter)), idx (iter.Index()) {}

    FLD* Entry () const { return entry; }
    FLD_IDX Idx () const { return idx; }

    BOOL operator== (const FLD_HANDLE& fld) const {
 return idx == fld.idx;
    }

    BOOL operator!= (const FLD_HANDLE& fld) const {
 return idx != fld.idx;
    }


    BOOL Is_Null () const { return idx == 0; }
};

class ARB_HANDLE
{
private:
    ARB* entry;
    ARB_IDX idx;

public:
    ARB_HANDLE () : entry (__null), idx (0) {}

    explicit ARB_HANDLE (ARB_IDX arb_idx) :
 entry (arb_idx == 0 ? __null : &Arb_Table[arb_idx]), idx (arb_idx) {}

    ARB_HANDLE (ARB* arb, ARB_IDX arb_idx) : entry (arb), idx (arb_idx) {
 ( (arb_idx == 0 && arb == __null) || (&Arb_Table[arb_idx] == arb) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 109 ), Fail_FmtAssertion ("Inconsistent ARB* and ARB_IDX")) );

    }

    ARB_HANDLE (const ARB_HANDLE& arb) : entry (arb.entry), idx (arb.idx) {}

    ARB_HANDLE (const ARB_ITER& iter) : entry (&(*iter)), idx (iter.Index()) {}

    ARB* Entry () const { return entry; }
    ARB_IDX Idx () const { return idx; }

    BOOL operator== (const ARB_HANDLE& arb) const {
 return idx == arb.idx;
    }

    ARB_HANDLE operator[] (INT32 i) {
       return ARB_HANDLE(idx + i);
    }

    BOOL Is_Null () const { return idx == 0; }
};




inline STR_IDX
ST_name_idx (const ST& s) { return s.u1.name_idx; }
inline void
Set_ST_name_idx (ST& s, STR_IDX idx) { s.u1.name_idx = idx; }
inline char *
ST_name (const ST& s) { return &Str_Table[ST_name_idx (s)]; }

inline TCON_IDX
ST_tcon (const ST& s) { return s.u1.tcon; }
inline void
Set_ST_tcon (ST& s, TCON_IDX tcon) { s.u1.tcon = tcon; }

inline ST_CLASS
ST_sym_class (const ST& s) { return s.sym_class; }
inline void
Set_ST_sym_class (ST& s, ST_CLASS c) { s.sym_class = c; }

inline ST_SCLASS
ST_storage_class (const ST& s) { return s.storage_class; }
inline void
Set_ST_storage_class (ST& s, ST_SCLASS sc) { s.storage_class = sc; }

inline ST_SCLASS
ST_sclass (const ST& s) { return s.storage_class; }
inline void
Set_ST_sclass (ST& s, ST_SCLASS sc) { s.storage_class = sc; }

inline ST_EXPORT
ST_export (const ST& s) { return s.export_class; }
inline void
Set_ST_export (ST& s, ST_EXPORT eclass) { s.export_class = eclass; }

inline TY_IDX
ST_type (const ST& s) {

    switch (s.sym_class) {
    default:
 Fail_FmtAssertion ("Invalid argument for ST_type ()");
    case CLASS_VAR:
    case CLASS_CONST:
    case CLASS_PREG:
    case CLASS_NAME:
 return s.u2.type;
    }



}
inline void
Set_ST_type (ST& s, TY_IDX t) {

    switch (s.sym_class) {
    default:
 Fail_FmtAssertion ("Invalid argument for ST_type ()");
    case CLASS_VAR:
    case CLASS_CONST:
    case CLASS_PREG:
    case CLASS_NAME:
 s.u2.type = t;
    }



}

inline PU_IDX
ST_pu (const ST& s) {
    ( s.sym_class == CLASS_FUNC || (s.sym_class == CLASS_NAME && (s.flags & ST_ASM_FUNCTION_ST)) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 203 ), Fail_FmtAssertion ("Invalid argument for ST_pu")) );



    return s.u2.pu;
}
inline void
Set_ST_pu (ST& s, PU_IDX pu)
{
    ( s.sym_class == CLASS_FUNC || (s.sym_class == CLASS_NAME && s.flags & ST_ASM_FUNCTION_ST) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 212 ), Fail_FmtAssertion ("Invalid argument for ST_pu")) );



    s.u2.pu = pu;
}

inline BLK_IDX
ST_blk (const ST& s) {
    ( s.sym_class == CLASS_BLOCK ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 218 ), Fail_FmtAssertion ("Invalid argument for ST_blk")) );
    return s.u2.blk;
}
inline void
Set_ST_blk (ST& s, BLK_IDX b)
{
    ( s.sym_class == CLASS_BLOCK ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 224 ), Fail_FmtAssertion ("Invalid argument for ST_blk")) );
    s.u2.blk = b;
}

inline ST_IDX
ST_st_idx (const ST& s) { return s.st_idx; }
inline void
Set_ST_st_idx (ST& s, ST_IDX idx) { s.st_idx = idx; }

inline ST*
ST_ptr (ST_IDX idx) { return &(St_Table[idx]); }

inline UINT64
ST_ofst (const ST& s) { return s.offset; }
inline void
Set_ST_ofst (ST& s, UINT64 offset) { s.offset = offset; }





inline BOOL
ST_is_weak_symbol (const ST& s) { return s.flags & ST_IS_WEAK_SYMBOL;}
inline void
Set_ST_is_weak_symbol (ST& s) { s.flags |= ST_IS_WEAK_SYMBOL; }
inline void
Clear_ST_is_weak_symbol (ST& s) { s.flags &= ~ST_IS_WEAK_SYMBOL; }

inline BOOL
ST_is_split_common (const ST& s) { return s.flags & ST_IS_SPLIT_COMMON;}
inline void
Set_ST_is_split_common (ST& s) { s.flags |= ST_IS_SPLIT_COMMON; }
inline void
Clear_ST_is_split_common (ST& s) { s.flags &= ~ST_IS_SPLIT_COMMON; }

inline ST_IDX
ST_base_idx (const ST& s)
{
    if (ST_is_split_common (s))
        return s.st_idx;
    else if (ST_is_weak_symbol (s) && ST_sclass(s) == SCLASS_EXTERN)
        return s.st_idx;
    else
        return s.base_idx;
}
inline void
Set_ST_base_idx (ST& s, ST_IDX base)
{
    if (ST_is_split_common (s))
 DevWarn ("Shouldn't set base when split");
    else if (ST_is_weak_symbol (s) && ST_sclass(s) == SCLASS_EXTERN)
 DevWarn ("Shouldn't set base when weak");
    s.base_idx = base;
}

inline ST_IDX
ST_strong_idx (const ST& s)
{
    ( ST_is_weak_symbol (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 282 ), Fail_FmtAssertion ("Expecting a weak symbol")) );
    return (ST_sclass (s) == SCLASS_EXTERN) ? s.base_idx : s.st_idx;
}
inline void
Set_ST_strong_idx (ST& s, ST_IDX base)
{
    ( ST_is_weak_symbol (s) && ST_sclass(s) == SCLASS_EXTERN ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 289 ), Fail_FmtAssertion ("Expecting an external weak symbol")) );

    s.base_idx = base;
}

inline ST_IDX
ST_full_idx (const ST& s)
{
    ( ST_is_split_common (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 296 ), Fail_FmtAssertion ("Expecting a splict common")) );
    return s.base_idx;
}
inline void
Set_ST_full_idx (ST& s, ST_IDX base)
{
    ( ST_is_split_common (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 302 ), Fail_FmtAssertion ("Expecting a splict common")) );
    s.base_idx = base;
}

inline BOOL
ST_is_not_used (const ST& s) { return s.flags & ST_IS_NOT_USED;}
inline void
Set_ST_is_not_used (ST& s) { s.flags |= ST_IS_NOT_USED; }
inline void
Clear_ST_is_not_used (ST& s) { s.flags &= ~ST_IS_NOT_USED; }

inline BOOL
ST_is_initialized (const ST& s) { return s.flags & ST_IS_INITIALIZED;}
inline void
Set_ST_is_initialized (ST& s) { s.flags |= ST_IS_INITIALIZED; }
inline void
Clear_ST_is_initialized (ST& s) { s.flags &= ~ST_IS_INITIALIZED; }

inline BOOL
ST_is_return_var (const ST& s) { return s.flags & ST_IS_RETURN_VAR;}
inline void
Set_ST_is_return_var (ST& s) { s.flags |= ST_IS_RETURN_VAR; }
inline void
Clear_ST_is_return_var (ST& s) { s.flags &= ~ST_IS_RETURN_VAR; }

inline BOOL
ST_is_value_parm (const ST& s) { return s.flags & ST_IS_VALUE_PARM;}
inline void
Set_ST_is_value_parm (ST& s) { s.flags |= ST_IS_VALUE_PARM; }
inline void
Clear_ST_is_value_parm (ST& s) { s.flags &= ~ST_IS_VALUE_PARM; }

inline BOOL
ST_promote_parm (const ST& s) { return s.flags & ST_PROMOTE_PARM;}
inline void
Set_ST_promote_parm (ST& s) { s.flags |= ST_PROMOTE_PARM; }
inline void
Clear_ST_promote_parm (ST& s) { s.flags &= ~ST_PROMOTE_PARM; }

inline BOOL
ST_keep_name_w2f (const ST& s) { return s.flags & ST_KEEP_NAME_W2F;}
inline void
Set_ST_keep_name_w2f (ST& s) { s.flags |= ST_KEEP_NAME_W2F; }
inline void
Clear_ST_keep_name_w2f (ST& s) { s.flags &= ~ST_KEEP_NAME_W2F; }

inline BOOL
ST_is_datapool (const ST& s) { return s.flags & ST_IS_DATAPOOL;}
inline void
Set_ST_is_datapool (ST& s) { s.flags |= ST_IS_DATAPOOL; }
inline void
Clear_ST_is_datapool (ST& s) { s.flags &= ~ST_IS_DATAPOOL; }

inline BOOL
ST_is_reshaped (const ST& s) { return s.flags & ST_IS_RESHAPED;}
inline void
Set_ST_is_reshaped (ST& s) { s.flags |= ST_IS_RESHAPED; }
inline void
Clear_ST_is_reshaped (ST& s) { s.flags &= ~ST_IS_RESHAPED; }

inline BOOL
ST_emit_symbol (const ST& s) { return s.flags & ST_EMIT_SYMBOL;}
inline void
Set_ST_emit_symbol (ST& s) { s.flags |= ST_EMIT_SYMBOL; }
inline void
Clear_ST_emit_symbol (ST& s) { s.flags &= ~ST_EMIT_SYMBOL; }

inline BOOL
ST_has_nested_ref (const ST& s) { return s.flags & ST_HAS_NESTED_REF;}
inline void
Set_ST_has_nested_ref (ST& s) { s.flags |= ST_HAS_NESTED_REF; }
inline void
Clear_ST_has_nested_ref (ST& s) { s.flags &= ~ST_HAS_NESTED_REF; }

inline BOOL
ST_init_value_zero (const ST& s) { return s.flags & ST_INIT_VALUE_ZERO;}
inline void
Set_ST_init_value_zero (ST& s) { s.flags |= ST_INIT_VALUE_ZERO; }
inline void
Clear_ST_init_value_zero (ST& s) { s.flags &= ~ST_INIT_VALUE_ZERO; }

inline BOOL
ST_gprel (const ST& s) { return s.flags & ST_GPREL;}
inline void
Set_ST_gprel (ST& s) { s.flags |= ST_GPREL; }
inline void
Clear_ST_gprel (ST& s) { s.flags &= ~ST_GPREL; }

inline BOOL
ST_not_gprel (const ST& s) { return s.flags & ST_NOT_GPREL;}
inline void
Set_ST_not_gprel (ST& s) { s.flags |= ST_NOT_GPREL; }
inline void
Clear_ST_not_gprel (ST& s) { s.flags &= ~ST_NOT_GPREL; }

inline BOOL
ST_is_namelist (const ST& s) { return s.flags & ST_IS_NAMELIST;}
inline void
Set_ST_is_namelist (ST& s) { s.flags |= ST_IS_NAMELIST; }
inline void
Clear_ST_is_namelist (ST& s) { s.flags &= ~ST_IS_NAMELIST; }

inline BOOL
ST_is_f90_target (const ST& s) { return s.flags & ST_IS_F90_TARGET;}
inline void
Set_ST_is_f90_target (ST& s) { s.flags |= ST_IS_F90_TARGET; }
inline void
Clear_ST_is_f90_target (ST& s) { s.flags &= ~ST_IS_F90_TARGET; }

inline BOOL
ST_declared_static (const ST& s) { return s.flags & ST_DECLARED_STATIC;}
inline void
Set_ST_declared_static (ST& s) { s.flags |= ST_DECLARED_STATIC; }
inline void
Clear_ST_declared_static (ST& s) { s.flags &= ~ST_DECLARED_STATIC; }

inline BOOL
ST_is_equivalenced (const ST& s) { return s.flags & ST_IS_EQUIVALENCED;}
inline void
Set_ST_is_equivalenced (ST& s) { s.flags |= ST_IS_EQUIVALENCED; }
inline void
Clear_ST_is_equivalenced (ST& s) { s.flags &= ~ST_IS_EQUIVALENCED; }

inline BOOL
ST_is_fill_align (const ST& s) { return s.flags & ST_IS_FILL_ALIGN;}
inline void
Set_ST_is_fill_align (ST& s) { s.flags |= ST_IS_FILL_ALIGN; }
inline void
Clear_ST_is_fill_align (ST& s) { s.flags &= ~ST_IS_FILL_ALIGN; }

inline BOOL
ST_is_optional_argument (const ST& s) { return s.flags & ST_IS_OPTIONAL_ARGUMENT;}
inline void
Set_ST_is_optional_argument (ST& s) { s.flags |= ST_IS_OPTIONAL_ARGUMENT; }
inline void
Clear_ST_is_optional_argument (ST& s) { s.flags &= ~ST_IS_OPTIONAL_ARGUMENT; }

inline BOOL
ST_is_temp_var (const ST& s) { return s.flags & ST_IS_TEMP_VAR;}
inline void
Set_ST_is_temp_var (ST& s) { s.flags |= ST_IS_TEMP_VAR; }
inline void
Clear_ST_is_temp_var (ST& s) { s.flags &= ~ST_IS_TEMP_VAR; }

inline BOOL
ST_is_const_var (const ST& s) { return s.flags & ST_IS_CONST_VAR;}
inline void
Set_ST_is_const_var (ST& s) { s.flags |= ST_IS_CONST_VAR; }
inline void
Clear_ST_is_const_var (ST& s) { s.flags &= ~ST_IS_CONST_VAR; }

inline BOOL
ST_addr_saved (const ST& s) { return s.flags & ST_ADDR_SAVED;}
inline void
Set_ST_addr_saved (ST& s) { s.flags |= ST_ADDR_SAVED; }
inline void
Clear_ST_addr_saved (ST& s) { s.flags &= ~ST_ADDR_SAVED; }

inline BOOL
ST_addr_passed (const ST& s) { return s.flags & ST_ADDR_PASSED;}
inline void
Set_ST_addr_passed (ST& s) { s.flags |= ST_ADDR_PASSED; }
inline void
Clear_ST_addr_passed (ST& s) { s.flags &= ~ST_ADDR_PASSED; }

inline BOOL
ST_is_thread_private (const ST& s) { return s.flags & ST_IS_THREAD_PRIVATE;}
inline void
Set_ST_is_thread_private (ST& s) { s.flags |= ST_IS_THREAD_PRIVATE; }
inline void
Clear_ST_is_thread_private (ST& s) { s.flags &= ~ST_IS_THREAD_PRIVATE; }

inline BOOL
ST_pt_to_unique_mem (const ST& s) { return s.flags & ST_PT_TO_UNIQUE_MEM;}
inline void
Set_ST_pt_to_unique_mem (ST& s) { s.flags |= ST_PT_TO_UNIQUE_MEM; }
inline void
Clear_ST_pt_to_unique_mem (ST& s) { s.flags &= ~ST_PT_TO_UNIQUE_MEM; }

inline BOOL
ST_pt_to_compiler_generated_mem (const ST& s)
 { return s.flags & ST_PT_TO_COMPILER_GENERATED_MEM;}
inline void
Set_ST_pt_to_compiler_generated_mem (ST& s)
 { s.flags |= ST_PT_TO_COMPILER_GENERATED_MEM; }
inline void
Clear_ST_pt_to_compiler_generated_mem (ST& s)
 { s.flags &= ~ST_PT_TO_COMPILER_GENERATED_MEM; }

inline BOOL
ST_is_shared_auto (const ST& s) { return s.flags & ST_IS_SHARED_AUTO;}
inline void
Set_ST_is_shared_auto (ST& s) { s.flags |= ST_IS_SHARED_AUTO; }
inline void
Clear_ST_is_shared_auto (ST& s) { s.flags &= ~ST_IS_SHARED_AUTO; }

inline BOOL
ST_assigned_to_dedicated_preg (const ST& s)
 { return s.flags & ST_ASSIGNED_TO_DEDICATED_PREG; }
inline void
Set_ST_assigned_to_dedicated_preg (ST& s)
 { s.flags |= ST_ASSIGNED_TO_DEDICATED_PREG; }
inline void
Clear_ST_assigned_to_dedicated_preg (ST& s)
 { s.flags &= ~ST_ASSIGNED_TO_DEDICATED_PREG; }

inline BOOL
ST_asm_function_st(const ST& s) { return s.flags & ST_ASM_FUNCTION_ST; }
inline void
Set_ST_asm_function_st(ST &s) { s.flags |= ST_ASM_FUNCTION_ST; }
inline void
Clear_ST_asm_function_st(ST &s) { s.flags &= ~ST_ASM_FUNCTION_ST; }


inline BOOL
ST_has_named_section (const ST* s) { return s->flags & ST_HAS_NAMED_SECTION; }
inline void
Set_ST_has_named_section (ST* s) { s->flags |= ST_HAS_NAMED_SECTION; }
inline void
Clear_ST_has_named_section (ST* s) { s->flags &= ~ST_HAS_NAMED_SECTION; }


inline BOOL
ST_one_per_pu (const ST* s) { return s->flags_ext & ST_ONE_PER_PU; }
inline void
Set_ST_one_per_pu (ST* s) { s->flags_ext |= ST_ONE_PER_PU; }
inline void
Clear_ST_one_per_pu (ST* s) { s->flags_ext &= ~ST_ONE_PER_PU; }

inline BOOL
ST_copy_constructor_st(const ST* s) { return s->flags_ext & ST_COPY_CONSTRUCTOR_ST; }
inline void
Set_ST_copy_constructor_st(ST* s) { s->flags_ext |= ST_COPY_CONSTRUCTOR_ST; }
inline void
Clear_ST_copy_constructor_st(ST* s) { s->flags_ext &= ~ST_COPY_CONSTRUCTOR_ST; }

inline BOOL
ST_initv_in_other_st (const ST* s) { return s->flags_ext & ST_INITV_IN_OTHER_ST; }
inline void
Set_ST_initv_in_other_st (ST* s) { s->flags_ext |= ST_INITV_IN_OTHER_ST; }
inline void
Clear_ST_initv_in_other_st (ST* s) { s->flags_ext &= ~ST_INITV_IN_OTHER_ST; }


inline BOOL
ST_in_v1buf (const ST* s) { return s->flags_ext & ST_IN_V1BUF; }
inline void
Set_ST_in_v1buf (ST *s) { s->flags_ext |= ST_IN_V1BUF; }
inline void
Clear_ST_in_v1buf (ST *s) { s->flags_ext &= ~ST_IN_V1BUF; }

inline BOOL
ST_in_v2buf (const ST* s) { return s->flags_ext & ST_IN_V2BUF; }
inline void
Set_ST_in_v2buf (ST *s) { s->flags_ext |= ST_IN_V2BUF; }
inline void
Clear_ST_in_v2buf (ST *s) { s->flags_ext &= ~ST_IN_V2BUF; }

inline BOOL
ST_in_v4buf (const ST* s) { return s->flags_ext & ST_IN_V4BUF; }
inline void
Set_ST_in_v4buf (ST *s) { s->flags_ext |= ST_IN_V4BUF; }
inline void
Clear_ST_in_v4buf (ST *s) { s->flags_ext &= ~ST_IN_V4BUF; }

inline BOOL
ST_in_vbuf (const ST *s) {
    return (ST_in_v1buf(s) || ST_in_v2buf(s) || ST_in_v4buf(s));
}

inline BOOL
ST_in_sdram (const ST* s) { return s->flags_ext & ST_IN_SDRAM; }
inline void
Set_ST_in_sdram (ST *s) { s->flags_ext |= ST_IN_SDRAM; }
inline void
Clear_ST_in_sdram (ST *s) { s->flags_ext &= ~ST_IN_SDRAM; }

inline BOOL
ST_in_sbuf (const ST* s) { return s->flags_ext & ST_IN_SBUF; }
inline void
Set_ST_in_sbuf (ST *s) { s->flags_ext |= ST_IN_SBUF; }
inline void
Clear_ST_in_sbuf (ST *s) { s->flags_ext &= ~ST_IN_SBUF; }

inline BOOL
ST_is_vbuf_ofst (const ST* s) { return s->flags_ext & ST_IS_VBUF_OFFSET; }
inline void
Set_ST_is_vbuf_ofst (ST *s) { s->flags_ext |= ST_IS_VBUF_OFFSET; }
inline void
Clear_ST_is_vbuf_ofst (ST *s) { s->flags_ext &= ~ST_IS_VBUF_OFFSET; }

inline BOOL
ST_is_sbuf_ofst (const ST* s) { return s->flags_ext & ST_IS_SBUF_OFFSET; }
inline void
Set_ST_is_sbuf_ofst (ST *s) { s->flags_ext |= ST_IS_SBUF_OFFSET; }
inline void
Clear_ST_is_sbuf_ofst (ST *s) { s->flags_ext &= ~ST_IS_SBUF_OFFSET; }


inline BOOL
ST_is_inintialized_in_f90 (const ST* s) { return s->flags_ext & ST_IS_INITIALIZED_IN_F90; }
inline void
Set_ST_is_inintialized_in_f90 (ST *s) { s->flags_ext |= ST_IS_INITIALIZED_IN_F90; }
inline void
Clear_ST_is_inintialized_in_f90 (ST *s) { s->flags_ext &= ~ST_IS_INITIALIZED_IN_F90; }

inline BOOL
ST_is_method_func (const ST* s) { return s->flags_ext & ST_IS_METHOD_FUNC; }
inline void
Set_ST_is_method_func (ST* s) { s->flags_ext |= ST_IS_METHOD_FUNC; }
inline void
Reset_ST_is_method_func (ST* s) { s->flags_ext &= ~ST_IS_METHOD_FUNC; }

inline BOOL
ST_is_this_ptr (const ST* s) { return s->flags_ext & ST_IS_THIS_PTR; }
inline void
Set_ST_is_this_ptr (ST* s) { s->flags_ext |= ST_IS_THIS_PTR; }
inline void
Reset_ST_is_this_ptr (ST* s) { s->flags_ext &= ~ST_IS_THIS_PTR; }

inline BOOL
ST_is_pure_vfunc (const ST* s) { return s->flags_ext & ST_IS_PURE_VFUNC; }
inline void
Set_ST_is_pure_vfunc (ST* s) { s->flags_ext |= ST_IS_PURE_VFUNC; }
inline void
Reset_ST_is_pure_vfunc (ST* s) { s->flags_ext &= ~ST_IS_PURE_VFUNC; }







inline TARGET_INFO_IDX
PU_target_idx (const PU& pu) { return pu.target_idx; }
inline void
Set_PU_target_idx (PU& pu, TARGET_INFO_IDX idx) { pu.target_idx = idx; }

inline TY_IDX
PU_prototype (const PU& pu) { return pu.prototype; }
inline void
Set_PU_prototype (PU& pu, TY_IDX ty) { pu.prototype = ty; }

inline UINT8
PU_gp_group (const PU& pu) { return pu.gp_group; }
inline void
Set_PU_gp_group (PU& pu, mUINT8 grp) { pu.gp_group = grp; }

inline SYMTAB_IDX
PU_lexical_level (const PU& pu) { return pu.lexical_level; }
inline void
Set_PU_lexical_level (PU& pu, SYMTAB_IDX l) { pu.lexical_level = l; }





inline BOOL
PU_is_pure (const PU& pu) { return pu.flags & 0x00000001; }
inline void
Set_PU_is_pure (PU& pu) { pu.flags |= 0x00000001; }
inline void
Clear_PU_is_pure (PU& pu) { pu.flags &= ~0x00000001; }

inline BOOL
PU_no_side_effects (const PU& pu) { return pu.flags & 0x00000002; }
inline void
Set_PU_no_side_effects (PU& pu) { pu.flags |= 0x00000002; }
inline void
Clear_PU_no_side_effects (PU& pu) { pu.flags &= ~0x00000002; }

inline BOOL
PU_is_inline_function (const PU& pu) { return pu.flags & 0x00000004; }
inline void
Set_PU_is_inline_function (PU& pu) { pu.flags |= 0x00000004; }
inline void
Clear_PU_is_inline_function (PU& pu) { pu.flags &= ~0x00000004; }

inline BOOL
PU_no_inline (const PU& pu) { return pu.flags & 0x00000008; }
inline void
Set_PU_no_inline (PU& pu) { pu.flags |= 0x00000008; }
inline void
Clear_PU_no_inline (PU& pu) { pu.flags &= ~0x00000008; }

inline BOOL
PU_must_inline (const PU& pu) { return pu.flags & 0x00000010; }
inline void
Set_PU_must_inline (PU& pu) { pu.flags |= 0x00000010; }
inline void
Clear_PU_must_inline (PU& pu) { pu.flags &= ~0x00000010; }

inline BOOL
PU_no_delete (const PU& pu) { return pu.flags & 0x00000020; }
inline void
Set_PU_no_delete (PU& pu) { pu.flags |= 0x00000020; }
inline void
Clear_PU_no_delete (PU& pu) { pu.flags &= ~0x00000020; }

inline BOOL
PU_has_exc_scopes (const PU& pu) { return pu.flags & 0x00000040; }
inline void
Set_PU_has_exc_scopes (PU& pu) { pu.flags |= 0x00000040; }
inline void
Clear_PU_has_exc_scopes (PU& pu) { pu.flags &= ~0x00000040; }

inline BOOL
PU_is_nested_func (const PU& pu) { return pu.flags & 0x00000080; }
inline void
Set_PU_is_nested_func (PU& pu) { pu.flags |= 0x00000080; }
inline void
Clear_PU_is_nested_func (PU& pu) { pu.flags &= ~0x00000080; }

inline BOOL
PU_has_non_mangled_call (const PU& pu) { return pu.flags & 0x00000100; }
inline void
Set_PU_has_non_mangled_call (PU& pu) { pu.flags |= 0x00000100; }
inline void
Clear_PU_has_non_mangled_call (PU& pu) { pu.flags &= ~0x00000100; }

inline BOOL
PU_args_aliased (const PU& pu) { return pu.flags & 0x00000200; }
inline void
Set_PU_args_aliased (PU& pu) { pu.flags |= 0x00000200; }
inline void
Clear_PU_args_aliased (PU& pu) { pu.flags &= ~0x00000200; }

inline BOOL
PU_needs_fill_align_lowering (const PU& pu) {
    return pu.flags & 0x00000400;
}
inline void
Set_PU_needs_fill_align_lowering (PU& pu) {
    pu.flags |= 0x00000400;
}
inline void
Clear_PU_needs_fill_align_lowering (PU& pu) {
    pu.flags &= ~0x00000400;
}

inline BOOL
PU_needs_t9 (const PU& pu) { return pu.flags & 0x00000800; }
inline void
Set_PU_needs_t9 (PU& pu) { pu.flags |= 0x00000800; }
inline void
Clear_PU_needs_t9 (PU& pu) { pu.flags &= ~0x00000800; }

inline BOOL
PU_has_very_high_whirl (const PU& pu) { return pu.flags & 0x00001000; }
inline void
Set_PU_has_very_high_whirl (PU& pu) { pu.flags |= 0x00001000; }
inline void
Clear_PU_has_very_high_whirl (PU& pu) { pu.flags &= ~0x00001000; }

inline BOOL
PU_has_altentry (const PU& pu) { return pu.flags & 0x00002000; }
inline void
Set_PU_has_altentry (PU& pu) { pu.flags |= 0x00002000; }
inline void
Clear_PU_has_altentry (PU& pu) { pu.flags &= ~0x00002000; }

inline BOOL
PU_recursive (const PU& pu) { return pu.flags & 0x00004000; }
inline void
Set_PU_recursive (PU& pu) { pu.flags |= 0x00004000; }
inline void
Clear_PU_recursive (PU& pu) { pu.flags &= ~0x00004000; }

inline BOOL
PU_is_mainpu (const PU& pu) { return pu.flags & 0x00008000; }
inline void
Set_PU_is_mainpu (PU& pu) { pu.flags |= 0x00008000; }
inline void
Clear_PU_is_mainpu (PU& pu) { pu.flags &= ~0x00008000; }

inline BOOL
PU_uplevel (const PU& pu) { return pu.flags & 0x00010000; }
inline void
Set_PU_uplevel (PU& pu) { pu.flags |= 0x00010000; }
inline void
Clear_PU_uplevel (PU& pu) { pu.flags &= ~0x00010000; }

inline BOOL
PU_mp_needs_lno (const PU& pu) { return pu.flags & 0x00020000; }
inline void
Set_PU_mp_needs_lno (PU& pu) { pu.flags |= 0x00020000; }
inline void
Clear_PU_mp_needs_lno (PU& pu) { pu.flags &= ~0x00020000; }

inline BOOL
PU_has_alloca (const PU& pu) { return pu.flags & 0x00040000; }
inline void
Set_PU_has_alloca (PU& pu) { pu.flags |= 0x00040000; }
inline void
Clear_PU_has_alloca (PU& pu) { pu.flags &= ~0x00040000; }

inline BOOL
PU_in_elf_section (const PU& pu) { return pu.flags & 0x00080000; }
inline void
Set_PU_in_elf_section (PU& pu) { pu.flags |= 0x00080000; }
inline void
Clear_PU_in_elf_section (PU& pu) { pu.flags &= ~0x00080000; }

inline BOOL
PU_has_mp (const PU& pu) { return pu.flags & 0x00100000; }
inline void
Set_PU_has_mp (PU& pu) { pu.flags |= 0x00100000; }
inline void
Clear_PU_has_mp (PU& pu) { pu.flags &= ~0x00100000; }

inline BOOL
PU_mp (const PU& pu) { return pu.flags & 0x00200000; }
inline void
Set_PU_mp (PU& pu) { pu.flags |= 0x00200000; }
inline void
Clear_PU_mp (PU& pu) { pu.flags &= ~0x00200000; }

inline BOOL
PU_has_namelist (const PU& pu) { return pu.flags & 0x00400000; }
inline void
Set_PU_has_namelist (PU& pu) { pu.flags |= 0x00400000; }
inline void
Clear_PU_has_namelist (PU& pu) { pu.flags &= ~0x00400000; }

inline BOOL
PU_has_return_address (const PU& pu) { return pu.flags & 0x00800000; }
inline void
Set_PU_has_return_address (PU& pu) { pu.flags |= 0x00800000; }
inline void
Clear_PU_has_return_address (PU& pu) { pu.flags &= ~0x00800000; }

inline BOOL
PU_has_region (const PU& pu) { return pu.flags & 0x01000000; }
inline void
Set_PU_has_region (PU& pu) { pu.flags |= 0x01000000; }
inline void
Clear_PU_has_region (PU& pu) { pu.flags &= ~0x01000000; }

inline BOOL
PU_has_inlines (const PU& pu) { return pu.flags & 0x02000000; }
inline void
Set_PU_has_inlines (PU& pu) { pu.flags |= 0x02000000; }
inline void
Clear_PU_has_inlines (PU& pu) { pu.flags &= ~0x02000000; }

inline BOOL
PU_calls_setjmp (const PU& pu) { return pu.flags & 0x04000000; }
inline void
Set_PU_calls_setjmp (PU& pu) { pu.flags |= 0x04000000; }
inline void
Clear_PU_calls_setjmp (PU& pu) { pu.flags &= ~0x04000000; }

inline BOOL
PU_calls_longjmp (const PU& pu) { return pu.flags & 0x08000000; }
inline void
Set_PU_calls_longjmp (PU& pu) { pu.flags |= 0x08000000; }
inline void
Clear_PU_calls_longjmp (PU& pu) { pu.flags &= ~0x08000000; }

inline BOOL
PU_ipa_addr_analysis (const PU& pu) { return pu.flags & 0x10000000; }
inline void
Set_PU_ipa_addr_analysis (PU& pu) { pu.flags |= 0x10000000; }
inline void
Clear_PU_ipa_addr_analysis (PU& pu) { pu.flags &= ~0x10000000; }

inline BOOL
PU_smart_addr_analysis (const PU& pu) { return pu.flags & 0x20000000; }
inline void
Set_PU_smart_addr_analysis (PU& pu) { pu.flags |= 0x20000000; }
inline void
Clear_PU_smart_addr_analysis (PU& pu) { pu.flags &= ~0x20000000; }

inline BOOL
PU_has_global_pragmas (const PU& pu) { return pu.flags & 0x80000000; }
inline void
Set_PU_has_global_pragmas (PU& pu) { pu.flags |= 0x80000000; }
inline void
Clear_PU_has_global_pragmas (PU& pu) { pu.flags &= ~0x80000000; }

inline BOOL
PU_has_user_alloca (const PU& pu) { return (pu.flags & 0x0000000100000000LL) != 0; }
inline void
Set_PU_has_user_alloca (PU& pu) { pu.flags |= 0x0000000100000000LL; }
inline void
Clear_PU_has_user_alloca (PU& pu) { pu.flags &= ~0x0000000100000000LL; }

inline BOOL
PU_has_unknown_control_flow (const PU& pu) { return (pu.flags & 0x0000000200000000LL) != 0; }
inline void
Set_PU_has_unknown_control_flow (PU& pu) { pu.flags |= 0x0000000200000000LL; }
inline void
Clear_PU_has_unknown_control_flow (PU& pu) { pu.flags &= ~0x0000000200000000LL; }

inline BOOL
PU_has_syscall_linkage (const PU& pu) { return pu.flags & 0x40000000; }
inline void
Set_PU_has_syscall_linkage (PU& pu) { pu.flags |= 0x40000000; }
inline void
Clear_PU_has_syscall_linkage (PU& pu) { pu.flags &= ~0x40000000; }

inline BOOL
PU_is_thunk (const PU& pu) { return (pu.flags & 0x0000000400000000LL) != 0; }
inline void
Set_PU_is_thunk (PU& pu) { pu.flags |= 0x0000000400000000LL; }
inline void
Clear_PU_is_thunk (PU& pu) { pu.flags &= ~0x0000000400000000LL; }


inline BOOL
PU_needs_manual_unwinding (const PU& pu) { return (pu.flags & 0x0000000800000000LL) != 0;}
inline void
Set_PU_needs_manual_unwinding (PU& pu) { pu.flags |= 0x0000000800000000LL;}
inline void
Clear_PU_needs_manual_unwinding (PU& pu) { pu.flags &= ~0x0000000800000000LL;}

inline BOOL
PU_is_extern_inline (const PU& pu) { return (pu.flags & 0x0000002000000000LL) != 0; }
inline void
Set_PU_is_extern_inline (PU& pu) { pu.flags |= 0x0000002000000000LL; }
inline void
Clear_PU_is_extern_inline (PU& pu) { pu.flags &= ~0x0000002000000000LL; }

inline BOOL
PU_mp_lower_generated (const PU& pu) { return (pu.flags & 0x0000004000000000LL) != 0; }
inline void
Set_PU_mp_lower_generated (PU& pu) { pu.flags |= 0x0000004000000000LL; }
inline void
Clear_PU_mp_lower_generated (PU& pu) { pu.flags &= ~0x0000004000000000LL; }

inline BOOL
PU_is_operator (const PU& pu) { return (pu.flags & 0x0000010000000000LL) != 0; }
inline void
Set_PU_is_operator (PU& pu) { pu.flags |= 0x0000010000000000LL; }
inline void
Clear_PU_is_operator (PU& pu) { pu.flags &= ~0x0000010000000000LL; }

inline BOOL
PU_is_malloc (const PU& pu) { return (pu.flags & 0x0000020000000000LL) != 0; }
inline void
Set_PU_is_malloc (PU& pu) { pu.flags |= 0x0000020000000000LL; }
inline void
Clear_PU_is_malloc (PU& pu) { pu.flags &= ~0x0000020000000000LL; }

inline BOOL
PU_has_attr_malloc (const PU& pu) { return (pu.flags & 0x0000020000000000LL) != 0; }
inline void
Set_PU_has_attr_malloc (PU& pu) { pu.flags |= 0x0000020000000000LL; }
inline void
Clear_PU_has_attr_malloc (PU& pu) { pu.flags &= ~0x0000020000000000LL; }

inline BOOL
PU_has_attr_pure (const PU& pu) { return (pu.flags & 0x0000040000000000LL) != 0; }
inline void
Set_PU_has_attr_pure (PU& pu) { pu.flags |= 0x0000040000000000LL; }
inline void
Clear_PU_has_attr_pure (PU& pu) { pu.flags &= ~0x0000040000000000LL; }

inline BOOL
PU_is_marked_inline (const PU& pu) { return (pu.flags & 0x0000008000000000LL) != 0; }
inline void
Set_PU_is_marked_inline (PU& pu) { pu.flags |= 0x0000008000000000LL; }
inline void
Clear_PU_is_marked_inline (PU& pu) { pu.flags &= ~0x0000008000000000LL; }
# 977 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h"
inline UINT64
PU_src_lang (const PU& pu) { return pu.src_lang; }

inline BOOL
PU_mixed_lang (const PU& pu) { return (pu.src_lang & PU_MIXED_LANG) != 0; }
inline void
Set_PU_mixed_lang (PU& pu) { pu.src_lang |= PU_MIXED_LANG; }
inline void
Clear_PU_mixed_lang (PU& pu) { pu.src_lang &= ~PU_MIXED_LANG; }

inline BOOL
PU_c_lang (const PU& pu) { return (pu.src_lang & PU_C_LANG) != 0; }
inline void
Set_PU_c_lang (PU& pu) { pu.src_lang |= PU_C_LANG; }
inline void
Clear_PU_c_lang (PU& pu) { pu.src_lang &= ~PU_C_LANG; }

inline BOOL
PU_cxx_lang (const PU& pu) { return (pu.src_lang & PU_CXX_LANG) != 0; }
inline void
Set_PU_cxx_lang (PU& pu) { pu.src_lang |= PU_CXX_LANG; }
inline void
Clear_PU_cxx_lang (PU& pu) { pu.src_lang &= ~PU_CXX_LANG; }

inline BOOL
PU_f77_lang (const PU& pu) { return (pu.src_lang & PU_F77_LANG) != 0; }
inline void
Set_PU_f77_lang (PU& pu) { pu.src_lang |= PU_F77_LANG; }
inline void
Clear_PU_f77_lang (PU& pu) { pu.src_lang &= ~PU_F77_LANG; }

inline BOOL
PU_f90_lang (const PU& pu) { return (pu.src_lang & PU_F90_LANG) != 0; }
inline void
Set_PU_f90_lang (PU& pu) { pu.src_lang |= PU_F90_LANG; }
inline void
Clear_PU_f90_lang (PU& pu) { pu.src_lang &= ~PU_F90_LANG; }

inline BOOL
PU_java_lang (const PU& pu) { return (pu.src_lang & PU_JAVA_LANG) != 0; }
inline void
Set_PU_java_lang (PU& pu) { pu.src_lang |= PU_JAVA_LANG; }
inline void
Clear_PU_java_lang (PU& pu) { pu.src_lang &= ~PU_JAVA_LANG; }

inline BOOL
PU_is_constructor (const PU& pu) { return (pu.flags & 0x0000100000000000LL) != 0; }
inline void
Set_PU_is_constructor (PU& pu) { pu.flags |= 0x0000100000000000LL; }
inline void
Clear_PU_is_constructor (PU &pu) { pu.flags &= ~0x0000100000000000LL; }







inline UINT64
TY_size (const TY& ty) { return ty.size; }
inline void
Set_TY_size (TY& ty, UINT64 size) { ty.size = size; }
inline void
Set_TY_size (TY_IDX tyi, UINT64 size) {
  Set_TY_size(Ty_Table[tyi], size);
}

inline TY_KIND
TY_kind (const TY& ty) { return ty.kind; }
inline void
Set_TY_kind (TY& ty, TY_KIND kind) { ty.kind = kind; }
inline void
Set_TY_kind (TY_IDX tyi, TY_KIND kind) { Set_TY_kind(Ty_Table[tyi], kind); }

inline TYPE_ID
TY_mtype (const TY& ty) { return ty.mtype; }
inline void
Set_TY_mtype (TY& ty, TYPE_ID mtype) { ty.mtype = mtype; }
inline void
Set_TY_mtype (TY_IDX tyi, TYPE_ID mtype){ Set_TY_mtype(Ty_Table[tyi],mtype); }

inline UINT16
TY_flags (const TY& ty) { return ty.flags; }
inline void
Set_TY_flags (TY& ty, mUINT16 flags) { ty.flags = flags; }
inline UINT16
TY_flags (const TY_IDX tyi) { return TY_flags(Ty_Table[tyi]); }
inline void
Set_TY_flags (TY_IDX tyi, mUINT16 flags){ Set_TY_flags(Ty_Table[tyi],flags); }

inline FLD_HANDLE
TY_fld (const TY& ty) { return FLD_HANDLE (ty.Fld ()); }
inline void
Set_TY_fld (TY& ty, FLD_HANDLE fld) { ty.Set_fld (fld.Idx()); }
inline FLD_HANDLE
TY_fld (const TY_IDX tyi) { return TY_fld(Ty_Table[tyi]); }
inline void
Set_TY_fld (TY_IDX tyi, FLD_HANDLE fld) { Set_TY_fld(Ty_Table[tyi], fld); }

inline TYLIST_IDX
TY_tylist (const TY& ty) { return ty.Tylist (); }
inline void
Set_TY_tylist (TY& ty, TYLIST_IDX idx) { ty.Set_tylist (idx); }
inline TYLIST_IDX
TY_tylist (const TY_IDX tyi) { return TY_tylist(Ty_Table[tyi]); }
inline void
Set_TY_tylist (TY_IDX tyi, TYLIST_IDX idx) {
  Set_TY_tylist(Ty_Table[tyi],idx);
}

inline ARB_HANDLE
TY_arb (const TY& ty) { return ARB_HANDLE(ty.Arb ()); }
inline void
Set_TY_arb (TY& ty, ARB_HANDLE idx) { ty.Set_arb (idx.Idx()); }
inline ARB_HANDLE
TY_arb (const TY_IDX tyi) { return TY_arb(Ty_Table[tyi]); }
inline void
Set_TY_arb (TY_IDX tyi, ARB_HANDLE idx) { Set_TY_arb(Ty_Table[tyi], idx); }


inline STR_IDX
TY_name_idx (const TY& ty) { return ty.name_idx; }
inline void
Set_TY_name_idx (TY& ty, UINT64 name) { ty.name_idx = name; }
inline STR_IDX
TY_name_idx (const TY_IDX tyi) { return TY_name_idx(Ty_Table[tyi]); }
inline void
Set_TY_name_idx (TY_IDX tyi, UINT64 name) {
  Set_TY_name_idx(Ty_Table[tyi], name);
}
inline char *
TY_name (const TY& ty) { return &Str_Table[ty.name_idx]; }

inline TY_IDX
TY_etype (const TY& ty) { return ty.Etype (); }
inline void
Set_TY_etype (TY& ty, TY_IDX idx) { ty.Set_etype (idx); }
inline TY_IDX
TY_etype (const TY_IDX tyi) { return TY_etype(Ty_Table[tyi]); }
inline void
Set_TY_etype (TY_IDX tyi, TY_IDX idx) { Set_TY_etype(Ty_Table[tyi],idx); }

inline TY_IDX
TY_pointed (const TY& ty) { return ty.Pointed (); }
inline void
Set_TY_pointed (TY& ty, TY_IDX idx) { ty.Set_pointed (idx); }
inline TY_IDX
TY_pointed (const TY_IDX tyi) { return Ty_Table[tyi].Pointed (); }
inline void
Set_TY_pointed (TY_IDX tyi, TY_IDX idx) { Set_TY_pointed(Ty_Table[tyi],idx); }


inline ST_IDX
TY_copy_constructor (const TY& ty) { return ty.Copy_constructor (); }
inline void
Set_TY_copy_constructor (TY& ty, ST_IDX idx) { ty.Set_copy_constructor (idx); }
inline ST_IDX
TY_copy_constructor (const TY_IDX tyi) { return Ty_Table[tyi].Copy_constructor (); }
inline void
Set_TY_copy_constructor (TY_IDX tyi, ST_IDX idx) { Set_TY_copy_constructor(Ty_Table[tyi],idx); }


inline TY_IDX
TY_baseclass(const TY &ty) { return ty.u3.baseclass; }
inline TY_IDX
TY_baseclass(const TY_IDX tyi) { return Ty_Table[tyi].u3.baseclass; }
inline void
Set_TY_baseclass(TY &ty, TY_IDX base) { ty.u3.baseclass = base; }
inline void
Set_TY_baseclass(TY_IDX tyi, TY_IDX base) { Ty_Table[tyi].u3.baseclass = base; }

inline INITV_IDX
TY_vtable(const TY &ty) { return ty.u3.vtable; }
inline INITV_IDX
TY_vtable(const TY_IDX tyi) { return Ty_Table[tyi].u3.vtable; }
inline void
Set_TY_vtable(TY &ty, INITV_IDX vt) { ty.u3.vtable = vt; }
inline void
Set_TY_vtable(TY_IDX tyi, INITV_IDX vt) { Ty_Table[tyi].u3.vtable = vt; }





inline BOOL
TY_is_character (const TY& ty) { return ty.flags & TY_IS_CHARACTER; }
inline void
Set_TY_is_character (TY& ty) { ty.flags |= TY_IS_CHARACTER; }
inline void
Clear_TY_is_character (TY& ty) { ty.flags &= ~TY_IS_CHARACTER; }
inline BOOL
TY_is_character (const TY_IDX tyi) { return TY_is_character(Ty_Table[tyi]); }
inline void
Set_TY_is_character (TY_IDX tyi) { Set_TY_is_character(Ty_Table[tyi]); }
inline void
Clear_TY_is_character (TY_IDX tyi) { Clear_TY_is_character(Ty_Table[tyi]); }

inline BOOL
TY_is_logical (const TY& ty) { return ty.flags & TY_IS_LOGICAL; }
inline void
Set_TY_is_logical (TY& ty) { ty.flags |= TY_IS_LOGICAL; }
inline void
Clear_TY_is_logical (TY& ty) { ty.flags &= ~TY_IS_LOGICAL; }
inline BOOL
TY_is_logical (const TY_IDX tyi) { return TY_is_logical(Ty_Table[tyi]); }
inline void
Set_TY_is_logical (TY_IDX tyi) { Set_TY_is_logical(Ty_Table[tyi]); }
inline void
Clear_TY_is_logical (TY_IDX tyi) { Clear_TY_is_logical(Ty_Table[tyi]); }

inline BOOL
TY_is_union (const TY& ty) { return ty.flags & TY_IS_UNION; }
inline void
Set_TY_is_union (TY& ty) { ty.flags |= TY_IS_UNION; }
inline void
Clear_TY_is_union (TY& ty) { ty.flags &= ~TY_IS_UNION; }
inline BOOL
TY_is_union (const TY_IDX tyi) { return TY_is_union(Ty_Table[tyi]); }
inline void
Set_TY_is_union (TY_IDX tyi) { Set_TY_is_union(Ty_Table[tyi]); }
inline void
Clear_TY_is_union (TY_IDX tyi) { Clear_TY_is_union(Ty_Table[tyi]); }

inline BOOL
TY_is_packed (const TY& ty) { return ty.flags & TY_IS_PACKED; }
inline void
Set_TY_is_packed (TY& ty) { ty.flags |= TY_IS_PACKED; }
inline void
Clear_TY_is_packed (TY& ty) { ty.flags &= ~TY_IS_PACKED; }
inline BOOL
TY_is_packed (const TY_IDX tyi) { return TY_is_packed(Ty_Table[tyi]); }
inline void
Set_TY_is_packed (TY_IDX tyi) { Set_TY_is_packed(Ty_Table[tyi]); }
inline void
Clear_TY_is_packed (TY_IDX tyi) { Clear_TY_is_packed(Ty_Table[tyi]); }

inline BOOL
TY_ptr_as_array (const TY& ty) { return ty.flags & TY_PTR_AS_ARRAY; }
inline void
Set_TY_ptr_as_array (TY& ty) { ty.flags |= TY_PTR_AS_ARRAY; }
inline void
Clear_TY_ptr_as_array (TY& ty) { ty.flags &= ~TY_PTR_AS_ARRAY; }
inline BOOL
TY_ptr_as_array (const TY_IDX tyi) { return TY_ptr_as_array(Ty_Table[tyi]); }
inline void
Set_TY_ptr_as_array (TY_IDX tyi) { Set_TY_ptr_as_array(Ty_Table[tyi]); }
inline void
Clear_TY_ptr_as_array (TY_IDX tyi) { Clear_TY_ptr_as_array(Ty_Table[tyi]); }

inline BOOL
TY_anonymous (const TY& ty) { return ty.flags & TY_ANONYMOUS; }
inline void
Set_TY_anonymous (TY& ty) { ty.flags |= TY_ANONYMOUS; }
inline void
Clear_TY_anonymous (TY& ty) { ty.flags &= ~TY_ANONYMOUS; }
inline BOOL
TY_anonymous (const TY_IDX tyi) { return TY_anonymous(Ty_Table[tyi]); }
inline void
Set_TY_anonymous (TY_IDX tyi) { Set_TY_anonymous(Ty_Table[tyi]); }
inline void
Clear_TY_anonymous (TY_IDX tyi) { Clear_TY_anonymous(Ty_Table[tyi]); }

inline BOOL
TY_split (const TY& ty) { return ty.flags & TY_SPLIT; }
inline void
Set_TY_split (TY& ty) { ty.flags |= TY_SPLIT; }
inline void
Clear_TY_split (TY& ty) { ty.flags &= ~TY_SPLIT; }
inline BOOL
TY_split (const TY_IDX tyi) { return TY_split(Ty_Table[tyi]); }
inline void
Set_TY_split (TY_IDX tyi) { Set_TY_split(Ty_Table[tyi]); }
inline void
Clear_TY_split (TY_IDX tyi) { Clear_TY_split(Ty_Table[tyi]); }

inline BOOL
TY_is_f90_pointer (const TY& ty) { return ty.flags & TY_IS_F90_POINTER; }
inline void
Set_TY_is_f90_pointer (TY& ty) { ty.flags |= TY_IS_F90_POINTER; }
inline void
Clear_TY_is_f90_pointer (TY& ty) { ty.flags &= ~TY_IS_F90_POINTER; }
inline BOOL
TY_is_f90_pointer (const TY_IDX tyi){ return TY_is_f90_pointer(Ty_Table[tyi]);}
inline void
Set_TY_is_f90_pointer (TY_IDX tyi) { Set_TY_is_f90_pointer(Ty_Table[tyi]); }
inline void
Clear_TY_is_f90_pointer (TY_IDX tyi){ Clear_TY_is_f90_pointer(Ty_Table[tyi]); }

inline BOOL
TY_not_in_union (const TY& ty) { return ty.flags & TY_NOT_IN_UNION; }
inline void
Set_TY_not_in_union (TY& ty) { ty.flags |= TY_NOT_IN_UNION; }
inline void
Clear_TY_not_in_union (TY& ty) { ty.flags &= ~TY_NOT_IN_UNION; }
inline BOOL
TY_not_in_union (const TY_IDX tyi) { return TY_not_in_union(Ty_Table[tyi]); }
inline void
Set_TY_not_in_union (TY_IDX tyi) { Set_TY_not_in_union(Ty_Table[tyi]); }
inline void
Clear_TY_not_in_union (TY_IDX tyi) { Clear_TY_not_in_union(Ty_Table[tyi]); }

inline BOOL
TY_no_ansi_alias (const TY& ty) { return ty.flags & TY_NO_ANSI_ALIAS; }
inline void
Set_TY_no_ansi_alias (TY& ty) { ty.flags |= TY_NO_ANSI_ALIAS; }
inline void
Clear_TY_no_ansi_alias (TY& ty) { ty.flags &= ~TY_NO_ANSI_ALIAS; }
inline BOOL
TY_no_ansi_alias (const TY_IDX tyi) { return TY_no_ansi_alias(Ty_Table[tyi]); }
inline void
Set_TY_no_ansi_alias (TY_IDX tyi) { Set_TY_no_ansi_alias(Ty_Table[tyi]); }
inline void
Clear_TY_no_ansi_alias (TY_IDX tyi) { Clear_TY_no_ansi_alias(Ty_Table[tyi]); }

inline BOOL
TY_is_non_pod (const TY& ty) { return ty.flags & TY_IS_NON_POD; }
inline void
Set_TY_is_non_pod (TY& ty) { ty.flags |= TY_IS_NON_POD; }
inline void
Clear_TY_is_non_pod (TY& ty) { ty.flags &= ~TY_IS_NON_POD; }
inline BOOL
TY_is_non_pod (const TY_IDX tyi) { return TY_is_non_pod(Ty_Table[tyi]); }
inline void
Set_TY_is_non_pod (TY_IDX tyi) { Set_TY_is_non_pod(Ty_Table[tyi]); }
inline void
Clear_TY_is_non_pod (TY_IDX tyi) { Clear_TY_is_non_pod(Ty_Table[tyi]); }


inline BOOL
TY_return_in_mem (const TY& ty) { return ty.flags & TY_RETURN_IN_MEM; }
inline void
Set_TY_return_in_mem (TY& ty) { ty.flags |= TY_RETURN_IN_MEM; }
inline void
Clear_TY_return_in_mem (TY& ty) { ty.flags &= ~TY_RETURN_IN_MEM; }
inline BOOL
TY_return_in_mem (const TY_IDX tyi) { return TY_return_in_mem(Ty_Table[tyi]); }
inline void
Set_TY_return_in_mem (TY_IDX tyi) { Set_TY_return_in_mem(Ty_Table[tyi]); }
inline void
Clear_TY_return_in_mem (TY_IDX tyi) { Clear_TY_return_in_mem(Ty_Table[tyi]); }
inline BOOL
TY_content_seen (const TY& ty) { return ty.flags & TY_CONTENT_SEEN; }
inline void
Set_TY_content_seen (TY& ty) { ty.flags |= TY_CONTENT_SEEN; }
inline void
Clear_TY_content_seen (TY& ty) { ty.flags &= ~TY_CONTENT_SEEN; }
inline BOOL
TY_content_seen (const TY_IDX tyi) { return TY_content_seen(Ty_Table[tyi]); }
inline void
Set_TY_content_seen (TY_IDX tyi) { Set_TY_content_seen(Ty_Table[tyi]); }
inline void
Clear_TY_content_seen (TY_IDX tyi) { Clear_TY_content_seen(Ty_Table[tyi]); }




inline BOOL
TY_return_to_param (const TY& ty) { return ty.Pu_flags () & TY_RETURN_TO_PARAM; }
inline void
Set_TY_return_to_param (TY& ty) { ty.Set_pu_flag (TY_RETURN_TO_PARAM); }
inline void
Clear_TY_return_to_param (TY& ty) { ty.Clear_pu_flag (TY_RETURN_TO_PARAM); }
inline BOOL
TY_return_to_param (const TY_IDX tyi) {
  return TY_return_to_param(Ty_Table[tyi]);
}
inline void
Set_TY_return_to_param (TY_IDX tyi) { Set_TY_return_to_param(Ty_Table[tyi]); }
inline void
Clear_TY_return_to_param (TY_IDX tyi){
  Clear_TY_return_to_param(Ty_Table[tyi]);
}

inline BOOL
TY_is_varargs (const TY& ty) { return ty.Pu_flags () & TY_IS_VARARGS; }
inline void
Set_TY_is_varargs (TY& ty) { ty.Set_pu_flag (TY_IS_VARARGS); }
inline void
Clear_TY_is_varargs (TY& ty) { ty.Clear_pu_flag (TY_IS_VARARGS); }
inline BOOL
TY_is_varargs (const TY_IDX tyi) { return TY_is_varargs(Ty_Table[tyi]); }
inline void
Set_TY_is_varargs (TY_IDX tyi) { Set_TY_is_varargs(Ty_Table[tyi]); }
inline void
Clear_TY_is_varargs (TY_IDX tyi) { Clear_TY_is_varargs(Ty_Table[tyi]); }

inline BOOL
TY_has_prototype (const TY_IDX tyi) {
 return Ty_Table[tyi].Pu_flags() & TY_HAS_PROTOTYPE;
}
inline void
Set_TY_has_prototype (TY_IDX tyi) {
 Ty_Table[tyi].Set_pu_flag (TY_HAS_PROTOTYPE);
}
inline void
Clear_TY_has_prototype (TY_IDX tyi) {
 Ty_Table[tyi].Clear_pu_flag (TY_HAS_PROTOTYPE);
}






inline STR_IDX
FLD_name_idx (FLD_HANDLE fld) { return fld.Entry()->name_idx; }
inline void
Set_FLD_name_idx (FLD_HANDLE fld, STR_IDX idx){ fld.Entry()->name_idx = idx; }
inline char *
FLD_name (FLD_HANDLE fld) { return &Str_Table[fld.Entry()->name_idx]; }

inline TY_IDX
FLD_type (FLD_HANDLE fld) { return fld.Entry()->type; }
inline void
Set_FLD_type (FLD_HANDLE fld, TY_IDX ty){ fld.Entry()->type = ty; }

inline UINT64
FLD_ofst (FLD_HANDLE fld) { return fld.Entry()->ofst; }
inline void
Set_FLD_ofst (FLD_HANDLE fld, UINT64 ofst) { fld.Entry()->ofst = ofst; }

inline UINT8
FLD_bsize (FLD_HANDLE fld) { return fld.Entry()->bsize; }
inline void
Set_FLD_bsize (FLD_HANDLE fld, UINT8 bsize) { fld.Entry()->bsize = bsize; }

inline UINT8
FLD_bofst (FLD_HANDLE fld) { return fld.Entry()->bofst; }
inline void
Set_FLD_bofst (FLD_HANDLE fld, UINT8 bofst) { fld.Entry()->bofst = bofst; }

inline UINT16
FLD_flags (FLD_HANDLE fld) { return fld.Entry()->flags; }
inline void
Set_FLD_flags (FLD_HANDLE fld, UINT16 flags) { fld.Entry()->flags = flags; }

inline ST_IDX
FLD_st (FLD_HANDLE fld) { return fld.Entry()->st; }
inline void
Set_FLD_st (FLD_HANDLE fld, ST_IDX st) { fld.Entry()->st = st; }





inline BOOL
FLD_last_field (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_LAST_FIELD; }
inline void
Set_FLD_last_field (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_LAST_FIELD; }
inline void
Clear_FLD_last_field (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_LAST_FIELD; }

inline BOOL
FLD_equivalence (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_EQUIVALENCE; }
inline void
Set_FLD_equivalence (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_EQUIVALENCE; }
inline void
Clear_FLD_equivalence (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_EQUIVALENCE; }

inline BOOL
FLD_begin_union (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_BEGIN_UNION; }
inline void
Set_FLD_begin_union (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_BEGIN_UNION; }
inline void
Clear_FLD_begin_union (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_BEGIN_UNION; }

inline BOOL
FLD_end_union (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_END_UNION; }
inline void
Set_FLD_end_union (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_END_UNION; }
inline void
Clear_FLD_end_union (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_END_UNION; }

inline BOOL
FLD_begin_map (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_BEGIN_MAP; }
inline void
Set_FLD_begin_map (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_BEGIN_MAP; }
inline void
Clear_FLD_begin_map (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_BEGIN_MAP; }

inline BOOL
FLD_end_map (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_END_MAP; }
inline void
Set_FLD_end_map (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_END_MAP; }
inline void
Clear_FLD_end_map (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_END_MAP; }

inline BOOL
FLD_is_bit_field (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_IS_BIT_FIELD; }
inline void
Set_FLD_is_bit_field (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_IS_BIT_FIELD; }
inline void
Clear_FLD_is_bit_field (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_IS_BIT_FIELD; }

inline BOOL
FLD_is_anonymous (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_IS_ANONYMOUS; }
inline void
Set_FLD_is_anonymous (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_IS_ANONYMOUS; }
inline void
Clear_FLD_is_anonymous (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_IS_ANONYMOUS; }

inline BOOL
FLD_is_base_class (FLD_HANDLE fld) { return fld.Entry()->flags & FLD_IS_BASE_CLASS; }
inline void
Set_FLD_is_base_class (FLD_HANDLE fld) { fld.Entry()->flags |= FLD_IS_BASE_CLASS; }
inline void
Clear_FLD_is_base_class (FLD_HANDLE fld) { fld.Entry()->flags &= ~FLD_IS_BASE_CLASS; }





inline TY_IDX
TYLIST_type (TYLIST tylist) { return tylist; }
inline void
Set_TYLIST_type (TYLIST& tylist, TY_IDX ty) { tylist = ty; }






inline UINT16
ARB_flags (const ARB_HANDLE arb) { return arb.Entry()->flags; }
inline void
Set_ARB_flags (ARB_HANDLE arb, UINT16 flags){ arb.Entry()->flags = flags; }

inline UINT16
ARB_dimension (const ARB_HANDLE arb) { return arb.Entry()->dimension; }
inline void
Set_ARB_dimension (ARB_HANDLE arb, UINT16 dim){ arb.Entry()->dimension = dim; }

inline INT64
ARB_lbnd_val (const ARB_HANDLE arb) { return arb.Entry()->Lbnd_val (); }
inline void
Set_ARB_lbnd_val (ARB_HANDLE arb, INT64 val) { arb.Entry()->Set_lbnd_val (val); }

inline ST_IDX
ARB_lbnd_var (const ARB_HANDLE arb) { return arb.Entry()->Lbnd_var (); }
inline void
Set_ARB_lbnd_var (ARB_HANDLE arb, ST_IDX var) { arb.Entry()->Set_lbnd_var (var); }

inline INT64
ARB_ubnd_val (const ARB_HANDLE arb) { return arb.Entry()->Ubnd_val (); }
inline void
Set_ARB_ubnd_val (ARB_HANDLE arb, INT64 val) { arb.Entry()->Set_ubnd_val (val); }

inline ST_IDX
ARB_ubnd_var (const ARB_HANDLE arb) { return arb.Entry()->Ubnd_var (); }
inline void
Set_ARB_ubnd_var (ARB_HANDLE arb, ST_IDX var) { arb.Entry()->Set_ubnd_var (var); }

inline INT64
ARB_stride_val (const ARB_HANDLE arb) { return arb.Entry()->Stride_val (); }
inline void
Set_ARB_stride_val (ARB_HANDLE arb, INT64 val){ arb.Entry()->Set_stride_val (val); }

inline ST_IDX
ARB_stride_var (const ARB_HANDLE arb) { return arb.Entry()->Stride_var (); }
inline void
Set_ARB_stride_var (ARB_HANDLE arb, ST_IDX var) { arb.Entry()->Set_stride_var (var); }





inline BOOL
ARB_const_lbnd (const ARB_HANDLE arb) { return arb.Entry()->flags & ARB_CONST_LBND; }
inline void
Set_ARB_const_lbnd (ARB_HANDLE arb) { arb.Entry()->flags |= ARB_CONST_LBND; }
inline void
Clear_ARB_const_lbnd (ARB_HANDLE arb) { arb.Entry()->flags &= ~ARB_CONST_LBND; }

inline BOOL
ARB_const_ubnd (const ARB_HANDLE arb) { return arb.Entry()->flags & ARB_CONST_UBND; }
inline void
Set_ARB_const_ubnd (ARB_HANDLE arb) { arb.Entry()->flags |= ARB_CONST_UBND; }
inline void
Clear_ARB_const_ubnd (ARB_HANDLE arb) { arb.Entry()->flags &= ~ARB_CONST_UBND; }

inline BOOL
ARB_const_stride (const ARB_HANDLE arb) { return arb.Entry()->flags & ARB_CONST_STRIDE; }
inline void
Set_ARB_const_stride (ARB_HANDLE arb) { arb.Entry()->flags |= ARB_CONST_STRIDE; }
inline void
Clear_ARB_const_stride (ARB_HANDLE arb) { arb.Entry()->flags &= ~ARB_CONST_STRIDE; }

inline BOOL
ARB_first_dimen (const ARB_HANDLE arb) { return arb.Entry()->flags & ARB_FIRST_DIMEN; }
inline void
Set_ARB_first_dimen (ARB_HANDLE arb) { arb.Entry()->flags |= ARB_FIRST_DIMEN; }
inline void
Clear_ARB_first_dimen (ARB_HANDLE arb) { arb.Entry()->flags &= ~ARB_FIRST_DIMEN; }

inline BOOL
ARB_last_dimen (const ARB_HANDLE arb) { return arb.Entry()->flags & ARB_LAST_DIMEN; }
inline void
Set_ARB_last_dimen (ARB_HANDLE arb) { arb.Entry()->flags |= ARB_LAST_DIMEN; }
inline void
Clear_ARB_last_dimen (ARB_HANDLE arb) { arb.Entry()->flags &= ~ARB_LAST_DIMEN; }






inline STR_IDX
LABEL_name_idx (const LABEL& lbl) { return lbl.name_idx; }
inline void
Set_LABEL_name_idx (LABEL& lbl, STR_IDX s) { lbl.name_idx = s; }
inline char *
LABEL_name (const LABEL& lbl) { return &Str_Table[lbl.name_idx]; }

inline LABEL_KIND
LABEL_kind (const LABEL& lbl) { return lbl.kind; }
inline void
Set_LABEL_KIND (LABEL& lbl, LABEL_KIND k) { lbl.kind = k; }

inline BOOL
LABEL_target_of_goto_outer_block (const LABEL& l)
{ return l.flags & LABEL_TARGET_OF_GOTO_OUTER_BLOCK;}
inline void
Set_LABEL_target_of_goto_outer_block (LABEL& l)
{ l.flags |= LABEL_TARGET_OF_GOTO_OUTER_BLOCK; }
inline void
Clear_LABEL_target_of_goto_outer_block (LABEL& l)
{ l.flags &= ~LABEL_TARGET_OF_GOTO_OUTER_BLOCK; }

inline BOOL
LABEL_addr_saved (const LABEL& l) { return l.flags & LABEL_ADDR_SAVED;}
inline void
Set_LABEL_addr_saved (LABEL& l) { l.flags |= LABEL_ADDR_SAVED; }
inline void
Clear_LABEL_addr_saved (LABEL& l) { l.flags &= ~LABEL_ADDR_SAVED; }

inline BOOL
LABEL_addr_passed (const LABEL& l) { return l.flags & LABEL_ADDR_PASSED;}
inline void
Set_LABEL_addr_passed (LABEL& l) { l.flags |= LABEL_ADDR_PASSED; }
inline void
Clear_LABEL_addr_passed (LABEL& l) { l.flags &= ~LABEL_ADDR_PASSED; }







inline STR_IDX
PREG_name_idx (const PREG& preg) { return preg.name_idx; }
inline void
Set_PREG_name_idx (PREG& preg, STR_IDX s) { preg.name_idx = s; }
inline void
Set_PREG_name (PREG &preg, const char *const name)
  { Set_PREG_name_idx(preg, Save_Str(name)); }
inline char *
PREG_name (const PREG& preg) { return &Str_Table[preg.name_idx]; }







inline ST_IDX
ST_ATTR_st_idx (const ST_ATTR& st_attr) { return st_attr.st_idx; }
inline void
Set_ST_ATTR_st_idx (ST_ATTR& st_attr, ST_IDX st) { st_attr.st_idx = st; }
inline ST_ATTR_KIND
ST_ATTR_kind (const ST_ATTR& st_attr) { return st_attr.kind; }
inline PREG_NUM
ST_ATTR_reg_id (const ST_ATTR& st_attr)
{
    ( st_attr.kind == ST_ATTR_DEDICATED_REGISTER ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 1651 ), Fail_FmtAssertion ("attribute is not for a dedicated register")) );

    return st_attr.Get_reg_id();
}
inline void
Set_ST_ATTR_reg_id (ST_ATTR& st_attr, PREG_NUM id)
{
    st_attr.kind = ST_ATTR_DEDICATED_REGISTER;
    st_attr.Set_reg_id (id);
}
inline STR_IDX
ST_ATTR_section_name (const ST_ATTR& st_attr)
{
    ( st_attr.kind == ST_ATTR_SECTION_NAME ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h", 1664 ), Fail_FmtAssertion ("attribute is not for a section name")) );

    return st_attr.Get_section_name ();
}
inline void
Set_ST_ATTR_section_name (ST_ATTR& st_attr, STR_IDX name)
{
    st_attr.kind = ST_ATTR_SECTION_NAME;
    st_attr.Set_section_name (name);
}





inline UINT8
FILE_INFO_gp_group (const FILE_INFO& f) { return f.gp_group; }
inline void
Set_FILE_INFO_gp_group (FILE_INFO& f, mUINT8 grp) { f.gp_group = grp; }

inline BOOL
FILE_INFO_ipa (const FILE_INFO& f) { return f.flags & FI_IPA; }
inline void
Set_FILE_INFO_ipa (FILE_INFO& f) { f.flags |= FI_IPA; }
inline void
Clear_FILE_INFO_ipa (FILE_INFO& f) { f.flags &= ~FI_IPA; }

inline BOOL
FILE_INFO_needs_lno (const FILE_INFO& f){ return f.flags & FI_NEEDS_LNO; }
inline void
Set_FILE_INFO_needs_lno (FILE_INFO& f) { f.flags |= FI_NEEDS_LNO; }
inline void
Clear_FILE_INFO_needs_lno (FILE_INFO& f){ f.flags &= ~FI_NEEDS_LNO; }

inline BOOL
FILE_INFO_has_inlines (const FILE_INFO& f) { return f.flags & FI_HAS_INLINES; }
inline void
Set_FILE_INFO_has_inlines (FILE_INFO& f) { f.flags |= FI_HAS_INLINES; }
inline void
Clear_FILE_INFO_has_inlines (FILE_INFO& f) { f.flags &= ~FI_HAS_INLINES; }

inline BOOL
FILE_INFO_has_mp (const FILE_INFO& f){ return f.flags & FI_HAS_MP; }
inline void
Set_FILE_INFO_has_mp (FILE_INFO& f) { f.flags |= FI_HAS_MP; }
inline void
Clear_FILE_INFO_has_mp (FILE_INFO& f){ f.flags &= ~FI_HAS_MP; }
# 1747 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_access.h"
inline LABEL&
LABEL_TABLE::operator[] (LABEL_IDX idx) {
    return Scope_tab[(Current_scope)].label_tab->Entry (idx);
}

inline LABEL&
LABEL_TABLE::operator() (SYMTAB_IDX level, LABEL_IDX idx) {
    return Scope_tab[level].label_tab->Entry (idx);
}

inline PREG&
PREG_TABLE::operator[] (PREG_IDX idx) {
    return Scope_tab[(Current_scope)].preg_tab->Entry (idx);
}

inline PREG&
PREG_TABLE::operator() (SYMTAB_IDX level, PREG_IDX idx) {
    return Scope_tab[level].preg_tab->Entry (idx);
}

inline ST_ATTR&
ST_ATTR_TABLE::operator[] (ST_ATTR_IDX idx) {
    return Scope_tab[(Current_scope)].st_attr_tab->Entry (idx);
}

inline ST_ATTR&
ST_ATTR_TABLE::operator() (SYMTAB_IDX level, ST_ATTR_IDX idx) {
    return Scope_tab[level].st_attr_tab->Entry (idx);
}

inline TY&
TYPE_TABLE::operator[] (TY_IDX idx) {
    return Ty_tab[TY_IDX_index(idx)];
}

inline TY_TAB*
TYPE_TABLE::operator& () {
    return &Ty_tab;
}
# 81 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_utils.h" 1
# 51 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_utils.h"
extern INT64
ST_size (const ST *);

extern ST *
Copy_ST (ST *st);

extern ST *
Copy_ST (ST *st, SYMTAB_IDX scope);

extern ST *
Copy_ST_No_Base (ST *st, SYMTAB_IDX scope);



extern BOOL
ST_is_constant (const ST *);




extern BOOL
ST_is_private_local(const ST *);



extern ST *
Gen_Temp_Named_Symbol(TY_IDX, const char *, ST_CLASS, ST_SCLASS);

extern ST *
Gen_Temp_Symbol(TY_IDX ty, const char *rootname);

extern ST *
Gen_Read_Only_Symbol(TY_IDX, const char *rootname);

inline BOOL
ST_visible_outside_dso(const ST &s)
{

  return (ST_export(s) != EXPORT_INTERNAL &&
   ST_export(s) != EXPORT_LOCAL_INTERNAL);
}
inline BOOL
ST_visible_outside_dso(const ST *s) { return ST_visible_outside_dso(*s); }

extern ST *
Gen_Intrinsic_Function(TY_IDX, const char *function_name);



TY_IDX
Make_Function_Type(TY_IDX return_ty_idx);


TY_IDX
Make_Array_Type(TYPE_ID element_type, INT32 ndim, INT64 len);


void
Clear_local_symtab_addr_flags (const SCOPE& scope);





extern TY_IDX MTYPE_TO_TY_array[46 +1];




extern TY_IDX Void_Type, FE_int_Type, FE_double_Type;
extern TY_IDX Spill_Int_Type, Spill_Float_Type;





extern TY_IDX Spill_Int32_Type;
extern TY_IDX Spill_Float32_Type;


TY_IDX
Copy_TY (TY_IDX ty);



extern UINT
TY_log_base2 (UINT align);


TY_IDX
TY_pointer (TY_IDX ty, BOOL f90_pointer = ((BOOL) 0));


TY_IDX
Make_Pointer_Type (TY_IDX ty_idx, BOOL f90_pointer = ((BOOL) 0));

TY_IDX
Make_F90_Pointer_Type (TY_IDX ty_idx);


inline TY_IDX
Make_Align_Type (TY_IDX ty_idx, INT32 align)
{
    Set_TY_align (ty_idx, align);
    return ty_idx;
}

TY_IDX
Make_Array_Type (TYPE_ID element, INT32 ndim, INT64 len);






TY_IDX
Promoted_Parm_Type(const ST *);
# 181 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_utils.h"
BOOL
TY_are_equivalent (TY_IDX ty_id1,
     TY_IDX ty_id2,
     UINT32 flags = 0x00000000);
# 198 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_utils.h"
TY_IDX
TY_is_unique (TY_IDX);
# 209 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_utils.h"
extern ST* MTYPE_TO_PREG_array[46 +1];







extern ST *Int_Preg, *Float_Preg, *Return_Val_Preg;

extern ST *Branch_Preg;




const char *
Preg_Name (PREG_NUM i);


extern PREG_NUM
Create_Preg_explicit (TYPE_ID mtype, const char *name,
        SCOPE *scope_tab, SYMTAB_IDX level);

extern PREG_NUM
Create_Preg (TYPE_ID mtype, const char *name);

extern INT32
Preg_Increment (TYPE_ID mtype);




BOOL
ARB_are_equivalent(ARB_HANDLE arb_id1,
     ARB_HANDLE arb_id2,
     UINT32 flags = 0x00000000);


void ARB_swap(ARB_HANDLE arb1, ARB_HANDLE arb2);


inline void ARB_copy(ARB_HANDLE arb1, ARB_HANDLE arb2) {
   *(arb1.Entry()) = *(arb2.Entry());
}





BOOL
FLD_are_equivalent(FLD_HANDLE fld_id1,
     FLD_HANDLE fld_id2,
     UINT32 flags = 0x00000000);

extern FLD_HANDLE
FLD_get_to_field (TY_IDX struct_ty_idx, UINT field_id, UINT &cur_field_id);




BOOL
TYLIST_are_equivalent(TYLIST_IDX tylist_id1,
        TYLIST_IDX tylist_id2,
        UINT32 flags = 0x00000000);




BLK_IDX Copy_BLK (BLK_IDX b);


extern void Base_Symbol_And_Offset (
  ST *st,
  ST **base_symbol,
  INT64 *offset_from_base
);





const char *
Class_Name (INT cl);

const char *
Sclass_Name (INT s);

const char *
Export_Name (INT );

const char *
Kind_Name (INT k);

void
Print_local_symtab (FILE *f, const SCOPE& scope);

void
Print_global_symtab (FILE *f);

inline void
Print_symtab (FILE *f, SYMTAB_IDX level)
{
    if (level > (1))
 Print_local_symtab (f, Scope_tab[level]);
    else
 Print_global_symtab (f);
}





void
New_Scope (SYMTAB_IDX level, MEM_POOL *pool, BOOL reserve_index_zero);

void
Delete_Scope (SYMTAB_IDX level);

void
Initialize_Symbol_Tables (BOOL reserve_index_zero);

void
Initialize_Special_Global_Symbols ();





inline PU_ITER
Make_pu_iter (PU_IDX pu_idx)
{
    return PU_ITER (&Pu_Table, pu_idx);
}

inline ST_ITER
Make_st_iter (const ST *st)
{
    ST_IDX idx = ST_st_idx (*st);
    return ST_ITER (Scope_tab[ST_IDX_level (idx)].st_tab, ST_IDX_index (idx));
}

inline TY_ITER
Make_ty_iter (TY_IDX ty_idx)
{
    return TY_ITER (&Ty_Table, TY_IDX_index (ty_idx));
}

inline FLD_ITER
Make_fld_iter (FLD_HANDLE fld)
{
    return FLD_ITER (&Fld_Table, fld.Idx());
}

inline TYLIST_ITER
Make_tylist_iter (TYLIST_IDX tylist_idx)
{
    return TYLIST_ITER (&Tylist_Table, tylist_idx);
}

inline ARB_ITER
Make_arb_iter (ARB_HANDLE arb)
{
    return ARB_ITER (&Arb_Table, arb.Idx());
}

inline LABEL_ITER
Make_label_iter (LABEL_IDX label_idx)
{
    return LABEL_ITER (Scope_tab[(Current_scope)].label_tab, label_idx);
}

inline PREG_ITER
Make_preg_iter (PREG_IDX preg_idx)
{
    return PREG_ITER (Scope_tab[(Current_scope)].preg_tab, preg_idx);
}

inline ST_ATTR_ITER
Make_st_attr_iter (ST_ATTR_IDX st_attr_idx)
{
    return ST_ATTR_ITER (Scope_tab[(Current_scope)].st_attr_tab, st_attr_idx);
}

inline TCON_ITER
Make_tcon_iter (TCON_IDX tcon_idx)
{
    return TCON_ITER (&Tcon_Table, tcon_idx);
}

inline INITO_ITER
Make_inito_iter (INITO_IDX inito_idx)
{
    return INITO_ITER (Scope_tab[INITO_IDX_level (inito_idx)].inito_tab,
         INITO_IDX_index (inito_idx));
}

inline INITV_ITER
Make_initv_iter (INITV_IDX initv_idx)
{
    return INITV_ITER (&Initv_Table, initv_idx);
}




template <class T, UINT block_size, class OP>
inline void
For_all (SEGMENTED_ARRAY<T, block_size>& table, const OP& op)
{
    For_all_entries (table, op, 1);
}

template <class T, UINT block_size, class OP>
inline void
For_all (RELATED_SEGMENTED_ARRAY<T, block_size>& table, const OP& op)
{
    For_all_entries (table, op, 1);
}

template <class OP>
inline void
For_all (const SYMBOL_TABLE&, SYMTAB_IDX level, const OP& op)
{
    For_all_entries (*Scope_tab[level].st_tab, op, 1);
}

template <class OP>
inline void
For_all (const INITO_TABLE&, SYMTAB_IDX level, const OP& op)
{
    For_all_entries (*Scope_tab[level].inito_tab, op, 1);
}

template <class OP>
inline void
For_all (const LABEL_TABLE&, const OP& op)
{
    For_all_entries (*Scope_tab[(Current_scope)].label_tab, op, 1);
}

template <class OP>
inline void
For_all (const PREG_TABLE&, const OP& op)
{
    For_all_entries (*Scope_tab[(Current_scope)].preg_tab, op, 1);
}

template <class OP>
inline void
For_all (const ST_ATTR_TABLE&, SYMTAB_IDX level, const OP& op)
{
    For_all_entries (*Scope_tab[level].st_attr_tab, op, 1);
}

template <class OP>
inline void
For_all (const TYPE_TABLE&, const OP& op)
{
    For_all_entries (Ty_tab, op, 1);
}






template <class T, UINT block_size, class PREDICATE>
inline UINT32
For_all_until (const SEGMENTED_ARRAY<T, block_size>& table,
        const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (table, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : idx;
}

template <class T, UINT block_size, class PREDICATE>
inline UINT32
For_all_until (const RELATED_SEGMENTED_ARRAY<T, block_size>& table,
        const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (table, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : idx;
}

template <class PREDICATE>
inline ST_IDX
For_all_until (const SYMBOL_TABLE&, SYMTAB_IDX level, const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (*Scope_tab[level].st_tab, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : make_ST_IDX (idx, level);
}

template <class PREDICATE>
inline INITO_IDX
For_all_until (const INITO_TABLE&, SYMTAB_IDX level, const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (*Scope_tab[level].inito_tab, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : make_INITO_IDX (idx, level);
}

template <class PREDICATE>
inline UINT32
For_all_until (const LABEL_TABLE&, const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (*Scope_tab[(Current_scope)].label_tab, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : idx;
}

template <class PREDICATE>
inline UINT32
For_all_until (const PREG_TABLE&, const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (*Scope_tab[(Current_scope)].preg_tab, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : idx;
}

template <class PREDICATE>
inline ST_ATTR_IDX
For_all_until (const ST_ATTR_TABLE&, SYMTAB_IDX level, const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (*Scope_tab[level].st_attr_tab, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : idx;
}


template <class PREDICATE>
inline TY_IDX
For_all_until (const TYPE_TABLE&, const PREDICATE& pred)
{
    UINT32 idx = Find_entry_if (Ty_tab, pred, 1);
    return (idx == ((UINT) -1)) ? 0 : make_TY_IDX (idx);
}
# 82 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h" 1
# 54 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h"
inline STR_IDX
ST_name_idx (const ST* s) { return s->u1.name_idx; }
inline void
Set_ST_name_idx (ST* s, STR_IDX idx) { s->u1.name_idx = idx; }
inline char *
ST_name (const ST* s) { return &Str_Table[ST_name_idx (s)]; }


inline TCON_IDX
ST_tcon (const ST* s) { return s->u1.tcon; }
inline void
Set_ST_tcon (ST* s, TCON_IDX tcon) { s->u1.tcon = tcon; }

inline ST_CLASS
ST_sym_class (const ST* s) { return s->sym_class; }

inline ST_CLASS
ST_class (const ST* s) { return ST_sym_class (s); }

inline ST_CLASS
ST_class (const ST& s) { return ST_sym_class (s); }

inline void
Set_ST_class (ST* s, ST_CLASS c) { s->sym_class = c; }

inline ST_SCLASS
ST_sclass (const ST* s) { return s->storage_class; }

inline void
Set_ST_sclass (ST* s, ST_SCLASS sc) { s->storage_class = sc; }

inline ST_EXPORT
ST_export (const ST* s) { return s->export_class; }
inline void
Set_ST_export (ST* s, ST_EXPORT export_class)
{

    ST_Verify_Sclass_Export (ST_sclass (s), export_class, s);

    s->export_class = export_class;
}

inline TY_IDX
ST_type (const ST* s) {

    switch (s->sym_class) {
    default:
 Fail_FmtAssertion ("Invalid argument for ST_type ()");



    case CLASS_VAR:
    case CLASS_CONST:
    case CLASS_PREG:
    case CLASS_NAME:
 return s->u2.type;
    case CLASS_FUNC:
 ( Count_Limit_DevWarn("/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 112, 2) ? DevWarn ("Should use ST_pu_type instead") : (void) 1 );

 return PU_prototype (Pu_Table[s->u2.pu]);
    }
# 124 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h"
}
inline void
Set_ST_type (ST* s, TY_IDX t) {

    switch (s->sym_class) {
    default:
 Fail_FmtAssertion ("Invalid argument for ST_type ()");
    case CLASS_VAR:
    case CLASS_CONST:
    case CLASS_PREG:
    case CLASS_NAME:
 s->u2.type = t;
    }



}

inline TY_IDX
ST_pu_type (const ST_IDX s) {
    ( St_Table[s].sym_class == CLASS_FUNC ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 144 ), Fail_FmtAssertion ("Invalid argument for ST_pu")) );
    return PU_prototype (Pu_Table[ST_pu (St_Table[s])]);
}

inline PU_IDX
ST_pu (const ST* s) {
    ( s->sym_class == CLASS_FUNC || (s->sym_class == CLASS_NAME && ST_asm_function_st(*s)) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 153 ), Fail_FmtAssertion ("Invalid argument for ST_pu")) );



    return s->u2.pu;
}
inline void
Set_ST_pu (ST* s, PU_IDX pu)
{
    ( s->sym_class == CLASS_FUNC || (s->sym_class == CLASS_NAME && ST_asm_function_st(*s)) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 162 ), Fail_FmtAssertion ("Invalid argument for ST_pu")) );



    s->u2.pu = pu;
}

inline BLK_IDX
ST_blk (const ST* s) {
    ( s->sym_class == CLASS_BLOCK ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 168 ), Fail_FmtAssertion ("Invalid argument for ST_blk")) );
    return s->u2.blk;
}
inline void
Set_ST_blk (ST* s, BLK_IDX b)
{
    ( s->sym_class == CLASS_BLOCK ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 174 ), Fail_FmtAssertion ("Invalid argument for ST_blk")) );
    s->u2.blk = b;
}

inline ST_IDX
ST_st_idx (const ST* s)
  { return (s != __null? s->st_idx : (ST_IDX) 0); }
inline void
Set_ST_st_idx (ST* s, ST_IDX idx) { s->st_idx = idx; }

inline BOOL
ST_is_weak_symbol (const ST* s) { return s->flags & ST_IS_WEAK_SYMBOL;}
inline void
Set_ST_is_weak_symbol (ST* s) { s->flags |= ST_IS_WEAK_SYMBOL; }
inline void
Clear_ST_is_weak_symbol (ST* s) { s->flags &= ~ST_IS_WEAK_SYMBOL; }

inline BOOL
ST_is_split_common (const ST* s) { return s->flags & ST_IS_SPLIT_COMMON;}
inline void
Set_ST_is_split_common (ST* s) { s->flags |= ST_IS_SPLIT_COMMON; }
inline void
Clear_ST_is_split_common (ST* s) { s->flags &= ~ST_IS_SPLIT_COMMON; }

inline ST_IDX
ST_base_idx (const ST* s)
{
    if (ST_is_split_common (s))
        return s->st_idx;
    else if (ST_is_weak_symbol (s) && ST_sclass(s) == SCLASS_EXTERN)
        return s->st_idx;
    else
        return s->base_idx;
}
inline void
Set_ST_base_idx (ST* s, ST_IDX base)
{
        if (ST_is_split_common (s))
          ( Count_Limit_DevWarn("/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 213, 2) ? DevWarn ("Shouldn't set base when split") : (void) 1 );

        if (ST_is_weak_symbol(s) && ST_sclass(s) == SCLASS_EXTERN)
          ( Count_Limit_DevWarn("/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 216, 2) ? DevWarn ("Shouldn't set base when weak") : (void) 1 );

 s->base_idx = base;
}
inline ST*
ST_base (const ST* s) { return &St_Table[ST_base_idx (s)]; }
inline void
Set_ST_base (ST* s, ST* base) { Set_ST_base_idx(s, ST_st_idx(base)); }

inline UINT64
ST_ofst (const ST* s) { return s->offset; }
inline void
Set_ST_ofst (ST* s, UINT64 offset) { s->offset = offset; }



inline BOOL
ST_is_not_used (const ST* s) { return s->flags & ST_IS_NOT_USED;}
inline void
Set_ST_is_not_used (ST* s) { s->flags |= ST_IS_NOT_USED; }
inline void
Clear_ST_is_not_used (ST* s) { s->flags &= ~ST_IS_NOT_USED; }

inline BOOL
ST_is_initialized (const ST* s) { return s->flags & ST_IS_INITIALIZED;}
inline void
Set_ST_is_initialized (ST* s) { s->flags |= ST_IS_INITIALIZED; }
inline void
Clear_ST_is_initialized (ST* s) { s->flags &= ~ST_IS_INITIALIZED; }

inline BOOL
ST_is_return_var (const ST* s) { return s->flags & ST_IS_RETURN_VAR;}
inline void
Set_ST_is_return_var (ST* s) { s->flags |= ST_IS_RETURN_VAR; }
inline void
Clear_ST_is_return_var (ST* s) { s->flags &= ~ST_IS_RETURN_VAR; }

inline BOOL
ST_is_value_parm (const ST* s) { return s->flags & ST_IS_VALUE_PARM;}
inline void
Set_ST_is_value_parm (ST* s) { s->flags |= ST_IS_VALUE_PARM; }
inline void
Clear_ST_is_value_parm (ST* s) { s->flags &= ~ST_IS_VALUE_PARM; }

inline BOOL
ST_promote_parm (const ST* s) { return s->flags & ST_PROMOTE_PARM;}
inline void
Set_ST_promote_parm (ST* s) { s->flags |= ST_PROMOTE_PARM; }
inline void
Clear_ST_promote_parm (ST* s) { s->flags &= ~ST_PROMOTE_PARM; }

inline BOOL
ST_keep_name_w2f (const ST* s) { return s->flags & ST_KEEP_NAME_W2F;}
inline void
Set_ST_keep_name_w2f (ST* s) { s->flags |= ST_KEEP_NAME_W2F; }
inline void
Clear_ST_keep_name_w2f (ST* s) { s->flags &= ~ST_KEEP_NAME_W2F; }

inline BOOL
ST_is_datapool (const ST* s) { return s->flags & ST_IS_DATAPOOL;}
inline void
Set_ST_is_datapool (ST* s) { s->flags |= ST_IS_DATAPOOL; }
inline void
Clear_ST_is_datapool (ST* s) { s->flags &= ~ST_IS_DATAPOOL; }

inline BOOL
ST_is_reshaped (const ST* s) { return s->flags & ST_IS_RESHAPED;}
inline void
Set_ST_is_reshaped (ST* s) { s->flags |= ST_IS_RESHAPED; }
inline void
Clear_ST_is_reshaped (ST* s) { s->flags &= ~ST_IS_RESHAPED; }

inline BOOL
ST_emit_symbol (const ST* s) { return s->flags & ST_EMIT_SYMBOL;}
inline void
Set_ST_emit_symbol (ST* s) { s->flags |= ST_EMIT_SYMBOL; }
inline void
Clear_ST_emit_symbol (ST* s) { s->flags &= ~ST_EMIT_SYMBOL; }

inline BOOL
ST_has_nested_ref (const ST* s) { return s->flags & ST_HAS_NESTED_REF;}
inline void
Set_ST_has_nested_ref (ST* s) { s->flags |= ST_HAS_NESTED_REF; }
inline void
Clear_ST_has_nested_ref (ST* s) { s->flags &= ~ST_HAS_NESTED_REF; }

inline BOOL
ST_init_value_zero (const ST* s) { return s->flags & ST_INIT_VALUE_ZERO;}
inline void
Set_ST_init_value_zero (ST* s) { s->flags |= ST_INIT_VALUE_ZERO; }
inline void
Clear_ST_init_value_zero (ST* s) { s->flags &= ~ST_INIT_VALUE_ZERO; }

inline BOOL
ST_gprel (const ST* s) { return s->flags & ST_GPREL;}
inline void
Set_ST_gprel (ST* s) { s->flags |= ST_GPREL; }
inline void
Clear_ST_gprel (ST* s) { s->flags &= ~ST_GPREL; }

inline BOOL
ST_not_gprel (const ST* s) { return s->flags & ST_NOT_GPREL;}
inline void
Set_ST_not_gprel (ST* s) { s->flags |= ST_NOT_GPREL; }
inline void
Clear_ST_not_gprel (ST* s) { s->flags &= ~ST_NOT_GPREL; }

inline BOOL
ST_is_namelist (const ST* s) { return s->flags & ST_IS_NAMELIST;}
inline void
Set_ST_is_namelist (ST* s) { s->flags |= ST_IS_NAMELIST; }
inline void
Clear_ST_is_namelist (ST* s) { s->flags &= ~ST_IS_NAMELIST; }

inline BOOL
ST_is_f90_target (const ST* s) { return s->flags & ST_IS_F90_TARGET;}
inline void
Set_ST_is_f90_target (ST* s) { s->flags |= ST_IS_F90_TARGET; }
inline void
Clear_ST_is_f90_target (ST* s) { s->flags &= ~ST_IS_F90_TARGET; }

inline BOOL
ST_declared_static (const ST* s) { return s->flags & ST_DECLARED_STATIC;}
inline void
Set_ST_declared_static (ST* s) { s->flags |= ST_DECLARED_STATIC; }
inline void
Clear_ST_declared_static (ST* s) { s->flags &= ~ST_DECLARED_STATIC; }

inline BOOL
ST_is_equivalenced (const ST* s) { return s->flags & ST_IS_EQUIVALENCED;}
inline void
Set_ST_is_equivalenced (ST* s) { s->flags |= ST_IS_EQUIVALENCED; }
inline void
Clear_ST_is_equivalenced (ST* s) { s->flags &= ~ST_IS_EQUIVALENCED; }

inline BOOL
ST_is_fill_align (const ST* s) { return s->flags & ST_IS_FILL_ALIGN;}
inline void
Set_ST_is_fill_align (ST* s) { s->flags |= ST_IS_FILL_ALIGN; }
inline void
Clear_ST_is_fill_align (ST* s) { s->flags &= ~ST_IS_FILL_ALIGN; }

inline BOOL
ST_is_optional_argument (const ST* s) { return s->flags & ST_IS_OPTIONAL_ARGUMENT;}
inline void
Set_ST_is_optional_argument (ST* s) { s->flags |= ST_IS_OPTIONAL_ARGUMENT; }
inline void
Clear_ST_is_optional_argument (ST* s) { s->flags &= ~ST_IS_OPTIONAL_ARGUMENT; }

inline BOOL
ST_is_temp_var (const ST* s) { return s->flags & ST_IS_TEMP_VAR;}
inline void
Set_ST_is_temp_var (ST* s) { s->flags |= ST_IS_TEMP_VAR; }
inline void
Clear_ST_is_temp_var (ST* s) { s->flags &= ~ST_IS_TEMP_VAR; }

inline BOOL
ST_is_const_var (const ST* s) { return s->flags & ST_IS_CONST_VAR;}
inline void
Set_ST_is_const_var (ST* s) { s->flags |= ST_IS_CONST_VAR; }
inline void
Clear_ST_is_const_var (ST* s) { s->flags &= ~ST_IS_CONST_VAR; }

inline BOOL
ST_addr_saved (const ST* s) { return s->flags & ST_ADDR_SAVED;}
inline void
Set_ST_addr_saved (ST* s) { s->flags |= ST_ADDR_SAVED; }
inline void
Clear_ST_addr_saved (ST* s) { s->flags &= ~ST_ADDR_SAVED; }

inline BOOL
ST_addr_passed (const ST* s) { return s->flags & ST_ADDR_PASSED;}
inline void
Set_ST_addr_passed (ST* s) { s->flags |= ST_ADDR_PASSED; }
inline void
Clear_ST_addr_passed (ST* s) { s->flags &= ~ST_ADDR_PASSED; }



inline BOOL
ST_addr_not_saved(const ST &s) { return !(s.flags & ST_ADDR_SAVED); }
inline void
Set_ST_addr_not_saved(ST &s) { s.flags &= ~ST_ADDR_SAVED; }
inline void
Clear_ST_addr_not_saved(ST &s) { s.flags |= ST_ADDR_SAVED; }

inline BOOL
ST_addr_not_passed(const ST &s) { return !(s.flags & ST_ADDR_PASSED); }
inline void
Set_ST_addr_not_passed(ST &s) { s.flags &= ~ST_ADDR_PASSED; }
inline void
Clear_ST_addr_not_passed(ST &s) { s.flags |= ST_ADDR_PASSED; }

inline BOOL
ST_addr_not_saved (const ST* s) { return !(s->flags & ST_ADDR_SAVED); }
inline void
Set_ST_addr_not_saved (ST* s) { s->flags &= ~ST_ADDR_SAVED; }
inline void
Clear_ST_addr_not_saved (ST* s) { s->flags |= ST_ADDR_SAVED; }

inline BOOL
ST_addr_not_passed (const ST* s) { return !(s->flags & ST_ADDR_PASSED);}
inline void
Set_ST_addr_not_passed (ST* s) { s->flags &= ~ST_ADDR_PASSED; }
inline void
Clear_ST_addr_not_passed (ST* s) { s->flags |= ST_ADDR_PASSED; }

inline BOOL
ST_is_thread_private (const ST* s) { return s->flags & ST_IS_THREAD_PRIVATE;}
inline void
Set_ST_is_thread_private (ST* s) { s->flags |= ST_IS_THREAD_PRIVATE; }
inline void
Clear_ST_is_thread_private (ST* s) { s->flags &= ~ST_IS_THREAD_PRIVATE; }

inline BOOL
ST_pt_to_unique_mem (const ST* s) { return s->flags & ST_PT_TO_UNIQUE_MEM;}
inline void
Set_ST_pt_to_unique_mem (ST* s) { s->flags |= ST_PT_TO_UNIQUE_MEM; }
inline void
Clear_ST_pt_to_unique_mem (ST* s) { s->flags &= ~ST_PT_TO_UNIQUE_MEM; }

inline BOOL
ST_pt_to_compiler_generated_mem (const ST* s)
 { return s->flags & ST_PT_TO_COMPILER_GENERATED_MEM;}
inline void
Set_ST_pt_to_compiler_generated_mem (ST* s)
 { s->flags |= ST_PT_TO_COMPILER_GENERATED_MEM; }
inline void
Clear_ST_pt_to_compiler_generated_mem (ST* s)
 { s->flags &= ~ST_PT_TO_COMPILER_GENERATED_MEM; }

inline BOOL
ST_assigned_to_dedicated_preg (const ST* s)
 { return s->flags & ST_ASSIGNED_TO_DEDICATED_PREG;}
inline void
Set_ST_assigned_to_dedicated_preg (ST* s)
 { s->flags |= ST_ASSIGNED_TO_DEDICATED_PREG; }
inline void
Clear_ST_assigned_to_dedicated_preg (ST* s)
 { s->flags &= ~ST_ASSIGNED_TO_DEDICATED_PREG; }

inline BOOL
ST_addr_taken (const ST* s)
{
 return ST_addr_saved(s) || ST_addr_passed(s);
}

inline ST*
ST_full (const ST* s) {
    ( ST_is_split_common (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 464 ), Fail_FmtAssertion ("Expecting a split common")) );
    return &St_Table[s->base_idx];
}
inline ST*
ST_strong (const ST* s) {
    ( ST_is_weak_symbol (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab_compatible.h", 469 ), Fail_FmtAssertion ("Expecting a weak symbol")) );
    return &St_Table[s->base_idx];
}

inline TCON&
STC_val (const ST* s) { return Tcon_Table[ST_tcon (s)]; }

inline void
Print_ST (FILE *f, const ST* st, BOOL) { st->Print (f); }



inline UINT
TY_id (TY_IDX ty) { return TY_IDX_index (ty); }

inline FLD_HANDLE
TY_flist (const TY& ty) { return TY_fld (ty); }







inline void Print_TY (FILE* f, TY_IDX tyi) {
  Ty_Table[tyi].Print (f);
}





inline TY_IDX
TYLIST_item (const TYLIST_IDX tli) { return TYLIST_type(tli); }
inline TYLIST_IDX
TYLIST_next (const TYLIST_IDX tli) { return tli+1; }





inline FLD_HANDLE
FLD_next (FLD_HANDLE f)
{
    if (FLD_last_field (f))
 return FLD_HANDLE();
    else
 return FLD_HANDLE (f.Idx() + 1);
}






inline BOOL
TY_AR_const_lbnd (const TY& ty, INT32 i)
{
    return ARB_const_lbnd (TY_arb(ty)[i]);
}

inline void
Set_TY_AR_const_lbnd (const TY& ty, INT32 i)
{
    Set_ARB_const_lbnd (TY_arb(ty)[i]);
}

inline void
Clear_TY_AR_const_lbnd (const TY& ty, INT32 i)
{
    Clear_ARB_const_lbnd (TY_arb(ty)[i]);
}

inline BOOL
TY_AR_const_ubnd (const TY& ty, INT32 i)
{
    return ARB_const_ubnd(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_const_ubnd (const TY& ty, INT32 i)
{
    Set_ARB_const_ubnd (TY_arb(ty)[i]);
}

inline void
Clear_TY_AR_const_ubnd (const TY& ty, INT32 i)
{
    Clear_ARB_const_ubnd (TY_arb(ty)[i]);
}

inline BOOL
TY_AR_const_stride (const TY& ty, INT32 i)
{
    return ARB_const_stride(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_const_stride (const TY& ty, INT32 i)
{
    Set_ARB_const_stride (TY_arb(ty)[i]);
}

inline void
Clear_TY_AR_const_stride (const TY& ty, INT32 i)
{
    Clear_ARB_const_stride (TY_arb(ty)[i]);
}

inline BOOL
TY_AR_last_dimen (const TY& ty, INT32 i)
{
    return ARB_last_dimen(TY_arb(ty)[i]);
}

inline INT64
TY_AR_lbnd_val (const TY& ty, INT32 i)
{
    return ARB_lbnd_val(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_lbnd_val (const TY& ty, INT32 i, INT64 v)
{
    Set_ARB_lbnd_val (TY_arb(ty)[i], v);
}

inline ST_IDX
TY_AR_lbnd_var (const TY& ty, INT32 i)
{
    return ARB_lbnd_var(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_lbnd_var (const TY& ty, INT32 i, ST_IDX s)
{
    Set_ARB_lbnd_var (TY_arb(ty)[i], s);
}

inline INT64
TY_AR_ubnd_val (const TY& ty, INT32 i)
{
    return ARB_ubnd_val(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_ubnd_val (const TY& ty, INT32 i, INT64 v)
{
    Set_ARB_ubnd_val (TY_arb(ty)[i], v);
}

inline ST_IDX
TY_AR_ubnd_var (const TY& ty, INT32 i)
{
    return ARB_ubnd_var(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_ubnd_var (const TY& ty, INT32 i, ST_IDX s)
{
    Set_ARB_ubnd_var (TY_arb(ty)[i], s);
}

inline INT64
TY_AR_stride_val (const TY& ty, INT32 i)
{
    return ARB_stride_val(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_stride_val (const TY& ty, INT32 i, INT64 v)
{
    Set_ARB_stride_val (TY_arb(ty)[i], v);
}

inline ST_IDX
TY_AR_stride_var (const TY& ty, INT32 i)
{
    return ARB_stride_var(TY_arb(ty)[i]);
}

inline void
Set_TY_AR_stride_var (const TY& ty, INT32 i, ST_IDX s)
{
    Set_ARB_stride_var (TY_arb(ty)[i], s);
}

inline TY_IDX
TY_AR_etype (const TY& ty) { return TY_etype (ty); }

inline INT32
TY_AR_ndims (const TY& ty)
{
   return ARB_dimension (TY_arb (ty));
}




inline BOOL
TY_AR_const_lbnd (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_const_lbnd (Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_const_lbnd (const TY_IDX ty_idx, INT32 i)
{
  Set_TY_AR_const_lbnd (Ty_Table[ty_idx], i);
}

inline void
Clear_TY_AR_const_lbnd (const TY_IDX ty_idx, INT32 i)
{
    Clear_TY_AR_const_lbnd (Ty_Table[ty_idx], i);
}

inline BOOL
TY_AR_const_ubnd (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_const_ubnd (Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_const_ubnd (const TY_IDX ty_idx, INT32 i)
{
    Set_TY_AR_const_ubnd (Ty_Table[ty_idx], i);
}

inline void
Clear_TY_AR_const_ubnd (const TY_IDX ty_idx, INT32 i)
{
    Clear_TY_AR_const_ubnd (Ty_Table[ty_idx], i);
}

inline BOOL
TY_AR_const_stride (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_const_stride(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_const_stride (const TY_IDX ty_idx, INT32 i)
{
    Set_TY_AR_const_stride (Ty_Table[ty_idx], i);
}

inline void
Clear_TY_AR_const_stride (const TY_IDX ty_idx, INT32 i)
{
    Clear_TY_AR_const_stride (Ty_Table[ty_idx], i);
}

inline BOOL
TY_AR_last_dimen (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_last_dimen(Ty_Table[ty_idx], i);
}

inline INT64
TY_AR_lbnd_val (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_lbnd_val(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_lbnd_val (const TY_IDX ty_idx, INT32 i, INT64 v)
{
    Set_TY_AR_lbnd_val (Ty_Table[ty_idx], i, v);
}

inline ST_IDX
TY_AR_lbnd_var (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_lbnd_var(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_lbnd_var (const TY_IDX ty_idx, INT32 i, ST_IDX s)
{
    Set_TY_AR_lbnd_var (Ty_Table[ty_idx], i, s);
}

inline INT64
TY_AR_ubnd_val (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_ubnd_val(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_ubnd_val (const TY_IDX ty_idx, INT32 i, INT64 v)
{
  Set_TY_AR_ubnd_val (Ty_Table[ty_idx], i, v);
}

inline ST_IDX
TY_AR_ubnd_var (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_ubnd_var(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_ubnd_var (const TY_IDX ty_idx, INT32 i, ST_IDX s)
{
  Set_TY_AR_ubnd_var (Ty_Table[ty_idx], i, s);
}

inline INT64
TY_AR_stride_val (const TY_IDX ty_idx, INT32 i)
{
  return TY_AR_stride_val(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_stride_val (const TY_IDX ty_idx, INT32 i, INT64 v)
{
  Set_TY_AR_stride_val (Ty_Table[ty_idx], i, v);
}

inline ST_IDX
TY_AR_stride_var (const TY_IDX ty_idx, INT32 i)
{
    return TY_AR_stride_var(Ty_Table[ty_idx], i);
}

inline void
Set_TY_AR_stride_var (const TY_IDX ty_idx, INT32 i, ST_IDX s)
{
  Set_TY_AR_stride_var (Ty_Table[ty_idx], i, s);
}

inline TY_IDX
TY_AR_etype (const TY_IDX ty_idx) { return TY_AR_etype (Ty_Table[ty_idx]); }

inline INT32
TY_AR_ndims (const TY_IDX ty_idx)
{
    return ARB_dimension (TY_arb (Ty_Table[ty_idx]));
}



inline SYMTAB_IDX
PU_lexical_level (const PU_IDX pui) { return Pu_Table[pui].lexical_level; }

inline BOOL
PU_has_exc_scopes (const PU_IDX pui) { return Pu_Table[pui].flags & 0x00000040; }

inline BOOL
PU_in_elf_section (const PU_IDX pui) { return Pu_Table[pui].flags & 0x00080000; }

inline BOOL
PU_is_mainpu (const PU_IDX pui) { return Pu_Table[pui].flags & 0x00008000; }

inline UINT64
PU_src_lang (const PU_IDX pui) { return Pu_Table[pui].src_lang; }






inline STR_IDX
LABEL_name_idx (const LABEL_IDX idx) { return Label_Table[idx].name_idx; }



inline BOOL
LABEL_begin_eh_range (const LABEL_IDX lbi)
{
 return (LABEL_kind(Label_Table[lbi]) == LKIND_BEGIN_EH_RANGE);
}
inline void
Set_LABEL_begin_eh_range (LABEL_IDX lbi)
{
 Set_LABEL_KIND(Label_Table[lbi],LKIND_BEGIN_EH_RANGE);
}
inline BOOL
LABEL_end_eh_range (const LABEL_IDX lbi)
{
 return (LABEL_kind(Label_Table[lbi]) == LKIND_END_EH_RANGE);
}
inline void
Set_LABEL_end_eh_range (LABEL_IDX lbi)
{
 Set_LABEL_KIND(Label_Table[lbi],LKIND_END_EH_RANGE);
}
inline BOOL
LABEL_target_of_goto_outer_block (const LABEL_IDX lbi)
{
 return (LABEL_target_of_goto_outer_block(Label_Table[lbi]));
}
inline void
Set_LABEL_target_of_goto_outer_block (const LABEL_IDX lbi)
{
 Set_LABEL_target_of_goto_outer_block(Label_Table[lbi]);
}
inline void
Clear_LABEL_target_of_goto_outer_block (const LABEL_IDX lbi)
{
 Clear_LABEL_target_of_goto_outer_block(Label_Table[lbi]);
}
inline BOOL
LABEL_addr_saved (const LABEL_IDX lbi)
{
 return (LABEL_addr_saved(Label_Table[lbi]));
}
inline void
Set_LABEL_addr_saved (const LABEL_IDX lbi)
{
 Set_LABEL_addr_saved(Label_Table[lbi]);
}
inline void
Clear_LABEL_addr_saved (const LABEL_IDX lbi)
{
 Clear_LABEL_addr_saved(Label_Table[lbi]);
}
inline BOOL
LABEL_addr_passed (const LABEL_IDX lbi)
{
 return (LABEL_addr_passed(Label_Table[lbi]));
}
inline void
Set_LABEL_addr_passed (const LABEL_IDX lbi)
{
 Set_LABEL_addr_passed(Label_Table[lbi]);
}
inline void
Clear_LABEL_addr_passed (const LABEL_IDX lbi)
{
 Clear_LABEL_addr_passed(Label_Table[lbi]);
}
# 83 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h" 2







inline ST*
New_ST (SYMTAB_IDX level)
{
    UINT idx;
    ST& s = Scope_tab[level].st_tab->New_entry (idx);
    Set_ST_st_idx (s, make_ST_IDX (idx, level));
    return &s;
}

inline ST *
New_ST () { return New_ST ((Current_scope)); }


inline void
ST_Init (ST* st, STR_IDX n, ST_CLASS sc, ST_SCLASS stc, ST_EXPORT exp,
  TY_IDX t)
{
    st->u1.name_idx = n;
    st->sym_class = sc;
    st->storage_class = stc;
    st->export_class = exp;
    st->u2.type = t;
    st->base_idx = st->st_idx;
    st->offset = 0;
    st->flags = 0;
    st->flags_ext = 0;
}

inline void
Set_ST_classes (ST* s, ST_CLASS c, ST_SCLASS sc)
{

    ST_Verify_Class_Sclass (c, sc);

    s->sym_class = c;
    s->storage_class = sc;
}


inline UINT32
ST_Table_Size (SYMTAB_IDX level) {
    return Scope_tab[level].st_tab->Size ();
}


inline char *
ST_name (ST_IDX idx) { return ST_name (St_Table[idx]); }

inline ST_CLASS
ST_class (const ST_IDX s) { return ST_class (St_Table[s]); }

inline TY_IDX
ST_type (const ST_IDX s) { return ST_type(St_Table[s]); }

inline TYPE_ID
ST_mtype (const ST* s) {
    return TY_mtype (Ty_Table[ST_type (s)]);
}
inline TYPE_ID
ST_btype (const ST* s) { return ST_mtype(s); }

inline void
Set_ST_base (ST& s, ST& base) { s.base_idx = ST_st_idx(base); }

inline ST&
ST_base (const ST& s) { return St_Table[ST_base_idx (s)]; }

inline ST&
ST_strong (const ST& s) {
    ( ST_is_weak_symbol (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 159 ), Fail_FmtAssertion ("Expecting a weak symbol")) );
    return St_Table[s.base_idx];
}

inline ST&
ST_full (const ST& s) {
    ( ST_is_split_common (s) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 165 ), Fail_FmtAssertion ("Expecting a split common")) );
    return St_Table[s.base_idx];
}

inline TCON&
ST_tcon_val (const ST* s) { return Tcon_Table[ST_tcon (s)]; }


inline BOOL
ST_is_preemptible (const ST* s) {
    return (ST_export (s) == EXPORT_PREEMPTIBLE ||
     ST_export (s) == EXPORT_OPTIONAL);
}

inline BOOL
ST_is_export_local (const ST *s)
{

 return (ST_export(s) == EXPORT_LOCAL ||
  ST_export(s) == EXPORT_LOCAL_INTERNAL);
}


inline BOOL
ST_is_export_hidden (const ST *s)
{
 return (ST_export(s) == EXPORT_HIDDEN);
}

inline TY_IDX
ST_pu_type (const ST* s)
{
  ( s->sym_class == CLASS_FUNC || (ST_sym_class (s) == CLASS_NAME && (ST_asm_function_st (*s))) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 200 ), Fail_FmtAssertion ("Invalid argument for ST_pu_type")) );



  return PU_prototype (Pu_Table[ST_pu (s)]);
}

inline SYMTAB_IDX
ST_level (const ST* s) { return ST_IDX_level(ST_st_idx(s)); }
inline UINT32
ST_index (const ST* s) { return ST_IDX_index(ST_st_idx(s)); }

inline BOOL
Has_Base_Block (const ST* s) {
    return ST_base_idx (s) != ST_st_idx (s);
}

inline BOOL
Has_Strong_Symbol (const ST* s) {
 return ST_is_weak_symbol(s) && (ST_sclass(s) == SCLASS_EXTERN)
  && (ST_strong(s) != s);
}




inline UINT
INITO_Table_Size (SYMTAB_IDX level) {
    return Scope_tab[level].inito_tab->Size();
}




inline UINT
INITV_Table_Size () { return Initv_Table.Size();}






inline PU&
New_PU (PU_IDX& pu) { return Pu_Table.New_entry (pu); }

inline void
PU_Init (PU& pu, TY_IDX prototype, SYMTAB_IDX level)
{
    pu.target_idx = TARGET_INFO_IDX_ZERO;
    pu.prototype = prototype;
    ( level > (1) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 247 ), Fail_FmtAssertion ("lexical level of a PU must be > 1")) );
    pu.lexical_level = level;
    pu.gp_group = 0;
    pu.src_lang = PU_UNKNOWN_LANG;
    pu.unused = 0;
    pu.flags = 0;
}

inline UINT
PU_Table_Size () { return Pu_Table.Size(); }

inline BOOL
PU_has_nested (const PU& pu) { return (PU_uplevel(pu) ||
        PU_has_mp(pu)); }

inline BOOL
PU_ftn_lang (const PU& pu) { return (PU_f90_lang(pu) ||
                                                  PU_f77_lang(pu)); }

inline SYMTAB_IDX
PU_lexical_level (const ST* st)
{
    ( ST_sym_class (st) == CLASS_FUNC || (ST_sym_class (st) == CLASS_NAME && (ST_asm_function_st (*st))) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 272 ), Fail_FmtAssertion ("Symbol is not a function")) );



    return PU_lexical_level (Pu_Table[ST_pu (st)]);
}

inline ST *
Get_Current_PU_ST ()
{
    return Scope_tab[(Current_scope)].st;
}

inline PU &
Get_Current_PU ()
{

    return Pu_Table[ST_pu (Scope_tab[(Current_scope)].st)];



}


inline PU &
Get_Scope_PU (UINT level)
{
    return Pu_Table[ST_pu (Scope_tab[level].st)];
}





inline TY&
New_TY (TY_IDX& ty_idx)
{
    UINT idx;
    TY& ty = Ty_tab.New_entry (idx);
    ty_idx = make_TY_IDX (idx);
    return ty;
}

inline void
TY_Init (TY& ty, UINT64 s, TY_KIND k, TYPE_ID t, STR_IDX n)
{

    if (k == KIND_FUNCTION)
      TY_Verify_Kind_Function(k,s,t);

    TY_Verify_Kind_Mtype (k, t);


    ty.size = s;
    ty.kind = k;
    ty.mtype = t;
    ty.flags = 0;
    ty.u1.fld = 0;
    ty.name_idx = n;
    ty.u2.etype = 0;
}

inline UINT32
TY_Table_Size () { return Ty_tab.Size (); }

inline UINT64
TY_size (TY_IDX ty_idx) { return TY_size (Ty_Table[ty_idx]); }

inline TY_KIND
TY_kind (TY_IDX ty_idx) { return TY_kind (Ty_Table[ty_idx]); }

inline TYPE_ID
TY_mtype (TY_IDX ty_idx) { return Ty_Table[ty_idx].mtype; }

inline char *
TY_name (TY_IDX ty_idx) { return TY_name (Ty_Table[ty_idx]); }

inline TY_IDX
TY_ret_type (const TY& ty) {
    ( TY_kind (ty) == KIND_FUNCTION ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 348 ), Fail_FmtAssertion ("TY_kind is not KIND_FUNCTION")) );
    return Tylist_Table[TY_tylist (ty)];
}
inline TY_IDX
TY_ret_type (const TY_IDX ty_idx) { return TY_ret_type(Ty_Table[ty_idx]);}

inline TYLIST_IDX
TY_parms (const TY& ty) {
    ( TY_kind (ty) == KIND_FUNCTION ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 356 ), Fail_FmtAssertion ("TY_kind is not KIND_FUNCTION")) );
    return TY_tylist (ty) + 1;
}
inline TYLIST_IDX
TY_parms (const TY_IDX ty_idx) { return TY_parms(Ty_Table[ty_idx]); }

inline BOOL
Is_Simple_Type (const TY& ty)
{
    switch (TY_kind (ty)) {
    case KIND_SCALAR:
    case KIND_POINTER:
    case KIND_VOID:
 return ((BOOL) 1);
    default:
 return ((BOOL) 0);
    }
}
inline BOOL
Is_Simple_Type (TY_IDX ty) { return Is_Simple_Type (Ty_Table[ty]); }


inline BOOL
Is_Structure_Type (const TY& ty)
{
    return TY_kind (ty) == KIND_STRUCT;
}
inline BOOL
Is_Structure_Type (TY_IDX ty) { return Is_Structure_Type (Ty_Table[ty]); }


inline BOOL
Is_Composite_Type (const TY& ty)
{
    switch (TY_kind (ty)) {
    case KIND_STRUCT:
    case KIND_ARRAY:
 return ((BOOL) 1);
    default:
 return ((BOOL) 0);
    }
}
inline BOOL
Is_Composite_Type (TY_IDX ty) { return Is_Composite_Type (Ty_Table[ty]); }




inline FLD_HANDLE
New_FLD ()
{
    FLD_IDX fld_idx;
    FLD& fld = Fld_Table.New_entry (fld_idx);
    return FLD_HANDLE (&fld, fld_idx);
}

inline void
FLD_Init (FLD_HANDLE f, STR_IDX _name, TY_IDX _type, UINT64 _ofst)
{
    FLD* fld = f.Entry ();
    fld->name_idx = _name;
    fld->type = _type;
    fld->ofst = _ofst;
    fld->flags = 0;
    fld->bsize = fld->bofst = 0;
    fld->st = 0;
}

inline UINT
FLD_Table_Size () { return Fld_Table.Size(); }





inline ARB_HANDLE
New_ARB ()
{
   ARB_IDX arb_idx;
   ARB& arb = Arb_Table.New_entry(arb_idx);
   return ARB_HANDLE(&arb,arb_idx);
}

inline void
ARB_Init (ARB_HANDLE arb_h, INT64 lbnd, INT64 ubnd, INT64 stride)
{
   ARB * arb = arb_h.Entry();
   arb->flags = ARB_CONST_LBND | ARB_CONST_UBND | ARB_CONST_STRIDE;
   arb->dimension = 1;
   arb->unused = 0;
   arb->u1.lbnd_val = lbnd;
   arb->u2.ubnd_val = ubnd;
   arb->u3.stride_val = stride;
}

inline UINT
ARB_Table_Size () { return Arb_Table.Size(); }




inline TYLIST&
New_TYLIST (TYLIST_IDX& tylist) { return Tylist_Table.New_entry (tylist); }

inline UINT32
TYLIST_Table_Size () { return Tylist_Table.Size (); }




inline LABEL&
New_LABEL (SYMTAB_IDX scope, LABEL_IDX& label_idx)
{
    LABEL& label = Scope_tab[scope].label_tab->New_entry (label_idx);
    Set_LABEL_name_idx (label, 0);
    Set_LABEL_KIND (label, LKIND_DEFAULT);
    label.flags = 0;
    return label;
}

inline void
LABEL_Init (LABEL& label, STR_IDX name_idx, LABEL_KIND kind)
{
    label.name_idx = name_idx;
    label.kind = kind;
    label.flags = 0;
}

inline UINT32
LABEL_Table_Size (SYMTAB_IDX level)
{
    return Scope_tab[level].label_tab->Size ();
}


inline char *
LABEL_name (LABEL_IDX idx) { return LABEL_name(Label_Table[idx]);}




inline PREG&
New_PREG_explicit (SCOPE *scope_tab, SYMTAB_IDX scope, PREG_IDX& p)
{
    return scope_tab[scope].preg_tab->New_entry (p);
}

inline PREG&
New_PREG (SYMTAB_IDX scope, PREG_IDX& p)
{
    return New_PREG_explicit(Scope_tab, scope, p);
}

inline UINT32
PREG_Table_Size_explicit (SCOPE *scope_tab, SYMTAB_IDX level) {
    return scope_tab[level].preg_tab->Size();
}

inline UINT32
PREG_Table_Size (SYMTAB_IDX level) {
    return PREG_Table_Size_explicit(Scope_tab, level);
}

inline void
Reset_PREG_Table_Size_explicit (SCOPE *scope_tab, SYMTAB_IDX level, UINT32 size)
{
    INT32 diff = PREG_Table_Size_explicit (scope_tab, level) - size;
    ( diff >= 0 ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 523 ), Fail_FmtAssertion ("Deleting too many entries")) );
    scope_tab[level].preg_tab->Delete_last (diff);
}

inline void
Reset_PREG_Table_Size (SYMTAB_IDX level, UINT32 size)
{
    Reset_PREG_Table_Size_explicit(Scope_tab, level, size);
}




inline ST_ATTR&
New_ST_ATTR_explicit (SCOPE *scope_tab, SYMTAB_IDX scope, ST_ATTR_IDX& p)
{
    return scope_tab[scope].st_attr_tab->New_entry (p);
}

inline ST_ATTR&
New_ST_ATTR (SYMTAB_IDX scope, ST_ATTR_IDX& p)
{
    return New_ST_ATTR_explicit(Scope_tab, scope, p);
}

inline void
ST_ATTR_Init (ST_ATTR& st_attr, ST_IDX st_idx, ST_ATTR_KIND akind, UINT64 val)
{
    st_attr.st_idx = st_idx;
    st_attr.kind = akind;
    st_attr.Set_u (val);
}

inline UINT32
ST_ATTR_Table_Size_explicit (SCOPE *scope_tab, SYMTAB_IDX level) {
    return scope_tab[level].st_attr_tab->Size();
}

inline UINT32
ST_ATTR_Table_Size (SYMTAB_IDX level) {
    return ST_ATTR_Table_Size_explicit(Scope_tab, level);
}

inline void
Reset_ST_ATTR_Table_Size_explicit (SCOPE *scope_tab, SYMTAB_IDX level, UINT32 size)
{
    INT32 diff = ST_ATTR_Table_Size_explicit (scope_tab, level) - size;
    ( diff >= 0 ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 570 ), Fail_FmtAssertion ("Deleting too many entries")) );
    scope_tab[level].st_attr_tab->Delete_last (diff);
}

inline void
Reset_ST_ATTR_Table_Size (SYMTAB_IDX level, UINT32 size)
{
    Reset_ST_ATTR_Table_Size_explicit(Scope_tab, level, size);
}




const UINT32 MAX_PREDEFINED_TCON_IDX = 2;

TCON_IDX
Enter_tcon (const TCON& tcon);

void Init_Constab (void);

inline UINT32
TCON_Table_Size () { return Tcon_Table.Size (); }






inline BOOL
Is_Global_Symbol (const ST* s) { return ST_level(s) <= (1); }

inline BOOL
Is_Local_Symbol (const ST* s) { return ST_level(s) == (Current_scope); }





inline BLK&
New_BLK (BLK_IDX& blk_idx)
{
    BLK& blk = Blk_Table.New_entry(blk_idx);
    blk.Init ();
    return blk;
}


inline UINT64
STB_size (const ST *s) {
    return Blk_Table[ST_blk(s)].Size();
}
inline void
Set_STB_size (ST *s, UINT64 size) {
    Blk_Table[ST_blk(s)].Set_size(size);
}
inline UINT
STB_align (const ST *s) {
  UINT16 align = Blk_Table[ST_blk(s)].Align();






  ( (align == 0xffff) || ((align & ~TY_ALIGN) == 0) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/symtab.h", 636 ), Fail_FmtAssertion ("STB_align unacceptably large (%d)\n", align)) );


  if (align == 0xffff) return 0;
  return (1 << align);
}
inline void
Set_STB_align (ST *s, UINT align) {
  UINT16 packed_align;
  extern UINT32 TY_log_base2 (UINT32 align);

  if (align == 0) {

    packed_align = 0xffff;
  }
  else if (align & 0x3f) {
    packed_align = (align & 0x7) ? (align >> 1) : 3 + (align >> 4);
  } else {
    packed_align = TY_log_base2(align);
  }

  Blk_Table[ST_blk(s)].Set_align(packed_align);
}
inline UINT16
STB_section_idx (const ST *s) {
    return Blk_Table[ST_blk(s)].Section_idx();
}
inline void
Set_STB_section_idx (ST *s, UINT16 sec) {
    Blk_Table[ST_blk(s)].Set_section_idx(sec);
}
inline UINT16
STB_scninfo_idx (const ST *s) {
    return Blk_Table[ST_blk(s)].Scninfo_idx();
}
inline void
Set_STB_scninfo_idx (ST *s, UINT16 scn) {
    Blk_Table[ST_blk(s)].Set_scninfo_idx(scn);
}
inline UINT16
STB_flags (const ST *s) {
 return Blk_Table[ST_blk(s)].Flags();
}
inline BOOL
STB_is_set (const ST* s, UINT16 flags) {
 return Blk_Table[ST_blk(s)].Is_set (flags);
}
inline void
Set_STB_flags (ST* s, UINT16 flags) {
 Blk_Table[ST_blk(s)].Set_flags (flags);
}
inline void
Reset_STB_flags (ST* s, UINT16 flags) {
 Blk_Table[ST_blk(s)].Clear_flags (flags);
}
# 64 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 1
# 49 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h" 1
# 192 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_core.h" 1
# 163 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_core.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h" 1
# 52 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
extern "C" {




typedef enum {
  OPERATOR_MAPCAT_HDR = 0,
  OPERATOR_MAPCAT_SCF = 1,
  OPERATOR_MAPCAT_LDST = 2,
  OPERATOR_MAPCAT_PRAGMA = 3,
  OPERATOR_MAPCAT_OSTMT = 4,
  OPERATOR_MAPCAT_OEXP = 5,
  OPERATOR_MAPCAT_ARRAY = 6,
  OPERATOR_MAPCAT_CALL = 7
} OPERATOR_MAPCAT;





extern struct OPERATOR_info_struct {
  char _name[23];
  mINT8 nkids;
  OPERATOR_MAPCAT mapcat;
  mUINT32 _flags;
} OPERATOR_info[];
# 122 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
typedef enum {
  OPERATOR_UNKNOWN = 0,
  OPERATOR_FIRST = 1,
  OPR_ABS = 1,
  OPR_ADD = 2,
  OPR_AGOTO = 3,
  OPR_ALTENTRY = 4,
  OPR_ARRAY = 5,
  OPR_ARRAYEXP = 6,
  OPR_ARRSECTION = 7,
  OPR_ASHR = 8,
  OPR_ASSERT = 9,
  OPR_BACKWARD_BARRIER = 10,
  OPR_BAND = 11,
  OPR_BIOR = 12,
  OPR_BLOCK = 13,
  OPR_BNOR = 14,
  OPR_BNOT = 15,
  OPR_BXOR = 16,
  OPR_CALL = 17,
  OPR_CAND = 18,
  OPR_CASEGOTO = 19,
  OPR_CEIL = 20,
  OPR_CIOR = 21,
  OPR_COMMA = 22,
  OPR_COMMENT = 23,
  OPR_COMPGOTO = 24,
  OPR_PAIR = 25,
  OPR_CONST = 26,
  OPR_CSELECT = 27,
  OPR_CVT = 28,
  OPR_CVTL = 29,
  OPR_DIV = 30,
  OPR_DIVREM = 31,
  OPR_DO_LOOP = 32,
  OPR_DO_WHILE = 33,
  OPR_EQ = 34,
  OPR_EVAL = 35,
  OPR_EXC_SCOPE_BEGIN = 36,
  OPR_EXC_SCOPE_END = 37,
  OPR_FALSEBR = 38,
  OPR_FLOOR = 39,
  OPR_FORWARD_BARRIER = 40,
  OPR_FUNC_ENTRY = 41,
  OPR_GE = 42,
  OPR_GOTO = 43,
  OPR_GT = 44,
  OPR_HIGHMPY = 45,
  OPR_HIGHPART = 46,
  OPR_ICALL = 47,
  OPR_IDNAME = 48,
  OPR_IF = 49,
  OPR_ILDA = 50,
  OPR_ILDBITS = 51,
  OPR_ILOAD = 52,
  OPR_ILOADX = 53,
  OPR_SECONDPART = 54,
  OPR_INTCONST = 55,
  OPR_INTRINSIC_CALL = 56,
  OPR_INTRINSIC_OP = 57,
  OPR_IO = 58,
  OPR_IO_ITEM = 59,
  OPR_ISTBITS = 60,
  OPR_ISTORE = 61,
  OPR_ISTOREX = 62,
  OPR_LABEL = 63,
  OPR_LAND = 64,
  OPR_LDA = 65,
  OPR_LDBITS = 66,
  OPR_LDID = 67,
  OPR_LE = 68,
  OPR_LIOR = 69,
  OPR_LNOT = 70,
  OPR_LOOP_INFO = 71,
  OPR_LOWPART = 72,
  OPR_LSHR = 73,
  OPR_LT = 74,
  OPR_MADD = 75,
  OPR_MAX = 76,
  OPR_MAXPART = 77,
  OPR_MIN = 78,
  OPR_MINMAX = 79,
  OPR_MINPART = 80,
  OPR_MLOAD = 81,
  OPR_MOD = 82,
  OPR_MPY = 83,
  OPR_MSTORE = 84,
  OPR_MSUB = 85,
  OPR_NE = 86,
  OPR_NEG = 87,
  OPR_NMADD = 88,
  OPR_NMSUB = 89,
  OPR_OPTPARM = 90,
  OPR_OPT_CHI = 91,
  OPR_OPT_RESERVE2 = 92,
  OPR_PAREN = 93,
  OPR_PARM = 94,
  OPR_PICCALL = 95,
  OPR_PRAGMA = 96,
  OPR_PREFETCH = 97,
  OPR_PREFETCHX = 98,
  OPR_RCOMMA = 99,
  OPR_FIRSTPART = 100,
  OPR_RECIP = 101,
  OPR_REGION = 102,
  OPR_REGION_EXIT = 103,
  OPR_REM = 104,
  OPR_RETURN = 105,
  OPR_RETURN_VAL = 106,
  OPR_RND = 107,
  OPR_RSQRT = 108,
  OPR_SELECT = 109,
  OPR_SHL = 110,
  OPR_SQRT = 111,
  OPR_STBITS = 112,
  OPR_STID = 113,
  OPR_SUB = 114,
  OPR_SWITCH = 115,
  OPR_TAS = 116,
  OPR_TRAP = 117,
  OPR_TRIPLET = 118,
  OPR_TRUEBR = 119,
  OPR_TRUNC = 120,
  OPR_VFCALL = 121,
  OPR_WHERE = 122,
  OPR_WHILE_DO = 123,
  OPR_XGOTO = 124,
  OPR_XMPY = 125,
  OPR_XPRAGMA = 126,
  OPR_AFFIRM = 127,
  OPR_ALLOCA = 128,
  OPR_DEALLOCA = 129,
  OPR_LDMA = 130,
  OPR_ASM_STMT = 131,
  OPR_ASM_EXPR = 132,
  OPR_ASM_INPUT = 133,
  OPR_RROTATE = 134,
  OPR_LDA_LABEL = 135,
  OPR_GOTO_OUTER_BLOCK = 136,
  OPR_EXTRACT_BITS = 137,
  OPR_COMPOSE_BITS = 138,
# 274 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPR_PURE_CALL_OP = 139,

  OPR_SL2_FORK_MAJOR = 140,
  OPR_SL2_FORK_MINOR=141,
  OPERATOR_LAST = 141
# 296 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
} OPERATOR;
# 334 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
typedef enum {
  OPCODE_UNKNOWN = 0,
  OPCODE_FIRST = 1,
  OPC_I4ABS = OPR_ABS + (4<<8) + (20<<14),
  OPC_I8ABS = OPR_ABS + (5<<8) + (20<<14),
  OPC_F4ABS = OPR_ABS + (10<<8) + (20<<14),
  OPC_F8ABS = OPR_ABS + (11<<8) + (20<<14),
  OPC_FQABS = OPR_ABS + (15<<8) + (20<<14),
  OPC_F10ABS = OPR_ABS + (12<<8) + (20<<14),
  OPC_F16ABS = OPR_ABS + (13<<8) + (20<<14),




  OPC_I4ADD = OPR_ADD + (4<<8) + (20<<14),
  OPC_I8ADD = OPR_ADD + (5<<8) + (20<<14),
  OPC_U4ADD = OPR_ADD + (8<<8) + (20<<14),
  OPC_U8ADD = OPR_ADD + (9<<8) + (20<<14),
  OPC_F4ADD = OPR_ADD + (10<<8) + (20<<14),
  OPC_F8ADD = OPR_ADD + (11<<8) + (20<<14),
  OPC_FQADD = OPR_ADD + (15<<8) + (20<<14),
  OPC_F10ADD = OPR_ADD + (12<<8) + (20<<14),
  OPC_F16ADD = OPR_ADD + (13<<8) + (20<<14),
  OPC_C4ADD = OPR_ADD + (17<<8) + (20<<14),
  OPC_C8ADD = OPR_ADD + (18<<8) + (20<<14),
  OPC_CQADD = OPR_ADD + (19<<8) + (20<<14),
  OPC_A4ADD = OPR_ADD + (22<<8) + (20<<14),
  OPC_A8ADD = OPR_ADD + (23<<8) + (20<<14),

  OPC_C10ADD = OPR_ADD + (24<<8) + (20<<14),
  OPC_C16ADD = OPR_ADD + (25<<8) + (20<<14),
  OPC_I16ADD = OPR_ADD + (26<<8) + (20<<14),
  OPC_U16ADD = OPR_ADD + (27<<8) + (20<<14),
# 381 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_AGOTO = OPR_AGOTO + (20<<8) + (20<<14),
  OPC_ALTENTRY = OPR_ALTENTRY + (20<<8) + (20<<14),
  OPC_U4ARRAY = OPR_ARRAY + (8<<8) + (20<<14),
  OPC_U8ARRAY = OPR_ARRAY + (9<<8) + (20<<14),
  OPC_A4ARRAY = OPR_ARRAY + (22<<8) + (20<<14),
  OPC_A8ARRAY = OPR_ARRAY + (23<<8) + (20<<14),
  OPC_I4ARRAYEXP = OPR_ARRAYEXP + (4<<8) + (20<<14),
  OPC_I8ARRAYEXP = OPR_ARRAYEXP + (5<<8) + (20<<14),
  OPC_U4ARRAYEXP = OPR_ARRAYEXP + (8<<8) + (20<<14),
  OPC_U8ARRAYEXP = OPR_ARRAYEXP + (9<<8) + (20<<14),
  OPC_F4ARRAYEXP = OPR_ARRAYEXP + (10<<8) + (20<<14),
  OPC_F8ARRAYEXP = OPR_ARRAYEXP + (11<<8) + (20<<14),
  OPC_FQARRAYEXP = OPR_ARRAYEXP + (15<<8) + (20<<14),
  OPC_F10ARRAYEXP = OPR_ARRAYEXP + (12<<8) + (20<<14),
  OPC_F16ARRAYEXP = OPR_ARRAYEXP + (13<<8) + (20<<14),
  OPC_C4ARRAYEXP = OPR_ARRAYEXP + (17<<8) + (20<<14),
  OPC_C8ARRAYEXP = OPR_ARRAYEXP + (18<<8) + (20<<14),
  OPC_CQARRAYEXP = OPR_ARRAYEXP + (19<<8) + (20<<14),
  OPC_MARRAYEXP = OPR_ARRAYEXP + (16<<8) + (20<<14),

  OPC_C10ARRAYEXP = OPR_ARRAYEXP + (24<<8) + (20<<14),
  OPC_C16ARRAYEXP = OPR_ARRAYEXP + (25<<8) + (20<<14),
  OPC_I16ARRAYEXP = OPR_ARRAYEXP + (26<<8) + (20<<14),
  OPC_U16ARRAYEXP = OPR_ARRAYEXP + (27<<8) + (20<<14),

  OPC_U4ARRSECTION = OPR_ARRSECTION + (8<<8) + (20<<14),
  OPC_U8ARRSECTION = OPR_ARRSECTION + (9<<8) + (20<<14),
  OPC_A4ARRSECTION = OPR_ARRSECTION + (22<<8) + (20<<14),
  OPC_A8ARRSECTION = OPR_ARRSECTION + (23<<8) + (20<<14),
  OPC_I4ASHR = OPR_ASHR + (4<<8) + (20<<14),
  OPC_I8ASHR = OPR_ASHR + (5<<8) + (20<<14),
  OPC_U4ASHR = OPR_ASHR + (8<<8) + (20<<14),
  OPC_U8ASHR = OPR_ASHR + (9<<8) + (20<<14),

  OPC_I16ASHR = OPR_ASHR + (26<<8) + (20<<14),
  OPC_U16ASHR = OPR_ASHR + (27<<8) + (20<<14),

  OPC_ASSERT = OPR_ASSERT + (20<<8) + (20<<14),
  OPC_BACKWARD_BARRIER = OPR_BACKWARD_BARRIER + (20<<8) + (20<<14),
  OPC_I4BAND = OPR_BAND + (4<<8) + (20<<14),
  OPC_I8BAND = OPR_BAND + (5<<8) + (20<<14),
  OPC_U4BAND = OPR_BAND + (8<<8) + (20<<14),
  OPC_U8BAND = OPR_BAND + (9<<8) + (20<<14),

  OPC_I16BAND = OPR_BAND + (26<<8) + (20<<14),
  OPC_U16BAND = OPR_BAND + (27<<8) + (20<<14),
# 435 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_I4BIOR = OPR_BIOR + (4<<8) + (20<<14),
  OPC_I8BIOR = OPR_BIOR + (5<<8) + (20<<14),
  OPC_U4BIOR = OPR_BIOR + (8<<8) + (20<<14),
  OPC_U8BIOR = OPR_BIOR + (9<<8) + (20<<14),

  OPC_I16BIOR = OPR_BIOR + (26<<8) + (20<<14),
  OPC_U16BIOR = OPR_BIOR + (27<<8) + (20<<14),
# 450 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_BLOCK = OPR_BLOCK + (20<<8) + (20<<14),
  OPC_I4BNOR = OPR_BNOR + (4<<8) + (20<<14),
  OPC_I8BNOR = OPR_BNOR + (5<<8) + (20<<14),
  OPC_U4BNOR = OPR_BNOR + (8<<8) + (20<<14),
  OPC_U8BNOR = OPR_BNOR + (9<<8) + (20<<14),

  OPC_I16BNOR = OPR_BNOR + (26<<8) + (20<<14),
  OPC_U16BNOR = OPR_BNOR + (27<<8) + (20<<14),

  OPC_I4BNOT = OPR_BNOT + (4<<8) + (20<<14),
  OPC_I8BNOT = OPR_BNOT + (5<<8) + (20<<14),
  OPC_U4BNOT = OPR_BNOT + (8<<8) + (20<<14),
  OPC_U8BNOT = OPR_BNOT + (9<<8) + (20<<14),

  OPC_I16BNOT = OPR_BNOT + (26<<8) + (20<<14),
  OPC_U16BNOT = OPR_BNOT + (27<<8) + (20<<14),

  OPC_I4BXOR = OPR_BXOR + (4<<8) + (20<<14),
  OPC_I8BXOR = OPR_BXOR + (5<<8) + (20<<14),
  OPC_U4BXOR = OPR_BXOR + (8<<8) + (20<<14),
  OPC_U8BXOR = OPR_BXOR + (9<<8) + (20<<14),

  OPC_I16BXOR = OPR_BXOR + (26<<8) + (20<<14),
  OPC_U16BXOR = OPR_BXOR + (27<<8) + (20<<14),
# 482 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_I1CALL = OPR_CALL + (2<<8) + (20<<14),
  OPC_I2CALL = OPR_CALL + (3<<8) + (20<<14),
  OPC_I4I4CALL = OPR_CALL + (4<<8) + (4<<14),
  OPC_I4CALL = OPR_CALL + (4<<8) + (20<<14),
  OPC_I8I8CALL = OPR_CALL + (5<<8) + (5<<14),
  OPC_I8CALL = OPR_CALL + (5<<8) + (20<<14),
  OPC_U1CALL = OPR_CALL + (6<<8) + (20<<14),
  OPC_U2CALL = OPR_CALL + (7<<8) + (20<<14),
  OPC_U4U4CALL = OPR_CALL + (8<<8) + (8<<14),
  OPC_U4CALL = OPR_CALL + (8<<8) + (20<<14),
  OPC_U8U8CALL = OPR_CALL + (9<<8) + (9<<14),
  OPC_U8CALL = OPR_CALL + (9<<8) + (20<<14),
  OPC_F4F4CALL = OPR_CALL + (10<<8) + (10<<14),
  OPC_F4F8CALL = OPR_CALL + (10<<8) + (11<<14),
  OPC_F4CALL = OPR_CALL + (10<<8) + (20<<14),
  OPC_F8F4CALL = OPR_CALL + (11<<8) + (10<<14),
  OPC_F8F8CALL = OPR_CALL + (11<<8) + (11<<14),
  OPC_F8CALL = OPR_CALL + (11<<8) + (20<<14),
  OPC_FQCALL = OPR_CALL + (15<<8) + (20<<14),
  OPC_F10CALL = OPR_CALL + (12<<8) + (20<<14),
  OPC_F16CALL = OPR_CALL + (13<<8) + (20<<14),
  OPC_C4CALL = OPR_CALL + (17<<8) + (20<<14),
  OPC_C8CALL = OPR_CALL + (18<<8) + (20<<14),
  OPC_CQCALL = OPR_CALL + (19<<8) + (20<<14),
  OPC_MCALL = OPR_CALL + (16<<8) + (20<<14),
  OPC_VCALL = OPR_CALL + (20<<8) + (20<<14),
  OPC_A4CALL = OPR_CALL + (22<<8) + (20<<14),
  OPC_A8CALL = OPR_CALL + (23<<8) + (20<<14),

  OPC_C10CALL = OPR_CALL + (24<<8) + (20<<14),
  OPC_C16CALL = OPR_CALL + (25<<8) + (20<<14),

  OPC_BCAND = OPR_CAND + (1<<8) + (20<<14),
  OPC_I4CAND = OPR_CAND + (4<<8) + (20<<14),
  OPC_CASEGOTO = OPR_CASEGOTO + (20<<8) + (20<<14),
  OPC_I4F4CEIL = OPR_CEIL + (4<<8) + (10<<14),
  OPC_I4F8CEIL = OPR_CEIL + (4<<8) + (11<<14),
  OPC_I4FQCEIL = OPR_CEIL + (4<<8) + (15<<14),
  OPC_I4F10CEIL = OPR_CEIL + (4<<8) + (12<<14),
  OPC_I4F16CEIL = OPR_CEIL + (4<<8) + (13<<14),
  OPC_I8F4CEIL = OPR_CEIL + (5<<8) + (10<<14),
  OPC_I8F8CEIL = OPR_CEIL + (5<<8) + (11<<14),
  OPC_I8FQCEIL = OPR_CEIL + (5<<8) + (15<<14),
  OPC_I8F10CEIL = OPR_CEIL + (5<<8) + (12<<14),
  OPC_I8F16CEIL = OPR_CEIL + (5<<8) + (13<<14),
  OPC_U4F4CEIL = OPR_CEIL + (8<<8) + (10<<14),
  OPC_U4F8CEIL = OPR_CEIL + (8<<8) + (11<<14),
  OPC_U4FQCEIL = OPR_CEIL + (8<<8) + (15<<14),
  OPC_U4F10CEIL = OPR_CEIL + (8<<8) + (12<<14),
  OPC_U4F16CEIL = OPR_CEIL + (8<<8) + (13<<14),
  OPC_U8F4CEIL = OPR_CEIL + (9<<8) + (10<<14),
  OPC_U8F8CEIL = OPR_CEIL + (9<<8) + (11<<14),
  OPC_U8FQCEIL = OPR_CEIL + (9<<8) + (15<<14),
  OPC_U8F10CEIL = OPR_CEIL + (9<<8) + (12<<14),
  OPC_U8F16CEIL = OPR_CEIL + (9<<8) + (13<<14),

  OPC_I16F4CEIL = OPR_CEIL + (26<<8) + (10<<14),
  OPC_I16F8CEIL = OPR_CEIL + (26<<8) + (11<<14),
  OPC_I16FQCEIL = OPR_CEIL + (26<<8) + (15<<14),
  OPC_I16F10CEIL = OPR_CEIL + (26<<8) + (12<<14),
  OPC_I16F16CEIL = OPR_CEIL + (26<<8) + (13<<14),
  OPC_U16F4CEIL = OPR_CEIL + (27<<8) + (10<<14),
  OPC_U16F8CEIL = OPR_CEIL + (27<<8) + (11<<14),
  OPC_U16FQCEIL = OPR_CEIL + (27<<8) + (15<<14),
  OPC_U16F10CEIL = OPR_CEIL + (27<<8) + (12<<14),
  OPC_U16F16CEIL = OPR_CEIL + (27<<8) + (13<<14),

  OPC_BCIOR = OPR_CIOR + (1<<8) + (20<<14),
  OPC_I4CIOR = OPR_CIOR + (4<<8) + (20<<14),
  OPC_I4COMMA = OPR_COMMA + (4<<8) + (20<<14),
  OPC_I8COMMA = OPR_COMMA + (5<<8) + (20<<14),
  OPC_U4COMMA = OPR_COMMA + (8<<8) + (20<<14),
  OPC_U8COMMA = OPR_COMMA + (9<<8) + (20<<14),
  OPC_F4COMMA = OPR_COMMA + (10<<8) + (20<<14),
  OPC_F8COMMA = OPR_COMMA + (11<<8) + (20<<14),
  OPC_FQCOMMA = OPR_COMMA + (15<<8) + (20<<14),
  OPC_F10COMMA = OPR_COMMA + (12<<8) + (20<<14),
  OPC_F16COMMA = OPR_COMMA + (13<<8) + (20<<14),
  OPC_C4COMMA = OPR_COMMA + (17<<8) + (20<<14),
  OPC_C8COMMA = OPR_COMMA + (18<<8) + (20<<14),
  OPC_CQCOMMA = OPR_COMMA + (19<<8) + (20<<14),
  OPC_MCOMMA = OPR_COMMA + (16<<8) + (20<<14),
  OPC_A4COMMA = OPR_COMMA + (22<<8) + (20<<14),
  OPC_A8COMMA = OPR_COMMA + (23<<8) + (20<<14),

  OPC_C10COMMA = OPR_COMMA + (24<<8) + (20<<14),
  OPC_C16COMMA = OPR_COMMA + (25<<8) + (20<<14),
  OPC_I16COMMA = OPR_COMMA + (26<<8) + (20<<14),
  OPC_U16COMMA = OPR_COMMA + (27<<8) + (20<<14),

  OPC_COMMENT = OPR_COMMENT + (20<<8) + (20<<14),
  OPC_COMPGOTO = OPR_COMPGOTO + (20<<8) + (20<<14),
  OPC_C4PAIR = OPR_PAIR + (17<<8) + (20<<14),
  OPC_C8PAIR = OPR_PAIR + (18<<8) + (20<<14),
  OPC_CQPAIR = OPR_PAIR + (19<<8) + (20<<14),

  OPC_C10PAIR = OPR_PAIR + (24<<8) + (20<<14),
  OPC_C16PAIR = OPR_PAIR + (25<<8) + (20<<14),

  OPC_I4CONST = OPR_CONST + (4<<8) + (20<<14),
  OPC_I8CONST = OPR_CONST + (5<<8) + (20<<14),
  OPC_U4CONST = OPR_CONST + (8<<8) + (20<<14),
  OPC_U8CONST = OPR_CONST + (9<<8) + (20<<14),
  OPC_F4CONST = OPR_CONST + (10<<8) + (20<<14),
  OPC_F8CONST = OPR_CONST + (11<<8) + (20<<14),
  OPC_FQCONST = OPR_CONST + (15<<8) + (20<<14),
  OPC_F10CONST = OPR_CONST + (12<<8) + (20<<14),
  OPC_F16CONST = OPR_CONST + (13<<8) + (20<<14),
  OPC_C4CONST = OPR_CONST + (17<<8) + (20<<14),
  OPC_C8CONST = OPR_CONST + (18<<8) + (20<<14),
  OPC_CQCONST = OPR_CONST + (19<<8) + (20<<14),
  OPC_A4CONST = OPR_CONST + (22<<8) + (20<<14),
  OPC_A8CONST = OPR_CONST + (23<<8) + (20<<14),

  OPC_C10CONST = OPR_CONST + (24<<8) + (20<<14),
  OPC_C16CONST = OPR_CONST + (25<<8) + (20<<14),
  OPC_I16CONST = OPR_CONST + (26<<8) + (20<<14),
  OPC_U16CONST = OPR_CONST + (27<<8) + (20<<14),
# 610 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_BCSELECT = OPR_CSELECT + (1<<8) + (20<<14),
  OPC_I4CSELECT = OPR_CSELECT + (4<<8) + (20<<14),
  OPC_I8CSELECT = OPR_CSELECT + (5<<8) + (20<<14),
  OPC_U4CSELECT = OPR_CSELECT + (8<<8) + (20<<14),
  OPC_U8CSELECT = OPR_CSELECT + (9<<8) + (20<<14),
  OPC_F4CSELECT = OPR_CSELECT + (10<<8) + (20<<14),
  OPC_F8CSELECT = OPR_CSELECT + (11<<8) + (20<<14),
  OPC_FQCSELECT = OPR_CSELECT + (15<<8) + (20<<14),
  OPC_F10CSELECT = OPR_CSELECT + (12<<8) + (20<<14),
  OPC_F16CSELECT = OPR_CSELECT + (13<<8) + (20<<14),
  OPC_C4CSELECT = OPR_CSELECT + (17<<8) + (20<<14),
  OPC_C8CSELECT = OPR_CSELECT + (18<<8) + (20<<14),
  OPC_CQCSELECT = OPR_CSELECT + (19<<8) + (20<<14),
  OPC_MCSELECT = OPR_CSELECT + (16<<8) + (20<<14),
  OPC_VCSELECT = OPR_CSELECT + (20<<8) + (20<<14),
  OPC_A4CSELECT = OPR_CSELECT + (22<<8) + (20<<14),
  OPC_A8CSELECT = OPR_CSELECT + (23<<8) + (20<<14),

  OPC_C10CSELECT = OPR_CSELECT + (24<<8) + (20<<14),
  OPC_C16CSELECT = OPR_CSELECT + (25<<8) + (20<<14),
  OPC_I16CSELECT = OPR_CSELECT + (26<<8) + (20<<14),
  OPC_U16CSELECT = OPR_CSELECT + (27<<8) + (20<<14),

  OPC_I4I8CVT = OPR_CVT + (4<<8) + (5<<14),
  OPC_I4U4CVT = OPR_CVT + (4<<8) + (8<<14),
  OPC_I4U8CVT = OPR_CVT + (4<<8) + (9<<14),
  OPC_I4F4CVT = OPR_CVT + (4<<8) + (10<<14),
  OPC_I4F8CVT = OPR_CVT + (4<<8) + (11<<14),
  OPC_I4FQCVT = OPR_CVT + (4<<8) + (15<<14),
  OPC_I4F10CVT = OPR_CVT + (4<<8) + (12<<14),
  OPC_I4F16CVT = OPR_CVT + (4<<8) + (13<<14),
  OPC_I4A4CVT = OPR_CVT + (4<<8) + (22<<14),
  OPC_I4A8CVT = OPR_CVT + (4<<8) + (23<<14),

  OPC_I4I16CVT = OPR_CVT + (4<<8) + (26<<14),
  OPC_I4U16CVT = OPR_CVT + (4<<8) + (27<<14),

  OPC_I8I4CVT = OPR_CVT + (5<<8) + (4<<14),
  OPC_I8U4CVT = OPR_CVT + (5<<8) + (8<<14),
  OPC_I8U8CVT = OPR_CVT + (5<<8) + (9<<14),
  OPC_I8F4CVT = OPR_CVT + (5<<8) + (10<<14),
  OPC_I8F8CVT = OPR_CVT + (5<<8) + (11<<14),
  OPC_I8FQCVT = OPR_CVT + (5<<8) + (15<<14),
  OPC_I8F10CVT = OPR_CVT + (5<<8) + (12<<14),
  OPC_I8F16CVT = OPR_CVT + (5<<8) + (13<<14),
  OPC_I8A4CVT = OPR_CVT + (5<<8) + (22<<14),
  OPC_I8A8CVT = OPR_CVT + (5<<8) + (23<<14),

  OPC_I8I16CVT = OPR_CVT + (5<<8) + (26<<14),
  OPC_I8U16CVT = OPR_CVT + (5<<8) + (27<<14),

  OPC_U4I4CVT = OPR_CVT + (8<<8) + (4<<14),
  OPC_U4I8CVT = OPR_CVT + (8<<8) + (5<<14),
  OPC_U4U8CVT = OPR_CVT + (8<<8) + (9<<14),
  OPC_U4F4CVT = OPR_CVT + (8<<8) + (10<<14),
  OPC_U4F8CVT = OPR_CVT + (8<<8) + (11<<14),
  OPC_U4FQCVT = OPR_CVT + (8<<8) + (15<<14),
  OPC_U4F10CVT = OPR_CVT + (8<<8) + (12<<14),
  OPC_U4F16CVT = OPR_CVT + (8<<8) + (13<<14),
  OPC_U4A4CVT = OPR_CVT + (8<<8) + (22<<14),
  OPC_U4A8CVT = OPR_CVT + (8<<8) + (23<<14),

  OPC_U4I16CVT = OPR_CVT + (8<<8) + (26<<14),
  OPC_U4U16CVT = OPR_CVT + (8<<8) + (27<<14),

  OPC_U8I4CVT = OPR_CVT + (9<<8) + (4<<14),
  OPC_U8I8CVT = OPR_CVT + (9<<8) + (5<<14),
  OPC_U8U4CVT = OPR_CVT + (9<<8) + (8<<14),
  OPC_U8F4CVT = OPR_CVT + (9<<8) + (10<<14),
  OPC_U8F8CVT = OPR_CVT + (9<<8) + (11<<14),
  OPC_U8FQCVT = OPR_CVT + (9<<8) + (15<<14),
  OPC_U8F10CVT = OPR_CVT + (9<<8) + (12<<14),
  OPC_U8F16CVT = OPR_CVT + (9<<8) + (13<<14),
  OPC_U8A4CVT = OPR_CVT + (9<<8) + (22<<14),
  OPC_U8A8CVT = OPR_CVT + (9<<8) + (23<<14),

  OPC_U8I16CVT = OPR_CVT + (9<<8) + (26<<14),
  OPC_U8U16CVT = OPR_CVT + (9<<8) + (27<<14),

  OPC_F4I4CVT = OPR_CVT + (10<<8) + (4<<14),
  OPC_F4I8CVT = OPR_CVT + (10<<8) + (5<<14),
  OPC_F4U4CVT = OPR_CVT + (10<<8) + (8<<14),
  OPC_F4U8CVT = OPR_CVT + (10<<8) + (9<<14),
  OPC_F4F8CVT = OPR_CVT + (10<<8) + (11<<14),
  OPC_F4FQCVT = OPR_CVT + (10<<8) + (15<<14),
  OPC_F4F10CVT = OPR_CVT + (10<<8) + (12<<14),
  OPC_F4F16CVT = OPR_CVT + (10<<8) + (13<<14),
  OPC_F4A4CVT = OPR_CVT + (10<<8) + (22<<14),
  OPC_F4A8CVT = OPR_CVT + (10<<8) + (23<<14),

  OPC_F4I16CVT = OPR_CVT + (10<<8) + (26<<14),
  OPC_F4U16CVT = OPR_CVT + (10<<8) + (27<<14),

  OPC_F8I4CVT = OPR_CVT + (11<<8) + (4<<14),
  OPC_F8I8CVT = OPR_CVT + (11<<8) + (5<<14),
  OPC_F8U4CVT = OPR_CVT + (11<<8) + (8<<14),
  OPC_F8U8CVT = OPR_CVT + (11<<8) + (9<<14),
  OPC_F8F4CVT = OPR_CVT + (11<<8) + (10<<14),
  OPC_F8FQCVT = OPR_CVT + (11<<8) + (15<<14),
  OPC_F8F10CVT = OPR_CVT + (11<<8) + (12<<14),
  OPC_F8F16CVT = OPR_CVT + (11<<8) + (13<<14),
  OPC_F8A4CVT = OPR_CVT + (11<<8) + (22<<14),
  OPC_F8A8CVT = OPR_CVT + (11<<8) + (23<<14),

  OPC_F8I16CVT = OPR_CVT + (11<<8) + (26<<14),
  OPC_F8U16CVT = OPR_CVT + (11<<8) + (27<<14),

  OPC_FQI4CVT = OPR_CVT + (15<<8) + (4<<14),
  OPC_FQI8CVT = OPR_CVT + (15<<8) + (5<<14),
  OPC_FQU4CVT = OPR_CVT + (15<<8) + (8<<14),
  OPC_FQU8CVT = OPR_CVT + (15<<8) + (9<<14),
  OPC_FQF4CVT = OPR_CVT + (15<<8) + (10<<14),
  OPC_FQF8CVT = OPR_CVT + (15<<8) + (11<<14),
  OPC_FQF10CVT = OPR_CVT + (15<<8) + (12<<14),
  OPC_FQF16CVT = OPR_CVT + (15<<8) + (13<<14),
  OPC_FQA4CVT = OPR_CVT + (15<<8) + (22<<14),
  OPC_FQA8CVT = OPR_CVT + (15<<8) + (23<<14),

  OPC_FQI16CVT = OPR_CVT + (15<<8) + (26<<14),
  OPC_FQU16CVT = OPR_CVT + (15<<8) + (27<<14),
  OPC_F10I4CVT = OPR_CVT + (12<<8) + (4<<14),
  OPC_F10I8CVT = OPR_CVT + (12<<8) + (5<<14),
  OPC_F10U4CVT = OPR_CVT + (12<<8) + (8<<14),
  OPC_F10U8CVT = OPR_CVT + (12<<8) + (9<<14),
  OPC_F10F4CVT = OPR_CVT + (12<<8) + (10<<14),
  OPC_F10F8CVT = OPR_CVT + (12<<8) + (11<<14),
  OPC_F10FQCVT = OPR_CVT + (12<<8) + (15<<14),
  OPC_F10F16CVT = OPR_CVT + (12<<8) + (13<<14),
  OPC_F10A4CVT = OPR_CVT + (12<<8) + (22<<14),
  OPC_F10A8CVT = OPR_CVT + (12<<8) + (23<<14),
  OPC_F10I16CVT = OPR_CVT + (12<<8) + (26<<14),
  OPC_F10U16CVT = OPR_CVT + (12<<8) + (27<<14),

  OPC_F16I4CVT = OPR_CVT + (13<<8) + (4<<14),
  OPC_F16I8CVT = OPR_CVT + (13<<8) + (5<<14),
  OPC_F16U4CVT = OPR_CVT + (13<<8) + (8<<14),
  OPC_F16U8CVT = OPR_CVT + (13<<8) + (9<<14),
  OPC_F16F4CVT = OPR_CVT + (13<<8) + (10<<14),
  OPC_F16F8CVT = OPR_CVT + (13<<8) + (11<<14),
  OPC_F16FQCVT = OPR_CVT + (13<<8) + (15<<14),
  OPC_F16F10CVT = OPR_CVT + (13<<8) + (12<<14),
  OPC_F16A4CVT = OPR_CVT + (13<<8) + (22<<14),
  OPC_F16A8CVT = OPR_CVT + (13<<8) + (23<<14),

  OPC_F16I16CVT = OPR_CVT + (13<<8) + (26<<14),
  OPC_F16U16CVT = OPR_CVT + (13<<8) + (27<<14),

  OPC_A4I4CVT = OPR_CVT + (22<<8) + (4<<14),
  OPC_A4I8CVT = OPR_CVT + (22<<8) + (5<<14),
  OPC_A4U4CVT = OPR_CVT + (22<<8) + (8<<14),
  OPC_A4U8CVT = OPR_CVT + (22<<8) + (9<<14),
  OPC_A4F4CVT = OPR_CVT + (22<<8) + (10<<14),
  OPC_A4F8CVT = OPR_CVT + (22<<8) + (11<<14),
  OPC_A4FQCVT = OPR_CVT + (22<<8) + (15<<14),
  OPC_A4F10CVT = OPR_CVT + (22<<8) + (12<<14),
  OPC_A4F16CVT = OPR_CVT + (22<<8) + (13<<14),
  OPC_A4A8CVT = OPR_CVT + (22<<8) + (23<<14),

  OPC_A4I16CVT = OPR_CVT + (22<<8) + (26<<14),
  OPC_A4U16CVT = OPR_CVT + (22<<8) + (27<<14),

  OPC_A8I4CVT = OPR_CVT + (23<<8) + (4<<14),
  OPC_A8I8CVT = OPR_CVT + (23<<8) + (5<<14),
  OPC_A8U4CVT = OPR_CVT + (23<<8) + (8<<14),
  OPC_A8U8CVT = OPR_CVT + (23<<8) + (9<<14),
  OPC_A8F4CVT = OPR_CVT + (23<<8) + (10<<14),
  OPC_A8F8CVT = OPR_CVT + (23<<8) + (11<<14),
  OPC_A8FQCVT = OPR_CVT + (23<<8) + (15<<14),
  OPC_A8F10CVT = OPR_CVT + (23<<8) + (12<<14),
  OPC_A8F16CVT = OPR_CVT + (23<<8) + (13<<14),
  OPC_A8A4CVT = OPR_CVT + (23<<8) + (22<<14),

  OPC_A8I16CVT = OPR_CVT + (23<<8) + (26<<14),
  OPC_A8U16CVT = OPR_CVT + (23<<8) + (27<<14),
  OPC_I16I4CVT = OPR_CVT + (26<<8) + (4<<14),
  OPC_I16I8CVT = OPR_CVT + (26<<8) + (5<<14),
  OPC_I16U4CVT = OPR_CVT + (26<<8) + (8<<14),
  OPC_I16U8CVT = OPR_CVT + (26<<8) + (9<<14),
  OPC_I16F4CVT = OPR_CVT + (26<<8) + (10<<14),
  OPC_I16F8CVT = OPR_CVT + (26<<8) + (11<<14),
  OPC_I16FQCVT = OPR_CVT + (26<<8) + (15<<14),
  OPC_I16F10CVT = OPR_CVT + (26<<8) + (12<<14),
  OPC_I16F16CVT = OPR_CVT + (26<<8) + (13<<14),
  OPC_I16A4CVT = OPR_CVT + (26<<8) + (22<<14),
  OPC_I16A8CVT = OPR_CVT + (26<<8) + (23<<14),
  OPC_I16I16CVT = OPR_CVT + (26<<8) + (26<<14),
  OPC_I16U16CVT = OPR_CVT + (26<<8) + (27<<14),
  OPC_U16I4CVT = OPR_CVT + (27<<8) + (4<<14),
  OPC_U16I8CVT = OPR_CVT + (27<<8) + (5<<14),
  OPC_U16U4CVT = OPR_CVT + (27<<8) + (8<<14),
  OPC_U16U8CVT = OPR_CVT + (27<<8) + (9<<14),
  OPC_U16F4CVT = OPR_CVT + (27<<8) + (10<<14),
  OPC_U16F8CVT = OPR_CVT + (27<<8) + (11<<14),
  OPC_U16FQCVT = OPR_CVT + (27<<8) + (15<<14),
  OPC_U16F10CVT = OPR_CVT + (27<<8) + (12<<14),
  OPC_U16F16CVT = OPR_CVT + (27<<8) + (13<<14),
  OPC_U16A4CVT = OPR_CVT + (27<<8) + (22<<14),
  OPC_U16A8CVT = OPR_CVT + (27<<8) + (23<<14),
  OPC_U16I16CVT = OPR_CVT + (27<<8) + (26<<14),
  OPC_U16U16CVT = OPR_CVT + (27<<8) + (27<<14),

  OPC_I4BCVT = OPR_CVT + (4<<8) + (1<<14),
  OPC_U4BCVT = OPR_CVT + (8<<8) + (1<<14),
  OPC_I8BCVT = OPR_CVT + (5<<8) + (1<<14),
  OPC_U8BCVT = OPR_CVT + (9<<8) + (1<<14),
  OPC_I4CVTL = OPR_CVTL + (4<<8) + (20<<14),
  OPC_I8CVTL = OPR_CVTL + (5<<8) + (20<<14),
  OPC_U4CVTL = OPR_CVTL + (8<<8) + (20<<14),
  OPC_U8CVTL = OPR_CVTL + (9<<8) + (20<<14),

  OPC_I16CVTL = OPR_CVTL + (26<<8) + (20<<14),
  OPC_U16CVTL = OPR_CVTL + (27<<8) + (20<<14),

  OPC_I4DIV = OPR_DIV + (4<<8) + (20<<14),
  OPC_I8DIV = OPR_DIV + (5<<8) + (20<<14),
  OPC_U4DIV = OPR_DIV + (8<<8) + (20<<14),
  OPC_U8DIV = OPR_DIV + (9<<8) + (20<<14),
  OPC_F4DIV = OPR_DIV + (10<<8) + (20<<14),
  OPC_F8DIV = OPR_DIV + (11<<8) + (20<<14),
  OPC_FQDIV = OPR_DIV + (15<<8) + (20<<14),
  OPC_F10DIV = OPR_DIV + (12<<8) + (20<<14),
  OPC_F16DIV = OPR_DIV + (13<<8) + (20<<14),
  OPC_C4DIV = OPR_DIV + (17<<8) + (20<<14),
  OPC_C8DIV = OPR_DIV + (18<<8) + (20<<14),
  OPC_CQDIV = OPR_DIV + (19<<8) + (20<<14),

  OPC_C10DIV = OPR_DIV + (24<<8) + (20<<14),
  OPC_C16DIV = OPR_DIV + (25<<8) + (20<<14),
  OPC_I16DIV = OPR_DIV + (26<<8) + (20<<14),
  OPC_U16DIV = OPR_DIV + (27<<8) + (20<<14),
# 850 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_I4DIVREM = OPR_DIVREM + (4<<8) + (20<<14),
  OPC_I8DIVREM = OPR_DIVREM + (5<<8) + (20<<14),
  OPC_U4DIVREM = OPR_DIVREM + (8<<8) + (20<<14),
  OPC_U8DIVREM = OPR_DIVREM + (9<<8) + (20<<14),

  OPC_I16DIVREM = OPR_DIVREM + (26<<8) + (20<<14),
  OPC_U16DIVREM = OPR_DIVREM + (27<<8) + (20<<14),
# 865 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_DO_LOOP = OPR_DO_LOOP + (20<<8) + (20<<14),
  OPC_DO_WHILE = OPR_DO_WHILE + (20<<8) + (20<<14),
  OPC_BI4EQ = OPR_EQ + (1<<8) + (4<<14),
  OPC_BI8EQ = OPR_EQ + (1<<8) + (5<<14),
  OPC_BU4EQ = OPR_EQ + (1<<8) + (8<<14),
  OPC_BU8EQ = OPR_EQ + (1<<8) + (9<<14),
  OPC_BF4EQ = OPR_EQ + (1<<8) + (10<<14),
  OPC_BF8EQ = OPR_EQ + (1<<8) + (11<<14),
  OPC_BFQEQ = OPR_EQ + (1<<8) + (15<<14),
  OPC_BF10EQ = OPR_EQ + (1<<8) + (12<<14),
  OPC_BF16EQ = OPR_EQ + (1<<8) + (13<<14),
  OPC_BC4EQ = OPR_EQ + (1<<8) + (17<<14),
  OPC_BC8EQ = OPR_EQ + (1<<8) + (18<<14),
  OPC_BCQEQ = OPR_EQ + (1<<8) + (19<<14),
  OPC_BA4EQ = OPR_EQ + (1<<8) + (22<<14),
  OPC_BA8EQ = OPR_EQ + (1<<8) + (23<<14),

  OPC_BC10EQ = OPR_EQ + (1<<8) + (24<<14),
  OPC_BC16EQ = OPR_EQ + (1<<8) + (25<<14),
  OPC_BI16EQ = OPR_EQ + (1<<8) + (26<<14),
  OPC_BU16EQ = OPR_EQ + (1<<8) + (27<<14),

  OPC_BBEQ = OPR_EQ + (1<<8) + (1<<14),
  OPC_I4I4EQ = OPR_EQ + (4<<8) + (4<<14),
  OPC_I4I8EQ = OPR_EQ + (4<<8) + (5<<14),
  OPC_I4U4EQ = OPR_EQ + (4<<8) + (8<<14),
  OPC_I4U8EQ = OPR_EQ + (4<<8) + (9<<14),
  OPC_I4F4EQ = OPR_EQ + (4<<8) + (10<<14),
  OPC_I4F8EQ = OPR_EQ + (4<<8) + (11<<14),
  OPC_I4FQEQ = OPR_EQ + (4<<8) + (15<<14),
  OPC_I4F10EQ = OPR_EQ + (4<<8) + (12<<14),
  OPC_I4F16EQ = OPR_EQ + (4<<8) + (13<<14),
  OPC_I4C4EQ = OPR_EQ + (4<<8) + (17<<14),
  OPC_I4C8EQ = OPR_EQ + (4<<8) + (18<<14),
  OPC_I4CQEQ = OPR_EQ + (4<<8) + (19<<14),
  OPC_I4A4EQ = OPR_EQ + (4<<8) + (22<<14),
  OPC_I4A8EQ = OPR_EQ + (4<<8) + (23<<14),

  OPC_I4C10EQ = OPR_EQ + (4<<8) + (24<<14),
  OPC_I4C16EQ = OPR_EQ + (4<<8) + (25<<14),
  OPC_I4I16EQ = OPR_EQ + (4<<8) + (26<<14),
  OPC_I4U16EQ = OPR_EQ + (4<<8) + (27<<14),




  OPC_I8I4EQ = OPR_EQ + (5<<8) + (4<<14),
  OPC_I8I8EQ = OPR_EQ + (5<<8) + (5<<14),
  OPC_I8U4EQ = OPR_EQ + (5<<8) + (8<<14),
  OPC_I8U8EQ = OPR_EQ + (5<<8) + (9<<14),
  OPC_I8F4EQ = OPR_EQ + (5<<8) + (10<<14),
  OPC_I8F8EQ = OPR_EQ + (5<<8) + (11<<14),
  OPC_I8FQEQ = OPR_EQ + (5<<8) + (15<<14),
  OPC_I8F10EQ = OPR_EQ + (5<<8) + (12<<14),
  OPC_I8F16EQ = OPR_EQ + (5<<8) + (13<<14),
  OPC_I8C4EQ = OPR_EQ + (5<<8) + (17<<14),
  OPC_I8C8EQ = OPR_EQ + (5<<8) + (18<<14),
  OPC_I8CQEQ = OPR_EQ + (5<<8) + (19<<14),
  OPC_I8A4EQ = OPR_EQ + (5<<8) + (22<<14),
  OPC_I8A8EQ = OPR_EQ + (5<<8) + (23<<14),

  OPC_I8C10EQ = OPR_EQ + (5<<8) + (24<<14),
  OPC_I8C16EQ = OPR_EQ + (5<<8) + (25<<14),
  OPC_I8I16EQ = OPR_EQ + (5<<8) + (26<<14),
  OPC_I8U16EQ = OPR_EQ + (5<<8) + (27<<14),

  OPC_U4I4EQ = OPR_EQ + (8<<8) + (4<<14),
  OPC_U4I8EQ = OPR_EQ + (8<<8) + (5<<14),
  OPC_U4U4EQ = OPR_EQ + (8<<8) + (8<<14),
  OPC_U4U8EQ = OPR_EQ + (8<<8) + (9<<14),
  OPC_U4F4EQ = OPR_EQ + (8<<8) + (10<<14),
  OPC_U4F8EQ = OPR_EQ + (8<<8) + (11<<14),
  OPC_U4FQEQ = OPR_EQ + (8<<8) + (15<<14),
  OPC_U4F10EQ = OPR_EQ + (8<<8) + (12<<14),
  OPC_U4F16EQ = OPR_EQ + (8<<8) + (13<<14),
  OPC_U4C4EQ = OPR_EQ + (8<<8) + (17<<14),
  OPC_U4C8EQ = OPR_EQ + (8<<8) + (18<<14),
  OPC_U4CQEQ = OPR_EQ + (8<<8) + (19<<14),
  OPC_U4A4EQ = OPR_EQ + (8<<8) + (22<<14),
  OPC_U4A8EQ = OPR_EQ + (8<<8) + (23<<14),

  OPC_U4C10EQ = OPR_EQ + (8<<8) + (24<<14),
  OPC_U4C16EQ = OPR_EQ + (8<<8) + (25<<14),
  OPC_U4I16EQ = OPR_EQ + (8<<8) + (26<<14),
  OPC_U4U16EQ = OPR_EQ + (8<<8) + (27<<14),

  OPC_U8I4EQ = OPR_EQ + (9<<8) + (4<<14),
  OPC_U8I8EQ = OPR_EQ + (9<<8) + (5<<14),
  OPC_U8U4EQ = OPR_EQ + (9<<8) + (8<<14),
  OPC_U8U8EQ = OPR_EQ + (9<<8) + (9<<14),
  OPC_U8F4EQ = OPR_EQ + (9<<8) + (10<<14),
  OPC_U8F8EQ = OPR_EQ + (9<<8) + (11<<14),
  OPC_U8FQEQ = OPR_EQ + (9<<8) + (15<<14),
  OPC_U8F10EQ = OPR_EQ + (9<<8) + (12<<14),
  OPC_U8F16EQ = OPR_EQ + (9<<8) + (13<<14),
  OPC_U8C4EQ = OPR_EQ + (9<<8) + (17<<14),
  OPC_U8C8EQ = OPR_EQ + (9<<8) + (18<<14),
  OPC_U8CQEQ = OPR_EQ + (9<<8) + (19<<14),
  OPC_U8A4EQ = OPR_EQ + (9<<8) + (22<<14),
  OPC_U8A8EQ = OPR_EQ + (9<<8) + (23<<14),

  OPC_U8C10EQ = OPR_EQ + (9<<8) + (24<<14),
  OPC_U8C16EQ = OPR_EQ + (9<<8) + (25<<14),
  OPC_U8I16EQ = OPR_EQ + (9<<8) + (26<<14),
  OPC_U8U16EQ = OPR_EQ + (9<<8) + (27<<14),

  OPC_EVAL = OPR_EVAL + (20<<8) + (20<<14),
  OPC_EXC_SCOPE_BEGIN = OPR_EXC_SCOPE_BEGIN + (20<<8) + (20<<14),
  OPC_EXC_SCOPE_END = OPR_EXC_SCOPE_END + (20<<8) + (20<<14),
  OPC_FALSEBR = OPR_FALSEBR + (20<<8) + (20<<14),
  OPC_I4F4FLOOR = OPR_FLOOR + (4<<8) + (10<<14),
  OPC_I4F8FLOOR = OPR_FLOOR + (4<<8) + (11<<14),
  OPC_I4FQFLOOR = OPR_FLOOR + (4<<8) + (15<<14),
  OPC_I4F10FLOOR = OPR_FLOOR + (4<<8) + (12<<14),
  OPC_I4F16FLOOR = OPR_FLOOR + (4<<8) + (13<<14),
  OPC_I8F4FLOOR = OPR_FLOOR + (5<<8) + (10<<14),
  OPC_I8F8FLOOR = OPR_FLOOR + (5<<8) + (11<<14),
  OPC_I8FQFLOOR = OPR_FLOOR + (5<<8) + (15<<14),
  OPC_I8F10FLOOR = OPR_FLOOR + (5<<8) + (12<<14),
  OPC_I8F16FLOOR = OPR_FLOOR + (5<<8) + (13<<14),
  OPC_U4F4FLOOR = OPR_FLOOR + (8<<8) + (10<<14),
  OPC_U4F8FLOOR = OPR_FLOOR + (8<<8) + (11<<14),
  OPC_U4FQFLOOR = OPR_FLOOR + (8<<8) + (15<<14),
  OPC_U4F10FLOOR = OPR_FLOOR + (8<<8) + (12<<14),
  OPC_U4F16FLOOR = OPR_FLOOR + (8<<8) + (13<<14),
  OPC_U8F4FLOOR = OPR_FLOOR + (9<<8) + (10<<14),
  OPC_U8F8FLOOR = OPR_FLOOR + (9<<8) + (11<<14),
  OPC_U8FQFLOOR = OPR_FLOOR + (9<<8) + (15<<14),
  OPC_U8F10FLOOR = OPR_FLOOR + (9<<8) + (12<<14),
  OPC_U8F16FLOOR = OPR_FLOOR + (9<<8) + (13<<14),

  OPC_F4F4FLOOR = OPR_FLOOR + (10<<8) + (10<<14),
  OPC_F8F8FLOOR = OPR_FLOOR + (11<<8) + (11<<14),


  OPC_I16F4FLOOR = OPR_FLOOR + (26<<8) + (10<<14),
  OPC_I16F8FLOOR = OPR_FLOOR + (26<<8) + (11<<14),
  OPC_I16FQFLOOR = OPR_FLOOR + (26<<8) + (15<<14),
  OPC_I16F10FLOOR = OPR_FLOOR + (26<<8) + (12<<14),
  OPC_I16F16FLOOR = OPR_FLOOR + (26<<8) + (13<<14),
  OPC_U16F4FLOOR = OPR_FLOOR + (27<<8) + (10<<14),
  OPC_U16F8FLOOR = OPR_FLOOR + (27<<8) + (11<<14),
  OPC_U16FQFLOOR = OPR_FLOOR + (27<<8) + (15<<14),
  OPC_U16F10FLOOR = OPR_FLOOR + (27<<8) + (12<<14),
  OPC_U16F16FLOOR = OPR_FLOOR + (27<<8) + (13<<14),

  OPC_FORWARD_BARRIER = OPR_FORWARD_BARRIER + (20<<8) + (20<<14),
  OPC_FUNC_ENTRY = OPR_FUNC_ENTRY + (20<<8) + (20<<14),
  OPC_BI4GE = OPR_GE + (1<<8) + (4<<14),
  OPC_BI8GE = OPR_GE + (1<<8) + (5<<14),
  OPC_BU4GE = OPR_GE + (1<<8) + (8<<14),
  OPC_BU8GE = OPR_GE + (1<<8) + (9<<14),
  OPC_BF4GE = OPR_GE + (1<<8) + (10<<14),
  OPC_BF8GE = OPR_GE + (1<<8) + (11<<14),
  OPC_BFQGE = OPR_GE + (1<<8) + (15<<14),
  OPC_BF10GE = OPR_GE + (1<<8) + (12<<14),
  OPC_BF16GE = OPR_GE + (1<<8) + (13<<14),
  OPC_BA4GE = OPR_GE + (1<<8) + (22<<14),
  OPC_BA8GE = OPR_GE + (1<<8) + (23<<14),

  OPC_BI16GE = OPR_GE + (1<<8) + (26<<14),
  OPC_BU16GE = OPR_GE + (1<<8) + (27<<14),

  OPC_I4I4GE = OPR_GE + (4<<8) + (4<<14),
  OPC_I4I8GE = OPR_GE + (4<<8) + (5<<14),
  OPC_I4U4GE = OPR_GE + (4<<8) + (8<<14),
  OPC_I4U8GE = OPR_GE + (4<<8) + (9<<14),
  OPC_I4F4GE = OPR_GE + (4<<8) + (10<<14),
  OPC_I4F8GE = OPR_GE + (4<<8) + (11<<14),
  OPC_I4FQGE = OPR_GE + (4<<8) + (15<<14),
  OPC_I4F10GE = OPR_GE + (4<<8) + (12<<14),
  OPC_I4F16GE = OPR_GE + (4<<8) + (13<<14),
  OPC_I4A4GE = OPR_GE + (4<<8) + (22<<14),
  OPC_I4A8GE = OPR_GE + (4<<8) + (23<<14),

  OPC_I4I16GE = OPR_GE + (4<<8) + (26<<14),
  OPC_I4U16GE = OPR_GE + (4<<8) + (27<<14),




  OPC_I8I4GE = OPR_GE + (5<<8) + (4<<14),
  OPC_I8I8GE = OPR_GE + (5<<8) + (5<<14),
  OPC_I8U4GE = OPR_GE + (5<<8) + (8<<14),
  OPC_I8U8GE = OPR_GE + (5<<8) + (9<<14),
  OPC_I8F4GE = OPR_GE + (5<<8) + (10<<14),
  OPC_I8F8GE = OPR_GE + (5<<8) + (11<<14),
  OPC_I8FQGE = OPR_GE + (5<<8) + (15<<14),
  OPC_I8F10GE = OPR_GE + (5<<8) + (12<<14),
  OPC_I8F16GE = OPR_GE + (5<<8) + (13<<14),
  OPC_I8A4GE = OPR_GE + (5<<8) + (22<<14),
  OPC_I8A8GE = OPR_GE + (5<<8) + (23<<14),

  OPC_I8I16GE = OPR_GE + (5<<8) + (26<<14),
  OPC_I8U16GE = OPR_GE + (5<<8) + (27<<14),

  OPC_U4I4GE = OPR_GE + (8<<8) + (4<<14),
  OPC_U4I8GE = OPR_GE + (8<<8) + (5<<14),
  OPC_U4U4GE = OPR_GE + (8<<8) + (8<<14),
  OPC_U4U8GE = OPR_GE + (8<<8) + (9<<14),
  OPC_U4F4GE = OPR_GE + (8<<8) + (10<<14),
  OPC_U4F8GE = OPR_GE + (8<<8) + (11<<14),
  OPC_U4FQGE = OPR_GE + (8<<8) + (15<<14),
  OPC_U4F10GE = OPR_GE + (8<<8) + (12<<14),
  OPC_U4F16GE = OPR_GE + (8<<8) + (13<<14),
  OPC_U4A4GE = OPR_GE + (8<<8) + (22<<14),
  OPC_U4A8GE = OPR_GE + (8<<8) + (23<<14),

  OPC_U4I16GE = OPR_GE + (8<<8) + (26<<14),
  OPC_U4U16GE = OPR_GE + (8<<8) + (27<<14),

  OPC_U8I4GE = OPR_GE + (9<<8) + (4<<14),
  OPC_U8I8GE = OPR_GE + (9<<8) + (5<<14),
  OPC_U8U4GE = OPR_GE + (9<<8) + (8<<14),
  OPC_U8U8GE = OPR_GE + (9<<8) + (9<<14),
  OPC_U8F4GE = OPR_GE + (9<<8) + (10<<14),
  OPC_U8F8GE = OPR_GE + (9<<8) + (11<<14),
  OPC_U8FQGE = OPR_GE + (9<<8) + (15<<14),
  OPC_U8F10GE = OPR_GE + (9<<8) + (12<<14),
  OPC_U8F16GE = OPR_GE + (9<<8) + (13<<14),
  OPC_U8A4GE = OPR_GE + (9<<8) + (22<<14),
  OPC_U8A8GE = OPR_GE + (9<<8) + (23<<14),

  OPC_U8I16GE = OPR_GE + (9<<8) + (26<<14),
  OPC_U8U16GE = OPR_GE + (9<<8) + (27<<14),

  OPC_GOTO = OPR_GOTO + (20<<8) + (20<<14),
  OPC_BI4GT = OPR_GT + (1<<8) + (4<<14),
  OPC_BI8GT = OPR_GT + (1<<8) + (5<<14),
  OPC_BU4GT = OPR_GT + (1<<8) + (8<<14),
  OPC_BU8GT = OPR_GT + (1<<8) + (9<<14),
  OPC_BF4GT = OPR_GT + (1<<8) + (10<<14),
  OPC_BF8GT = OPR_GT + (1<<8) + (11<<14),
  OPC_BFQGT = OPR_GT + (1<<8) + (15<<14),
  OPC_BF10GT = OPR_GT + (1<<8) + (12<<14),
  OPC_BF16GT = OPR_GT + (1<<8) + (13<<14),
  OPC_BA4GT = OPR_GT + (1<<8) + (22<<14),
  OPC_BA8GT = OPR_GT + (1<<8) + (23<<14),

  OPC_BI16GT = OPR_GT + (1<<8) + (26<<14),
  OPC_BU16GT = OPR_GT + (1<<8) + (27<<14),

  OPC_I4I4GT = OPR_GT + (4<<8) + (4<<14),
  OPC_I4I8GT = OPR_GT + (4<<8) + (5<<14),
  OPC_I4U4GT = OPR_GT + (4<<8) + (8<<14),
  OPC_I4U8GT = OPR_GT + (4<<8) + (9<<14),
  OPC_I4F4GT = OPR_GT + (4<<8) + (10<<14),
  OPC_I4F8GT = OPR_GT + (4<<8) + (11<<14),
  OPC_I4FQGT = OPR_GT + (4<<8) + (15<<14),
  OPC_I4F10GT = OPR_GT + (4<<8) + (12<<14),
  OPC_I4F16GT = OPR_GT + (4<<8) + (13<<14),
  OPC_I4A4GT = OPR_GT + (4<<8) + (22<<14),
  OPC_I4A8GT = OPR_GT + (4<<8) + (23<<14),

  OPC_I4I16GT = OPR_GT + (4<<8) + (26<<14),
  OPC_I4U16GT = OPR_GT + (4<<8) + (27<<14),




  OPC_I8I4GT = OPR_GT + (5<<8) + (4<<14),
  OPC_I8I8GT = OPR_GT + (5<<8) + (5<<14),
  OPC_I8U4GT = OPR_GT + (5<<8) + (8<<14),
  OPC_I8U8GT = OPR_GT + (5<<8) + (9<<14),
  OPC_I8F4GT = OPR_GT + (5<<8) + (10<<14),
  OPC_I8F8GT = OPR_GT + (5<<8) + (11<<14),
  OPC_I8FQGT = OPR_GT + (5<<8) + (15<<14),
  OPC_I8F10GT = OPR_GT + (5<<8) + (12<<14),
  OPC_I8F16GT = OPR_GT + (5<<8) + (13<<14),
  OPC_I8A4GT = OPR_GT + (5<<8) + (22<<14),
  OPC_I8A8GT = OPR_GT + (5<<8) + (23<<14),

  OPC_I8I16GT = OPR_GT + (5<<8) + (26<<14),
  OPC_I8U16GT = OPR_GT + (5<<8) + (27<<14),

  OPC_U4I4GT = OPR_GT + (8<<8) + (4<<14),
  OPC_U4I8GT = OPR_GT + (8<<8) + (5<<14),
  OPC_U4U4GT = OPR_GT + (8<<8) + (8<<14),
  OPC_U4U8GT = OPR_GT + (8<<8) + (9<<14),
  OPC_U4F4GT = OPR_GT + (8<<8) + (10<<14),
  OPC_U4F8GT = OPR_GT + (8<<8) + (11<<14),
  OPC_U4FQGT = OPR_GT + (8<<8) + (15<<14),
  OPC_U4F10GT = OPR_GT + (8<<8) + (12<<14),
  OPC_U4F16GT = OPR_GT + (8<<8) + (13<<14),
  OPC_U4A4GT = OPR_GT + (8<<8) + (22<<14),
  OPC_U4A8GT = OPR_GT + (8<<8) + (23<<14),

  OPC_U4I16GT = OPR_GT + (8<<8) + (26<<14),
  OPC_U4U16GT = OPR_GT + (8<<8) + (27<<14),

  OPC_U8I4GT = OPR_GT + (9<<8) + (4<<14),
  OPC_U8I8GT = OPR_GT + (9<<8) + (5<<14),
  OPC_U8U4GT = OPR_GT + (9<<8) + (8<<14),
  OPC_U8U8GT = OPR_GT + (9<<8) + (9<<14),
  OPC_U8F4GT = OPR_GT + (9<<8) + (10<<14),
  OPC_U8F8GT = OPR_GT + (9<<8) + (11<<14),
  OPC_U8FQGT = OPR_GT + (9<<8) + (15<<14),
  OPC_U8F10GT = OPR_GT + (9<<8) + (12<<14),
  OPC_U8F16GT = OPR_GT + (9<<8) + (13<<14),
  OPC_U8A4GT = OPR_GT + (9<<8) + (22<<14),
  OPC_U8A8GT = OPR_GT + (9<<8) + (23<<14),

  OPC_U8I16GT = OPR_GT + (9<<8) + (26<<14),
  OPC_U8U16GT = OPR_GT + (9<<8) + (27<<14),

  OPC_I4HIGHMPY = OPR_HIGHMPY + (4<<8) + (20<<14),
  OPC_I8HIGHMPY = OPR_HIGHMPY + (5<<8) + (20<<14),
  OPC_U4HIGHMPY = OPR_HIGHMPY + (8<<8) + (20<<14),
  OPC_U8HIGHMPY = OPR_HIGHMPY + (9<<8) + (20<<14),

  OPC_I16HIGHMPY = OPR_HIGHMPY + (26<<8) + (20<<14),
  OPC_U16HIGHMPY = OPR_HIGHMPY + (27<<8) + (20<<14),
# 1185 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_I4HIGHPART = OPR_HIGHPART + (4<<8) + (20<<14),
  OPC_I8HIGHPART = OPR_HIGHPART + (5<<8) + (20<<14),
  OPC_U4HIGHPART = OPR_HIGHPART + (8<<8) + (20<<14),
  OPC_U8HIGHPART = OPR_HIGHPART + (9<<8) + (20<<14),

  OPC_I16HIGHPART = OPR_HIGHPART + (26<<8) + (20<<14),
  OPC_U16HIGHPART = OPR_HIGHPART + (27<<8) + (20<<14),

  OPC_I1ICALL = OPR_ICALL + (2<<8) + (20<<14),
  OPC_I2ICALL = OPR_ICALL + (3<<8) + (20<<14),
  OPC_I4I4ICALL = OPR_ICALL + (4<<8) + (4<<14),
  OPC_I4ICALL = OPR_ICALL + (4<<8) + (20<<14),
  OPC_I8I8ICALL = OPR_ICALL + (5<<8) + (5<<14),
  OPC_I8ICALL = OPR_ICALL + (5<<8) + (20<<14),
  OPC_U1ICALL = OPR_ICALL + (6<<8) + (20<<14),
  OPC_U2ICALL = OPR_ICALL + (7<<8) + (20<<14),
  OPC_U4U4ICALL = OPR_ICALL + (8<<8) + (8<<14),
  OPC_U4ICALL = OPR_ICALL + (8<<8) + (20<<14),
  OPC_U8U8ICALL = OPR_ICALL + (9<<8) + (9<<14),
  OPC_U8ICALL = OPR_ICALL + (9<<8) + (20<<14),
  OPC_F4F4ICALL = OPR_ICALL + (10<<8) + (10<<14),
  OPC_F4F8ICALL = OPR_ICALL + (10<<8) + (11<<14),
  OPC_F4ICALL = OPR_ICALL + (10<<8) + (20<<14),
  OPC_F8F4ICALL = OPR_ICALL + (11<<8) + (10<<14),
  OPC_F8F8ICALL = OPR_ICALL + (11<<8) + (11<<14),
  OPC_F8ICALL = OPR_ICALL + (11<<8) + (20<<14),
  OPC_FQICALL = OPR_ICALL + (15<<8) + (20<<14),
  OPC_F10ICALL = OPR_ICALL + (12<<8) + (20<<14),
  OPC_F16ICALL = OPR_ICALL + (13<<8) + (20<<14),
  OPC_C4ICALL = OPR_ICALL + (17<<8) + (20<<14),
  OPC_C8ICALL = OPR_ICALL + (18<<8) + (20<<14),
  OPC_CQICALL = OPR_ICALL + (19<<8) + (20<<14),
  OPC_MICALL = OPR_ICALL + (16<<8) + (20<<14),
  OPC_VICALL = OPR_ICALL + (20<<8) + (20<<14),
  OPC_A4ICALL = OPR_ICALL + (22<<8) + (20<<14),
  OPC_A8ICALL = OPR_ICALL + (23<<8) + (20<<14),

  OPC_C10ICALL = OPR_ICALL + (24<<8) + (20<<14),
  OPC_C16ICALL = OPR_ICALL + (25<<8) + (20<<14),

  OPC_IDNAME = OPR_IDNAME + (20<<8) + (20<<14),
  OPC_IF = OPR_IF + (20<<8) + (20<<14),
  OPC_U4ILDA = OPR_ILDA + (8<<8) + (20<<14),
  OPC_U8ILDA = OPR_ILDA + (9<<8) + (20<<14),
  OPC_A4ILDA = OPR_ILDA + (22<<8) + (20<<14),
  OPC_A8ILDA = OPR_ILDA + (23<<8) + (20<<14),
  OPC_I4I1ILDBITS = OPR_ILDBITS + (4<<8) + (2<<14),
  OPC_I4I2ILDBITS = OPR_ILDBITS + (4<<8) + (3<<14),
  OPC_I4U1ILDBITS = OPR_ILDBITS + (4<<8) + (6<<14),
  OPC_I4U2ILDBITS = OPR_ILDBITS + (4<<8) + (7<<14),
  OPC_I8I1ILDBITS = OPR_ILDBITS + (5<<8) + (2<<14),
  OPC_I8I2ILDBITS = OPR_ILDBITS + (5<<8) + (3<<14),
  OPC_I8U1ILDBITS = OPR_ILDBITS + (5<<8) + (6<<14),
  OPC_I8U2ILDBITS = OPR_ILDBITS + (5<<8) + (7<<14),
  OPC_U4I1ILDBITS = OPR_ILDBITS + (8<<8) + (2<<14),
  OPC_U4I2ILDBITS = OPR_ILDBITS + (8<<8) + (3<<14),
  OPC_U4U1ILDBITS = OPR_ILDBITS + (8<<8) + (6<<14),
  OPC_U4U2ILDBITS = OPR_ILDBITS + (8<<8) + (7<<14),
  OPC_U8I1ILDBITS = OPR_ILDBITS + (9<<8) + (2<<14),
  OPC_U8I2ILDBITS = OPR_ILDBITS + (9<<8) + (3<<14),
  OPC_U8U1ILDBITS = OPR_ILDBITS + (9<<8) + (6<<14),
  OPC_U8U2ILDBITS = OPR_ILDBITS + (9<<8) + (7<<14),

  OPC_I16I1ILDBITS = OPR_ILDBITS + (26<<8) + (2<<14),
  OPC_I16I2ILDBITS = OPR_ILDBITS + (26<<8) + (3<<14),
  OPC_I16U1ILDBITS = OPR_ILDBITS + (26<<8) + (6<<14),
  OPC_I16U2ILDBITS = OPR_ILDBITS + (26<<8) + (7<<14),
  OPC_U16I1ILDBITS = OPR_ILDBITS + (27<<8) + (2<<14),
  OPC_U16I2ILDBITS = OPR_ILDBITS + (27<<8) + (3<<14),
  OPC_U16U1ILDBITS = OPR_ILDBITS + (27<<8) + (6<<14),
  OPC_U16U2ILDBITS = OPR_ILDBITS + (27<<8) + (7<<14),

  OPC_I4I1ILOAD = OPR_ILOAD + (4<<8) + (2<<14),
  OPC_I4I2ILOAD = OPR_ILOAD + (4<<8) + (3<<14),
  OPC_I4I4ILOAD = OPR_ILOAD + (4<<8) + (4<<14),
  OPC_I4I8ILOAD = OPR_ILOAD + (4<<8) + (5<<14),
  OPC_I4BSILOAD = OPR_ILOAD + (4<<8) + (21<<14),
  OPC_I8I1ILOAD = OPR_ILOAD + (5<<8) + (2<<14),
  OPC_I8I2ILOAD = OPR_ILOAD + (5<<8) + (3<<14),
  OPC_I8I4ILOAD = OPR_ILOAD + (5<<8) + (4<<14),
  OPC_I8I8ILOAD = OPR_ILOAD + (5<<8) + (5<<14),
  OPC_I8BSILOAD = OPR_ILOAD + (5<<8) + (21<<14),
  OPC_U4U1ILOAD = OPR_ILOAD + (8<<8) + (6<<14),
  OPC_U4U2ILOAD = OPR_ILOAD + (8<<8) + (7<<14),
  OPC_U4U4ILOAD = OPR_ILOAD + (8<<8) + (8<<14),
  OPC_U4U8ILOAD = OPR_ILOAD + (8<<8) + (9<<14),
  OPC_U4BSILOAD = OPR_ILOAD + (8<<8) + (21<<14),
  OPC_U8U1ILOAD = OPR_ILOAD + (9<<8) + (6<<14),
  OPC_U8U2ILOAD = OPR_ILOAD + (9<<8) + (7<<14),
  OPC_U8U4ILOAD = OPR_ILOAD + (9<<8) + (8<<14),
  OPC_U8U8ILOAD = OPR_ILOAD + (9<<8) + (9<<14),
  OPC_U8BSILOAD = OPR_ILOAD + (9<<8) + (21<<14),
  OPC_F4F4ILOAD = OPR_ILOAD + (10<<8) + (10<<14),
  OPC_F8F8ILOAD = OPR_ILOAD + (11<<8) + (11<<14),
  OPC_FQFQILOAD = OPR_ILOAD + (15<<8) + (15<<14),
  OPC_F10F10ILOAD = OPR_ILOAD + (12<<8) + (12<<14),
  OPC_F16F16ILOAD = OPR_ILOAD + (13<<8) + (13<<14),
# 1292 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_C4C4ILOAD = OPR_ILOAD + (17<<8) + (17<<14),
  OPC_C8C8ILOAD = OPR_ILOAD + (18<<8) + (18<<14),
  OPC_CQCQILOAD = OPR_ILOAD + (19<<8) + (19<<14),
  OPC_MMILOAD = OPR_ILOAD + (16<<8) + (16<<14),
  OPC_A4A4ILOAD = OPR_ILOAD + (22<<8) + (22<<14),
  OPC_A8A8ILOAD = OPR_ILOAD + (23<<8) + (23<<14),

  OPC_C10C10ILOAD = OPR_ILOAD + (24<<8) + (24<<14),
  OPC_C16C16ILOAD = OPR_ILOAD + (25<<8) + (25<<14),

  OPC_F4ILOADX = OPR_ILOADX + (10<<8) + (20<<14),
  OPC_F8ILOADX = OPR_ILOADX + (11<<8) + (20<<14),
  OPC_FQILOADX = OPR_ILOADX + (15<<8) + (20<<14),
  OPC_F10ILOADX = OPR_ILOADX + (12<<8) + (20<<14),
  OPC_F16ILOADX = OPR_ILOADX + (13<<8) + (20<<14),
  OPC_F4SECONDPART = OPR_SECONDPART + (10<<8) + (20<<14),
  OPC_F8SECONDPART = OPR_SECONDPART + (11<<8) + (20<<14),
  OPC_FQSECONDPART = OPR_SECONDPART + (15<<8) + (20<<14),
  OPC_F10SECONDPART = OPR_SECONDPART + (12<<8) + (20<<14),
  OPC_F16SECONDPART = OPR_SECONDPART + (13<<8) + (20<<14),
  OPC_BINTCONST = OPR_INTCONST + (1<<8) + (20<<14),
  OPC_I4INTCONST = OPR_INTCONST + (4<<8) + (20<<14),
  OPC_I8INTCONST = OPR_INTCONST + (5<<8) + (20<<14),
  OPC_U4INTCONST = OPR_INTCONST + (8<<8) + (20<<14),
  OPC_U8INTCONST = OPR_INTCONST + (9<<8) + (20<<14),
  OPC_A4INTCONST = OPR_INTCONST + (22<<8) + (20<<14),
  OPC_A8INTCONST = OPR_INTCONST + (23<<8) + (20<<14),

  OPC_I16INTCONST = OPR_INTCONST + (26<<8) + (20<<14),
  OPC_U16INTCONST = OPR_INTCONST + (27<<8) + (20<<14),

  OPC_I1INTRINSIC_CALL = OPR_INTRINSIC_CALL + (2<<8) + (20<<14),
  OPC_I2INTRINSIC_CALL = OPR_INTRINSIC_CALL + (3<<8) + (20<<14),
  OPC_I4I4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (4<<8) + (4<<14),
  OPC_I4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (4<<8) + (20<<14),
  OPC_I8I8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (5<<8) + (5<<14),
  OPC_I8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (5<<8) + (20<<14),
  OPC_U1INTRINSIC_CALL = OPR_INTRINSIC_CALL + (6<<8) + (20<<14),
  OPC_U2INTRINSIC_CALL = OPR_INTRINSIC_CALL + (7<<8) + (20<<14),
  OPC_U4U4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (8<<8) + (8<<14),
  OPC_U4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (8<<8) + (20<<14),
  OPC_U8U8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (9<<8) + (9<<14),
  OPC_U8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (9<<8) + (20<<14),
  OPC_F4F4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (10<<8) + (10<<14),
  OPC_F4F8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (10<<8) + (11<<14),
  OPC_F4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (10<<8) + (20<<14),
  OPC_F8F4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (11<<8) + (10<<14),
  OPC_F8F8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (11<<8) + (11<<14),
  OPC_F8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (11<<8) + (20<<14),
  OPC_FQINTRINSIC_CALL = OPR_INTRINSIC_CALL + (15<<8) + (20<<14),
  OPC_F10INTRINSIC_CALL = OPR_INTRINSIC_CALL + (12<<8) + (20<<14),
  OPC_F16INTRINSIC_CALL = OPR_INTRINSIC_CALL + (13<<8) + (20<<14),
  OPC_C4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (17<<8) + (20<<14),
  OPC_C8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (18<<8) + (20<<14),
  OPC_CQINTRINSIC_CALL = OPR_INTRINSIC_CALL + (19<<8) + (20<<14),
  OPC_MINTRINSIC_CALL = OPR_INTRINSIC_CALL + (16<<8) + (20<<14),
  OPC_VINTRINSIC_CALL = OPR_INTRINSIC_CALL + (20<<8) + (20<<14),
  OPC_A4INTRINSIC_CALL = OPR_INTRINSIC_CALL + (22<<8) + (20<<14),
  OPC_A8INTRINSIC_CALL = OPR_INTRINSIC_CALL + (23<<8) + (20<<14),

  OPC_C10INTRINSIC_CALL = OPR_INTRINSIC_CALL + (24<<8) + (20<<14),
  OPC_C16INTRINSIC_CALL = OPR_INTRINSIC_CALL + (25<<8) + (20<<14),

  OPC_BINTRINSIC_OP = OPR_INTRINSIC_OP + (1<<8) + (20<<14),
  OPC_I1INTRINSIC_OP = OPR_INTRINSIC_OP + (2<<8) + (20<<14),
  OPC_I2INTRINSIC_OP = OPR_INTRINSIC_OP + (3<<8) + (20<<14),
  OPC_I4INTRINSIC_OP = OPR_INTRINSIC_OP + (4<<8) + (20<<14),
  OPC_I8INTRINSIC_OP = OPR_INTRINSIC_OP + (5<<8) + (20<<14),
  OPC_U1INTRINSIC_OP = OPR_INTRINSIC_OP + (6<<8) + (20<<14),
  OPC_U2INTRINSIC_OP = OPR_INTRINSIC_OP + (7<<8) + (20<<14),
  OPC_U4INTRINSIC_OP = OPR_INTRINSIC_OP + (8<<8) + (20<<14),
  OPC_U8INTRINSIC_OP = OPR_INTRINSIC_OP + (9<<8) + (20<<14),
  OPC_F4INTRINSIC_OP = OPR_INTRINSIC_OP + (10<<8) + (20<<14),
  OPC_F8INTRINSIC_OP = OPR_INTRINSIC_OP + (11<<8) + (20<<14),
  OPC_FQINTRINSIC_OP = OPR_INTRINSIC_OP + (15<<8) + (20<<14),
  OPC_F10INTRINSIC_OP = OPR_INTRINSIC_OP + (12<<8) + (20<<14),
  OPC_F16INTRINSIC_OP = OPR_INTRINSIC_OP + (13<<8) + (20<<14),
  OPC_C4INTRINSIC_OP = OPR_INTRINSIC_OP + (17<<8) + (20<<14),
  OPC_C8INTRINSIC_OP = OPR_INTRINSIC_OP + (18<<8) + (20<<14),
  OPC_CQINTRINSIC_OP = OPR_INTRINSIC_OP + (19<<8) + (20<<14),
  OPC_MINTRINSIC_OP = OPR_INTRINSIC_OP + (16<<8) + (20<<14),
  OPC_A4INTRINSIC_OP = OPR_INTRINSIC_OP + (22<<8) + (20<<14),
  OPC_A8INTRINSIC_OP = OPR_INTRINSIC_OP + (23<<8) + (20<<14),

  OPC_C10INTRINSIC_OP = OPR_INTRINSIC_OP + (24<<8) + (20<<14),
  OPC_C16INTRINSIC_OP = OPR_INTRINSIC_OP + (25<<8) + (20<<14),
  OPC_I16INTRINSIC_OP = OPR_INTRINSIC_OP + (26<<8) + (20<<14),
  OPC_U16INTRINSIC_OP = OPR_INTRINSIC_OP + (27<<8) + (20<<14),

  OPC_IO = OPR_IO + (20<<8) + (20<<14),
  OPC_IO_ITEM = OPR_IO_ITEM + (20<<8) + (20<<14),
  OPC_I1ISTBITS = OPR_ISTBITS + (20<<8) + (2<<14),
  OPC_I2ISTBITS = OPR_ISTBITS + (20<<8) + (3<<14),
  OPC_U1ISTBITS = OPR_ISTBITS + (20<<8) + (6<<14),
  OPC_U2ISTBITS = OPR_ISTBITS + (20<<8) + (7<<14),
  OPC_I1ISTORE = OPR_ISTORE + (20<<8) + (2<<14),
  OPC_I2ISTORE = OPR_ISTORE + (20<<8) + (3<<14),
  OPC_I4ISTORE = OPR_ISTORE + (20<<8) + (4<<14),
  OPC_I8ISTORE = OPR_ISTORE + (20<<8) + (5<<14),
  OPC_U1ISTORE = OPR_ISTORE + (20<<8) + (6<<14),
  OPC_U2ISTORE = OPR_ISTORE + (20<<8) + (7<<14),
  OPC_U4ISTORE = OPR_ISTORE + (20<<8) + (8<<14),
  OPC_U8ISTORE = OPR_ISTORE + (20<<8) + (9<<14),
  OPC_F4ISTORE = OPR_ISTORE + (20<<8) + (10<<14),
  OPC_F8ISTORE = OPR_ISTORE + (20<<8) + (11<<14),
  OPC_FQISTORE = OPR_ISTORE + (20<<8) + (15<<14),
  OPC_F10ISTORE = OPR_ISTORE + (20<<8) + (12<<14),
  OPC_F16ISTORE = OPR_ISTORE + (20<<8) + (13<<14),
# 1410 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_C4ISTORE = OPR_ISTORE + (20<<8) + (17<<14),
  OPC_C8ISTORE = OPR_ISTORE + (20<<8) + (18<<14),
  OPC_CQISTORE = OPR_ISTORE + (20<<8) + (19<<14),
  OPC_MISTORE = OPR_ISTORE + (20<<8) + (16<<14),
  OPC_BSISTORE = OPR_ISTORE + (20<<8) + (21<<14),
  OPC_A4ISTORE = OPR_ISTORE + (20<<8) + (22<<14),
  OPC_A8ISTORE = OPR_ISTORE + (20<<8) + (23<<14),

  OPC_C10ISTORE = OPR_ISTORE + (20<<8) + (24<<14),
  OPC_C16ISTORE = OPR_ISTORE + (20<<8) + (25<<14),
  OPC_I16ISTORE = OPR_ISTORE + (20<<8) + (26<<14),
  OPC_U16ISTORE = OPR_ISTORE + (20<<8) + (27<<14),

  OPC_F4ISTOREX = OPR_ISTOREX + (20<<8) + (10<<14),
  OPC_F8ISTOREX = OPR_ISTOREX + (20<<8) + (11<<14),
  OPC_FQISTOREX = OPR_ISTOREX + (20<<8) + (15<<14),
  OPC_F10ISTOREX = OPR_ISTOREX + (20<<8) + (12<<14),
  OPC_F16ISTOREX = OPR_ISTOREX + (20<<8) + (13<<14),
  OPC_LABEL = OPR_LABEL + (20<<8) + (20<<14),
  OPC_BLAND = OPR_LAND + (1<<8) + (20<<14),
  OPC_I4LAND = OPR_LAND + (4<<8) + (20<<14),
  OPC_U4LDA = OPR_LDA + (8<<8) + (20<<14),
  OPC_U8LDA = OPR_LDA + (9<<8) + (20<<14),
  OPC_A4LDA = OPR_LDA + (22<<8) + (20<<14),
  OPC_A8LDA = OPR_LDA + (23<<8) + (20<<14),
  OPC_I4I1LDBITS = OPR_LDBITS + (4<<8) + (2<<14),
  OPC_I4I2LDBITS = OPR_LDBITS + (4<<8) + (3<<14),
  OPC_I4U1LDBITS = OPR_LDBITS + (4<<8) + (6<<14),
  OPC_I4U2LDBITS = OPR_LDBITS + (4<<8) + (7<<14),
  OPC_I8I1LDBITS = OPR_LDBITS + (5<<8) + (2<<14),
  OPC_I8I2LDBITS = OPR_LDBITS + (5<<8) + (3<<14),
  OPC_I8U1LDBITS = OPR_LDBITS + (5<<8) + (6<<14),
  OPC_I8U2LDBITS = OPR_LDBITS + (5<<8) + (7<<14),
  OPC_U4I1LDBITS = OPR_LDBITS + (8<<8) + (2<<14),
  OPC_U4I2LDBITS = OPR_LDBITS + (8<<8) + (3<<14),
  OPC_U4U1LDBITS = OPR_LDBITS + (8<<8) + (6<<14),
  OPC_U4U2LDBITS = OPR_LDBITS + (8<<8) + (7<<14),
  OPC_U8I1LDBITS = OPR_LDBITS + (9<<8) + (2<<14),
  OPC_U8I2LDBITS = OPR_LDBITS + (9<<8) + (3<<14),
  OPC_U8U1LDBITS = OPR_LDBITS + (9<<8) + (6<<14),
  OPC_U8U2LDBITS = OPR_LDBITS + (9<<8) + (7<<14),

  OPC_I16I1LDBITS = OPR_LDBITS + (26<<8) + (2<<14),
  OPC_I16I2LDBITS = OPR_LDBITS + (26<<8) + (3<<14),
  OPC_I16U1LDBITS = OPR_LDBITS + (26<<8) + (6<<14),
  OPC_I16U2LDBITS = OPR_LDBITS + (26<<8) + (7<<14),
  OPC_U16I1LDBITS = OPR_LDBITS + (27<<8) + (2<<14),
  OPC_U16I2LDBITS = OPR_LDBITS + (27<<8) + (3<<14),
  OPC_U16U1LDBITS = OPR_LDBITS + (27<<8) + (6<<14),
  OPC_U16U2LDBITS = OPR_LDBITS + (27<<8) + (7<<14),

  OPC_I4I1LDID = OPR_LDID + (4<<8) + (2<<14),
  OPC_I4I2LDID = OPR_LDID + (4<<8) + (3<<14),
  OPC_I4I4LDID = OPR_LDID + (4<<8) + (4<<14),
  OPC_I4I8LDID = OPR_LDID + (4<<8) + (5<<14),
  OPC_I4BSLDID = OPR_LDID + (4<<8) + (21<<14),
  OPC_I8I1LDID = OPR_LDID + (5<<8) + (2<<14),
  OPC_I8I2LDID = OPR_LDID + (5<<8) + (3<<14),
  OPC_I8I4LDID = OPR_LDID + (5<<8) + (4<<14),
  OPC_I8I8LDID = OPR_LDID + (5<<8) + (5<<14),
  OPC_I8BSLDID = OPR_LDID + (5<<8) + (21<<14),
  OPC_U4U1LDID = OPR_LDID + (8<<8) + (6<<14),
  OPC_U4U2LDID = OPR_LDID + (8<<8) + (7<<14),
  OPC_U4U4LDID = OPR_LDID + (8<<8) + (8<<14),
  OPC_U4U8LDID = OPR_LDID + (8<<8) + (9<<14),
  OPC_U4BSLDID = OPR_LDID + (8<<8) + (21<<14),
  OPC_U8U1LDID = OPR_LDID + (9<<8) + (6<<14),
  OPC_U8U2LDID = OPR_LDID + (9<<8) + (7<<14),
  OPC_U8U4LDID = OPR_LDID + (9<<8) + (8<<14),
  OPC_U8U8LDID = OPR_LDID + (9<<8) + (9<<14),
  OPC_U8BSLDID = OPR_LDID + (9<<8) + (21<<14),
  OPC_F4F4LDID = OPR_LDID + (10<<8) + (10<<14),
  OPC_F8F8LDID = OPR_LDID + (11<<8) + (11<<14),
  OPC_FQFQLDID = OPR_LDID + (15<<8) + (15<<14),
  OPC_F10F10LDID = OPR_LDID + (12<<8) + (12<<14),
  OPC_F16F16LDID = OPR_LDID + (13<<8) + (13<<14),
  OPC_C4C4LDID = OPR_LDID + (17<<8) + (17<<14),
  OPC_C8C8LDID = OPR_LDID + (18<<8) + (18<<14),
  OPC_CQCQLDID = OPR_LDID + (19<<8) + (19<<14),
  OPC_MMLDID = OPR_LDID + (16<<8) + (16<<14),
  OPC_A4A4LDID = OPR_LDID + (22<<8) + (22<<14),
  OPC_A8A8LDID = OPR_LDID + (23<<8) + (23<<14),

  OPC_C10C10LDID = OPR_LDID + (24<<8) + (24<<14),
  OPC_C16C16LDID = OPR_LDID + (25<<8) + (25<<14),
# 1513 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_BI4LE = OPR_LE + (1<<8) + (4<<14),
  OPC_BI8LE = OPR_LE + (1<<8) + (5<<14),
  OPC_BU4LE = OPR_LE + (1<<8) + (8<<14),
  OPC_BU8LE = OPR_LE + (1<<8) + (9<<14),
  OPC_BF4LE = OPR_LE + (1<<8) + (10<<14),
  OPC_BF8LE = OPR_LE + (1<<8) + (11<<14),
  OPC_BFQLE = OPR_LE + (1<<8) + (15<<14),
  OPC_BF10LE = OPR_LE + (1<<8) + (12<<14),
  OPC_BF16LE = OPR_LE + (1<<8) + (13<<14),
  OPC_BA4LE = OPR_LE + (1<<8) + (22<<14),
  OPC_BA8LE = OPR_LE + (1<<8) + (23<<14),

  OPC_BI16LE = OPR_LE + (1<<8) + (26<<14),
  OPC_BU16LE = OPR_LE + (1<<8) + (27<<14),

  OPC_I4I4LE = OPR_LE + (4<<8) + (4<<14),
  OPC_I4I8LE = OPR_LE + (4<<8) + (5<<14),
  OPC_I4U4LE = OPR_LE + (4<<8) + (8<<14),
  OPC_I4U8LE = OPR_LE + (4<<8) + (9<<14),
  OPC_I4F4LE = OPR_LE + (4<<8) + (10<<14),
  OPC_I4F8LE = OPR_LE + (4<<8) + (11<<14),
  OPC_I4FQLE = OPR_LE + (4<<8) + (15<<14),
  OPC_I4F10LE = OPR_LE + (4<<8) + (12<<14),
  OPC_I4F16LE = OPR_LE + (4<<8) + (13<<14),
  OPC_I4A4LE = OPR_LE + (4<<8) + (22<<14),
  OPC_I4A8LE = OPR_LE + (4<<8) + (23<<14),

  OPC_I4I16LE = OPR_LE + (4<<8) + (26<<14),
  OPC_I4U16LE = OPR_LE + (4<<8) + (27<<14),




  OPC_I8I4LE = OPR_LE + (5<<8) + (4<<14),
  OPC_I8I8LE = OPR_LE + (5<<8) + (5<<14),
  OPC_I8U4LE = OPR_LE + (5<<8) + (8<<14),
  OPC_I8U8LE = OPR_LE + (5<<8) + (9<<14),
  OPC_I8F4LE = OPR_LE + (5<<8) + (10<<14),
  OPC_I8F8LE = OPR_LE + (5<<8) + (11<<14),
  OPC_I8FQLE = OPR_LE + (5<<8) + (15<<14),
  OPC_I8F10LE = OPR_LE + (5<<8) + (12<<14),
  OPC_I8F16LE = OPR_LE + (5<<8) + (13<<14),
  OPC_I8A4LE = OPR_LE + (5<<8) + (22<<14),
  OPC_I8A8LE = OPR_LE + (5<<8) + (23<<14),

  OPC_I8I16LE = OPR_LE + (5<<8) + (26<<14),
  OPC_I8U16LE = OPR_LE + (5<<8) + (27<<14),

  OPC_U4I4LE = OPR_LE + (8<<8) + (4<<14),
  OPC_U4I8LE = OPR_LE + (8<<8) + (5<<14),
  OPC_U4U4LE = OPR_LE + (8<<8) + (8<<14),
  OPC_U4U8LE = OPR_LE + (8<<8) + (9<<14),
  OPC_U4F4LE = OPR_LE + (8<<8) + (10<<14),
  OPC_U4F8LE = OPR_LE + (8<<8) + (11<<14),
  OPC_U4FQLE = OPR_LE + (8<<8) + (15<<14),
  OPC_U4F10LE = OPR_LE + (8<<8) + (12<<14),
  OPC_U4F16LE = OPR_LE + (8<<8) + (13<<14),
  OPC_U4A4LE = OPR_LE + (8<<8) + (22<<14),
  OPC_U4A8LE = OPR_LE + (8<<8) + (23<<14),

  OPC_U4I16LE = OPR_LE + (8<<8) + (26<<14),
  OPC_U4U16LE = OPR_LE + (8<<8) + (27<<14),

  OPC_U8I4LE = OPR_LE + (9<<8) + (4<<14),
  OPC_U8I8LE = OPR_LE + (9<<8) + (5<<14),
  OPC_U8U4LE = OPR_LE + (9<<8) + (8<<14),
  OPC_U8U8LE = OPR_LE + (9<<8) + (9<<14),
  OPC_U8F4LE = OPR_LE + (9<<8) + (10<<14),
  OPC_U8F8LE = OPR_LE + (9<<8) + (11<<14),
  OPC_U8FQLE = OPR_LE + (9<<8) + (15<<14),
  OPC_U8F10LE = OPR_LE + (9<<8) + (12<<14),
  OPC_U8F16LE = OPR_LE + (9<<8) + (13<<14),
  OPC_U8A4LE = OPR_LE + (9<<8) + (22<<14),
  OPC_U8A8LE = OPR_LE + (9<<8) + (23<<14),

  OPC_U8I16LE = OPR_LE + (9<<8) + (26<<14),
  OPC_U8U16LE = OPR_LE + (9<<8) + (27<<14),

  OPC_BLIOR = OPR_LIOR + (1<<8) + (20<<14),
  OPC_I4LIOR = OPR_LIOR + (4<<8) + (20<<14),
  OPC_BLNOT = OPR_LNOT + (1<<8) + (20<<14),
  OPC_I4LNOT = OPR_LNOT + (4<<8) + (20<<14),
  OPC_LOOP_INFO = OPR_LOOP_INFO + (20<<8) + (20<<14),
  OPC_I4LOWPART = OPR_LOWPART + (4<<8) + (20<<14),
  OPC_I8LOWPART = OPR_LOWPART + (5<<8) + (20<<14),
  OPC_U4LOWPART = OPR_LOWPART + (8<<8) + (20<<14),
  OPC_U8LOWPART = OPR_LOWPART + (9<<8) + (20<<14),

  OPC_I16LOWPART = OPR_LOWPART + (26<<8) + (20<<14),
  OPC_U16LOWPART = OPR_LOWPART + (27<<8) + (20<<14),

  OPC_I4LSHR = OPR_LSHR + (4<<8) + (20<<14),
  OPC_I8LSHR = OPR_LSHR + (5<<8) + (20<<14),
  OPC_U4LSHR = OPR_LSHR + (8<<8) + (20<<14),
  OPC_U8LSHR = OPR_LSHR + (9<<8) + (20<<14),

  OPC_I16LSHR = OPR_LSHR + (26<<8) + (20<<14),
  OPC_U16LSHR = OPR_LSHR + (27<<8) + (20<<14),

  OPC_BI4LT = OPR_LT + (1<<8) + (4<<14),
  OPC_BI8LT = OPR_LT + (1<<8) + (5<<14),
  OPC_BU4LT = OPR_LT + (1<<8) + (8<<14),
  OPC_BU8LT = OPR_LT + (1<<8) + (9<<14),
  OPC_BF4LT = OPR_LT + (1<<8) + (10<<14),
  OPC_BF8LT = OPR_LT + (1<<8) + (11<<14),
  OPC_BFQLT = OPR_LT + (1<<8) + (15<<14),
  OPC_BF10LT = OPR_LT + (1<<8) + (12<<14),
  OPC_BF16LT = OPR_LT + (1<<8) + (13<<14),
  OPC_BA4LT = OPR_LT + (1<<8) + (22<<14),
  OPC_BA8LT = OPR_LT + (1<<8) + (23<<14),

  OPC_BI16LT = OPR_LT + (1<<8) + (26<<14),
  OPC_BU16LT = OPR_LT + (1<<8) + (27<<14),

  OPC_I4I4LT = OPR_LT + (4<<8) + (4<<14),
  OPC_I4I8LT = OPR_LT + (4<<8) + (5<<14),
  OPC_I4U4LT = OPR_LT + (4<<8) + (8<<14),
  OPC_I4U8LT = OPR_LT + (4<<8) + (9<<14),
  OPC_I4F4LT = OPR_LT + (4<<8) + (10<<14),
  OPC_I4F8LT = OPR_LT + (4<<8) + (11<<14),
  OPC_I4FQLT = OPR_LT + (4<<8) + (15<<14),
  OPC_I4F10LT = OPR_LT + (4<<8) + (12<<14),
  OPC_I4F16LT = OPR_LT + (4<<8) + (13<<14),
  OPC_I4A4LT = OPR_LT + (4<<8) + (22<<14),
  OPC_I4A8LT = OPR_LT + (4<<8) + (23<<14),

  OPC_I4I16LT = OPR_LT + (4<<8) + (26<<14),
  OPC_I4U16LT = OPR_LT + (4<<8) + (27<<14),




  OPC_I8I4LT = OPR_LT + (5<<8) + (4<<14),
  OPC_I8I8LT = OPR_LT + (5<<8) + (5<<14),
  OPC_I8U4LT = OPR_LT + (5<<8) + (8<<14),
  OPC_I8U8LT = OPR_LT + (5<<8) + (9<<14),
  OPC_I8F4LT = OPR_LT + (5<<8) + (10<<14),
  OPC_I8F8LT = OPR_LT + (5<<8) + (11<<14),
  OPC_I8FQLT = OPR_LT + (5<<8) + (15<<14),
  OPC_I8F10LT = OPR_LT + (5<<8) + (12<<14),
  OPC_I8F16LT = OPR_LT + (5<<8) + (13<<14),
  OPC_I8A4LT = OPR_LT + (5<<8) + (22<<14),
  OPC_I8A8LT = OPR_LT + (5<<8) + (23<<14),

  OPC_I8I16LT = OPR_LT + (5<<8) + (26<<14),
  OPC_I8U16LT = OPR_LT + (5<<8) + (27<<14),

  OPC_U4I4LT = OPR_LT + (8<<8) + (4<<14),
  OPC_U4I8LT = OPR_LT + (8<<8) + (5<<14),
  OPC_U4U4LT = OPR_LT + (8<<8) + (8<<14),
  OPC_U4U8LT = OPR_LT + (8<<8) + (9<<14),
  OPC_U4F4LT = OPR_LT + (8<<8) + (10<<14),
  OPC_U4F8LT = OPR_LT + (8<<8) + (11<<14),
  OPC_U4FQLT = OPR_LT + (8<<8) + (15<<14),
  OPC_U4F10LT = OPR_LT + (8<<8) + (12<<14),
  OPC_U4F16LT = OPR_LT + (8<<8) + (13<<14),
  OPC_U4A4LT = OPR_LT + (8<<8) + (22<<14),
  OPC_U4A8LT = OPR_LT + (8<<8) + (23<<14),

  OPC_U4I16LT = OPR_LT + (8<<8) + (26<<14),
  OPC_U4U16LT = OPR_LT + (8<<8) + (27<<14),

  OPC_U8I4LT = OPR_LT + (9<<8) + (4<<14),
  OPC_U8I8LT = OPR_LT + (9<<8) + (5<<14),
  OPC_U8U4LT = OPR_LT + (9<<8) + (8<<14),
  OPC_U8U8LT = OPR_LT + (9<<8) + (9<<14),
  OPC_U8F4LT = OPR_LT + (9<<8) + (10<<14),
  OPC_U8F8LT = OPR_LT + (9<<8) + (11<<14),
  OPC_U8FQLT = OPR_LT + (9<<8) + (15<<14),
  OPC_U8F10LT = OPR_LT + (9<<8) + (12<<14),
  OPC_U8F16LT = OPR_LT + (9<<8) + (13<<14),
  OPC_U8A4LT = OPR_LT + (9<<8) + (22<<14),
  OPC_U8A8LT = OPR_LT + (9<<8) + (23<<14),

  OPC_U8I16LT = OPR_LT + (9<<8) + (26<<14),
  OPC_U8U16LT = OPR_LT + (9<<8) + (27<<14),

  OPC_F4MADD = OPR_MADD + (10<<8) + (20<<14),
  OPC_F8MADD = OPR_MADD + (11<<8) + (20<<14),
  OPC_FQMADD = OPR_MADD + (15<<8) + (20<<14),
  OPC_F10MADD = OPR_MADD + (12<<8) + (20<<14),
  OPC_F16MADD = OPR_MADD + (13<<8) + (20<<14),
  OPC_I4MAX = OPR_MAX + (4<<8) + (20<<14),
  OPC_I8MAX = OPR_MAX + (5<<8) + (20<<14),
  OPC_U4MAX = OPR_MAX + (8<<8) + (20<<14),
  OPC_U8MAX = OPR_MAX + (9<<8) + (20<<14),
  OPC_F4MAX = OPR_MAX + (10<<8) + (20<<14),
  OPC_F8MAX = OPR_MAX + (11<<8) + (20<<14),
  OPC_FQMAX = OPR_MAX + (15<<8) + (20<<14),
  OPC_F10MAX = OPR_MAX + (12<<8) + (20<<14),
  OPC_F16MAX = OPR_MAX + (13<<8) + (20<<14),
  OPC_A4MAX = OPR_MAX + (22<<8) + (20<<14),
  OPC_A8MAX = OPR_MAX + (23<<8) + (20<<14),

  OPC_I16MAX = OPR_MAX + (26<<8) + (20<<14),
  OPC_U16MAX = OPR_MAX + (27<<8) + (20<<14),







  OPC_I4MAXPART = OPR_MAXPART + (4<<8) + (20<<14),
  OPC_I8MAXPART = OPR_MAXPART + (5<<8) + (20<<14),
  OPC_U4MAXPART = OPR_MAXPART + (8<<8) + (20<<14),
  OPC_U8MAXPART = OPR_MAXPART + (9<<8) + (20<<14),
  OPC_F4MAXPART = OPR_MAXPART + (10<<8) + (20<<14),
  OPC_F8MAXPART = OPR_MAXPART + (11<<8) + (20<<14),
  OPC_FQMAXPART = OPR_MAXPART + (15<<8) + (20<<14),
  OPC_F10MAXPART = OPR_MAXPART + (12<<8) + (20<<14),
  OPC_F16MAXPART = OPR_MAXPART + (13<<8) + (20<<14),

  OPC_I16MAXPART = OPR_MAXPART + (26<<8) + (20<<14),
  OPC_U16MAXPART = OPR_MAXPART + (27<<8) + (20<<14),

  OPC_I4MIN = OPR_MIN + (4<<8) + (20<<14),
  OPC_I8MIN = OPR_MIN + (5<<8) + (20<<14),
  OPC_U4MIN = OPR_MIN + (8<<8) + (20<<14),
  OPC_U8MIN = OPR_MIN + (9<<8) + (20<<14),
  OPC_F4MIN = OPR_MIN + (10<<8) + (20<<14),
  OPC_F8MIN = OPR_MIN + (11<<8) + (20<<14),
  OPC_FQMIN = OPR_MIN + (15<<8) + (20<<14),
  OPC_F10MIN = OPR_MIN + (12<<8) + (20<<14),
  OPC_F16MIN = OPR_MIN + (13<<8) + (20<<14),
  OPC_A4MIN = OPR_MIN + (22<<8) + (20<<14),
  OPC_A8MIN = OPR_MIN + (23<<8) + (20<<14),

  OPC_I16MIN = OPR_MIN + (26<<8) + (20<<14),
  OPC_U16MIN = OPR_MIN + (27<<8) + (20<<14),







  OPC_I4MINMAX = OPR_MINMAX + (4<<8) + (20<<14),
  OPC_I8MINMAX = OPR_MINMAX + (5<<8) + (20<<14),
  OPC_U4MINMAX = OPR_MINMAX + (8<<8) + (20<<14),
  OPC_U8MINMAX = OPR_MINMAX + (9<<8) + (20<<14),
  OPC_F4MINMAX = OPR_MINMAX + (10<<8) + (20<<14),
  OPC_F8MINMAX = OPR_MINMAX + (11<<8) + (20<<14),
  OPC_FQMINMAX = OPR_MINMAX + (15<<8) + (20<<14),
  OPC_F10MINMAX = OPR_MINMAX + (12<<8) + (20<<14),
  OPC_F16MINMAX = OPR_MINMAX + (13<<8) + (20<<14),
  OPC_A4MINMAX = OPR_MINMAX + (22<<8) + (20<<14),
  OPC_A8MINMAX = OPR_MINMAX + (23<<8) + (20<<14),

  OPC_I16MINMAX = OPR_MINMAX + (26<<8) + (20<<14),
  OPC_U16MINMAX = OPR_MINMAX + (27<<8) + (20<<14),







  OPC_I4MINPART = OPR_MINPART + (4<<8) + (20<<14),
  OPC_I8MINPART = OPR_MINPART + (5<<8) + (20<<14),
  OPC_U4MINPART = OPR_MINPART + (8<<8) + (20<<14),
  OPC_U8MINPART = OPR_MINPART + (9<<8) + (20<<14),
  OPC_F4MINPART = OPR_MINPART + (10<<8) + (20<<14),
  OPC_F8MINPART = OPR_MINPART + (11<<8) + (20<<14),
  OPC_FQMINPART = OPR_MINPART + (15<<8) + (20<<14),
  OPC_F10MINPART = OPR_MINPART + (12<<8) + (20<<14),
  OPC_F16MINPART = OPR_MINPART + (13<<8) + (20<<14),

  OPC_I16MINPART = OPR_MINPART + (26<<8) + (20<<14),
  OPC_U16MINPART = OPR_MINPART + (27<<8) + (20<<14),

  OPC_MLOAD = OPR_MLOAD + (16<<8) + (20<<14),
  OPC_I4MOD = OPR_MOD + (4<<8) + (20<<14),
  OPC_I8MOD = OPR_MOD + (5<<8) + (20<<14),
  OPC_U4MOD = OPR_MOD + (8<<8) + (20<<14),
  OPC_U8MOD = OPR_MOD + (9<<8) + (20<<14),

  OPC_I16MOD = OPR_MOD + (26<<8) + (20<<14),
  OPC_U16MOD = OPR_MOD + (27<<8) + (20<<14),

  OPC_I4MPY = OPR_MPY + (4<<8) + (20<<14),
  OPC_I8MPY = OPR_MPY + (5<<8) + (20<<14),
  OPC_U4MPY = OPR_MPY + (8<<8) + (20<<14),
  OPC_U8MPY = OPR_MPY + (9<<8) + (20<<14),
  OPC_F4MPY = OPR_MPY + (10<<8) + (20<<14),
  OPC_F8MPY = OPR_MPY + (11<<8) + (20<<14),
  OPC_FQMPY = OPR_MPY + (15<<8) + (20<<14),
  OPC_F10MPY = OPR_MPY + (12<<8) + (20<<14),
  OPC_F16MPY = OPR_MPY + (13<<8) + (20<<14),
  OPC_C4MPY = OPR_MPY + (17<<8) + (20<<14),
  OPC_C8MPY = OPR_MPY + (18<<8) + (20<<14),
  OPC_CQMPY = OPR_MPY + (19<<8) + (20<<14),

  OPC_C10MPY = OPR_MPY + (24<<8) + (20<<14),
  OPC_C16MPY = OPR_MPY + (25<<8) + (20<<14),
  OPC_I16MPY = OPR_MPY + (26<<8) + (20<<14),
  OPC_U16MPY = OPR_MPY + (27<<8) + (20<<14),
# 1824 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_MSTORE = OPR_MSTORE + (20<<8) + (20<<14),
  OPC_F4MSUB = OPR_MSUB + (10<<8) + (20<<14),
  OPC_F8MSUB = OPR_MSUB + (11<<8) + (20<<14),
  OPC_FQMSUB = OPR_MSUB + (15<<8) + (20<<14),
  OPC_F10MSUB = OPR_MSUB + (12<<8) + (20<<14),
  OPC_F16MSUB = OPR_MSUB + (13<<8) + (20<<14),
  OPC_BI4NE = OPR_NE + (1<<8) + (4<<14),
  OPC_BI8NE = OPR_NE + (1<<8) + (5<<14),
  OPC_BU4NE = OPR_NE + (1<<8) + (8<<14),
  OPC_BU8NE = OPR_NE + (1<<8) + (9<<14),
  OPC_BF4NE = OPR_NE + (1<<8) + (10<<14),
  OPC_BF8NE = OPR_NE + (1<<8) + (11<<14),
  OPC_BFQNE = OPR_NE + (1<<8) + (15<<14),
  OPC_BF10NE = OPR_NE + (1<<8) + (12<<14),
  OPC_BF16NE = OPR_NE + (1<<8) + (13<<14),
  OPC_BC4NE = OPR_NE + (1<<8) + (17<<14),
  OPC_BC8NE = OPR_NE + (1<<8) + (18<<14),
  OPC_BCQNE = OPR_NE + (1<<8) + (19<<14),
  OPC_BA4NE = OPR_NE + (1<<8) + (22<<14),
  OPC_BA8NE = OPR_NE + (1<<8) + (23<<14),

  OPC_BC10NE = OPR_NE + (1<<8) + (24<<14),
  OPC_BC16NE = OPR_NE + (1<<8) + (25<<14),
  OPC_BI16NE = OPR_NE + (1<<8) + (26<<14),
  OPC_BU16NE = OPR_NE + (1<<8) + (27<<14),

  OPC_BBNE = OPR_NE + (1<<8) + (1<<14),
  OPC_I4I4NE = OPR_NE + (4<<8) + (4<<14),
  OPC_I4I8NE = OPR_NE + (4<<8) + (5<<14),
  OPC_I4U4NE = OPR_NE + (4<<8) + (8<<14),
  OPC_I4U8NE = OPR_NE + (4<<8) + (9<<14),
  OPC_I4F4NE = OPR_NE + (4<<8) + (10<<14),
  OPC_I4F8NE = OPR_NE + (4<<8) + (11<<14),
  OPC_I4FQNE = OPR_NE + (4<<8) + (15<<14),
  OPC_I4F10NE = OPR_NE + (4<<8) + (12<<14),
  OPC_I4F16NE = OPR_NE + (4<<8) + (13<<14),
  OPC_I4C4NE = OPR_NE + (4<<8) + (17<<14),
  OPC_I4C8NE = OPR_NE + (4<<8) + (18<<14),
  OPC_I4CQNE = OPR_NE + (4<<8) + (19<<14),
  OPC_I4A4NE = OPR_NE + (4<<8) + (22<<14),
  OPC_I4A8NE = OPR_NE + (4<<8) + (23<<14),

  OPC_I4C10NE = OPR_NE + (4<<8) + (24<<14),
  OPC_I4C16NE = OPR_NE + (4<<8) + (25<<14),
  OPC_I4I16NE = OPR_NE + (4<<8) + (26<<14),
  OPC_I4U16NE = OPR_NE + (4<<8) + (27<<14),




  OPC_I8I4NE = OPR_NE + (5<<8) + (4<<14),
  OPC_I8I8NE = OPR_NE + (5<<8) + (5<<14),
  OPC_I8U4NE = OPR_NE + (5<<8) + (8<<14),
  OPC_I8U8NE = OPR_NE + (5<<8) + (9<<14),
  OPC_I8F4NE = OPR_NE + (5<<8) + (10<<14),
  OPC_I8F8NE = OPR_NE + (5<<8) + (11<<14),
  OPC_I8FQNE = OPR_NE + (5<<8) + (15<<14),
  OPC_I8F10NE = OPR_NE + (5<<8) + (12<<14),
  OPC_I8F16NE = OPR_NE + (5<<8) + (13<<14),
  OPC_I8C4NE = OPR_NE + (5<<8) + (17<<14),
  OPC_I8C8NE = OPR_NE + (5<<8) + (18<<14),
  OPC_I8CQNE = OPR_NE + (5<<8) + (19<<14),
  OPC_I8A4NE = OPR_NE + (5<<8) + (22<<14),
  OPC_I8A8NE = OPR_NE + (5<<8) + (23<<14),

  OPC_I8C10NE = OPR_NE + (5<<8) + (24<<14),
  OPC_I8C16NE = OPR_NE + (5<<8) + (25<<14),
  OPC_I8I16NE = OPR_NE + (5<<8) + (26<<14),
  OPC_I8U16NE = OPR_NE + (5<<8) + (27<<14),

  OPC_U4I4NE = OPR_NE + (8<<8) + (4<<14),
  OPC_U4I8NE = OPR_NE + (8<<8) + (5<<14),
  OPC_U4U4NE = OPR_NE + (8<<8) + (8<<14),
  OPC_U4U8NE = OPR_NE + (8<<8) + (9<<14),
  OPC_U4F4NE = OPR_NE + (8<<8) + (10<<14),
  OPC_U4F8NE = OPR_NE + (8<<8) + (11<<14),
  OPC_U4FQNE = OPR_NE + (8<<8) + (15<<14),
  OPC_U4F10NE = OPR_NE + (8<<8) + (12<<14),
  OPC_U4F16NE = OPR_NE + (8<<8) + (13<<14),
  OPC_U4C4NE = OPR_NE + (8<<8) + (17<<14),
  OPC_U4C8NE = OPR_NE + (8<<8) + (18<<14),
  OPC_U4CQNE = OPR_NE + (8<<8) + (19<<14),
  OPC_U4A4NE = OPR_NE + (8<<8) + (22<<14),
  OPC_U4A8NE = OPR_NE + (8<<8) + (23<<14),

  OPC_U4C10NE = OPR_NE + (8<<8) + (24<<14),
  OPC_U4C16NE = OPR_NE + (8<<8) + (25<<14),
  OPC_U4I16NE = OPR_NE + (8<<8) + (26<<14),
  OPC_U4U16NE = OPR_NE + (8<<8) + (27<<14),

  OPC_U8I4NE = OPR_NE + (9<<8) + (4<<14),
  OPC_U8I8NE = OPR_NE + (9<<8) + (5<<14),
  OPC_U8U4NE = OPR_NE + (9<<8) + (8<<14),
  OPC_U8U8NE = OPR_NE + (9<<8) + (9<<14),
  OPC_U8F4NE = OPR_NE + (9<<8) + (10<<14),
  OPC_U8F8NE = OPR_NE + (9<<8) + (11<<14),
  OPC_U8FQNE = OPR_NE + (9<<8) + (15<<14),
  OPC_U8F10NE = OPR_NE + (9<<8) + (12<<14),
  OPC_U8F16NE = OPR_NE + (9<<8) + (13<<14),
  OPC_U8C4NE = OPR_NE + (9<<8) + (17<<14),
  OPC_U8C8NE = OPR_NE + (9<<8) + (18<<14),
  OPC_U8CQNE = OPR_NE + (9<<8) + (19<<14),
  OPC_U8A4NE = OPR_NE + (9<<8) + (22<<14),
  OPC_U8A8NE = OPR_NE + (9<<8) + (23<<14),

  OPC_U8C10NE = OPR_NE + (9<<8) + (24<<14),
  OPC_U8C16NE = OPR_NE + (9<<8) + (25<<14),
  OPC_U8I16NE = OPR_NE + (9<<8) + (26<<14),
  OPC_U8U16NE = OPR_NE + (9<<8) + (27<<14),

  OPC_I4NEG = OPR_NEG + (4<<8) + (20<<14),
  OPC_I8NEG = OPR_NEG + (5<<8) + (20<<14),
  OPC_U4NEG = OPR_NEG + (8<<8) + (20<<14),
  OPC_U8NEG = OPR_NEG + (9<<8) + (20<<14),
  OPC_F4NEG = OPR_NEG + (10<<8) + (20<<14),
  OPC_F8NEG = OPR_NEG + (11<<8) + (20<<14),
  OPC_FQNEG = OPR_NEG + (15<<8) + (20<<14),
  OPC_F10NEG = OPR_NEG + (12<<8) + (20<<14),
  OPC_F16NEG = OPR_NEG + (13<<8) + (20<<14),
  OPC_C4NEG = OPR_NEG + (17<<8) + (20<<14),
  OPC_C8NEG = OPR_NEG + (18<<8) + (20<<14),
  OPC_CQNEG = OPR_NEG + (19<<8) + (20<<14),

  OPC_C10NEG = OPR_NEG + (24<<8) + (20<<14),
  OPC_C16NEG = OPR_NEG + (25<<8) + (20<<14),
  OPC_I16NEG = OPR_NEG + (26<<8) + (20<<14),
  OPC_U16NEG = OPR_NEG + (27<<8) + (20<<14),
# 1959 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_F4NMADD = OPR_NMADD + (10<<8) + (20<<14),
  OPC_F8NMADD = OPR_NMADD + (11<<8) + (20<<14),
  OPC_FQNMADD = OPR_NMADD + (15<<8) + (20<<14),
  OPC_F10NMADD = OPR_NMADD + (12<<8) + (20<<14),
  OPC_F16NMADD = OPR_NMADD + (13<<8) + (20<<14),
  OPC_F4NMSUB = OPR_NMSUB + (10<<8) + (20<<14),
  OPC_F8NMSUB = OPR_NMSUB + (11<<8) + (20<<14),
  OPC_FQNMSUB = OPR_NMSUB + (15<<8) + (20<<14),
  OPC_F10NMSUB = OPR_NMSUB + (12<<8) + (20<<14),
  OPC_F16NMSUB = OPR_NMSUB + (13<<8) + (20<<14),
  OPC_I4OPTPARM = OPR_OPTPARM + (4<<8) + (20<<14),
  OPC_I8OPTPARM = OPR_OPTPARM + (5<<8) + (20<<14),
  OPC_U4OPTPARM = OPR_OPTPARM + (8<<8) + (20<<14),
  OPC_U8OPTPARM = OPR_OPTPARM + (9<<8) + (20<<14),
  OPC_F4OPTPARM = OPR_OPTPARM + (10<<8) + (20<<14),
  OPC_F8OPTPARM = OPR_OPTPARM + (11<<8) + (20<<14),
  OPC_FQOPTPARM = OPR_OPTPARM + (15<<8) + (20<<14),
  OPC_F10OPTPARM = OPR_OPTPARM + (12<<8) + (20<<14),
  OPC_F16OPTPARM = OPR_OPTPARM + (13<<8) + (20<<14),
  OPC_C4OPTPARM = OPR_OPTPARM + (17<<8) + (20<<14),
  OPC_C8OPTPARM = OPR_OPTPARM + (18<<8) + (20<<14),
  OPC_CQOPTPARM = OPR_OPTPARM + (19<<8) + (20<<14),

  OPC_C10OPTPARM = OPR_OPTPARM + (24<<8) + (20<<14),
  OPC_C16OPTPARM = OPR_OPTPARM + (25<<8) + (20<<14),
  OPC_I16OPTPARM = OPR_OPTPARM + (26<<8) + (20<<14),
  OPC_U16OPTPARM = OPR_OPTPARM + (27<<8) + (20<<14),

  OPC_OPT_CHI = OPR_OPT_CHI + (20<<8) + (20<<14),
  OPC_OPT_RESERVE2 = OPR_OPT_RESERVE2 + (20<<8) + (20<<14),
  OPC_F4PAREN = OPR_PAREN + (10<<8) + (20<<14),
  OPC_F8PAREN = OPR_PAREN + (11<<8) + (20<<14),
  OPC_FQPAREN = OPR_PAREN + (15<<8) + (20<<14),
  OPC_F10PAREN = OPR_PAREN + (12<<8) + (20<<14),
  OPC_F16PAREN = OPR_PAREN + (13<<8) + (20<<14),
  OPC_C4PAREN = OPR_PAREN + (17<<8) + (20<<14),
  OPC_C8PAREN = OPR_PAREN + (18<<8) + (20<<14),
  OPC_CQPAREN = OPR_PAREN + (19<<8) + (20<<14),

  OPC_C10PAREN = OPR_PAREN + (24<<8) + (20<<14),
  OPC_C16PAREN = OPR_PAREN + (25<<8) + (20<<14),

  OPC_I1PAREN = OPR_PAREN + (2<<8) + (20<<14),
  OPC_I2PAREN = OPR_PAREN + (3<<8) + (20<<14),
  OPC_I4PAREN = OPR_PAREN + (4<<8) + (20<<14),
  OPC_I8PAREN = OPR_PAREN + (5<<8) + (20<<14),
  OPC_I4PARM = OPR_PARM + (4<<8) + (20<<14),
  OPC_I8PARM = OPR_PARM + (5<<8) + (20<<14),
  OPC_U4PARM = OPR_PARM + (8<<8) + (20<<14),
  OPC_U8PARM = OPR_PARM + (9<<8) + (20<<14),
  OPC_F4PARM = OPR_PARM + (10<<8) + (20<<14),
  OPC_F8PARM = OPR_PARM + (11<<8) + (20<<14),
  OPC_FQPARM = OPR_PARM + (15<<8) + (20<<14),
  OPC_F10PARM = OPR_PARM + (12<<8) + (20<<14),
  OPC_F16PARM = OPR_PARM + (13<<8) + (20<<14),
  OPC_C4PARM = OPR_PARM + (17<<8) + (20<<14),
  OPC_C8PARM = OPR_PARM + (18<<8) + (20<<14),
  OPC_CQPARM = OPR_PARM + (19<<8) + (20<<14),
  OPC_MPARM = OPR_PARM + (16<<8) + (20<<14),
  OPC_VPARM = OPR_PARM + (20<<8) + (20<<14),
  OPC_A4PARM = OPR_PARM + (22<<8) + (20<<14),
  OPC_A8PARM = OPR_PARM + (23<<8) + (20<<14),

  OPC_C10PARM = OPR_PARM + (24<<8) + (20<<14),
  OPC_C16PARM = OPR_PARM + (25<<8) + (20<<14),
  OPC_I16PARM = OPR_PARM + (26<<8) + (20<<14),
  OPC_U16PARM = OPR_PARM + (27<<8) + (20<<14),

  OPC_I1PICCALL = OPR_PICCALL + (2<<8) + (20<<14),
  OPC_I2PICCALL = OPR_PICCALL + (3<<8) + (20<<14),
  OPC_I4I4PICCALL = OPR_PICCALL + (4<<8) + (4<<14),
  OPC_I4PICCALL = OPR_PICCALL + (4<<8) + (20<<14),
  OPC_I8I8PICCALL = OPR_PICCALL + (5<<8) + (5<<14),
  OPC_I8PICCALL = OPR_PICCALL + (5<<8) + (20<<14),
  OPC_U1PICCALL = OPR_PICCALL + (6<<8) + (20<<14),
  OPC_U2PICCALL = OPR_PICCALL + (7<<8) + (20<<14),
  OPC_U4U4PICCALL = OPR_PICCALL + (8<<8) + (8<<14),
  OPC_U4PICCALL = OPR_PICCALL + (8<<8) + (20<<14),
  OPC_U8U8PICCALL = OPR_PICCALL + (9<<8) + (9<<14),
  OPC_U8PICCALL = OPR_PICCALL + (9<<8) + (20<<14),
  OPC_F4F4PICCALL = OPR_PICCALL + (10<<8) + (10<<14),
  OPC_F4F8PICCALL = OPR_PICCALL + (10<<8) + (11<<14),
  OPC_F4PICCALL = OPR_PICCALL + (10<<8) + (20<<14),
  OPC_F8F4PICCALL = OPR_PICCALL + (11<<8) + (10<<14),
  OPC_F8F8PICCALL = OPR_PICCALL + (11<<8) + (11<<14),
  OPC_F8PICCALL = OPR_PICCALL + (11<<8) + (20<<14),
  OPC_FQPICCALL = OPR_PICCALL + (15<<8) + (20<<14),
  OPC_F10PICCALL = OPR_PICCALL + (12<<8) + (20<<14),
  OPC_F16PICCALL = OPR_PICCALL + (13<<8) + (20<<14),
  OPC_C4PICCALL = OPR_PICCALL + (17<<8) + (20<<14),
  OPC_C8PICCALL = OPR_PICCALL + (18<<8) + (20<<14),
  OPC_VPICCALL = OPR_PICCALL + (20<<8) + (20<<14),
  OPC_A4PICCALL = OPR_PICCALL + (22<<8) + (20<<14),
  OPC_A8PICCALL = OPR_PICCALL + (23<<8) + (20<<14),
  OPC_PRAGMA = OPR_PRAGMA + (20<<8) + (20<<14),
  OPC_PREFETCH = OPR_PREFETCH + (20<<8) + (20<<14),
  OPC_PREFETCHX = OPR_PREFETCHX + (20<<8) + (20<<14),
  OPC_I4RCOMMA = OPR_RCOMMA + (4<<8) + (20<<14),
  OPC_I8RCOMMA = OPR_RCOMMA + (5<<8) + (20<<14),
  OPC_U4RCOMMA = OPR_RCOMMA + (8<<8) + (20<<14),
  OPC_U8RCOMMA = OPR_RCOMMA + (9<<8) + (20<<14),
  OPC_F4RCOMMA = OPR_RCOMMA + (10<<8) + (20<<14),
  OPC_F8RCOMMA = OPR_RCOMMA + (11<<8) + (20<<14),
  OPC_FQRCOMMA = OPR_RCOMMA + (15<<8) + (20<<14),
  OPC_F10RCOMMA = OPR_RCOMMA + (12<<8) + (20<<14),
  OPC_F16RCOMMA = OPR_RCOMMA + (13<<8) + (20<<14),
  OPC_C4RCOMMA = OPR_RCOMMA + (17<<8) + (20<<14),
  OPC_C8RCOMMA = OPR_RCOMMA + (18<<8) + (20<<14),
  OPC_CQRCOMMA = OPR_RCOMMA + (19<<8) + (20<<14),
  OPC_MRCOMMA = OPR_RCOMMA + (16<<8) + (20<<14),
  OPC_A4RCOMMA = OPR_RCOMMA + (22<<8) + (20<<14),
  OPC_A8RCOMMA = OPR_RCOMMA + (23<<8) + (20<<14),

  OPC_C10RCOMMA = OPR_RCOMMA + (24<<8) + (20<<14),
  OPC_C16RCOMMA = OPR_RCOMMA + (25<<8) + (20<<14),
  OPC_I16RCOMMA = OPR_RCOMMA + (26<<8) + (20<<14),
  OPC_U16RCOMMA = OPR_RCOMMA + (27<<8) + (20<<14),

  OPC_F4FIRSTPART = OPR_FIRSTPART + (10<<8) + (20<<14),
  OPC_F8FIRSTPART = OPR_FIRSTPART + (11<<8) + (20<<14),
  OPC_FQFIRSTPART = OPR_FIRSTPART + (15<<8) + (20<<14),
  OPC_F10FIRSTPART = OPR_FIRSTPART + (12<<8) + (20<<14),
  OPC_F16FIRSTPART = OPR_FIRSTPART + (13<<8) + (20<<14),
  OPC_F4RECIP = OPR_RECIP + (10<<8) + (20<<14),
  OPC_F8RECIP = OPR_RECIP + (11<<8) + (20<<14),
  OPC_FQRECIP = OPR_RECIP + (15<<8) + (20<<14),
  OPC_F10RECIP = OPR_RECIP + (12<<8) + (20<<14),
  OPC_F16RECIP = OPR_RECIP + (13<<8) + (20<<14),



  OPC_C4RECIP = OPR_RECIP + (17<<8) + (20<<14),
  OPC_C8RECIP = OPR_RECIP + (18<<8) + (20<<14),
  OPC_CQRECIP = OPR_RECIP + (19<<8) + (20<<14),

  OPC_C10RECIP = OPR_RECIP + (24<<8) + (20<<14),
  OPC_C16RECIP = OPR_RECIP + (25<<8) + (20<<14),

  OPC_REGION = OPR_REGION + (20<<8) + (20<<14),
  OPC_REGION_EXIT = OPR_REGION_EXIT + (20<<8) + (20<<14),
  OPC_I4REM = OPR_REM + (4<<8) + (20<<14),
  OPC_I8REM = OPR_REM + (5<<8) + (20<<14),
  OPC_U4REM = OPR_REM + (8<<8) + (20<<14),
  OPC_U8REM = OPR_REM + (9<<8) + (20<<14),

  OPC_I16REM = OPR_REM + (26<<8) + (20<<14),
  OPC_U16REM = OPR_REM + (27<<8) + (20<<14),

  OPC_RETURN = OPR_RETURN + (20<<8) + (20<<14),
  OPC_I1RETURN_VAL = OPR_RETURN_VAL + (2<<8) + (20<<14),
  OPC_I2RETURN_VAL = OPR_RETURN_VAL + (3<<8) + (20<<14),
  OPC_I4RETURN_VAL = OPR_RETURN_VAL + (4<<8) + (20<<14),
  OPC_I8RETURN_VAL = OPR_RETURN_VAL + (5<<8) + (20<<14),
  OPC_U1RETURN_VAL = OPR_RETURN_VAL + (6<<8) + (20<<14),
  OPC_U2RETURN_VAL = OPR_RETURN_VAL + (7<<8) + (20<<14),
  OPC_U4RETURN_VAL = OPR_RETURN_VAL + (8<<8) + (20<<14),
  OPC_U8RETURN_VAL = OPR_RETURN_VAL + (9<<8) + (20<<14),
  OPC_F4RETURN_VAL = OPR_RETURN_VAL + (10<<8) + (20<<14),
  OPC_F8RETURN_VAL = OPR_RETURN_VAL + (11<<8) + (20<<14),
  OPC_FQRETURN_VAL = OPR_RETURN_VAL + (15<<8) + (20<<14),
  OPC_F10RETURN_VAL = OPR_RETURN_VAL + (12<<8) + (20<<14),
  OPC_F16RETURN_VAL = OPR_RETURN_VAL + (13<<8) + (20<<14),
  OPC_C4RETURN_VAL = OPR_RETURN_VAL + (17<<8) + (20<<14),
  OPC_C8RETURN_VAL = OPR_RETURN_VAL + (18<<8) + (20<<14),
  OPC_CQRETURN_VAL = OPR_RETURN_VAL + (19<<8) + (20<<14),
  OPC_MRETURN_VAL = OPR_RETURN_VAL + (16<<8) + (20<<14),
  OPC_A4RETURN_VAL = OPR_RETURN_VAL + (22<<8) + (20<<14),
  OPC_A8RETURN_VAL = OPR_RETURN_VAL + (23<<8) + (20<<14),

  OPC_C10RETURN_VAL = OPR_RETURN_VAL + (24<<8) + (20<<14),
  OPC_C16RETURN_VAL = OPR_RETURN_VAL + (25<<8) + (20<<14),
  OPC_I16RETURN_VAL = OPR_RETURN_VAL + (26<<8) + (20<<14),
  OPC_U16RETURN_VAL = OPR_RETURN_VAL + (27<<8) + (20<<14),

  OPC_I4F4RND = OPR_RND + (4<<8) + (10<<14),
  OPC_I4F8RND = OPR_RND + (4<<8) + (11<<14),
  OPC_I4FQRND = OPR_RND + (4<<8) + (15<<14),
  OPC_I4F10RND = OPR_RND + (4<<8) + (12<<14),
  OPC_I4F16RND = OPR_RND + (4<<8) + (13<<14),
  OPC_I8F4RND = OPR_RND + (5<<8) + (10<<14),
  OPC_I8F8RND = OPR_RND + (5<<8) + (11<<14),
  OPC_I8FQRND = OPR_RND + (5<<8) + (15<<14),
  OPC_I8F10RND = OPR_RND + (5<<8) + (12<<14),
  OPC_I8F16RND = OPR_RND + (5<<8) + (13<<14),
  OPC_U4F4RND = OPR_RND + (8<<8) + (10<<14),
  OPC_U4F8RND = OPR_RND + (8<<8) + (11<<14),
  OPC_U4FQRND = OPR_RND + (8<<8) + (15<<14),
  OPC_U4F10RND = OPR_RND + (8<<8) + (12<<14),
  OPC_U4F16RND = OPR_RND + (8<<8) + (13<<14),
  OPC_U8F4RND = OPR_RND + (9<<8) + (10<<14),
  OPC_U8F8RND = OPR_RND + (9<<8) + (11<<14),
  OPC_U8FQRND = OPR_RND + (9<<8) + (15<<14),
  OPC_U8F10RND = OPR_RND + (9<<8) + (12<<14),
  OPC_U8F16RND = OPR_RND + (9<<8) + (13<<14),

  OPC_I16F4RND = OPR_RND + (26<<8) + (10<<14),
  OPC_I16F8RND = OPR_RND + (26<<8) + (11<<14),
  OPC_I16FQRND = OPR_RND + (26<<8) + (15<<14),
  OPC_I16F10RND = OPR_RND + (26<<8) + (12<<14),
  OPC_I16F16RND = OPR_RND + (26<<8) + (13<<14),
  OPC_U16F4RND = OPR_RND + (27<<8) + (10<<14),
  OPC_U16F8RND = OPR_RND + (27<<8) + (11<<14),
  OPC_U16FQRND = OPR_RND + (27<<8) + (15<<14),
  OPC_U16F10RND = OPR_RND + (27<<8) + (12<<14),
  OPC_U16F16RND = OPR_RND + (27<<8) + (13<<14),

  OPC_F4RSQRT = OPR_RSQRT + (10<<8) + (20<<14),
  OPC_F8RSQRT = OPR_RSQRT + (11<<8) + (20<<14),
  OPC_FQRSQRT = OPR_RSQRT + (15<<8) + (20<<14),
  OPC_F10RSQRT = OPR_RSQRT + (12<<8) + (20<<14),
  OPC_F16RSQRT = OPR_RSQRT + (13<<8) + (20<<14),



  OPC_C4RSQRT = OPR_RSQRT + (17<<8) + (20<<14),
  OPC_C8RSQRT = OPR_RSQRT + (18<<8) + (20<<14),
  OPC_CQRSQRT = OPR_RSQRT + (19<<8) + (20<<14),

  OPC_C10RSQRT = OPR_RSQRT + (24<<8) + (20<<14),
  OPC_C16RSQRT = OPR_RSQRT + (25<<8) + (20<<14),

  OPC_BSELECT = OPR_SELECT + (1<<8) + (20<<14),
  OPC_I4SELECT = OPR_SELECT + (4<<8) + (20<<14),
  OPC_I8SELECT = OPR_SELECT + (5<<8) + (20<<14),
  OPC_U4SELECT = OPR_SELECT + (8<<8) + (20<<14),
  OPC_U8SELECT = OPR_SELECT + (9<<8) + (20<<14),
  OPC_F4SELECT = OPR_SELECT + (10<<8) + (20<<14),
  OPC_F8SELECT = OPR_SELECT + (11<<8) + (20<<14),
  OPC_FQSELECT = OPR_SELECT + (15<<8) + (20<<14),
  OPC_F10SELECT = OPR_SELECT + (12<<8) + (20<<14),
  OPC_F16SELECT = OPR_SELECT + (13<<8) + (20<<14),
  OPC_C4SELECT = OPR_SELECT + (17<<8) + (20<<14),
  OPC_C8SELECT = OPR_SELECT + (18<<8) + (20<<14),
  OPC_CQSELECT = OPR_SELECT + (19<<8) + (20<<14),
  OPC_A4SELECT = OPR_SELECT + (22<<8) + (20<<14),
  OPC_A8SELECT = OPR_SELECT + (23<<8) + (20<<14),

  OPC_C10SELECT = OPR_SELECT + (24<<8) + (20<<14),
  OPC_C16SELECT = OPR_SELECT + (25<<8) + (20<<14),
  OPC_I16SELECT = OPR_SELECT + (26<<8) + (20<<14),
  OPC_U16SELECT = OPR_SELECT + (27<<8) + (20<<14),




  OPC_BBSELECT = OPR_SELECT + (1<<8) + (1<<14),
  OPC_I4BSELECT = OPR_SELECT + (4<<8) + (1<<14),
  OPC_I8BSELECT = OPR_SELECT + (5<<8) + (1<<14),
  OPC_U4BSELECT = OPR_SELECT + (8<<8) + (1<<14),
  OPC_U8BSELECT = OPR_SELECT + (9<<8) + (1<<14),
  OPC_F4BSELECT = OPR_SELECT + (10<<8) + (1<<14),
  OPC_F8BSELECT = OPR_SELECT + (11<<8) + (1<<14),
  OPC_FQBSELECT = OPR_SELECT + (15<<8) + (1<<14),
  OPC_F10BSELECT = OPR_SELECT + (12<<8) + (1<<14),
  OPC_F16BSELECT = OPR_SELECT + (13<<8) + (1<<14),
  OPC_C4BSELECT = OPR_SELECT + (17<<8) + (1<<14),
  OPC_C8BSELECT = OPR_SELECT + (18<<8) + (1<<14),
  OPC_CQBSELECT = OPR_SELECT + (19<<8) + (1<<14),
  OPC_A4BSELECT = OPR_SELECT + (22<<8) + (1<<14),
  OPC_A8BSELECT = OPR_SELECT + (23<<8) + (1<<14),

  OPC_C10BSELECT = OPR_SELECT + (24<<8) + (1<<14),
  OPC_C16BSELECT = OPR_SELECT + (25<<8) + (1<<14),
  OPC_I16BSELECT = OPR_SELECT + (26<<8) + (1<<14),
  OPC_U16BSELECT = OPR_SELECT + (27<<8) + (1<<14),

  OPC_I4SHL = OPR_SHL + (4<<8) + (20<<14),
  OPC_I8SHL = OPR_SHL + (5<<8) + (20<<14),
  OPC_U4SHL = OPR_SHL + (8<<8) + (20<<14),
  OPC_U8SHL = OPR_SHL + (9<<8) + (20<<14),

  OPC_I16SHL = OPR_SHL + (26<<8) + (20<<14),
  OPC_U16SHL = OPR_SHL + (27<<8) + (20<<14),

  OPC_F4SQRT = OPR_SQRT + (10<<8) + (20<<14),
  OPC_F8SQRT = OPR_SQRT + (11<<8) + (20<<14),
  OPC_FQSQRT = OPR_SQRT + (15<<8) + (20<<14),
  OPC_F10SQRT = OPR_SQRT + (12<<8) + (20<<14),
  OPC_F16SQRT = OPR_SQRT + (13<<8) + (20<<14),




  OPC_C4SQRT = OPR_SQRT + (17<<8) + (20<<14),
  OPC_C8SQRT = OPR_SQRT + (18<<8) + (20<<14),
  OPC_CQSQRT = OPR_SQRT + (19<<8) + (20<<14),

  OPC_C10SQRT = OPR_SQRT + (24<<8) + (20<<14),
  OPC_C16SQRT = OPR_SQRT + (25<<8) + (20<<14),

  OPC_I1STBITS = OPR_STBITS + (20<<8) + (2<<14),
  OPC_I2STBITS = OPR_STBITS + (20<<8) + (3<<14),
  OPC_U1STBITS = OPR_STBITS + (20<<8) + (6<<14),
  OPC_U2STBITS = OPR_STBITS + (20<<8) + (7<<14),
  OPC_I1STID = OPR_STID + (20<<8) + (2<<14),
  OPC_I2STID = OPR_STID + (20<<8) + (3<<14),
  OPC_I4STID = OPR_STID + (20<<8) + (4<<14),
  OPC_I8STID = OPR_STID + (20<<8) + (5<<14),
  OPC_U1STID = OPR_STID + (20<<8) + (6<<14),
  OPC_U2STID = OPR_STID + (20<<8) + (7<<14),
  OPC_U4STID = OPR_STID + (20<<8) + (8<<14),
  OPC_U8STID = OPR_STID + (20<<8) + (9<<14),
  OPC_F4STID = OPR_STID + (20<<8) + (10<<14),
  OPC_F8STID = OPR_STID + (20<<8) + (11<<14),
  OPC_FQSTID = OPR_STID + (20<<8) + (15<<14),
  OPC_F10STID = OPR_STID + (20<<8) + (12<<14),
  OPC_F16STID = OPR_STID + (20<<8) + (13<<14),
  OPC_C4STID = OPR_STID + (20<<8) + (17<<14),
  OPC_C8STID = OPR_STID + (20<<8) + (18<<14),
  OPC_CQSTID = OPR_STID + (20<<8) + (19<<14),
  OPC_MSTID = OPR_STID + (20<<8) + (16<<14),
  OPC_BSSTID = OPR_STID + (20<<8) + (21<<14),
  OPC_A4STID = OPR_STID + (20<<8) + (22<<14),
  OPC_A8STID = OPR_STID + (20<<8) + (23<<14),

  OPC_C10STID = OPR_STID + (20<<8) + (24<<14),
  OPC_C16STID = OPR_STID + (20<<8) + (25<<14),
  OPC_I16STID = OPR_STID + (20<<8) + (26<<14),
  OPC_U16STID = OPR_STID + (20<<8) + (27<<14),
# 2296 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_I4SUB = OPR_SUB + (4<<8) + (20<<14),
  OPC_I8SUB = OPR_SUB + (5<<8) + (20<<14),
  OPC_U4SUB = OPR_SUB + (8<<8) + (20<<14),
  OPC_U8SUB = OPR_SUB + (9<<8) + (20<<14),
  OPC_F4SUB = OPR_SUB + (10<<8) + (20<<14),
  OPC_F8SUB = OPR_SUB + (11<<8) + (20<<14),
  OPC_FQSUB = OPR_SUB + (15<<8) + (20<<14),
  OPC_F10SUB = OPR_SUB + (12<<8) + (20<<14),
  OPC_F16SUB = OPR_SUB + (13<<8) + (20<<14),
  OPC_C4SUB = OPR_SUB + (17<<8) + (20<<14),
  OPC_C8SUB = OPR_SUB + (18<<8) + (20<<14),
  OPC_CQSUB = OPR_SUB + (19<<8) + (20<<14),
  OPC_A4SUB = OPR_SUB + (22<<8) + (20<<14),
  OPC_A8SUB = OPR_SUB + (23<<8) + (20<<14),

  OPC_C10SUB = OPR_SUB + (24<<8) + (20<<14),
  OPC_C16SUB = OPR_SUB + (25<<8) + (20<<14),
  OPC_I16SUB = OPR_SUB + (26<<8) + (20<<14),
  OPC_U16SUB = OPR_SUB + (27<<8) + (20<<14),
# 2325 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_SWITCH = OPR_SWITCH + (20<<8) + (20<<14),
  OPC_I1TAS = OPR_TAS + (2<<8) + (20<<14),
  OPC_I2TAS = OPR_TAS + (3<<8) + (20<<14),
  OPC_I4TAS = OPR_TAS + (4<<8) + (20<<14),
  OPC_I8TAS = OPR_TAS + (5<<8) + (20<<14),
  OPC_U1TAS = OPR_TAS + (6<<8) + (20<<14),
  OPC_U2TAS = OPR_TAS + (7<<8) + (20<<14),
  OPC_U4TAS = OPR_TAS + (8<<8) + (20<<14),
  OPC_U8TAS = OPR_TAS + (9<<8) + (20<<14),
  OPC_F4TAS = OPR_TAS + (10<<8) + (20<<14),
  OPC_F8TAS = OPR_TAS + (11<<8) + (20<<14),
  OPC_FQTAS = OPR_TAS + (15<<8) + (20<<14),
  OPC_F10TAS = OPR_TAS + (12<<8) + (20<<14),
  OPC_F16TAS = OPR_TAS + (13<<8) + (20<<14),
  OPC_C4TAS = OPR_TAS + (17<<8) + (20<<14),
  OPC_C8TAS = OPR_TAS + (18<<8) + (20<<14),
  OPC_CQTAS = OPR_TAS + (19<<8) + (20<<14),
  OPC_A4TAS = OPR_TAS + (22<<8) + (20<<14),
  OPC_A8TAS = OPR_TAS + (23<<8) + (20<<14),

  OPC_C10TAS = OPR_TAS + (24<<8) + (20<<14),
  OPC_C16TAS = OPR_TAS + (25<<8) + (20<<14),
  OPC_I16TAS = OPR_TAS + (26<<8) + (20<<14),
  OPC_U16TAS = OPR_TAS + (27<<8) + (20<<14),

  OPC_TRAP = OPR_TRAP + (20<<8) + (20<<14),
  OPC_I4TRIPLET = OPR_TRIPLET + (4<<8) + (20<<14),
  OPC_I8TRIPLET = OPR_TRIPLET + (5<<8) + (20<<14),
  OPC_U4TRIPLET = OPR_TRIPLET + (8<<8) + (20<<14),
  OPC_U8TRIPLET = OPR_TRIPLET + (9<<8) + (20<<14),

  OPC_I16TRIPLET = OPR_TRIPLET + (26<<8) + (20<<14),
  OPC_U16TRIPLET = OPR_TRIPLET + (27<<8) + (20<<14),

  OPC_TRUEBR = OPR_TRUEBR + (20<<8) + (20<<14),
  OPC_I4F4TRUNC = OPR_TRUNC + (4<<8) + (10<<14),
  OPC_I4F8TRUNC = OPR_TRUNC + (4<<8) + (11<<14),
  OPC_I4FQTRUNC = OPR_TRUNC + (4<<8) + (15<<14),
  OPC_I4F10TRUNC = OPR_TRUNC + (4<<8) + (12<<14),
  OPC_I4F16TRUNC = OPR_TRUNC + (4<<8) + (13<<14),
  OPC_I8F4TRUNC = OPR_TRUNC + (5<<8) + (10<<14),
  OPC_I8F8TRUNC = OPR_TRUNC + (5<<8) + (11<<14),
  OPC_I8FQTRUNC = OPR_TRUNC + (5<<8) + (15<<14),
  OPC_I8F10TRUNC = OPR_TRUNC + (5<<8) + (12<<14),
  OPC_I8F16TRUNC = OPR_TRUNC + (5<<8) + (13<<14),
  OPC_U4F4TRUNC = OPR_TRUNC + (8<<8) + (10<<14),
  OPC_U4F8TRUNC = OPR_TRUNC + (8<<8) + (11<<14),
  OPC_U4FQTRUNC = OPR_TRUNC + (8<<8) + (15<<14),
  OPC_U4F10TRUNC = OPR_TRUNC + (8<<8) + (12<<14),
  OPC_U4F16TRUNC = OPR_TRUNC + (8<<8) + (13<<14),
  OPC_U8F4TRUNC = OPR_TRUNC + (9<<8) + (10<<14),
  OPC_U8F8TRUNC = OPR_TRUNC + (9<<8) + (11<<14),
  OPC_U8FQTRUNC = OPR_TRUNC + (9<<8) + (15<<14),
  OPC_U8F10TRUNC = OPR_TRUNC + (9<<8) + (12<<14),
  OPC_U8F16TRUNC = OPR_TRUNC + (9<<8) + (13<<14),

  OPC_I16F4TRUNC = OPR_TRUNC + (26<<8) + (10<<14),
  OPC_I16F8TRUNC = OPR_TRUNC + (26<<8) + (11<<14),
  OPC_I16FQTRUNC = OPR_TRUNC + (26<<8) + (15<<14),
  OPC_I16F10TRUNC = OPR_TRUNC + (26<<8) + (12<<14),
  OPC_I16F16TRUNC = OPR_TRUNC + (26<<8) + (13<<14),
  OPC_U16F4TRUNC = OPR_TRUNC + (27<<8) + (10<<14),
  OPC_U16F8TRUNC = OPR_TRUNC + (27<<8) + (11<<14),
  OPC_U16FQTRUNC = OPR_TRUNC + (27<<8) + (15<<14),
  OPC_U16F10TRUNC = OPR_TRUNC + (27<<8) + (12<<14),
  OPC_U16F16TRUNC = OPR_TRUNC + (27<<8) + (13<<14),



  OPC_WHERE = OPR_WHERE + (20<<8) + (20<<14),
  OPC_WHILE_DO = OPR_WHILE_DO + (20<<8) + (20<<14),
  OPC_XGOTO = OPR_XGOTO + (20<<8) + (20<<14),
  OPC_I4XMPY = OPR_XMPY + (4<<8) + (20<<14),
  OPC_I8XMPY = OPR_XMPY + (5<<8) + (20<<14),
  OPC_U4XMPY = OPR_XMPY + (8<<8) + (20<<14),
  OPC_U8XMPY = OPR_XMPY + (9<<8) + (20<<14),

  OPC_I16XMPY = OPR_XMPY + (26<<8) + (20<<14),
  OPC_U16XMPY = OPR_XMPY + (27<<8) + (20<<14),
# 2412 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_XPRAGMA = OPR_XPRAGMA + (20<<8) + (20<<14),
  OPC_AFFIRM = OPR_AFFIRM + (20<<8) + (20<<14),
  OPC_A4ALLOCA = OPR_ALLOCA + (22<<8) + (20<<14),
  OPC_A8ALLOCA = OPR_ALLOCA + (23<<8) + (20<<14),
  OPC_U4ALLOCA = OPR_ALLOCA + (8<<8) + (20<<14),
  OPC_U8ALLOCA = OPR_ALLOCA + (9<<8) + (20<<14),
  OPC_DEALLOCA = OPR_DEALLOCA + (20<<8) + (20<<14),
  OPC_U4LDMA = OPR_LDMA + (8<<8) + (20<<14),
  OPC_U8LDMA = OPR_LDMA + (9<<8) + (20<<14),
  OPC_A4LDMA = OPR_LDMA + (22<<8) + (20<<14),
  OPC_A8LDMA = OPR_LDMA + (23<<8) + (20<<14),
  OPC_ASM_STMT = OPR_ASM_STMT + (20<<8) + (20<<14),
  OPC_ASM_INPUT = OPR_ASM_INPUT + (20<<8) + (20<<14),
  OPC_I4ASM_EXPR = OPR_ASM_EXPR + (4<<8) + (20<<14),
  OPC_I8ASM_EXPR = OPR_ASM_EXPR + (5<<8) + (20<<14),
  OPC_U4ASM_EXPR = OPR_ASM_EXPR + (8<<8) + (20<<14),
  OPC_U8ASM_EXPR = OPR_ASM_EXPR + (9<<8) + (20<<14),
  OPC_F4ASM_EXPR = OPR_ASM_EXPR + (10<<8) + (20<<14),
  OPC_F8ASM_EXPR = OPR_ASM_EXPR + (11<<8) + (20<<14),
  OPC_FQASM_EXPR = OPR_ASM_EXPR + (15<<8) + (20<<14),
  OPC_F10ASM_EXPR = OPR_ASM_EXPR + (12<<8) + (20<<14),
  OPC_F16ASM_EXPR = OPR_ASM_EXPR + (13<<8) + (20<<14),
  OPC_C4ASM_EXPR = OPR_ASM_EXPR + (17<<8) + (20<<14),
  OPC_C8ASM_EXPR = OPR_ASM_EXPR + (18<<8) + (20<<14),
  OPC_CQASM_EXPR = OPR_ASM_EXPR + (19<<8) + (20<<14),

  OPC_C10ASM_EXPR = OPR_ASM_EXPR + (24<<8) + (20<<14),
  OPC_C16ASM_EXPR = OPR_ASM_EXPR + (25<<8) + (20<<14),
  OPC_I16ASM_EXPR = OPR_ASM_EXPR + (26<<8) + (20<<14),
  OPC_U16ASM_EXPR = OPR_ASM_EXPR + (27<<8) + (20<<14),

  OPC_A4ASM_EXPR = OPR_ASM_EXPR + (22<<8) + (20<<14),
  OPC_A8ASM_EXPR = OPR_ASM_EXPR + (23<<8) + (20<<14),
  OPC_U4U1RROTATE = OPR_RROTATE + (8<<8) + (6<<14),
  OPC_U4U2RROTATE = OPR_RROTATE + (8<<8) + (7<<14),
  OPC_U4U4RROTATE = OPR_RROTATE + (8<<8) + (8<<14),
  OPC_U8U8RROTATE = OPR_RROTATE + (9<<8) + (9<<14),
  OPC_U4LDA_LABEL = OPR_LDA_LABEL + (8<<8) + (20<<14),
  OPC_U8LDA_LABEL = OPR_LDA_LABEL + (9<<8) + (20<<14),
  OPC_A4LDA_LABEL = OPR_LDA_LABEL + (22<<8) + (20<<14),
  OPC_A8LDA_LABEL = OPR_LDA_LABEL + (23<<8) + (20<<14),
  OPC_GOTO_OUTER_BLOCK = OPR_GOTO_OUTER_BLOCK + (20<<8) + (20<<14),
  OPC_I4EXTRACT_BITS = OPR_EXTRACT_BITS + (4<<8) + (20<<14),
  OPC_I8EXTRACT_BITS = OPR_EXTRACT_BITS + (5<<8) + (20<<14),
  OPC_U4EXTRACT_BITS = OPR_EXTRACT_BITS + (8<<8) + (20<<14),
  OPC_U8EXTRACT_BITS = OPR_EXTRACT_BITS + (9<<8) + (20<<14),
  OPC_I4COMPOSE_BITS = OPR_COMPOSE_BITS + (4<<8) + (20<<14),
  OPC_I8COMPOSE_BITS = OPR_COMPOSE_BITS + (5<<8) + (20<<14),
  OPC_U4COMPOSE_BITS = OPR_COMPOSE_BITS + (8<<8) + (20<<14),
  OPC_U8COMPOSE_BITS = OPR_COMPOSE_BITS + (9<<8) + (20<<14),
# 2496 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPC_I1PURE_CALL_OP = OPR_PURE_CALL_OP + (2<<8) + (20<<14),
  OPC_I2PURE_CALL_OP = OPR_PURE_CALL_OP + (3<<8) + (20<<14),
  OPC_I4PURE_CALL_OP = OPR_PURE_CALL_OP + (4<<8) + (20<<14),
  OPC_I8PURE_CALL_OP = OPR_PURE_CALL_OP + (5<<8) + (20<<14),
  OPC_U1PURE_CALL_OP = OPR_PURE_CALL_OP + (6<<8) + (20<<14),
  OPC_U2PURE_CALL_OP = OPR_PURE_CALL_OP + (7<<8) + (20<<14),
  OPC_U4PURE_CALL_OP = OPR_PURE_CALL_OP + (8<<8) + (20<<14),
  OPC_U8PURE_CALL_OP = OPR_PURE_CALL_OP + (9<<8) + (20<<14),
  OPC_F4PURE_CALL_OP = OPR_PURE_CALL_OP + (10<<8) + (20<<14),
  OPC_F8PURE_CALL_OP = OPR_PURE_CALL_OP + (11<<8) + (20<<14),
  OPC_FQPURE_CALL_OP = OPR_PURE_CALL_OP + (15<<8) + (20<<14),
  OPC_F10PURE_CALL_OP = OPR_PURE_CALL_OP + (12<<8) + (20<<14),
  OPC_F16PURE_CALL_OP = OPR_PURE_CALL_OP + (13<<8) + (20<<14),
  OPC_C4PURE_CALL_OP = OPR_PURE_CALL_OP + (17<<8) + (20<<14),
  OPC_C8PURE_CALL_OP = OPR_PURE_CALL_OP + (18<<8) + (20<<14),
  OPC_CQPURE_CALL_OP = OPR_PURE_CALL_OP + (19<<8) + (20<<14),
  OPC_MPURE_CALL_OP = OPR_PURE_CALL_OP + (16<<8) + (20<<14),
  OPC_A4PURE_CALL_OP = OPR_PURE_CALL_OP + (22<<8) + (20<<14),
  OPC_A8PURE_CALL_OP = OPR_PURE_CALL_OP + (23<<8) + (20<<14),



  OPC_SL2_FORK_MAJOR = OPR_SL2_FORK_MAJOR + (20<<8) + (20<<14),
  OPC_SL2_FORK_MINOR = OPR_SL2_FORK_MINOR + (20<<8) + (20<<14),
# 2535 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen_core.h"
  OPCODE_LAST = 0xFFFFF
} OPCODE;







}
# 164 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_core.h" 2
# 193 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h" 2

# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h" 1
# 43 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h"
inline mUINT32
OPERATOR_is_scf (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 46 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000001;
}


inline mUINT32
OPERATOR_is_stmt (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 54 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000002;
}


inline mUINT32
OPERATOR_is_expression(OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 62 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000004;
}


inline mUINT32
OPERATOR_is_leaf (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 70 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000008;
}


inline mUINT32
OPERATOR_is_store (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 78 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000010;
}


inline mUINT32
OPERATOR_is_load (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 86 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000020;
}


inline mUINT32
OPERATOR_is_call(OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 94 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000040;
}


inline mUINT32
OPERATOR_is_compare (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 102 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000080;
}


inline mUINT32
OPERATOR_is_non_scf (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 110 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000100;
}


inline mUINT32
OPERATOR_is_boolean (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 118 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000200;
}


inline mUINT32
OPERATOR_is_endsbb (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 126 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000400;
}


inline mUINT32
OPERATOR_is_comp_unit_if (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 134 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00000800;
}


inline mUINT32
OPERATOR_is_not_executable (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 142 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00001000;
}


inline mUINT32
OPERATOR_is_prefetch (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 150 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00002000;
}


inline mUINT32
OPERATOR_has_next_prev (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 158 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00004000;
}


inline mUINT32
OPERATOR_has_sym (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 166 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00008000;
}


inline mUINT32
OPERATOR_has_label (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 174 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00010000;
}


inline mUINT32
OPERATOR_has_num_entries (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 182 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00020000;
}


inline mUINT32
OPERATOR_has_offset (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 190 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00040000;
}


inline mUINT32
OPERATOR_has_2offsets (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 198 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00080000;
}


inline mUINT32
OPERATOR_has_bits (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 206 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00100000;
}


inline mUINT32
OPERATOR_has_ndim (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 214 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00200000;
}


inline mUINT32
OPERATOR_has_esize (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 222 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00400000;
}


inline mUINT32
OPERATOR_has_value (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 230 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x00800000;
}


inline mUINT32
OPERATOR_has_flags (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 238 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x01000000;
}


inline mUINT32
OPERATOR_has_inumber (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 246 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x02000000;
}


inline mUINT32
OPERATOR_has_1ty (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 254 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x04000000;
}


inline mUINT32
OPERATOR_has_2ty (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 262 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x08000000;
}


inline mUINT32
OPERATOR_has_ereg_supp (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 270 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x10000000;
}


inline mUINT32
OPERATOR_has_barrier (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 278 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x20000000;
}


inline mUINT32
OPERATOR_has_last_label (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 286 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x40000000;
}


inline mUINT32
OPERATOR_has_field_id (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 294 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (mUINT32) OPERATOR_info [op]._flags & 0x80000000;
}


inline mINT8
OPERATOR_nkids (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 302 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return OPERATOR_info [op].nkids;
}


inline OPERATOR_MAPCAT
OPERATOR_mapcat (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 310 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return OPERATOR_info[op].mapcat;
}


inline BOOL
OPERATOR_is_black_box (OPERATOR op)
{
  ( op >= OPERATOR_FIRST && op <= OPERATOR_LAST ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 318 ), Fail_FmtAssertion ("Bad operator %d", op)) );
  return (op == OPR_IO);
}
# 335 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h"
extern "C" BOOL Is_Valid_Opcode_FUNC (OPCODE op);
BOOL Is_Valid_Opcode_Parts(OPERATOR opr, TYPE_ID rtype, TYPE_ID desc);





inline OPERATOR
OPCODE_operator (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 345 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR) (op & 0xFF);
}


inline TYPE_ID
OPCODE_rtype (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 353 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (TYPE_ID) ((op >> 8) & 0x3F);
}


inline TYPE_ID
OPCODE_desc (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 361 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (TYPE_ID) ((op >> 14) & 0x3F);
}

extern char* OPCODE_name (OPCODE op);




inline mUINT32
OPCODE_is_scf (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 373 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_scf (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_stmt (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 381 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_stmt (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_expression (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 389 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_expression (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_leaf (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 397 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_leaf (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_store (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 405 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_store (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_load (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 413 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_load (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_call (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 421 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_call (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_compare (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 429 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_compare (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_non_scf (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 437 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_non_scf (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_boolean (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 445 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_boolean (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_endsbb (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 453 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_endsbb (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_comp_unit_if (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 461 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_comp_unit_if (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_not_executable (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 469 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_not_executable (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_is_prefetch (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 477 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_prefetch (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_next_prev (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 485 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_next_prev (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_sym (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 493 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_sym (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_label (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 501 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_label (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_num_entries (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 509 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_num_entries (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_offset (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 517 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_offset (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_2offsets (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 525 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_2offsets (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_bits (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 533 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_bits (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_ndim (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 541 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_ndim (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_esize (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 549 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_esize (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_value (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 557 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_value (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_flags (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 565 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_flags (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_inumber (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 573 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_inumber (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_1ty (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 581 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_1ty (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_2ty (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 589 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_2ty (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_ereg_supp (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 597 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_ereg_supp (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_barrier (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 605 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_barrier (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_last_label (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 613 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_last_label (OPCODE_operator (op)));
}


inline mUINT32
OPCODE_has_field_id (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 621 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_has_field_id (OPCODE_operator (op)));
}


inline mINT8
OPCODE_nkids(OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 629 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_nkids (OPCODE_operator (op)));
}


inline OPERATOR_MAPCAT
OPCODE_mapcat (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 637 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_mapcat (OPCODE_operator (op)));
}


inline BOOL
OPCODE_is_black_box (OPCODE op)
{
  ( Is_Valid_Opcode_FUNC (op) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode_gen.h", 645 ), Fail_FmtAssertion ("Bad opcode %d", op)) );
  return (OPERATOR_is_black_box (OPCODE_operator (op)));
}
# 195 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h" 2


extern "C" {


extern const char *OPERATOR_name(OPERATOR);
extern OPCODE OPCODE_commutative_op(OPCODE op);
# 210 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h"
extern BOOL Operator_To_Opcode_Table_Inited;
void Init_Operator_To_Opcode_Table(void);
# 231 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h"
inline OPCODE OPCODE_make_op(OPERATOR opr, TYPE_ID rtype, TYPE_ID desc)
{
  OPCODE ret;

  ret = ((OPCODE) ((opr) | ((rtype) << 8) | ((desc) << 14)));
  ( Is_Valid_Opcode_FUNC(ret) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/opcode.h", 237 ), Fail_FmtAssertion ("OPCODE_make_op: no opcode available: %d %d %d", opr, rtype, desc)) );


  return ret;
}





}
# 50 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 2

# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/srcpos.h" 1
# 42 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/srcpos.h"
extern "C" {
# 70 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/srcpos.h"
 typedef mUINT64 SRCPOS;






struct srcpos_struct {
  mUINT16 filenum;
  mUINT16 column : 12;
  mUINT16 stmt_begin : 1;
  mUINT16 bb_begin : 1;
  mUINT16 unused : 2;
  mINT32 linenum;
};


typedef union source_position {
  SRCPOS srcpos;
  struct srcpos_struct t;
  mINT32 fillers[2];
} USRCPOS;
# 117 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/srcpos.h"
}
# 52 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 2


# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h" 1
# 48 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/irbdata.h" 1
# 70 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/irbdata.h"
inline ST_IDX
INITO_st_idx (const INITO& inito) { return inito.st_idx; }
inline void
Set_INITO_st_idx (INITO& inito, ST_IDX st) { inito.st_idx = st; }
inline void
Set_INITO_st_idx (INITO_IDX idx, ST_IDX st)
    { Set_INITO_st_idx(Inito_Table[idx], st); }
inline ST*
INITO_st (const INITO& ino) { return &St_Table[ino.st_idx]; }
inline ST*
INITO_st (const INITO* ino) { return &St_Table[ino->st_idx]; }
inline ST*
INITO_st (const INITO_IDX idx) { return &St_Table[Inito_Table[idx].st_idx]; }

inline INITV_IDX
INITO_val (const INITO& inito) { return inito.val; }
inline INITV_IDX
INITO_val (INITO_IDX idx) { return INITO_val (Inito_Table[idx]);}
inline void
Set_INITO_val (INITO& ino, INITV_IDX inv) { ino.val = inv; }
inline void
Set_INITO_val (INITO_IDX idx, INITV_IDX inv)
    { Set_INITO_val(Inito_Table[idx], inv); }






inline INITV_IDX
INITV_next (const INITV& initv) { return initv.next; }
inline INITV_IDX
INITV_next (const INITV_IDX idx) { return Initv_Table[idx].next; }

inline void
Set_INITV_next(const INITV_IDX idx, const INITV_IDX nidx)
{
  Initv_Table[idx].next = nidx;
}


inline void
INITV_read_check (BOOL condition)
{
    ( condition ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/irbdata.h", 114 ), Fail_FmtAssertion ("INITV read access error")) );
}

inline INITVKIND
INITV_kind (const INITV& initv) { return initv.kind; }
inline INITVKIND
INITV_kind (const INITV_IDX idx) { return Initv_Table[idx].kind; }

inline UINT16
INITV_repeat1 (const INITV& initv) {

    switch (initv.kind) {
    case INITVKIND_ZERO:
    case INITVKIND_ONE:
    case INITVKIND_VAL:
      INITV_read_check (((BOOL) 0));
      break;
    default:
      break;
    }


    return initv.repeat1;
}

inline UINT32
INITV_repeat2 (const INITV& initv) {

    switch (initv.kind) {
    case INITVKIND_ZERO:
    case INITVKIND_ONE:
    case INITVKIND_VAL:
      break;
    default:
      INITV_read_check (((BOOL) 0));
      break;
    }


    return initv.Repeat2 ();
}

inline UINT32
INITV_repeat (const INITV_IDX inv)
{
 switch (Initv_Table[inv].kind) {
 case INITVKIND_VAL:
 case INITVKIND_ZERO:
 case INITVKIND_ONE:
  return Initv_Table[inv].u.tcval.repeat2;
 default:
  return Initv_Table[inv].repeat1;
 }
}

inline ST_IDX
INITV_st (const INITV& initv) {




    INITV_read_check (initv.kind == INITVKIND_SYMOFF);

    return initv.St ();
}
inline ST_IDX
INITV_st (const INITV_IDX initv) {




    INITV_read_check (Initv_Table[initv].kind == INITVKIND_SYMOFF);

    return Initv_Table[initv].St ();
}
inline void
Set_INITV_st (INITV_IDX inv, ST_IDX st)
{




    INITV_read_check (Initv_Table[inv].kind == INITVKIND_SYMOFF);

    Initv_Table[inv].u.sto.st = st;
}

inline INT32
INITV_ofst (const INITV& initv) {




    INITV_read_check (initv.kind == INITVKIND_SYMOFF);

    return initv.Ofst ();
}
inline INT32
INITV_ofst (const INITV_IDX initv) {




    INITV_read_check (Initv_Table[initv].kind == INITVKIND_SYMOFF);

    return Initv_Table[initv].Ofst ();
}
inline void
Set_INITV_ofst (INITV_IDX inv, INT32 ofst)
{




    INITV_read_check (Initv_Table[inv].kind == INITVKIND_SYMOFF);

    Initv_Table[inv].u.sto.ofst = ofst;
}

inline LABEL_IDX
INITV_lab (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_LABEL);
    return initv.Lab ();
}
inline LABEL_IDX
INITV_lab (const INITV_IDX initv) {
    return INITV_lab (Initv_Table[initv]);
}
inline void
Set_INITV_lab (INITV& inv, LABEL_IDX lab) {
 inv.u.lab.lab = lab;
 inv.u.lab.unused = 0;
}
inline void
Set_INITV_lab (INITV_IDX inv, LABEL_IDX lab) {
    INITV_read_check (Initv_Table[inv].kind == INITVKIND_LABEL);
    Set_INITV_lab(Initv_Table[inv], lab);
}

inline LABEL_IDX
INITV_lab1 (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_SYMDIFF ||
        initv.kind == INITVKIND_SYMDIFF16);
    return initv.Lab1 ();
}
inline LABEL_IDX
INITV_lab1 (const INITV_IDX initv) {
    return INITV_lab1 (Initv_Table[initv]);
}
inline void
Set_INITV_lab1 (INITV& inv, LABEL_IDX lab1) {
 inv.u.stdiff.lab1 = lab1;
}
inline void
Set_INITV_lab1 (INITV_IDX inv, LABEL_IDX lab1) {
    INITV_read_check (Initv_Table[inv].kind == INITVKIND_SYMDIFF ||
        Initv_Table[inv].kind == INITVKIND_SYMDIFF16);
    Set_INITV_lab1(Initv_Table[inv], lab1);
}

inline ST_IDX
INITV_st2 (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_SYMDIFF ||
        initv.kind == INITVKIND_SYMDIFF16);
    return initv.St2 ();
}
inline ST_IDX
INITV_st2 (const INITV_IDX initv) {
    return INITV_st2 (Initv_Table[initv]);
}
inline void
Set_INITV_st2 (INITV_IDX inv, ST_IDX st2) {
    INITV_read_check (Initv_Table[inv].kind == INITVKIND_SYMDIFF ||
        Initv_Table[inv].kind == INITVKIND_SYMDIFF16);
    Initv_Table[inv].u.stdiff.st2 = st2;
}

inline TCON_IDX
INITV_tc (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_VAL);
    return initv.Tc ();
}
inline TCON&
INITV_tc_val (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_VAL);
    return Tcon_Table[initv.Tc ()];
}
inline TCON&
INITV_tc_val (const INITV_IDX initv) {
    INITV_read_check (Initv_Table[initv].kind == INITVKIND_VAL);
    return Tcon_Table[Initv_Table[initv].Tc ()];
}

inline TYPE_ID
INITV_mtype (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_ZERO ||
        initv.kind == INITVKIND_ONE);
    return initv.Mtype ();
}
inline TYPE_ID
INITV_mtype (const INITV_IDX initv) {
    INITV_read_check (Initv_Table[initv].kind == INITVKIND_ZERO ||
        Initv_Table[initv].kind == INITVKIND_ONE);
    return Initv_Table[initv].Mtype ();
}


inline mINT32
INITV_flags (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_BLOCK);
    return initv.u.blk.flags;
}

inline void
Set_INITV_flags (INITV& initv, mINT32 flags) {
    INITV_read_check (initv.kind == INITVKIND_BLOCK);
    initv.u.blk.flags = flags;
}

inline void
Set_INITV_flags (INITV_IDX initv, mINT32 flags) {
    Set_INITV_flags (Initv_Table[initv], flags);
}


inline INITV_IDX
INITV_blk (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_BLOCK);
    return initv.Blk ();
}
inline INITV_IDX
INITV_blk (const INITV_IDX initv) {
 return INITV_blk(Initv_Table[initv]);
}
inline void
Set_INITV_blk (INITV& inv, INITV_IDX blk) {
 inv.u.blk.blk = blk;

 inv.u.blk.flags = 0;



}
inline void
Set_INITV_blk (INITV_IDX inv, INITV_IDX blk) {
 Set_INITV_blk(Initv_Table[inv], blk);
}

inline INT32
INITV_pad (const INITV& initv) {
    INITV_read_check (initv.kind == INITVKIND_PAD);
    return initv.Pad ();
}
inline INT32
INITV_pad (const INITV_IDX initv) {
    INITV_read_check (Initv_Table[initv].kind == INITVKIND_PAD);
    return Initv_Table[initv].Pad ();
}
inline void
Set_INITV_pad (INITV& initv, UINT32 pad_bytes) {
   initv.u.pad.pad = pad_bytes;
}




extern INITO_IDX
New_INITO (ST_IDX st, INITV_IDX val = 0);
inline INITO_IDX
New_INITO (const ST *st, INITV_IDX val = 0) {
    return New_INITO (ST_st_idx (st), val);
}

extern INITV_IDX New_INITV (void);

extern INITV_IDX
Copy_INITV (INITV_IDX parent_inv, INITO_IDX ino, INITV_IDX inv);

extern void
INITV_Init_Integer (INITV_IDX inv,
 TYPE_ID mtype, INT64 val, UINT16 repeat = 1);

extern void
INITV_Init_Float (INITV_IDX inv, TYPE_ID mtype, double val, UINT16 repeat = 1);

extern void
INITV_Init_String (INITV_IDX inv, char *str, INT size, UINT16 repeat = 1);

extern void
INITV_Init_Symoff (INITV_IDX inv, ST *st, INT64 ofst, UINT16 repeat = 1);





extern void
INITV_Init_Label (INITV_IDX inv, LABEL_IDX lab, UINT16 repeat = 1);

extern void
INITV_Init_Symdiff (INITV_IDX inv,
 LABEL_IDX lab1, ST *st2, BOOL halfword, UINT16 repeat = 1);

extern void

INITV_Init_Block (INITV_IDX inv, INITV_IDX bval, UINT16 repeat = 1, mINT32 flags = 0);




extern void
INITV_Init_Pad (INITV_IDX inv, UINT32 pad_bytes);


inline INITV_IDX
Append_INITV (INITV_IDX inv, INITO_IDX ino, INITV_IDX prev_inv)
{
  if (prev_inv == INITV_IDX_ZERO)
      Set_INITO_val (ino, inv);
  else
      Set_INITV_next (prev_inv, inv);
  return inv;
}


inline INITV_IDX
INITV_Next_Idx(void) { return Initv_Table.Size(); }


extern UINT
Get_INITO_Size (INITO_IDX ino);

extern INITO_IDX
Find_INITO_For_Symbol (const ST *st);

extern void
Print_INITV (const INITV& initv);

extern void
Print_INITV_idx (const INITV_IDX inv_idx);

extern void
Print_INITVs (INITV_IDX initv);

extern void
Print_INITO (const INITO& ino);
inline void
Print_INITO (INITO_IDX idx) { Print_INITO(Inito_Table[idx]); }

extern void
Print_Inits (UINT level);




inline void
INITV_Set_SYMOFF (INITV& initv, mUINT16 rp1, ST_IDX st, INT32 ofst) {
    initv.next = 0;
    initv.kind = INITVKIND_SYMOFF;
    initv.repeat1 = rp1;
    initv.u.sto.st = st;
    initv.u.sto.ofst = ofst;
}
# 488 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/irbdata.h"
inline void
INITV_Set_LABEL (INITV& initv, mUINT16 rp1, LABEL_IDX lab) {
    initv.next = 0;
    initv.kind = INITVKIND_LABEL;
    initv.repeat1 = rp1;
    initv.u.lab.lab = lab;
    initv.u.lab.unused = 0;
}

inline void
INITV_Set_int (INITV& initv, INITVKIND kind, TYPE_ID m, UINT32 rp2) {
    initv.next = 0;
    initv.kind = kind;
    initv.repeat1 = 0;
    initv.u.tcval.u.mtype = m;
    initv.u.tcval.repeat2 = rp2;
}
inline void
INITV_Set_ZERO (INITV& initv, TYPE_ID m, UINT32 rp2) {
    INITV_Set_int (initv, INITVKIND_ZERO, m, rp2);
}
inline void
INITV_Set_ONE (INITV& initv, TYPE_ID m, UINT32 rp2) {
    INITV_Set_int (initv, INITVKIND_ONE, m, rp2);
}

inline void
INITV_Set_VAL (INITV& initv, TCON_IDX t, mUINT32 rp2) {
    initv.next = 0;
    initv.kind = INITVKIND_VAL;
    initv.repeat1 = 0;
    initv.u.tcval.u.tc = t;
    initv.u.tcval.repeat2 = rp2;
}

inline void



INITV_Set_BLOCK (INITV& initv, mUINT16 rp1, INITV_IDX b, mINT32 flags=0) {

    initv.next = 0;
    initv.kind = INITVKIND_BLOCK;
    initv.repeat1 = rp1;
    initv.u.blk.blk = b;



    initv.u.blk.flags = flags;

}

inline void
INITV_Set_PAD (INITV& initv, UINT32 pad_bytes) {
    initv.next = 0;
    initv.kind = INITVKIND_PAD;
    initv.repeat1 = 1;
    initv.u.pad.pad = pad_bytes;
    initv.u.pad.unused = 0;
}

inline void
INITV_Set_SYMDIFF (INITV& initv, mUINT16 rp1, LABEL_IDX s1, ST_IDX s2,
     BOOL halfword)
{
    initv.next = 0;
    initv.kind = halfword ? INITVKIND_SYMDIFF16 : INITVKIND_SYMDIFF;
    initv.repeat1 = rp1;
    initv.u.stdiff.lab1 = s1;
    initv.u.stdiff.st2 = s2;
}





extern INITV_IDX
Irb_Init_Symoff (INITO_IDX ino, INITV_IDX inv, mUINT16 repeat, ST *st,
   INT64 ofst);

extern INITV_IDX
Irb_Init_Label (INITO_IDX ino, INITV_IDX inv, mUINT16 repeat, LABEL_IDX lab);

extern INITV_IDX
Irb_Init_Symdiff (INITO_IDX ino, INITV_IDX inv, mUINT16 repeat, LABEL_IDX lab1,
    ST *st2, BOOL halfword);

extern INITV_IDX
Irb_Init_Val (INITO_IDX ino, INITV_IDX inv, UINT32 repeat, TCON_IDX tc);

extern INITV_IDX
Irb_Init_Pad (INITO_IDX ino, INITV_IDX inv, UINT32 pad_bytes);

extern INITV_IDX
Irb_Init_Block (INITO_IDX ino, INITV_IDX inv, mUINT16 repeat);

extern INITV_IDX
Irb_Init_Integer (INT size, INT64 value, INT32 repeat, INITO_IDX ino,
    INITV_IDX inv);

extern INITV_IDX
Irb_Init_Integer_Of_Type (TYPE_ID mtype, INT64 value, INT32 repeat,
     INITO_IDX ino, INITV_IDX inv);

extern INITV_IDX
Irb_Init_String (INT size, char *str, INT32 repeat, INITO_IDX ino,
   INITV_IDX inv);



extern INITV_IDX
Irb_Init_Float (INT size, double value, INT32 repeat, INITO_IDX ino,
  INITV_IDX inv);

extern INITV_IDX
Irb_Init_Float_4 (INT size, float value, INT32 repeat, INITO_IDX ino,
    INITV_IDX inv);

extern INITV_IDX
Irb_Init_Quad (INT size, QUAD_TYPE value, INT32 repeat, INITO_IDX ino,
        INITV_IDX inv);

extern INITV_IDX
Irb_Init_Complex (INT size, double real, double imag, INT32 repeat,
    INITO_IDX ino, INITV_IDX inv);

extern INITV_IDX
Irb_Init_Complex_4 (INT size, float real, float imag, INT32 repeat,
      INITO_IDX ino, INITV_IDX inv);

extern INITV_IDX
Irb_Init_Complex_Quad (INT size, QUAD_TYPE real, QUAD_TYPE imag,
         INT32 repeat, INITO_IDX ino, INITV_IDX inv);
# 49 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h" 2



# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h" 1
# 82 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
extern "C" {


typedef enum {

  INTRINSIC_INVALID = -1,
  INTRINSIC_NONE = 0,
  INTRINSIC_FIRST = 1,
# 116 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_I4EXPEXPR = 1,
  INTRN_I8EXPEXPR = 2,
  INTRN_F4EXPEXPR = 3,
  INTRN_F8EXPEXPR = 4,
  INTRN_FQEXPEXPR = 5,
  INTRN_C4EXPEXPR = 6,
  INTRN_C8EXPEXPR = 7,
  INTRN_CQEXPEXPR = 8,
  INTRN_F4I4EXPEXPR = 9,
  INTRN_F4I8EXPEXPR = 10,
  INTRN_F8I4EXPEXPR = 11,
  INTRN_F8I8EXPEXPR = 12,
  INTRN_FQI4EXPEXPR = 13,
  INTRN_FQI8EXPEXPR = 14,
  INTRN_C4I4EXPEXPR = 15,
  INTRN_C4I8EXPEXPR = 16,
  INTRN_C8I4EXPEXPR = 17,
  INTRN_C8I8EXPEXPR = 18,
  INTRN_CQI4EXPEXPR = 19,
  INTRN_CQI8EXPEXPR = 20,







  INTRN_CEQEXPR = 21,
  INTRN_CNEEXPR = 22,
  INTRN_CGEEXPR = 23,
  INTRN_CGTEXPR = 24,
  INTRN_CLEEXPR = 25,
  INTRN_CLTEXPR = 26,







  INTRN_SUBSTRINGEXPR = 27,






  INTRN_CONCATEXPR = 28,
# 172 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_CASSIGNSTMT = 29,
# 189 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_I2ABSe = 30,
  INTRN_I4ABSe = 31,
  INTRN_I8ABSe = 32,
  INTRN_F4ABSe = 33,
  INTRN_F8ABSe = 34,
  INTRN_FQABSe = 35,
  INTRN_F4C4ABS = 36,
  INTRN_F4C4ABSe = 37,
  INTRN_F8C8ABS = 38,
  INTRN_F8C8ABSe = 39,
  INTRN_FQCQABS = 40,
  INTRN_FQCQABSe = 41,







  INTRN_I2MODe = 42,
  INTRN_I4MODe = 43,
  INTRN_I8MODe = 44,
  INTRN_F4MOD = 45,
  INTRN_F4MODe = 46,
  INTRN_F8MOD = 47,
  INTRN_F8MODe = 48,
  INTRN_FQMOD = 49,
  INTRN_FQMODe = 50,







  INTRN_F4SQRTe = 51,
  INTRN_F8SQRTe = 52,
  INTRN_FQSQRTe = 53,
  INTRN_C4SQRTe = 54,
  INTRN_C8SQRTe = 55,
  INTRN_CQSQRTe = 56,






  INTRN_C4CONJG = 57,
  INTRN_C4CONJGe = 58,
  INTRN_C8CONJG = 59,
  INTRN_C8CONJGe = 60,
  INTRN_CQCONJG = 61,
  INTRN_CQCONJGe = 62,

  INTRN_I1DIM = 63,
  INTRN_I2DIM = 64,
  INTRN_I2DIMe = 65,
  INTRN_I4DIM = 66,
  INTRN_I4DIMe = 67,
  INTRN_I8DIM = 68,
  INTRN_I8DIMe = 69,
  INTRN_F4DIM = 70,
  INTRN_F4DIMe = 71,
  INTRN_F8DIM = 72,
  INTRN_F8DIMe = 73,
  INTRN_FQDIM = 74,
  INTRN_FQDIMe = 75,

  INTRN_F8F4PROD = 76,
  INTRN_F8F4PRODe = 77,
  INTRN_FQF8PROD = 78,
  INTRN_FQF8PRODe = 79,

  INTRN_I1SIGN = 80,
  INTRN_I2SIGN = 81,
  INTRN_I2SIGNe = 82,
  INTRN_I4SIGN = 83,
  INTRN_I4SIGNe = 84,
  INTRN_I8SIGN = 85,
  INTRN_I8SIGNe = 86,
  INTRN_F4SIGN = 87,
  INTRN_F4SIGNe = 88,
  INTRN_F8SIGN = 89,
  INTRN_F8SIGNe = 90,
  INTRN_FQSIGN = 91,
  INTRN_FQSIGNe = 92,
# 286 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_F4IMAGe = 93,
  INTRN_F8IMAGe = 94,
  INTRN_FQIMAGe = 95,

  INTRN_F4AINT = 96,
  INTRN_F4AINTe = 97,
  INTRN_F8AINT = 98,
  INTRN_F8AINTe = 99,
  INTRN_FQAINT = 100,
  INTRN_FQAINTe = 101,

  INTRN_I2F4INTe = 102,
  INTRN_I4F4INTe = 103,
  INTRN_I8F4INTe = 104,

  INTRN_I2F8IDINTe = 105,
  INTRN_I4F8IDINTe = 106,
  INTRN_I8F8IDINTe = 107,

  INTRN_I2FQIQINTe = 108,
  INTRN_I4FQIQINTe = 109,
  INTRN_I8FQIQINTe = 110,

  INTRN_I2F4NINT = 111,
  INTRN_I2F4NINTe = 112,
  INTRN_I4F4NINT = 113,
  INTRN_I4F4NINTe = 114,
  INTRN_I8F4NINT = 115,
  INTRN_I8F4NINTe = 116,

  INTRN_I2F8IDNINT = 117,
  INTRN_I2F8IDNINTe = 118,
  INTRN_I4F8IDNINT = 119,
  INTRN_I4F8IDNINTe = 120,
  INTRN_I8F8IDNINT = 121,
  INTRN_I8F8IDNINTe = 122,

  INTRN_I2FQIQNINT = 123,
  INTRN_I2FQIQNINTe = 124,
  INTRN_I4FQIQNINT = 125,
  INTRN_I4FQIQNINTe = 126,
  INTRN_I8FQIQNINT = 127,
  INTRN_I8FQIQNINTe = 128,

  INTRN_F4ANINT = 129,
  INTRN_F4ANINTe = 130,
  INTRN_F8ANINT = 131,
  INTRN_F8ANINTe = 132,
  INTRN_FQANINT = 133,
  INTRN_FQANINTe = 134,
# 344 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_I2BNOTe = 135,
  INTRN_I4BNOTe = 136,
  INTRN_I8BNOTe = 137,

  INTRN_I2BANDe = 138,
  INTRN_I4BANDe = 139,
  INTRN_I8BANDe = 140,

  INTRN_I2BIORe = 141,
  INTRN_I4BIORe = 142,
  INTRN_I8BIORe = 143,

  INTRN_I2BXORe = 144,
  INTRN_I4BXORe = 145,
  INTRN_I8BXORe = 146,

  INTRN_I1BITS = 147,
  INTRN_I2BITS = 148,
  INTRN_I2BITSe = 149,
  INTRN_I4BITS = 150,
  INTRN_I4BITSe = 151,
  INTRN_I8BITS = 152,
  INTRN_I8BITSe = 153,

  INTRN_I1BSET = 154,
  INTRN_I2BSET = 155,
  INTRN_I2BSETe = 156,
  INTRN_I4BSET = 157,
  INTRN_I4BSETe = 158,
  INTRN_I8BSET = 159,
  INTRN_I8BSETe = 160,

  INTRN_I1BCLR = 161,
  INTRN_I2BCLR = 162,
  INTRN_I2BCLRe = 163,
  INTRN_I4BCLR = 164,
  INTRN_I4BCLRe = 165,
  INTRN_I8BCLR = 166,
  INTRN_I8BCLRe = 167,

  INTRN_I1BTEST = 168,
  INTRN_I2BTEST = 169,
  INTRN_I2BTESTe = 170,
  INTRN_I4BTEST = 171,
  INTRN_I4BTESTe = 172,
  INTRN_I8BTEST = 173,
  INTRN_I8BTESTe = 174,

  INTRN_I1MVBITS = 175,
  INTRN_I2MVBITS = 176,
  INTRN_I4MVBITS = 177,
  INTRN_I8MVBITS = 178,







  INTRN_I1SHL = 179,
  INTRN_I2SHL = 180,

  INTRN_I1SHR = 181,
  INTRN_I2SHR = 182,

  INTRN_I1SHFT = 183,
  INTRN_I2SHFT = 184,
  INTRN_I2SHFTe = 185,
  INTRN_I4SHFT = 186,
  INTRN_I4SHFTe = 187,
  INTRN_I8SHFT = 188,
  INTRN_I8SHFTe = 189,

  INTRN_I1SHFTC = 190,
  INTRN_I2SHFTC = 191,
  INTRN_I2SHFTCe = 192,
  INTRN_I4SHFTC = 193,
  INTRN_I4SHFTCe = 194,
  INTRN_I8SHFTC = 195,
  INTRN_I8SHFTCe = 196,






  INTRN_I4CLEN = 197,
  INTRN_I4CLENe = 198,

  INTRN_I4CINDEX = 199,
  INTRN_I4CINDEXe = 200,

  INTRN_CLGE = 201,
  INTRN_CLGEe = 202,

  INTRN_CLGT = 203,
  INTRN_CLGTe = 204,

  INTRN_CLLE = 205,
  INTRN_CLLEe = 206,

  INTRN_CLLT = 207,
  INTRN_CLLTe = 208,






  INTRN_F4EXP = 209,
  INTRN_F4EXPe = 210,
  INTRN_F8EXP = 211,
  INTRN_F8EXPe = 212,
  INTRN_FQEXP = 213,
  INTRN_FQEXPe = 214,
  INTRN_C4EXP = 215,
  INTRN_C4EXPe = 216,
  INTRN_C8EXP = 217,
  INTRN_C8EXPe = 218,
  INTRN_CQEXP = 219,
  INTRN_CQEXPe = 220,

  INTRN_F4LOG = 221,
  INTRN_F4LOGe = 222,
  INTRN_F8LOG = 223,
  INTRN_F8LOGe = 224,
  INTRN_FQLOG = 225,
  INTRN_FQLOGe = 226,
  INTRN_C4LOG = 227,
  INTRN_C4LOGe = 228,
  INTRN_C8LOG = 229,
  INTRN_C8LOGe = 230,
  INTRN_CQLOG = 231,
  INTRN_CQLOGe = 232,

  INTRN_F4LOG10 = 233,
  INTRN_F4LOG10e = 234,
  INTRN_F8LOG10 = 235,
  INTRN_F8LOG10e = 236,
  INTRN_FQLOG10 = 237,
  INTRN_FQLOG10e = 238,
# 493 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_F4COS = 239,
  INTRN_F4COSe = 240,
  INTRN_F8COS = 241,
  INTRN_F8COSe = 242,
  INTRN_FQCOS = 243,
  INTRN_FQCOSe = 244,
  INTRN_C4COS = 245,
  INTRN_C4COSe = 246,
  INTRN_C8COS = 247,
  INTRN_C8COSe = 248,
  INTRN_CQCOS = 249,
  INTRN_CQCOSe = 250,

  INTRN_F4SIN = 251,
  INTRN_F4SINe = 252,
  INTRN_F8SIN = 253,
  INTRN_F8SINe = 254,
  INTRN_FQSIN = 255,
  INTRN_FQSINe = 256,
  INTRN_C4SIN = 257,
  INTRN_C4SINe = 258,
  INTRN_C8SIN = 259,
  INTRN_C8SINe = 260,
  INTRN_CQSIN = 261,
  INTRN_CQSINe = 262,

  INTRN_F4CIS = 263,
  INTRN_F4CISe = 264,
  INTRN_F8CIS = 265,
  INTRN_F8CISe = 266,
  INTRN_FQCIS = 267,
  INTRN_FQCISe = 268,

  INTRN_F4TAN = 269,
  INTRN_F4TANe = 270,
  INTRN_F8TAN = 271,
  INTRN_F8TANe = 272,
  INTRN_FQTAN = 273,
  INTRN_FQTANe = 274,

  INTRN_F4COSD = 275,
  INTRN_F4COSDe = 276,
  INTRN_F8COSD = 277,
  INTRN_F8COSDe = 278,
  INTRN_FQCOSD = 279,
  INTRN_FQCOSDe = 280,

  INTRN_F4SIND = 281,
  INTRN_F4SINDe = 282,
  INTRN_F8SIND = 283,
  INTRN_F8SINDe = 284,
  INTRN_FQSIND = 285,
  INTRN_FQSINDe = 286,

  INTRN_F4TAND = 287,
  INTRN_F4TANDe = 288,
  INTRN_F8TAND = 289,
  INTRN_F8TANDe = 290,
  INTRN_FQTAND = 291,
  INTRN_FQTANDe = 292,

  INTRN_F4COSH = 293,
  INTRN_F4COSHe = 294,
  INTRN_F8COSH = 295,
  INTRN_F8COSHe = 296,
  INTRN_FQCOSH = 297,
  INTRN_FQCOSHe = 298,

  INTRN_F4SINH = 299,
  INTRN_F4SINHe = 300,
  INTRN_F8SINH = 301,
  INTRN_F8SINHe = 302,
  INTRN_FQSINH = 303,
  INTRN_FQSINHe = 304,

  INTRN_F4TANH = 305,
  INTRN_F4TANHe = 306,
  INTRN_F8TANH = 307,
  INTRN_F8TANHe = 308,
  INTRN_FQTANH = 309,
  INTRN_FQTANHe = 310,

  INTRN_F4ACOS = 311,
  INTRN_F4ACOSe = 312,
  INTRN_F8ACOS = 313,
  INTRN_F8ACOSe = 314,
  INTRN_FQACOS = 315,
  INTRN_FQACOSe = 316,

  INTRN_F4ASIN = 317,
  INTRN_F4ASINe = 318,
  INTRN_F8ASIN = 319,
  INTRN_F8ASINe = 320,
  INTRN_FQASIN = 321,
  INTRN_FQASINe = 322,

  INTRN_F4ATAN = 323,
  INTRN_F4ATANe = 324,
  INTRN_F8ATAN = 325,
  INTRN_F8ATANe = 326,
  INTRN_FQATAN = 327,
  INTRN_FQATANe = 328,

  INTRN_F4ACOSD = 329,
  INTRN_F4ACOSDe = 330,
  INTRN_F8ACOSD = 331,
  INTRN_F8ACOSDe = 332,
  INTRN_FQACOSD = 333,
  INTRN_FQACOSDe = 334,

  INTRN_F4ASIND = 335,
  INTRN_F4ASINDe = 336,
  INTRN_F8ASIND = 337,
  INTRN_F8ASINDe = 338,
  INTRN_FQASIND = 339,
  INTRN_FQASINDe = 340,

  INTRN_F4ATAND = 341,
  INTRN_F4ATANDe = 342,
  INTRN_F8ATAND = 343,
  INTRN_F8ATANDe = 344,
  INTRN_FQATAND = 345,
  INTRN_FQATANDe = 346,

  INTRN_F4ATAN2 = 347,
  INTRN_F4ATAN2e = 348,
  INTRN_F8ATAN2 = 349,
  INTRN_F8ATAN2e = 350,
  INTRN_FQATAN2 = 351,
  INTRN_FQATAN2e = 352,

  INTRN_F4ATAN2D = 353,
  INTRN_F4ATAN2De = 354,
  INTRN_F8ATAN2D = 355,
  INTRN_F8ATAN2De = 356,
  INTRN_FQATAN2D = 357,
  INTRN_FQATAN2De = 358,
# 643 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_U4I4ALLOCA = 359,
  INTRN_U8I8ALLOCA = 360,
# 653 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_U4I4MALLOC = 361,
  INTRN_U8I8MALLOC = 362,

  INTRN_U4FREE = 363,
  INTRN_U8FREE = 364,

  INTRN_MDATE = 365,
  INTRN_I1DATE = 366,
  INTRN_I2DATE = 367,
  INTRN_I4DATE = 368,
  INTRN_I8DATE = 369,

  INTRN_I1ERRSNS = 370,
  INTRN_I2ERRSNS = 371,
  INTRN_I4ERRSNS = 372,
  INTRN_I8ERRSNS = 373,

  INTRN_VEXIT = 374,
  INTRN_I1EXIT = 375,
  INTRN_I2EXIT = 376,
  INTRN_I4EXIT = 377,
  INTRN_I8EXIT = 378,

  INTRN_TIME = 379,

  INTRN_F4SECNDS = 380,
  INTRN_F8SECNDS = 381,






  INTRN_PAUSE = 382,
  INTRN_STOP = 383,



  INTRN_F4I4RAN = 384,
  INTRN_F4I8RAN = 385,
  INTRN_F8I4RAN = 386,
  INTRN_F8I8RAN = 387,
  INTRN_FQI4RAN = 388,
  INTRN_FQI8RAN = 389,
# 706 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_I4DIVFLOOR = 390,
  INTRN_I8DIVFLOOR = 391,
  INTRN_U4DIVFLOOR = 392,
  INTRN_U8DIVFLOOR = 393,

  INTRN_I4DIVCEIL = 394,
  INTRN_I8DIVCEIL = 395,
  INTRN_U4DIVCEIL = 396,
  INTRN_U8DIVCEIL = 397,

  INTRN_I4MODFLOOR = 398,
  INTRN_I8MODFLOOR = 399,
  INTRN_U4MODFLOOR = 400,
  INTRN_U8MODFLOOR = 401,

  INTRN_I4MODCEIL = 402,
  INTRN_I8MODCEIL = 403,
  INTRN_U4MODCEIL = 404,
  INTRN_U8MODCEIL = 405,


  INTRN_U4I4SETSTACKPOINTER = 406,
  INTRN_U8I8SETSTACKPOINTER = 407,
  INTRN_U4READSTACKPOINTER = 408,
  INTRN_U8READSTACKPOINTER = 409,



  INTRN_ADD_AND_FETCH_I4 = 410,
  INTRN_SUB_AND_FETCH_I4 = 411,
  INTRN_OR_AND_FETCH_I4 = 412,
  INTRN_XOR_AND_FETCH_I4 = 413,
  INTRN_AND_AND_FETCH_I4 = 414,
  INTRN_NAND_AND_FETCH_I4 = 415,

  INTRN_FETCH_AND_ADD_I4 = 416,
  INTRN_FETCH_AND_SUB_I4 = 417,
  INTRN_FETCH_AND_OR_I4 = 418,
  INTRN_FETCH_AND_XOR_I4 = 419,
  INTRN_FETCH_AND_AND_I4 = 420,
  INTRN_FETCH_AND_NAND_I4 = 421,

  INTRN_ADD_AND_FETCH_I8 = 422,
  INTRN_SUB_AND_FETCH_I8 = 423,
  INTRN_OR_AND_FETCH_I8 = 424,
  INTRN_XOR_AND_FETCH_I8 = 425,
  INTRN_AND_AND_FETCH_I8 = 426,
  INTRN_NAND_AND_FETCH_I8 = 427,

  INTRN_FETCH_AND_ADD_I8 = 428,
  INTRN_FETCH_AND_SUB_I8 = 429,
  INTRN_FETCH_AND_OR_I8 = 430,
  INTRN_FETCH_AND_XOR_I8 = 431,
  INTRN_FETCH_AND_AND_I8 = 432,
  INTRN_FETCH_AND_NAND_I8 = 433,

  INTRN_LOCK_TEST_AND_SET_I4 = 434,
  INTRN_LOCK_TEST_AND_SET_I8 = 435,

  INTRN_LOCK_RELEASE_I4 = 436,
  INTRN_LOCK_RELEASE_I8 = 437,

  INTRN_COMPARE_AND_SWAP_I4 = 438,
  INTRN_COMPARE_AND_SWAP_I8 = 439,

  INTRN_SYNCHRONIZE = 440,

  INTRN_RETURN_ADDRESS = 441,



  INTRN_U4I1ADRTMP = 442,
  INTRN_U4I2ADRTMP = 443,
  INTRN_U4I4ADRTMP = 444,
  INTRN_U4I8ADRTMP = 445,
  INTRN_U4F4ADRTMP = 446,
  INTRN_U4F8ADRTMP = 447,
  INTRN_U4FQADRTMP = 448,
  INTRN_U4C4ADRTMP = 449,
  INTRN_U4C8ADRTMP = 450,
  INTRN_U4CQADRTMP = 451,
  INTRN_U4VADRTMP = 452,
  INTRN_U8I1ADRTMP = 453,
  INTRN_U8I2ADRTMP = 454,
  INTRN_U8I4ADRTMP = 455,
  INTRN_U8I8ADRTMP = 456,
  INTRN_U8F4ADRTMP = 457,
  INTRN_U8F8ADRTMP = 458,
  INTRN_U8FQADRTMP = 459,
  INTRN_U8C4ADRTMP = 460,
  INTRN_U8C8ADRTMP = 461,
  INTRN_U8CQADRTMP = 462,
  INTRN_U8VADRTMP = 463,

  INTRN_I4VALTMP = 464,
  INTRN_I8VALTMP = 465,
  INTRN_U4VALTMP = 466,
  INTRN_U8VALTMP = 467,
  INTRN_F4VALTMP = 468,
  INTRN_F8VALTMP = 469,
  INTRN_FQVALTMP = 470,
  INTRN_C4VALTMP = 471,
  INTRN_C8VALTMP = 472,
  INTRN_CQVALTMP = 473,



  INTRN_BCOPY = 474,
  INTRN_BCMP = 475,
  INTRN_BZERO = 476,

  INTRN_MEMCCPY = 477,
  INTRN_MEMCHR = 478,
  INTRN_MEMCMP = 479,
  INTRN_MEMCPY = 480,
  INTRN_MEMMOVE = 481,
  INTRN_MEMSET = 482,

  INTRN_STRCMP = 483,
  INTRN_STRNCMP = 484,
  INTRN_STRCPY = 485,
  INTRN_STRNCPY = 486,
  INTRN_STRLEN = 487,

  INTRN_PRINTF = 488,
  INTRN_FPRINTF = 489,
  INTRN_SPRINTF = 490,
  INTRN_PRINTW = 491,
  INTRN_SCANF = 492,
  INTRN_FSCANF = 493,
  INTRN_SSCANF = 494,
  INTRN_FPUTC = 495,
  INTRN_FPUTS = 496,
  INTRN_FGETC = 497,
  INTRN_FGETS = 498,

  INTRN_F4VACOS = 499,
  INTRN_F8VACOS = 500,
  INTRN_F4VASIN = 501,
  INTRN_F8VASIN = 502,
  INTRN_F4VATAN = 503,
  INTRN_F8VATAN = 504,
  INTRN_F4VCOS = 505,
  INTRN_F8VCOS = 506,
  INTRN_F4VEXP = 507,
  INTRN_F8VEXP = 508,
  INTRN_F4VLOG = 509,
  INTRN_F8VLOG = 510,
  INTRN_F4VSIN = 511,
  INTRN_F8VSIN = 512,
  INTRN_F4VSQRT = 513,
  INTRN_F8VSQRT = 514,
  INTRN_F4VTAN = 515,
  INTRN_F8VTAN = 516,

  INTRN_NARY_ADD = 517,
  INTRN_NARY_MPY = 518,



  INTRN_U4I4TRAPUV_MALLOC = 519,
  INTRN_U8I8TRAPUV_MALLOC = 520,



  INTRN_F77_BOUNDS_ERR = 521,



  INTRN_DSM_NUMTHREADS = 522,
  INTRN_DSM_CHUNKSIZE = 523,
  INTRN_DSM_THIS_CHUNKSIZE = 524,
  INTRN_DSM_REM_CHUNKSIZE = 525,
  INTRN_DSM_NUMCHUNKS = 526,
  INTRN_DSM_THIS_THREADNUM = 527,
  INTRN_DSM_DISTRIBUTION_BLOCK = 528,
  INTRN_DSM_DISTRIBUTION_STAR = 529,
  INTRN_DSM_ISRESHAPED = 530,
  INTRN_DSM_ISDISTRIBUTED = 531,
  INTRN_DSM_THIS_STARTINDEX = 532,
  INTRN_DSM_DISTRIBUTION_CYCLIC = 533,




  INTRN_MPY_AND_FETCH_I4 = 534,
  INTRN_MIN_AND_FETCH_I4 = 535,
  INTRN_MAX_AND_FETCH_I4 = 536,
  INTRN_FETCH_AND_MPY_I4 = 537,
  INTRN_FETCH_AND_MIN_I4 = 538,
  INTRN_FETCH_AND_MAX_I4 = 539,
  INTRN_MPY_AND_FETCH_I8 = 540,
  INTRN_MIN_AND_FETCH_I8 = 541,
  INTRN_MAX_AND_FETCH_I8 = 542,
  INTRN_FETCH_AND_MPY_I8 = 543,
  INTRN_FETCH_AND_MIN_I8 = 544,
  INTRN_FETCH_AND_MAX_I8 = 545,

  INTRN_ADD_AND_FETCH_F4 = 546,
  INTRN_SUB_AND_FETCH_F4 = 547,
  INTRN_OR_AND_FETCH_F4 = 548,
  INTRN_XOR_AND_FETCH_F4 = 549,
  INTRN_AND_AND_FETCH_F4 = 550,
  INTRN_NAND_AND_FETCH_F4 = 551,
  INTRN_MPY_AND_FETCH_F4 = 552,
  INTRN_MIN_AND_FETCH_F4 = 553,
  INTRN_MAX_AND_FETCH_F4 = 554,

  INTRN_FETCH_AND_ADD_F4 = 555,
  INTRN_FETCH_AND_SUB_F4 = 556,
  INTRN_FETCH_AND_OR_F4 = 557,
  INTRN_FETCH_AND_XOR_F4 = 558,
  INTRN_FETCH_AND_AND_F4 = 559,
  INTRN_FETCH_AND_NAND_F4 = 560,
  INTRN_FETCH_AND_MPY_F4 = 561,
  INTRN_FETCH_AND_MIN_F4 = 562,
  INTRN_FETCH_AND_MAX_F4 = 563,

  INTRN_ADD_AND_FETCH_F8 = 564,
  INTRN_SUB_AND_FETCH_F8 = 565,
  INTRN_OR_AND_FETCH_F8 = 566,
  INTRN_XOR_AND_FETCH_F8 = 567,
  INTRN_AND_AND_FETCH_F8 = 568,
  INTRN_NAND_AND_FETCH_F8 = 569,
  INTRN_MPY_AND_FETCH_F8 = 570,
  INTRN_MIN_AND_FETCH_F8 = 571,
  INTRN_MAX_AND_FETCH_F8 = 572,

  INTRN_FETCH_AND_ADD_F8 = 573,
  INTRN_FETCH_AND_SUB_F8 = 574,
  INTRN_FETCH_AND_OR_F8 = 575,
  INTRN_FETCH_AND_XOR_F8 = 576,
  INTRN_FETCH_AND_AND_F8 = 577,
  INTRN_FETCH_AND_NAND_F8 = 578,
  INTRN_FETCH_AND_MPY_F8 = 579,
  INTRN_FETCH_AND_MIN_F8 = 580,
  INTRN_FETCH_AND_MAX_F8 = 581,

  INTRN_LOCK_ACQUIRE_I4 = 582,
  INTRN_LOCK_ACQUIRE_I8 = 583,





  INTRN_F90_STACKTEMPALLOC = 584,
  INTRN_F90_HEAPTEMPALLOC = 585,
  INTRN_F90_STACKTEMPFREE = 586,
  INTRN_F90_HEAPTEMPFREE = 587,

  INTRN_FIRST_F90_INTRINSIC = 588,
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic90.h" 1
# 38 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic90.h"
    INTRN_F4EXPONENT = INTRN_FIRST_F90_INTRINSIC + 0,
    INTRN_F8EXPONENT = INTRN_FIRST_F90_INTRINSIC + 1,
    INTRN_FQEXPONENT = INTRN_FIRST_F90_INTRINSIC + 2,
    INTRN_F4FRACTION = INTRN_FIRST_F90_INTRINSIC + 3,
    INTRN_F8FRACTION = INTRN_FIRST_F90_INTRINSIC + 4,
    INTRN_FQFRACTION = INTRN_FIRST_F90_INTRINSIC + 5,
    INTRN_F4MODULO = INTRN_FIRST_F90_INTRINSIC + 6,
    INTRN_F8MODULO = INTRN_FIRST_F90_INTRINSIC + 7,
    INTRN_FQMODULO = INTRN_FIRST_F90_INTRINSIC + 8,
    INTRN_F4NEAREST = INTRN_FIRST_F90_INTRINSIC + 9,
    INTRN_F8NEAREST = INTRN_FIRST_F90_INTRINSIC + 10,
    INTRN_FQNEAREST = INTRN_FIRST_F90_INTRINSIC + 11,
    INTRN_F4RRSPACING = INTRN_FIRST_F90_INTRINSIC + 12,
    INTRN_F8RRSPACING = INTRN_FIRST_F90_INTRINSIC + 13,
    INTRN_FQRRSPACING = INTRN_FIRST_F90_INTRINSIC + 14,
    INTRN_F4SCALE = INTRN_FIRST_F90_INTRINSIC + 15,
    INTRN_F8SCALE = INTRN_FIRST_F90_INTRINSIC + 16,
    INTRN_FQSCALE = INTRN_FIRST_F90_INTRINSIC + 17,
    INTRN_F4SET_EXPONENT = INTRN_FIRST_F90_INTRINSIC + 18,
    INTRN_F8SET_EXPONENT = INTRN_FIRST_F90_INTRINSIC + 19,
    INTRN_FQSET_EXPONENT = INTRN_FIRST_F90_INTRINSIC + 20,
    INTRN_F4SPACING = INTRN_FIRST_F90_INTRINSIC + 21,
    INTRN_F8SPACING = INTRN_FIRST_F90_INTRINSIC + 22,
    INTRN_FQSPACING = INTRN_FIRST_F90_INTRINSIC + 23,
    INTRN_F4NEXTAFTER = INTRN_FIRST_F90_INTRINSIC + 24,
    INTRN_F8NEXTAFTER = INTRN_FIRST_F90_INTRINSIC + 25,
    INTRN_FQNEXTAFTER = INTRN_FIRST_F90_INTRINSIC + 26,
    INTRN_F4ISNAN = INTRN_FIRST_F90_INTRINSIC + 27,
    INTRN_F8ISNAN = INTRN_FIRST_F90_INTRINSIC + 28,
    INTRN_FQISNAN = INTRN_FIRST_F90_INTRINSIC + 29,
    INTRN_F4SCALB = INTRN_FIRST_F90_INTRINSIC + 30,
    INTRN_F8SCALB = INTRN_FIRST_F90_INTRINSIC + 31,
    INTRN_FQSCALB = INTRN_FIRST_F90_INTRINSIC + 32,
    INTRN_F4IEEE_REMAINDER = INTRN_FIRST_F90_INTRINSIC + 33,
    INTRN_F8IEEE_REMAINDER = INTRN_FIRST_F90_INTRINSIC + 34,
    INTRN_FQIEEE_REMAINDER = INTRN_FIRST_F90_INTRINSIC + 35,
    INTRN_F4LOGB = INTRN_FIRST_F90_INTRINSIC + 36,
    INTRN_F8LOGB = INTRN_FIRST_F90_INTRINSIC + 37,
    INTRN_FQLOGB = INTRN_FIRST_F90_INTRINSIC + 38,
    INTRN_F4ILOGB = INTRN_FIRST_F90_INTRINSIC + 39,
    INTRN_F8ILOGB = INTRN_FIRST_F90_INTRINSIC + 40,
    INTRN_FQILOGB = INTRN_FIRST_F90_INTRINSIC + 41,
    INTRN_F4FPCLASS = INTRN_FIRST_F90_INTRINSIC + 42,
    INTRN_F8FPCLASS = INTRN_FIRST_F90_INTRINSIC + 43,
    INTRN_FQFPCLASS = INTRN_FIRST_F90_INTRINSIC + 44,
    INTRN_F4FINITE = INTRN_FIRST_F90_INTRINSIC + 45,
    INTRN_F8FINITE = INTRN_FIRST_F90_INTRINSIC + 46,
    INTRN_FQFINITE = INTRN_FIRST_F90_INTRINSIC + 47,
    INTRN_F4UNORDERED = INTRN_FIRST_F90_INTRINSIC + 48,
    INTRN_F8UNORDERED = INTRN_FIRST_F90_INTRINSIC + 49,
    INTRN_FQUNORDERED = INTRN_FIRST_F90_INTRINSIC + 50,
    INTRN_I1POPCNT = INTRN_FIRST_F90_INTRINSIC + 51,
    INTRN_I2POPCNT = INTRN_FIRST_F90_INTRINSIC + 52,
    INTRN_I4POPCNT = INTRN_FIRST_F90_INTRINSIC + 53,
    INTRN_I8POPCNT = INTRN_FIRST_F90_INTRINSIC + 54,
    INTRN_I1LEADZ = INTRN_FIRST_F90_INTRINSIC + 55,
    INTRN_I2LEADZ = INTRN_FIRST_F90_INTRINSIC + 56,
    INTRN_I4LEADZ = INTRN_FIRST_F90_INTRINSIC + 57,
    INTRN_I8LEADZ = INTRN_FIRST_F90_INTRINSIC + 58,
    INTRN_LENTRIM = INTRN_FIRST_F90_INTRINSIC + 59,
    INTRN_F90INDEX = INTRN_FIRST_F90_INTRINSIC + 60,
    INTRN_SCAN = INTRN_FIRST_F90_INTRINSIC + 61,
    INTRN_VERIFY = INTRN_FIRST_F90_INTRINSIC + 62,
    INTRN_ADJUSTL = INTRN_FIRST_F90_INTRINSIC + 63,
    INTRN_ADJUSTR = INTRN_FIRST_F90_INTRINSIC + 64,
    INTRN_GET_IEEE_EXCEPTIONS = INTRN_FIRST_F90_INTRINSIC + 65,
    INTRN_GET_IEEE_INTERRUPTS = INTRN_FIRST_F90_INTRINSIC + 66,
    INTRN_GET_IEEE_ROUNDING_MODE = INTRN_FIRST_F90_INTRINSIC + 67,
    INTRN_GET_IEEE_STATUS = INTRN_FIRST_F90_INTRINSIC + 68,
    INTRN_SET_IEEE_EXCEPTIONS = INTRN_FIRST_F90_INTRINSIC + 69,
    INTRN_SET_IEEE_EXCEPTION = INTRN_FIRST_F90_INTRINSIC + 70,
    INTRN_SET_IEEE_INTERRUPTS = INTRN_FIRST_F90_INTRINSIC + 71,
    INTRN_SET_IEEE_ROUNDING_MODE = INTRN_FIRST_F90_INTRINSIC + 72,
    INTRN_SET_IEEE_STATUS = INTRN_FIRST_F90_INTRINSIC + 73,
    INTRN_ENABLE_IEEE_INTERRUPT = INTRN_FIRST_F90_INTRINSIC + 74,
    INTRN_DISABLE_IEEE_INTERRUPT = INTRN_FIRST_F90_INTRINSIC + 75,
    INTRN_TEST_IEEE_EXCEPTION = INTRN_FIRST_F90_INTRINSIC + 76,
    INTRN_TEST_IEEE_INTERRUPT = INTRN_FIRST_F90_INTRINSIC + 77,
    INTRN_MATMUL = INTRN_FIRST_F90_INTRINSIC + 78,
    INTRN_SPREAD = INTRN_FIRST_F90_INTRINSIC + 79,
    INTRN_RESHAPE = INTRN_FIRST_F90_INTRINSIC + 80,
    INTRN_TRANSPOSE = INTRN_FIRST_F90_INTRINSIC + 81,
    INTRN_ALL = INTRN_FIRST_F90_INTRINSIC + 82,
    INTRN_ANY = INTRN_FIRST_F90_INTRINSIC + 83,
    INTRN_COUNT = INTRN_FIRST_F90_INTRINSIC + 84,
    INTRN_PRODUCT = INTRN_FIRST_F90_INTRINSIC + 85,
    INTRN_SUM = INTRN_FIRST_F90_INTRINSIC + 86,
    INTRN_EOSHIFT = INTRN_FIRST_F90_INTRINSIC + 87,
    INTRN_MAXVAL = INTRN_FIRST_F90_INTRINSIC + 88,
    INTRN_MINVAL = INTRN_FIRST_F90_INTRINSIC + 89,
    INTRN_MAXLOC = INTRN_FIRST_F90_INTRINSIC + 90,
    INTRN_MINLOC = INTRN_FIRST_F90_INTRINSIC + 91,
    INTRN_CSHIFT = INTRN_FIRST_F90_INTRINSIC + 92,
    INTRN_DOT_PRODUCT = INTRN_FIRST_F90_INTRINSIC + 93,
    INTRN_PACK = INTRN_FIRST_F90_INTRINSIC + 94,
    INTRN_UNPACK = INTRN_FIRST_F90_INTRINSIC + 95,
    INTRN_MERGE = INTRN_FIRST_F90_INTRINSIC + 96,
    INTRN_CHAR = INTRN_FIRST_F90_INTRINSIC + 97,

    INTRN_LAST_F90_INTRINSIC = INTRN_FIRST_F90_INTRINSIC + 97,
# 958 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h" 2

  INTRN_MP_IN_PARALLEL_REGION = INTRN_LAST_F90_INTRINSIC + 1,
  INTRN_RT_ERR = INTRN_LAST_F90_INTRINSIC + 2,
  INTRN_OMP_DO_WORKSHARING = INTRN_LAST_F90_INTRINSIC + 3,
  INTRN_OMP_TEST_LOCK = INTRN_LAST_F90_INTRINSIC + 4,
  INTRN_OMP_GET_NUM_THREADS = INTRN_LAST_F90_INTRINSIC + 5,
  INTRN_OMP_GET_MAX_THREADS = INTRN_LAST_F90_INTRINSIC + 6,
  INTRN_OMP_GET_THREAD_NUM = INTRN_LAST_F90_INTRINSIC + 7,
  INTRN_OMP_GET_NUM_PROCS = INTRN_LAST_F90_INTRINSIC + 8,
  INTRN_OMP_IN_PARALLEL = INTRN_LAST_F90_INTRINSIC + 9,
  INTRN_OMP_GET_DYNAMIC = INTRN_LAST_F90_INTRINSIC + 10,
  INTRN_OMP_GET_NESTED = INTRN_LAST_F90_INTRINSIC + 11,



    INTRN_I1IEEE_INT = INTRN_LAST_F90_INTRINSIC + 12,
    INTRN_I2IEEE_INT = INTRN_LAST_F90_INTRINSIC + 13,
    INTRN_I4IEEE_INT = INTRN_LAST_F90_INTRINSIC + 14,
    INTRN_I8IEEE_INT = INTRN_LAST_F90_INTRINSIC + 15,
    INTRN_F4IEEE_INT = INTRN_LAST_F90_INTRINSIC + 16,
    INTRN_F8IEEE_INT = INTRN_LAST_F90_INTRINSIC + 17,
    INTRN_FQIEEE_INT = INTRN_LAST_F90_INTRINSIC + 18,
    INTRN_F90BOUNDS_CHECK = INTRN_LAST_F90_INTRINSIC + 19,


    INTRN_F90_DYNAMICTEMPALLOC = INTRN_LAST_F90_INTRINSIC + 20,
    INTRN_F90_DYNAMICTEMPFREE = INTRN_LAST_F90_INTRINSIC + 21,


    INTRN_F90CONFORM_CHECK = INTRN_LAST_F90_INTRINSIC + 22,





  INTRN_C_F4FLOOR = 708,
  INTRN_C_F8FLOOR = 709,
  INTRN_C_FQFLOOR = 710,
  INTRN_C_F4CEIL = 711,
  INTRN_C_F8CEIL = 712,
  INTRN_C_FQCEIL = 713,
  INTRN_C_F4TRUNC = 714,
  INTRN_C_F8TRUNC = 715,
  INTRN_C_FQTRUNC = 716,



  INTRN_I4DSHIFTL = 717,
  INTRN_I8DSHIFTL = 718,
  INTRN_I4DSHIFTR = 719,
  INTRN_I8DSHIFTR = 720,
  INTRN_I4GBIT = 721,
  INTRN_I8GBIT = 722,
  INTRN_I4GBITS = 723,
  INTRN_I8GBITS = 724,
  INTRN_I4MASK = 725,
  INTRN_I8MASK = 726,
  INTRN_I4MASKL = 727,
  INTRN_I8MASKL = 728,
  INTRN_I4MASKR = 729,
  INTRN_I8MASKR = 730,
  INTRN_I4PBIT = 731,
  INTRN_I8PBIT = 732,
  INTRN_I4PBITS = 733,
  INTRN_I8PBITS = 734,
  INTRN_I4POPPAR = 735,
  INTRN_I8POPPAR = 736,
  INTRN_I4RTC = 737,
  INTRN_I8RTC = 738,

  INTRN_GETF_EXP = 739,
  INTRN_SETF_EXP = 740,
  INTRN_GETF_SIG = 741,
  INTRN_SETF_SIG = 742,

  INTRN_FMERGE_NS = 743,
  INTRN_FMERGE_S = 744,
  INTRN_FMERGE_SE = 745,


  INTRN_STOP_F90 = 746,


  INTRN_F4VLOG10 = 747,
  INTRN_F8VLOG10 = 748,


  INTRN_MODSI3 = 749,
  INTRN_UMODSI3 = 750,
  INTRN_DIVSI3 = 751,
  INTRN_UDIVSI3 = 752,
  INTRN_MODDI3 = 753,
  INTRN_UMODDI3 = 754,
  INTRN_DIVDI3 = 755,
  INTRN_UDIVDI3 = 756,
  INTRN_DIVSF3 = 757,
  INTRN_DIVDF3 = 758,


  INTRN_I4FFS = 759,


  INTRN_SINCOSF = 760,
  INTRN_SINCOS = 761,
  INTRN_SINCOSL = 762,



  INTRN_U4READFRAMEPOINTER = 763,
  INTRN_U8READFRAMEPOINTER = 764,
  INTRN_APPLY_ARGS = 765,
  INTRN_APPLY = 766,
  INTRN_RETURN = 767,


  INTRN_VA_START = 768,
  INTRN_SAVE_XMMS = 769,


  INTRN_CONSTANT_P = 770,


  INTRN_ISGREATER = 771,
  INTRN_ISGREATEREQUAL = 772,
  INTRN_ISLESS = 773,
  INTRN_ISLESSEQUAL = 774,
  INTRN_ISLESSGREATER = 775,
  INTRN_ISORDERED = 776,
  INTRN_ISUNORDERED = 777,


  INTRN_SUBSU2 = 778,
  INTRN_SUBSV16I2 = 779,


  INTRN_POPCOUNT = 780,
  INTRN_PARITY = 781,
  INTRN_CLZ = 782,
  INTRN_CTZ64 = 783,
  INTRN_CLZ32 = 784,
  INTRN_CTZ = 785,
# 1274 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
  INTRN_SL_INTRN_BGN = 785 +1,
  INTRN_VBUF_OFFSET = INTRN_SL_INTRN_BGN,
  INTRN_SBUF_OFFSET = INTRN_SL_INTRN_BGN+1,
  INTRN_C2_MVGR_R2G = INTRN_SL_INTRN_BGN+2,
  INTRN_C2_MVGR_G2R = INTRN_SL_INTRN_BGN+3,
  INTRN_C2_MVGR_G2S = INTRN_SL_INTRN_BGN+4,
  INTRN_C2_MVGR_S2G = INTRN_SL_INTRN_BGN+5,
  INTRN_C2_MVGC_C2G = INTRN_SL_INTRN_BGN+6,
  INTRN_C2_MVGC_G2C = INTRN_SL_INTRN_BGN+7,
  INTRN_C2_LD_V = INTRN_SL_INTRN_BGN+8,
  INTRN_C2_LD_G = INTRN_SL_INTRN_BGN+9,
  INTRN_C2_LD_S = INTRN_SL_INTRN_BGN+10,
  INTRN_C2_ST_V = INTRN_SL_INTRN_BGN+11,
  INTRN_C2_ST_G = INTRN_SL_INTRN_BGN+12,
  INTRN_C2_LD_G_IMM = INTRN_SL_INTRN_BGN+13,
  INTRN_C2_LD_C_IMM = INTRN_SL_INTRN_BGN+14,
  INTRN_C2_LD_V_IMM = INTRN_SL_INTRN_BGN+15,
  INTRN_C2_ST_V_IMM = INTRN_SL_INTRN_BGN+16,
  INTRN_C2_ST_C_IMM = INTRN_SL_INTRN_BGN+17,
  INTRN_C2_ST_G_IMM = INTRN_SL_INTRN_BGN+18,
  INTRN_C2_VADDS = INTRN_SL_INTRN_BGN+19,
  INTRN_C2_VSUBS = INTRN_SL_INTRN_BGN+20,
  INTRN_C2_VMUL = INTRN_SL_INTRN_BGN+21,
  INTRN_C2_VNEG = INTRN_SL_INTRN_BGN+22,
  INTRN_C2_VMACS = INTRN_SL_INTRN_BGN+23,
  INTRN_C2_VSHFT = INTRN_SL_INTRN_BGN+24,
  INTRN_C2_VCLP = INTRN_SL_INTRN_BGN+25,
  INTRN_C2_VCLG = INTRN_SL_INTRN_BGN+26,
  INTRN_C2_VCMOV = INTRN_SL_INTRN_BGN+27,
  INTRN_C2_LCZERO = INTRN_SL_INTRN_BGN+28,
  INTRN_C2_VRND = INTRN_SL_INTRN_BGN+29,
  INTRN_C2_VSPAS = INTRN_SL_INTRN_BGN+30,
  INTRN_C2_VSPEL = INTRN_SL_INTRN_BGN+31,
  INTRN_C2_MMUL_S123 = INTRN_SL_INTRN_BGN+32,
  INTRN_C2_MMUL = INTRN_SL_INTRN_BGN+33,
  INTRN_C2_VMOV = INTRN_SL_INTRN_BGN+34,
  INTRN_C2_VCOPY = INTRN_SL_INTRN_BGN+35,
  INTRN_C2_VCMPR = INTRN_SL_INTRN_BGN+36,
  INTRN_C2_SAD = INTRN_SL_INTRN_BGN+37,
  INTRN_C2_SATD = INTRN_SL_INTRN_BGN+38,
  INTRN_C2_INTRA = INTRN_SL_INTRN_BGN+39,
  INTRN_C2_MVSEL = INTRN_SL_INTRN_BGN+40,
  INTRN_C2_BCST = INTRN_SL_INTRN_BGN+41,
  INTRN_C2_VLCS = INTRN_SL_INTRN_BGN+42,
  INTRN_C2_VLCS_R = INTRN_SL_INTRN_BGN+43,
  INTRN_C2_ADDS = INTRN_SL_INTRN_BGN+44,
  INTRN_C2_ADDS_R = INTRN_SL_INTRN_BGN+45,
  INTRN_C2_SUBS = INTRN_SL_INTRN_BGN+46,
  INTRN_C2_SUBS_R = INTRN_SL_INTRN_BGN+47,
  INTRN_C2_MULS = INTRN_SL_INTRN_BGN+48,
  INTRN_C2_MULS_R = INTRN_SL_INTRN_BGN+49,
  INTRN_C2_MADS = INTRN_SL_INTRN_BGN+50,
  INTRN_C2_SMADS = INTRN_SL_INTRN_BGN+51,
  INTRN_C2_MINMAX = INTRN_SL_INTRN_BGN+52,
  INTRN_C2_CMOV = INTRN_SL_INTRN_BGN+53,
  INTRN_C2_MOV = INTRN_SL_INTRN_BGN+54,
  INTRN_C2_MOV_R = INTRN_SL_INTRN_BGN+55,
  INTRN_C2_CLP = INTRN_SL_INTRN_BGN+56,
  INTRN_C2_CHKRNG = INTRN_SL_INTRN_BGN+57,
  INTRN_C2_SCOND = INTRN_SL_INTRN_BGN+58,
  INTRN_C2_SCOND_R = INTRN_SL_INTRN_BGN+59,
  INTRN_C2_BOP = INTRN_SL_INTRN_BGN+60,
  INTRN_C2_BDEP = INTRN_SL_INTRN_BGN+61,
  INTRN_C2_BXTR = INTRN_SL_INTRN_BGN+62,
  INTRN_C2_SUM4 = INTRN_SL_INTRN_BGN+63,
  INTRN_C2_SUM4_R = INTRN_SL_INTRN_BGN+64,
  INTRN_C2_MED = INTRN_SL_INTRN_BGN+65,
  INTRN_OP_C2_SCOND_BR = INTRN_SL_INTRN_BGN+66,
  INTRN_OP_C2_SCOND_BR_R = INTRN_SL_INTRN_BGN+67,
  INTRN_C2_BR_F = INTRN_SL_INTRN_BGN+68,
  INTRN_C2_BR_T = INTRN_SL_INTRN_BGN+69,
  INTRN_C2_FORK = INTRN_SL_INTRN_BGN+70,
  INTRN_C2_JOINT = INTRN_SL_INTRN_BGN+71,
  INTRN_C2_LD_V2G = INTRN_SL_INTRN_BGN+72,
  INTRN_C2_ST_G2V = INTRN_SL_INTRN_BGN+73,
  INTRN_C2_LD_V2G_IMM= INTRN_SL_INTRN_BGN+74,
  INTRN_C2_ST_G2V_IMM = INTRN_SL_INTRN_BGN+75,
  INTRN_C2_MVGR_R2S = INTRN_SL_INTRN_BGN+76,
  INTRN_C2_GSUMS = INTRN_SL_INTRN_BGN+77,
  INTRN_C2_WRAP = INTRN_SL_INTRN_BGN+78,
  INTRN_C2_CLZOB = INTRN_SL_INTRN_BGN+79,
  INTRN_C2_THCTRL = INTRN_SL_INTRN_BGN+80,
  INTRN_C2_SCOND_R_WB = INTRN_SL_INTRN_BGN+81,
  INTRN_C2_VSPEL_MAC = INTRN_SL_INTRN_BGN+82,
  INTRN_C2_SUM3_SADDR = INTRN_SL_INTRN_BGN + 83,
  INTRN_C2_THREAD_MAJOR = INTRN_SL_INTRN_BGN+84,
  INTRN_C2_THREAD_MINOR = INTRN_SL_INTRN_BGN+85,
  INTRN_PERIPHERAL_RW_BEGIN = INTRN_SL_INTRN_BGN+86,
  INTRN_PERIPHERAL_RW_END = INTRN_SL_INTRN_BGN+87,
  INTRN_SL_INTRN_END = INTRN_PERIPHERAL_RW_END,
  INTRN_SL2_BEGIN = INTRN_C2_MVGR_R2G,
  INTRN_SL2_END = INTRN_PERIPHERAL_RW_END,
  INTRN_C3_INTRINSIC_BEGIN = INTRN_SL2_END+1,
  INTRN_MUL_SHIFT_HI = INTRN_C3_INTRINSIC_BEGIN,
  INTRN_MUL_SHIFT = INTRN_C3_INTRINSIC_BEGIN + 1,
  INTRN_C3_LEAD = INTRN_C3_INTRINSIC_BEGIN + 2,
  INTRN_C3_MAC = INTRN_C3_INTRINSIC_BEGIN + 3,
  INTRN_C3_MACN = INTRN_C3_INTRINSIC_BEGIN + 4,
  INTRN_C3_ROUND = INTRN_C3_INTRINSIC_BEGIN + 5,
  INTRN_C3_SAADDS = INTRN_C3_INTRINSIC_BEGIN + 6,
  INTRN_C3_SASUBS = INTRN_C3_INTRINSIC_BEGIN + 7,
  INTRN_C3_MULA = INTRN_C3_INTRINSIC_BEGIN + 8,
  INTRN_C3_INIT_ACC = INTRN_C3_INTRINSIC_BEGIN + 9,
  INTRN_C3_SAVE_ACC = INTRN_C3_INTRINSIC_BEGIN +10,
  INTRN_C3_TRBACK = INTRN_C3_INTRINSIC_BEGIN + 11,
  INTRN_MPY_32_16 = INTRN_C3_INTRINSIC_BEGIN + 12,
  INTRN_C3_MACD = INTRN_C3_INTRINSIC_BEGIN +13,
  INTRN_C3_MULAD = INTRN_C3_INTRINSIC_BEGIN +14,
  INTRN_C3_SAADDSH = INTRN_C3_INTRINSIC_BEGIN +15,
  INTRN_C3_SASUBSH = INTRN_C3_INTRINSIC_BEGIN + 16,
  INTRN_C3_MVFS = INTRN_C3_INTRINSIC_BEGIN + 17,
  INTRN_C3_INIT_ADDR = INTRN_C3_INTRINSIC_BEGIN + 18,
  INTRN_C3_SAVE_ADDR = INTRN_C3_INTRINSIC_BEGIN +19,
  INTRN_C3_MAC_A = INTRN_C3_INTRINSIC_BEGIN +20,
  INTRN_C3_MACN_A = INTRN_C3_INTRINSIC_BEGIN +21,
  INTRN_C3_DMAC_A = INTRN_C3_INTRINSIC_BEGIN +22,
  INTRN_C3_DMACN_A = INTRN_C3_INTRINSIC_BEGIN + 23,
  INTRN_C3_INIT_DACC = INTRN_C3_INTRINSIC_BEGIN +24,
  INTRN_C3_SAVE_DACC = INTRN_C3_INTRINSIC_BEGIN + 25,
  INTRN_C3_SAADDH_A = INTRN_C3_INTRINSIC_BEGIN + 26,
  INTRN_C3_SASUBH_A = INTRN_C3_INTRINSIC_BEGIN + 27,
  INTRN_C3_SAMULSH = INTRN_C3_INTRINSIC_BEGIN + 28,
  INTRN_C3_MULA_A = INTRN_C3_INTRINSIC_BEGIN + 29,
  INTRN_C3_SAMULH_A = INTRN_C3_INTRINSIC_BEGIN + 30,
  INTRN_C3_PTR = INTRN_C3_INTRINSIC_BEGIN +31,
  INTRN_C3_MAC_AR = INTRN_C3_INTRINSIC_BEGIN +32,
  INTRN_C3_MACN_AR = INTRN_C3_INTRINSIC_BEGIN +33,
  INTRN_C3_MULA_AR = INTRN_C3_INTRINSIC_BEGIN + 34,
  INTRN_C3_INIT_PTR = INTRN_C3_INTRINSIC_BEGIN +35,
  INTRN_C3_VITERBI = INTRN_C3_INTRINSIC_BEGIN +36,
  INTRN_C3_DMULT = INTRN_C3_INTRINSIC_BEGIN +37,
  INTRN_C3_DMULT_A = INTRN_C3_INTRINSIC_BEGIN + 38,
  INTRN_C3_DMULTN = INTRN_C3_INTRINSIC_BEGIN + 39,
  INTRN_C3_DMULTN_A = INTRN_C3_INTRINSIC_BEGIN + 40,
  INTRN_SET_CIRCBUF = INTRN_C3_INTRINSIC_BEGIN + 41,
  INTRN_RESET_CIRCBUF = INTRN_C3_INTRINSIC_BEGIN + 42,
  INTRN_C3_DADD = INTRN_C3_INTRINSIC_BEGIN + 43,
  INTRN_C3_DSUB = INTRN_C3_INTRINSIC_BEGIN + 44,
  INTRN_C3_FFT = INTRN_C3_INTRINSIC_BEGIN + 45,
  INTRN_C3_FFTLD = INTRN_C3_INTRINSIC_BEGIN + 46,
  INTRN_C3_FFTST = INTRN_C3_INTRINSIC_BEGIN + 47,
  INTRN_DEPOSIT = INTRN_C3_INTRINSIC_BEGIN + 48,
  INTRN_EXTRACT = INTRN_C3_INTRINSIC_BEGIN + 49,
  INTRN_C3_BITR = INTRN_C3_INTRINSIC_BEGIN + 50,
  INTRN_C3_DMAC = INTRN_C3_INTRINSIC_BEGIN + 51,
  INTRN_C3_DMACN = INTRN_C3_INTRINSIC_BEGIN + 52,
  INTRN_C3_LOAD = INTRN_C3_INTRINSIC_BEGIN + 53,
  INTRN_C3_STORE = INTRN_C3_INTRINSIC_BEGIN + 54,
  INTRN_C3_REVB = INTRN_C3_INTRINSIC_BEGIN + 55,
  INTRN_C3_DSHL_I = INTRN_C3_INTRINSIC_BEGIN + 56,
  INTRN_C3_DSHR_I = INTRN_C3_INTRINSIC_BEGIN + 57,
  INTRN_C3_MAC_I = INTRN_C3_INTRINSIC_BEGIN + 58,
  INTRN_C3_MACN_I = INTRN_C3_INTRINSIC_BEGIN + 59,
  INTRN_C3_MULA_I = INTRN_C3_INTRINSIC_BEGIN + 60,
  INTRN_C3_SAADD_A = INTRN_C3_INTRINSIC_BEGIN + 61,
  INTRN_C3_SADDHA = INTRN_C3_INTRINSIC_BEGIN + 62,
  INTRN_C3_SAADDHA_A = INTRN_C3_INTRINSIC_BEGIN + 63,
  INTRN_C3_SASUB_A = INTRN_C3_INTRINSIC_BEGIN + 64,
  INTRN_C3_COPY_ADDR = INTRN_C3_INTRINSIC_BEGIN + 65,
  INTRN_C3_SET_ADDR = INTRN_C3_INTRINSIC_BEGIN + 66,
  INTRN_CVT64_HIGH = INTRN_C3_INTRINSIC_BEGIN + 67,
  INTRN_CVT64_LOW = INTRN_C3_INTRINSIC_BEGIN + 68,
  INTRN_CVT32 = INTRN_C3_INTRINSIC_BEGIN + 69,
  INTRN_C3_INTRINSIC_END = INTRN_CVT32,
  INTRN_EXPECT = INTRN_C3_INTRINSIC_END + 1,
  INTRINSIC_LAST = INTRN_EXPECT,
# 1452 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wintrinsic.h"
} INTRINSIC;


}
# 53 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h" 2


# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wio.h" 1
# 91 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wio.h"
extern "C" {



typedef enum {

  IOSTATEMENT_FIRST = 1,




    IOS_BACKSPACE = 1,
    IOS_CLOSE = 2,
    IOS_DEFINEFILE = 3,
    IOS_DELETE = 4,
    IOS_ENDFILE = 5,
    IOS_FIND = 6,
    IOS_INQUIRE = 7,
    IOS_NAMELIST = 8,
    IOS_OPEN = 9,
    IOS_REWIND = 10,
    IOS_UNLOCK = 11,




    IOS_ACCEPT = 12,
    IOS_DECODE = 13,
    IOS_ENCODE = 14,
    IOS_PRINT = 15,
    IOS_READ = 16,
    IOS_REWRITE = 17,
    IOS_TYPE = 18,
    IOS_WRITE = 19,



    IOS_CR_FWU = 20,
    IOS_CR_FRU = 21,
    IOS_CR_FWF = 22,
    IOS_CR_FRF = 23,
    IOS_CR_FWN = 24,
    IOS_CR_FRN = 25,
    IOS_INQLENGTH = 26,
    IOS_CR_OPEN = 27,
    IOS_CR_CLOSE = 28,
    IOS_CR_ENDFILE = 29,
    IOS_CR_REWIND = 30,
    IOS_CR_INQUIRE = 31,
    IOS_CR_BACKSPACE = 32,
    IOS_CR_BUFFERIN = 33,
    IOS_CR_BUFFEROUT = 34,





  IOSTATEMENT_LAST = 34

} IOSTATEMENT;


typedef enum {

  IOITEM_ERROR = 0,

  IOITEM_FIRST = 1,



    IOU_ERROR = IOITEM_ERROR,
    IOU_NONE = 1,
    IOU_DEFAULT = 2,
    IOU_EXTERNAL = 3,
    IOU_INTERNAL = 4,
    IOU_DOPE = 5,



    IOF_ERROR = IOITEM_ERROR,
    IOF_NONE = 10,
    IOF_ASSIGNED_VAR = 11,
    IOF_CHAR_EXPR = 12,
    IOF_LABEL = 13,
    IOF_LIST_DIRECTED = 14,
    IOF_NAMELIST_DIRECTED = 15,
    IOF_UNFORMATTED = 16,
    IOF_CR_PARSFMT = 17,
    IOF_CR_FMTSRC = 18,
    IOF_CR_FMTSRC_DOPE = 19,





    IOC_ERROR = IOITEM_ERROR,
    IOC_ACCESS = 25,
    IOC_ASSOCIATEVARIABLE = 26,
    IOC_BLANK = 27,
    IOC_CARRIAGECONTROL = 28,
    IOC_DEFAULTFILE = 29,
    IOC_DIRECT = 30,
    IOC_DISPOSE = 31,
    IOC_END = 32,
    IOC_ERR = 33,
    IOC_EXIST = 34,
    IOC_FILE = 35,
    IOC_FORM = 36,
    IOC_FORMATTED = 37,
    IOC_IOSTAT = 38,
    IOC_KEY = 39,
    IOC_KEYEQ = 40,
    IOC_KEYGE = 41,
    IOC_KEYGT = 42,
    IOC_KEY_START = 43,
    IOC_KEY_END = 44,
    IOC_KEY_CHARACTER = 45,
    IOC_KEY_INTEGER = 46,
    IOC_KEYED = 47,
    IOC_KEYID = 48,
    IOC_MAXREC = 49,
    IOC_NAME = 50,
    IOC_NAMED = 51,
    IOC_NEXTREC = 52,
    IOC_NML = 53,
    IOC_NUMBER = 54,
    IOC_OPENED = 55,
    IOC_ORGANIZATION = 56,
    IOC_READONLY = 57,
    IOC_REC = 58,
    IOC_RECCOUNT = 59,
    IOC_RECL = 60,
    IOC_RECORDTYPE = 61,
    IOC_SEQUENTIAL = 62,
    IOC_SHARED = 63,
    IOC_STATUS = 64,
    IOC_TYPE = 65,
    IOC_U = 66,
    IOC_UNFORMATTED = 67,
    IOC_VARFMT = 68,
    IOC_VARFMT_ORIGFMT = 69,
    IOC_CR_EEEFLAG = 70,
    IOC_ADVANCE = 71,
    IOC_SIZE = 72,
    IOC_CR_FLFLAG = 73,
    IOC_EOR = 74,
    IOC_INQLENGTH_VAR = 75,
    IOC_CR_EDFLAG = 76,
    IOC_PAD = 77,
    IOC_DELIM = 78,
    IOC_ACTION = 79,
    IOC_POSITION = 80,
    IOC_READWRITE = 81,
    IOC_WRITE = 82,
    IOC_READ = 83,
    IOC_ERRFLAG = 84,





    IOL_ARRAY = 95,
    IOL_CHAR = 96,
    IOL_CHAR_ARRAY = 97,
    IOL_EXPR = 98,
    IOL_IMPLIED_DO = 99,
    IOL_IMPLIED_DO_1TRIP = 100,
    IOL_LOGICAL = 101,
    IOL_RECORD = 102,
    IOL_VAR = 103,
    IOL_DOPE = 104,



  IOITEM_LAST = 114

} IOITEM;

typedef enum {
  IOLIB_UNSPECIFIED = 0,
  IOLIB_MIPS = 1,
  IOLIB_CRAY = 2,

  IOLIB_LAST = 2
} IOLIB;


}
# 56 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h" 2
# 387 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
class WN;
class STMT_WN;

typedef INT32 WN_OFFSET;
typedef INT64 WN_ESIZE;
typedef INT32 WN_MAP_ID;

typedef enum REGION_KIND {
  REGION_KIND_PRAGMA = 0x0,
  REGION_KIND_FUNC_ENTRY = 0x1,
  REGION_KIND_LOOP = 0x2,
  REGION_KIND_OLIMIT = 0x3,
  REGION_KIND_MP = 0x4,
  REGION_KIND_RPI = 0x5,
  REGION_KIND_COLD = 0x6,
  REGION_KIND_SWP = 0x7,

  REGION_KIND_EH = 0x8,
  REGION_KIND_TRY = 0x8,
  REGION_KIND_CLEANUP = 0x9,
  REGION_KIND_EXC_SPEC = 0xa,
  REGION_KIND_MASK = 0xb,
  REGION_KIND_GUARD = 0xc,
  REGION_KIND_NULL_CLEANUP = 0xd,



  REGION_KIND_SL2_ENCLOSING_REGION = 0x10,
  REGION_KIND_MINOR = 0x11,
  REGION_KIND_MAJOR = 0x12,
  REGION_KIND_HOT = 0x40,


} REGION_KIND;

class WN {
public:
   union {
      struct {
  union {
     WN_OFFSET load_offset;
     WN_OFFSET lda_offset;
     WN_OFFSET store_offset;
     WN_OFFSET idname_offset;
     INT32 num_entries;
     TY_IDX loadx_addr_ty;
     INT16 cvtl_bits;
     INT32 label_number;
     UINT32 call_flag;
     UINT32 if_flag;
     UINT32 io_flag;
     UINT32 asm_flag;
     UINT32 asm_operand_num;
     struct {
  mUINT16 trip_est;
  mUINT16 loop_depth;
     } li;
            struct {
                mUINT16 pragma_flags;
                mUINT16 pragma_id;
            } pragma;
     TY_IDX io_item_ty;
            struct {

                REGION_KIND region_kind: 7;
                mUINT32 region_id :25;





            } region;
  } ua;
  union {
     ST_IDX st_idx;
     TY_IDX ty;

     INT32 id;
     INTRINSIC intrinsic;
     IOSTATEMENT iostatement;
     IOITEM ioitem;
     UINT32 prefetch_flag;
     UINT32 loop_flag;
     INT32 last_label;
     INITO_IDX ereg_supp;
            UINT32 label_level;
  } ub;
      } uu;
      WN_ESIZE element_size;
   } u1u2;




   struct {
      OPERATOR wn_operator : 8;
      TYPE_ID rtype : 6;
      mUINT32 kid_count :14;
      mINT64 map_id :30;
      TYPE_ID desc : 6;
   } common;

   union {
     struct {
       WN *dummy1;
       TY_IDX ty;
     } ty_fields;
     WN *kids[2];
     INT64 const_val;
     struct {
       UINT32 num_inputs;
       UINT32 num_clobbers;
     } asm_fields;
     struct {
       WN *dummy2;
       UINT32 label_flag;
     } label_flag_fields;
     struct {
       WN *first;
       WN *last;
     } block;

      union {
        INT64 pragma_arg64;
        struct {
           INT32 pragma_arg1;
    union {
      INT32 pragma_arg2;
      struct {
        mUINT32 pragma_asm_opnd_num : 8;
        PREG_NUM pragma_asm_copyout_preg : 24;
      } asm_pragma;
    };
        } up1;
        struct {
           mINT16 pragma_pad1;
           mINT8 pragma_distr_type;
           mINT8 pragma_index;
           INT32 pragma_preg;
        } up2;
      } pragma;
   } u3;



   struct
  {
     BOOL vbuf_ofst_adjusted;
     BOOL is_internal_mem_ofst;
     BOOL compgoto_para;
     BOOL compgoto_for_minor;
  }sl_ext;




   UINT32 div_in_actual;
# 563 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
  WN () {}
#pragma set woff 3201
  WN (const WN& wn) {}
  WN (const WN* wn) {}
#pragma set woff 1116
  WN& operator= (const WN& wn) {}
#pragma reset woff 1116
#pragma reset woff 3201
  ~WN () {}

public:

  friend inline WN_OFFSET WN_load_offset (const WN *);
  friend inline WN_OFFSET& WN_load_offset (WN *);
  friend inline WN_OFFSET WN_lda_offset (const WN *);
  friend inline WN_OFFSET& WN_lda_offset (WN *);
  friend inline WN_OFFSET WN_store_offset (const WN *);
  friend inline WN_OFFSET& WN_store_offset (WN *);
  friend inline WN_OFFSET WN_idname_offset (const WN *);
  friend inline WN_OFFSET& WN_idname_offset (WN *);
  friend inline WN_OFFSET WN_offset (const WN *);
  friend inline WN_OFFSET& WN_offset (WN *);
  friend inline INT32 WN_num_entries (const WN *);
  friend inline INT32& WN_num_entries (WN *);


  friend inline INT16 WN_cvtl_bits (const WN *);
  friend inline INT16& WN_cvtl_bits (WN *);
  friend inline INT32& WN_label_number (WN *);
  friend inline INT32 WN_label_number (const WN *);
  friend inline UINT32& WN_call_flag (WN *);
  friend inline UINT32 WN_call_flag (const WN *);
  friend inline UINT32& WN_if_flag (WN *);
  friend inline UINT32 WN_if_flag (const WN *);
  friend inline UINT32& WN_io_flag (WN *);
  friend inline UINT32 WN_io_flag (const WN *);
  friend inline UINT32& WN_asm_flag (WN *);
  friend inline UINT32 WN_asm_flag (const WN *);
  friend inline UINT32& WN_asm_num_inputs (WN *);
  friend inline UINT32 WN_asm_num_inputs (const WN *);
  friend inline UINT32& WN_asm_num_clobbers (WN *);
  friend inline UINT32 WN_asm_num_clobbers (const WN *);
  friend inline char * WN_asm_string (const WN *);
  friend inline char * WN_asm_input_constraint (const WN *);
  friend inline UINT32 WN_asm_opnd_num(const WN *);
  friend inline UINT32& WN_label_level (WN *);
  friend inline UINT32 WN_label_level (const WN *);

  friend inline mUINT16 WN_loop_trip_est (const WN *);
  friend inline mUINT16& WN_loop_trip_est (WN *);
  friend inline mUINT16 WN_loop_depth (const WN *);
  friend inline mUINT16& WN_loop_depth (WN *);

  friend inline mUINT16 WN_pragma_flags (const WN *);
  friend inline mUINT16& WN_pragma_flags (WN *);
  friend inline mUINT16 WN_pragma (const WN *);
  friend inline mUINT16& WN_pragma (WN *);
  friend inline UINT32 WN_pragma_asm_opnd_num (const WN *);
  friend inline void WN_set_pragma_asm_opnd_num (WN *, UINT32);




  friend inline REGION_KIND WN_region_kind (const WN *);
  friend inline void WN_set_region_kind (WN *, REGION_KIND);
  friend inline mUINT32 WN_region_id (const WN *);
  friend inline void WN_set_region_id (WN *, mUINT32);

  friend inline ST_IDX WN_st_idx (const WN *);
  friend inline ST_IDX& WN_st_idx (WN *);


  friend inline INTRINSIC WN_intrinsic (const WN *);
  friend inline INTRINSIC& WN_intrinsic (WN *);
  friend inline IOSTATEMENT WN_io_statement(const WN *);
  friend inline IOSTATEMENT& WN_io_statement(WN *);
  friend inline IOITEM WN_io_item(const WN *);
  friend inline IOITEM& WN_io_item(WN *);


  friend inline UINT32 WN_prefetch_flag (const WN *);
  friend inline UINT32& WN_prefetch_flag (WN *);
  friend inline UINT32 WN_loop_flag (const WN *);
  friend inline UINT32& WN_loop_flag (WN *);
  friend inline INT32 WN_last_label (const WN *);
  friend inline INT32& WN_last_label (WN *);
  friend inline INITO_IDX WN_ereg_supp (const WN *);
  friend inline INITO_IDX& WN_ereg_supp (WN *);

  friend inline WN_ESIZE WN_element_size (const WN *);
  friend inline WN_ESIZE& WN_element_size (WN *);

  friend inline OPERATOR WN_operator (const WN *);
  friend inline void WN_set_operator (WN *, OPERATOR);
  friend inline TYPE_ID WN_rtype (const WN *);
  friend inline void WN_set_rtype (WN *, TYPE_ID);
  friend inline INT WN_kid_count (const WN *);
  friend inline void WN_set_kid_count (WN *, UINT);
  friend inline UINT WN_field_id (const WN *);
  friend inline void WN_set_field_id (WN *, UINT);
  friend inline UINT WN_bit_offset (const WN *);
  friend inline void WN_set_bit_offset (WN *, UINT);
  friend inline UINT WN_bit_size (const WN *);
  friend inline void WN_set_bit_size (WN *, UINT);
  friend inline TYPE_ID WN_desc (const WN *);
  friend inline void WN_set_desc (WN *, TYPE_ID);
  friend inline INT32 WN_map_id (const WN *);

  friend inline TY_IDX WN_ty (const WN *, const int);
  friend inline TY_IDX& WN_ty (WN *, const int);
  friend inline WN* WN_kid (const WN *, const int);
  friend inline WN*& WN_kid (WN *, const int);
  friend inline WN* WN_kid0 (const WN *);
  friend inline WN*& WN_kid0 (WN *);
  friend inline WN* WN_kid1 (const WN *);
  friend inline WN*& WN_kid1 (WN *);
  friend inline WN* WN_kid2 (const WN *);
  friend inline WN*& WN_kid2 (WN *);
  friend inline WN* WN_kid3 (const WN *);
  friend inline WN*& WN_kid3 (WN *);
  friend inline INT64 WN_const_val (const WN *);
  friend inline INT64& WN_const_val (WN *);
  friend inline UINT32 WN_label_flag (const WN *);
  friend inline UINT32& WN_label_flag (WN *);

  friend inline WN* WN_first (const WN *);
  friend inline WN*& WN_first (WN *);
  friend inline WN* WN_last (const WN *);
  friend inline WN*& WN_last (WN *);

  friend inline INT64 WN_pragma_arg64 (const WN *);
  friend inline INT64& WN_pragma_arg64 (WN *);
  friend inline INT32 WN_pragma_arg1 (const WN *);
  friend inline INT32& WN_pragma_arg1 (WN *);
  friend inline INT32 WN_pragma_arg2 (const WN *);
  friend inline INT32& WN_pragma_arg2 (WN *);
  friend inline mINT8 WN_pragma_distr_type (const WN *);
  friend inline mINT8& WN_pragma_distr_type (WN *);
  friend inline mINT8 WN_pragma_index (const WN *);
  friend inline mINT8& WN_pragma_index (WN *);
  friend inline INT32 WN_pragma_preg (const WN *);
  friend inline INT32& WN_pragma_preg (WN *);

  friend inline char * WN_pragma_asm_constraint (const WN *);
  friend inline PREG_NUM WN_pragma_asm_copyout_preg (const WN *);
  friend inline void WN_set_pragma_asm_copyout_preg (WN *, PREG_NUM);

  friend inline OPCODE WN_opcode (const WN*);
  friend inline void WN_set_opcode (WN*, OPCODE);
  friend inline TY_IDX WN_ty (const WN*);
  friend inline void WN_set_ty (WN*, TY_IDX);
  friend inline TY_IDX WN_load_addr_ty (const WN *);
  friend inline void WN_set_load_addr_ty (WN*, TY_IDX);

  friend inline void WN_Copy_u1u2 (WN*, const WN*);
  friend inline void WN_Copy_u3 (WN*, const WN*);



  friend inline void WN_Copy_sl_ext(WN* , const WN*);



};



inline WN_OFFSET WN_load_offset (const WN* wn) { return wn->u1u2.uu.ua.load_offset; }
inline WN_OFFSET& WN_load_offset (WN* wn) { return wn->u1u2.uu.ua.load_offset; }
inline WN_OFFSET WN_lda_offset (const WN* wn) { return wn->u1u2.uu.ua.lda_offset; }
inline WN_OFFSET& WN_lda_offset (WN* wn) { return wn->u1u2.uu.ua.lda_offset; }
inline WN_OFFSET WN_store_offset (const WN* wn) { return wn->u1u2.uu.ua.store_offset; }
inline WN_OFFSET& WN_store_offset (WN* wn) { return wn->u1u2.uu.ua.store_offset; }
inline WN_OFFSET WN_idname_offset (const WN* wn) { return wn->u1u2.uu.ua.idname_offset; }
inline WN_OFFSET& WN_idname_offset (WN* wn) { return wn->u1u2.uu.ua.idname_offset; }
inline WN_OFFSET WN_offset (const WN* wn) { return wn->u1u2.uu.ua.idname_offset; }
inline WN_OFFSET& WN_offset (WN* wn) { return wn->u1u2.uu.ua.idname_offset; }
inline INT32 WN_num_entries (const WN* wn) { return wn->u1u2.uu.ua.num_entries; }
inline INT32& WN_num_entries (WN* wn) { return wn->u1u2.uu.ua.num_entries; }
inline INT16 WN_cvtl_bits (const WN* wn) { return wn->u1u2.uu.ua.cvtl_bits; }
inline INT16& WN_cvtl_bits (WN* wn) { return wn->u1u2.uu.ua.cvtl_bits; }
inline INT32 WN_label_number (const WN* wn) { return wn->u1u2.uu.ua.label_number; }
inline INT32& WN_label_number (WN* wn) { return wn->u1u2.uu.ua.label_number; }
inline UINT32 WN_call_flag (const WN* wn) { return wn->u1u2.uu.ua.call_flag; }
inline UINT32& WN_call_flag (WN* wn) { return wn->u1u2.uu.ua.call_flag; }
inline UINT32 WN_if_flag (const WN* wn) { return wn->u1u2.uu.ua.if_flag; }
inline UINT32& WN_if_flag (WN* wn) { return wn->u1u2.uu.ua.if_flag; }
inline UINT32 WN_io_flag (const WN* wn) { return wn->u1u2.uu.ua.io_flag; }
inline UINT32& WN_io_flag (WN* wn) { return wn->u1u2.uu.ua.io_flag; }
inline UINT32 WN_asm_flag (const WN *wn) { return wn->u1u2.uu.ua.asm_flag; }
inline UINT32& WN_asm_flag (WN *wn) { return wn->u1u2.uu.ua.asm_flag; }
inline UINT32 WN_label_level (const WN *wn) { return wn->u1u2.uu.ub.label_level; }
inline UINT32& WN_label_level (WN *wn) { return wn->u1u2.uu.ub.label_level; }
inline mUINT16 WN_loop_trip_est (const WN* wn) { return wn->u1u2.uu.ua.li.trip_est; }
inline mUINT16& WN_loop_trip_est (WN* wn) { return wn->u1u2.uu.ua.li.trip_est; }
inline mUINT16 WN_loop_depth (const WN* wn) { return wn->u1u2.uu.ua.li.loop_depth; }
inline mUINT16& WN_loop_depth (WN* wn) { return wn->u1u2.uu.ua.li.loop_depth; }
inline mUINT16 WN_pragma_flags (const WN* wn) { return wn->u1u2.uu.ua.pragma.pragma_flags; }
inline mUINT16& WN_pragma_flags (WN* wn) { return wn->u1u2.uu.ua.pragma.pragma_flags; }
inline mUINT16 WN_pragma (const WN* wn) { return wn->u1u2.uu.ua.pragma.pragma_id; }
inline mUINT16& WN_pragma (WN* wn) { return wn->u1u2.uu.ua.pragma.pragma_id; }

inline char *WN_pragma_asm_constraint(const WN *wn) { return ST_name(&St_Table[(ST_IDX) WN_pragma_arg1(wn)]); }
inline PREG_NUM WN_pragma_asm_copyout_preg(const WN *wn) { return wn->u3.pragma.up1.asm_pragma.pragma_asm_copyout_preg; }
inline void WN_set_pragma_asm_copyout_preg(WN *wn, PREG_NUM r) { wn->u3.pragma.up1.asm_pragma.pragma_asm_copyout_preg = r; }
inline UINT32 WN_pragma_asm_opnd_num(const WN *wn) { return wn->u3.pragma.up1.asm_pragma.pragma_asm_opnd_num; }
inline void WN_set_pragma_asm_opnd_num(WN *wn, UINT32 i) { wn->u3.pragma.up1.asm_pragma.pragma_asm_opnd_num = i; }

inline REGION_KIND WN_region_kind (const WN* wn) { return wn->u1u2.uu.ua.region.region_kind; }
inline void WN_set_region_kind (WN* wn, REGION_KIND k) { wn->u1u2.uu.ua.region.region_kind = k; }
inline mUINT32 WN_region_id (const WN* wn) { return wn->u1u2.uu.ua.region.region_id; }
inline void WN_set_region_id (WN* wn, mUINT32 i) { wn->u1u2.uu.ua.region.region_id = i; }

inline ST_IDX WN_st_idx (const WN* wn) { return wn->u1u2.uu.ub.st_idx; }
inline ST_IDX& WN_st_idx (WN* wn) { return wn->u1u2.uu.ub.st_idx; }
inline INTRINSIC WN_intrinsic (const WN* wn) { return wn->u1u2.uu.ub.intrinsic; }
inline INTRINSIC& WN_intrinsic (WN* wn) { return wn->u1u2.uu.ub.intrinsic; }
inline IOSTATEMENT WN_io_statement(const WN* wn) { return wn->u1u2.uu.ub.iostatement; }
inline IOSTATEMENT& WN_io_statement(WN* wn) { return wn->u1u2.uu.ub.iostatement; }
inline IOITEM WN_io_item(const WN* wn) { return wn->u1u2.uu.ub.ioitem; }
inline IOITEM & WN_io_item(WN* wn) { return wn->u1u2.uu.ub.ioitem; }
inline UINT32 WN_prefetch_flag (const WN* wn) { return wn->u1u2.uu.ub.prefetch_flag; }
inline UINT32& WN_prefetch_flag (WN* wn) { return wn->u1u2.uu.ub.prefetch_flag; }
inline UINT32 WN_loop_flag (const WN* wn) { return wn->u1u2.uu.ub.loop_flag; }
inline UINT32& WN_loop_flag (WN* wn) { return wn->u1u2.uu.ub.loop_flag; }
inline INT32 WN_last_label (const WN* wn) { return wn->u1u2.uu.ub.last_label; }
inline INT32& WN_last_label (WN* wn) { return wn->u1u2.uu.ub.last_label; }
inline INITO_IDX WN_ereg_supp (const WN* wn) { return wn->u1u2.uu.ub.ereg_supp; }
inline INITO_IDX& WN_ereg_supp (WN* wn) { return wn->u1u2.uu.ub.ereg_supp; }
inline WN_ESIZE WN_element_size (const WN* wn) { return wn->u1u2.element_size; }
inline WN_ESIZE& WN_element_size (WN* wn) { return wn->u1u2.element_size; }

inline OPERATOR WN_operator (const WN* wn) { return wn->common.wn_operator; }
inline void WN_set_operator (WN* wn, OPERATOR opr) { wn->common.wn_operator = opr; }
inline TYPE_ID WN_rtype (const WN* wn) { return wn->common.rtype; }
inline void WN_set_rtype (WN* wn, TYPE_ID ty) { wn->common.rtype = ty; }
inline INT WN_kid_count (const WN* wn) { return OPERATOR_nkids(WN_operator(wn)) == -1 ? wn->common.kid_count : OPERATOR_nkids(WN_operator(wn)); }
inline void WN_set_kid_count (WN* wn, UINT n) { if (OPERATOR_nkids(WN_operator(wn)) == -1) wn->common.kid_count = n; }
inline UINT32 WN_field_id (const WN* wn) { return wn->common.kid_count; }
inline void WN_set_field_id (WN* wn, UINT n) { wn->common.kid_count = (n > 0x3ffe) ? 0x3fff : n; }
inline UINT WN_bit_offset (const WN* wn) { return wn->common.kid_count >> 7; }
inline UINT WN_bit_size (const WN* wn) { return wn->common.kid_count & 0x7f; }
inline void WN_set_bit_offset_size (WN* wn, UINT ofst, UINT siz) { wn->common.kid_count = ((ofst << 7) + siz); }
inline TYPE_ID WN_desc (const WN* wn) { return wn->common.desc; }
inline void WN_set_desc (WN* wn, TYPE_ID ty) { wn->common.desc = ty; }
inline INT32 WN_map_id (const WN* wn) { return wn->common.map_id; }
inline void WN_set_map_id (WN* wn, INT32 m) { wn->common.map_id = m; }

inline WN* WN_kid (const WN* wn, int i) { return wn->u3.kids [i]; }
inline WN*& WN_kid (WN* wn, int i) { return wn->u3.kids [i]; }
inline WN* WN_kid0 (const WN* wn) { return wn->u3.kids [0]; }
inline WN*& WN_kid0 (WN* wn) { return wn->u3.kids [0]; }
inline WN* WN_kid1 (const WN* wn) { return wn->u3.kids [1]; }
inline WN*& WN_kid1 (WN* wn) { return wn->u3.kids [1]; }
#pragma set woff 1172
inline WN* WN_kid2 (const WN* wn) { return wn->u3.kids [2]; }
inline WN*& WN_kid2 (WN* wn) { return wn->u3.kids [2]; }
inline WN* WN_kid3 (const WN* wn) { return wn->u3.kids [3]; }
inline WN*& WN_kid3 (WN* wn) { return wn->u3.kids [3]; }
#pragma reset woff 1172
inline INT64 WN_const_val (const WN* wn) { return wn->u3.const_val; }
inline INT64& WN_const_val (WN* wn) { return wn->u3.const_val; }
inline UINT32 WN_label_flag (const WN* wn) { return wn->u3.label_flag_fields.label_flag; }
inline UINT32& WN_label_flag (WN* wn) { return wn->u3.label_flag_fields.label_flag; }
inline WN* WN_first (const WN* wn) { return wn->u3.block.first; }
inline WN*& WN_first (WN* wn) { return wn->u3.block.first; }
inline WN* WN_last (const WN* wn) { return wn->u3.block.last; }
inline WN*& WN_last (WN* wn) { return wn->u3.block.last; }
inline UINT32 WN_asm_num_inputs (const WN *wn) { return wn->u3.asm_fields.num_inputs; }
inline UINT32& WN_asm_num_inputs (WN *wn) { return wn->u3.asm_fields.num_inputs; }
inline UINT32 WN_asm_opnd_num (const WN *wn) { return wn->u1u2.uu.ua.asm_operand_num; }
inline UINT32& WN_asm_opnd_num (WN *wn) { return wn->u1u2.uu.ua.asm_operand_num; }
inline UINT32 WN_asm_num_clobbers (const WN *wn) { return wn->u3.asm_fields.num_clobbers; }
inline UINT32& WN_asm_num_clobbers (WN *wn) { return wn->u3.asm_fields.num_clobbers; }
inline INT64 WN_pragma_arg64 (const WN* wn) { return wn->u3.pragma.pragma_arg64; }
inline INT64& WN_pragma_arg64 (WN* wn) { return wn->u3.pragma.pragma_arg64; }
inline INT32 WN_pragma_arg1 (const WN* wn) { return wn->u3.pragma.up1.pragma_arg1; }
inline INT32& WN_pragma_arg1 (WN* wn) { return wn->u3.pragma.up1.pragma_arg1; }
inline INT32 WN_pragma_arg2 (const WN* wn) { return wn->u3.pragma.up1.pragma_arg2; }
inline INT32& WN_pragma_arg2 (WN* wn) { return wn->u3.pragma.up1.pragma_arg2; }
inline mINT8 WN_pragma_distr_type (const WN* wn) { return wn->u3.pragma.up2.pragma_distr_type; }
inline mINT8& WN_pragma_distr_type (WN* wn) { return wn->u3.pragma.up2.pragma_distr_type; }
inline mINT8 WN_pragma_index (const WN* wn) { return wn->u3.pragma.up2.pragma_index; }
inline mINT8& WN_pragma_index (WN* wn) { return wn->u3.pragma.up2.pragma_index; }
inline INT32 WN_pragma_preg (const WN* wn) { return wn->u3.pragma.up2.pragma_preg; }
inline INT32& WN_pragma_preg (WN* wn) { return wn->u3.pragma.up2.pragma_preg; }



inline void WN_Copy_u1u2 (WN* dst, const WN* src) { dst->u1u2 = src->u1u2; }
inline void WN_Copy_u3 (WN* dst, const WN* src) { dst->u3 = src->u3; }


inline void WN_Copy_sl_ext(WN* dst, const WN* src) { dst->sl_ext = src->sl_ext; }
# 942 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
inline OPCODE
WN_opcode (const WN *wn) {
   return OPCODE_make_op (wn->common.wn_operator,
     wn->common.rtype,
     wn->common.desc);
}

inline void
WN_set_opcode (WN *wn, OPCODE opc) {
  wn->common.wn_operator = OPCODE_operator(opc);
  wn->common.rtype = OPCODE_rtype(opc);
  wn->common.desc = OPCODE_desc(opc);
}

class STMT_WN {
public:
  WN *prev;
  WN *next;
  mUINT64 linenum;
  WN wn;


  friend inline WN* WN_prev (const WN*);
  friend inline WN*& WN_prev (WN*);
  friend inline WN* WN_next (const WN*);
  friend inline WN*& WN_next (WN*);
  friend inline mUINT64 WN_linenum (const WN*);
  friend inline mUINT64& WN_linenum (WN*);
  friend inline void* WN_StartAddress (WN*);
  friend inline WN* WN_prev_free (const STMT_WN*);
  friend inline WN*& WN_prev_free (STMT_WN*);
  friend inline WN& WN_real_fields (STMT_WN*);

};

inline UINTPS WN_offset_in_STMT_WN(const WN *x)
{
  return (UINTPS) &(((STMT_WN*) x)->wn) - (UINTPS) x;
}

inline STMT_WN* WN_cast_WN_to_STMT_WN(const WN *x)
{
  return (STMT_WN *) ((UINTPS) x - WN_offset_in_STMT_WN(x));
}


inline WN* WN_prev (const WN* wn) { return (WN_cast_WN_to_STMT_WN(wn)->prev); }
inline WN*& WN_prev (WN* wn) { return (WN_cast_WN_to_STMT_WN(wn)->prev); }
inline WN* WN_next (const WN* wn) { return (WN_cast_WN_to_STMT_WN(wn)->next); }
inline WN*& WN_next (WN* wn) { return (WN_cast_WN_to_STMT_WN(wn)->next); }
inline mUINT64 WN_linenum (const WN* wn) { return (WN_cast_WN_to_STMT_WN(wn)->linenum); }
inline mUINT64& WN_linenum (WN* wn) { return (WN_cast_WN_to_STMT_WN(wn)->linenum); }
inline WN* WN_prev_free (const STMT_WN* stmt_wn) { return stmt_wn->prev; }
inline WN*& WN_prev_free (STMT_WN* stmt_wn) { return stmt_wn->prev; }
inline WN& WN_real_fields (STMT_WN* stmt_wn) { return stmt_wn->wn; }
# 1011 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
inline ST *
WN_st (const WN *x)
  {
    ( (OPERATOR_has_sym(WN_operator(x))) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h", 1014 ), Fail_FmtAssertion ("WN_st: wn doesn't have ST field")) );
    ( ST_IDX_index(WN_st_idx(x)) != 0 || WN_st_idx(x) == 0 ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h", 1017 ), Fail_FmtAssertion ("WN_st: zero index in nonzero level disallowed")) );


    return (WN_st_idx(x) != 0 ?
     &St_Table[WN_st_idx(x)] :
     __null);
  }


inline char * WN_asm_string(const WN *wn) { return ST_name(WN_st(wn)); }
inline char * WN_asm_input_constraint(const WN *wn) { return ST_name(WN_st(wn)); }
# 1142 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
inline TCON&
WN_val (const WN *x) { return ST_tcon_val (WN_st(x)); }

inline TYPE_ID
WN_val_type (const WN *x) { return TCON_ty (WN_val (x)); }
# 1160 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
inline TY_IDX WN_ty(const WN *wn)
{
  OPERATOR opr;
  opr = WN_operator(wn);
  if ((opr == OPR_LDA) || (opr == OPR_LDID) || (opr == OPR_STID) ||
      (opr == OPR_LDBITS) || (opr == OPR_STBITS)) {
    return(wn->u3.ty_fields.ty);
  } else if (opr == OPR_IO_ITEM) {
    return (wn->u1u2.uu.ua.io_item_ty);
  } else {
    return (wn->u1u2.uu.ub.ty);
  }
}


inline void WN_set_ty(WN *wn, TY_IDX ty)
{
  OPERATOR opr;
  opr = WN_operator(wn);
  if ((opr == OPR_LDA) || (opr == OPR_LDID) || (opr == OPR_STID) ||
      (opr == OPR_LDBITS) || (opr == OPR_STBITS)) {
    wn->u3.ty_fields.ty = ty;
  } else if (opr == OPR_IO_ITEM) {
    wn->u1u2.uu.ua.io_item_ty = ty;
  } else {
    wn->u1u2.uu.ub.ty = ty;
  }
}




inline TY_IDX WN_load_addr_ty(const WN *wn)
{
  OPERATOR opr;
  opr = WN_operator(wn);
  if (opr == OPR_ILOAD || opr == OPR_ILDBITS) {
    return(wn->u3.ty_fields.ty);
  } else {
    return (wn->u1u2.uu.ua.loadx_addr_ty);
  }
}


inline void WN_set_load_addr_ty(WN *wn, TY_IDX ty)
{
  OPERATOR opr;
  opr = WN_operator(wn);
  if (opr == OPR_ILOAD || opr == OPR_ILDBITS) {
    wn->u3.ty_fields.ty = ty;
  } else {
    wn->u1u2.uu.ua.loadx_addr_ty = ty;
  }
}






inline UINT32 WN_flag(const WN *wn)
{
  OPERATOR opr;
  opr = WN_operator(wn);
  switch (opr) {
  case OPR_CALL:
  case OPR_ICALL:
  case OPR_PICCALL:
  case OPR_INTRINSIC_CALL:
  case OPR_INTRINSIC_OP:
  case OPR_REGION:
  case OPR_PARM:

  case OPR_PURE_CALL_OP:

    return(WN_call_flag(wn));
  case OPR_PREFETCH:
  case OPR_PREFETCHX:
    return(WN_prefetch_flag(wn));
  case OPR_IF:
    return (WN_if_flag(wn));
  case OPR_LOOP_INFO:
    return (WN_loop_flag(wn));
  case OPR_IO:
    return (WN_io_flag(wn));
  case OPR_ASM_STMT:
    return (WN_asm_flag(wn));
  default:
    return(WN_label_flag(wn));
  }
}


inline void WN_set_flag(WN *wn, UINT32 flag)
{
  OPERATOR opr;
  opr = WN_operator(wn);
  switch (opr) {
  case OPR_CALL:
  case OPR_ICALL:
  case OPR_PICCALL:
  case OPR_INTRINSIC_CALL:
  case OPR_INTRINSIC_OP:
  case OPR_REGION:
  case OPR_PARM:

  case OPR_PURE_CALL_OP:

    WN_call_flag(wn) = flag;
    break;
  case OPR_PREFETCH:
  case OPR_PREFETCHX:
    WN_prefetch_flag(wn) = flag;
    break;
  case OPR_IF:
    WN_if_flag(wn) = flag;
    break;
  case OPR_IO:
    WN_io_flag(wn) = flag;
    break;
  case OPR_LOOP_INFO:
    WN_loop_flag(wn) = flag;
    break;
  default:
    WN_label_flag(wn) = flag;
    break;
  }
}




inline void *WN_StartAddress(WN *wn)
{
  if (OPCODE_has_next_prev(WN_opcode(wn))) {
    return((void *)WN_cast_WN_to_STMT_WN(wn));
  } else return((void *) wn);
}



inline INT32 WN_Size(WN *wn)
{
  INT16 extra_kids = ((0>=WN_kid_count(wn)-2)?0:WN_kid_count(wn)-2);
  if (OPCODE_has_next_prev(WN_opcode(wn))) {
    return(sizeof(WN) + (2+extra_kids)*sizeof(WN*) + sizeof(mUINT64));
  } else {
    return(sizeof(WN) + (0+extra_kids)*sizeof(WN*));
  }
}


inline void WN_Set_Linenum(WN *wn, INT64 ln)
{
  ( OPCODE_has_next_prev(WN_opcode(wn)) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h", 1315 ), Fail_FmtAssertion ("can only set line numbers for statements")) );

  WN_linenum(wn) = ln;
}


inline INT64 WN_Get_Linenum(const WN *wn)
{
  if (OPCODE_has_next_prev(WN_opcode(wn))) {
    return WN_linenum(wn);
  } else {
    return 0;
  }
}



inline BOOL WN_Is_Volatile_Mem(const WN *wn)
{
  OPCODE opc = WN_opcode(wn);
  if (OPCODE_has_1ty(opc) || OPCODE_has_2ty(opc)) {
    if (OPCODE_operator(opc) == OPR_ISTORE ||
 OPCODE_operator(opc) == OPR_MSTORE) {
      TY_IDX pointed = TY_pointed (Ty_Table[WN_ty (wn)]);
      ( pointed ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h", 1338 ), Fail_FmtAssertion ("TY_pointed of ISTORE/MSTORE type is NULL")) );
      return TY_is_volatile(pointed);
    } else {
      BOOL ret = TY_is_volatile(WN_ty(wn));
      ret |= OPCODE_has_2ty(opc) && TY_is_volatile(WN_load_addr_ty(wn));
      if( OPCODE_has_2ty(opc) &&
          Ty_Table[WN_load_addr_ty(wn)].kind == KIND_POINTER ){
        TY_IDX pointed = TY_pointed(Ty_Table[WN_load_addr_ty(wn)]);
        if( pointed )
          ret |= TY_is_volatile(pointed);
      }
      return ret;
    }
  }
  return ((BOOL) 0);
}
# 1591 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_core.h"
inline mINT16 WN_num_actuals(const WN *wn)
{
  INT32 n= WN_kid_count(wn);
  INT32 i;
  OPERATOR opr = WN_operator(wn);




  if (opr == OPR_ICALL || opr == OPR_PICCALL) n--;

  for(i= n-1; i>=0; i--)
  {
    WN *kid = WN_kid(wn,i);
    OPERATOR kid_opr = WN_operator(kid);
    if ( (kid_opr != OPR_PARM) || !(WN_call_flag(kid) & 0x08) )
    {
      return i+1;
    }
  }
  return 0;
}
# 55 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 2
# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h" 1
# 39 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h"
extern "C" {
# 282 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h"
struct mem_pool;


typedef INT32 WN_MAP;
# 299 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h"
typedef enum {
  WN_MAP_KIND_VOIDP = 1,
  WN_MAP_KIND_INT32 = 2,
  WN_MAP_KIND_INT64 = 3
} WN_MAP_KIND;

typedef struct wn_map_tab {
  struct mem_pool *_free_list_pool;
  struct mem_pool *_pool[28];
  WN_MAP_KIND _kind[28];
  void **_mapping[8][28];
  BOOL _is_used[28];
  INT32 _last_map_id[8];
  INT32 _map_size[8][28];


  WN_MAP_ID *_free_list[8];
  INT32 _free_list_count[8];
  INT32 _free_list_size[8];
} WN_MAP_TAB;


extern WN_MAP_TAB *Current_Map_Tab;


extern WN_MAP_TAB *WN_MAP_TAB_Create(
    struct mem_pool *pool
);

extern void WN_MAP_TAB_Delete(
    WN_MAP_TAB *maptab
);





extern WN_MAP WN_MAP_Do_Create(
    WN_MAP_TAB *maptab,
    struct mem_pool *pool,
    WN_MAP_KIND kind
);
# 356 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h"
extern WN_MAP_ID IPA_WN_MAP_Status(
    WN_MAP_TAB *maptab
);




extern void IPA_WN_MAP_Delete(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map
);





extern void IPA_WN_MAP_Set(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map,
    WN *wn,
    void *thing
);
extern void IPA_WN_MAP32_Set(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map,
    WN *wn,
    INT32 thing
);
extern void IPA_WN_MAP64_Set(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map,
    WN *wn,
    INT64 thing
);
# 399 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h"
extern void *IPA_WN_MAP_Get(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map,
    const WN *wn
);
extern INT32 IPA_WN_MAP32_Get(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map,
    const WN *wn
);
extern INT64 IPA_WN_MAP64_Get(
    WN_MAP_TAB *maptab,
    WN_MAP wn_map,
    const WN *wn
);
# 429 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_map.h"
extern void WN_MAP_Add_Free_List(
    WN_MAP_TAB *maptab,
    WN *wn
);

extern void WN_MAP_Set_ID(
    WN_MAP_TAB *maptab,
    WN *wn
);




}
# 56 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 2

# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_pragmas.h" 1
# 43 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_pragmas.h"
extern "C" {
# 127 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_pragmas.h"
typedef enum {
  WN_PRAGMA_UNDEFINED,


  WN_PRAGMA_INLINE_BODY_START,
  WN_PRAGMA_INLINE_BODY_END,
  WN_PRAGMA_INLINE_DEPTH,
  WN_PRAGMA_INLINE_LOOPLEVEL,

  WN_PRAGMA_AGGRESSIVE_INNER_LOOP_FISSION,
  WN_PRAGMA_FISSION,
  WN_PRAGMA_FISSIONABLE,
  WN_PRAGMA_FUSE,
  WN_PRAGMA_FUSEABLE,
  WN_PRAGMA_NO_FISSION,
  WN_PRAGMA_NO_FUSION,
  WN_PRAGMA_INTERCHANGE,



  WN_PRAGMA_NO_INTERCHANGE,
  WN_PRAGMA_BLOCKING_SIZE,
  WN_PRAGMA_NO_BLOCKING,
  WN_PRAGMA_UNROLL,
  WN_PRAGMA_BLOCKABLE,
  WN_PRAGMA_PREFETCH,
  WN_PRAGMA_PREFETCH_MANUAL,
  WN_PRAGMA_PREFETCH_REF,
  WN_PRAGMA_PREFETCH_REF_DISABLE,

  WN_PRAGMA_IVDEP,

  WN_PRAGMA_OPTIONS,
  WN_PRAGMA_OPAQUE,

  WN_PRAGMA_MIPS_FREQUENCY_HINT,
  WN_PRAGMA_DISTRIBUTE,
  WN_PRAGMA_REDISTRIBUTE,
  WN_PRAGMA_DISTRIBUTE_RESHAPE,
  WN_PRAGMA_DYNAMIC,

  WN_PRAGMA_ACCESSED_ID,




  WN_PRAGMA_PFOR_BEGIN,
  WN_PRAGMA_ENTER_GATE,
  WN_PRAGMA_EXIT_GATE,



  WN_PRAGMA_BARRIER,
  WN_PRAGMA_CHUNKSIZE,
  WN_PRAGMA_COPYIN,
  WN_PRAGMA_CRITICAL_SECTION_BEGIN,
  WN_PRAGMA_CRITICAL_SECTION_END,
  WN_PRAGMA_DOACROSS,
  WN_PRAGMA_IF,
  WN_PRAGMA_LASTLOCAL,
  WN_PRAGMA_LOCAL,
  WN_PRAGMA_MPSCHEDTYPE,
  WN_PRAGMA_ORDERED,
  WN_PRAGMA_PARALLEL_BEGIN,
  WN_PRAGMA_PARALLEL_END,
  WN_PRAGMA_PARALLEL_DO,
  WN_PRAGMA_PDO_BEGIN,
  WN_PRAGMA_PDO_END,
  WN_PRAGMA_PSECTION_BEGIN,
  WN_PRAGMA_PSECTION_END,
  WN_PRAGMA_REDUCTION,
  WN_PRAGMA_SECTION,
  WN_PRAGMA_SHARED,
  WN_PRAGMA_SINGLE_PROCESS_BEGIN,
  WN_PRAGMA_SINGLE_PROCESS_END,
  WN_PRAGMA_ITERATE_VAR,
  WN_PRAGMA_ITERATE_INIT,
  WN_PRAGMA_ITERATE_COUNT,
  WN_PRAGMA_ITERATE_STEP,
  WN_PRAGMA_AFFINITY,
  WN_PRAGMA_DATA_AFFINITY,
  WN_PRAGMA_THREAD_AFFINITY,
  WN_PRAGMA_NUMTHREADS,
  WN_PRAGMA_NOWAIT,
  WN_PRAGMA_PAGE_PLACE,

 WN_PRAGMA_SL2_MAJOR_PSECTION_BEGIN,
 WN_PRAGMA_SL2_MINOR_PSECTION_BEGIN,
 WN_PRAGMA_SL2_SEPERATE_COMPILATION,
 WN_PRAGMA_SL2_SECTIONS_BEGIN,





  WN_PRAGMA_ONTO,
  WN_PRAGMA_LASTTHREAD,



  WN_PRAGMA_NORECURRENCE,
  WN_PRAGMA_NEXT_SCALAR,



  WN_PRAGMA_PURPLE_CONDITIONAL,
  WN_PRAGMA_PURPLE_UNCONDITIONAL,



  WN_PRAGMA_WOPT_FINISHED_OPT,



  WN_PRAGMA_KAP_ARCLIMIT,
  WN_PRAGMA_KAP_CONCURRENTIZE,
  WN_PRAGMA_KAP_INLINE_FILE,
  WN_PRAGMA_KAP_INLINE_PU,
  WN_PRAGMA_KAP_LIMIT,
  WN_PRAGMA_KAP_MINCONCURRENT,
  WN_PRAGMA_KAP_NOCONCURRENTIZE,
  WN_PRAGMA_KAP_NOINLINE_FILE,
  WN_PRAGMA_KAP_NOINLINE_PU,
  WN_PRAGMA_KAP_OPTIMIZE,
  WN_PRAGMA_KAP_ROUNDOFF,
  WN_PRAGMA_KAP_SCALAR_OPTIMIZE,
  WN_PRAGMA_KAP_CTHRESHOLD,
  WN_PRAGMA_KAP_EACH_INVARIANT_IF_GROWTH,
  WN_PRAGMA_KAP_MAX_INVARIANT_IF_GROWTH,
  WN_PRAGMA_KAP_STORAGE_ORDER,

  WN_PRAGMA_KAP_ASSERT_BOUNDS_VIOLATIONS,
  WN_PRAGMA_KAP_ASSERT_NOBOUNDS_VIOLATIONS,
  WN_PRAGMA_KAP_ASSERT_CONCURRENT_CALL,
  WN_PRAGMA_KAP_ASSERT_DO,
  WN_PRAGMA_KAP_ASSERT_DOPREFER,
  WN_PRAGMA_KAP_ASSERT_EQUIVALENCE_HAZARD,
  WN_PRAGMA_KAP_ASSERT_NOEQUIVALENCE_HAZARD,
  WN_PRAGMA_KAP_ASSERT_LAST_VALUE_NEEDED,
  WN_PRAGMA_KAP_ASSERT_NOLAST_VALUE_NEEDED,
  WN_PRAGMA_KAP_ASSERT_PERMUTATION,
  WN_PRAGMA_KAP_ASSERT_NORECURRENCE,
  WN_PRAGMA_KAP_ASSERT_RELATION,
  WN_PRAGMA_KAP_ASSERT_NOSYNC,
  WN_PRAGMA_KAP_ASSERT_TEMPORARIES_FOR_CONSTANT_ARGUMENTS,
  WN_PRAGMA_KAP_ASSERT_NOTEMPORARIES_FOR_CONSTANT_ARGUMENTS,
  WN_PRAGMA_KAP_ASSERT_ARGUMENT_ALIASING,
  WN_PRAGMA_KAP_ASSERT_BENIGN,
  WN_PRAGMA_KAP_ASSERT_DEPENDENCE,
  WN_PRAGMA_KAP_ASSERT_FREQUENCY,
  WN_PRAGMA_KAP_ASSERT_IGNORE_ANY_DEPENDENCE,
  WN_PRAGMA_KAP_ASSERT_IGNORE_ASSUMED_DEPENDENCE,
  WN_PRAGMA_KAP_ASSERT_NO_ARGUMENT_ALIASING,
  WN_PRAGMA_KAP_ASSERT_NO_CONCURRENT_CALL,
  WN_PRAGMA_KAP_ASSERT_NO_INTERCHANGE,
  WN_PRAGMA_KAP_ASSERT_USE_COMPRESS,
  WN_PRAGMA_KAP_ASSERT_USE_EXPAND,
  WN_PRAGMA_KAP_ASSERT_USE_CONTROLLED_STORE,
  WN_PRAGMA_KAP_ASSERT_USE_GATHER,
  WN_PRAGMA_KAP_ASSERT_USE_SCATTER,
  WN_PRAGMA_KAP_OPTIONS,

  WN_PRAGMA_PREAMBLE_END,



  WN_PRAGMA_FLIST_SKIP_BEGIN,
  WN_PRAGMA_FLIST_SKIP_END,
  WN_PRAGMA_CLIST_SKIP_BEGIN,
  WN_PRAGMA_CLIST_SKIP_END,


  WN_PRAGMA_FILL,
  WN_PRAGMA_ALIGN,


  WN_PRAGMA_INDEPENDENT_BEGIN,
  WN_PRAGMA_INDEPENDENT_END,


  WN_PRAGMA_KAP_OPTION_INLINE,
  WN_PRAGMA_KAP_OPTION_NOINLINE,





  WN_PRAGMA_CRI_IVDEP,
  WN_PRAGMA_CRI_NOVECTOR,
  WN_PRAGMA_CRI_NOVSEARCH,
  WN_PRAGMA_CRI_PREFERVECTOR,
  WN_PRAGMA_CRI_SHORTLOOP,



  WN_PRAGMA_CRI_CASE,
  WN_PRAGMA_CRI_ENDCASE,
  WN_PRAGMA_CRI_COMMON,
  WN_PRAGMA_CRI_GUARD,
  WN_PRAGMA_CRI_ENDGUARD,
  WN_PRAGMA_CRI_ENDLOOP,
  WN_PRAGMA_CRI_PARALLEL,
  WN_PRAGMA_CRI_ENDPARALLEL,
  WN_PRAGMA_CRI_PREFERTASK,
  WN_PRAGMA_CRI_TASKCOMMON,
  WN_PRAGMA_CRI_TASKLOOP,
  WN_PRAGMA_CRI_SHARED,
  WN_PRAGMA_CRI_PRIVATE,
  WN_PRAGMA_CRI_VALUE,
  WN_PRAGMA_CRI_DEFAULTS,
  WN_PRAGMA_CRI_MAXCPUS,
  WN_PRAGMA_CRI_SAVELAST,
  WN_PRAGMA_CRI_CHUNKSIZE,
  WN_PRAGMA_CRI_NUMCHUNKS,

  WN_PRAGMA_CRI_TASK,
  WN_PRAGMA_CRI_NOTASK,
  WN_PRAGMA_CRI_ALIGN,
  WN_PRAGMA_CRI_BL,
  WN_PRAGMA_CRI_CNCALL,

  WN_PRAGMA_MPNUM,
  WN_PRAGMA_COPYIN_BOUND,


  WN_PRAGMA_SYNC_DOACROSS,

  WN_PRAGMA_DEFAULT,
  WN_PRAGMA_FIRSTPRIVATE,
  WN_PRAGMA_MASTER_BEGIN,
  WN_PRAGMA_ORDERED_BEGIN,
  WN_PRAGMA_ORDERED_END,
  WN_PRAGMA_ATOMIC,
  WN_PRAGMA_ORDERED_LOWER_BOUND,
  WN_PRAGMA_ORDERED_STRIDE,
  WN_PRAGMA_END_MARKER,
  WN_PRAGMA_PARALLEL_SECTIONS,

  WN_PRAGMA_START_STMT_CLUMP,
  WN_PRAGMA_END_STMT_CLUMP,


  WN_PRAGMA_TYPE_OF_RESHAPED_ARRAY,


  WN_PRAGMA_ASM_CONSTRAINT,
  WN_PRAGMA_ASM_CLOBBER,


  WN_PRAGMA_FORALL,

  WN_PRAGMA_COPYPRIVATE,
  WN_PRAGMA_PARALLEL_WORKSHARE,
  WN_PRAGMA_PWORKSHARE_BEGIN,
  WN_PRAGMA_PWORKSHARE_END,
  WN_PRAGMA_THREADPRIVATE,
  MAX_WN_PRAGMA
} WN_PRAGMA_ID;


typedef enum {
  WN_PRAGMA_SCOPE_UNKNOWN,
  WN_PRAGMA_SCOPE_PU,
  WN_PRAGMA_SCOPE_WN,
  WN_PRAGMA_SCOPE_POINT,


  WN_PRAGMA_SCOPE_ON,
  WN_PRAGMA_SCOPE_OFF,

  WN_PRAGMA_SCOPE_SPECIAL,

  MAX_SCOPE_PRAGMA
} WN_PRAGMA_SCOPE;


typedef enum {
  WN_PRAGMA_SCHEDTYPE_UNKNOWN,
  WN_PRAGMA_SCHEDTYPE_RUNTIME,
  WN_PRAGMA_SCHEDTYPE_SIMPLE,
  WN_PRAGMA_SCHEDTYPE_INTERLEAVE,
  WN_PRAGMA_SCHEDTYPE_DYNAMIC,
  WN_PRAGMA_SCHEDTYPE_GSS,
  WN_PRAGMA_SCHEDTYPE_PSEUDOLOWERED,
  MAX_PRAGMA_SCHEDTYPE
} WN_PRAGMA_SCHEDTYPE_KIND;


typedef enum {
  WN_PRAGMA_DEFAULT_UNKNOWN,
  WN_PRAGMA_DEFAULT_NONE,
  WN_PRAGMA_DEFAULT_SHARED,
  WN_PRAGMA_DEFAULT_PRIVATE,
  MAX_PRAGMA_DEFAULT
} WN_PRAGMA_DEFAULT_KIND;


typedef enum {
  PUSER_NULL = 0x0,
  PUSER_IPA = 0x1,
  PUSER_LNO = 0x2,
  PUSER_WOPT = 0x4,
  PUSER_CG = 0x8,
  PUSER_MP = 0x10,
  PUSER_NONE = 0x20,
  PUSER_PURPLE = 0x40,
  PUSER_W2C = 0x80,
  PUSER_W2F = 0x100,
  PUSER_REGION = 0x200
} WN_PRAGMA_USERS;


typedef enum {
  ACCESSED_LOAD = 0x1,
  ACCESSED_STORE = 0x2,
  ACCESSED_ILOAD = 0x4,
  ACCESSED_ISTORE = 0x8
} WN_PRAGMA_ACCESSED_FLAGS;


typedef enum {
  SHARED_DEADIN = 0x1,
  SHARED_DEADOUT = 0x2
} WN_PRAGMA_SHARED_FLAGS;


typedef enum {
  FREQUENCY_HINT_NEVER = 0x1,
  FREQUENCY_HINT_INIT = 0x2,
  FREQUENCY_HINT_FREQUENT = 0x3
} MIPS_FREQUENCY_HINT;


typedef enum {
  DISTRIBUTE_STAR = 0x1,
  DISTRIBUTE_BLOCK = 0x2,
  DISTRIBUTE_CYCLIC_EXPR = 0x3,
  DISTRIBUTE_CYCLIC_CONST = 0x4
} DISTRIBUTE_TYPE;



typedef enum {
  ASSERT_DO_NONE = 0x0,
  ASSERT_DO_SERIAL = 0x1,
  ASSERT_DO_CONCURRENT = 0x2,
  ASSERT_DO_VECTOR = 0x3
} ASSERT_DO_TYPE;


typedef enum {
  ASSERT_DEPENDENCE_SAFE = 0x1,
  ASSERT_DEPENDENCE_UNSAFE = 0x2
} ASSERT_DEPENDENCE_TYPE;


enum {
  ASSERT_FREQUENCY_ERROR = -3,
  ASSERT_FREQUENCY_RARELY = -2,
  ASSERT_FREQUENCY_USUALLY = -1
};
# 499 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_pragmas.h"
typedef struct wn_pragma_desc {
  WN_PRAGMA_USERS users;
  WN_PRAGMA_SCOPE scope;
  char *name;
} WN_PRAGMA_DESC;

extern WN_PRAGMA_DESC WN_pragmas[];
# 514 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn_pragmas.h"
}
# 58 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 2

# 1 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/stab.h" 1
# 60 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h" 2
# 658 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h"
extern BOOL Types_Are_Compatible(TYPE_ID ltype, WN *wn);
extern BOOL IPO_Types_Are_Compatible(TYPE_ID ltype, TYPE_ID rtype);
extern BOOL Is_Const_Parm (WN *, INT );



extern "C" INT32 New_Region_Id (void);


extern void Dont_Use_WN_Free_List (void);
extern MEM_POOL *WN_mem_pool_ptr;

extern WN *WN_Create(OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, mINT16 kid_count);
inline WN *
WN_Create(OPCODE opcode, mINT16 kid_count) {
  return WN_Create (OPCODE_operator(opcode), OPCODE_rtype(opcode),
      OPCODE_desc(opcode), kid_count);
}

extern WN *
WN_Create_Generic (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc,
     mINT16 kid_count, WN *next, WN *prev,
     ST_IDX st, INT32 label_number, INT32 num_entries,
     TY_IDX ty, TY_IDX load_addr_ty, WN_OFFSET offset,
     INT16 cvtl_bits, INT32 num_dim, WN_ESIZE element_size,
     INT64 const_value, UINT32 flag, INTRINSIC intrinsic);
inline WN *
WN_Create_Generic (OPCODE opcode, mINT16 kid_count, WN *next, WN *prev,
     ST_IDX st, INT32 label_number, INT32 num_entries,
     TY_IDX ty, TY_IDX load_addr_ty, WN_OFFSET offset,
     INT16 cvtl_bits, INT32 num_dim, WN_ESIZE element_size,
     INT64 const_value, UINT32 flag, INTRINSIC intrinsic) {
  return WN_Create_Generic (OPCODE_operator(opcode), OPCODE_rtype(opcode),
       OPCODE_desc(opcode), kid_count, next, prev,
       st, label_number, num_entries,
       ty, load_addr_ty, offset, cvtl_bits, num_dim,
       element_size, const_value, flag, intrinsic);
}

extern void IPA_WN_Delete(WN_MAP_TAB *maptab, WN *wn);




extern void IPA_WN_DELETE_Tree(WN_MAP_TAB *maptab, WN *tree);

extern void WN_Register_Delete_Cleanup_Function(void (*cleanup_fn)(WN *wn));

extern void WN_Remove_Delete_Cleanup_Function(void (*cleanup_fn)(WN *wn));


extern void WN_Reset_Num_Delete_Cleanup_Fns(void);


extern BOOL WN_Equiv(WN *wn1, WN *wn2);

extern WN *WN_CreateBlock(void);

extern WN *WN_CreateDO(WN *index,
         WN *start,
         WN *end,
         WN *step,
         WN *body,
         WN *loop_info);

extern WN *WN_CreateDoWhile(WN *test,
     WN *body);

extern WN *WN_CreateWhileDo(WN *test,
     WN *body);

extern WN *WN_CreateIf(WN *test,
         WN *if_then,
         WN *if_else);

extern WN *WN_CreateEntry (INT16 nkids, ST_IDX name, WN *body, WN *pragmas,
      WN *varrefs);

extern WN *WN_CreateRegion(REGION_KIND kind,
      WN *body,
          WN *pragmas,
      WN *exits,
      INT region_id,
      INITO_IDX ereg_supp);
extern WN *WN_CreateRegionExit (INT32 label_number);



extern void Set_Max_Region_Id (INT id);

extern WN *WN_CreateGoto(INT32 label_number);

extern WN *WN_CreateGotoOuterBlock (INT32 label_number, SYMTAB_IDX label_level);

extern WN *WN_CreateAgoto(WN *addr);

extern WN *WN_CreateAltentry(ST_IDX entry);


extern WN *WN_CreateTruebr(INT32 label_number, WN *exp);
extern WN *WN_CreateFalsebr(INT32 label_number, WN *exp);

extern WN *WN_CreateReturn(void);
extern WN *WN_CreateReturn_Val (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, WN * val);
inline WN *
WN_CreateReturn_Val (OPCODE opc, WN * val) {
  return WN_CreateReturn_Val (OPCODE_operator (opc),
                              OPCODE_rtype (opc),
                              OPCODE_desc (opc),
                              val);
}

extern WN *WN_CreateLabel(INT32 label_number, UINT32 label_flag, WN *loop_info);

extern WN *WN_CreateCompgoto(INT32 num_entries,
           WN *value, WN *block, WN *deflt, INT32 last_label);

extern WN *WN_CreateSwitch(INT32 num_entries,
      WN *value, WN *block, WN *deflt, INT32 last_label);

extern WN *WN_CreateCasegoto(INT64 case_value, INT32 case_label_number);

extern WN *WN_CreateXgoto (INT32 num_entries, WN *value, WN *block, ST_IDX st);

extern WN *WN_CreateIstore(OPERATOR opr,
     TYPE_ID rtype,
     TYPE_ID desc,
     WN_OFFSET offset,
     TY_IDX ty,
     WN *value,
     WN *addr,
     UINT field_id = 0);
inline WN *
WN_CreateIstore (OPCODE opc, WN_OFFSET offset, TY_IDX ty, WN *value, WN *addr,
   UINT field_id = 0) {
  return WN_CreateIstore (OPCODE_operator(opc), OPCODE_rtype(opc),
                          OPCODE_desc(opc), offset, ty, value, addr, field_id);
}

extern WN *WN_CreateIstorex(OPERATOR opr,
     TYPE_ID rtype,
     TYPE_ID desc,
            TY_IDX ty,
     WN *value,
     WN *addr1,
     WN *addr2);
inline WN *
WN_CreateIstorex(OPCODE opc, TY_IDX ty, WN *value, WN *addr1, WN *addr2) {
  return WN_CreateIstorex (OPCODE_operator(opc), OPCODE_rtype(opc),
      OPCODE_desc(opc), ty, value, addr1, addr2);
}

extern WN *WN_CreateMstore(WN_OFFSET offset,
      TY_IDX ty,
      WN *value,
      WN *addr,
      WN *num_bytes);

extern WN *WN_CreateStid(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN_OFFSET offset,
    ST *st,
    TY_IDX ty,
    WN *value,
    UINT field_id = 0);
inline WN *
WN_CreateStid(OPCODE opc, WN_OFFSET offset, ST *st, TY_IDX ty, WN *value, UINT field_id = 0) {
  return WN_CreateStid (OPCODE_operator(opc), OPCODE_rtype(opc),
   OPCODE_desc(opc), offset, st, ty, value, field_id);
}

extern WN *WN_CreatePrefetch( WN_OFFSET offset, UINT32 flag, WN *addr);
extern WN *WN_CreatePrefetchx(UINT32 flag, WN *addr1, WN *addr2);

extern WN *WN_CreateIo(IOSTATEMENT iostatement, mINT16 kid_count);
extern WN *WN_CreateIoItem0(IOITEM ioitem, TY_IDX ty);
extern WN *WN_CreateIoItem1(IOITEM ioitem, WN *kid0, TY_IDX ty);
extern WN *WN_CreateIoItem2(IOITEM ioitem, WN *kid0, WN *kid1, TY_IDX ty);
extern WN *WN_CreateIoItem3(IOITEM ioitem, WN *kid0, WN *kid1, WN *kid2, TY_IDX ty);
extern WN *WN_CreateIoItemN(IOITEM ioitem, mINT16 kid_count, TY_IDX ty);

extern WN *WN_CreateEval(WN *exp);

extern WN *WN_CreatePragma(WN_PRAGMA_ID pragma_name, ST_IDX st,
      INT32 arg1, INT32 arg2);
extern WN *WN_CreatePragma(WN_PRAGMA_ID pragma_name, ST_IDX st,
      INT32 arg1, PREG_NUM asm_copyout_preg,
      UINT32 asm_opnd_num);
extern WN *WN_CreateXpragma(WN_PRAGMA_ID pragma_name, ST_IDX st,
       INT16 kid_count);

extern WN *WN_CreateExp0(OPERATOR opr, TYPE_ID rtype, TYPE_ID desc);
inline WN *
WN_CreateExp0 (OPCODE opc) {
  return WN_CreateExp0 (OPCODE_operator(opc), OPCODE_rtype(opc),
                        OPCODE_desc(opc));
}

extern WN *WN_CreateExp1(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN *kid0);
inline WN *
WN_CreateExp1 (OPCODE opc, WN *kid0) {
  return WN_CreateExp1 (OPCODE_operator(opc), OPCODE_rtype(opc),
                        OPCODE_desc(opc), kid0);
}

extern WN *WN_CreateExp2(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN *kid0,
    WN *kid1);
inline WN*
WN_CreateExp2 (OPCODE opc, WN *kid0, WN *kid1) {
  return WN_CreateExp2 (OPCODE_operator(opc), OPCODE_rtype(opc),
                        OPCODE_desc(opc), kid0, kid1);
}

extern WN *WN_CreateExp3(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN *kid0,
    WN *kid1,
    WN *kid2);
inline WN *
WN_CreateExp3 (OPCODE opc, WN *kid0, WN *kid1, WN *kid2) {
  return WN_CreateExp3 (OPCODE_operator(opc), OPCODE_rtype(opc),
                        OPCODE_desc(opc), kid0, kid1, kid2);
}

extern WN *WN_CreateIload(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN_OFFSET offset,
    TY_IDX ty,
    TY_IDX load_addr_ty,
    WN *addr,
    UINT field_id = 0);
inline WN*
WN_CreateIload (OPCODE opc, WN_OFFSET offset, TY_IDX ty,
  TY_IDX load_addr_ty, WN *addr, UINT field_id = 0) {
  return WN_CreateIload (OPCODE_operator(opc), OPCODE_rtype(opc),
    OPCODE_desc(opc), offset, ty, load_addr_ty, addr,
    field_id);
}

extern WN *WN_CreateIloadx(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    TY_IDX ty,
    TY_IDX load_addr_ty,
    WN *addr1,
    WN *addr2);
inline WN*
WN_CreateIloadx (OPCODE opc, TY_IDX ty, TY_IDX load_addr_ty,
   WN *addr1, WN *addr2) {
  return WN_CreateIloadx (OPCODE_operator(opc), OPCODE_rtype(opc),
     OPCODE_desc(opc), ty, load_addr_ty, addr1, addr2);
}

extern WN *WN_CreateMload(WN_OFFSET offset,
     TY_IDX ty,
     WN *addr,
     WN *num_bytes);

extern WN *WN_CreateLdid(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN_OFFSET offset,
    ST_IDX st,
    TY_IDX ty,
    UINT field_id = 0);
inline WN*
WN_CreateLdid (OPCODE opc, WN_OFFSET offset, ST_IDX st, TY_IDX ty, UINT field_id = 0) {
  return WN_CreateLdid (OPCODE_operator(opc), OPCODE_rtype(opc),
   OPCODE_desc(opc), offset, st, ty, field_id);
}

extern WN *WN_CreateLda(OPERATOR opr,
   TYPE_ID rtype,
   TYPE_ID desc,
   WN_OFFSET offset,
   TY_IDX ty,
   ST_IDX st,
   UINT field_id = 0);
inline WN*
WN_CreateLda (OPCODE opc, WN_OFFSET offset, TY_IDX ty, ST_IDX st,
       UINT field_id = 0) {
  return WN_CreateLda (OPCODE_operator(opc), OPCODE_rtype(opc),
         OPCODE_desc(opc), offset, ty, st, field_id);
}

extern WN *WN_CreateIlda(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    WN_OFFSET offset,
    TY_IDX ty);

extern WN *WN_CreateLdaLabel(OPERATOR opr,
        TYPE_ID rtype,
        TYPE_ID desc,
        mUINT32 label_number);

extern WN *WN_CreateIdname(WN_OFFSET offset,
      ST_IDX st);

extern WN *WN_CreateConst (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, ST_IDX st);
inline WN*
WN_CreateConst (OPCODE opc, ST_IDX st) {
  return WN_CreateConst (OPCODE_operator(opc), OPCODE_rtype(opc),
    OPCODE_desc(opc), st);
}

extern WN *WN_CreateIntconst(OPERATOR opr,
        TYPE_ID rtype,
        TYPE_ID desc,
        INT64 const_val);
inline WN *
WN_CreateIntconst (OPCODE opc, INT64 const_val) {
  return WN_CreateIntconst (OPCODE_operator(opc), OPCODE_rtype(opc),
       OPCODE_desc(opc), const_val);
}

extern WN *WN_CreateCvtl(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    INT16 cvtl_bits,
    WN *kid0);
inline WN *
WN_CreateCvtl (OPCODE opc, INT16 cvtl_bits, WN *kid0) {
  return WN_CreateCvtl (OPCODE_operator(opc), OPCODE_rtype(opc),
   OPCODE_desc(opc), cvtl_bits, kid0);
}

extern WN *WN_Create_Intrinsic(OPERATOR opr,
          TYPE_ID rtype,
          TYPE_ID desc,
          INTRINSIC intrinsic,
          INT32 n,
          WN *kids[]);
inline WN *
WN_Create_Intrinsic (OPCODE opc, INTRINSIC intrinsic, INT32 n, WN *kids[]) {
  return WN_Create_Intrinsic (OPCODE_operator(opc), OPCODE_rtype(opc),
                              OPCODE_desc(opc), intrinsic, n, kids);
}

extern WN *WN_CreateParm(TYPE_ID rtype,
    WN *parm_node,
    TY_IDX ty,
    UINT32 flag);

extern WN *WN_CreateComma(OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, WN *block, WN *value);
inline WN *
WN_CreateComma (OPCODE opc, WN *block, WN *value) {
  return WN_CreateComma (OPCODE_operator(opc), OPCODE_rtype(opc),
    OPCODE_desc(opc), block, value);
}

extern WN *WN_CreateRcomma(OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, WN *value, WN *block);
inline WN *
WN_CreateRcomma (OPCODE opc, WN *value, WN *block) {
  return WN_CreateRcomma (OPCODE_operator(opc), OPCODE_rtype(opc),
     OPCODE_desc(opc), value, block);
}

extern WN *WN_CreateComment (char *s);
extern STR_IDX WN_GetComment (const WN *wn);

extern WN *WN_CreateAsm_Stmt (INT16 kid_count, char *asm_string);

extern WN *WN_CreateAsm_Input (char *constraint, UINT32 opnd_num, WN *opnd_expr);

extern WN *WN_CopyNode(const WN* src_wn);
# 1041 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h"
extern void IPA_WN_Move_Maps_PU(WN_MAP_TAB *src, WN_MAP_TAB *dst, WN *wn);


extern void WN_Mem_Push(void);

extern void WN_Mem_Pop(void);

extern WN *WN_Ldid(TYPE_ID desc,
     WN_OFFSET offset,
     ST_IDX sym,
     TY_IDX align,
     UINT field_id = 0);

extern WN *WN_RLdid(TYPE_ID rtype,
      TYPE_ID desc,
      WN_OFFSET offset,
      ST_IDX sym,
      TY_IDX align);

extern WN *WN_LdidPreg(TYPE_ID desc,
         WN_OFFSET pregno);

extern WN *WN_Iload(TYPE_ID desc,
      WN_OFFSET offset,
      TY_IDX align,
      WN *addr,
      UINT field_id = 0);

extern WN *WN_RIload(TYPE_ID rtype,
       TYPE_ID desc,
       WN_OFFSET offset,
       TY_IDX align,



                     WN *addri,
                     UINT field_id = 0);


extern WN *WN_IloadLdid(TYPE_ID desc,
   WN_OFFSET offset,
   TY_IDX align,
   ST *sym,
   WN_OFFSET symOffset);

extern WN *WN_Istore(TYPE_ID desc,
       WN_OFFSET offset,
       TY_IDX align,
       WN *addr,
       WN *value,
       UINT field_id = 0);

extern WN *WN_Unary(OPERATOR opr,
      TYPE_ID rtype,
      WN *l);

extern WN *WN_Binary(OPERATOR opr,
       TYPE_ID rtype,
       WN *l,
       WN *r);

extern WN *WN_Ternary(OPERATOR opr,
        TYPE_ID rtype,
        WN *kid0,
        WN *kid1,
        WN *kid2);

extern WN *WN_Stid(TYPE_ID desc,
     WN_OFFSET offset,
     ST *sym,
     TY_IDX align,
     WN *value,
     UINT field_id = 0);

extern WN *WN_StidIntoPreg(TYPE_ID desc,
      WN_OFFSET offset,
      ST *sym,
      WN *value);



extern WN *WN_Binary(OPERATOR opr,
       TYPE_ID rtype,
       WN *l,
       WN *r);

extern WN *WN_Intconst(TYPE_ID rtype,
         INT64 value);

extern WN *WN_RotateIntconst(WN *tree,
        INT32 rotate);

extern WN *WN_Inverse(TYPE_ID type,
        WN *tree);

extern WN *WN_Floatconst(TYPE_ID type,
    double value);

extern WN *WN_UVConst(TYPE_ID type);

extern WN * WN_Zerocon (TYPE_ID ty);

extern WN *WN_Cvt(TYPE_ID desc,
    TYPE_ID rtype,
    WN *kid0);

extern WN *WN_Trunc(TYPE_ID desc,
      TYPE_ID rtype,
      WN *kid0);

extern WN *WN_Rnd(TYPE_ID desc,
    TYPE_ID rtype,
    WN *kid0);

extern WN *WN_Ceil(TYPE_ID desc,
     TYPE_ID rtype,
     WN *kid0);

extern WN *WN_Floor(TYPE_ID desc,
      TYPE_ID rtype,
      WN *kid0);

extern WN *WN_Relational(OPERATOR opr,
    TYPE_ID desc,
    WN *kid0,
    WN *kid1);

extern WN *WN_ConstPowerOf2(TYPE_ID rtype,
       INT32 n);

extern WN *WN_Lda(TYPE_ID rtype,
    WN_OFFSET ldaOffset,
    ST *sym,
    UINT field_id = 0);


extern WN *WN_LdaString(char *str,
   WN_OFFSET ldaOffset,
   INT32 len);

extern WN *WN_LdaLabel(TYPE_ID rtype,
                       INT32 label_number);

extern WN *WN_Icall(TYPE_ID rtype,
      TYPE_ID desc,
      INT32 n,
      TY_IDX ty);

extern WN *WN_generic_call(OPERATOR opr,
      TYPE_ID rtype,
      TYPE_ID desc,
      INT32 n,
      ST_IDX sym);

extern WN *WN_generic_intrinsic(OPERATOR opr,
    TYPE_ID rtype,
    TYPE_ID desc,
    INT32 n,
    INTRINSIC intrinsic);




extern WN *WN_CreateLoopInfo (WN *induction, WN *trip, UINT16 trip_est, UINT16 depth, INT32 flags);

extern WN *WN_CreateExcScopeBegin(INT32 id, INT16 nkids, struct inito* ereg_supp);

extern WN *WN_CreateExcScopeEnd(INT32 id);

extern WN *WN_CreateBarrier (BOOL forward, INT16 nkids);

extern WN *WN_CreateTrap (INT32 value);

extern WN *WN_CreateAssert (INT32 value, WN *condition);

extern void WN_CopyMap( WN *dst,
   WN_MAP map,
   const WN *src);

extern WN *WN_Tas(TYPE_ID rtype,
    TY_IDX ty,
    WN *l);

extern WN *WN_Iloadx(TYPE_ID rtype,
       TY_IDX ty,
       TY_IDX addr_ty,
       WN *base,
       WN *index);

extern WN *WN_Istorex(TYPE_ID desc,
        TY_IDX ty,
        WN *value,
        WN *base,
        WN *index);
# 1282 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h"
extern WN * WN_Int_Type_Conversion( WN *wn, TYPE_ID to_type );
extern WN * WN_Float_Type_Conversion( WN *wn, TYPE_ID to_type );
extern WN * WN_Type_Conversion( WN *wn, TYPE_ID to_type );

extern INT32 WN_Size_and_StartAddress (WN *wn, void **StartAddress);

extern BOOL WN_verifier(WN *);
# 1297 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h"
extern BOOL WN_Tree_Has_Duplicate_Labels(
       WN *pu_wn,
       MEM_POOL *tmp_pool
);
# 1314 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/wn.h"
extern BOOL WN_Rename_Duplicate_Labels (
       WN *orig_wn,
       WN *copied_wn,
       WN *pu_wn,
       MEM_POOL *tmp_pool
);


inline WN *
WN_Create_Generic (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc,
     mINT16 kid_count, WN *next, WN *prev,
     ST *st, INT32 label_number, INT32 num_entries,
     TY_IDX ty, TY_IDX load_addr_ty, WN_OFFSET offset,
     INT16 cvtl_bits, INT32 num_dim, WN_ESIZE element_size,
     INT64 const_value, UINT32 flag, INTRINSIC intrinsic)
{
    return WN_Create_Generic (opr, rtype, desc,
         kid_count, next, prev, ST_st_idx (st),
         label_number, num_entries, ty, load_addr_ty,
         offset, cvtl_bits, num_dim, element_size,
         const_value, flag, intrinsic);
}

inline WN *
WN_Create_Generic (OPCODE opcode, mINT16 kid_count, WN *next, WN *prev,
     ST *st, INT32 label_number, INT32 num_entries,
     TY_IDX ty, TY_IDX load_addr_ty, WN_OFFSET offset,
     INT16 cvtl_bits, INT32 num_dim, WN_ESIZE element_size,
     INT64 const_value, UINT32 flag, INTRINSIC intrinsic)
{
    return WN_Create_Generic (OPCODE_operator(opcode), OPCODE_rtype(opcode),
         OPCODE_desc(opcode), kid_count, next, prev, st,
         label_number, num_entries, ty, load_addr_ty,
         offset, cvtl_bits, num_dim, element_size,
         const_value, flag, intrinsic);
}

inline WN *
WN_CreateEntry (INT16 nkids, ST *name, WN *body, WN *pragmas, WN *varrefs)
{
    return WN_CreateEntry (nkids, ST_st_idx (name), body, pragmas, varrefs);
}


inline WN *
WN_CreateRegionExit (ST *st, INT32 label_number)
{
    return WN_CreateRegionExit (label_number);
}

inline WN *
WN_CreateRegionExit (ST_IDX st, INT32 label_number)
{
    return WN_CreateRegionExit (label_number);
}


inline WN *
WN_CreateGoto (ST *st, INT32 label_number)
{
    return WN_CreateGoto (label_number);
}

inline WN *
WN_CreateGoto (ST_IDX st, INT32 label_number)
{
    return WN_CreateGoto (label_number);
}


inline WN *
WN_CreateLabel (ST_IDX st, INT32 label_number, UINT32 label_flag, WN *loop_info)
{
    return WN_CreateLabel (label_number, label_flag, loop_info);
}

inline WN *
WN_CreateAltentry (ST *entry)
{
    return WN_CreateAltentry (ST_st_idx (entry));
}

inline WN *
WN_CreateXgoto (INT32 num_entries, WN *value, WN *block, ST *st)
{
    return WN_CreateXgoto (num_entries, value, block, ST_st_idx (st));
}

inline WN *
WN_CreateStid (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc,
        WN_OFFSET offset, ST_IDX st, TY_IDX ty, WN *value,
        UINT field_id = 0)
{
    return WN_CreateStid (opr, rtype, desc, offset, &St_Table[st], ty, value, field_id);
}

inline WN *
WN_CreateStid (OPCODE opc, WN_OFFSET offset, ST_IDX st, TY_IDX ty, WN *value,
        UINT field_id = 0)
{
    return WN_CreateStid (OPCODE_operator(opc), OPCODE_rtype(opc),
     OPCODE_desc(opc), offset, st, ty, value, field_id);
}

inline WN *
WN_CreatePragma (WN_PRAGMA_ID pragma_name, ST *st, INT32 arg1, INT32 arg2)
{
    return WN_CreatePragma (pragma_name, ST_st_idx (st), arg1, arg2);
}

inline WN *
WN_CreatePragma (WN_PRAGMA_ID pragma_name,
   ST *st,
   INT32 arg1,
   PREG_NUM asm_copyout_preg,
   UINT32 asm_opnd_num)
{
    return WN_CreatePragma (pragma_name, ST_st_idx (st),
       arg1, asm_copyout_preg, asm_opnd_num);
}

inline WN *
WN_CreateXpragma (WN_PRAGMA_ID pragma_name, ST *st, INT16 kid_count)
{
    return WN_CreateXpragma (pragma_name, ST_st_idx (st), kid_count);
}

inline WN *
WN_CreateLdid (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc,
        WN_OFFSET offset, ST *st, TY_IDX ty, UINT field_id = 0)
{
    return WN_CreateLdid (opr, rtype, desc, offset, ST_st_idx (st), ty, field_id);
}

inline WN *
WN_CreateLdid (OPCODE opc, WN_OFFSET offset, ST *st, TY_IDX ty, UINT field_id = 0)
{
    return WN_CreateLdid (OPCODE_operator(opc), OPCODE_rtype(opc),
     OPCODE_desc(opc), offset, st, ty, field_id);
}

inline WN *
WN_CreateLda (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc,
       WN_OFFSET offset, TY_IDX ty, ST *st, UINT field_id = 0)
{
    return WN_CreateLda(opr, rtype, desc, offset, ty, ST_st_idx (st), field_id);
}

inline WN *
WN_CreateLda (OPCODE opc, WN_OFFSET offset, TY_IDX ty, ST *st)
{
    return WN_CreateLda (OPCODE_operator(opc), OPCODE_rtype(opc),
    OPCODE_desc(opc), offset, ty, st);
}

inline WN *
WN_CreateIdname (WN_OFFSET offset, ST *st)
{
    return WN_CreateIdname (offset, ST_st_idx (st));
}

inline WN *
WN_CreateConst (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, ST *st )
{
    return WN_CreateConst (opr, rtype, desc, ST_st_idx (st));
}

inline WN *
WN_CreateConst (OPCODE opc, ST *st )
{
    return WN_CreateConst (OPCODE_operator(opc), OPCODE_rtype(opc),
      OPCODE_desc(opc), st);
}

inline WN *
WN_Ldid (TYPE_ID desc, WN_OFFSET offset, ST *sym, TY_IDX align, UINT field_id = 0)
{
    return WN_Ldid (desc, offset, ST_st_idx (sym), align, field_id);
}

inline WN *
WN_RLdid (TYPE_ID rtype, TYPE_ID desc, WN_OFFSET offset, ST *sym, TY_IDX align)
{
    return WN_RLdid (rtype, desc, offset, ST_st_idx (sym), align);
}

inline WN *
WN_generic_call (OPERATOR opr, TYPE_ID rtype, TYPE_ID desc, INT32 n, ST *sym)
{
    return WN_generic_call (opr, rtype, desc, n, ST_st_idx (sym));
}


extern WN* WN_CreateAffirm (WN* condition);
extern WN* WN_CreateAlloca (WN* size);
extern WN* WN_CreateDealloca (INT32 n);
extern WN* WN_CreateLdma (TYPE_ID rtype, WN_OFFSET offset, TY_IDX ty, ST_IDX st);

extern void WN_set_st_addr_saved (WN *);

extern BOOL WN_has_side_effects (const WN*);

extern WN *WN_Rrotate (TYPE_ID desc, WN *src, WN *cnt);


extern WN* WN_CreateFork(INT32 label_number, BOOL major);


extern BOOL WN_Intrinsic_OP_Slave(WN * wn);
# 65 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx" 2

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hash_map" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hash_map" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hashtable.h" 1 3
# 68 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hashtable.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iterator" 1 3
# 63 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iterator" 3
       
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iterator" 3






# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
       
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 1 3
# 41 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 3
       
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 3



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/char_traits.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/char_traits.h" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/char_traits.h" 3





namespace __gnu_cxx
{
# 61 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/char_traits.h" 3
  template <class _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(std::memmove(__s1, __s2,
            __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {
      std::fill_n(__s, __n, __a);
      return __s;
    }
}

namespace std
{
# 224 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof() { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c) { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c) { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof() { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };


}
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 2 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/localefwd.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/localefwd.h" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/localefwd.h" 3






namespace std
{

  class locale;


  template<typename _CharT>
    inline bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    inline bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    inline _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    inline _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  class __enc_traits;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;

  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
}
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/atomicity.h" 1 3
# 38 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/atomicity.h" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/atomic_word.h" 1 3
# 33 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/atomicity.h" 2 3

namespace __gnu_cxx
{
  _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val);

  void
  __attribute__ ((__unused__))
  __atomic_add(volatile _Atomic_word* __mem, int __val);
}
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 2 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 3
       
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 3
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 1 3
# 64 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
namespace std
{
# 101 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Arg, class _Result>
    struct unary_function
    {
      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template <class _Arg1, class _Arg2, class _Result>
    struct binary_function
    {
      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;
      typedef _Result result_type;
    };
# 133 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template <class _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template <class _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template <class _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template <class _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template <class _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 195 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template <class _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template <class _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template <class _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template <class _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template <class _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 256 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template <class _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template <class _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
# 311 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;
    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) {}

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template <class _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template <class _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type,
        bool>
    {
    protected:
      _Predicate _M_pred;
    public:
      explicit
      binary_negate(const _Predicate& __x)
      : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template <class _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 391 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;
    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) {}

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    };


  template <class _Operation, class _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template <class _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;
    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) {}

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    };


  template <class _Operation, class _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }
# 480 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Arg, class _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);
    public:
      pointer_to_unary_function() {}

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) {}

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template <class _Arg, class _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template <class _Arg1, class _Arg2, class _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);
    public:
      pointer_to_binary_function() {}

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) {}

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template <class _Arg1, class _Arg2, class _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template <class _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template <class _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
    };

  template <class _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 582 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stl_function.h" 3
  template <class _Ret, class _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) {}

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }
    private:
      _Ret (_Tp::*_M_f)();
    };


  template <class _Ret, class _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) {}

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }
    private:
      _Ret (_Tp::*_M_f)() const;
    };


  template <class _Ret, class _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) {}

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }
    private:
      _Ret (_Tp::*_M_f)();
  };


  template <class _Ret, class _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) {}

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }
    private:
      _Ret (_Tp::*_M_f)() const;
    };


  template <class _Ret, class _Tp, class _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) {}

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };


  template <class _Ret, class _Tp, class _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) {}

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };


  template <class _Ret, class _Tp, class _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) {}

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }
    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };


  template <class _Ret, class _Tp, class _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) {}

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }
    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template <class _Ret, class _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template <class _Ret, class _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template <class _Ret, class _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template <class _Ret, class _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template <class _Ret, class _Tp, class _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template <class _Ret, class _Tp, class _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template <class _Ret, class _Tp, class _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template <class _Ret, class _Tp, class _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }



}
# 52 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3




namespace std
{
# 109 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 146 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 171 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {
   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {
   this->_M_set_sharable();
   this->_M_length = __n;
   traits_type::assign(this->_M_refdata()[__n], _S_terminal);


 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     if (__gnu_cxx::__exchange_and_add(&this->_M_refcount, -1) <= 0)
       _M_destroy(__a);
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      inline
      basic_string();




      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 448 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());







      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 503 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }






      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }

    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 614 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 627 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }





      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 656 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }




      bool
      empty() const
      { return this->size() == 0; }
# 684 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 701 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

 ;

 ;
 _M_leak();
 return _M_data()[__pos];
      }
# 722 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 741 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }






      basic_string&
      append(const basic_string& __str);
# 801 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
 ;
 return this->append(__s, traits_type::length(__s));
      }
# 833 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 844 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 883 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 899 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 911 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return this->assign(__s, traits_type::length(__s));
      }
# 927 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 939 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 956 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 971 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 987 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1009 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1032 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1050 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1073 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1090 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return this->_M_ibegin() + __pos;
      }
# 1114 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1130 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {
 ;

 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return _M_ibegin() + __pos;
      }
# 1150 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last)
      {
 ;

        const size_type __pos = __first - _M_ibegin();
 _M_mutate(__pos, __last - __first, size_type(0));
 _M_rep()->_M_set_leaked();
 return _M_ibegin() + __pos;
      }
# 1177 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1199 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1223 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1242 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1265 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1283 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1301 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {
 ;

 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1322 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1343 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {
 ;

 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1365 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
   ;

   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }

      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __true_type)
 { return _S_construct(static_cast<size_type>(__beg),
         static_cast<value_type>(__end), __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1496 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1506 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1516 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1548 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1561 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1575 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1592 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1605 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1620 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1633 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1650 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1663 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1678 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1691 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1710 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1724 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1739 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1752 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 1771 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 1785 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 1800 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 1814 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 1831 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 1844 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 1860 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 1873 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 1890 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 1905 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 1923 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = __size - __osize;
 return __r;
      }
# 1953 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 1977 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 1995 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2018 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2043 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>::
    basic_string()

    : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
# 2064 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2135 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2172 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) != 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) != 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) != 0; }
# 2209 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2246 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2283 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2320 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2357 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2374 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2392 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str);
# 2410 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2427 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);

}
# 53 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 2 3



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.tcc" 1 3
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.tcc" 3
       
# 47 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.tcc" 3

namespace std
{
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))
   __throw_logic_error(("basic_string::_S_construct NULL not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
       ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
       ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 558 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos + __n <= __size)
 {
   const _CharT* __data = _M_data();
   const _CharT* __p = std::search(__data + __pos, __data + __size,
       __s, __s + __n, traits_type::eq);
   if (__p != __data + __size || __n == 0)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = __n - __osize;
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = __n1 - __n2;
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = __size - __osize;
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = __n1 - __osize;
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = __n1 - __n2;
      return __r;
    }





  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);


}
# 57 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/string" 2 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 2 3



namespace std
{
# 67 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 105 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 124 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    locale() throw();
# 133 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 143 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 158 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 171 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 183 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 197 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 212 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 231 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw ();







    inline bool
    operator!=(const locale& __other) const throw ()
    { return !(this->operator==(__other)); }
# 259 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 275 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 310 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 343 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 374 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc);

    static void
    _S_destroy_c_locale(__c_locale& __cloc);



    static __c_locale
    _S_get_c_locale();

    static const char*
    _S_get_c_name();

  private:
    inline void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add(&_M_refcount, 1); }

    inline void
    _M_remove_reference() const throw()
    {
      if (__gnu_cxx::__exchange_and_add(&_M_refcount, -1) == 1)
 {
   try
     { delete this; }
   catch (...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 434 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw ();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const;
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    inline void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add(&_M_refcount, 1); }

    inline void
    _M_remove_reference() throw()
    {
      if (__gnu_cxx::__exchange_and_add(&_M_refcount, -1) == 1)
 {
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    inline bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = std::strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      inline void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };

  template<typename _Facet>
    locale::locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }
}
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 2 3

namespace std
{




  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 201 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
  class ios_base
  {
  public:



    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 253 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 328 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 359 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;





    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 392 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 418 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 435 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 447 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:






    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;




    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add(&_M_refcount, 1); }


      int
      _M_remove_reference()
      { return __gnu_cxx::__exchange_and_add(&_M_refcount, -1); }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void);


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    inline fmtflags
    flags() const { return _M_flags; }
# 557 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 573 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 590 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    inline void
    unsetf(fmtflags __mask) { _M_flags &= ~__mask; }
# 617 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline streamsize
    precision() const { return _M_precision; }






    inline streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    inline streamsize
    width() const { return _M_width; }






    inline streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 666 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 678 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc);
# 689 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline locale
    getloc() const { return _M_ios_locale; }
# 699 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline const locale&
    _M_getloc() const { return _M_ios_locale; }
# 717 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 733 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 754 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    inline void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 771 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }
}
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
       
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3






namespace std
{





  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout);
# 121 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;
# 144 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs<>(__streambuf_type* __sbin,
     __streambuf_type* __sbout);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 182 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;






      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 210 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 227 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 240 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 267 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 281 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 299 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 321 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 340 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 354 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 379 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 406 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 432 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 446 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 464 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 480 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 491 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 511 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 527 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 537 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 558 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 573 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 584 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 596 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 609 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual int
      sync() { return 0; }
# 631 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 647 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 669 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 682 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 706 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 724 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 749 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 778 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 3
    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs(basic_streambuf<char>* __sbin,
        basic_streambuf<char>* __sbout);

  template<>
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>* __sbin,
        basic_streambuf<wchar_t>* __sbout);

}


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/streambuf.tcc" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/streambuf.tcc" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/streambuf.tcc" 3

namespace std
{
  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      streamsize __ret = 0;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     break;
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }





  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*, basic_streambuf<char>*);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*, basic_streambuf<wchar_t>*);


}
# 807 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/streambuf" 2 3
# 50 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 1 3
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
       
# 40 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/streambuf_iterator.h" 1 3
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/streambuf_iterator.h" 3
       
# 40 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/streambuf_iterator.h" 3






namespace std
{


  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {
 ;


 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {
 ;



 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      {
 const bool __thiseof = _M_at_eof();
 const bool __beof = __b._M_at_eof();
 return (__thiseof && __beof || (!__thiseof && !__beof));
      }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };
}
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 2 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwctype" 1 3
# 48 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwctype" 3
       
# 49 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwctype" 3




# 1 "/usr/include/wctype.h" 1 3 4
# 35 "/usr/include/wctype.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h" 1 3 4
# 36 "/usr/include/wctype.h" 2 3 4
# 45 "/usr/include/wctype.h" 3 4

# 63 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 85 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 185 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (__const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef __const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 227 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (__const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (__const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (__const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 54 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwctype" 2 3
# 79 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/cwctype" 3
namespace std
{
  using ::wint_t;

  using ::wctype_t;
  using ::wctrans_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 47 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 2 3




namespace std
{
# 63 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _Tv>
    void
    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err,
     const __c_locale& __cloc);


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&);

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&);

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&);



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, const streamsize __newlen,
      const streamsize __oldlen, const bool __num);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }




# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/ctype_base.h" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/ctype_base.h" 3
  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };
# 133 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 2 3
# 144 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 162 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 179 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 195 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 211 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 225 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 240 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 254 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 269 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 286 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 305 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 324 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 346 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 371 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 390 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 409 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 428 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 446 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 463 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 479 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 496 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 515 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 536 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 558 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 582 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 605 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 674 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 711 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 724 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 737 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 752 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 766 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 780 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 795 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 812 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 828 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 845 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 865 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 892 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 923 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 956 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }

    protected:


      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();







      virtual
      ~ctype();
# 1003 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1020 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1036 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1053 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1073 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1096 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1122 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1148 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:

      void _M_widen_init() const
      {
 char __tmp[sizeof(_M_widen)];
 for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)
   __tmp[__i] = __i;
 do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);

 _M_widen_ok = 1;

 if (memcmp(__tmp, _M_widen, sizeof(_M_widen)))
   _M_widen_ok = 2;
      }




      void _M_narrow_init() const
      {
 char __tmp[sizeof(_M_narrow)];
 for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)
   __tmp[__i] = __i;
 do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);

 _M_narrow_ok = 1;
 if (memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))
   _M_narrow_ok = 2;
 else
   {


     char __c;
     do_narrow(__tmp, __tmp + 1, 1, &__c);
     if (__c == 1)
       _M_narrow_ok = 2;
   }
      }
    };

  template<>
    const ctype<char>&
    use_facet<ctype<char> >(const locale& __loc);
# 1212 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1245 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1256 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const;


      virtual
      ~ctype();
# 1280 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1299 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1317 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1335 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1352 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1369 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1385 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1402 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1422 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1444 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1467 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1493 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype();
    };

  template<>
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale& __loc);



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/ctype_inline.h" 3
  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }
# 1509 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 2 3


  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef _CharT char_type;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    ctype_byname<char>::ctype_byname(const char*, size_t refs);

  template<>
    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 1 3
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3
       
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3


  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 69 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 117 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 156 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 197 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 238 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (std::strcmp(__s, "C") != 0 && std::strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };
# 1534 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 2 3


  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod);
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_truename(__null), _M_truename_size(0), _M_falsename(__null),
      _M_falsename_size(0), _M_decimal_point(_CharT()),
      _M_thousands_sep(_CharT()), _M_allocated(false)
      { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1656 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(); }
# 1693 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1707 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(__cloc); }
# 1721 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1734 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1765 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1778 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1791 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1808 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1820 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1833 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1846 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1859 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (std::strcmp(__s, "C") != 0 && std::strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };


# 1926 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1947 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1973 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2009 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2068 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2110 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string& __xtrc) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT& __v) const;
# 2143 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
       unsigned short&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      unsigned int&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      unsigned long&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long long&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      unsigned long long&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2202 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2219 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2240 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2258 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2300 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2363 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2388 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2436 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long __v) const;

      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, unsigned long) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long long __v) const;

      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;


# 2493 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 2520 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 2534 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 2551 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 2570 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 2584 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const;

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const;

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 2613 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 2629 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 2642 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const;

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const;


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (std::strcmp(__s, "C") != 0 && std::strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };
# 2702 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  class time_base
  {
  public:
    enum dateorder { no_order, dmy, mdy, ymd, ydm };
  };

  template<typename _CharT>
    struct __timepunct_cache : public locale::facet
    {

      static const _CharT* _S_timezones[14];

      const _CharT* _M_date_format;
      const _CharT* _M_date_era_format;
      const _CharT* _M_time_format;
      const _CharT* _M_time_era_format;
      const _CharT* _M_date_time_format;
      const _CharT* _M_date_time_era_format;
      const _CharT* _M_am;
      const _CharT* _M_pm;
      const _CharT* _M_am_pm_format;


      const _CharT* _M_day1;
      const _CharT* _M_day2;
      const _CharT* _M_day3;
      const _CharT* _M_day4;
      const _CharT* _M_day5;
      const _CharT* _M_day6;
      const _CharT* _M_day7;


      const _CharT* _M_aday1;
      const _CharT* _M_aday2;
      const _CharT* _M_aday3;
      const _CharT* _M_aday4;
      const _CharT* _M_aday5;
      const _CharT* _M_aday6;
      const _CharT* _M_aday7;


      const _CharT* _M_month01;
      const _CharT* _M_month02;
      const _CharT* _M_month03;
      const _CharT* _M_month04;
      const _CharT* _M_month05;
      const _CharT* _M_month06;
      const _CharT* _M_month07;
      const _CharT* _M_month08;
      const _CharT* _M_month09;
      const _CharT* _M_month10;
      const _CharT* _M_month11;
      const _CharT* _M_month12;


      const _CharT* _M_amonth01;
      const _CharT* _M_amonth02;
      const _CharT* _M_amonth03;
      const _CharT* _M_amonth04;
      const _CharT* _M_amonth05;
      const _CharT* _M_amonth06;
      const _CharT* _M_amonth07;
      const _CharT* _M_amonth08;
      const _CharT* _M_amonth09;
      const _CharT* _M_amonth10;
      const _CharT* _M_amonth11;
      const _CharT* _M_amonth12;

      bool _M_allocated;

      __timepunct_cache(size_t __refs = 0) : facet(__refs),
      _M_date_format(__null), _M_date_era_format(__null), _M_time_format(__null),
      _M_time_era_format(__null), _M_date_time_format(__null),
      _M_date_time_era_format(__null), _M_am(__null), _M_pm(__null),
      _M_am_pm_format(__null), _M_day1(__null), _M_day2(__null), _M_day3(__null),
      _M_day4(__null), _M_day5(__null), _M_day6(__null), _M_day7(__null),
      _M_aday1(__null), _M_aday2(__null), _M_aday3(__null), _M_aday4(__null),
      _M_aday5(__null), _M_aday6(__null), _M_aday7(__null), _M_month01(__null),
      _M_month02(__null), _M_month03(__null), _M_month04(__null), _M_month05(__null),
      _M_month06(__null), _M_month07(__null), _M_month08(__null), _M_month09(__null),
      _M_month10(__null), _M_month11(__null), _M_month12(__null), _M_amonth01(__null),
      _M_amonth02(__null), _M_amonth03(__null), _M_amonth04(__null),
      _M_amonth05(__null), _M_amonth06(__null), _M_amonth07(__null),
      _M_amonth08(__null), _M_amonth09(__null), _M_amonth10(__null),
      _M_amonth11(__null), _M_amonth12(__null), _M_allocated(false)
      { }

      ~__timepunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __timepunct_cache&
      operator=(const __timepunct_cache&);

      explicit
      __timepunct_cache(const __timepunct_cache&);
    };

  template<typename _CharT>
    __timepunct_cache<_CharT>::~__timepunct_cache()
    {
      if (_M_allocated)
 {

 }
    }


  template<>
    const char*
    __timepunct_cache<char>::_S_timezones[14];


  template<>
    const wchar_t*
    __timepunct_cache<wchar_t>::_S_timezones[14];



  template<typename _CharT>
    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];

  template<typename _CharT>
    class __timepunct : public locale::facet
    {
    public:

      typedef _CharT __char_type;
      typedef basic_string<_CharT> __string_type;
      typedef __timepunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;
      __c_locale _M_c_locale_timepunct;
      const char* _M_name_timepunct;

    public:

      static locale::id id;

      explicit
      __timepunct(size_t __refs = 0);

      explicit
      __timepunct(__cache_type* __cache, size_t __refs = 0);
# 2860 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);



      void
      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,
      const tm* __tm) const;

      void
      _M_date_formats(const _CharT** __date) const
      {

 __date[0] = _M_data->_M_date_format;
 __date[1] = _M_data->_M_date_era_format;
      }

      void
      _M_time_formats(const _CharT** __time) const
      {

 __time[0] = _M_data->_M_time_format;
 __time[1] = _M_data->_M_time_era_format;
      }

      void
      _M_date_time_formats(const _CharT** __dt) const
      {

 __dt[0] = _M_data->_M_date_time_format;
 __dt[1] = _M_data->_M_date_time_era_format;
      }

      void
      _M_am_pm_format(const _CharT* __ampm) const
      { __ampm = _M_data->_M_am_pm_format; }

      void
      _M_am_pm(const _CharT** __ampm) const
      {
 __ampm[0] = _M_data->_M_am;
 __ampm[1] = _M_data->_M_pm;
      }

      void
      _M_days(const _CharT** __days) const
      {
 __days[0] = _M_data->_M_day1;
 __days[1] = _M_data->_M_day2;
 __days[2] = _M_data->_M_day3;
 __days[3] = _M_data->_M_day4;
 __days[4] = _M_data->_M_day5;
 __days[5] = _M_data->_M_day6;
 __days[6] = _M_data->_M_day7;
      }

      void
      _M_days_abbreviated(const _CharT** __days) const
      {
 __days[0] = _M_data->_M_aday1;
 __days[1] = _M_data->_M_aday2;
 __days[2] = _M_data->_M_aday3;
 __days[3] = _M_data->_M_aday4;
 __days[4] = _M_data->_M_aday5;
 __days[5] = _M_data->_M_aday6;
 __days[6] = _M_data->_M_aday7;
      }

      void
      _M_months(const _CharT** __months) const
      {
 __months[0] = _M_data->_M_month01;
 __months[1] = _M_data->_M_month02;
 __months[2] = _M_data->_M_month03;
 __months[3] = _M_data->_M_month04;
 __months[4] = _M_data->_M_month05;
 __months[5] = _M_data->_M_month06;
 __months[6] = _M_data->_M_month07;
 __months[7] = _M_data->_M_month08;
 __months[8] = _M_data->_M_month09;
 __months[9] = _M_data->_M_month10;
 __months[10] = _M_data->_M_month11;
 __months[11] = _M_data->_M_month12;
      }

      void
      _M_months_abbreviated(const _CharT** __months) const
      {
 __months[0] = _M_data->_M_amonth01;
 __months[1] = _M_data->_M_amonth02;
 __months[2] = _M_data->_M_amonth03;
 __months[3] = _M_data->_M_amonth04;
 __months[4] = _M_data->_M_amonth05;
 __months[5] = _M_data->_M_amonth06;
 __months[6] = _M_data->_M_amonth07;
 __months[7] = _M_data->_M_amonth08;
 __months[8] = _M_data->_M_amonth09;
 __months[9] = _M_data->_M_amonth10;
 __months[10] = _M_data->_M_amonth11;
 __months[11] = _M_data->_M_amonth12;
      }

    protected:
      virtual
      ~__timepunct();


      void
      _M_initialize_timepunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id __timepunct<_CharT>::id;


  template<>
    void
    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);

  template<>
    void
    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;


  template<>
    void
    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);

  template<>
    void
    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,
     const tm*) const;



# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/time_members.h" 1 3
# 37 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/time_members.h" 3
  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(size_t __refs)
    : facet(__refs), _M_data(__null), _M_c_locale_timepunct(__null),
      _M_name_timepunct(_S_get_c_name())
    { _M_initialize_timepunct(); }

  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs)
    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(__null),
      _M_name_timepunct(_S_get_c_name())
    { _M_initialize_timepunct(); }

  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,
         size_t __refs)
    : facet(__refs), _M_data(__null), _M_c_locale_timepunct(__null),
      _M_name_timepunct(__null)
    {
      const size_t __len = std::strlen(__s) + 1;
      char* __tmp = new char[__len];
      std::memcpy(__tmp, __s, __len);
      _M_name_timepunct = __tmp;

      try
 { _M_initialize_timepunct(__cloc); }
      catch(...)
 {
   delete [] _M_name_timepunct;
   throw;
 }
    }

  template<typename _CharT>
    __timepunct<_CharT>::~__timepunct()
    {
      if (_M_name_timepunct != _S_get_c_name())
 delete [] _M_name_timepunct;
      delete _M_data;
      _S_destroy_c_locale(_M_c_locale_timepunct);
    }
# 2996 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 2 3
# 3009 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class time_get : public locale::facet, public time_base
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;

      typedef basic_string<_CharT> __string_type;


      static locale::id id;
# 3031 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      time_get(size_t __refs = 0)
      : facet (__refs) { }
# 3048 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      dateorder
      date_order() const
      { return this->do_date_order(); }
# 3072 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get_time(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_time(__beg, __end, __io, __err, __tm); }
# 3097 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get_date(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_date(__beg, __end, __io, __err, __tm); }
# 3125 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_weekday(__beg, __end, __io, __err, __tm); }
# 3154 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get_monthname(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_monthname(__beg, __end, __io, __err, __tm); }
# 3180 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get_year(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_year(__beg, __end, __io, __err, __tm); }

    protected:

      virtual
      ~time_get() { }
# 3200 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual dateorder
      do_date_order() const;
# 3218 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 3237 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 3256 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,
       ios_base::iostate& __err, tm* __tm) const;
# 3275 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get_monthname(iter_type __beg, iter_type __end, ios_base&,
         ios_base::iostate& __err, tm* __tm) const;
# 3294 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;


      iter_type
      _M_extract_num(iter_type __beg, iter_type __end, int& __member,
       int __min, int __max, size_t __len,
       ios_base& __io, ios_base::iostate& __err) const;



      iter_type
      _M_extract_name(iter_type __beg, iter_type __end, int& __member,
        const _CharT** __names, size_t __indexlen,
        ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,
       ios_base::iostate& __err, tm* __tm,
       const _CharT* __format) const;
    };

  template<typename _CharT, typename _InIter>
    locale::id time_get<_CharT, _InIter>::id;


  template<typename _CharT, typename _InIter>
    class time_get_byname : public time_get<_CharT, _InIter>
    {
    public:

      typedef _CharT char_type;
      typedef _InIter iter_type;

      explicit
      time_get_byname(const char*, size_t __refs = 0)
      : time_get<_CharT, _InIter>(__refs) { }

    protected:
      virtual
      ~time_get_byname() { }
    };
# 3350 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class time_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 3371 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      time_put(size_t __refs = 0)
      : facet(__refs) { }
# 3390 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
   const _CharT* __beg, const _CharT* __end) const;
# 3410 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const tm* __tm, char __format, char __mod = 0) const
      { return this->do_put(__s, __io, __fill, __tm, __format, __mod); }

    protected:

      virtual
      ~time_put()
      { }
# 3437 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
      char __format, char __mod) const;
    };

  template<typename _CharT, typename _OutIter>
    locale::id time_put<_CharT, _OutIter>::id;


  template<typename _CharT, typename _OutIter>
    class time_put_byname : public time_put<_CharT, _OutIter>
    {
    public:

      typedef _CharT char_type;
      typedef _OutIter iter_type;

      explicit
      time_put_byname(const char*, size_t __refs = 0)
      : time_put<_CharT, _OutIter>(__refs)
      { };

    protected:
      virtual
      ~time_put_byname() { }
    };
# 3475 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  class money_base
  {
  public:
    enum part { none, space, symbol, sign, value };
    struct pattern { char field[4]; };

    static const pattern _S_default_pattern;

    enum
    {
      _S_minus,
      _S_zero,
      _S_end = 11
    };



    static const char* _S_atoms;



    static pattern
    _S_construct_pattern(char __precedes, char __space, char __posn);
  };

  template<typename _CharT, bool _Intl>
    struct __moneypunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;
      const _CharT* _M_curr_symbol;
      size_t _M_curr_symbol_size;
      const _CharT* _M_positive_sign;
      size_t _M_positive_sign_size;
      const _CharT* _M_negative_sign;
      size_t _M_negative_sign_size;
      int _M_frac_digits;
      money_base::pattern _M_pos_format;
      money_base::pattern _M_neg_format;




      _CharT _M_atoms[money_base::_S_end];

      bool _M_allocated;

      __moneypunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()),
      _M_curr_symbol(__null), _M_curr_symbol_size(0),
      _M_positive_sign(__null), _M_positive_sign_size(0),
      _M_negative_sign(__null), _M_negative_sign_size(0),
      _M_frac_digits(0),
      _M_pos_format(money_base::pattern()),
      _M_neg_format(money_base::pattern()), _M_allocated(false)
      { }

      ~__moneypunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __moneypunct_cache&
      operator=(const __moneypunct_cache&);

      explicit
      __moneypunct_cache(const __moneypunct_cache&);
    };

  template<typename _CharT, bool _Intl>
    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_curr_symbol;
   delete [] _M_positive_sign;
   delete [] _M_negative_sign;
 }
    }







  template<typename _CharT, bool _Intl>
    class moneypunct : public locale::facet, public money_base
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

    private:
      __cache_type* _M_data;

    public:


      static const bool intl = _Intl;

      static locale::id id;
# 3596 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      moneypunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_moneypunct(); }
# 3608 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      moneypunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_moneypunct(); }
# 3623 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_moneypunct(__cloc, __s); }
# 3637 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 3650 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 3679 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 3692 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      curr_symbol() const
      { return this->do_curr_symbol(); }
# 3709 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      positive_sign() const
      { return this->do_positive_sign(); }
# 3726 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      negative_sign() const
      { return this->do_negative_sign(); }
# 3742 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      int
      frac_digits() const
      { return this->do_frac_digits(); }
# 3777 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      pattern
      pos_format() const
      { return this->do_pos_format(); }

      pattern
      neg_format() const
      { return this->do_neg_format(); }


    protected:

      virtual
      ~moneypunct();
# 3799 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 3811 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 3824 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 3837 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_curr_symbol() const
      { return _M_data->_M_curr_symbol; }
# 3850 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_positive_sign() const
      { return _M_data->_M_positive_sign; }
# 3863 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_negative_sign() const
      { return _M_data->_M_negative_sign; }
# 3877 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual int
      do_frac_digits() const
      { return _M_data->_M_frac_digits; }
# 3891 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual pattern
      do_pos_format() const
      { return _M_data->_M_pos_format; }
# 3905 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual pattern
      do_neg_format() const
      { return _M_data->_M_neg_format; }


       void
       _M_initialize_moneypunct(__c_locale __cloc = __null,
    const char* __name = __null);
    };

  template<typename _CharT, bool _Intl>
    locale::id moneypunct<_CharT, _Intl>::id;

  template<typename _CharT, bool _Intl>
    const bool moneypunct<_CharT, _Intl>::intl;

  template<>
    moneypunct<char, true>::~moneypunct();

  template<>
    moneypunct<char, false>::~moneypunct();

  template<>
    void
    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);

  template<>
    void
    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);


  template<>
    moneypunct<wchar_t, true>::~moneypunct();

  template<>
    moneypunct<wchar_t, false>::~moneypunct();

  template<>
    void
    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,
       const char*);

  template<>
    void
    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,
        const char*);



  template<typename _CharT, bool _Intl>
    class moneypunct_byname : public moneypunct<_CharT, _Intl>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      static const bool intl = _Intl;

      explicit
      moneypunct_byname(const char* __s, size_t __refs = 0)
      : moneypunct<_CharT, _Intl>(__refs)
      {
 if (std::strcmp(__s, "C") != 0 && std::strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_moneypunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~moneypunct_byname() { }
    };

  template<typename _CharT, bool _Intl>
    const bool moneypunct_byname<_CharT, _Intl>::intl;


# 3997 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class money_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;
      typedef basic_string<_CharT> string_type;



      static locale::id id;
# 4019 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      money_get(size_t __refs = 0) : facet(__refs) { }
# 4049 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
   ios_base::iostate& __err, long double& __units) const
      { return this->do_get(__s, __end, __intl, __io, __err, __units); }
# 4079 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
   ios_base::iostate& __err, string_type& __digits) const
      { return this->do_get(__s, __end, __intl, __io, __err, __digits); }

    protected:

      virtual
      ~money_get() { }
# 4102 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
      ios_base::iostate& __err, long double& __units) const;
# 4114 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
      ios_base::iostate& __err, string_type& __digits) const;
# 4125 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      template<bool _Intl>
        iter_type
        _M_extract(iter_type __s, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, string& __digits) const;
    };

  template<typename _CharT, typename _InIter>
    locale::id money_get<_CharT, _InIter>::id;
# 4146 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class money_put : public locale::facet
    {
    public:


      typedef _CharT char_type;
      typedef _OutIter iter_type;
      typedef basic_string<_CharT> string_type;



      static locale::id id;
# 4167 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      money_put(size_t __refs = 0) : facet(__refs) { }
# 4187 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, bool __intl, ios_base& __io,
   char_type __fill, long double __units) const
      { return this->do_put(__s, __intl, __io, __fill, __units); }
# 4209 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, bool __intl, ios_base& __io,
   char_type __fill, const string_type& __digits) const
      { return this->do_put(__s, __intl, __io, __fill, __digits); }

    protected:

      virtual
      ~money_put() { }
# 4243 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
      long double __units) const;
# 4266 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
      const string_type& __digits) const;
# 4277 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      template<bool _Intl>
        iter_type
        _M_insert(iter_type __s, ios_base& __io, char_type __fill,
    const string_type& __digits) const;
    };

  template<typename _CharT, typename _OutIter>
    locale::id money_put<_CharT, _OutIter>::id;






  struct messages_base
  {
    typedef int catalog;
  };
# 4316 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT>
    class messages : public locale::facet, public messages_base
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_messages;
      const char* _M_name_messages;

    public:

      static locale::id id;
# 4344 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      messages(size_t __refs = 0);
# 4358 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      explicit
      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);
# 4371 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      catalog
      open(const basic_string<char>& __s, const locale& __loc) const
      { return this->do_open(__s, __loc); }
# 4389 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      catalog
      open(const basic_string<char>&, const locale&, const char*) const;
# 4407 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      string_type
      get(catalog __c, int __set, int __msgid, const string_type& __s) const
      { return this->do_get(__c, __set, __msgid, __s); }
# 4418 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      void
      close(catalog __c) const
      { return this->do_close(__c); }

    protected:

      virtual
      ~messages();
# 4438 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual catalog
      do_open(const basic_string<char>&, const locale&) const;
# 4457 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
      virtual string_type
      do_get(catalog, int, int, const string_type& __dfault) const;






      virtual void
      do_close(catalog) const;


      char*
      _M_convert_to_char(const string_type& __msg) const
      {

 return reinterpret_cast<char*>(const_cast<_CharT*>(__msg.c_str()));
      }


      string_type
      _M_convert_from_char(char*) const
      {
# 4514 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
 return string_type();
      }
     };

  template<typename _CharT>
    locale::id messages<_CharT>::id;


  template<>
    string
    messages<char>::do_get(catalog, int, int, const string&) const;


  template<>
    wstring
    messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;



   template<typename _CharT>
    class messages_byname : public messages<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      messages_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~messages_byname()
      { }
    };


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/messages_members.h" 1 3
# 37 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/i486-linux-gnu/bits/messages_members.h" 3
  template<typename _CharT>
     messages<_CharT>::messages(size_t __refs)
     : facet(__refs), _M_c_locale_messages(_S_get_c_locale()),
       _M_name_messages(_S_get_c_name())
     { }

  template<typename _CharT>
     messages<_CharT>::messages(__c_locale __cloc, const char* __s,
    size_t __refs)
     : facet(__refs), _M_c_locale_messages(__null), _M_name_messages(__null)
     {
       const size_t __len = std::strlen(__s) + 1;
       char* __tmp = new char[__len];
       std::memcpy(__tmp, __s, __len);
       _M_name_messages = __tmp;


       _M_c_locale_messages = _S_clone_c_locale(__cloc);
     }

  template<typename _CharT>
    typename messages<_CharT>::catalog
    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc,
      const char* __dir) const
    {
      bindtextdomain(__s.c_str(), __dir);
      return this->do_open(__s, __loc);
    }


  template<typename _CharT>
    messages<_CharT>::~messages()
    {
      if (_M_name_messages != _S_get_c_name())
 delete [] _M_name_messages;
      _S_destroy_c_locale(_M_c_locale_messages);
    }

  template<typename _CharT>
    typename messages<_CharT>::catalog
    messages<_CharT>::do_open(const basic_string<char>& __s,
         const locale&) const
    {


      textdomain(__s.c_str());
      return 0;
    }

  template<typename _CharT>
    void
    messages<_CharT>::do_close(catalog) const
    { }


   template<typename _CharT>
     messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)
     : messages<_CharT>(__refs)
     {
       if (this->_M_name_messages != locale::facet::_S_get_c_name())
  delete [] this->_M_name_messages;
       char* __tmp = new char[std::strlen(__s) + 1];
       std::strcpy(__tmp, __s);
       this->_M_name_messages = __tmp;

       if (std::strcmp(__s, "C") != 0 && std::strcmp(__s, "POSIX") != 0)
  {
    this->_S_destroy_c_locale(this->_M_c_locale_messages);
    this->_S_create_c_locale(this->_M_c_locale_messages, __s);
  }
     }
# 4551 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 2 3
# 4559 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }
}
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 2 3

namespace std
{







  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;
# 78 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 122 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 133 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 186 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 207 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 242 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
      _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 280 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 292 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 332 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 346 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 375 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 395 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 415 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const;
# 433 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 3
      char_type
      widen(char __c) const;

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
      _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };
}


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.tcc" 1 3
# 38 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.tcc" 3
       
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.tcc" 3

namespace std
{
  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    char
    basic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const
    { return __check_facet(_M_ctype).narrow(__c, __dfault); }

  template<typename _CharT, typename _Traits>
    _CharT
    basic_ios<_CharT, _Traits>::widen(char __c) const
    { return __check_facet(_M_ctype).widen(__c); }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 159 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }





  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;


}
# 465 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/basic_ios.h" 2 3
# 51 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ios" 2 3
# 45 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 2 3

namespace std
{
# 56 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;

      template<typename _CharT2, typename _Traits2>
        friend basic_ostream<_CharT2, _Traits2>&
        operator<<(basic_ostream<_CharT2, _Traits2>&, _CharT2);

      template<typename _Traits2>
        friend basic_ostream<char, _Traits2>&
        operator<<(basic_ostream<char, _Traits2>&, char);

      template<typename _CharT2, typename _Traits2>
        friend basic_ostream<_CharT2, _Traits2>&
        operator<<(basic_ostream<_CharT2, _Traits2>&, const _CharT2*);

      template<typename _Traits2>
        friend basic_ostream<char, _Traits2>&
        operator<<(basic_ostream<char, _Traits2>&, const char*);

      template<typename _CharT2, typename _Traits2>
        friend basic_ostream<_CharT2, _Traits2>&
        operator<<(basic_ostream<_CharT2, _Traits2>&, const char*);
# 103 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 129 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      inline __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&));

      inline __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&));

      inline __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&));
# 166 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      __ostream_type&
      operator<<(long __n);

      __ostream_type&
      operator<<(unsigned long __n);

      __ostream_type&
      operator<<(bool __n);

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n);

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n);


      __ostream_type&
      operator<<(long long __n);

      __ostream_type&
      operator<<(unsigned long long __n);


      __ostream_type&
      operator<<(double __f);

      __ostream_type&
      operator<<(float __f);

      __ostream_type&
      operator<<(long double __f);

      __ostream_type&
      operator<<(const void* __p);
# 228 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 261 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 289 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 302 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      __ostream_type&
      flush();
# 313 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      pos_type
      tellp();
# 324 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 336 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      explicit
      basic_ostream() { }
    };
# 354 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT,_Traits>& _M_os;

    public:
# 373 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      explicit
      sentry(basic_ostream<_CharT,_Traits>& __os);
# 383 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      ~sentry()
      {

 if (_M_os.flags() & ios_base::unitbuf && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 401 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 422 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c);

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c);


  template<class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 462 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s);

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s);


  template<class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 496 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 3
  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }

}


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ostream.tcc" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ostream.tcc" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ostream.tcc" 3

# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/locale" 1 3
# 41 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/locale" 3
       
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/locale" 3




# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 1 3
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
       
# 40 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/typeinfo" 1 3
# 40 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/typeinfo" 3
#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 59 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);

  protected:
    const char *__name;

  protected:
    explicit type_info(const char *__n): __name(__n) { }

  public:



    const char* name() const
    { return __name; }
# 105 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/typeinfo" 3
    bool before(const type_info& __arg) const
    { return __name < __arg.__name; }
    bool operator==(const type_info& __arg) const
    { return __name == __arg.__name; }

    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


  public:

    virtual bool __is_pointer_p() const;

    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;
  };






  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }


    virtual ~bad_cast() throw();
  };


  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }


    virtual ~bad_typeid() throw();
  };
}

#pragma GCC visibility pop

}
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 2 3


namespace std
{
  template<typename _Facet>
    locale
    locale::combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
                       const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 86 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _Facet>
    inline bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);
    }
# 108 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _Facet>
    inline const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))
        __throw_bad_cast();
      return static_cast<const _Facet&>(*__facets[__i]);
    }



  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT, bool _Intl>
    struct __use_cache<__moneypunct_cache<_CharT, _Intl> >
    {
      const __moneypunct_cache<_CharT, _Intl>*
      operator() (const locale& __loc) const
      {
 const size_t __i = moneypunct<_CharT, _Intl>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __moneypunct_cache<_CharT, _Intl>* __tmp = __null;
     try
       {
  __tmp = new __moneypunct_cache<_CharT, _Intl>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<
   const __moneypunct_cache<_CharT, _Intl>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      _M_grouping_size = __np.grouping().size();
      char* __grouping = new char[_M_grouping_size];
      __np.grouping().copy(__grouping, _M_grouping_size);
      _M_grouping = __grouping;
      _M_use_grouping = (_M_grouping_size
    && static_cast<signed char>(__np.grouping()[0]) > 0);

      _M_truename_size = __np.truename().size();
      _CharT* __truename = new _CharT[_M_truename_size];
      __np.truename().copy(__truename, _M_truename_size);
      _M_truename = __truename;

      _M_falsename_size = __np.falsename().size();
      _CharT* __falsename = new _CharT[_M_falsename_size];
      __np.falsename().copy(__falsename, _M_falsename_size);
      _M_falsename = __falsename;

      _M_decimal_point = __np.decimal_point();
      _M_thousands_sep = __np.thousands_sep();

      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
      __ct.widen(__num_base::_S_atoms_out,
   __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);
      __ct.widen(__num_base::_S_atoms_in,
   __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);
    }

  template<typename _CharT, bool _Intl>
    void
    __moneypunct_cache<_CharT, _Intl>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const moneypunct<_CharT, _Intl>& __mp =
 use_facet<moneypunct<_CharT, _Intl> >(__loc);

      _M_grouping_size = __mp.grouping().size();
      char* __grouping = new char[_M_grouping_size];
      __mp.grouping().copy(__grouping, _M_grouping_size);
      _M_grouping = __grouping;
      _M_use_grouping = (_M_grouping_size
    && static_cast<signed char>(__mp.grouping()[0]) > 0);

      _M_decimal_point = __mp.decimal_point();
      _M_thousands_sep = __mp.thousands_sep();
      _M_frac_digits = __mp.frac_digits();

      _M_curr_symbol_size = __mp.curr_symbol().size();
      _CharT* __curr_symbol = new _CharT[_M_curr_symbol_size];
      __mp.curr_symbol().copy(__curr_symbol, _M_curr_symbol_size);
      _M_curr_symbol = __curr_symbol;

      _M_positive_sign_size = __mp.positive_sign().size();
      _CharT* __positive_sign = new _CharT[_M_positive_sign_size];
      __mp.positive_sign().copy(__positive_sign, _M_positive_sign_size);
      _M_positive_sign = __positive_sign;

      _M_negative_sign_size = __mp.negative_sign().size();
      _CharT* __negative_sign = new _CharT[_M_negative_sign_size];
      __mp.negative_sign().copy(__negative_sign, _M_negative_sign_size);
      _M_negative_sign = __negative_sign;

      _M_pos_format = __mp.pos_format();
      _M_neg_format = __mp.neg_format();

      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
      __ct.widen(money_base::_S_atoms,
   money_base::_S_atoms + money_base::_S_end, _M_atoms);
    }
# 271 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  static bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp);



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __q;
      const char_type* __lit_zero = __lit + __num_base::_S_izero;
      while (!__testeof)
        {


          if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
     {
       if (!__found_dec && !__found_sci)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {


        __xtrc.clear();
        break;
      }
  }
       else
  break;
            }
   else if (__c == __lc->_M_decimal_point)
     {
       if (!__found_dec && !__found_sci)
  {



    if (__found_grouping.size())
      __found_grouping += static_cast<char>(__sep_pos);
    __xtrc += '.';
    __found_dec = true;
  }
       else
  break;
     }
          else if ((__q = __traits_type::find(__lit_zero, 10, __c)))
     {
       __xtrc += __num_base::_S_atoms_in[__q - __lit];
       __found_mantissa = true;
       ++__sep_pos;
     }
   else if ((__c == __lit[__num_base::_S_ie]
      || __c == __lit[__num_base::_S_iE])
     && !__found_sci && __found_mantissa)
     {

       if (__found_grouping.size() && !__found_dec)
  __found_grouping += static_cast<char>(__sep_pos);
       __xtrc += 'e';
       __found_sci = true;


       if (++__beg != __end)
  {
    __c = *__beg;
    const bool __plus = __c == __lit[__num_base::_S_iplus];
    if ((__plus || __c == __lit[__num_base::_S_iminus])
        && !(__lc->_M_use_grouping
      && __c == __lc->_M_thousands_sep)
        && !(__c == __lc->_M_decimal_point))
      __xtrc += __plus ? '+' : '-';
    else
      continue;
  }
       else
  {
    __testeof = true;
    break;
  }
     }
   else

     break;

   if (++__beg != __end)
     __c = *__beg;
   else
     __testeof = true;
        }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err |= ios_base::failbit;
        }


      if (__testeof)
        __err |= ios_base::eofbit;
      return __beg;
    }



  template<typename _ValueT>
    struct __to_unsigned_type
    { typedef _ValueT __type; };

  template<>
    struct __to_unsigned_type<long>
    { typedef unsigned long __type; };


  template<>
    struct __to_unsigned_type<long long>
    { typedef unsigned long long __type; };




  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 typedef typename __to_unsigned_type<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     if (numeric_limits<_ValueT>::is_signed)
       __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 const __unsigned_type __max = __negative ?
   -numeric_limits<_ValueT>::min() : numeric_limits<_ValueT>::max();
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 const char_type* __q;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {


  if (__sep_pos)
    {
      __found_grouping += static_cast<char>(__sep_pos);
      __sep_pos = 0;
    }
  else
    {
      __testfail = true;
      break;
    }
       }
     else if (__c == __lc->_M_decimal_point)
       break;
     else if ((__q = __traits_type::find(__lit_zero, __len, __c)))
       {
  int __digit = __q - __lit_zero;
  if (__digit > 15)
    __digit -= 6;
  if (__result > __smax)
    __testfail = true;
  else
    {
      __result *= __base;
      __testfail |= __result > __max - __digit;
      __result += __digit;
      ++__sep_pos;
    }
       }
     else

       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err |= ios_base::failbit;
   }

 if (!__testfail && (__sep_pos || __found_zero
       || __found_grouping.size()))
   __v = __negative ? -__result : __result;
 else
   __err |= ios_base::failbit;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = __l;
   else
            __err |= ios_base::failbit;
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   size_t __n;
   bool __testeof = __beg == __end;
          for (__n = 0; !__testeof; ++__n)
            {
       const char_type __c = *__beg;

       if (__testf)
  if (__n < __lc->_M_falsename_size)
    __testf = __c == __lc->_M_falsename[__n];
  else
    break;

       if (__testt)
  if (__n < __lc->_M_truename_size)
    __testt = __c == __lc->_M_truename[__n];
  else
    break;

       if (!__testf && !__testt)
  break;

       if (++__beg == __end)
  __testeof = true;
            }
   if (__testf && __n == __lc->_M_falsename_size)
     __v = 0;
   else if (__testt && __n == __lc->_M_truename_size)
     __v = 1;
   else
     __err |= ios_base::failbit;

          if (__testeof)
            __err |= ios_base::eofbit;
        }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long& __v) const
    { return _M_extract_int(__beg, __end, __io, __err, __v); }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, unsigned short& __v) const
    { return _M_extract_int(__beg, __end, __io, __err, __v); }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, unsigned int& __v) const
    { return _M_extract_int(__beg, __end, __io, __err, __v); }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, unsigned long& __v) const
    { return _M_extract_int(__beg, __end, __io, __err, __v); }


  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long long& __v) const
    { return _M_extract_int(__beg, __end, __io, __err, __v); }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, unsigned long long& __v) const
    { return _M_extract_int(__beg, __end, __io, __err, __v); }


  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      return __beg;
    }
# 796 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags(__fmt & ~ios_base::basefield | ios_base::hex);

      unsigned long __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      if (!(__err & ios_base::failbit))
 __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new, __cs,
        __w, __len, true);
      __len = static_cast<int>(__w);
    }






  template<typename _CharT>
    inline int
    __int_to_char(_CharT* __bufend, long __v, const _CharT* __lit,
    ios_base::fmtflags __flags)
    {
      unsigned long __ul = __v;
      const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
      if (__builtin_expect(__basefield != ios_base::oct
      && __basefield != ios_base::hex, true))
 __ul = __v < 0 ? -__v : __ul;
      return __int_to_char(__bufend, __ul, __lit, __flags, false);
    }

  template<typename _CharT>
    inline int
    __int_to_char(_CharT* __bufend, unsigned long __v, const _CharT* __lit,
    ios_base::fmtflags __flags)
    { return __int_to_char(__bufend, __v, __lit, __flags, false); }


  template<typename _CharT>
    inline int
    __int_to_char(_CharT* __bufend, long long __v, const _CharT* __lit,
    ios_base::fmtflags __flags)
    {
      unsigned long long __ull = __v;
      const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
      if (__builtin_expect(__basefield != ios_base::oct
      && __basefield != ios_base::hex, true))
 __ull = __v < 0 ? -__v : __ull;
      return __int_to_char(__bufend, __ull, __lit, __flags, false);
    }

  template<typename _CharT>
    inline int
    __int_to_char(_CharT* __bufend, unsigned long long __v,
    const _CharT* __lit, ios_base::fmtflags __flags)
    { return __int_to_char(__bufend, __v, __lit, __flags, false); }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool)
    {
      const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
      _CharT* __buf = __bufend;

      if (__builtin_expect(__basefield != ios_base::oct
      && __basefield != ios_base::hex, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if (__basefield == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 int __len = __int_to_char(__cs + __ilen, __v, __lit, __flags);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 if (__builtin_expect(__basefield != ios_base::oct
        && __basefield != ios_base::hex, true))
   {

     if (__v > 0)
       {
  if (__flags & ios_base::showpos
      && numeric_limits<_ValueT>::is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else if (__v)
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (__flags & ios_base::showbase && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 1068 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 streamsize __prec = __io.precision();
 if (__prec < static_cast<streamsize>(0))
   __prec = static_cast<streamsize>(6);

 const int __max_digits = numeric_limits<_ValueT>::digits10;


 int __len;

 char __fbuf[16];




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));

 __num_base::_S_format_float(__io, __fbuf, __mod);
 __len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,
          _S_get_c_locale(), __prec);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,
       _S_get_c_locale(), __prec);
   }
# 1132 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 const _CharT __cdec = __ctype.widen('.');
 const _CharT __dec = __lc->_M_decimal_point;
 const _CharT* __p = char_traits<_CharT>::find(__ws, __len, __cdec);
 if (__p)
   __ws[__p - __ws] = __dec;




 if (__lc->_M_use_grouping
     && (__p || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
         && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __p, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       _CharT* __cs
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __w));
       _M_pad(__fill, __w, __io, __cs, __name, __len);
       __name = __cs;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
    { return _M_insert_int(__s, __io, __fill, __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           unsigned long __v) const
    { return _M_insert_int(__s, __io, __fill, __v); }


  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
    { return _M_insert_int(__s, __io, __fill, __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           unsigned long long __v) const
    { return _M_insert_int(__s, __io, __fill, __v); }


  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1269 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase
      | ios_base::internal);
      __io.flags(__flags & __fmt | (ios_base::hex | ios_base::showbase));

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<unsigned long>(__v));
      __io.flags(__flags);
      return __s;
    }

  template<typename _CharT, typename _InIter>
    template<bool _Intl>
      _InIter
      money_get<_CharT, _InIter>::
      _M_extract(iter_type __beg, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, string& __units) const
      {
 typedef char_traits<_CharT> __traits_type;
 typedef typename string_type::size_type size_type;
 typedef money_base::part part;
 typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

 const locale& __loc = __io._M_getloc();
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 __use_cache<__cache_type> __uc;
 const __cache_type* __lc = __uc(__loc);
 const char_type* __lit = __lc->_M_atoms;


 bool __negative = false;

 size_type __sign_size = 0;

 const bool __mandatory_sign = (__lc->_M_positive_sign_size
           && __lc->_M_negative_sign_size);

 string __grouping_tmp;
 if (__lc->_M_use_grouping)
   __grouping_tmp.reserve(32);

 int __last_pos = 0;

 int __n = 0;

 bool __testvalid = true;

 bool __testdecfound = false;


 string __res;
 __res.reserve(32);

 const char_type* __lit_zero = __lit + money_base::_S_zero;
 const money_base::pattern __p = __lc->_M_neg_format;
 for (int __i = 0; __i < 4 && __testvalid; ++__i)
   {
     const part __which = static_cast<part>(__p.field[__i]);
     switch (__which)
       {
       case money_base::symbol:




  if (__io.flags() & ios_base::showbase || __sign_size > 1
      || __i == 0
      || (__i == 1 && (__mandatory_sign
         || (static_cast<part>(__p.field[0])
      == money_base::sign)
         || (static_cast<part>(__p.field[2])
      == money_base::space)))
      || (__i == 2 && ((static_cast<part>(__p.field[3])
          == money_base::value)
         || __mandatory_sign
         && (static_cast<part>(__p.field[3])
      == money_base::sign))))
    {
      const size_type __len = __lc->_M_curr_symbol_size;
      size_type __j = 0;
      for (; __beg != __end && __j < __len
      && *__beg == __lc->_M_curr_symbol[__j];
    ++__beg, ++__j);
      if (__j != __len
   && (__j || __io.flags() & ios_base::showbase))
        __testvalid = false;
    }
  break;
       case money_base::sign:

  if (__lc->_M_positive_sign_size && __beg != __end
      && *__beg == __lc->_M_positive_sign[0])
    {
      __sign_size = __lc->_M_positive_sign_size;
      ++__beg;
    }
  else if (__lc->_M_negative_sign_size && __beg != __end
    && *__beg == __lc->_M_negative_sign[0])
    {
      __negative = true;
      __sign_size = __lc->_M_negative_sign_size;
      ++__beg;
    }
  else if (__lc->_M_positive_sign_size
    && !__lc->_M_negative_sign_size)


    __negative = true;
  else if (__mandatory_sign)
    __testvalid = false;
  break;
       case money_base::value:


  for (; __beg != __end; ++__beg)
    {
      const char_type __c = *__beg;
      const char_type* __q = __traits_type::find(__lit_zero,
              10, __c);
      if (__q != 0)
        {
   __res += money_base::_S_atoms[__q - __lit];
   ++__n;
        }
      else if (__c == __lc->_M_decimal_point
        && !__testdecfound)
        {
   __last_pos = __n;
   __n = 0;
   __testdecfound = true;
        }
      else if (__lc->_M_use_grouping
        && __c == __lc->_M_thousands_sep
        && !__testdecfound)
        {
   if (__n)
     {

       __grouping_tmp += static_cast<char>(__n);
       __n = 0;
     }
   else
     {
       __testvalid = false;
       break;
     }
        }
      else
        break;
    }
  if (__res.empty())
    __testvalid = false;
  break;
       case money_base::space:

  if (__beg != __end && __ctype.is(ctype_base::space, *__beg))
    ++__beg;
  else
    __testvalid = false;
       case money_base::none:

  if (__i != 3)
    for (; __beg != __end
    && __ctype.is(ctype_base::space, *__beg); ++__beg);
  break;
       }
   }


 if (__sign_size > 1 && __testvalid)
   {
     const char_type* __sign = __negative ? __lc->_M_negative_sign
                                          : __lc->_M_positive_sign;
     size_type __i = 1;
     for (; __beg != __end && __i < __sign_size
     && *__beg == __sign[__i]; ++__beg, ++__i);

     if (__i != __sign_size)
       __testvalid = false;
   }

 if (__testvalid)
   {

     if (__res.size() > 1)
       {
  const size_type __first = __res.find_first_not_of('0');
  const bool __only_zeros = __first == string::npos;
  if (__first)
    __res.erase(0, __only_zeros ? __res.size() - 1 : __first);
       }


     if (__negative && __res[0] != '0')
       __res.insert(__res.begin(), '-');


     if (__grouping_tmp.size())
       {

  __grouping_tmp += static_cast<char>(__testdecfound ? __last_pos
                         : __n);
  if (!std::__verify_grouping(__lc->_M_grouping,
         __lc->_M_grouping_size,
         __grouping_tmp))
    __err |= ios_base::failbit;
       }


     if (__testdecfound && __lc->_M_frac_digits > 0
  && __n != __lc->_M_frac_digits)
       __testvalid = false;
   }


 if (!__testvalid)
   __err |= ios_base::failbit;
 else
   __units.swap(__res);


 if (__beg == __end)
   __err |= ios_base::eofbit;
 return __beg;
      }
# 1527 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    money_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,
    ios_base::iostate& __err, long double& __units) const
    {
      string __str;
      if (__intl)
 __beg = _M_extract<true>(__beg, __end, __io, __err, __str);
      else
 __beg = _M_extract<false>(__beg, __end, __io, __err, __str);
      std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    money_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,
    ios_base::iostate& __err, string_type& __units) const
    {
      typedef typename string::size_type size_type;

      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      string __str;
      const iter_type __ret = __intl ? _M_extract<true>(__beg, __end, __io,
       __err, __str)
                              : _M_extract<false>(__beg, __end, __io,
        __err, __str);
      const size_type __len = __str.size();
      if (__len)
 {
   _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
              * __len));
   __ctype.widen(__str.data(), __str.data() + __len, __ws);
   __units.assign(__ws, __len);
 }

      return __ret;
    }

  template<typename _CharT, typename _OutIter>
    template<bool _Intl>
      _OutIter
      money_put<_CharT, _OutIter>::
      _M_insert(iter_type __s, ios_base& __io, char_type __fill,
  const string_type& __digits) const
      {
 typedef typename string_type::size_type size_type;
 typedef money_base::part part;
 typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

 const locale& __loc = __io._M_getloc();
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 __use_cache<__cache_type> __uc;
 const __cache_type* __lc = __uc(__loc);
 const char_type* __lit = __lc->_M_atoms;



 const char_type* __beg = __digits.data();

 money_base::pattern __p;
 const char_type* __sign;
 size_type __sign_size;
 if (!(*__beg == __lit[money_base::_S_minus]))
   {
     __p = __lc->_M_pos_format;
     __sign = __lc->_M_positive_sign;
     __sign_size = __lc->_M_positive_sign_size;
   }
 else
   {
     __p = __lc->_M_neg_format;
     __sign = __lc->_M_negative_sign;
     __sign_size = __lc->_M_negative_sign_size;
     if (__digits.size())
       ++__beg;
   }


 size_type __len = __ctype.scan_not(ctype_base::digit, __beg,
        __beg + __digits.size()) - __beg;
 if (__len)
   {



     string_type __value;
     __value.reserve(2 * __len);



     int __paddec = __len - __lc->_M_frac_digits;
     if (__paddec > 0)
         {
  if (__lc->_M_frac_digits < 0)
    __paddec = __len;
    if (__lc->_M_grouping_size)
      {
      _CharT* __ws =
          static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
             * 2 * __len));
        _CharT* __ws_end =
        std::__add_grouping(__ws, __lc->_M_thousands_sep,
       __lc->_M_grouping,
       __lc->_M_grouping_size,
       __beg, __beg + __paddec);
      __value.assign(__ws, __ws_end - __ws);
      }
    else
    __value.assign(__beg, __paddec);
       }


     if (__lc->_M_frac_digits > 0)
       {
  __value += __lc->_M_decimal_point;
  if (__paddec >= 0)
    __value.append(__beg + __paddec, __lc->_M_frac_digits);
  else
    {

      __value.append(-__paddec, __lit[money_base::_S_zero]);
      __value.append(__beg, __len);
    }
         }


     const ios_base::fmtflags __f = __io.flags()
                                    & ios_base::adjustfield;
     __len = __value.size() + __sign_size;
     __len += ((__io.flags() & ios_base::showbase)
        ? __lc->_M_curr_symbol_size : 0);

     string_type __res;
     __res.reserve(2 * __len);

     const size_type __width = static_cast<size_type>(__io.width());
     const bool __testipad = (__f == ios_base::internal
         && __len < __width);

     for (int __i = 0; __i < 4; ++__i)
       {
  const part __which = static_cast<part>(__p.field[__i]);
  switch (__which)
    {
    case money_base::symbol:
      if (__io.flags() & ios_base::showbase)
        __res.append(__lc->_M_curr_symbol,
       __lc->_M_curr_symbol_size);
      break;
    case money_base::sign:



      if (__sign_size)
        __res += __sign[0];
      break;
    case money_base::value:
      __res += __value;
      break;
    case money_base::space:



      if (__testipad)
        __res.append(__width - __len, __fill);
      else
        __res += __fill;
      break;
    case money_base::none:
      if (__testipad)
        __res.append(__width - __len, __fill);
      break;
    }
       }


     if (__sign_size > 1)
       __res.append(__sign + 1, __sign_size - 1);


     __len = __res.size();
     if (__width > __len)
       {
  if (__f == ios_base::left)

    __res.append(__width - __len, __fill);
  else

    __res.insert(0, __width - __len, __fill);
  __len = __width;
       }


     __s = std::__write(__s, __res.data(), __len);
   }
 __io.width(0);
 return __s;
      }
# 1743 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    money_put<_CharT, _OutIter>::
    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
    long double __units) const
    {
      const locale __loc = __io.getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);


      int __cs_size = 64;
      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));


      int __len = std::__convert_from_v(__cs, __cs_size, "%.*Lf", __units,
     _S_get_c_locale(), 0);

      if (__len >= __cs_size)
 {
   __cs_size = __len + 1;
   __cs = static_cast<char*>(__builtin_alloca(__cs_size));
   __len = std::__convert_from_v(__cs, __cs_size, "%.*Lf", __units,
     _S_get_c_locale(), 0);
 }







      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __cs_size));
      __ctype.widen(__cs, __cs + __len, __ws);
      const string_type __digits(__ws, __len);
      return __intl ? _M_insert<true>(__s, __io, __fill, __digits)
             : _M_insert<false>(__s, __io, __fill, __digits);
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    money_put<_CharT, _OutIter>::
    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
    const string_type& __digits) const
    { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)
             : _M_insert<false>(__s, __io, __fill, __digits); }






  template<typename _CharT, typename _InIter>
    time_base::dateorder
    time_get<_CharT, _InIter>::do_date_order() const
    { return time_base::no_order; }



  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, tm* __tm,
     const _CharT* __format) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const size_t __len = char_traits<_CharT>::length(__format);

      for (size_t __i = 0; __beg != __end && __i < __len && !__err; ++__i)
 {
   if (__ctype.narrow(__format[__i], 0) == '%')
     {

       char __c = __ctype.narrow(__format[++__i], 0);
       int __mem = 0;
       if (__c == 'E' || __c == 'O')
  __c = __ctype.narrow(__format[++__i], 0);
       switch (__c)
  {
    const char* __cs;
    _CharT __wcs[10];
  case 'a':

    const char_type* __days1[7];
    __tp._M_days_abbreviated(__days1);
    __beg = _M_extract_name(__beg, __end, __tm->tm_wday, __days1,
       7, __io, __err);
    break;
  case 'A':

    const char_type* __days2[7];
    __tp._M_days(__days2);
    __beg = _M_extract_name(__beg, __end, __tm->tm_wday, __days2,
       7, __io, __err);
    break;
  case 'h':
  case 'b':

    const char_type* __months1[12];
    __tp._M_months_abbreviated(__months1);
    __beg = _M_extract_name(__beg, __end, __tm->tm_mon,
       __months1, 12, __io, __err);
    break;
  case 'B':

    const char_type* __months2[12];
    __tp._M_months(__months2);
    __beg = _M_extract_name(__beg, __end, __tm->tm_mon,
       __months2, 12, __io, __err);
    break;
  case 'c':

    const char_type* __dt[2];
    __tp._M_date_time_formats(__dt);
    __beg = _M_extract_via_format(__beg, __end, __io, __err,
      __tm, __dt[0]);
    break;
  case 'd':

    __beg = _M_extract_num(__beg, __end, __tm->tm_mday, 1, 31, 2,
      __io, __err);
    break;
  case 'e':


    if (__ctype.is(ctype_base::space, *__beg))
      __beg = _M_extract_num(++__beg, __end, __tm->tm_mday, 1, 9,
        1, __io, __err);
    else
      __beg = _M_extract_num(__beg, __end, __tm->tm_mday, 10, 31,
        2, __io, __err);
    break;
  case 'D':

    __cs = "%m/%d/%y";
    __ctype.widen(__cs, __cs + 9, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __err,
      __tm, __wcs);
    break;
  case 'H':

    __beg = _M_extract_num(__beg, __end, __tm->tm_hour, 0, 23, 2,
      __io, __err);
    break;
  case 'I':

    __beg = _M_extract_num(__beg, __end, __tm->tm_hour, 1, 12, 2,
      __io, __err);
    break;
  case 'm':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2,
      __io, __err);
    if (!__err)
      __tm->tm_mon = __mem - 1;
    break;
  case 'M':

    __beg = _M_extract_num(__beg, __end, __tm->tm_min, 0, 59, 2,
      __io, __err);
    break;
  case 'n':
    if (__ctype.narrow(*__beg, 0) == '\n')
      ++__beg;
    else
      __err |= ios_base::failbit;
    break;
  case 'R':

    __cs = "%H:%M";
    __ctype.widen(__cs, __cs + 6, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __err,
      __tm, __wcs);
    break;
  case 'S':



    __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 60, 2,



      __io, __err);
    break;
  case 't':
    if (__ctype.narrow(*__beg, 0) == '\t')
      ++__beg;
    else
      __err |= ios_base::failbit;
    break;
  case 'T':

    __cs = "%H:%M:%S";
    __ctype.widen(__cs, __cs + 9, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __err,
      __tm, __wcs);
    break;
  case 'x':

    const char_type* __dates[2];
    __tp._M_date_formats(__dates);
    __beg = _M_extract_via_format(__beg, __end, __io, __err,
      __tm, __dates[0]);
    break;
  case 'X':

    const char_type* __times[2];
    __tp._M_time_formats(__times);
    __beg = _M_extract_via_format(__beg, __end, __io, __err,
      __tm, __times[0]);
    break;
  case 'y':
  case 'C':

    __beg = _M_extract_num(__beg, __end, __tm->tm_year, 0, 99, 2,
      __io, __err);
    break;
  case 'Y':

    __beg = _M_extract_num(__beg, __end, __mem, 0, 9999, 4,
      __io, __err);
    if (!__err)
      __tm->tm_year = __mem - 1900;
    break;
  case 'Z':

    if (__ctype.is(ctype_base::upper, *__beg))
      {
        int __tmp;
        __beg = _M_extract_name(__beg, __end, __tmp,
           __timepunct_cache<_CharT>::_S_timezones,
           14, __io, __err);


        if (__beg != __end && !__err && __tmp == 0
     && (*__beg == __ctype.widen('-')
         || *__beg == __ctype.widen('+')))
   {
     __beg = _M_extract_num(__beg, __end, __tmp, 0, 23, 2,
       __io, __err);
     __beg = _M_extract_num(__beg, __end, __tmp, 0, 59, 2,
       __io, __err);
   }
      }
    else
      __err |= ios_base::failbit;
    break;
  default:

    __err |= ios_base::failbit;
  }
     }
   else
     {

       if (__format[__i] == *__beg)
  ++__beg;
       else
  __err |= ios_base::failbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_num(iter_type __beg, iter_type __end, int& __member,
     int __min, int __max, size_t __len,
     ios_base& __io, ios_base::iostate& __err) const
    {
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);


      int __mult = __len == 2 ? 10 : (__len == 4 ? 1000 : 1);

      ++__min;
      size_t __i = 0;
      int __value = 0;
      for (; __beg != __end && __i < __len; ++__beg, ++__i)
 {
   const char __c = __ctype.narrow(*__beg, '*');
   if (__c >= '0' && __c <= '9')
     {
       __value = __value * 10 + (__c - '0');
       const int __valuec = __value * __mult;
       if (__valuec > __max || __valuec + __mult < __min)
  break;
       __mult /= 10;
     }
   else
     break;
 }
      if (__i == __len)
 __member = __value;
      else
 __err |= ios_base::failbit;
      return __beg;
    }



  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_name(iter_type __beg, iter_type __end, int& __member,
      const _CharT** __names, size_t __indexlen,
      ios_base& __io, ios_base::iostate& __err) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      int* __matches = static_cast<int*>(__builtin_alloca(sizeof(int)
         * __indexlen));
      size_t __nmatches = 0;
      size_t __pos = 0;
      bool __testvalid = true;
      const char_type* __name;





      if (__beg != __end)
 {
   const char_type __c = *__beg;
   for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)
     if (__c == __names[__i1][0]
  || __c == __ctype.toupper(__names[__i1][0]))
       __matches[__nmatches++] = __i1;
 }

      while (__nmatches > 1)
 {

   size_t __minlen = __traits_type::length(__names[__matches[0]]);
   for (size_t __i2 = 1; __i2 < __nmatches; ++__i2)
     __minlen = std::min(__minlen,
         __traits_type::length(__names[__matches[__i2]]));
   ++__beg, ++__pos;
   if (__pos < __minlen && __beg != __end)
     for (size_t __i3 = 0; __i3 < __nmatches;)
       {
  __name = __names[__matches[__i3]];
  if (!(__name[__pos] == *__beg))
    __matches[__i3] = __matches[--__nmatches];
  else
    ++__i3;
       }
   else
     break;
 }

      if (__nmatches == 1)
 {

   ++__beg, ++__pos;
   __name = __names[__matches[0]];
   const size_t __len = __traits_type::length(__name);
   while (__pos < __len && __beg != __end && __name[__pos] == *__beg)
     ++__beg, ++__pos;

   if (__len == __pos)
     __member = __matches[0];
   else
     __testvalid = false;
 }
      else
 __testvalid = false;
      if (!__testvalid)
 __err |= ios_base::failbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_time(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __times[2];
      __tp._M_time_formats(__times);
      __beg = _M_extract_via_format(__beg, __end, __io, __err,
        __tm, __times[0]);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_date(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __dates[2];
      __tp._M_date_formats(__dates);
      __beg = _M_extract_via_format(__beg, __end, __io, __err,
        __tm, __dates[0]);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_weekday(iter_type __beg, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, tm* __tm) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const char_type* __days[7];
      __tp._M_days_abbreviated(__days);
      int __tmpwday;
      __beg = _M_extract_name(__beg, __end, __tmpwday, __days, 7, __io, __err);







      if (!__err && __beg != __end)
 {
   size_t __pos = __traits_type::length(__days[__tmpwday]);
   __tp._M_days(__days);
   const char_type* __name = __days[__tmpwday];
   if (__name[__pos] == *__beg)
     {

       const size_t __len = __traits_type::length(__name);
       while (__pos < __len && __beg != __end
       && __name[__pos] == *__beg)
  ++__beg, ++__pos;
       if (__len != __pos)
  __err |= ios_base::failbit;
     }
 }
      if (!__err)
 __tm->tm_wday = __tmpwday;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
     }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_monthname(iter_type __beg, iter_type __end,
                     ios_base& __io, ios_base::iostate& __err, tm* __tm) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const char_type* __months[12];
      __tp._M_months_abbreviated(__months);
      int __tmpmon;
      __beg = _M_extract_name(__beg, __end, __tmpmon, __months, 12,
         __io, __err);







      if (!__err && __beg != __end)
 {
   size_t __pos = __traits_type::length(__months[__tmpmon]);
   __tp._M_months(__months);
   const char_type* __name = __months[__tmpmon];
   if (__name[__pos] == *__beg)
     {

       const size_t __len = __traits_type::length(__name);
       while (__pos < __len && __beg != __end
       && __name[__pos] == *__beg)
  ++__beg, ++__pos;
       if (__len != __pos)
  __err |= ios_base::failbit;
     }
 }
      if (!__err)
 __tm->tm_mon = __tmpmon;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_year(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      size_t __i = 0;
      int __value = 0;
      for (; __beg != __end && __i < 4; ++__beg, ++__i)
 {
   const char __c = __ctype.narrow(*__beg, '*');
   if (__c >= '0' && __c <= '9')
     __value = __value * 10 + (__c - '0');
   else
     break;
 }
      if (__i == 2 || __i == 4)
 __tm->tm_year = __i == 2 ? __value : __value - 1900;
      else
 __err |= ios_base::failbit;
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    time_put<_CharT, _OutIter>::
    put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
 const _CharT* __beg, const _CharT* __end) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      for (; __beg != __end; ++__beg)
 if (__ctype.narrow(*__beg, 0) != '%')
   {
     *__s = *__beg;
     ++__s;
   }
 else if (++__beg != __end)
   {
     char __format;
     char __mod = 0;
     const char __c = __ctype.narrow(*__beg, 0);
     if (__c != 'E' && __c != 'O')
       __format = __c;
     else if (++__beg != __end)
       {
  __mod = __c;
  __format = __ctype.narrow(*__beg, 0);
       }
     else
       break;
     __s = this->do_put(__s, __io, __fill, __tm, __format, __mod);
   }
 else
   break;
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    time_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type, const tm* __tm,
    char __format, char __mod) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);



      const size_t __maxlen = 128;
      char_type* __res =
       static_cast<char_type*>(__builtin_alloca(sizeof(char_type) * __maxlen));






      char_type __fmt[4];
      __fmt[0] = __ctype.widen('%');
      if (!__mod)
 {
   __fmt[1] = __format;
   __fmt[2] = char_type();
 }
      else
 {
   __fmt[1] = __mod;
   __fmt[2] = __format;
   __fmt[3] = char_type();
 }

      __tp._M_put(__res, __maxlen, __fmt, __tm);


      return std::__write(__s, __res, char_traits<char_type>::length(__res));
    }


  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {

      string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      string_type __ret;




      for (;;)
 {

   _CharT* __c =
     static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));
   size_t __res = _M_transform(__c, __p, __len);


   if (__res >= __len)
     {
       __len = __res + 1;
       __c = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __len));
       __res = _M_transform(__c, __p, __len);
     }

   __ret.append(__c, __res);
   __p += char_traits<_CharT>::length(__p);
   if (__p == __pend)
     return __ret;

   __p++;
   __ret.push_back(_CharT());
 }
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val = *__lo + ((__val << 7) |
         (__val >> (numeric_limits<unsigned long>::digits - 7)));
      return static_cast<long>(__val);
    }
# 2469 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       const streamsize __newlen,
       const streamsize __oldlen, const bool __num)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, const_cast<_CharT*>(__olds), __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal && __num)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   const bool __testsign = (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0]);
   const bool __testhex = (__ctype.widen('0') == __olds[0]
      && __oldlen > 1
      && (__ctype.widen('x') == __olds[1]
          || __ctype.widen('X') == __olds[1]));
   if (__testhex)
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }
   else if (__testsign)
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, const_cast<_CharT*>(__olds + __mod),
      __oldlen - __mod);
    }

  bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp)
  {
    const size_t __n = __grouping_tmp.size() - 1;
    const size_t __min = std::min(__n, size_t(__grouping_size - 1));
    size_t __i = __n;
    bool __test = true;




    for (size_t __j = 0; __j < __min && __test; --__i, ++__j)
      __test = __grouping_tmp[__i] == __grouping[__j];
    for (; __i && __test; --__i)
      __test = __grouping_tmp[__i] == __grouping[__min];



    if (static_cast<signed char>(__grouping[__min]) > 0)
      __test &= __grouping_tmp[0] <= __grouping[__min];
    return __test;
  }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      if (__last - __first > *__gbeg
   && static_cast<signed char>(*__gbeg) > 0)
 {
   const bool __bump = __gsize != 1;
   __s = std::__add_grouping(__s, __sep, __gbeg + __bump,
        __gsize - __bump, __first,
        __last - *__gbeg);
   __first = __last - *__gbeg;
   *__s++ = __sep;
 }
      do
 *__s++ = *__first++;
      while (__first != __last);
      return __s;
    }





  extern template class moneypunct<char, false>;
  extern template class moneypunct<char, true>;
  extern template class moneypunct_byname<char, false>;
  extern template class moneypunct_byname<char, true>;
  extern template class money_get<char>;
  extern template class money_put<char>;
  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class __timepunct<char>;
  extern template class time_put<char>;
  extern template class time_put_byname<char>;
  extern template class time_get<char>;
  extern template class time_get_byname<char>;
  extern template class messages<char>;
  extern template class messages_byname<char>;
  extern template class ctype_byname<char>;
  extern template class codecvt_byname<char, char, mbstate_t>;
  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    const moneypunct<char, true>&
    use_facet<moneypunct<char, true> >(const locale&);

  extern template
    const moneypunct<char, false>&
    use_facet<moneypunct<char, false> >(const locale&);

  extern template
    const money_put<char>&
    use_facet<money_put<char> >(const locale&);

  extern template
    const money_get<char>&
    use_facet<money_get<char> >(const locale&);

  extern template
    const __timepunct<char>&
    use_facet<__timepunct<char> >(const locale&);

  extern template
    const time_put<char>&
    use_facet<time_put<char> >(const locale&);

  extern template
    const time_get<char>&
    use_facet<time_get<char> >(const locale&);

  extern template
    const messages<char>&
    use_facet<messages<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<moneypunct<char> >(const locale&);

  extern template
    bool
    has_facet<money_put<char> >(const locale&);

  extern template
    bool
    has_facet<money_get<char> >(const locale&);

  extern template
    bool
    has_facet<__timepunct<char> >(const locale&);

  extern template
    bool
    has_facet<time_put<char> >(const locale&);

  extern template
    bool
    has_facet<time_get<char> >(const locale&);

  extern template
    bool
    has_facet<messages<char> >(const locale&);


  extern template class moneypunct<wchar_t, false>;
  extern template class moneypunct<wchar_t, true>;
  extern template class moneypunct_byname<wchar_t, false>;
  extern template class moneypunct_byname<wchar_t, true>;
  extern template class money_get<wchar_t>;
  extern template class money_put<wchar_t>;
  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class __timepunct<wchar_t>;
  extern template class time_put<wchar_t>;
  extern template class time_put_byname<wchar_t>;
  extern template class time_get<wchar_t>;
  extern template class time_get_byname<wchar_t>;
  extern template class messages<wchar_t>;
  extern template class messages_byname<wchar_t>;
  extern template class ctype_byname<wchar_t>;
  extern template class codecvt_byname<wchar_t, char, mbstate_t>;
  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const&);

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

  extern template
    const moneypunct<wchar_t, true>&
    use_facet<moneypunct<wchar_t, true> >(const locale&);

  extern template
    const moneypunct<wchar_t, false>&
    use_facet<moneypunct<wchar_t, false> >(const locale&);

  extern template
    const money_put<wchar_t>&
    use_facet<money_put<wchar_t> >(const locale&);

  extern template
    const money_get<wchar_t>&
    use_facet<money_get<wchar_t> >(const locale&);

  extern template
    const __timepunct<wchar_t>&
    use_facet<__timepunct<wchar_t> >(const locale&);

  extern template
    const time_put<wchar_t>&
    use_facet<time_put<wchar_t> >(const locale&);

  extern template
    const time_get<wchar_t>&
    use_facet<time_get<wchar_t> >(const locale&);

  extern template
    const messages<wchar_t>&
    use_facet<messages<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<moneypunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<money_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<money_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<__timepunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<time_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<time_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<messages<wchar_t> >(const locale&);


}
# 47 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/locale" 2 3
# 46 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/ostream.tcc" 2 3

namespace std
{
  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__ostream_type& (*__pf)(__ostream_type&))
    {



      return __pf(*this);
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__ios_type& (*__pf)(__ios_type&))
    {



      __pf(*this);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(ios_base& (*__pf)(ios_base&))
    {



      __pf(*this);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(bool __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {


       long __l;
       const ios_base::fmtflags __fmt = (this->flags()
      & ios_base::basefield);
       if (__fmt == ios_base::oct || __fmt == ios_base::hex)
  __l = static_cast<long>(static_cast<unsigned short>(__n));
       else
  __l = static_cast<long>(__n);
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __l).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(unsigned short __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {


       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(),
      static_cast<unsigned long>(__n)).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {


       long __l;
       const ios_base::fmtflags __fmt = (this->flags()
      & ios_base::basefield);
       if (__fmt == ios_base::oct || __fmt == ios_base::hex)
  __l = static_cast<long>(static_cast<unsigned int>(__n));
       else
  __l = static_cast<long>(__n);
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __l).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(unsigned int __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {


       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(),
      static_cast<unsigned long>(__n)).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(long __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(unsigned long __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(long long __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(unsigned long long __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(float __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {


       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(),
      static_cast<double>(__n)).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(double __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(long double __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(const void* __n)
    {
      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_put_type& __np = __check_facet(this->_M_num_put);
       if (__np.put(*this, *this, this->fill(), __n).failed())
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch (...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch (...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       streamsize __len = 1;
       _CharT* __cs = &__c;
       if (__w > __len)
  {
    __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
              * __w));
    __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,
       &__c, __w, __len, false);
    __len = __w;
  }
       __out._M_write(__cs, __len);
       __out.width(0);
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }


  template <class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    {
      typedef basic_ostream<char, _Traits> __ostream_type;
      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       streamsize __len = 1;
       char* __cs = &__c;
       if (__w > __len)
  {
    __cs = static_cast<char*>(__builtin_alloca(__w));
    __pad<char, _Traits>::_S_pad(__out, __out.fill(), __cs,
            &__c, __w, __len, false);
    __len = __w;
  }
       __out._M_write(__cs, __len);
       __out.width(0);
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
     }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typename __ostream_type::sentry __cerb(__out);
      if (__cerb && __s)
 {
   try
     {
       const streamsize __w = __out.width();
       streamsize __len = static_cast<streamsize>(_Traits::length(__s));
       if (__w > __len)
  {
    _CharT* __cs = (static_cast<
      _CharT*>(__builtin_alloca(sizeof(_CharT)
           * __w)));
    __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,
       __s, __w, __len, false);
    __s = __cs;
    __len = __w;
  }
       __out._M_write(__s, __len);
       __out.width(0);
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      else if (!__s)
 __out.setstate(ios_base::badbit);
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;



      typedef char_traits<char> __traits_type;
      typename __ostream_type::sentry __cerb(__out);
      if (__cerb && __s)
 {
   size_t __clen = __traits_type::length(__s);
   _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
              * __clen));
   for (size_t __i = 0; __i < __clen; ++__i)
     __ws[__i] = __out.widen(__s[__i]);
   _CharT* __str = __ws;

   try
     {
       const streamsize __w = __out.width();
       streamsize __len = static_cast<streamsize>(__clen);
       if (__w > __len)
  {
    _CharT* __cs = (static_cast<
      _CharT*>(__builtin_alloca(sizeof(_CharT)
           * __w)));
    __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,
       __ws, __w, __len, false);
    __str = __cs;
    __len = __w;
  }
       __out._M_write(__str, __len);
       __out.width(0);
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      else if (!__s)
 __out.setstate(ios_base::badbit);
      return __out;
    }


  template<class _Traits>
    basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      typedef basic_ostream<char, _Traits> __ostream_type;
      typename __ostream_type::sentry __cerb(__out);
      if (__cerb && __s)
 {
   try
     {
       const streamsize __w = __out.width();
       streamsize __len = static_cast<streamsize>(_Traits::length(__s));
       if (__w > __len)
  {
    char* __cs = static_cast<char*>(__builtin_alloca(__w));
    __pad<char, _Traits>::_S_pad(__out, __out.fill(), __cs,
       __s, __w, __len, false);
    __s = __cs;
    __len = __w;
  }
       __out._M_write(__s, __len);
       __out.width(0);
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      else if (!__s)
 __out.setstate(ios_base::badbit);
      return __out;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   const streamsize __w = __out.width();
   streamsize __len = static_cast<streamsize>(__str.size());
   const _CharT* __s = __str.data();



   if (__w > __len)
     {
       _CharT* __cs = (static_cast<
         _CharT*>(__builtin_alloca(sizeof(_CharT) * __w)));
       __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, __s,
          __w, __len, false);
       __s = __cs;
       __len = __w;
     }
   __out._M_write(__s, __len);
   __out.width(0);
 }
      return __out;
    }





  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);


}
# 526 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ostream" 2 3
# 71 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iterator" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 1 3
# 42 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
       
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3




namespace std
{
# 57 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

    protected:







      streamsize _M_gcount;

    public:
# 103 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb): _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 130 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      inline __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&));

      inline __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&));

      inline __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&));
# 168 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      operator>>(bool& __n);

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n);

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n);

      __istream_type&
      operator>>(long& __n);

      __istream_type&
      operator>>(unsigned long& __n);


      __istream_type&
      operator>>(long long& __n);

      __istream_type&
      operator>>(unsigned long long& __n);


      __istream_type&
      operator>>(float& __f);

      __istream_type&
      operator>>(double& __f);

      __istream_type&
      operator>>(long double& __f);

      __istream_type&
      operator>>(void*& __p);
# 229 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 239 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      inline streamsize
      gcount() const
      { return _M_gcount; }
# 271 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      int_type
      get();
# 285 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      get(char_type& __c);
# 312 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 323 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      inline __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 346 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 356 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      inline __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 385 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 396 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      inline __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 420 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 437 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      int_type
      peek();
# 455 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 474 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 490 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      putback(char_type __c);
# 505 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      unget();
# 523 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      int
      sync();
# 537 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      pos_type
      tellg();
# 552 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      seekg(pos_type);
# 568 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      explicit
      basic_istream(): _M_gcount(streamsize(0)) { }
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 621 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {
    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 653 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 663 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
      operator bool() const { return _M_ok; }

    private:
      bool _M_ok;
    };
# 682 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 723 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 750 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(), __ostream_type()
      { this->init(__sb); }




      virtual
      ~basic_iostream() { }

    protected:
      explicit
      basic_iostream() : __istream_type(), __ostream_type()
      { }
    };
# 813 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
}


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/istream.tcc" 1 3
# 43 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/istream.tcc" 3
       
# 44 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/istream.tcc" 3




namespace std
{
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && (__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__istream_type& (*__pf)(__istream_type&))
    { return __pf(*this); }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__ios_type& (*__pf)(__ios_type&))
    {
      __pf(*this);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(ios_base& (*__pf)(ios_base&))
    {
      __pf(*this);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(bool& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);


       if (!(__err & ios_base::failbit)
    && (numeric_limits<short>::min() <= __l
        && __l <= numeric_limits<short>::max()))
  __n = __l;
       else
                __err |= ios_base::failbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(unsigned short& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);


       if (!(__err & ios_base::failbit)
    && (numeric_limits<int>::min() <= __l
        && __l <= numeric_limits<int>::max()))
  __n = __l;
       else
                __err |= ios_base::failbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(unsigned int& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(long& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(unsigned long& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(long long& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(unsigned long long& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(float& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(double& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(long double& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(void*& __n)
    {
      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __n);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       if (!__copy_streambufs(this->rdbuf(), __sbout))
  __err |= ios_base::failbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 692 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == numeric_limits<streamsize>::max()
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount = numeric_limits<streamsize>::min();
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = numeric_limits<streamsize>::max();

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == numeric_limits<streamsize>::max()
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount = numeric_limits<streamsize>::min();
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = numeric_limits<streamsize>::max();

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount < numeric_limits<streamsize>::max())
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {


      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {


      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__streambuf_type __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = numeric_limits<streamsize>::max();

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT,_Traits>&
    ws(basic_istream<_CharT,_Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__streambuf_type __streambuf_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename __istream_type::int_type __int_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __istream_type::__streambuf_type __streambuf_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
       __in.width(0);
     }
   catch(...)
     {



       __in._M_setstate(ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __istream_type::__streambuf_type __streambuf_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __sb->sbumpc();
  }
       else
  __err |= ios_base::failbit;
     }
   catch(...)
     {



       __in._M_setstate(ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<class _CharT, class _Traits, class _Alloc>
    inline basic_istream<_CharT,_Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT,_Traits,_Alloc>& __str)
    { return getline(__in, __str, __in.widen('\n')); }





  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template class basic_iostream<wchar_t>;


}
# 820 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/istream" 2 3
# 72 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iterator" 2 3
# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stream_iterator.h" 1 3
# 38 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stream_iterator.h" 3
       
# 39 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stream_iterator.h" 3



namespace std
{

  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public:

      istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(&__s)
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }

      const _Tp&
      operator*() const
      {
 ;


 return _M_value;
      }

      const _Tp*
      operator->() const { return &(operator*()); }

      istream_iterator&
      operator++()
      {
 ;


 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {
 ;


 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

      bool
      _M_equal(const istream_iterator& __x) const
      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }

    private:
      void
      _M_read()
      {
 _M_ok = (_M_stream && *_M_stream) ? true : false;
 if (_M_ok)
   {
     *_M_stream >> _M_value;
     _M_ok = *_M_stream ? true : false;
   }
      }
    };


  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>
    inline bool
    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return __x._M_equal(__y); }


  template <class _Tp, class _CharT, class _Traits, class _Dist>
    inline bool
    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return !__x._M_equal(__y); }
# 150 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}
# 181 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(&__s), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }



      ostream_iterator&
      operator=(const _Tp& __value)
      {
 ;


 *_M_stream << __value;
 if (_M_string) *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };
}
# 73 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/iterator" 2 3
# 69 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hashtable.h" 2 3


# 1 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hash_fun.h" 1 3
# 66 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hash_fun.h" 3
namespace __gnu_cxx
{
  using std::size_t;

  template<class _Key>
    struct hash { };

  inline size_t
  __stl_hash_string(const char* __s)
  {
    unsigned long __h = 0;
    for ( ; *__s; ++__s)
      __h = 5 * __h + *__s;
    return size_t(__h);
  }

  template<>
    struct hash<char*>
    {
      size_t
      operator()(const char* __s) const
      { return __stl_hash_string(__s); }
    };

  template<>
    struct hash<const char*>
    {
      size_t
      operator()(const char* __s) const
      { return __stl_hash_string(__s); }
    };

  template<>
    struct hash<char>
    {
      size_t
      operator()(char __x) const
      { return __x; }
    };

  template<>
    struct hash<unsigned char>
    {
      size_t
      operator()(unsigned char __x) const
      { return __x; }
    };

  template<>
    struct hash<signed char>
    {
      size_t
      operator()(unsigned char __x) const
      { return __x; }
    };

  template<>
    struct hash<short>
    {
      size_t
      operator()(short __x) const
      { return __x; }
    };

  template<>
    struct hash<unsigned short>
    {
      size_t
      operator()(unsigned short __x) const
      { return __x; }
    };

  template<>
    struct hash<int>
    {
      size_t
      operator()(int __x) const
      { return __x; }
    };

  template<>
    struct hash<unsigned int>
    {
      size_t
      operator()(unsigned int __x) const
      { return __x; }
    };

  template<>
    struct hash<long>
    {
      size_t
      operator()(long __x) const
      { return __x; }
    };

  template<>
    struct hash<unsigned long>
    {
      size_t
      operator()(unsigned long __x) const
      { return __x; }
    };
}
# 72 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hashtable.h" 2 3

namespace __gnu_cxx
{
  using std::size_t;
  using std::ptrdiff_t;
  using std::forward_iterator_tag;
  using std::input_iterator_tag;
  using std::_Construct;
  using std::_Destroy;
  using std::distance;
  using std::vector;
  using std::pair;
  using std::__iterator_category;

  template <class _Val>
    struct _Hashtable_node
    {
      _Hashtable_node* _M_next;
      _Val _M_val;
    };

  template <class _Val, class _Key, class _HashFcn, class _ExtractKey,
     class _EqualKey, class _Alloc = std::allocator<_Val> >
    class hashtable;

  template <class _Val, class _Key, class _HashFcn,
     class _ExtractKey, class _EqualKey, class _Alloc>
    struct _Hashtable_iterator;

  template <class _Val, class _Key, class _HashFcn,
     class _ExtractKey, class _EqualKey, class _Alloc>
    struct _Hashtable_const_iterator;

  template <class _Val, class _Key, class _HashFcn,
     class _ExtractKey, class _EqualKey, class _Alloc>
    struct _Hashtable_iterator
    {
      typedef hashtable<_Val, _Key, _HashFcn, _ExtractKey, _EqualKey, _Alloc>
        _Hashtable;
      typedef _Hashtable_iterator<_Val, _Key, _HashFcn,
      _ExtractKey, _EqualKey, _Alloc>
        iterator;
      typedef _Hashtable_const_iterator<_Val, _Key, _HashFcn,
     _ExtractKey, _EqualKey, _Alloc>
        const_iterator;
      typedef _Hashtable_node<_Val> _Node;
      typedef forward_iterator_tag iterator_category;
      typedef _Val value_type;
      typedef ptrdiff_t difference_type;
      typedef size_t size_type;
      typedef _Val& reference;
      typedef _Val* pointer;

      _Node* _M_cur;
      _Hashtable* _M_ht;

      _Hashtable_iterator(_Node* __n, _Hashtable* __tab)
      : _M_cur(__n), _M_ht(__tab) {}

      _Hashtable_iterator() {}

      reference
      operator*() const
      { return _M_cur->_M_val; }

      pointer
      operator->() const
      { return &(operator*()); }

      iterator&
      operator++();

      iterator
      operator++(int);

      bool
      operator==(const iterator& __it) const
      { return _M_cur == __it._M_cur; }

      bool
      operator!=(const iterator& __it) const
      { return _M_cur != __it._M_cur; }
    };

  template <class _Val, class _Key, class _HashFcn,
     class _ExtractKey, class _EqualKey, class _Alloc>
    struct _Hashtable_const_iterator
    {
      typedef hashtable<_Val, _Key, _HashFcn, _ExtractKey, _EqualKey, _Alloc>
        _Hashtable;
      typedef _Hashtable_iterator<_Val,_Key,_HashFcn,
      _ExtractKey,_EqualKey,_Alloc>
        iterator;
      typedef _Hashtable_const_iterator<_Val, _Key, _HashFcn,
     _ExtractKey, _EqualKey, _Alloc>
        const_iterator;
      typedef _Hashtable_node<_Val> _Node;

      typedef forward_iterator_tag iterator_category;
      typedef _Val value_type;
      typedef ptrdiff_t difference_type;
      typedef size_t size_type;
      typedef const _Val& reference;
      typedef const _Val* pointer;

      const _Node* _M_cur;
      const _Hashtable* _M_ht;

      _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)
      : _M_cur(__n), _M_ht(__tab) {}

      _Hashtable_const_iterator() {}

      _Hashtable_const_iterator(const iterator& __it)
      : _M_cur(__it._M_cur), _M_ht(__it._M_ht) {}

      reference
      operator*() const
      { return _M_cur->_M_val; }

      pointer
      operator->() const
      { return &(operator*()); }

      const_iterator&
      operator++();

      const_iterator
      operator++(int);

      bool
      operator==(const const_iterator& __it) const
      { return _M_cur == __it._M_cur; }

      bool
      operator!=(const const_iterator& __it) const
      { return _M_cur != __it._M_cur; }
    };


  enum { _S_num_primes = 28 };

  static const unsigned long __stl_prime_list[_S_num_primes] =
    {
      53ul, 97ul, 193ul, 389ul, 769ul,
      1543ul, 3079ul, 6151ul, 12289ul, 24593ul,
      49157ul, 98317ul, 196613ul, 393241ul, 786433ul,
      1572869ul, 3145739ul, 6291469ul, 12582917ul, 25165843ul,
      50331653ul, 100663319ul, 201326611ul, 402653189ul, 805306457ul,
      1610612741ul, 3221225473ul, 4294967291ul
    };

  inline unsigned long
  __stl_next_prime(unsigned long __n)
  {
    const unsigned long* __first = __stl_prime_list;
    const unsigned long* __last = __stl_prime_list + (int)_S_num_primes;
    const unsigned long* pos = std::lower_bound(__first, __last, __n);
    return pos == __last ? *(__last - 1) : *pos;
  }



  template <class _Val, class _Key, class _HF, class _Ex,
     class _Eq, class _All>
    class hashtable;

  template <class _Val, class _Key, class _HF, class _Ex,
     class _Eq, class _All>
    bool
    operator==(const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht1,
        const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht2);
# 254 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hashtable.h" 3
  template <class _Val, class _Key, class _HashFcn,
     class _ExtractKey, class _EqualKey, class _Alloc>
    class hashtable
    {
    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef _HashFcn hasher;
      typedef _EqualKey key_equal;

      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;

      hasher
      hash_funct() const
      { return _M_hash; }

      key_equal
      key_eq() const
      { return _M_equals; }

    private:
      typedef _Hashtable_node<_Val> _Node;

    public:
      typedef typename _Alloc::template rebind<value_type>::other allocator_type;
      allocator_type
      get_allocator() const
      { return _M_node_allocator; }

    private:
      typedef typename _Alloc::template rebind<_Node>::other _Node_Alloc;
      typedef typename _Alloc::template rebind<_Node*>::other _Nodeptr_Alloc;
      typedef vector<_Node*, _Nodeptr_Alloc> _Vector_type;

      _Node_Alloc _M_node_allocator;

      _Node*
      _M_get_node()
      { return _M_node_allocator.allocate(1); }

      void
      _M_put_node(_Node* __p)
      { _M_node_allocator.deallocate(__p, 1); }

    private:
      hasher _M_hash;
      key_equal _M_equals;
      _ExtractKey _M_get_key;
      _Vector_type _M_buckets;
      size_type _M_num_elements;

    public:
      typedef _Hashtable_iterator<_Val, _Key, _HashFcn, _ExtractKey,
      _EqualKey, _Alloc>
        iterator;
      typedef _Hashtable_const_iterator<_Val, _Key, _HashFcn, _ExtractKey,
     _EqualKey, _Alloc>
        const_iterator;

      friend struct
      _Hashtable_iterator<_Val, _Key, _HashFcn, _ExtractKey, _EqualKey, _Alloc>;

      friend struct
      _Hashtable_const_iterator<_Val, _Key, _HashFcn, _ExtractKey,
    _EqualKey, _Alloc>;

    public:
      hashtable(size_type __n, const _HashFcn& __hf,
  const _EqualKey& __eql, const _ExtractKey& __ext,
  const allocator_type& __a = allocator_type())
      : _M_node_allocator(__a), _M_hash(__hf), _M_equals(__eql),
 _M_get_key(__ext), _M_buckets(__a), _M_num_elements(0)
      { _M_initialize_buckets(__n); }

      hashtable(size_type __n, const _HashFcn& __hf,
  const _EqualKey& __eql,
  const allocator_type& __a = allocator_type())
      : _M_node_allocator(__a), _M_hash(__hf), _M_equals(__eql),
 _M_get_key(_ExtractKey()), _M_buckets(__a), _M_num_elements(0)
      { _M_initialize_buckets(__n); }

      hashtable(const hashtable& __ht)
      : _M_node_allocator(__ht.get_allocator()), _M_hash(__ht._M_hash),
      _M_equals(__ht._M_equals), _M_get_key(__ht._M_get_key),
      _M_buckets(__ht.get_allocator()), _M_num_elements(0)
      { _M_copy_from(__ht); }

      hashtable&
      operator= (const hashtable& __ht)
      {
 if (&__ht != this)
   {
     clear();
     _M_hash = __ht._M_hash;
     _M_equals = __ht._M_equals;
     _M_get_key = __ht._M_get_key;
     _M_copy_from(__ht);
   }
 return *this;
      }

      ~hashtable()
      { clear(); }

      size_type
      size() const
      { return _M_num_elements; }

      size_type
      max_size() const
      { return size_type(-1); }

      bool
      empty() const
      { return size() == 0; }

      void
      swap(hashtable& __ht)
      {
 std::swap(_M_hash, __ht._M_hash);
 std::swap(_M_equals, __ht._M_equals);
 std::swap(_M_get_key, __ht._M_get_key);
 _M_buckets.swap(__ht._M_buckets);
 std::swap(_M_num_elements, __ht._M_num_elements);
      }

      iterator
      begin()
      {
 for (size_type __n = 0; __n < _M_buckets.size(); ++__n)
   if (_M_buckets[__n])
     return iterator(_M_buckets[__n], this);
 return end();
      }

      iterator
      end()
      { return iterator(0, this); }

      const_iterator
      begin() const
      {
 for (size_type __n = 0; __n < _M_buckets.size(); ++__n)
   if (_M_buckets[__n])
     return const_iterator(_M_buckets[__n], this);
 return end();
      }

      const_iterator
      end() const
      { return const_iterator(0, this); }

      template <class _Vl, class _Ky, class _HF, class _Ex, class _Eq,
  class _Al>
        friend bool
        operator==(const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&,
     const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&);

    public:
      size_type
      bucket_count() const
      { return _M_buckets.size(); }

      size_type
      max_bucket_count() const
      { return __stl_prime_list[(int)_S_num_primes - 1]; }

      size_type
      elems_in_bucket(size_type __bucket) const
      {
 size_type __result = 0;
 for (_Node* __cur = _M_buckets[__bucket]; __cur; __cur = __cur->_M_next)
   __result += 1;
 return __result;
      }

      pair<iterator, bool>
      insert_unique(const value_type& __obj)
      {
 resize(_M_num_elements + 1);
 return insert_unique_noresize(__obj);
      }

      iterator
      insert_equal(const value_type& __obj)
      {
 resize(_M_num_elements + 1);
 return insert_equal_noresize(__obj);
      }

      pair<iterator, bool>
      insert_unique_noresize(const value_type& __obj);

      iterator
      insert_equal_noresize(const value_type& __obj);

      template <class _InputIterator>
        void
        insert_unique(_InputIterator __f, _InputIterator __l)
        { insert_unique(__f, __l, __iterator_category(__f)); }

      template <class _InputIterator>
        void
        insert_equal(_InputIterator __f, _InputIterator __l)
        { insert_equal(__f, __l, __iterator_category(__f)); }

      template <class _InputIterator>
        void
        insert_unique(_InputIterator __f, _InputIterator __l,
        input_iterator_tag)
        {
   for ( ; __f != __l; ++__f)
     insert_unique(*__f);
 }

      template <class _InputIterator>
        void
        insert_equal(_InputIterator __f, _InputIterator __l,
       input_iterator_tag)
        {
   for ( ; __f != __l; ++__f)
     insert_equal(*__f);
 }

      template <class _ForwardIterator>
        void
        insert_unique(_ForwardIterator __f, _ForwardIterator __l,
        forward_iterator_tag)
        {
   size_type __n = distance(__f, __l);
   resize(_M_num_elements + __n);
   for ( ; __n > 0; --__n, ++__f)
     insert_unique_noresize(*__f);
 }

      template <class _ForwardIterator>
        void
        insert_equal(_ForwardIterator __f, _ForwardIterator __l,
       forward_iterator_tag)
        {
   size_type __n = distance(__f, __l);
   resize(_M_num_elements + __n);
   for ( ; __n > 0; --__n, ++__f)
     insert_equal_noresize(*__f);
 }

      reference
      find_or_insert(const value_type& __obj);

      iterator
      find(const key_type& __key)
      {
 size_type __n = _M_bkt_num_key(__key);
 _Node* __first;
 for (__first = _M_buckets[__n];
      __first && !_M_equals(_M_get_key(__first->_M_val), __key);
      __first = __first->_M_next)
   {}
 return iterator(__first, this);
      }

      const_iterator
      find(const key_type& __key) const
      {
 size_type __n = _M_bkt_num_key(__key);
 const _Node* __first;
 for (__first = _M_buckets[__n];
      __first && !_M_equals(_M_get_key(__first->_M_val), __key);
      __first = __first->_M_next)
   {}
 return const_iterator(__first, this);
      }

      size_type
      count(const key_type& __key) const
      {
 const size_type __n = _M_bkt_num_key(__key);
 size_type __result = 0;

 for (const _Node* __cur = _M_buckets[__n]; __cur;
      __cur = __cur->_M_next)
   if (_M_equals(_M_get_key(__cur->_M_val), __key))
     ++__result;
 return __result;
      }

      pair<iterator, iterator>
      equal_range(const key_type& __key);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __key) const;

      size_type
      erase(const key_type& __key);

      void
      erase(const iterator& __it);

      void
      erase(iterator __first, iterator __last);

      void
      erase(const const_iterator& __it);

      void
      erase(const_iterator __first, const_iterator __last);

      void
      resize(size_type __num_elements_hint);

      void
      clear();

    private:
      size_type
      _M_next_size(size_type __n) const
      { return __stl_next_prime(__n); }

      void
      _M_initialize_buckets(size_type __n)
      {
 const size_type __n_buckets = _M_next_size(__n);
 _M_buckets.reserve(__n_buckets);
 _M_buckets.insert(_M_buckets.end(), __n_buckets, (_Node*) 0);
 _M_num_elements = 0;
      }

      size_type
      _M_bkt_num_key(const key_type& __key) const
      { return _M_bkt_num_key(__key, _M_buckets.size()); }

      size_type
      _M_bkt_num(const value_type& __obj) const
      { return _M_bkt_num_key(_M_get_key(__obj)); }

      size_type
      _M_bkt_num_key(const key_type& __key, size_t __n) const
      { return _M_hash(__key) % __n; }

      size_type
      _M_bkt_num(const value_type& __obj, size_t __n) const
      { return _M_bkt_num_key(_M_get_key(__obj), __n); }

      _Node*
      _M_new_node(const value_type& __obj)
      {
 _Node* __n = _M_get_node();
 __n->_M_next = 0;
 try
   {
     this->get_allocator().construct(&__n->_M_val, __obj);
     return __n;
   }
 catch(...)
   {
     _M_put_node(__n);
     throw;
   }
      }

      void
      _M_delete_node(_Node* __n)
      {
 this->get_allocator().destroy(&__n->_M_val);
 _M_put_node(__n);
      }

      void
      _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last);

      void
      _M_erase_bucket(const size_type __n, _Node* __last);

      void
      _M_copy_from(const hashtable& __ht);
    };

  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,
     class _All>
    _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>&
    _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::
    operator++()
    {
      const _Node* __old = _M_cur;
      _M_cur = _M_cur->_M_next;
      if (!_M_cur)
 {
   size_type __bucket = _M_ht->_M_bkt_num(__old->_M_val);
   while (!_M_cur && ++__bucket < _M_ht->_M_buckets.size())
     _M_cur = _M_ht->_M_buckets[__bucket];
 }
      return *this;
    }

  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,
     class _All>
    inline _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>
    _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::
    operator++(int)
    {
      iterator __tmp = *this;
      ++*this;
      return __tmp;
    }

  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,
     class _All>
    _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>&
    _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::
    operator++()
    {
      const _Node* __old = _M_cur;
      _M_cur = _M_cur->_M_next;
      if (!_M_cur)
 {
   size_type __bucket = _M_ht->_M_bkt_num(__old->_M_val);
   while (!_M_cur && ++__bucket < _M_ht->_M_buckets.size())
     _M_cur = _M_ht->_M_buckets[__bucket];
 }
      return *this;
    }

  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,
     class _All>
    inline _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>
    _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::
    operator++(int)
    {
      const_iterator __tmp = *this;
      ++*this;
      return __tmp;
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    bool
    operator==(const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht1,
        const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht2)
    {
      typedef typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::_Node _Node;

      if (__ht1._M_buckets.size() != __ht2._M_buckets.size())
 return false;

      for (size_t __n = 0; __n < __ht1._M_buckets.size(); ++__n)
 {
   _Node* __cur1 = __ht1._M_buckets[__n];
   _Node* __cur2 = __ht2._M_buckets[__n];

   for (; __cur1 && __cur2;
        __cur1 = __cur1->_M_next, __cur2 = __cur2->_M_next)
     {}
   if (__cur1 || __cur2)
     return false;

   for (__cur1 = __ht1._M_buckets[__n] ; __cur1;
        __cur1 = __cur1->_M_next)
     {
       bool _found__cur1 = false;
       for (_Node* __cur2 = __ht2._M_buckets[__n];
     __cur2; __cur2 = __cur2->_M_next)
  {
    if (__cur1->_M_val == __cur2->_M_val)
      {
        _found__cur1 = true;
        break;
      }
  }
       if (!_found__cur1)
  return false;
     }
 }
      return true;
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    inline bool
    operator!=(const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht1,
        const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht2)
    { return !(__ht1 == __ht2); }

  template <class _Val, class _Key, class _HF, class _Extract, class _EqKey,
     class _All>
    inline void
    swap(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1,
  hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht2)
    { __ht1.swap(__ht2); }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator, bool>
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    insert_unique_noresize(const value_type& __obj)
    {
      const size_type __n = _M_bkt_num(__obj);
      _Node* __first = _M_buckets[__n];

      for (_Node* __cur = __first; __cur; __cur = __cur->_M_next)
 if (_M_equals(_M_get_key(__cur->_M_val), _M_get_key(__obj)))
   return pair<iterator, bool>(iterator(__cur, this), false);

      _Node* __tmp = _M_new_node(__obj);
      __tmp->_M_next = __first;
      _M_buckets[__n] = __tmp;
      ++_M_num_elements;
      return pair<iterator, bool>(iterator(__tmp, this), true);
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    insert_equal_noresize(const value_type& __obj)
    {
      const size_type __n = _M_bkt_num(__obj);
      _Node* __first = _M_buckets[__n];

      for (_Node* __cur = __first; __cur; __cur = __cur->_M_next)
 if (_M_equals(_M_get_key(__cur->_M_val), _M_get_key(__obj)))
   {
     _Node* __tmp = _M_new_node(__obj);
     __tmp->_M_next = __cur->_M_next;
     __cur->_M_next = __tmp;
     ++_M_num_elements;
     return iterator(__tmp, this);
   }

      _Node* __tmp = _M_new_node(__obj);
      __tmp->_M_next = __first;
      _M_buckets[__n] = __tmp;
      ++_M_num_elements;
      return iterator(__tmp, this);
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::reference
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    find_or_insert(const value_type& __obj)
    {
      resize(_M_num_elements + 1);

      size_type __n = _M_bkt_num(__obj);
      _Node* __first = _M_buckets[__n];

      for (_Node* __cur = __first; __cur; __cur = __cur->_M_next)
 if (_M_equals(_M_get_key(__cur->_M_val), _M_get_key(__obj)))
   return __cur->_M_val;

      _Node* __tmp = _M_new_node(__obj);
      __tmp->_M_next = __first;
      _M_buckets[__n] = __tmp;
      ++_M_num_elements;
      return __tmp->_M_val;
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator,
  typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator>
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    equal_range(const key_type& __key)
    {
      typedef pair<iterator, iterator> _Pii;
      const size_type __n = _M_bkt_num_key(__key);

      for (_Node* __first = _M_buckets[__n]; __first;
    __first = __first->_M_next)
 if (_M_equals(_M_get_key(__first->_M_val), __key))
   {
     for (_Node* __cur = __first->_M_next; __cur;
   __cur = __cur->_M_next)
       if (!_M_equals(_M_get_key(__cur->_M_val), __key))
  return _Pii(iterator(__first, this), iterator(__cur, this));
     for (size_type __m = __n + 1; __m < _M_buckets.size(); ++__m)
       if (_M_buckets[__m])
  return _Pii(iterator(__first, this),
       iterator(_M_buckets[__m], this));
     return _Pii(iterator(__first, this), end());
   }
      return _Pii(end(), end());
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator,
  typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator>
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    equal_range(const key_type& __key) const
    {
      typedef pair<const_iterator, const_iterator> _Pii;
      const size_type __n = _M_bkt_num_key(__key);

      for (const _Node* __first = _M_buckets[__n]; __first;
    __first = __first->_M_next)
 {
   if (_M_equals(_M_get_key(__first->_M_val), __key))
     {
       for (const _Node* __cur = __first->_M_next; __cur;
     __cur = __cur->_M_next)
  if (!_M_equals(_M_get_key(__cur->_M_val), __key))
    return _Pii(const_iterator(__first, this),
         const_iterator(__cur, this));
       for (size_type __m = __n + 1; __m < _M_buckets.size(); ++__m)
  if (_M_buckets[__m])
    return _Pii(const_iterator(__first, this),
         const_iterator(_M_buckets[__m], this));
       return _Pii(const_iterator(__first, this), end());
     }
 }
      return _Pii(end(), end());
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::size_type
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    erase(const key_type& __key)
    {
      const size_type __n = _M_bkt_num_key(__key);
      _Node* __first = _M_buckets[__n];
      size_type __erased = 0;

      if (__first)
 {
   _Node* __cur = __first;
   _Node* __next = __cur->_M_next;
   while (__next)
     {
       if (_M_equals(_M_get_key(__next->_M_val), __key))
  {
    __cur->_M_next = __next->_M_next;
    _M_delete_node(__next);
    __next = __cur->_M_next;
    ++__erased;
    --_M_num_elements;
  }
       else
  {
    __cur = __next;
    __next = __cur->_M_next;
  }
     }
   if (_M_equals(_M_get_key(__first->_M_val), __key))
     {
       _M_buckets[__n] = __first->_M_next;
       _M_delete_node(__first);
       ++__erased;
       --_M_num_elements;
     }
 }
      return __erased;
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    erase(const iterator& __it)
    {
      _Node* __p = __it._M_cur;
      if (__p)
 {
   const size_type __n = _M_bkt_num(__p->_M_val);
   _Node* __cur = _M_buckets[__n];

   if (__cur == __p)
     {
       _M_buckets[__n] = __cur->_M_next;
       _M_delete_node(__cur);
       --_M_num_elements;
     }
   else
     {
       _Node* __next = __cur->_M_next;
       while (__next)
  {
    if (__next == __p)
      {
        __cur->_M_next = __next->_M_next;
        _M_delete_node(__next);
        --_M_num_elements;
        break;
      }
    else
      {
        __cur = __next;
        __next = __cur->_M_next;
      }
  }
     }
 }
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    erase(iterator __first, iterator __last)
    {
      size_type __f_bucket = __first._M_cur ? _M_bkt_num(__first._M_cur->_M_val)
                                     : _M_buckets.size();

      size_type __l_bucket = __last._M_cur ? _M_bkt_num(__last._M_cur->_M_val)
                                    : _M_buckets.size();

      if (__first._M_cur == __last._M_cur)
 return;
      else if (__f_bucket == __l_bucket)
 _M_erase_bucket(__f_bucket, __first._M_cur, __last._M_cur);
      else
 {
   _M_erase_bucket(__f_bucket, __first._M_cur, 0);
   for (size_type __n = __f_bucket + 1; __n < __l_bucket; ++__n)
     _M_erase_bucket(__n, 0);
   if (__l_bucket != _M_buckets.size())
     _M_erase_bucket(__l_bucket, __last._M_cur);
 }
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    inline void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    erase(const_iterator __first, const_iterator __last)
    {
      erase(iterator(const_cast<_Node*>(__first._M_cur),
       const_cast<hashtable*>(__first._M_ht)),
     iterator(const_cast<_Node*>(__last._M_cur),
       const_cast<hashtable*>(__last._M_ht)));
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    inline void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    erase(const const_iterator& __it)
    { erase(iterator(const_cast<_Node*>(__it._M_cur),
       const_cast<hashtable*>(__it._M_ht))); }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    resize(size_type __num_elements_hint)
    {
      const size_type __old_n = _M_buckets.size();
      if (__num_elements_hint > __old_n)
 {
   const size_type __n = _M_next_size(__num_elements_hint);
   if (__n > __old_n)
     {
       _Vector_type __tmp(__n, (_Node*)(0), _M_buckets.get_allocator());
       try
  {
    for (size_type __bucket = 0; __bucket < __old_n; ++__bucket)
      {
        _Node* __first = _M_buckets[__bucket];
        while (__first)
   {
     size_type __new_bucket = _M_bkt_num(__first->_M_val,
             __n);
     _M_buckets[__bucket] = __first->_M_next;
     __first->_M_next = __tmp[__new_bucket];
     __tmp[__new_bucket] = __first;
     __first = _M_buckets[__bucket];
   }
      }
    _M_buckets.swap(__tmp);
  }
       catch(...)
  {
    for (size_type __bucket = 0; __bucket < __tmp.size();
         ++__bucket)
      {
        while (__tmp[__bucket])
   {
     _Node* __next = __tmp[__bucket]->_M_next;
     _M_delete_node(__tmp[__bucket]);
     __tmp[__bucket] = __next;
   }
      }
    throw;
  }
     }
 }
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)
    {
      _Node* __cur = _M_buckets[__n];
      if (__cur == __first)
 _M_erase_bucket(__n, __last);
      else
 {
   _Node* __next;
   for (__next = __cur->_M_next;
        __next != __first;
        __cur = __next, __next = __cur->_M_next)
     ;
   while (__next != __last)
     {
       __cur->_M_next = __next->_M_next;
       _M_delete_node(__next);
       __next = __cur->_M_next;
       --_M_num_elements;
     }
 }
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    _M_erase_bucket(const size_type __n, _Node* __last)
    {
      _Node* __cur = _M_buckets[__n];
      while (__cur != __last)
 {
   _Node* __next = __cur->_M_next;
   _M_delete_node(__cur);
   __cur = __next;
   _M_buckets[__n] = __cur;
   --_M_num_elements;
 }
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    clear()
    {
      for (size_type __i = 0; __i < _M_buckets.size(); ++__i)
 {
   _Node* __cur = _M_buckets[__i];
   while (__cur != 0)
     {
       _Node* __next = __cur->_M_next;
       _M_delete_node(__cur);
       __cur = __next;
     }
   _M_buckets[__i] = 0;
 }
      _M_num_elements = 0;
    }

  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>
    void
    hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::
    _M_copy_from(const hashtable& __ht)
    {
      _M_buckets.clear();
      _M_buckets.reserve(__ht._M_buckets.size());
      _M_buckets.insert(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0);
      try
 {
   for (size_type __i = 0; __i < __ht._M_buckets.size(); ++__i) {
     const _Node* __cur = __ht._M_buckets[__i];
     if (__cur)
       {
  _Node* __local_copy = _M_new_node(__cur->_M_val);
  _M_buckets[__i] = __local_copy;

  for (_Node* __next = __cur->_M_next;
       __next;
       __cur = __next, __next = __cur->_M_next)
    {
      __local_copy->_M_next = _M_new_node(__next->_M_val);
      __local_copy = __local_copy->_M_next;
    }
       }
   }
   _M_num_elements = __ht._M_num_elements;
 }
      catch(...)
 {
   clear();
   throw;
 }
    }
}
# 65 "/usr/lib/gcc/i486-linux-gnu/4.1.2/../../../../include/c++/4.1.2/ext/hash_map" 2 3


namespace __gnu_cxx
{
  using std::equal_to;
  using std::allocator;
  using std::pair;
  using std::_Select1st;



  template<class _Key, class _Tp, class _HashFcn = hash<_Key>,
    class _EqualKey = equal_to<_Key>, class _Alloc = allocator<_Tp> >
    class hash_map;

  template<class _Key, class _Tp, class _HashFn, class _EqKey, class _Alloc>
    inline bool
    operator==(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&,
        const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&);






  template <class _Key, class _Tp, class _HashFcn, class _EqualKey,
     class _Alloc>
    class hash_map
    {
    private:
      typedef hashtable<pair<const _Key, _Tp>,_Key, _HashFcn,
   _Select1st<pair<const _Key, _Tp> >,
   _EqualKey, _Alloc> _Ht;

      _Ht _M_ht;

    public:
      typedef typename _Ht::key_type key_type;
      typedef _Tp data_type;
      typedef _Tp mapped_type;
      typedef typename _Ht::value_type value_type;
      typedef typename _Ht::hasher hasher;
      typedef typename _Ht::key_equal key_equal;

      typedef typename _Ht::size_type size_type;
      typedef typename _Ht::difference_type difference_type;
      typedef typename _Ht::pointer pointer;
      typedef typename _Ht::const_pointer const_pointer;
      typedef typename _Ht::reference reference;
      typedef typename _Ht::const_reference const_reference;

      typedef typename _Ht::iterator iterator;
      typedef typename _Ht::const_iterator const_iterator;

      typedef typename _Ht::allocator_type allocator_type;

      hasher
      hash_funct() const
      { return _M_ht.hash_funct(); }

      key_equal
      key_eq() const
      { return _M_ht.key_eq(); }

      allocator_type
      get_allocator() const
      { return _M_ht.get_allocator(); }

    public:
      hash_map()
      : _M_ht(100, hasher(), key_equal(), allocator_type()) {}

      explicit
      hash_map(size_type __n)
      : _M_ht(__n, hasher(), key_equal(), allocator_type()) {}

      hash_map(size_type __n, const hasher& __hf)
      : _M_ht(__n, __hf, key_equal(), allocator_type()) {}

      hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,
        const allocator_type& __a = allocator_type())
      : _M_ht(__n, __hf, __eql, __a) {}

      template <class _InputIterator>
        hash_map(_InputIterator __f, _InputIterator __l)
 : _M_ht(100, hasher(), key_equal(), allocator_type())
        { _M_ht.insert_unique(__f, __l); }

      template <class _InputIterator>
        hash_map(_InputIterator __f, _InputIterator __l, size_type __n)
 : _M_ht(__n, hasher(), key_equal(), allocator_type())
        { _M_ht.insert_unique(__f, __l); }

      template <class _InputIterator>
        hash_map(_InputIterator __f, _InputIterator __l, size_type __n,
   const hasher& __hf)
 : _M_ht(__n, __hf, key_equal(), allocator_type())
        { _M_ht.insert_unique(__f, __l); }

      template <class _InputIterator>
        hash_map(_InputIterator __f, _InputIterator __l, size_type __n,
   const hasher& __hf, const key_equal& __eql,
   const allocator_type& __a = allocator_type())
 : _M_ht(__n, __hf, __eql, __a)
        { _M_ht.insert_unique(__f, __l); }

    public:
      size_type
      size() const
      { return _M_ht.size(); }

      size_type
      max_size() const
      { return _M_ht.max_size(); }

      bool
      empty() const
      { return _M_ht.empty(); }

      void
      swap(hash_map& __hs)
      { _M_ht.swap(__hs._M_ht); }

      template <class _K1, class _T1, class _HF, class _EqK, class _Al>
        friend bool
        operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,
      const hash_map<_K1, _T1, _HF, _EqK, _Al>&);

      iterator
      begin()
      { return _M_ht.begin(); }

      iterator
      end()
      { return _M_ht.end(); }

      const_iterator
      begin() const
      { return _M_ht.begin(); }

      const_iterator
      end() const
      { return _M_ht.end(); }

    public:
      pair<iterator, bool>
      insert(const value_type& __obj)
      { return _M_ht.insert_unique(__obj); }

      template <class _InputIterator>
        void
        insert(_InputIterator __f, _InputIterator __l)
        { _M_ht.insert_unique(__f, __l); }

      pair<iterator, bool>
      insert_noresize(const value_type& __obj)
      { return _M_ht.insert_unique_noresize(__obj); }

      iterator
      find(const key_type& __key)
      { return _M_ht.find(__key); }

      const_iterator
      find(const key_type& __key) const
      { return _M_ht.find(__key); }

      _Tp&
      operator[](const key_type& __key)
      { return _M_ht.find_or_insert(value_type(__key, _Tp())).second; }

      size_type
      count(const key_type& __key) const
      { return _M_ht.count(__key); }

      pair<iterator, iterator>
      equal_range(const key_type& __key)
      { return _M_ht.equal_range(__key); }

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __key) const
      { return _M_ht.equal_range(__key); }

      size_type
      erase(const key_type& __key)
      {return _M_ht.erase(__key); }

      void
      erase(iterator __it)
      { _M_ht.erase(__it); }

      void
      erase(iterator __f, iterator __l)
      { _M_ht.erase(__f, __l); }

      void
      clear()
      { _M_ht.clear(); }

      void
      resize(size_type __hint)
      { _M_ht.resize(__hint); }

      size_type
      bucket_count() const
      { return _M_ht.bucket_count(); }

      size_type
      max_bucket_count() const
      { return _M_ht.max_bucket_count(); }

      size_type
      elems_in_bucket(size_type __n) const
      { return _M_ht.elems_in_bucket(__n); }
    };

  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>
    inline bool
    operator==(const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,
        const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)
    { return __hm1._M_ht == __hm2._M_ht; }

  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>
    inline bool
    operator!=(const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,
        const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)
    { return !(__hm1 == __hm2); }

  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>
    inline void
    swap(hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,
  hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)
    { __hm1.swap(__hm2); }



  template <class _Key, class _Tp,
     class _HashFcn = hash<_Key>,
     class _EqualKey = equal_to<_Key>,
     class _Alloc = allocator<_Tp> >
    class hash_multimap;

  template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>
    inline bool
    operator==(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,
        const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2);






  template <class _Key, class _Tp, class _HashFcn, class _EqualKey,
     class _Alloc>
    class hash_multimap
    {

     
     
     
     

    private:
      typedef hashtable<pair<const _Key, _Tp>, _Key, _HashFcn,
   _Select1st<pair<const _Key, _Tp> >, _EqualKey, _Alloc>
          _Ht;

      _Ht _M_ht;

    public:
      typedef typename _Ht::key_type key_type;
      typedef _Tp data_type;
      typedef _Tp mapped_type;
      typedef typename _Ht::value_type value_type;
      typedef typename _Ht::hasher hasher;
      typedef typename _Ht::key_equal key_equal;

      typedef typename _Ht::size_type size_type;
      typedef typename _Ht::difference_type difference_type;
      typedef typename _Ht::pointer pointer;
      typedef typename _Ht::const_pointer const_pointer;
      typedef typename _Ht::reference reference;
      typedef typename _Ht::const_reference const_reference;

      typedef typename _Ht::iterator iterator;
      typedef typename _Ht::const_iterator const_iterator;

      typedef typename _Ht::allocator_type allocator_type;

      hasher
      hash_funct() const
      { return _M_ht.hash_funct(); }

      key_equal
      key_eq() const
      { return _M_ht.key_eq(); }

      allocator_type
      get_allocator() const
      { return _M_ht.get_allocator(); }

    public:
      hash_multimap()
      : _M_ht(100, hasher(), key_equal(), allocator_type()) {}

      explicit
      hash_multimap(size_type __n)
      : _M_ht(__n, hasher(), key_equal(), allocator_type()) {}

      hash_multimap(size_type __n, const hasher& __hf)
      : _M_ht(__n, __hf, key_equal(), allocator_type()) {}

      hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,
      const allocator_type& __a = allocator_type())
      : _M_ht(__n, __hf, __eql, __a) {}

      template <class _InputIterator>
        hash_multimap(_InputIterator __f, _InputIterator __l)
 : _M_ht(100, hasher(), key_equal(), allocator_type())
        { _M_ht.insert_equal(__f, __l); }

      template <class _InputIterator>
        hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)
 : _M_ht(__n, hasher(), key_equal(), allocator_type())
        { _M_ht.insert_equal(__f, __l); }

      template <class _InputIterator>
        hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,
        const hasher& __hf)
 : _M_ht(__n, __hf, key_equal(), allocator_type())
        { _M_ht.insert_equal(__f, __l); }

      template <class _InputIterator>
        hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,
        const hasher& __hf, const key_equal& __eql,
        const allocator_type& __a = allocator_type())
 : _M_ht(__n, __hf, __eql, __a)
        { _M_ht.insert_equal(__f, __l); }

    public:
      size_type
      size() const
      { return _M_ht.size(); }

      size_type
      max_size() const
      { return _M_ht.max_size(); }

      bool
      empty() const
      { return _M_ht.empty(); }

      void
      swap(hash_multimap& __hs)
      { _M_ht.swap(__hs._M_ht); }

      template <class _K1, class _T1, class _HF, class _EqK, class _Al>
        friend bool
        operator==(const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&,
     const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&);

      iterator
      begin()
      { return _M_ht.begin(); }

      iterator
      end()
      { return _M_ht.end(); }

      const_iterator
      begin() const
      { return _M_ht.begin(); }

      const_iterator
      end() const
      { return _M_ht.end(); }

public:
      iterator
      insert(const value_type& __obj)
      { return _M_ht.insert_equal(__obj); }

      template <class _InputIterator>
        void
        insert(_InputIterator __f, _InputIterator __l)
        { _M_ht.insert_equal(__f,__l); }

      iterator
      insert_noresize(const value_type& __obj)
      { return _M_ht.insert_equal_noresize(__obj); }

      iterator
      find(const key_type& __key)
      { return _M_ht.find(__key); }

      const_iterator
      find(const key_type& __key) const
      { return _M_ht.find(__key); }

      size_type
      count(const key_type& __key) const
      { return _M_ht.count(__key); }

      pair<iterator, iterator>
      equal_range(const key_type& __key)
      { return _M_ht.equal_range(__key); }

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __key) const
      { return _M_ht.equal_range(__key); }

      size_type
      erase(const key_type& __key)
      { return _M_ht.erase(__key); }

      void
      erase(iterator __it)
      { _M_ht.erase(__it); }

      void
      erase(iterator __f, iterator __l)
      { _M_ht.erase(__f, __l); }

      void
      clear()
      { _M_ht.clear(); }

    public:
      void
      resize(size_type __hint)
      { _M_ht.resize(__hint); }

      size_type
      bucket_count() const
      { return _M_ht.bucket_count(); }

      size_type
      max_bucket_count() const
      { return _M_ht.max_bucket_count(); }

      size_type
      elems_in_bucket(size_type __n) const
      { return _M_ht.elems_in_bucket(__n); }
};

  template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>
    inline bool
    operator==(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,
        const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2)
    { return __hm1._M_ht == __hm2._M_ht; }

  template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>
    inline bool
    operator!=(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,
        const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2)
    { return !(__hm1 == __hm2); }

  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>
    inline void
    swap(hash_multimap<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,
  hash_multimap<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)
    { __hm1.swap(__hm2); }

}

namespace std
{



  template <class _Key, class _Tp, class _HashFn, class _EqKey, class _Alloc>
    class insert_iterator<__gnu_cxx::hash_map<_Key, _Tp, _HashFn,
           _EqKey, _Alloc> >
    {
    protected:
      typedef __gnu_cxx::hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>
        _Container;
      _Container* container;

    public:
      typedef _Container container_type;
      typedef output_iterator_tag iterator_category;
      typedef void value_type;
      typedef void difference_type;
      typedef void pointer;
      typedef void reference;

      insert_iterator(_Container& __x)
      : container(&__x) {}

      insert_iterator(_Container& __x, typename _Container::iterator)
      : container(&__x) {}

      insert_iterator<_Container>&
      operator=(const typename _Container::value_type& __value)
      {
 container->insert(__value);
 return *this;
      }

      insert_iterator<_Container>&
      operator*()
      { return *this; }

      insert_iterator<_Container>&
      operator++() { return *this; }

      insert_iterator<_Container>&
      operator++(int)
      { return *this; }
    };

  template <class _Key, class _Tp, class _HashFn, class _EqKey, class _Alloc>
    class insert_iterator<__gnu_cxx::hash_multimap<_Key, _Tp, _HashFn,
         _EqKey, _Alloc> >
    {
    protected:
      typedef __gnu_cxx::hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc>
        _Container;
      _Container* container;
      typename _Container::iterator iter;

    public:
      typedef _Container container_type;
      typedef output_iterator_tag iterator_category;
      typedef void value_type;
      typedef void difference_type;
      typedef void pointer;
      typedef void reference;

      insert_iterator(_Container& __x)
      : container(&__x) {}

      insert_iterator(_Container& __x, typename _Container::iterator)
      : container(&__x) {}

      insert_iterator<_Container>&
      operator=(const typename _Container::value_type& __value)
      {
 container->insert(__value);
 return *this;
      }

      insert_iterator<_Container>&
      operator*()
      { return *this; }

      insert_iterator<_Container>&
      operator++()
      { return *this; }

      insert_iterator<_Container>&
      operator++(int)
      { return *this; }
    };
}
# 67 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx" 2
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 36 "/usr/include/bits/mathdef.h" 3 4
typedef long double float_t;

typedef long double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ();




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ();




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 141 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ();




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 142 "/usr/include/math.h" 2 3 4
# 157 "/usr/include/math.h" 3 4
extern int signgam;
# 198 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 284 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 307 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 465 "/usr/include/math.h" 3 4
}
# 68 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx" 2

namespace {


    struct eq_tcon {
 bool operator () (TCON_IDX t1_idx, TCON_IDX t2_idx) const {
     if (t1_idx == t2_idx)
  return ((BOOL) 1);
     const TCON& t1 = Tcon_Table[t1_idx];
     const TCON& t2 = Tcon_Table[t2_idx];

     if (TCON_ty (t1) != TCON_ty (t2))
  return ((BOOL) 0);
     if (t1.flags != t2.flags)
  return ((BOOL) 0);

     switch (TCON_ty (t1)) {

     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
  return TCON_i0 (t1) == TCON_i0 (t2);

     case 10:

  return TCON_ival (t1) == TCON_ival (t2);

     case 11:

  return TCON_k0 (t1) == TCON_k0 (t2);

     case 14:
  return (TCON_str_idx (t1) == TCON_str_idx (t2) &&
   TCON_str_len (t1) == TCON_str_len (t2));

     default:
  return memcmp (&t1, &t2, sizeof(TCON)) == 0;
     }
 }
    };

    struct tcon_hash {
 size_t operator() (TCON_IDX tcon_idx) const {
     const TCON& tcon = Tcon_Table[tcon_idx];
     size_t val = TCON_ty (tcon);
     val ^= TCON_ival (tcon);
     return val;
 }
    };
}


typedef __gnu_cxx::hash_map<TCON_IDX, ST *, tcon_hash, eq_tcon> TCON_MERGE;

ST *
New_Const_Sym (TCON_IDX tcon, TY_IDX ty)
{
    static TCON_MERGE merge;

    TCON_MERGE::iterator iter = merge.find (tcon);

    ST* st;
    if (iter == merge.end ()) {

 st = New_ST ((1));

 ST_Init (st, 0, CLASS_CONST, SCLASS_FSTATIC, EXPORT_LOCAL, ty);
 Set_ST_tcon (st, tcon);
 Set_ST_is_initialized (st);
 merge[tcon] = st;
    } else {
 st = (*iter).second;
 ( ST_class (st) == CLASS_CONST && ST_sclass (st) == SCLASS_FSTATIC && ST_export (st) == EXPORT_LOCAL && ST_is_initialized (st) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx", 148 ), Fail_FmtAssertion ("Mismatched const ST")) );



    }
    return st;

}


ST *
Gen_String_Sym (TCON *val, TY_IDX ty, BOOL)
{
    return New_Const_Sym (Enter_tcon (*val), ty);
}
# 174 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
TCON
Const_Val ( WN *n )
{
    return WN_val (n);
}
# 190 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
WN *
Make_Const ( TCON c )
{
   WN *n;
   OPCODE opc;
   ST *csym;



  Check_TCON(&c);


  switch(TCON_ty(c)) {
    case 10:
      opc = OPC_F4CONST;
      break;
    case 11:
      opc = OPC_F8CONST;
      break;
     case 15:
      opc = OPC_FQCONST;
      break;
    case 17:
      opc = OPC_C4CONST;
      break;
    case 18:
      opc = OPC_C8CONST;
      break;
    case 19:
      opc = OPC_CQCONST;
      break;
# 229 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
    default:
      ( ((BOOL) 0) ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx", 231 ), Fail_FmtAssertion ( "Make_Const can not handle %s", Mtype_Name(TCON_ty(c)) )) );

      return __null;
  }

   csym = New_Const_Sym (Enter_tcon (c), MTYPE_TO_TY_array[TCON_ty(c)]);
   n = WN_CreateConst(opc, csym );
   return (n);

}
# 251 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
WN *
Make_Zerocon ( TYPE_ID ty )
{
  return Make_Const ( Targ_Conv ( ty, Host_To_Targ ( 4, 0 ) ));
}
# 267 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
WN *
Make_Comparison_Result_Const ( INT16 val )
{
  return Make_Const ( Host_To_Targ ( Comparison_Result_Mtype, val ) );
}
# 283 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
WN *
Make_Integer_Const ( INT16 mtype, TARG_INT val )
{






   return (WN_CreateIntconst(OPCODE_make_op(OPR_INTCONST,mtype,20), val));

}
# 306 "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx"
WN * Make_Reduction_Identity ( INT32 opr, TYPE_ID mtype )
{
   WN * r;
   TYPE_ID ntype;

   if ((mtype == 2) || (mtype == 3))
     ntype = 4;
   else if ((mtype == 6) || (mtype == 7))
     ntype = 8;
   else
     ntype = mtype;

   switch (opr) {

    case OPR_ADD:
    case OPR_SUB:
      switch (mtype) {
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0 );
  break;

       case 10:
       case 11:
       case 15:
       case 17:
       case 18:
       case 19:
  r = Make_Const ( Host_To_Targ_Float ( ntype, 0.0 ) );
  break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    case OPR_MPY:
    case OPR_DIV:
      switch (mtype) {
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 1 );
  break;

       case 10:
       case 11:
       case 15:
       case 17:
       case 18:
       case 19:
  r = Make_Const ( Host_To_Targ_Float ( ntype, 1.0 ) );
  break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    case OPR_MAX:
      switch (mtype) {
       case 2:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), -128LL );
  break;

       case 3:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), -32768LL );
  break;

       case 4:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), -2147483648LL);
  break;

       case 5:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20),
    0x8000000000000000LL );
  break;

       case 6:
       case 7:
       case 8:
       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0 );
  break;

       case 10:
       case 11:
       case 15:
  r = Make_Const ( Host_To_Targ_Float ( ntype, -(__builtin_huge_val()) ) );
  break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    case OPR_MIN:
      switch (mtype) {
       case 2:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0x7f );
  break;

       case 3:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0x7fff );
  break;

       case 4:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0x7fffffff );
  break;

       case 5:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20),
    0x7fffffffffffffffLL );
  break;

       case 6:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0xff );
  break;

       case 7:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0xffff );
  break;

       case 8:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0xffffffff );
  break;

       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20),
    0xffffffffffffffffLL );
  break;

       case 10:
       case 11:
       case 15:
  r = Make_Const ( Host_To_Targ_Float ( ntype, (__builtin_huge_val()) ) );
  break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    case OPR_BIOR:
    case OPR_BXOR:
      switch (mtype) {
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0 );
  break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    case OPR_BAND:
      switch (mtype) {
       case 2:
       case 6:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0xff );
  break;

       case 3:
       case 7:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0xffff );
  break;

       case 4:
       case 8:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20), 0xffffffff );
  break;

       case 5:
       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20),
    0xffffffffffffffffLL );
  break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    case OPR_LIOR:
      r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype, 20 ),
        0 );
      break;

    case OPR_LAND:
      r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype, 20 ),
        1 );
      break;

    case OPR_EQ:
    case OPR_NE:
    case OPR_CAND:

    case OPR_CIOR:
      switch (mtype) {
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
  r = WN_CreateIntconst ( OPCODE_make_op ( OPR_INTCONST, ntype,
       20),
                                 (opr == OPR_EQ || opr == OPR_CAND) ? 1
                                                                    : 0 );
  break;

       case 10:
       case 11:
       case 15:
        ( opr == OPR_CAND || opr == OPR_CIOR ? (void) 1 : ( Abort_Compiler_Location ( "/usa/handong/simplnano/cmplr/targia32_sl1/g++fe/../../common/com/const.cxx", 567 ), Fail_FmtAssertion ("bad opr %d", (INT) opr)) );

        r = Make_Const(Host_To_Targ_Float(ntype,
                                          (opr == OPR_CAND) ? 1.0 : 0.0));
        break;

       default:
  Fail_FmtAssertion ( "No reduction identity for operator %d, type %d",
       opr, mtype);
      }
      break;

    default:
      Fail_FmtAssertion ( "No reduction identity for operator %d, type %d", opr,
    mtype);
      break;
   }
   return (r);
}
