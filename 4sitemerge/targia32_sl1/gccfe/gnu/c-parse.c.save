/* A Bison parser, made by GNU Bison 1.875c.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     TYPENAME = 259,
     SCSPEC = 260,
     STATIC = 261,
     TYPESPEC = 262,
     TYPE_QUAL = 263,
     CONSTANT = 264,
     STRING = 265,
     ELLIPSIS = 266,
     PRAGMA_OPTIONS = 267,
     PRAGMA_EXEC_FREQ = 268,
     FREQ_NEVER = 269,
     FREQ_INIT = 270,
     FREQ_FREQUENT = 271,
     PRIVATE = 272,
     COPYPRIVATE = 273,
     FIRSTPRIVATE = 274,
     LASTPRIVATE = 275,
     SHARED = 276,
     DEFAULT = 277,
     NONE = 278,
     REDUCTION = 279,
     COPYIN = 280,
     DYNAMIC = 281,
     GUIDED = 282,
     RUNTIME = 283,
     ORDERED = 284,
     SCHEDULE = 285,
     NOWAIT = 286,
     PRAGMA_OMP = 287,
     PARALLEL = 288,
     NUM_THREADS = 289,
     SECTIONS = 290,
     SECTION = 291,
     SINGLE = 292,
     MASTER = 293,
     CRITICAL = 294,
     BARRIER = 295,
     ATOMIC = 296,
     FLUSH = 297,
     THREADPRIVATE = 298,
     SIZEOF = 299,
     ENUM = 300,
     STRUCT = 301,
     UNION = 302,
     IF = 303,
     ELSE = 304,
     WHILE = 305,
     DO = 306,
     FOR = 307,
     SWITCH = 308,
     CASE = 309,
     BREAK = 310,
     CONTINUE = 311,
     RETURN = 312,
     GOTO = 313,
     ASM_KEYWORD = 314,
     TYPEOF = 315,
     ALIGNOF = 316,
     ATTRIBUTE = 317,
     EXTENSION = 318,
     LABEL = 319,
     REALPART = 320,
     IMAGPART = 321,
     VA_ARG = 322,
     CHOOSE_EXPR = 323,
     TYPES_COMPATIBLE_P = 324,
     PTR_VALUE = 325,
     PTR_BASE = 326,
     PTR_EXTENT = 327,
     STRING_FUNC_NAME = 328,
     VAR_FUNC_NAME = 329,
     ASSIGN = 330,
     OROR = 331,
     ANDAND = 332,
     EQCOMPARE = 333,
     ARITHCOMPARE = 334,
     RSHIFT = 335,
     LSHIFT = 336,
     MINUSMINUS = 337,
     PLUSPLUS = 338,
     UNARY = 339,
     HYPERUNARY = 340,
     POINTSAT = 341,
     INTERFACE = 342,
     IMPLEMENTATION = 343,
     END = 344,
     SELECTOR = 345,
     DEFS = 346,
     ENCODE = 347,
     CLASSNAME = 348,
     PUBLIC = 349,
     PROTECTED = 350,
     PROTOCOL = 351,
     OBJECTNAME = 352,
     CLASS = 353,
     ALIAS = 354
   };
#endif
#define IDENTIFIER 258
#define TYPENAME 259
#define SCSPEC 260
#define STATIC 261
#define TYPESPEC 262
#define TYPE_QUAL 263
#define CONSTANT 264
#define STRING 265
#define ELLIPSIS 266
#define PRAGMA_OPTIONS 267
#define PRAGMA_EXEC_FREQ 268
#define FREQ_NEVER 269
#define FREQ_INIT 270
#define FREQ_FREQUENT 271
#define PRIVATE 272
#define COPYPRIVATE 273
#define FIRSTPRIVATE 274
#define LASTPRIVATE 275
#define SHARED 276
#define DEFAULT 277
#define NONE 278
#define REDUCTION 279
#define COPYIN 280
#define DYNAMIC 281
#define GUIDED 282
#define RUNTIME 283
#define ORDERED 284
#define SCHEDULE 285
#define NOWAIT 286
#define PRAGMA_OMP 287
#define PARALLEL 288
#define NUM_THREADS 289
#define SECTIONS 290
#define SECTION 291
#define SINGLE 292
#define MASTER 293
#define CRITICAL 294
#define BARRIER 295
#define ATOMIC 296
#define FLUSH 297
#define THREADPRIVATE 298
#define SIZEOF 299
#define ENUM 300
#define STRUCT 301
#define UNION 302
#define IF 303
#define ELSE 304
#define WHILE 305
#define DO 306
#define FOR 307
#define SWITCH 308
#define CASE 309
#define BREAK 310
#define CONTINUE 311
#define RETURN 312
#define GOTO 313
#define ASM_KEYWORD 314
#define TYPEOF 315
#define ALIGNOF 316
#define ATTRIBUTE 317
#define EXTENSION 318
#define LABEL 319
#define REALPART 320
#define IMAGPART 321
#define VA_ARG 322
#define CHOOSE_EXPR 323
#define TYPES_COMPATIBLE_P 324
#define PTR_VALUE 325
#define PTR_BASE 326
#define PTR_EXTENT 327
#define STRING_FUNC_NAME 328
#define VAR_FUNC_NAME 329
#define ASSIGN 330
#define OROR 331
#define ANDAND 332
#define EQCOMPARE 333
#define ARITHCOMPARE 334
#define RSHIFT 335
#define LSHIFT 336
#define MINUSMINUS 337
#define PLUSPLUS 338
#define UNARY 339
#define HYPERUNARY 340
#define POINTSAT 341
#define INTERFACE 342
#define IMPLEMENTATION 343
#define END 344
#define SELECTOR 345
#define DEFS 346
#define ENCODE 347
#define CLASSNAME 348
#define PUBLIC 349
#define PROTECTED 350
#define PROTOCOL 351
#define OBJECTNAME 352
#define CLASS 353
#define ALIAS 354




/* Copy the first part of user declarations.  */
#line 41 "../../../kgccfe/gnu/c-parse.y"

#include "config.h"
#include "system.h"
#include "tree.h"
#include "omp_types.h"
#include "omp_directive.h"
#include "input.h"
#include "cpplib.h"
#include "intl.h"
#include "timevar.h"
#include "c-pragma.h"		/* For YYDEBUG definition, and parse_in.  */
#include "c-tree.h"
#include "flags.h"
#include "output.h"
#include "toplev.h"
#include "ggc.h"

#ifdef MULTIBYTE_CHARS
#include <locale.h>
#endif


/* Like YYERROR but do call yyerror.  */
#define YYERROR1 { yyerror ("syntax error"); YYERROR; }

/* Like the default stack expander, except (1) use realloc when possible,
   (2) impose no hard maxiumum on stack size, (3) REALLY do not use alloca.

   Irritatingly, YYSTYPE is defined after this %{ %} block, so we cannot
   give malloced_yyvs its proper type.  This is ok since all we need from
   it is to be able to free it.  */

static short *malloced_yyss;
static void *malloced_yyvs;

#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)			\
do {									\
  size_t newsize;							\
  short *newss;								\
  YYSTYPE *newvs;							\
  newsize = *(YYSSZ) *= 2;						\
  if (malloced_yyss)							\
    {									\
      newss = (short *)							\
	really_call_realloc (*(SS), newsize * sizeof (short));		\
      newvs = (YYSTYPE *)						\
	really_call_realloc (*(VS), newsize * sizeof (YYSTYPE));	\
    }									\
  else									\
    {									\
      newss = (short *) really_call_malloc (newsize * sizeof (short));	\
      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \
      if (newss)							\
        memcpy (newss, *(SS), (SSSIZE));				\
      if (newvs)							\
        memcpy (newvs, *(VS), (VSSIZE));				\
    }									\
  if (!newss || !newvs)							\
    {									\
      yyerror (MSG);							\
      return 2;								\
    }									\
  *(SS) = newss;							\
  *(VS) = newvs;							\
  malloced_yyss = newss;						\
  malloced_yyvs = (void *) newvs;					\
} while (0)


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 112 "../../../kgccfe/gnu/c-parse.y"
typedef union YYSTYPE {long itype; tree ttype; enum tree_code code;
	const char *filename; int lineno;
	enum reduction_op_type red_op_type;
	enum schedule_kind_type sch_k_type;
	struct parallel_clause_list * pclause_type;
	struct for_clause_list * for_clause_type;
	struct sections_clause_list * sections_clause_type;
	struct single_clause_list * single_clause_type;
	struct parallel_for_clause_list * parallel_for_clause_type;
	struct parallel_sections_clause_list * parallel_sections_clause_type;
	} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 355 "c-parse.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 284 "../../../kgccfe/gnu/c-parse.y"

/* Number of statements (loosely speaking) and compound statements
   seen so far.  */
static int stmt_count;
static int compstmt_count;

/* Input file and line number of the end of the body of last simple_if;
   used by the stmt-rule immediately after simple_if returns.  */
static const char *if_stmt_file;
static int if_stmt_line;

/* List of types and structure classes of the current declaration.  */
static GTY(()) tree current_declspecs;
static GTY(()) tree prefix_attributes;

/* List of all the attributes applying to the identifier currently being
   declared; includes prefix_attributes and possibly some more attributes
   just after a comma.  */
static GTY(()) tree all_prefix_attributes;

/* Stack of saved values of current_declspecs, prefix_attributes and
   all_prefix_attributes.  */
static GTY(()) tree declspec_stack;

/* PUSH_DECLSPEC_STACK is called from setspecs; POP_DECLSPEC_STACK
   should be called from the productions making use of setspecs.  */
#define PUSH_DECLSPEC_STACK						 \
  do {									 \
    declspec_stack = tree_cons (build_tree_list (prefix_attributes,	 \
						 all_prefix_attributes), \
				current_declspecs,			 \
				declspec_stack);			 \
  } while (0)

#define POP_DECLSPEC_STACK						\
  do {									\
    current_declspecs = TREE_VALUE (declspec_stack);			\
    prefix_attributes = TREE_PURPOSE (TREE_PURPOSE (declspec_stack));	\
    all_prefix_attributes = TREE_VALUE (TREE_PURPOSE (declspec_stack));	\
    declspec_stack = TREE_CHAIN (declspec_stack);			\
  } while (0)

/* For __extension__, save/restore the warning flags which are
   controlled by __extension__.  */
#define SAVE_EXT_FLAGS()			\
	size_int (pedantic			\
		  | (warn_pointer_arith << 1)	\
		  | (warn_traditional << 2)	\
		  | (flag_iso << 3))

#define RESTORE_EXT_FLAGS(tval)			\
  do {						\
    int val = tree_low_cst (tval, 0);		\
    pedantic = val & 1;				\
    warn_pointer_arith = (val >> 1) & 1;	\
    warn_traditional = (val >> 2) & 1;		\
    flag_iso = (val >> 3) & 1;			\
  } while (0)


#define OBJC_NEED_RAW_IDENTIFIER(VAL)	/* nothing */

static bool parsing_iso_function_signature;

static bool In_MP_Region = false;
static bool In_MP_Section = false;
#define MAX_MP_NESTING 10
static GTY(()) tree mp_locals[MAX_MP_NESTING];
static int mp_nesting = -1;
extern bool Is_shared_mp_var (tree);

/* Tell yyparse how to print a token's value, if yydebug is set.  */

#define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)

static void yyprint	  PARAMS ((FILE *, int, YYSTYPE));
static void yyerror	  PARAMS ((const char *));
static int yylexname	  PARAMS ((void));
static int yylexstring	  PARAMS ((void));
static inline int _yylex  PARAMS ((void));
static int  yylex	  PARAMS ((void));
static void init_reswords PARAMS ((void));

  /* Initialisation routine for this file.  */
void
c_parse_init ()
{
  init_reswords ();
}



/* Line 214 of yacc.c.  */
#line 458 "c-parse.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC malloc
# endif

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   define YYSTACK_ALLOC alloca
#  endif
# else
#  if defined (alloca) || defined (_ALLOCA_H)
#   define YYSTACK_ALLOC alloca
#  else
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  4
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   3860

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  123
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  271
/* YYNRULES -- Number of rules. */
#define YYNRULES  721
/* YYNRULES -- Number of states. */
#define YYNSTATES  1261

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   354

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     122,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   118,     2,     2,     2,    92,    83,     2,
      98,   114,    90,    88,   119,    89,    97,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    78,   115,
       2,    75,     2,    77,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    99,     2,   121,    82,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   120,    81,   116,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      76,    79,    80,    84,    85,    86,    87,    93,    94,    95,
      96,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     4,     6,     7,    10,    11,    15,    17,
      19,    21,    27,    30,    32,    34,    38,    43,    48,    51,
      54,    57,    59,    60,    61,    71,    76,    77,    78,    88,
      93,    94,    95,   104,   108,   110,   112,   114,   116,   118,
     120,   122,   124,   126,   128,   129,   131,   133,   137,   139,
     142,   145,   148,   151,   154,   159,   162,   167,   170,   173,
     175,   177,   179,   181,   186,   188,   192,   196,   200,   204,
     208,   212,   216,   220,   224,   228,   232,   236,   237,   242,
     243,   248,   249,   250,   258,   259,   265,   269,   273,   275,
     277,   279,   281,   282,   290,   294,   298,   302,   306,   311,
     318,   327,   334,   339,   343,   347,   350,   353,   355,   356,
     358,   362,   364,   366,   369,   372,   377,   382,   385,   388,
     392,   393,   395,   400,   405,   409,   413,   416,   419,   421,
     424,   427,   430,   433,   436,   438,   441,   443,   446,   449,
     452,   455,   458,   461,   463,   466,   469,   472,   475,   478,
     481,   484,   487,   490,   493,   496,   499,   502,   505,   508,
     511,   513,   516,   519,   522,   525,   528,   531,   534,   537,
     540,   543,   546,   549,   552,   555,   558,   561,   564,   567,
     570,   573,   576,   579,   582,   585,   588,   591,   594,   597,
     600,   603,   606,   609,   612,   615,   618,   621,   624,   627,
     630,   633,   636,   639,   642,   645,   647,   649,   651,   653,
     655,   657,   659,   661,   663,   665,   667,   669,   671,   673,
     675,   677,   679,   681,   683,   685,   687,   689,   691,   693,
     695,   697,   699,   701,   703,   705,   707,   709,   711,   713,
     715,   717,   719,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   751,   753,
     755,   757,   758,   760,   762,   764,   766,   768,   770,   772,
     774,   779,   784,   786,   791,   793,   798,   799,   804,   805,
     812,   816,   817,   824,   828,   829,   831,   833,   836,   843,
     845,   849,   850,   852,   857,   864,   869,   871,   873,   875,
     877,   879,   881,   883,   884,   889,   891,   892,   895,   897,
     901,   905,   908,   909,   914,   916,   917,   922,   924,   926,
     928,   931,   934,   940,   944,   945,   946,   954,   955,   956,
     964,   966,   968,   973,   977,   980,   984,   986,   988,   990,
     994,   997,   999,  1003,  1006,  1010,  1014,  1019,  1023,  1028,
    1032,  1035,  1037,  1039,  1042,  1044,  1047,  1049,  1052,  1053,
    1061,  1067,  1068,  1076,  1082,  1083,  1092,  1093,  1101,  1104,
    1107,  1110,  1111,  1113,  1114,  1116,  1118,  1121,  1122,  1126,
    1129,  1133,  1138,  1142,  1144,  1146,  1149,  1151,  1156,  1158,
    1163,  1168,  1175,  1181,  1186,  1193,  1199,  1201,  1205,  1207,
    1209,  1213,  1214,  1218,  1219,  1221,  1222,  1224,  1227,  1229,
    1231,  1233,  1237,  1240,  1244,  1249,  1253,  1256,  1259,  1261,
    1266,  1270,  1275,  1281,  1287,  1289,  1291,  1293,  1295,  1297,
    1300,  1303,  1306,  1309,  1311,  1314,  1317,  1320,  1322,  1325,
    1328,  1331,  1334,  1336,  1339,  1341,  1343,  1345,  1347,  1350,
    1351,  1352,  1353,  1354,  1355,  1357,  1359,  1362,  1366,  1368,
    1371,  1373,  1375,  1381,  1383,  1385,  1388,  1391,  1394,  1397,
    1398,  1404,  1405,  1410,  1411,  1412,  1414,  1417,  1421,  1425,
    1429,  1430,  1435,  1437,  1441,  1442,  1443,  1451,  1457,  1460,
    1461,  1462,  1463,  1464,  1477,  1478,  1485,  1488,  1490,  1492,
    1494,  1496,  1498,  1500,  1502,  1504,  1506,  1508,  1510,  1512,
    1514,  1516,  1518,  1520,  1524,  1529,  1531,  1533,  1535,  1539,
    1541,  1543,  1545,  1547,  1548,  1552,  1556,  1561,  1563,  1566,
    1571,  1576,  1581,  1586,  1591,  1596,  1601,  1608,  1613,  1614,
    1618,  1619,  1620,  1621,  1622,  1635,  1639,  1644,  1646,  1649,
    1654,  1659,  1664,  1671,  1676,  1683,  1685,  1687,  1689,  1691,
    1693,  1695,  1696,  1700,  1704,  1709,  1711,  1714,  1719,  1724,
    1729,  1736,  1738,  1739,  1744,  1746,  1748,  1751,  1753,  1755,
    1758,  1759,  1763,  1767,  1768,  1772,  1776,  1781,  1783,  1786,
    1791,  1796,  1801,  1803,  1804,  1808,  1813,  1819,  1821,  1824,
    1829,  1834,  1839,  1844,  1849,  1854,  1859,  1864,  1869,  1876,
    1881,  1886,  1893,  1895,  1896,  1900,  1905,  1911,  1913,  1916,
    1921,  1926,  1931,  1936,  1941,  1946,  1951,  1956,  1961,  1968,
    1973,  1974,  1978,  1982,  1983,  1987,  1991,  1998,  2000,  2004,
    2008,  2012,  2016,  2023,  2024,  2028,  2032,  2039,  2041,  2043,
    2045,  2047,  2049,  2051,  2053,  2055,  2057,  2061,  2063,  2065,
    2067,  2070,  2074,  2077,  2080,  2083,  2087,  2094,  2103,  2114,
    2127,  2131,  2136,  2138,  2142,  2148,  2151,  2157,  2158,  2160,
    2161,  2163,  2164,  2166,  2168,  2172,  2177,  2185,  2187,  2191,
    2192,  2196,  2199,  2200,  2201,  2208,  2211,  2212,  2214,  2216,
    2220,  2222,  2226,  2231,  2236,  2240,  2245,  2249,  2254,  2259,
    2263,  2268,  2272,  2274,  2275,  2279,  2281,  2284,  2286,  2290,
    2292,  2296
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     124,     0,    -1,    -1,   125,    -1,    -1,   126,   128,    -1,
      -1,   125,   127,   128,    -1,   129,    -1,   131,    -1,   130,
      -1,    59,    98,   140,   114,   115,    -1,   393,   128,    -1,
     367,    -1,   304,    -1,   162,   196,   115,    -1,   182,   162,
     196,   115,    -1,   181,   162,   195,   115,    -1,   188,   115,
      -1,     1,   115,    -1,     1,   116,    -1,   115,    -1,    -1,
      -1,   181,   162,   225,   132,   156,   133,   285,   286,   274,
      -1,   181,   162,   225,     1,    -1,    -1,    -1,   182,   162,
     230,   134,   156,   135,   285,   286,   274,    -1,   182,   162,
     230,     1,    -1,    -1,    -1,   162,   230,   136,   156,   137,
     285,   286,   274,    -1,   162,   230,     1,    -1,     3,    -1,
       4,    -1,    83,    -1,    89,    -1,    88,    -1,    94,    -1,
      93,    -1,   117,    -1,   118,    -1,   142,    -1,    -1,   142,
      -1,   148,    -1,   142,   119,   148,    -1,   154,    -1,    90,
     147,    -1,   393,   147,    -1,   139,   147,    -1,    80,   138,
      -1,   144,   143,    -1,   144,    98,   251,   114,    -1,   145,
     143,    -1,   145,    98,   251,   114,    -1,    65,   147,    -1,
      66,   147,    -1,    44,    -1,    61,    -1,    60,    -1,   143,
      -1,    98,   251,   114,   147,    -1,   147,    -1,   148,    88,
     148,    -1,   148,    89,   148,    -1,   148,    90,   148,    -1,
     148,    91,   148,    -1,   148,    92,   148,    -1,   148,    87,
     148,    -1,   148,    86,   148,    -1,   148,    85,   148,    -1,
     148,    84,   148,    -1,   148,    83,   148,    -1,   148,    81,
     148,    -1,   148,    82,   148,    -1,    -1,   148,    80,   149,
     148,    -1,    -1,   148,    79,   150,   148,    -1,    -1,    -1,
     148,    77,   151,   140,    78,   152,   148,    -1,    -1,   148,
      77,   153,    78,   148,    -1,   148,    75,   148,    -1,   148,
      76,   148,    -1,     3,    -1,     9,    -1,    10,    -1,    74,
      -1,    -1,    98,   251,   114,   120,   155,   211,   116,    -1,
      98,   140,   114,    -1,    98,     1,   114,    -1,   278,   276,
     114,    -1,   278,     1,   114,    -1,   154,    98,   141,   114,
      -1,    67,    98,   148,   119,   251,   114,    -1,    68,    98,
     148,   119,   148,   119,   148,   114,    -1,    69,    98,   251,
     119,   251,   114,    -1,   154,    99,   140,   121,    -1,   154,
      97,   138,    -1,   154,   100,   138,    -1,   154,    94,    -1,
     154,    93,    -1,   157,    -1,    -1,   159,    -1,   285,   286,
     160,    -1,   158,    -1,   266,    -1,   159,   158,    -1,   158,
     266,    -1,   183,   162,   195,   115,    -1,   184,   162,   196,
     115,    -1,   183,   115,    -1,   184,   115,    -1,   285,   286,
     164,    -1,    -1,   202,    -1,   181,   162,   195,   115,    -1,
     182,   162,   196,   115,    -1,   181,   162,   219,    -1,   182,
     162,   222,    -1,   188,   115,    -1,   393,   164,    -1,     8,
      -1,   165,     8,    -1,   166,     8,    -1,   165,   203,    -1,
     167,     8,    -1,   168,     8,    -1,   203,    -1,   167,   203,
      -1,   190,    -1,   169,     8,    -1,   170,     8,    -1,   169,
     192,    -1,   170,   192,    -1,   165,   190,    -1,   166,   190,
      -1,   191,    -1,   169,   203,    -1,   169,   193,    -1,   170,
     193,    -1,   165,   191,    -1,   166,   191,    -1,   171,     8,
      -1,   172,     8,    -1,   171,   192,    -1,   172,   192,    -1,
     167,   190,    -1,   168,   190,    -1,   171,   203,    -1,   171,
     193,    -1,   172,   193,    -1,   167,   191,    -1,   168,   191,
      -1,   208,    -1,   173,     8,    -1,   174,     8,    -1,   165,
     208,    -1,   166,   208,    -1,   173,   208,    -1,   174,   208,
      -1,   173,   203,    -1,   175,     8,    -1,   176,     8,    -1,
     167,   208,    -1,   168,   208,    -1,   175,   208,    -1,   176,
     208,    -1,   175,   203,    -1,   177,     8,    -1,   178,     8,
      -1,   177,   192,    -1,   178,   192,    -1,   173,   190,    -1,
     174,   190,    -1,   169,   208,    -1,   170,   208,    -1,   177,
     208,    -1,   178,   208,    -1,   177,   203,    -1,   177,   193,
      -1,   178,   193,    -1,   173,   191,    -1,   174,   191,    -1,
     179,     8,    -1,   180,     8,    -1,   179,   192,    -1,   180,
     192,    -1,   175,   190,    -1,   176,   190,    -1,   171,   208,
      -1,   172,   208,    -1,   179,   208,    -1,   180,   208,    -1,
     179,   203,    -1,   179,   193,    -1,   180,   193,    -1,   175,
     191,    -1,   176,   191,    -1,   169,    -1,   170,    -1,   171,
      -1,   172,    -1,   177,    -1,   178,    -1,   179,    -1,   180,
      -1,   165,    -1,   166,    -1,   167,    -1,   168,    -1,   173,
      -1,   174,    -1,   175,    -1,   176,    -1,   169,    -1,   170,
      -1,   177,    -1,   178,    -1,   165,    -1,   166,    -1,   173,
      -1,   174,    -1,   169,    -1,   170,    -1,   171,    -1,   172,
      -1,   165,    -1,   166,    -1,   167,    -1,   168,    -1,   169,
      -1,   170,    -1,   171,    -1,   172,    -1,   165,    -1,   166,
      -1,   167,    -1,   168,    -1,   165,    -1,   166,    -1,   167,
      -1,   168,    -1,   169,    -1,   170,    -1,   171,    -1,   172,
      -1,   173,    -1,   174,    -1,   175,    -1,   176,    -1,   177,
      -1,   178,    -1,   179,    -1,   180,    -1,    -1,   186,    -1,
     192,    -1,   194,    -1,   193,    -1,     7,    -1,   239,    -1,
     234,    -1,     4,    -1,   146,    98,   140,   114,    -1,   146,
      98,   251,   114,    -1,   198,    -1,   195,   119,   163,   198,
      -1,   200,    -1,   196,   119,   163,   200,    -1,    -1,    59,
      98,    10,   114,    -1,    -1,   225,   197,   202,    75,   199,
     209,    -1,   225,   197,   202,    -1,    -1,   230,   197,   202,
      75,   201,   209,    -1,   230,   197,   202,    -1,    -1,   203,
      -1,   204,    -1,   203,   204,    -1,    62,    98,    98,   205,
     114,   114,    -1,   206,    -1,   205,   119,   206,    -1,    -1,
     207,    -1,   207,    98,     3,   114,    -1,   207,    98,     3,
     119,   142,   114,    -1,   207,    98,   141,   114,    -1,   138,
      -1,   208,    -1,     7,    -1,     8,    -1,     6,    -1,     5,
      -1,   148,    -1,    -1,   120,   210,   211,   116,    -1,     1,
      -1,    -1,   212,   240,    -1,   213,    -1,   212,   119,   213,
      -1,   217,    75,   215,    -1,   218,   215,    -1,    -1,   138,
      78,   214,   215,    -1,   215,    -1,    -1,   120,   216,   211,
     116,    -1,   148,    -1,     1,    -1,   218,    -1,   217,   218,
      -1,    97,   138,    -1,    99,   148,    11,   148,   121,    -1,
      99,   148,   121,    -1,    -1,    -1,   225,   220,   156,   221,
     285,   286,   279,    -1,    -1,    -1,   230,   223,   156,   224,
     285,   286,   279,    -1,   226,    -1,   230,    -1,    98,   202,
     226,   114,    -1,   226,    98,   388,    -1,   226,   259,    -1,
      90,   189,   226,    -1,     4,    -1,   228,    -1,   229,    -1,
     228,    98,   388,    -1,   228,   259,    -1,     4,    -1,   229,
      98,   388,    -1,   229,   259,    -1,    90,   189,   228,    -1,
      90,   189,   229,    -1,    98,   202,   229,   114,    -1,   230,
      98,   388,    -1,    98,   202,   230,   114,    -1,    90,   189,
     230,    -1,   230,   259,    -1,     3,    -1,    46,    -1,    46,
     203,    -1,    47,    -1,    47,   203,    -1,    45,    -1,    45,
     203,    -1,    -1,   231,   138,   120,   235,   242,   116,   202,
      -1,   231,   120,   242,   116,   202,    -1,    -1,   232,   138,
     120,   236,   242,   116,   202,    -1,   232,   120,   242,   116,
     202,    -1,    -1,   233,   138,   120,   237,   249,   241,   116,
     202,    -1,    -1,   233,   120,   238,   249,   241,   116,   202,
      -1,   231,   138,    -1,   232,   138,    -1,   233,   138,    -1,
      -1,   119,    -1,    -1,   119,    -1,   243,    -1,   243,   244,
      -1,    -1,   243,   244,   115,    -1,   243,   115,    -1,   185,
     162,   245,    -1,   185,   162,   285,   286,    -1,   186,   162,
     246,    -1,   186,    -1,     1,    -1,   393,   244,    -1,   247,
      -1,   245,   119,   163,   247,    -1,   248,    -1,   246,   119,
     163,   248,    -1,   285,   286,   225,   202,    -1,   285,   286,
     225,    78,   148,   202,    -1,   285,   286,    78,   148,   202,
      -1,   285,   286,   230,   202,    -1,   285,   286,   230,    78,
     148,   202,    -1,   285,   286,    78,   148,   202,    -1,   250,
      -1,   249,   119,   250,    -1,     1,    -1,   138,    -1,   138,
      75,   148,    -1,    -1,   187,   252,   253,    -1,    -1,   255,
      -1,    -1,   255,    -1,   256,   203,    -1,   257,    -1,   256,
      -1,   258,    -1,    90,   189,   256,    -1,    90,   189,    -1,
      90,   189,   257,    -1,    98,   202,   255,   114,    -1,   258,
      98,   378,    -1,   258,   259,    -1,    98,   378,    -1,   259,
      -1,    99,   189,   140,   121,    -1,    99,   189,   121,    -1,
      99,   189,    90,   121,    -1,    99,     6,   189,   140,   121,
      -1,    99,   186,     6,   140,   121,    -1,   261,    -1,   262,
      -1,   263,    -1,   264,    -1,   289,    -1,   261,   289,    -1,
     262,   289,    -1,   263,   289,    -1,   264,   289,    -1,   161,
      -1,   261,   161,    -1,   262,   161,    -1,   264,   161,    -1,
     290,    -1,   261,   290,    -1,   262,   290,    -1,   263,   290,
      -1,   264,   290,    -1,   266,    -1,   265,   266,    -1,   261,
      -1,   262,    -1,   263,    -1,   264,    -1,     1,   115,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,   273,    -1,   272,
     273,    -1,    64,   392,   115,    -1,   279,    -1,     1,   279,
      -1,   120,    -1,   116,    -1,   267,   271,   277,   116,   268,
      -1,   260,    -1,     1,    -1,    98,   120,    -1,   275,   276,
      -1,   281,   288,    -1,   281,     1,    -1,    -1,    48,   282,
      98,   140,   114,    -1,    -1,    51,   284,   288,    50,    -1,
      -1,    -1,   289,    -1,   290,   287,    -1,   269,   287,   270,
      -1,   285,   286,   370,    -1,   285,   286,   371,    -1,    -1,
     280,    49,   292,   288,    -1,   280,    -1,   280,    49,     1,
      -1,    -1,    -1,    50,   293,    98,   140,   114,   294,   288,
      -1,   283,    98,   140,   114,   115,    -1,   283,     1,    -1,
      -1,    -1,    -1,    -1,    52,   295,    98,   300,   296,   373,
     115,   297,   373,   114,   298,   288,    -1,    -1,    53,    98,
     140,   114,   299,   288,    -1,   373,   115,    -1,   164,    -1,
     309,    -1,   314,    -1,   325,    -1,   338,    -1,   343,    -1,
     348,    -1,   353,    -1,   356,    -1,   361,    -1,   364,    -1,
     360,    -1,   363,    -1,   367,    -1,   303,    -1,   306,    -1,
      12,    10,   122,    -1,    13,   305,     3,   122,    -1,    14,
      -1,    15,    -1,    16,    -1,    13,   307,   122,    -1,    14,
      -1,    15,    -1,    16,    -1,   370,    -1,    -1,   311,   310,
     308,    -1,    32,    33,   122,    -1,    32,    33,   312,   122,
      -1,   313,    -1,   312,   313,    -1,    48,    98,   148,   114,
      -1,    34,    98,   148,   114,    -1,    17,    98,   369,   114,
      -1,    19,    98,   369,   114,    -1,    21,    98,   369,   114,
      -1,    22,    98,    21,   114,    -1,    22,    98,    23,   114,
      -1,    24,    98,   368,    78,   369,   114,    -1,    25,    98,
     369,   114,    -1,    -1,   321,   315,   316,    -1,    -1,    -1,
      -1,    -1,    52,   317,    98,   300,   318,   373,   115,   319,
     373,   114,   320,   288,    -1,    32,    52,   122,    -1,    32,
      52,   322,   122,    -1,   323,    -1,   322,   323,    -1,    17,
      98,   369,   114,    -1,    19,    98,   369,   114,    -1,    20,
      98,   369,   114,    -1,    24,    98,   368,    78,   369,   114,
      -1,    30,    98,   324,   114,    -1,    30,    98,   324,   119,
     148,   114,    -1,    29,    -1,    31,    -1,     6,    -1,    26,
      -1,    27,    -1,    28,    -1,    -1,   327,   326,   330,    -1,
      32,    35,   122,    -1,    32,    35,   328,   122,    -1,   329,
      -1,   328,   329,    -1,    17,    98,   369,   114,    -1,    19,
      98,   369,   114,    -1,    20,    98,   369,   114,    -1,    24,
      98,   368,    78,   369,   114,    -1,    31,    -1,    -1,   120,
     331,   332,   116,    -1,   334,    -1,   333,    -1,   333,   334,
      -1,   308,    -1,   335,    -1,   334,   335,    -1,    -1,   337,
     336,   308,    -1,    32,    36,   122,    -1,    -1,   340,   339,
     308,    -1,    32,    37,   122,    -1,    32,    37,   341,   122,
      -1,   342,    -1,   341,   342,    -1,    17,    98,   369,   114,
      -1,    19,    98,   369,   114,    -1,    18,    98,   369,   114,
      -1,    31,    -1,    -1,   345,   344,   316,    -1,    32,    33,
      52,   122,    -1,    32,    33,    52,   346,   122,    -1,   347,
      -1,   346,   347,    -1,    48,    98,   148,   114,    -1,    34,
      98,   148,   114,    -1,    17,    98,   369,   114,    -1,    18,
      98,   369,   114,    -1,    19,    98,   369,   114,    -1,    20,
      98,   369,   114,    -1,    21,    98,   369,   114,    -1,    22,
      98,    21,   114,    -1,    22,    98,    23,   114,    -1,    24,
      98,   368,    78,   369,   114,    -1,    25,    98,   369,   114,
      -1,    30,    98,   324,   114,    -1,    30,    98,   324,   119,
     148,   114,    -1,    29,    -1,    -1,   350,   349,   330,    -1,
      32,    33,    35,   122,    -1,    32,    33,    35,   351,   122,
      -1,   352,    -1,   351,   352,    -1,    48,    98,   148,   114,
      -1,    34,    98,   148,   114,    -1,    17,    98,   369,   114,
      -1,    18,    98,   369,   114,    -1,    19,    98,   369,   114,
      -1,    20,    98,   369,   114,    -1,    21,    98,   369,   114,
      -1,    22,    98,    21,   114,    -1,    22,    98,    23,   114,
      -1,    24,    98,   368,    78,   369,   114,    -1,    25,    98,
     369,   114,    -1,    -1,   355,   354,   308,    -1,    32,    38,
     122,    -1,    -1,   358,   357,   308,    -1,    32,    39,   122,
      -1,    32,    39,    98,   359,   114,   122,    -1,     3,    -1,
      32,    40,   122,    -1,   362,   148,   115,    -1,    32,    41,
     122,    -1,    32,    42,   122,    -1,    32,    42,    98,   369,
     114,   122,    -1,    -1,   366,   365,   308,    -1,    32,    29,
     122,    -1,    32,    43,    98,   369,   114,   122,    -1,    88,
      -1,    90,    -1,    89,    -1,    83,    -1,    82,    -1,    81,
      -1,    80,    -1,    79,    -1,     3,    -1,   369,   119,     3,
      -1,   302,    -1,   301,    -1,   279,    -1,   140,   115,    -1,
     269,   291,   270,    -1,    55,   115,    -1,    56,   115,    -1,
      57,   115,    -1,    57,   140,   115,    -1,    59,   372,    98,
     140,   114,   115,    -1,    59,   372,    98,   140,    78,   374,
     114,   115,    -1,    59,   372,    98,   140,    78,   374,    78,
     374,   114,   115,    -1,    59,   372,    98,   140,    78,   374,
      78,   374,    78,   377,   114,   115,    -1,    58,   138,   115,
      -1,    58,    90,   140,   115,    -1,   115,    -1,    54,   148,
      78,    -1,    54,   148,    11,   148,    78,    -1,    22,    78,
      -1,   138,   285,   286,    78,   202,    -1,    -1,     8,    -1,
      -1,   140,    -1,    -1,   375,    -1,   376,    -1,   375,   119,
     376,    -1,    10,    98,   140,   114,    -1,    99,   138,   121,
      10,    98,   140,   114,    -1,    10,    -1,   377,   119,    10,
      -1,    -1,   202,   379,   380,    -1,   383,   114,    -1,    -1,
      -1,   384,   115,   381,   202,   382,   380,    -1,     1,   114,
      -1,    -1,    11,    -1,   384,    -1,   384,   119,    11,    -1,
     386,    -1,   384,   119,   385,    -1,   181,   162,   227,   202,
      -1,   181,   162,   230,   202,    -1,   181,   162,   254,    -1,
     182,   162,   230,   202,    -1,   182,   162,   254,    -1,   183,
     387,   227,   202,    -1,   183,   387,   230,   202,    -1,   183,
     387,   254,    -1,   184,   387,   230,   202,    -1,   184,   387,
     254,    -1,   162,    -1,    -1,   202,   389,   390,    -1,   380,
      -1,   391,   114,    -1,     3,    -1,   391,   119,     3,    -1,
     138,    -1,   392,   119,   138,    -1,    63,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   378,   378,   382,   401,   401,   402,   402,   406,   411,
     412,   413,   421,   423,   424,   429,   436,   438,   440,   442,
     443,   444,   451,   456,   450,   462,   465,   470,   464,   476,
     479,   484,   478,   490,   495,   496,   499,   501,   503,   508,
     510,   512,   514,   518,   524,   525,   529,   531,   536,   537,
     540,   543,   547,   549,   555,   558,   561,   564,   566,   571,
     575,   579,   583,   584,   589,   590,   592,   594,   596,   598,
     600,   602,   604,   606,   608,   610,   612,   615,   614,   622,
     621,   629,   633,   628,   639,   638,   649,   656,   668,   674,
     675,   677,   680,   679,   692,   697,   699,   715,   722,   724,
     727,   737,   747,   749,   753,   759,   761,   767,   775,   781,
     788,   793,   794,   795,   796,   804,   806,   808,   811,   820,
     829,   839,   844,   846,   848,   850,   852,   854,   911,   914,
     917,   923,   929,   932,   938,   941,   947,   950,   953,   956,
     959,   962,   965,   971,   974,   977,   980,   983,   986,   992,
     995,   998,  1001,  1004,  1007,  1013,  1016,  1019,  1022,  1025,
    1031,  1034,  1037,  1040,  1046,  1052,  1058,  1067,  1073,  1076,
    1079,  1085,  1091,  1097,  1106,  1112,  1115,  1118,  1121,  1124,
    1127,  1130,  1136,  1142,  1148,  1157,  1160,  1163,  1166,  1169,
    1175,  1178,  1181,  1184,  1187,  1190,  1193,  1199,  1205,  1211,
    1220,  1223,  1226,  1229,  1232,  1239,  1240,  1241,  1242,  1243,
    1244,  1245,  1246,  1250,  1251,  1252,  1253,  1254,  1255,  1256,
    1257,  1261,  1262,  1263,  1264,  1268,  1269,  1270,  1271,  1275,
    1276,  1277,  1278,  1282,  1283,  1284,  1285,  1289,  1290,  1291,
    1292,  1293,  1294,  1295,  1296,  1300,  1301,  1302,  1303,  1304,
    1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,
    1315,  1321,  1322,  1348,  1349,  1353,  1357,  1359,  1363,  1367,
    1371,  1373,  1380,  1381,  1385,  1386,  1391,  1392,  1398,  1397,
    1408,  1419,  1418,  1429,  1441,  1442,  1447,  1449,  1454,  1459,
    1461,  1467,  1468,  1470,  1472,  1474,  1482,  1483,  1484,  1485,
    1489,  1490,  1496,  1498,  1497,  1501,  1508,  1510,  1514,  1515,
    1521,  1524,  1528,  1527,  1533,  1538,  1537,  1541,  1543,  1547,
    1548,  1552,  1554,  1558,  1564,  1577,  1563,  1595,  1608,  1594,
    1628,  1629,  1635,  1637,  1642,  1644,  1646,  1654,  1655,  1659,
    1664,  1666,  1670,  1675,  1677,  1679,  1681,  1689,  1694,  1696,
    1698,  1700,  1704,  1706,  1711,  1713,  1718,  1720,  1732,  1731,
    1737,  1742,  1741,  1745,  1750,  1749,  1755,  1754,  1762,  1764,
    1766,  1774,  1776,  1779,  1781,  1787,  1789,  1795,  1796,  1798,
    1804,  1807,  1817,  1820,  1825,  1827,  1833,  1834,  1839,  1840,
    1845,  1848,  1852,  1858,  1861,  1865,  1876,  1877,  1882,  1888,
    1890,  1896,  1895,  1904,  1905,  1910,  1913,  1917,  1924,  1925,
    1929,  1930,  1935,  1937,  1942,  1944,  1946,  1948,  1950,  1957,
    1959,  1961,  1963,  1966,  1977,  1978,  1979,  1983,  1987,  1988,
    1989,  1990,  1991,  1995,  1996,  2002,  2003,  2007,  2008,  2009,
    2010,  2011,  2015,  2016,  2020,  2021,  2022,  2023,  2026,  2030,
    2037,  2042,  2058,  2072,  2074,  2080,  2081,  2085,  2099,  2101,
    2104,  2108,  2110,  2118,  2119,  2123,  2140,  2148,  2153,  2166,
    2165,  2180,  2179,  2199,  2205,  2211,  2212,  2217,  2223,  2237,
    2247,  2246,  2254,  2266,  2277,  2280,  2276,  2286,  2289,  2292,
    2296,  2299,  2303,  2291,  2307,  2306,  2314,  2316,  2323,  2324,
    2325,  2326,  2327,  2328,  2329,  2330,  2331,  2332,  2336,  2337,
    2338,  2340,  2341,  2345,  2351,  2356,  2356,  2356,  2360,  2365,
    2366,  2367,  2371,  2376,  2375,  2406,  2408,  2413,  2415,  2420,
    2422,  2424,  2426,  2428,  2430,  2432,  2434,  2436,  2442,  2441,
    2454,  2459,  2462,  2466,  2453,  2472,  2474,  2479,  2481,  2486,
    2488,  2490,  2492,  2494,  2496,  2498,  2500,  2505,  2511,  2513,
    2515,  2522,  2521,  2531,  2533,  2538,  2540,  2545,  2547,  2549,
    2551,  2553,  2560,  2559,  2568,  2569,  2570,  2574,  2582,  2583,
    2588,  2587,  2601,  2606,  2605,  2615,  2617,  2622,  2624,  2629,
    2631,  2633,  2635,  2641,  2640,  2671,  2673,  2678,  2680,  2685,
    2687,  2689,  2691,  2693,  2695,  2697,  2699,  2701,  2703,  2705,
    2707,  2709,  2711,  2717,  2716,  2747,  2749,  2754,  2756,  2761,
    2763,  2765,  2767,  2769,  2771,  2773,  2775,  2777,  2779,  2781,
    2787,  2786,  2793,  2798,  2797,  2804,  2806,  2811,  2816,  2821,
    2829,  2833,  2836,  2842,  2841,  2848,  2852,  2857,  2859,  2861,
    2863,  2865,  2867,  2869,  2871,  2876,  2882,  2895,  2896,  2897,
    2899,  2902,  2906,  2909,  2912,  2915,  2918,  2922,  2926,  2931,
    2935,  2947,  2953,  2961,  2964,  2967,  2970,  2987,  2989,  2995,
    2996,  3002,  3003,  3007,  3008,  3013,  3015,  3022,  3024,  3035,
    3034,  3045,  3047,  3055,  3046,  3059,  3066,  3067,  3077,  3081,
    3086,  3088,  3095,  3100,  3105,  3108,  3114,  3122,  3127,  3132,
    3135,  3141,  3147,  3157,  3156,  3167,  3168,  3186,  3188,  3194,
    3196,  3201
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "TYPENAME", "SCSPEC",
  "STATIC", "TYPESPEC", "TYPE_QUAL", "CONSTANT", "STRING", "ELLIPSIS",
  "PRAGMA_OPTIONS", "PRAGMA_EXEC_FREQ", "FREQ_NEVER", "FREQ_INIT",
  "FREQ_FREQUENT", "PRIVATE", "COPYPRIVATE", "FIRSTPRIVATE", "LASTPRIVATE",
  "SHARED", "DEFAULT", "NONE", "REDUCTION", "COPYIN", "DYNAMIC", "GUIDED",
  "RUNTIME", "ORDERED", "SCHEDULE", "NOWAIT", "PRAGMA_OMP", "PARALLEL",
  "NUM_THREADS", "SECTIONS", "SECTION", "SINGLE", "MASTER", "CRITICAL",
  "BARRIER", "ATOMIC", "FLUSH", "THREADPRIVATE", "SIZEOF", "ENUM",
  "STRUCT", "UNION", "IF", "ELSE", "WHILE", "DO", "FOR", "SWITCH", "CASE",
  "BREAK", "CONTINUE", "RETURN", "GOTO", "ASM_KEYWORD", "TYPEOF",
  "ALIGNOF", "ATTRIBUTE", "EXTENSION", "LABEL", "REALPART", "IMAGPART",
  "VA_ARG", "CHOOSE_EXPR", "TYPES_COMPATIBLE_P", "PTR_VALUE", "PTR_BASE",
  "PTR_EXTENT", "STRING_FUNC_NAME", "VAR_FUNC_NAME", "'='", "ASSIGN",
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQCOMPARE",
  "ARITHCOMPARE", "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'",
  "MINUSMINUS", "PLUSPLUS", "UNARY", "HYPERUNARY", "'.'", "'('", "'['",
  "POINTSAT", "INTERFACE", "IMPLEMENTATION", "END", "SELECTOR", "DEFS",
  "ENCODE", "CLASSNAME", "PUBLIC", "PROTECTED", "PROTOCOL", "OBJECTNAME",
  "CLASS", "ALIAS", "')'", "';'", "'}'", "'~'", "'!'", "','", "'{'", "']'",
  "'\\n'", "$accept", "program", "extdefs", "@1", "@2", "extdef",
  "extdef_1", "datadef", "fndef", "@3", "@4", "@5", "@6", "@7", "@8",
  "identifier", "unop", "expr", "exprlist", "nonnull_exprlist",
  "unary_expr", "sizeof", "alignof", "typeof", "cast_expr",
  "expr_no_commas", "@9", "@10", "@11", "@12", "@13", "primary", "@14",
  "old_style_parm_decls", "old_style_parm_decls_1", "lineno_datadecl",
  "datadecls", "datadecl", "lineno_decl", "setspecs", "maybe_resetattrs",
  "decl", "declspecs_nosc_nots_nosa_noea", "declspecs_nosc_nots_nosa_ea",
  "declspecs_nosc_nots_sa_noea", "declspecs_nosc_nots_sa_ea",
  "declspecs_nosc_ts_nosa_noea", "declspecs_nosc_ts_nosa_ea",
  "declspecs_nosc_ts_sa_noea", "declspecs_nosc_ts_sa_ea",
  "declspecs_sc_nots_nosa_noea", "declspecs_sc_nots_nosa_ea",
  "declspecs_sc_nots_sa_noea", "declspecs_sc_nots_sa_ea",
  "declspecs_sc_ts_nosa_noea", "declspecs_sc_ts_nosa_ea",
  "declspecs_sc_ts_sa_noea", "declspecs_sc_ts_sa_ea", "declspecs_ts",
  "declspecs_nots", "declspecs_ts_nosa", "declspecs_nots_nosa",
  "declspecs_nosc_ts", "declspecs_nosc_nots", "declspecs_nosc",
  "declspecs", "maybe_type_quals_attrs", "typespec_nonattr",
  "typespec_attr", "typespec_reserved_nonattr", "typespec_reserved_attr",
  "typespec_nonreserved_nonattr", "initdecls", "notype_initdecls",
  "maybeasm", "initdcl", "@15", "notype_initdcl", "@16", "maybe_attribute",
  "attributes", "attribute", "attribute_list", "attrib", "any_word",
  "scspec", "init", "@17", "initlist_maybe_comma", "initlist1", "initelt",
  "@18", "initval", "@19", "designator_list", "designator",
  "nested_function", "@20", "@21", "notype_nested_function", "@22", "@23",
  "declarator", "after_type_declarator", "parm_declarator",
  "parm_declarator_starttypename", "parm_declarator_nostarttypename",
  "notype_declarator", "struct_head", "union_head", "enum_head",
  "structsp_attr", "@24", "@25", "@26", "@27", "structsp_nonattr",
  "maybecomma", "maybecomma_warn", "component_decl_list",
  "component_decl_list2", "component_decl", "components",
  "components_notype", "component_declarator",
  "component_notype_declarator", "enumlist", "enumerator", "typename",
  "@28", "absdcl", "absdcl_maybe_attribute", "absdcl1", "absdcl1_noea",
  "absdcl1_ea", "direct_absdcl1", "array_declarator", "stmts_and_decls",
  "lineno_stmt_decl_or_labels_ending_stmt",
  "lineno_stmt_decl_or_labels_ending_decl",
  "lineno_stmt_decl_or_labels_ending_label",
  "lineno_stmt_decl_or_labels_ending_error", "lineno_stmt_decl_or_labels",
  "errstmt", "pushlevel", "poplevel", "c99_block_start", "c99_block_end",
  "maybe_label_decls", "label_decls", "label_decl", "compstmt_or_error",
  "compstmt_start", "compstmt_nostart", "compstmt_contents_nonempty",
  "compstmt_primary_start", "compstmt", "simple_if", "if_prefix", "@29",
  "do_stmt_start", "@30", "save_filename", "save_lineno",
  "lineno_labeled_stmt", "c99_block_lineno_labeled_stmt", "lineno_stmt",
  "lineno_label", "select_or_iter_stmt", "@31", "@32", "@33", "@34", "@35",
  "@36", "@37", "@38", "for_init_stmt", "openmp_construct",
  "pragma_directives", "options_directive", "exec_freq_directive_ignore",
  "freq_hint_ignore", "exec_freq_directive", "freq_hint",
  "structured_block", "parallel_construct", "@39", "parallel_directive",
  "parallel_clause_list", "parallel_clause", "for_construct", "@40",
  "iteration_statement", "@41", "@42", "@43", "@44", "for_directive",
  "for_clause_list", "for_clause", "schedule_kind", "sections_construct",
  "@45", "sections_directive", "sections_clause_list", "sections_clause",
  "section_scope", "@46", "maybe_section_sequence",
  "maybe_structured_block", "section_sequence", "section_construct", "@47",
  "section_directive", "single_construct", "@48", "single_directive",
  "single_clause_list", "single_clause", "parallel_for_construct", "@49",
  "parallel_for_directive", "parallel_for_clause_list",
  "parallel_for_clause", "parallel_sections_construct", "@50",
  "parallel_sections_directive", "parallel_sections_clause_list",
  "parallel_sections_clause", "master_construct", "@51",
  "master_directive", "critical_construct", "@52", "critical_directive",
  "region_phrase", "barrier_directive", "atomic_construct",
  "atomic_directive", "flush_directive", "ordered_construct", "@53",
  "ordered_directive", "threadprivate_directive", "reduction_operator",
  "variable_list", "stmt", "label", "maybe_type_qual", "xexpr",
  "asm_operands", "nonnull_asm_operands", "asm_operand", "asm_clobbers",
  "parmlist", "@54", "parmlist_1", "@55", "@56", "parmlist_2", "parms",
  "parm", "firstparm", "setspecs_fp", "parmlist_or_identifiers", "@57",
  "parmlist_or_identifiers_1", "identifiers", "identifiers_or_typenames",
  "extension", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,    61,   330,    63,    58,   331,
     332,   124,    94,    38,   333,   334,   335,   336,    43,    45,
      42,    47,    37,   337,   338,   339,   340,    46,    40,    91,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    41,    59,   125,   126,    33,    44,
     123,    93,    10
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short yyr1[] =
{
       0,   123,   124,   124,   126,   125,   127,   125,   128,   129,
     129,   129,   129,   129,   129,   130,   130,   130,   130,   130,
     130,   130,   132,   133,   131,   131,   134,   135,   131,   131,
     136,   137,   131,   131,   138,   138,   139,   139,   139,   139,
     139,   139,   139,   140,   141,   141,   142,   142,   143,   143,
     143,   143,   143,   143,   143,   143,   143,   143,   143,   144,
     145,   146,   147,   147,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   149,   148,   150,
     148,   151,   152,   148,   153,   148,   148,   148,   154,   154,
     154,   154,   155,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   156,   157,   157,
     158,   159,   159,   159,   159,   160,   160,   160,   160,   161,
     162,   163,   164,   164,   164,   164,   164,   164,   165,   165,
     165,   166,   167,   167,   168,   168,   169,   169,   169,   169,
     169,   169,   169,   170,   170,   170,   170,   170,   170,   171,
     171,   171,   171,   171,   171,   172,   172,   172,   172,   172,
     173,   173,   173,   173,   173,   173,   173,   174,   175,   175,
     175,   175,   175,   175,   176,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   178,   178,   178,   178,   178,
     179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
     180,   180,   180,   180,   180,   181,   181,   181,   181,   181,
     181,   181,   181,   182,   182,   182,   182,   182,   182,   182,
     182,   183,   183,   183,   183,   184,   184,   184,   184,   185,
     185,   185,   185,   186,   186,   186,   186,   187,   187,   187,
     187,   187,   187,   187,   187,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
     188,   189,   189,   190,   190,   191,   192,   192,   193,   194,
     194,   194,   195,   195,   196,   196,   197,   197,   199,   198,
     198,   201,   200,   200,   202,   202,   203,   203,   204,   205,
     205,   206,   206,   206,   206,   206,   207,   207,   207,   207,
     208,   208,   209,   210,   209,   209,   211,   211,   212,   212,
     213,   213,   214,   213,   213,   216,   215,   215,   215,   217,
     217,   218,   218,   218,   220,   221,   219,   223,   224,   222,
     225,   225,   226,   226,   226,   226,   226,   227,   227,   228,
     228,   228,   229,   229,   229,   229,   229,   230,   230,   230,
     230,   230,   231,   231,   232,   232,   233,   233,   235,   234,
     234,   236,   234,   234,   237,   234,   238,   234,   239,   239,
     239,   240,   240,   241,   241,   242,   242,   243,   243,   243,
     244,   244,   244,   244,   244,   244,   245,   245,   246,   246,
     247,   247,   247,   248,   248,   248,   249,   249,   249,   250,
     250,   252,   251,   253,   253,   254,   254,   254,   255,   255,
     256,   256,   257,   257,   258,   258,   258,   258,   258,   259,
     259,   259,   259,   259,   260,   260,   260,   260,   261,   261,
     261,   261,   261,   262,   262,   262,   262,   263,   263,   263,
     263,   263,   264,   264,   265,   265,   265,   265,   266,   267,
     268,   269,   270,   271,   271,   272,   272,   273,   274,   274,
     275,   276,   276,   277,   277,   278,   279,   280,   280,   282,
     281,   284,   283,   285,   286,   287,   287,   288,   289,   290,
     292,   291,   291,   291,   293,   294,   291,   291,   291,   295,
     296,   297,   298,   291,   299,   291,   300,   300,   301,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   302,   302,
     302,   302,   302,   303,   304,   305,   305,   305,   306,   307,
     307,   307,   308,   310,   309,   311,   311,   312,   312,   313,
     313,   313,   313,   313,   313,   313,   313,   313,   315,   314,
     317,   318,   319,   320,   316,   321,   321,   322,   322,   323,
     323,   323,   323,   323,   323,   323,   323,   324,   324,   324,
     324,   326,   325,   327,   327,   328,   328,   329,   329,   329,
     329,   329,   331,   330,   332,   332,   332,   333,   334,   334,
     336,   335,   337,   339,   338,   340,   340,   341,   341,   342,
     342,   342,   342,   344,   343,   345,   345,   346,   346,   347,
     347,   347,   347,   347,   347,   347,   347,   347,   347,   347,
     347,   347,   347,   349,   348,   350,   350,   351,   351,   352,
     352,   352,   352,   352,   352,   352,   352,   352,   352,   352,
     354,   353,   355,   357,   356,   358,   358,   359,   360,   361,
     362,   363,   363,   365,   364,   366,   367,   368,   368,   368,
     368,   368,   368,   368,   368,   369,   369,   370,   370,   370,
     370,   370,   370,   370,   370,   370,   370,   370,   370,   370,
     370,   370,   370,   371,   371,   371,   371,   372,   372,   373,
     373,   374,   374,   375,   375,   376,   376,   377,   377,   379,
     378,   380,   381,   382,   380,   380,   383,   383,   383,   383,
     384,   384,   385,   385,   385,   385,   385,   386,   386,   386,
     386,   386,   387,   389,   388,   390,   390,   391,   391,   392,
     392,   393
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     1,     0,     2,     0,     3,     1,     1,
       1,     5,     2,     1,     1,     3,     4,     4,     2,     2,
       2,     1,     0,     0,     9,     4,     0,     0,     9,     4,
       0,     0,     8,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     3,     1,     2,
       2,     2,     2,     2,     4,     2,     4,     2,     2,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     0,     4,     0,
       4,     0,     0,     7,     0,     5,     3,     3,     1,     1,
       1,     1,     0,     7,     3,     3,     3,     3,     4,     6,
       8,     6,     4,     3,     3,     2,     2,     1,     0,     1,
       3,     1,     1,     2,     2,     4,     4,     2,     2,     3,
       0,     1,     4,     4,     3,     3,     2,     2,     1,     2,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     2,
       2,     2,     2,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     1,     4,     1,     4,     0,     4,     0,     6,
       3,     0,     6,     3,     0,     1,     1,     2,     6,     1,
       3,     0,     1,     4,     6,     4,     1,     1,     1,     1,
       1,     1,     1,     0,     4,     1,     0,     2,     1,     3,
       3,     2,     0,     4,     1,     0,     4,     1,     1,     1,
       2,     2,     5,     3,     0,     0,     7,     0,     0,     7,
       1,     1,     4,     3,     2,     3,     1,     1,     1,     3,
       2,     1,     3,     2,     3,     3,     4,     3,     4,     3,
       2,     1,     1,     2,     1,     2,     1,     2,     0,     7,
       5,     0,     7,     5,     0,     8,     0,     7,     2,     2,
       2,     0,     1,     0,     1,     1,     2,     0,     3,     2,
       3,     4,     3,     1,     1,     2,     1,     4,     1,     4,
       4,     6,     5,     4,     6,     5,     1,     3,     1,     1,
       3,     0,     3,     0,     1,     0,     1,     2,     1,     1,
       1,     3,     2,     3,     4,     3,     2,     2,     1,     4,
       3,     4,     5,     5,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     1,     2,     2,     2,     1,     2,     2,
       2,     2,     1,     2,     1,     1,     1,     1,     2,     0,
       0,     0,     0,     0,     1,     1,     2,     3,     1,     2,
       1,     1,     5,     1,     1,     2,     2,     2,     2,     0,
       5,     0,     4,     0,     0,     1,     2,     3,     3,     3,
       0,     4,     1,     3,     0,     0,     7,     5,     2,     0,
       0,     0,     0,    12,     0,     6,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     4,     1,     1,     1,     3,     1,
       1,     1,     1,     0,     3,     3,     4,     1,     2,     4,
       4,     4,     4,     4,     4,     4,     6,     4,     0,     3,
       0,     0,     0,     0,    12,     3,     4,     1,     2,     4,
       4,     4,     6,     4,     6,     1,     1,     1,     1,     1,
       1,     0,     3,     3,     4,     1,     2,     4,     4,     4,
       6,     1,     0,     4,     1,     1,     2,     1,     1,     2,
       0,     3,     3,     0,     3,     3,     4,     1,     2,     4,
       4,     4,     1,     0,     3,     4,     5,     1,     2,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
       4,     6,     1,     0,     3,     4,     5,     1,     2,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
       0,     3,     3,     0,     3,     3,     6,     1,     3,     3,
       3,     3,     6,     0,     3,     3,     6,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       2,     3,     2,     2,     2,     3,     6,     8,    10,    12,
       3,     4,     1,     3,     5,     2,     5,     0,     1,     0,
       1,     0,     1,     1,     3,     4,     7,     1,     3,     0,
       3,     2,     0,     0,     6,     2,     0,     1,     1,     3,
       1,     3,     4,     4,     3,     4,     3,     4,     4,     3,
       4,     3,     1,     0,     3,     1,     2,     1,     3,     1,
       3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
       4,     0,     6,     0,     1,     0,     0,   269,   301,   300,
     266,   128,     0,     0,   356,   352,   354,     0,    61,     0,
     721,    21,     5,     8,    10,     9,     0,     0,   213,   214,
     215,   216,   205,   206,   207,   208,   217,   218,   219,   220,
     209,   210,   211,   212,   120,   120,     0,   136,   143,   263,
     265,   264,   134,   286,   160,     0,     0,     0,   268,   267,
      14,    13,     0,     7,    19,    20,   515,   516,   517,     0,
       0,   357,   353,   355,     0,     0,     0,   351,   261,   284,
       0,   274,     0,   129,   141,   147,   131,   163,   130,   142,
     148,   164,   132,   153,   158,   135,   170,   133,   154,   159,
     171,   137,   139,   145,   144,   181,   138,   140,   146,   182,
     149,   151,   156,   155,   196,   150,   152,   157,   197,   161,
     179,   188,   167,   165,   162,   180,   189,   166,   168,   194,
     203,   174,   172,   169,   195,   204,   173,   175,   177,   186,
     185,   183,   176,   178,   187,   184,   190,   192,   201,   200,
     198,   191,   193,   202,   199,     0,     0,    18,   287,    34,
      35,   377,   368,   377,   369,   366,   370,    12,     0,     0,
      88,    89,    90,    59,    60,     0,     0,     0,     0,     0,
      91,     0,    36,    38,    37,     0,    40,    39,     0,    41,
      42,     0,     0,    43,    62,     0,     0,    64,    46,    48,
       0,     0,   291,     0,   241,   242,   243,   244,   237,   238,
     239,   240,   401,     0,   233,   234,   235,   236,   262,     0,
       0,   285,    15,   284,    33,     0,   284,   261,     0,   284,
     350,   336,   261,   284,     0,   272,     0,   330,   331,     0,
       0,     0,     0,   358,     0,   361,     0,   364,   514,   655,
       0,    57,    58,     0,     0,     0,    52,    49,     0,   465,
       0,     0,    51,     0,     0,     0,    53,     0,    55,     0,
       0,    81,    79,    77,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   106,   105,     0,    44,
       0,     0,     0,   461,   453,     0,    50,   298,   299,   296,
       0,   289,   292,   297,   270,   403,   271,   349,     0,     0,
     121,     0,   713,   347,   261,   262,     0,     0,    31,   107,
       0,   473,   112,   474,   283,     0,     0,    17,   284,    25,
       0,   284,   284,   334,    16,    29,     0,   284,   384,   379,
     233,   234,   235,   236,   229,   230,   231,   232,   120,   120,
     376,     0,   377,   284,   377,   398,   399,   373,   396,     0,
       0,     0,     0,     0,     0,    95,    94,     0,    11,    47,
       0,     0,    86,    87,     0,     0,     0,     0,    75,    76,
      74,    73,    72,    71,    70,    65,    66,    67,    68,    69,
     103,     0,    45,     0,   104,    97,     0,     0,   454,   455,
      96,     0,   291,    44,   261,   284,   402,   404,   409,   408,
     410,   418,   348,   275,   276,     0,     0,     0,     0,     0,
     420,     0,   448,   473,   114,   113,     0,   281,   335,     0,
       0,    23,   280,   333,    27,   360,   473,   473,   378,   385,
       0,   363,     0,     0,   374,     0,   373,   646,   656,     0,
       0,     0,    92,    63,    54,    56,     0,     0,    80,    78,
      98,   102,   719,     0,   464,   433,   463,   473,   473,   473,
     473,     0,   442,     0,   474,   428,   437,   456,   288,   290,
      88,     0,   412,   689,   417,   284,   416,   277,     0,   717,
     697,   225,   226,   221,   222,   227,   228,   223,   224,   120,
     120,   715,     0,   698,   700,   714,     0,     0,     0,   421,
     419,   474,   110,   120,   120,     0,   332,   273,   276,   473,
     278,   473,   380,   386,   474,   382,   388,   474,   284,   284,
     400,   397,   284,     0,     0,     0,     0,     0,    82,    85,
     457,     0,   434,   429,   438,   435,   430,   439,   474,   431,
     440,   436,   432,   441,   443,   450,   451,   293,     0,   295,
     411,   413,     0,     0,   689,   415,   695,   712,   405,   405,
     691,   692,     0,   716,     0,   422,   423,     0,   117,     0,
     118,     0,   305,   303,   302,   282,   474,     0,   474,   284,
     381,   284,     0,   359,   362,   367,   284,    99,     0,   101,
     318,    88,     0,     0,   315,     0,   317,     0,   371,   308,
     314,     0,     0,     0,   720,   451,   462,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   677,   672,   460,
     473,     0,   119,   120,   120,     0,     0,   449,   659,   658,
     657,   511,   512,   498,   523,   499,   538,   500,   561,   501,
     583,   502,   593,   503,   613,   504,   630,   505,   633,   508,
     506,     0,   509,   507,   643,   510,   478,   479,     0,     0,
     414,   690,   341,   261,   284,   284,   337,   338,   284,   709,
     406,   409,   261,   284,   284,   711,   284,   699,   213,   214,
     215,   216,   205,   206,   207,   208,   217,   218,   219,   220,
     209,   210,   211,   212,   120,   120,   701,   718,     0,    32,
     458,     0,     0,     0,     0,   279,     0,   473,     0,   284,
     473,     0,   284,   365,     0,   321,     0,     0,   312,    93,
       0,   307,     0,   320,   311,    83,     0,   519,   520,   521,
       0,   675,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   662,   663,   664,     0,     0,     0,   678,
       0,   474,   660,     0,     0,   126,   469,   484,   471,   489,
       0,   482,     0,     0,   452,   466,   451,     0,     0,   451,
       0,     0,   451,   451,     0,   451,   127,   294,   412,   689,
     707,   284,   340,   284,   343,   708,   407,   412,   689,   710,
     693,   405,   405,   459,   115,   116,     0,    24,    28,   387,
     474,   284,     0,   390,   389,   284,     0,   393,   100,     0,
     323,     0,     0,   309,   310,   513,   518,   645,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   525,     0,
     527,     0,     0,     0,     0,   571,   563,     0,   565,     0,
       0,     0,   592,   585,     0,   587,   632,     0,   635,   638,
     640,     0,   641,     0,     0,     0,     0,   555,     0,   556,
     545,     0,   547,     0,   673,   665,     0,   670,     0,     0,
       0,   124,   324,     0,   125,   327,     0,     0,   451,     0,
       0,     0,   468,   473,   467,   488,     0,   661,   524,   522,
     540,   539,   572,   562,   584,   594,   614,   631,   634,   639,
     644,   344,   345,     0,   339,   342,     0,   284,   284,   704,
     284,   706,   304,     0,   392,   284,   395,   284,     0,   316,
     313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   615,     0,
     617,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     612,     0,     0,     0,   595,     0,   597,   526,   528,     0,
       0,     0,     0,   564,   566,     0,     0,     0,   586,   588,
     637,     0,     0,     0,     0,     0,     0,     0,   546,   548,
       0,   671,     0,   284,   122,     0,   123,     0,     0,     0,
       0,   679,     0,   483,   451,   452,   475,   473,     0,     0,
     451,   346,   694,   702,   703,   705,   391,   394,   322,     0,
       0,     0,     0,     0,   654,   653,   652,   651,   650,   647,
     649,   648,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   616,   618,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   596,
     598,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,   558,   559,   560,     0,   674,
     681,     0,   676,   325,   328,     0,     0,   472,   680,   497,
     490,     0,   494,   481,   477,   476,     0,   679,     0,   577,
       0,   575,   574,   578,   580,   531,   532,   533,   534,   535,
       0,   537,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   567,   568,   569,
       0,   589,   591,   590,   636,   642,   549,   550,   551,     0,
     553,     0,     0,     0,     0,   682,   683,   666,   473,   473,
     470,   485,   679,   496,   451,   487,   541,     0,   573,     0,
     576,   579,   451,     0,   621,   622,   623,   624,   625,   626,
     627,     0,   629,   620,   619,   601,   602,   603,   604,   605,
     606,   607,     0,   609,   610,     0,   600,   599,     0,     0,
       0,     0,     0,   681,     0,     0,   474,   474,   451,     0,
     495,   679,   582,   581,   536,     0,     0,     0,   570,   552,
     554,     0,     0,     0,   667,   684,     0,     0,   486,   491,
       0,   628,   608,   611,   685,     0,     0,     0,   326,   329,
     679,   542,     0,   687,     0,   668,     0,   679,     0,     0,
       0,   492,     0,   686,   669,   688,   451,   543,   493,   451,
     544
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     1,     2,     3,     5,    22,    23,    24,    25,   330,
     519,   336,   521,   228,   423,   605,   191,   631,   391,   193,
     194,   195,   196,    26,   197,   198,   377,   376,   374,   613,
     375,   199,   537,   318,   319,   320,   321,   512,   465,    27,
     309,  1089,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,   633,   634,
     499,   500,   348,   218,   212,   635,   219,    47,    48,    49,
      50,    51,   234,    80,   229,   235,   587,    81,   515,   310,
     221,    53,   300,   301,   302,    54,   585,   713,   607,   608,
     609,   822,   610,   727,   611,   612,   881,   995,  1158,   884,
     997,  1159,   518,   237,   675,   676,   677,   238,    55,    56,
      57,    58,   352,   354,   359,   246,    59,   731,   445,   241,
     242,   350,   522,   525,   523,   526,   357,   358,   213,   305,
     406,   679,   680,   408,   409,   410,   230,   466,   467,   468,
     469,   470,   471,   322,   294,   616,   636,   897,   397,   398,
     399,   709,   637,   295,   473,   200,   638,   771,   772,   886,
     773,   888,   323,   426,  1005,   894,  1006,  1007,   774,  1004,
     887,  1208,   889,  1162,  1240,  1256,  1164,  1090,   639,   640,
     641,    60,    69,   642,   740,   898,   643,   776,   644,   839,
     840,   645,   777,   901,  1009,  1211,  1247,  1259,   646,   871,
     872,  1078,   647,   778,   648,   847,   848,   903,  1010,  1100,
    1101,  1102,  1103,  1172,  1104,   649,   779,   650,   854,   855,
     651,   780,   652,   965,   966,   653,   781,   654,   949,   950,
     655,   782,   656,   657,   783,   658,   981,   659,   660,   661,
     662,   663,   785,   664,   665,  1032,   250,   899,   667,   760,
    1091,  1154,  1155,  1156,  1244,   484,   563,   501,   686,   916,
     502,   503,   706,   504,   568,   313,   416,   505,   506,   463,
     201
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1049
static const short yypact[] =
{
      40,   144,   157,  3168, -1049,  3168,   566, -1049, -1049, -1049,
   -1049, -1049,   799,   121,   115,   115,   115,    94, -1049,   105,
   -1049, -1049, -1049, -1049, -1049, -1049,   149,   150,   846,   587,
    1248,  1055,  1117,   422,  1857,  1342,  1319,  1648,  3178,  1809,
    1907,  1555,  1956,  2006, -1049, -1049,   109, -1049, -1049, -1049,
   -1049, -1049,   115, -1049, -1049,    59,    77,   126, -1049, -1049,
   -1049, -1049,  3168, -1049, -1049, -1049, -1049, -1049, -1049,   180,
     184,   115,   115,   115,  2948,   190,  2847, -1049,    57,   115,
     246, -1049,  1222, -1049, -1049, -1049,   115, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049,   115, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049,   115, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049,   115, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049,   115, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049,   115, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
     115, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,   115,
   -1049, -1049, -1049, -1049, -1049,   135,   150, -1049, -1049, -1049,
   -1049, -1049,   185, -1049,   191, -1049,   200, -1049,   208,   361,
   -1049, -1049, -1049, -1049, -1049,  2948,  2948,   288,   320,   336,
   -1049,   745, -1049, -1049, -1049,  2948, -1049, -1049,  1548, -1049,
   -1049,  2948,   262,   333, -1049,  2990,  3030, -1049,  3747,   641,
    1679,  2948,  1325,   341,   527,   941,  1347,  1616,  1036,   617,
    1149,   894, -1049,   371,   252,   497,   278,   506, -1049,   150,
     150,   115, -1049,   115, -1049,   442,   115,   250,   952,   115,
   -1049, -1049,    57,   115,   286, -1049,  1311,   660,   680,   297,
    1471,   441,  1083, -1049,   486, -1049,   491, -1049, -1049, -1049,
     253, -1049, -1049,  2948,  2948,  2386, -1049, -1049,   474, -1049,
     500,   515, -1049,   525,  2948,  1548, -1049,  1548, -1049,  2948,
    2948,   565, -1049, -1049,  2948,  2948,  2948,  2948,  2948,  2948,
    2948,  2948,  2948,  2948,  2948,  2948, -1049, -1049,   745,  2948,
    2948,   745,   543, -1049,   597,   580, -1049, -1049, -1049, -1049,
     276, -1049,   638, -1049, -1049,   520, -1049,   680,   218,   150,
   -1049,   759, -1049, -1049,    57,   702,  2278,   684, -1049, -1049,
    1072,    49, -1049, -1049,   696,   135,   135, -1049,   115, -1049,
     952,   115,   115, -1049, -1049, -1049,   952,   115, -1049, -1049,
     527,   941,  1347,  1616,  1036,   617,  1149,   894, -1049,   740,
     686,  1462, -1049,   115, -1049, -1049,   763,   729, -1049,   491,
     723,   876,  3429,  3454,   767, -1049, -1049,  2683, -1049,  3747,
     793,   796,  3747,  3747,  2948,   835,  2948,  2948,  3758,  3768,
    1717,  1215,   944,   582,   582,   781,   781, -1049, -1049, -1049,
   -1049,   808,   333,   805, -1049, -1049,   745,  1778,   597, -1049,
   -1049,   824,  1325,  3072,    57,   115, -1049, -1049, -1049, -1049,
     766, -1049, -1049, -1049,   324,   830,  1230,  2948,  2948,  2318,
   -1049,   841, -1049, -1049, -1049, -1049,  1711, -1049,   660,   409,
     135, -1049,   879, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
     850, -1049,   856,  2948,   745,   857,   729, -1049, -1049,  2386,
    2948,  2386, -1049, -1049,   855,   855,   903,  2948,  2728,  3693,
   -1049, -1049, -1049,   327,   684, -1049, -1049,    60,    70,    72,
      85,   982, -1049,   877, -1049, -1049, -1049, -1049, -1049, -1049,
     284,   893,   520,   520, -1049,   115, -1049, -1049,   899, -1049,
   -1049,  3338,  2653,  1652,  1627,  3389,  2878,  2124,  2055, -1049,
   -1049, -1049,   900,   329, -1049, -1049,   352,   895,   904, -1049,
   -1049, -1049, -1049,   912,   924,   902, -1049, -1049,   958, -1049,
   -1049, -1049,   921, -1049, -1049,   928, -1049, -1049,   115,   115,
    3747, -1049,   115,   942,   950,  3474,   957,  2045, -1049,  3162,
   -1049,   745, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049,  2415, -1049,  2948, -1049,
   -1049, -1049,   960,  1088, -1049, -1049, -1049, -1049,   388,   132,
   -1049, -1049,  3330, -1049,  1082, -1049, -1049,    55, -1049,   135,
   -1049,   150, -1049, -1049,  3747, -1049, -1049,   902, -1049,   115,
     112,   115,   411, -1049, -1049, -1049,   115, -1049,  2948, -1049,
   -1049,   997,   745,  2948, -1049,  1008,  3747,   981,   991, -1049,
   -1049,   384,  2175,  2948, -1049,  2484, -1049,  1034,  1104,  1256,
    1038,  2551,  2948,  1005,  1027,  2908,   273,  1142, -1049, -1049,
   -1049,  1043, -1049, -1049, -1049,  1044,   676,  1045, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049,  2948, -1049, -1049, -1049, -1049, -1049, -1049,  2779,   413,
   -1049, -1049, -1049,    57,   115,   115,   790,   798,   363, -1049,
   -1049,   115,    57,   115,   363, -1049,   115, -1049,  3338,  2653,
    3397,  3418,  1652,  1627,  2144,  2397,  3389,  2878,  3407,  3425,
    2124,  2055,  2445,  2514, -1049, -1049, -1049, -1049,  1049, -1049,
   -1049,   360,   424,  2045,    55, -1049,    55, -1049,  2948,    80,
   -1049,  2948,   568, -1049,  3515, -1049,  3188,  2045, -1049, -1049,
    2114, -1049,  2217, -1049, -1049,  3162,  1052, -1049, -1049, -1049,
    1056, -1049,  1059,  3184,   354,   351,  1060,   204,  1063,  1069,
     311,   701,  3279, -1049, -1049, -1049,  1050,  2948,  1078, -1049,
    1099, -1049, -1049,   135,   150, -1049, -1049, -1049, -1049, -1049,
    1103,  1159,  1877,    89, -1049, -1049,  2553,  1162,  1096,  2553,
    1162,  1096,  2553,  2553,  3495,  2553, -1049, -1049,   388,   171,
   -1049,   115, -1049,   115, -1049, -1049,   115,   132,   132, -1049,
   -1049,   388,   132, -1049, -1049, -1049,  1108, -1049, -1049, -1049,
   -1049,  3711,  2948, -1049, -1049,  3711,  2948, -1049, -1049,  2948,
   -1049,  1123,  2217, -1049, -1049, -1049, -1049, -1049,  1144,  1182,
    1187,  1191,  1211,  1213,  1216,  2711,  1224,  3267, -1049,   274,
   -1049,  1236,  1240,  1245,  1255, -1049, -1049,   400, -1049,  1261,
    1262,  1263, -1049, -1049,   530, -1049, -1049,  1237, -1049, -1049,
   -1049,   361, -1049,  1264,  1269,  1270,  1271, -1049,  1274, -1049,
   -1049,   801, -1049,  2948, -1049, -1049,  1128, -1049,  2948,  1179,
     498, -1049,   338,   536, -1049,  1085,  1276,  1277, -1049,  1278,
    2948,  1976, -1049, -1049, -1049, -1049,  2948, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049,   790,   798,   472, -1049, -1049,  1088,   115,   363, -1049,
     363, -1049, -1049,   112, -1049,  3711, -1049,  3711,  3411, -1049,
   -1049,   361,   361,   361,    61,   780,   361,  2948,  1279,  1280,
    1282,  1285,  1286,  1287,  1293,  1297,  1298,  1300, -1049,  2773,
   -1049,  2948,  1302,  1303,  1308,  1310,  1320,  1321,  1322,  1323,
   -1049,  1329,  1330,  1331, -1049,  3299, -1049, -1049, -1049,   361,
     361,   361,   780, -1049, -1049,   361,   361,   361, -1049, -1049,
   -1049,  1199,   440,   361,   361,   361,   780,   632, -1049, -1049,
    3729, -1049,   165,   115, -1049,   952, -1049,   952,  2948,  2948,
    1296,  2779,  1318, -1049, -1049, -1049, -1049, -1049,  1324,  1335,
    2622, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,   466,
     484,   534,  1326,  1344, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049,  1358,   571,  3536,   361,   361,   361,   361,   361,
     244,   780,   361,  2948,  2948, -1049, -1049,  3555,   361,   361,
     361,   361,   361,   677,   780,   361,   632,  2948,  2948, -1049,
   -1049,   592,   647,   653,  1359,   656,   698,   727,  1317,  1337,
     776,   785,   795,  1386, -1049, -1049, -1049, -1049,   823, -1049,
      68,  1352, -1049, -1049, -1049,  1354,  1357, -1049, -1049, -1049,
   -1049,  1366, -1049, -1049, -1049, -1049,  1368,  2779,  2043, -1049,
    1369,  1441,  1441, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
     361, -1049, -1049,   833,   865,   875,   892,   896,  1360,  1370,
    1412,   951,  3576,  3595, -1049,   992,   994,  1012,  1035,  1053,
    1377,  1378,  1415,  1057,  1093,  3616,  3635, -1049, -1049, -1049,
     361, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,   361,
   -1049,  2948,  1403,   745,   193,  1383, -1049, -1049, -1049, -1049,
   -1049, -1049,  2948, -1049, -1049, -1049, -1049,  1381, -1049,  1474,
    1441, -1049,  2553,  1106, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049,   361, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049,   361, -1049, -1049,  2948, -1049, -1049,  1145,  1146,
    3656,  2948,  1390,    68,  1400,    68, -1049, -1049, -1049,  1404,
   -1049,  2948, -1049, -1049, -1049,  1147,  1160,  3675, -1049, -1049,
   -1049,  1407,  1513,   267, -1049, -1049,  1049,  1049, -1049, -1049,
    1411, -1049, -1049, -1049, -1049,  1429,  1518,  1414, -1049, -1049,
    2948, -1049,  2948, -1049,  1164, -1049,  1418,  2948,  1424,  1425,
    1529, -1049,  1427, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
   -1049, -1049, -1049, -1049, -1049,   120, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049,   -50, -1049,   -74,  1150,  -230,
     733, -1049, -1049, -1049,   -42,  -177, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049,  -311, -1049,  1226, -1049, -1049,   335,   344,
    -302,  -512,   205,   261,   948,  1031,    48,    64,   -10,   449,
    -392,  -378,   976,   978,  -374,  -358,   987,  1000,    27,    50,
    1148,  1156, -1049,  -170, -1049,   108,  -153,   714,   726,   794,
     842, -1049,  -559,  -141,  -233,  1124, -1049,  1266, -1049,   -78,
       7,    23, -1049,  1171, -1049,   753,   989, -1049,  -501, -1049,
     853, -1049,  -595, -1049, -1049,   974, -1049, -1049, -1049, -1049,
   -1049, -1049,  -147,   610,   786,   800,   162,     9, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,  1143,  -145,
   -1049,  1246, -1049, -1049,   881,   884,  1247,  1152,   -47, -1049,
   -1049,  -538,  -277,  -422,  -455, -1049,   240, -1049, -1049, -1049,
   -1049, -1049, -1049,  -287, -1049, -1049,  -726,   594, -1049, -1049,
    1207,     3, -1049,   970, -1049, -1049,  -548, -1049, -1049, -1049,
   -1049, -1049,  -113,  -460,   605,  -872,    99,   114, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049,   521, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049,  -662, -1049, -1049, -1049, -1049,
     787, -1049, -1049,   839, -1049, -1049, -1049, -1049, -1049, -1049,
     754,   573, -1049, -1049, -1049, -1049,   797,   859, -1049, -1049,
   -1049,   526, -1048, -1049, -1049, -1049, -1049, -1049, -1049,   789,
   -1049, -1049, -1049, -1049,   682, -1049, -1049, -1049, -1049,   699,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049,   232,  -426,   529,  -465, -1049, -1049,
    -943,   446, -1049,   445, -1049,  1166, -1049,  -554, -1049, -1049,
   -1049, -1049, -1049, -1049,  1167,  -328, -1049, -1049, -1049, -1049,
       8
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -697
static const short yytable[] =
{
     192,   220,   203,   331,   433,   162,   164,   166,   236,   671,
      52,    62,    52,    62,   556,   239,  1000,   734,   244,   431,
     711,    71,    72,    73,   495,   434,   430,   561,   407,   710,
      44,   685,    44,   424,   495,    86,    82,    95,   496,   104,
      -2,   113,   497,   122,   632,   131,   893,   140,   496,   149,
    -109,   577,   497,    45,  1171,    45,   708,   315,   498,   392,
     560,  -444,   159,   160,   590,    11,   210,   592,   498,    52,
      62,  -445,   349,  -446,   316,   158,   362,   363,  1152,   325,
     159,   160,  1022,    52,  1023,    52,  -447,   369,   615,    44,
     895,   666,   372,   373,   158,   158,   158,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   158,
     472,    46,    45,    46,   260,    77,   231,   904,   158,    19,
     907,   908,  1171,   910,   208,    63,   714,   158,   716,   159,
     160,   256,  1093,   251,   252,    77,   158,   824,    77,   231,
     209,   261,    19,   257,     4,   158,   681,   681,   312,   262,
     666,   324,   299,    77,   158,   326,   786,    -3,   812,   296,
     803,   417,   893,   158,    70,   240,   710,  1153,   710,  -109,
      46,   495,   158,   392,    77,   629,  -424,    19,   210,   161,
     696,   349,   167,   168,   554,   496,  -425,   896,  -426,   497,
     718,   260,    74,   260,   697,    52,   356,   163,   700,   458,
     459,  -427,   232,    75,   880,   498,   562,   440,   364,   442,
     233,    86,   806,    95,   701,   104,   393,   113,   370,  1209,
     371,    86,   682,    95,   157,   232,   821,   930,   307,   308,
     683,   227,   346,   233,    52,    61,   208,    61,   390,    52,
      78,   394,   421,  1080,   158,   210,   165,    76,    79,    52,
     351,   482,   209,   432,   312,   210,   314,   210,    11,   435,
      83,   673,    52,   919,   921,  1118,   530,  1119,  1230,   674,
     227,  1203,    52,   535,    52,   441,   159,   160,   893,  1081,
     539,   204,   169,   214,   474,   331,    92,   717,   202,   720,
     344,   828,  1210,   829,    61,   830,   831,  1246,   832,   833,
     456,   879,   857,   208,  1252,   243,   345,  1204,   834,   356,
     511,   245,    19,   208,    19,   208,   226,   227,   414,   209,
     247,    52,   836,   524,   527,   453,   858,   483,   669,   209,
     248,   209,   412,   561,   307,   308,  1228,   205,   584,   215,
      19,   346,   561,   507,   508,  1236,   462,    86,  1099,    95,
     923,   104,   299,   113,   474,   474,   548,   474,    52,   351,
     606,   222,  1012,   757,   249,   223,   560,   360,   849,   850,
     851,   841,   361,   842,   843,   560,   263,   257,   844,   681,
     681,  1237,   852,   225,  1258,   845,   253,  1260,   155,   156,
     401,    77,   672,   204,   356,   402,   967,   225,   557,   344,
    -276,   327,   534,   558,   536,   328,   586,   564,   588,   861,
     584,    52,   334,  -276,    77,   345,   223,   841,   254,   842,
     843,   724,   226,   227,   844,    19,   726,     8,     9,    10,
     106,   845,   214,   862,   255,   606,   735,   214,   893,   210,
     712,   210,   540,   719,   571,   752,   541,   340,   572,   205,
     593,   594,   264,  -276,   595,   304,    52,  -276,    52,   732,
     204,   226,   227,   914,   493,   915,   573,    14,    15,    16,
     204,   574,   204,   853,   493,   804,   846,   333,   673,   328,
     494,   602,   893,   603,   784,   306,   674,   227,   215,   721,
     494,   614,   355,   215,   159,   160,   475,   208,    86,   208,
     104,    78,   122,   341,   140,    88,   630,   332,   227,    79,
    1213,   476,   562,   209,    97,   209,   205,   761,   723,   214,
     788,   562,   973,   516,   495,   211,   205,   787,   205,   797,
     893,     7,   264,   893,    10,    83,   606,  -250,   496,   805,
     311,   811,   497,   223,   815,   411,  1064,   849,   850,   851,
     606,   756,   725,   606,  1069,   606,   340,   337,   498,   361,
    1073,   852,   694,    52,   668,   630,   543,   546,   549,   552,
     793,   227,    14,    15,    16,   215,   758,   678,   684,    52,
    1105,   544,   547,   550,   553,   361,  1011,    18,   365,    19,
     414,     7,     8,     9,    10,    88,   789,   790,  1106,   704,
     795,   722,   353,   361,   810,   798,   799,   527,   800,   214,
     404,   493,   341,   994,   366,  1120,   882,   328,   405,   227,
     692,   491,   705,   883,    10,   106,   296,   494,  1132,   367,
      19,   491,    14,    15,    16,   925,   693,   211,  1074,   927,
     368,   813,   928,   -84,   817,   606,   816,    18,  1107,   331,
     486,   996,   978,   361,   204,   223,   204,   395,  1075,  1076,
    1077,   396,    14,    15,    16,   215,   226,   227,   333,   333,
     281,   282,   283,   284,   285,    52,   668,   492,  1238,  1239,
      52,    64,    65,   876,  1083,  1111,  1084,   492,   796,    52,
     361,   347,   436,   437,   400,    86,   990,    95,  1130,   104,
    1131,   113,  -246,   122,   211,   131,  1137,   140,   418,   149,
     205,   361,   205,   312,   211,   312,   211,   807,   863,   808,
     864,   865,   411,   411,   766,   866,   767,   768,   769,   770,
     867,   868,   869,   924,   286,   287,   403,   926,   288,   289,
     290,   291,    84,    89,    93,    98,  1226,  1227,   159,   160,
     120,   125,   129,   134,    85,    90,    94,    99,   332,   227,
    1034,  1138,   121,   126,   130,   135,   361,  1139,   491,   415,
    1141,   427,   361,   885,  1047,   361,   719,   688,   226,   227,
     548,    87,    91,    96,   100,   105,   109,   114,   118,   123,
     127,   132,   136,   141,   145,   150,   154,   307,   308,   422,
     347,   438,   542,   545,   992,   551,   307,   308,   411,   411,
     918,   920,  1142,    66,    67,    68,  1002,   361,   863,   158,
     864,   865,  1008,   870,   492,   866,   102,   107,   111,   116,
     867,   868,   869,   689,   138,   143,   147,   152,   443,  1013,
    1014,  1143,  1015,   567,   567,   447,   361,  1016,   444,  1017,
       7,     8,     9,    10,    83,  -383,  -383,   579,   581,  1024,
    1025,  1026,  1027,  1028,   485,   227,  1122,  1123,  1029,  1030,
    1031,   283,   284,   285,   103,   108,   112,   117,   214,   448,
    1135,  1136,   139,   144,   148,   153,   451,   214,   791,   227,
    1146,    14,    15,    16,   548,   361,   793,   227,   211,  1147,
     211,    10,   115,   582,   361,   170,    18,   454,    19,  1148,
     455,   171,   172,   457,   361,  1082,   792,   794,    84,    89,
      93,    98,   460,   988,  1085,  1086,   461,  1088,   266,   268,
      85,    90,    94,    99,   215,   428,   429,  1150,   478,    14,
      15,    16,  1151,   215,   487,     7,   173,  1174,    10,    88,
     912,   913,   361,   317,   520,   303,  -473,  -473,  -473,  -473,
    -473,  -245,   510,   174,   493,    20,   528,   175,   176,   177,
     178,   179,   529,   532,  1200,   452,   180,   763,   764,  1175,
     494,   538,   181,   317,   361,   182,    14,    15,    16,  1176,
     183,   184,   185,   555,   361,   186,   187,  -473,  -473,  -473,
     188,    18,   102,   107,   111,   116,  1177,   559,    52,   668,
    1178,   361,  -473,   566,   570,   361,   575,   225,  1217,   189,
     190,   695,   583,  1088,   206,   576,   216,   578,   411,   411,
     279,   280,   281,   282,   283,   284,   285,   411,   411,   580,
     589,   411,   411,    10,   101,  1206,  1207,   591,   801,   802,
     103,   108,   112,   117,    84,    89,    93,    98,   596,     7,
       8,     9,    10,    97,   597,  1182,    85,    90,    94,    99,
     361,   599,  -108,   317,   670,   -34,  -111,  -111,  -111,  -111,
    -111,    14,    15,    16,   338,   707,   728,     7,  1088,   488,
      10,    11,     7,     8,     9,    10,    11,   729,    19,   490,
      14,    15,    16,  1202,    52,   668,  1185,   207,  1186,   217,
     730,   361,   -35,   361,   736,    18,   741,  -111,  -111,  -111,
     753,   491,     8,     9,    10,   101,  1187,  1221,    14,    15,
      16,   361,  -111,    14,    15,    16,   206,  1088,   102,   107,
     111,   116,   754,    18,   225,    19,    20,  -276,    18,  1188,
     759,   792,   794,   794,   361,   303,    10,   110,   762,   765,
    -276,   293,    14,    15,    16,   875,  1088,  1189,  1248,   629,
    -248,  1193,   361,  1088,   825,   216,   361,   492,   826,    19,
     216,   827,   856,   226,   227,   859,   103,   108,   112,   117,
     342,   860,  -111,   877,    14,    15,    16,   878,   339,  -375,
    -276,   890,  -696,   206,  -276,    84,    89,  1194,   891,   120,
     125,    19,  1195,   206,   900,   206,   902,    85,    90,   207,
    1214,   121,   126,   224,   922,   361,   -30,   -30,   -30,   -30,
     -30,   488,  -249,   489,     7,     8,     9,    10,    11,   929,
     980,   490,   931,   991,    87,    91,   105,   109,   123,   127,
     141,   145,     7,     8,     9,    10,    92,   993,   217,  1218,
    1219,  1231,   216,   217,   361,   361,   361,   -30,   -30,   -30,
     737,   738,   739,   343,  1232,    14,    15,    16,  1249,   361,
     932,   225,   -30,  1250,  -276,   933,   207,   102,   107,   934,
      18,   138,   143,    14,    15,    16,   207,  -276,   207,   342,
     278,   279,   280,   281,   282,   283,   284,   285,    18,   935,
      19,   936,   329,  1068,   937,   -22,   -22,   -22,   -22,   -22,
     226,   227,   951,     7,     8,     9,    10,   119,   159,   160,
       8,     9,   297,   298,   969,   103,   108,  -276,   970,   139,
     144,  -276,   -30,   971,  -696,   217,  1087,     8,     9,    10,
     115,     7,   216,   972,    10,    92,   -22,   -22,   -22,   975,
     976,   977,   983,  -247,    14,    15,    16,   984,   985,   986,
     225,   -22,   987,  -276,   998,   999,  1001,  1035,  1036,    18,
    1037,    19,   343,  1038,  1039,  1040,  -276,    14,    15,    16,
     982,  1041,    14,    15,    16,  1042,  1043,   206,  1044,   206,
    1048,  1049,    84,    89,    93,    98,  1050,    18,  1051,    19,
     120,   125,   129,   134,    85,    90,    94,    99,  1052,  1053,
    1054,  1055,   121,   126,   130,   135,  -276,  1056,  1057,  1058,
    -276,   -22,  1092,  1097,  -253,   217,  1110,  1140,  1096,  1144,
    1108,    87,    91,    96,   100,   105,   109,   114,   118,   123,
     127,   132,   136,   141,   145,   150,   154,  -252,  1109,  1145,
    1019,  1020,  1021,   338,  1149,  1033,     7,  1157,  1160,    10,
      11,  1161,   335,  1169,  1179,   -26,   -26,   -26,   -26,   -26,
     207,  1163,   207,  1165,  1180,  1168,   102,   107,   111,   116,
    1181,  1190,  1191,  1192,   138,   143,   147,   152,  1061,  1062,
    1063,  1201,  1205,  1212,  1065,  1066,  1067,    14,    15,    16,
    1167,  1222,  1070,  1071,  1072,  1224,   -26,   -26,   -26,  1229,
     690,  1234,    18,  1235,    19,    20,  1241,  1242,  1243,  1245,
     225,   -26,  1251,  -276,   103,   108,   112,   117,  1253,  1255,
    1254,  1257,   139,   144,   148,   153,  -276,   425,   698,   258,
     699,   170,     7,   481,   517,    10,    11,   171,   172,   702,
       8,     9,    10,   142,  1113,  1114,  1115,  1116,  1117,   226,
     227,  1121,   703,   479,   513,   413,   715,  1125,  1126,  1127,
    1128,  1129,   514,   823,  1133,   733,  -276,   917,   911,   533,
    -276,   -26,   173,    14,    15,    16,   531,   439,   809,  1094,
      14,    15,    16,   691,   814,   477,   446,   775,    18,   174,
      19,    20,  1095,   175,   176,   177,   178,   179,  1166,   905,
       7,   216,   180,    10,    97,   989,   968,  1170,   181,  1134,
     216,   182,     8,     9,    10,   106,   183,   184,   185,  1173,
     906,   186,   187,   979,   974,     0,   188,  1060,  1046,  1223,
    1225,   565,     7,     8,     9,    10,   124,     8,     9,    10,
     101,    14,    15,    16,     0,   189,   190,   569,   259,  1198,
    -258,     0,    14,    15,    16,     0,    18,     0,  1199,     0,
     292,     0,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
       0,  -449,  -449,    14,    15,    16,     0,    14,    15,    16,
       0,  -449,     0,     0,   217,     0,     0,     0,    18,     0,
    1215,  -449,     0,   217,    19,     7,     8,     9,    10,    11,
       0,  1216,     0,  -449,  -449,  -449,  -449,  -449,     0,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,     0,
       0,     0,     0,  -449,     0,     0,    14,    15,    16,  -449,
       0,     0,  -449,  -254,     0,     0,     0,  -449,  -449,  -449,
       0,    18,  -449,  -449,     0,     0,     0,  -449,     0,   464,
       0,  -473,  -473,  -473,  -473,  -473,  -473,  -473,  -473,     0,
    -473,  -473,     0,     0,  -449,   293,  -449,  -449,     0,  -449,
    -473,   277,   278,   279,   280,   281,   282,   283,   284,   285,
    -473,     0,     0,     7,     8,     9,    10,   133,     0,     0,
       0,     0,  -473,  -473,  -473,  -473,  -473,     0,  -473,  -473,
    -473,  -473,  -473,  -473,  -473,  -473,  -473,  -473,  -473,  -473,
    -473,  -473,     0,  -473,  -473,  -473,  -473,  -473,     0,     0,
       0,     0,  -473,     0,    14,    15,    16,     0,  -473,     0,
       0,  -473,     8,     9,    10,   110,  -473,  -473,  -473,    18,
       0,  -473,  -473,     0,     0,     0,  -473,     0,   892,     0,
    -451,  -451,     0,     0,     0,     0,  -451,  -451,     0,  -451,
    -451,     0,     0,  -473,     0,  -473,  -473,     0,  -473,  -451,
       0,     0,    14,    15,    16,     0,     0,     0,     0,  -451,
       0,     0,     8,     9,    10,   137,     0,     0,     0,    19,
       0,  -451,     0,     0,  -256,  -451,     0,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,     0,
    -451,     0,  -451,  -451,  -451,  -451,  -451,     0,     0,     0,
       0,  -451,    14,    15,    16,     0,     0,  -451,     0,     0,
    -451,     8,     9,    10,   146,  -451,  -451,  -451,     0,    19,
    -451,  -451,  -251,     0,     0,  -451,     0,  1003,     0,  -480,
    -480,     0,     0,     0,     0,  -480,  -480,     0,  -480,  -480,
       0,     0,  -451,     0,  -451,  -451,     0,  -451,  -480,     0,
       0,    14,    15,    16,     0,     0,     0,     0,  -480,     0,
       0,     8,     9,    10,   151,     0,     0,     0,    19,     0,
    -480,     0,  -257,     0,  -480,     0,  -480,  -480,  -480,  -480,
    -480,  -480,  -480,  -480,  -480,  -480,     0,  -480,     0,  -480,
       0,  -480,  -480,  -480,  -480,  -480,   600,     0,   601,   160,
    -480,    14,    15,    16,   171,   172,  -480,     0,     0,  -480,
       8,     9,    10,   142,  -480,  -480,  -480,     0,     0,  -480,
    -480,  -259,   742,     0,  -480,     0,   743,     0,   744,  1167,
     745,   746,   747,   748,   749,   750,    70,     0,     0,   173,
       0,  -480,     0,  -480,  -480,   751,  -480,     0,     0,     0,
      14,    15,    16,     0,     0,     0,   174,     0,    20,     0,
     175,   176,   177,   178,   179,   600,     0,   601,   160,   180,
       0,  -260,     0,   171,   172,   181,     0,     0,   182,     8,
       9,    10,   137,   183,   184,   185,     0,     0,   186,   187,
       0,     0,   602,   188,   603,     0,     0,     0,     0,     8,
       9,    10,   110,     0,     0,     0,     0,     0,   173,     0,
       0,  -306,   189,   190,     0,   604,     0,     0,     0,    14,
      15,    16,     0,     0,     0,   174,   600,    20,   170,   175,
     176,   177,   178,   179,   171,   172,    19,     0,   180,    14,
      15,    16,     0,     0,   181,     0,     0,   182,     0,     0,
       0,     0,   183,   184,   185,     0,    19,   186,   187,     0,
       0,   602,   188,   603,     0,     0,     0,     0,   600,   173,
     170,     0,     0,     0,     0,     0,   171,   172,     0,     0,
    -372,   189,   190,     0,   604,     0,   174,     0,    20,     0,
     175,   176,   177,   178,   179,     0,     0,     0,     0,   180,
    -319,     0,     0,     0,     0,   181,     0,     0,   182,     0,
       0,   173,     0,   183,   184,   185,     0,     0,   186,   187,
       0,     0,  -319,   188,  -319,     0,     0,     0,   174,     0,
      20,   170,   175,   176,   177,   178,   179,   171,   172,     0,
       0,   180,   189,   190,     0,   604,     0,   181,     0,     0,
     182,     0,     0,     0,     0,   183,   184,   185,     0,     0,
     186,   187,     0,     0,     0,   188,     0,     0,     0,     0,
       0,   170,   173,     0,     0,     0,     0,   171,   172,     0,
       0,     0,     0,     0,   189,   190,     0,   604,     0,   174,
       0,    20,     0,   175,   176,   177,   178,   179,     0,     0,
       0,     0,   180,     0,     0,     0,     0,     0,   181,     0,
       0,   182,   173,     0,     0,     0,   183,   184,   419,     0,
       0,   186,   187,     0,     0,     0,   188,     0,     0,   174,
       0,    20,     0,   175,   176,   177,   178,   179,     0,     0,
       7,     0,   180,    10,    11,   189,   190,     0,   181,   420,
       0,   182,     8,     9,    10,   115,   183,   184,   185,     0,
       0,   186,   187,     0,     0,     0,   188,     0,   601,   617,
       8,     9,    10,    11,   171,   172,     0,   618,   619,     0,
       0,    14,    15,    16,     0,   189,   190,   620,     0,   509,
       0,     0,    14,    15,    16,     0,    18,   621,    19,     0,
       8,     9,    10,   146,     0,     0,     0,     0,     0,   173,
      14,    15,    16,     0,     0,     0,     0,     0,     0,   622,
     623,   624,   625,   626,   627,    18,   174,    19,    20,     0,
     175,   176,   177,   178,   179,     0,     0,   601,   160,   180,
      14,    15,    16,   171,   172,   181,   618,   619,   182,     0,
       0,     0,     0,   183,   184,   185,   620,    19,   186,   187,
       0,     0,     0,   188,     0,     0,   621,     0,     0,     8,
       9,    10,   151,     0,     0,     0,     0,     0,   173,     0,
     628,     0,   189,   190,     0,   629,     0,     0,   622,   623,
     624,   625,   626,   627,     0,   174,     0,    20,     0,   175,
     176,   177,   178,   179,     0,     0,   170,     0,   180,    14,
      15,    16,   171,   172,   181,   618,   619,   182,     0,     0,
       0,     0,   183,   184,   185,     0,     0,   186,   187,     0,
     742,     0,   188,     0,   743,   621,   744,     0,   745,   746,
     747,   748,   749,   750,    70,     0,     0,   173,     0,   628,
       0,   189,   190,   751,   629,     0,     0,     0,   623,   624,
     625,   626,   627,     0,   174,     0,    20,     0,   175,   176,
     177,   178,   179,     0,     0,   170,     0,   180,     0,     0,
       0,   171,   172,   181,   618,   619,   182,     0,     0,     0,
       0,   183,   184,   185,     0,     0,   186,   187,     0,     0,
       0,   188,     0,     0,  1098,     0,     0,     7,     8,     9,
      10,    88,     0,     0,     0,     0,   173,     0,   628,     0,
     189,   190,     0,   629,     0,     0,     0,   623,   624,   625,
     626,   627,     0,   174,     0,    20,   170,   175,   176,   177,
     178,   179,   171,   172,     0,     0,   180,     0,    14,    15,
      16,     0,   181,     0,     0,   182,     0,     0,     0,     0,
     183,   184,   185,    18,     0,   186,   187,     0,     0,     0,
     188,     0,     0,     0,     0,     0,     0,   173,   938,   939,
     940,   941,   942,   943,     0,   944,   945,   628,     0,   189,
     190,     0,   629,     0,   174,   946,    20,     0,   175,   176,
     177,   178,   179,     0,     0,     0,     0,   180,     0,   947,
       0,     0,     0,   181,     0,     0,   182,     0,     0,     0,
       0,   183,   184,   185,     0,     0,   186,   187,     0,     0,
       0,   188,   170,     7,     8,     9,    10,    11,   171,   172,
     938,   939,   940,   941,   942,   943,     0,   944,   945,     0,
     189,   190,     0,   452,     0,     0,     0,   946,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   947,     0,   173,    14,    15,    16,     0,     0,     0,
       0,     0,     0,   948,     0,     0,     0,     0,     0,    18,
     174,    19,    20,     0,   175,   176,   177,   178,   179,     0,
     170,     7,     0,   180,    10,    11,   171,   172,     0,   181,
       0,     0,   182,     0,     0,     0,     0,   183,   184,   185,
       0,     0,   186,   187,     0,     0,     0,   188,     0,     0,
       0,     0,     7,     8,     9,    10,   124,     0,     0,     0,
       0,   173,    14,    15,    16,  1045,   189,   190,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    18,   174,    19,
      20,   170,   175,   176,   177,   178,   179,   171,   172,     0,
       0,   180,     0,    14,    15,    16,     0,   181,     0,     0,
     182,     0,     0,     0,     0,   183,   184,   185,    18,     0,
     186,   187,     0,     0,     0,   188,     0,     0,     0,     0,
       0,   170,   173,     0,     0,     0,     0,   171,   172,     0,
       0,     0,     0,     0,   189,   190,     0,     0,     0,   174,
       0,    20,     0,   175,   176,   177,   178,   179,     0,     0,
       0,     0,   180,     0,     0,     0,     0,     0,   181,     0,
       0,   182,   173,   170,     0,     0,   183,   184,   185,   171,
     172,   186,   187,     0,     0,     0,   188,     0,     0,   174,
       0,    20,     0,   175,   176,   177,   178,   179,     0,     0,
       0,     0,   180,   755,     0,   189,   190,     0,   181,     0,
       0,   182,     0,   170,   173,     0,   183,   184,   185,   171,
     172,   186,   187,     0,     0,     0,   188,     0,     0,     0,
       0,   174,     0,    20,     0,   175,   176,   177,   178,   179,
       0,     0,     0,     0,   180,   189,   190,     0,     0,     0,
     181,     0,     0,   182,   173,   480,     0,     0,   183,   184,
     185,   171,   172,   186,   187,     0,     0,     0,   265,     0,
       0,   174,     0,    20,     0,   175,   176,   177,   178,   179,
       0,     0,     0,     0,   180,     0,     0,   189,   190,     0,
     181,     0,     0,   182,     0,     0,   173,     0,   183,   184,
     185,     0,     0,   186,   187,     0,     0,     0,   267,     0,
       0,     0,     0,   174,     0,    20,     0,   175,   176,   177,
     178,   179,     0,     0,     0,     0,   180,   189,   190,     0,
       0,     0,   181,     0,     0,   182,     0,     0,     0,     0,
     183,   184,   185,     0,     0,   186,   187,     0,     0,     6,
     188,  -120,     7,     8,     9,    10,    11,     0,     0,     0,
       0,    12,     7,     8,     9,    10,   128,     0,     0,   189,
     190,     0,     0,     0,     0,     0,     0,     0,     0,   819,
      13,   828,     0,   829,     0,   830,   831,     0,   832,   833,
       0,     0,     0,    14,    15,    16,     0,     0,   834,   835,
       0,     0,     0,    14,    15,    16,     0,    17,    18,     0,
      19,    20,   836,     0,     0,     0,   837,     0,    18,   271,
      19,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,     0,     0,  -120,     0,
       0,     0,     0,   269,   270,   271,  -120,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,     0,    21,   952,   953,   954,   955,   956,   957,
     873,   958,   959,  -255,     0,     0,   960,   961,     0,     0,
       0,   962,     0,     0,     0,     0,   838,     0,     0,   820,
       0,     0,     0,     0,     0,   963,   952,   953,   954,   955,
     956,   957,     0,   958,   959,     0,     0,     0,   960,   961,
       0,     0,     0,   962,     7,     8,     9,    10,    11,     0,
       0,   687,     7,     8,     9,    10,    83,   963,     0,     0,
       0,     0,     0,     0,   269,   270,   271,   874,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,     0,     0,    14,    15,    16,     0,     0,
       0,     0,     0,    14,    15,    16,     0,     0,     0,   964,
      18,     0,    19,     7,     8,     9,    10,   119,    18,     0,
      19,     7,     8,     9,    10,    92,     0,     0,     0,     0,
       0,     7,     8,     9,    10,   128,     0,     0,     0,     0,
       0,  1059,     7,     8,     9,    10,    97,     0,     0,     7,
       8,     9,    10,   133,    14,    15,    16,     0,     0,     0,
       0,     0,    14,    15,    16,     0,     0,     0,     0,    18,
       0,    19,    14,    15,    16,     0,     0,    18,     0,    19,
       0,     0,     0,    14,    15,    16,     0,    18,     0,    19,
      14,    15,    16,     0,     0,     0,     0,     0,    18,     0,
       0,     0,     0,     0,     0,    18,   269,   270,   271,     0,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   269,   270,   271,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,     0,     0,     0,     0,     0,     0,   269,
     270,   271,  1018,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   449,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,     0,     0,
     269,   270,   271,   450,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,     0,
     269,   270,   271,   598,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,     0,
     909,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   818,
     269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,     0,
    1112,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,  1124,
     269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,     0,
    1183,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,  1184,
     269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,     0,
    1196,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,  1197,
     269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,     0,
    1220,     0,     0,    19,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   269,   270,   271,  1233,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   269,   270,   271,  1079,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   269,   270,   271,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285
};

static const short yycheck[] =
{
      74,    79,    76,   236,   332,    55,    56,    57,   155,   563,
       3,     3,     5,     5,   474,   156,   888,   612,   163,   330,
     579,    14,    15,    16,   416,   336,   328,   482,   305,   577,
       3,   569,     5,   320,   426,    28,    27,    30,   416,    32,
       0,    34,   416,    36,   556,    38,   772,    40,   426,    42,
       1,   511,   426,     3,  1102,     5,     1,   227,   416,   289,
     482,     1,     3,     4,   524,     8,    76,   527,   426,    62,
      62,     1,   242,     1,   227,    52,   253,   254,    10,   232,
       3,     4,    21,    76,    23,    78,     1,   264,   548,    62,
       1,   556,   269,   270,    71,    72,    73,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    86,
     397,     3,    62,     5,   188,     3,     4,   779,    95,    62,
     782,   783,  1170,   785,    76,     5,   586,   104,   588,     3,
       4,   181,  1004,   175,   176,     3,   113,   732,     3,     4,
      76,   188,    62,   185,     0,   122,   568,   569,   226,   191,
     615,   229,   202,     3,   131,   233,   668,     0,    78,   201,
     708,   314,   888,   140,    43,   156,   714,    99,   716,   120,
      62,   563,   149,   403,     3,   120,   116,    62,   188,   120,
     572,   351,    62,     3,   471,   563,   116,    98,   116,   563,
      78,   265,    98,   267,   572,   188,   246,   120,   572,   376,
     377,   116,    90,    98,   763,   563,   483,   352,   255,   354,
      98,   204,   713,   206,   572,   208,   290,   210,   265,  1162,
     267,   214,    90,   216,   115,    90,   727,   822,   219,   220,
      98,    99,   242,    98,   227,     3,   188,     5,   288,   232,
      90,   291,   316,    78,   221,   255,   120,    98,    98,   242,
     242,   404,   188,   331,   332,   265,     6,   267,     8,   337,
       8,    90,   255,   801,   802,    21,   443,    23,  1211,    98,
      99,    78,   265,   450,   267,   353,     3,     4,  1004,   114,
     457,    76,    98,    78,   397,   518,     8,   589,    98,   591,
     242,    17,  1164,    19,    62,    21,    22,  1240,    24,    25,
     374,   761,    98,   255,  1247,   120,   242,   114,    34,   359,
     423,   120,    62,   265,    62,   267,    98,    99,   309,   255,
     120,   314,    48,   436,   437,   367,   122,   405,   558,   265,
     122,   267,   114,   788,   325,   326,  1208,    76,   515,    78,
      62,   351,   797,   417,   418,    78,   396,   340,  1010,   342,
     810,   344,   402,   346,   467,   468,   469,   470,   351,   351,
     537,   115,   916,    90,     3,   119,   788,   114,    17,    18,
      19,    17,   119,    19,    20,   797,   114,   419,    24,   801,
     802,   114,    31,    59,  1256,    31,    98,  1259,    44,    45,
     114,     3,     4,   188,   444,   119,   122,    59,   114,   351,
      62,   115,   449,   119,   451,   119,   519,   485,   521,    98,
     587,   404,   115,    75,     3,   351,   119,    17,    98,    19,
      20,   598,    98,    99,    24,    62,   603,     5,     6,     7,
       8,    31,   227,   122,    98,   612,   613,   232,  1164,   449,
     581,   451,   115,   590,   115,   622,   119,   242,   119,   188,
     528,   529,   119,   115,   532,   114,   449,   119,   451,    75,
     255,    98,    99,   791,   416,   793,   114,    45,    46,    47,
     265,   119,   267,   122,   426,   115,   122,   237,    90,   119,
     416,    97,  1208,    99,   661,   114,    98,    99,   227,    78,
     426,   541,     1,   232,     3,     4,   397,   449,   491,   451,
     493,    90,   495,   242,   497,     8,   556,    98,    99,    98,
    1172,   397,   789,   449,     8,   451,   255,   630,   596,   314,
     673,   798,   122,   114,   916,    76,   265,   114,   267,   682,
    1256,     4,   119,  1259,     7,     8,   713,   115,   916,   115,
      98,   718,   916,   119,   721,   305,   972,    17,    18,    19,
     727,   625,   602,   730,   114,   732,   351,   116,   916,   119,
     986,    31,   572,   556,   556,   615,   467,   468,   469,   470,
      98,    99,    45,    46,    47,   314,   626,   568,   569,   572,
     114,   467,   468,   469,   470,   119,   114,    60,   114,    62,
     581,     4,     5,     6,     7,     8,   674,   675,   114,   572,
     678,   592,   116,   119,   717,   683,   684,   720,   686,   404,
      90,   563,   351,   115,   114,  1041,   763,   119,    98,    99,
     572,   416,   572,   764,     7,     8,   668,   563,  1054,   114,
      62,   426,    45,    46,    47,   812,   572,   188,     6,   816,
     115,   719,   819,    78,   722,   822,    78,    60,   114,   882,
     410,   115,   122,   119,   449,   119,   451,   114,    26,    27,
      28,    64,    45,    46,    47,   404,    98,    99,   428,   429,
      88,    89,    90,    91,    92,   668,   668,   416,  1226,  1227,
     673,   115,   116,   757,   995,   114,   997,   426,   681,   682,
     119,   242,   348,   349,   114,   688,   873,   690,    21,   692,
      23,   694,   115,   696,   255,   698,   114,   700,     6,   702,
     449,   119,   451,   791,   265,   793,   267,   714,    17,   716,
      19,    20,   482,   483,    48,    24,    50,    51,    52,    53,
      29,    30,    31,   811,    93,    94,    98,   815,    97,    98,
      99,   100,    28,    29,    30,    31,  1206,  1207,     3,     4,
      36,    37,    38,    39,    28,    29,    30,    31,    98,    99,
     937,   114,    36,    37,    38,    39,   119,   114,   563,    10,
     114,    75,   119,   764,   951,   119,   923,   572,    98,    99,
     893,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,   788,   789,   115,
     351,   115,   467,   468,   878,   470,   797,   798,   568,   569,
     801,   802,   114,    14,    15,    16,   890,   119,    17,   796,
      19,    20,   896,   122,   563,    24,    32,    33,    34,    35,
      29,    30,    31,   572,    40,    41,    42,    43,    75,   917,
     918,   114,   920,   499,   500,   122,   119,   925,   119,   927,
       4,     5,     6,     7,     8,   115,   116,   513,   514,    79,
      80,    81,    82,    83,    98,    99,  1043,  1044,    88,    89,
      90,    90,    91,    92,    32,    33,    34,    35,   673,     3,
    1057,  1058,    40,    41,    42,    43,   119,   682,    98,    99,
     114,    45,    46,    47,  1007,   119,    98,    99,   449,   114,
     451,     7,     8,     1,   119,     3,    60,   114,    62,   114,
     114,     9,    10,    78,   119,   993,   676,   677,   204,   205,
     206,   207,   114,   122,   998,   999,   121,  1001,   195,   196,
     204,   205,   206,   207,   673,   325,   326,   114,   114,    45,
      46,    47,   119,   682,   114,     4,    44,   114,     7,     8,
     788,   789,   119,     1,    75,   202,     4,     5,     6,     7,
       8,   115,   121,    61,   916,    63,   116,    65,    66,    67,
      68,    69,   116,   116,  1151,   120,    74,   633,   634,   114,
     916,    78,    80,     1,   119,    83,    45,    46,    47,   114,
      88,    89,    90,   116,   119,    93,    94,    45,    46,    47,
      98,    60,   208,   209,   210,   211,   114,   114,  1001,  1001,
     114,   119,    60,   114,   114,   119,   121,    59,  1195,   117,
     118,   572,   120,  1097,    76,   121,    78,   115,   788,   789,
      86,    87,    88,    89,    90,    91,    92,   797,   798,   115,
     119,   801,   802,     7,     8,  1158,  1159,   119,   704,   705,
     208,   209,   210,   211,   340,   341,   342,   343,   116,     4,
       5,     6,     7,     8,   114,   114,   340,   341,   342,   343,
     119,   114,   120,     1,   114,    78,     4,     5,     6,     7,
       8,    45,    46,    47,     1,     3,    78,     4,  1162,     1,
       7,     8,     4,     5,     6,     7,     8,   116,    62,    11,
      45,    46,    47,  1153,  1097,  1097,   114,    76,   114,    78,
     119,   119,    78,   119,    10,    60,    78,    45,    46,    47,
     115,   916,     5,     6,     7,     8,   114,  1201,    45,    46,
      47,   119,    60,    45,    46,    47,   188,  1211,   344,   345,
     346,   347,   115,    60,    59,    62,    63,    62,    60,   114,
       8,   911,   912,   913,   119,   402,     7,     8,   115,   115,
      75,   116,    45,    46,    47,   115,  1240,   114,  1242,   120,
     115,   114,   119,  1247,   122,   227,   119,   916,   122,    62,
     232,   122,   122,    98,    99,   122,   344,   345,   346,   347,
     242,   122,   120,   115,    45,    46,    47,    98,   115,   116,
     115,    98,   114,   255,   119,   491,   492,   114,    49,   495,
     496,    62,   119,   265,    52,   267,   120,   491,   492,   188,
     114,   495,   496,     1,   116,   119,     4,     5,     6,     7,
       8,     1,   115,     3,     4,     5,     6,     7,     8,   116,
       3,    11,    98,   115,   491,   492,   493,   494,   495,   496,
     497,   498,     4,     5,     6,     7,     8,    78,   227,   114,
     114,   114,   314,   232,   119,   119,   119,    45,    46,    47,
      14,    15,    16,   242,   114,    45,    46,    47,   114,   119,
      98,    59,    60,   119,    62,    98,   255,   493,   494,    98,
      60,   497,   498,    45,    46,    47,   265,    75,   267,   351,
      85,    86,    87,    88,    89,    90,    91,    92,    60,    98,
      62,    98,     1,   114,    98,     4,     5,     6,     7,     8,
      98,    99,    98,     4,     5,     6,     7,     8,     3,     4,
       5,     6,     7,     8,    98,   493,   494,   115,    98,   497,
     498,   119,   120,    98,   114,   314,    50,     5,     6,     7,
       8,     4,   404,    98,     7,     8,    45,    46,    47,    98,
      98,    98,    98,   115,    45,    46,    47,    98,    98,    98,
      59,    60,    98,    62,    98,    98,    98,    98,    98,    60,
      98,    62,   351,    98,    98,    98,    75,    45,    46,    47,
     861,    98,    45,    46,    47,    98,    98,   449,    98,   451,
      98,    98,   688,   689,   690,   691,    98,    60,    98,    62,
     696,   697,   698,   699,   688,   689,   690,   691,    98,    98,
      98,    98,   696,   697,   698,   699,   115,    98,    98,    98,
     119,   120,   114,    98,   115,   404,    78,    78,   114,   122,
     114,   688,   689,   690,   691,   692,   693,   694,   695,   696,
     697,   698,   699,   700,   701,   702,   703,   115,   114,   122,
     931,   932,   933,     1,    78,   936,     4,   115,   114,     7,
       8,   114,     1,    32,   114,     4,     5,     6,     7,     8,
     449,   115,   451,   115,   114,   116,   692,   693,   694,   695,
      78,   114,   114,    78,   700,   701,   702,   703,   969,   970,
     971,    98,   119,   122,   975,   976,   977,    45,    46,    47,
      36,   121,   983,   984,   985,   115,    45,    46,    47,   115,
     572,   114,    60,    10,    62,    63,   115,    98,    10,   115,
      59,    60,   114,    62,   692,   693,   694,   695,   114,    10,
     115,   114,   700,   701,   702,   703,    75,   321,   572,     1,
     572,     3,     4,   403,   430,     7,     8,     9,    10,   572,
       5,     6,     7,     8,  1035,  1036,  1037,  1038,  1039,    98,
      99,  1042,   572,   402,   426,   309,   587,  1048,  1049,  1050,
    1051,  1052,   426,   730,  1055,   611,   115,   801,   788,   446,
     119,   120,    44,    45,    46,    47,   444,   351,   717,  1005,
      45,    46,    47,   572,   720,   398,   359,   637,    60,    61,
      62,    63,  1007,    65,    66,    67,    68,    69,  1097,   780,
       4,   673,    74,     7,     8,   871,   839,  1101,    80,  1056,
     682,    83,     5,     6,     7,     8,    88,    89,    90,  1110,
     781,    93,    94,   854,   847,    -1,    98,   965,   949,  1203,
    1205,   485,     4,     5,     6,     7,     8,     5,     6,     7,
       8,    45,    46,    47,    -1,   117,   118,   500,   120,  1140,
     115,    -1,    45,    46,    47,    -1,    60,    -1,  1149,    -1,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    12,    13,    45,    46,    47,    -1,    45,    46,    47,
      -1,    22,    -1,    -1,   673,    -1,    -1,    -1,    60,    -1,
    1181,    32,    -1,   682,    62,     4,     5,     6,     7,     8,
      -1,  1192,    -1,    44,    45,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    45,    46,    47,    80,
      -1,    -1,    83,   115,    -1,    -1,    -1,    88,    89,    90,
      -1,    60,    93,    94,    -1,    -1,    -1,    98,    -1,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      12,    13,    -1,    -1,   115,   116,   117,   118,    -1,   120,
      22,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      32,    -1,    -1,     4,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    44,    45,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    -1,    -1,
      -1,    -1,    74,    -1,    45,    46,    47,    -1,    80,    -1,
      -1,    83,     5,     6,     7,     8,    88,    89,    90,    60,
      -1,    93,    94,    -1,    -1,    -1,    98,    -1,     1,    -1,
       3,     4,    -1,    -1,    -1,    -1,     9,    10,    -1,    12,
      13,    -1,    -1,   115,    -1,   117,   118,    -1,   120,    22,
      -1,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    32,
      -1,    -1,     5,     6,     7,     8,    -1,    -1,    -1,    62,
      -1,    44,    -1,    -1,   115,    48,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    -1,
      63,    -1,    65,    66,    67,    68,    69,    -1,    -1,    -1,
      -1,    74,    45,    46,    47,    -1,    -1,    80,    -1,    -1,
      83,     5,     6,     7,     8,    88,    89,    90,    -1,    62,
      93,    94,   115,    -1,    -1,    98,    -1,     1,    -1,     3,
       4,    -1,    -1,    -1,    -1,     9,    10,    -1,    12,    13,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,    22,    -1,
      -1,    45,    46,    47,    -1,    -1,    -1,    -1,    32,    -1,
      -1,     5,     6,     7,     8,    -1,    -1,    -1,    62,    -1,
      44,    -1,   115,    -1,    48,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    -1,    63,
      -1,    65,    66,    67,    68,    69,     1,    -1,     3,     4,
      74,    45,    46,    47,     9,    10,    80,    -1,    -1,    83,
       5,     6,     7,     8,    88,    89,    90,    -1,    -1,    93,
      94,   115,    29,    -1,    98,    -1,    33,    -1,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    -1,    -1,    44,
      -1,   115,    -1,   117,   118,    52,   120,    -1,    -1,    -1,
      45,    46,    47,    -1,    -1,    -1,    61,    -1,    63,    -1,
      65,    66,    67,    68,    69,     1,    -1,     3,     4,    74,
      -1,   115,    -1,     9,    10,    80,    -1,    -1,    83,     5,
       6,     7,     8,    88,    89,    90,    -1,    -1,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,     5,
       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    44,    -1,
      -1,   116,   117,   118,    -1,   120,    -1,    -1,    -1,    45,
      46,    47,    -1,    -1,    -1,    61,     1,    63,     3,    65,
      66,    67,    68,    69,     9,    10,    62,    -1,    74,    45,
      46,    47,    -1,    -1,    80,    -1,    -1,    83,    -1,    -1,
      -1,    -1,    88,    89,    90,    -1,    62,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,     1,    44,
       3,    -1,    -1,    -1,    -1,    -1,     9,    10,    -1,    -1,
     116,   117,   118,    -1,   120,    -1,    61,    -1,    63,    -1,
      65,    66,    67,    68,    69,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    -1,    80,    -1,    -1,    83,    -1,
      -1,    44,    -1,    88,    89,    90,    -1,    -1,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    61,    -1,
      63,     3,    65,    66,    67,    68,    69,     9,    10,    -1,
      -1,    74,   117,   118,    -1,   120,    -1,    80,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    88,    89,    90,    -1,    -1,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,    -1,    -1,
      -1,     3,    44,    -1,    -1,    -1,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,   117,   118,    -1,   120,    -1,    61,
      -1,    63,    -1,    65,    66,    67,    68,    69,    -1,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    83,    44,    -1,    -1,    -1,    88,    89,    90,    -1,
      -1,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,    61,
      -1,    63,    -1,    65,    66,    67,    68,    69,    -1,    -1,
       4,    -1,    74,     7,     8,   117,   118,    -1,    80,   121,
      -1,    83,     5,     6,     7,     8,    88,    89,    90,    -1,
      -1,    93,    94,    -1,    -1,    -1,    98,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    12,    13,    -1,
      -1,    45,    46,    47,    -1,   117,   118,    22,    -1,   121,
      -1,    -1,    45,    46,    47,    -1,    60,    32,    62,    -1,
       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    -1,    -1,     3,     4,    74,
      45,    46,    47,     9,    10,    80,    12,    13,    83,    -1,
      -1,    -1,    -1,    88,    89,    90,    22,    62,    93,    94,
      -1,    -1,    -1,    98,    -1,    -1,    32,    -1,    -1,     5,
       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    44,    -1,
     115,    -1,   117,   118,    -1,   120,    -1,    -1,    54,    55,
      56,    57,    58,    59,    -1,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    -1,    -1,     3,    -1,    74,    45,
      46,    47,     9,    10,    80,    12,    13,    83,    -1,    -1,
      -1,    -1,    88,    89,    90,    -1,    -1,    93,    94,    -1,
      29,    -1,    98,    -1,    33,    32,    35,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    -1,    44,    -1,   115,
      -1,   117,   118,    52,   120,    -1,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    -1,    63,    -1,    65,    66,
      67,    68,    69,    -1,    -1,     3,    -1,    74,    -1,    -1,
      -1,     9,    10,    80,    12,    13,    83,    -1,    -1,    -1,
      -1,    88,    89,    90,    -1,    -1,    93,    94,    -1,    -1,
      -1,    98,    -1,    -1,    32,    -1,    -1,     4,     5,     6,
       7,     8,    -1,    -1,    -1,    -1,    44,    -1,   115,    -1,
     117,   118,    -1,   120,    -1,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    -1,    63,     3,    65,    66,    67,
      68,    69,     9,    10,    -1,    -1,    74,    -1,    45,    46,
      47,    -1,    80,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      88,    89,    90,    60,    -1,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    44,    17,    18,
      19,    20,    21,    22,    -1,    24,    25,   115,    -1,   117,
     118,    -1,   120,    -1,    61,    34,    63,    -1,    65,    66,
      67,    68,    69,    -1,    -1,    -1,    -1,    74,    -1,    48,
      -1,    -1,    -1,    80,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    88,    89,    90,    -1,    -1,    93,    94,    -1,    -1,
      -1,    98,     3,     4,     5,     6,     7,     8,     9,    10,
      17,    18,    19,    20,    21,    22,    -1,    24,    25,    -1,
     117,   118,    -1,   120,    -1,    -1,    -1,    34,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    48,    -1,    44,    45,    46,    47,    -1,    -1,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    -1,
       3,     4,    -1,    74,     7,     8,     9,    10,    -1,    80,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    88,    89,    90,
      -1,    -1,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
      -1,    -1,     4,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    44,    45,    46,    47,   122,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,
      63,     3,    65,    66,    67,    68,    69,     9,    10,    -1,
      -1,    74,    -1,    45,    46,    47,    -1,    80,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    88,    89,    90,    60,    -1,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,    -1,    -1,
      -1,     3,    44,    -1,    -1,    -1,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    61,
      -1,    63,    -1,    65,    66,    67,    68,    69,    -1,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    83,    44,     3,    -1,    -1,    88,    89,    90,     9,
      10,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,    61,
      -1,    63,    -1,    65,    66,    67,    68,    69,    -1,    -1,
      -1,    -1,    74,   115,    -1,   117,   118,    -1,    80,    -1,
      -1,    83,    -1,     3,    44,    -1,    88,    89,    90,     9,
      10,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,    -1,
      -1,    61,    -1,    63,    -1,    65,    66,    67,    68,    69,
      -1,    -1,    -1,    -1,    74,   117,   118,    -1,    -1,    -1,
      80,    -1,    -1,    83,    44,     3,    -1,    -1,    88,    89,
      90,     9,    10,    93,    94,    -1,    -1,    -1,    98,    -1,
      -1,    61,    -1,    63,    -1,    65,    66,    67,    68,    69,
      -1,    -1,    -1,    -1,    74,    -1,    -1,   117,   118,    -1,
      80,    -1,    -1,    83,    -1,    -1,    44,    -1,    88,    89,
      90,    -1,    -1,    93,    94,    -1,    -1,    -1,    98,    -1,
      -1,    -1,    -1,    61,    -1,    63,    -1,    65,    66,    67,
      68,    69,    -1,    -1,    -1,    -1,    74,   117,   118,    -1,
      -1,    -1,    80,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      88,    89,    90,    -1,    -1,    93,    94,    -1,    -1,     1,
      98,     3,     4,     5,     6,     7,     8,    -1,    -1,    -1,
      -1,    13,     4,     5,     6,     7,     8,    -1,    -1,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,
      32,    17,    -1,    19,    -1,    21,    22,    -1,    24,    25,
      -1,    -1,    -1,    45,    46,    47,    -1,    -1,    34,    35,
      -1,    -1,    -1,    45,    46,    47,    -1,    59,    60,    -1,
      62,    63,    48,    -1,    -1,    -1,    52,    -1,    60,    77,
      62,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    75,    76,    77,    98,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,   115,    17,    18,    19,    20,    21,    22,
      11,    24,    25,   115,    -1,    -1,    29,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,   122,    -1,    -1,   121,
      -1,    -1,    -1,    -1,    -1,    48,    17,    18,    19,    20,
      21,    22,    -1,    24,    25,    -1,    -1,    -1,    29,    30,
      -1,    -1,    -1,    34,     4,     5,     6,     7,     8,    -1,
      -1,    11,     4,     5,     6,     7,     8,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,
      -1,    -1,    -1,    45,    46,    47,    -1,    -1,    -1,   122,
      60,    -1,    62,     4,     5,     6,     7,     8,    60,    -1,
      62,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
      -1,   122,     4,     5,     6,     7,     8,    -1,    -1,     4,
       5,     6,     7,     8,    45,    46,    47,    -1,    -1,    -1,
      -1,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    60,
      -1,    62,    45,    46,    47,    -1,    -1,    60,    -1,    62,
      -1,    -1,    -1,    45,    46,    47,    -1,    60,    -1,    62,
      45,    46,    47,    -1,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    75,    76,    77,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    75,    76,    77,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,   121,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,   119,    75,
      76,    77,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      75,    76,    77,   119,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
      75,    76,    77,   119,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
     115,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,   114,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
     114,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,   114,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
     114,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,   114,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
     114,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,   114,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    -1,
     114,    -1,    -1,    62,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    75,    76,    77,   114,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    75,    76,    77,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short yystos[] =
{
       0,   124,   125,   126,     0,   127,     1,     4,     5,     6,
       7,     8,    13,    32,    45,    46,    47,    59,    60,    62,
      63,   115,   128,   129,   130,   131,   146,   162,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   188,   190,   191,   192,
     193,   194,   203,   204,   208,   231,   232,   233,   234,   239,
     304,   367,   393,   128,   115,   116,    14,    15,    16,   305,
      43,   203,   203,   203,    98,    98,    98,     3,    90,    98,
     196,   200,   230,     8,   190,   191,   203,   208,     8,   190,
     191,   208,     8,   190,   191,   203,   208,     8,   190,   191,
     208,     8,   192,   193,   203,   208,     8,   192,   193,   208,
       8,   192,   193,   203,   208,     8,   192,   193,   208,     8,
     190,   191,   203,   208,     8,   190,   191,   208,     8,   190,
     191,   203,   208,     8,   190,   191,   208,     8,   192,   193,
     203,   208,     8,   192,   193,   208,     8,   192,   193,   203,
     208,     8,   192,   193,   208,   162,   162,   115,   204,     3,
       4,   120,   138,   120,   138,   120,   138,   128,     3,    98,
       3,     9,    10,    44,    61,    65,    66,    67,    68,    69,
      74,    80,    83,    88,    89,    90,    93,    94,    98,   117,
     118,   139,   140,   142,   143,   144,   145,   147,   148,   154,
     278,   393,    98,   140,   165,   166,   167,   168,   169,   170,
     171,   172,   187,   251,   165,   166,   167,   168,   186,   189,
     202,   203,   115,   119,     1,    59,    98,    99,   136,   197,
     259,     4,    90,    98,   195,   198,   225,   226,   230,   196,
     230,   242,   243,   120,   242,   120,   238,   120,   122,     3,
     369,   147,   147,    98,    98,    98,   138,   147,     1,   120,
     140,   251,   147,   114,   119,    98,   143,    98,   143,    75,
      76,    77,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    97,    98,
      99,   100,     1,   116,   267,   276,   147,     7,     8,   138,
     205,   206,   207,   208,   114,   252,   114,   230,   230,   163,
     202,    98,   202,   388,     6,   186,   189,     1,   156,   157,
     158,   159,   266,   285,   202,   189,   202,   115,   119,     1,
     132,   197,    98,   259,   115,     1,   134,   116,     1,   115,
     165,   166,   167,   168,   169,   170,   171,   172,   185,   186,
     244,   393,   235,   116,   236,     1,   138,   249,   250,   237,
     114,   119,   148,   148,   251,   114,   114,   114,   115,   148,
     251,   251,   148,   148,   151,   153,   150,   149,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     138,   141,   142,   140,   138,   114,    64,   271,   272,   273,
     114,   114,   119,    98,    90,    98,   253,   255,   256,   257,
     258,   259,   114,   200,   230,    10,   389,   189,     6,    90,
     121,   140,   115,   137,   266,   158,   286,    75,   226,   226,
     163,   156,   202,   388,   156,   202,   162,   162,   115,   244,
     242,   202,   242,    75,   119,   241,   249,   122,     3,   119,
     119,   119,   120,   147,   114,   114,   140,    78,   148,   148,
     114,   121,   138,   392,     1,   161,   260,   261,   262,   263,
     264,   265,   266,   277,   285,   289,   290,   273,   114,   206,
       3,   141,   189,   202,   378,    98,   259,   114,     1,     3,
      11,   165,   166,   169,   170,   173,   174,   177,   178,   183,
     184,   380,   383,   384,   386,   390,   391,   140,   140,   121,
     121,   285,   160,   183,   184,   201,   114,   198,   225,   133,
      75,   135,   245,   247,   285,   246,   248,   285,   116,   116,
     148,   250,   116,   241,   251,   148,   251,   155,    78,   148,
     115,   119,   161,   289,   290,   161,   289,   290,   285,   289,
     290,   161,   289,   290,   266,   116,   286,   114,   119,   114,
     256,   257,   255,   379,   202,   378,   114,   162,   387,   387,
     114,   115,   119,   114,   119,   121,   121,   286,   115,   162,
     115,   162,     1,   120,   148,   209,   285,   199,   285,   119,
     286,   119,   286,   202,   202,   202,   116,   114,   119,   114,
       1,     3,    97,    99,   120,   138,   148,   211,   212,   213,
     215,   217,   218,   152,   138,   286,   268,     4,    12,    13,
      22,    32,    54,    55,    56,    57,    58,    59,   115,   120,
     138,   140,   164,   181,   182,   188,   269,   275,   279,   301,
     302,   303,   306,   309,   311,   314,   321,   325,   327,   338,
     340,   343,   345,   348,   350,   353,   355,   356,   358,   360,
     361,   362,   363,   364,   366,   367,   370,   371,   393,   142,
     114,   380,     4,    90,    98,   227,   228,   229,   230,   254,
     255,   256,    90,    98,   230,   254,   381,    11,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   385,     3,     1,   274,
     279,   195,   196,   210,   286,   209,   286,   163,    78,   225,
     163,    78,   230,   202,   148,   138,   148,   216,    78,   116,
     119,   240,    75,   218,   215,   148,    10,    14,    15,    16,
     307,    78,    29,    33,    35,    37,    38,    39,    40,    41,
      42,    52,   148,   115,   115,   115,   140,    90,   138,     8,
     372,   285,   115,   162,   162,   115,    48,    50,    51,    52,
      53,   280,   281,   283,   291,   276,   310,   315,   326,   339,
     344,   349,   354,   357,   148,   365,   164,   114,   189,   202,
     202,    98,   259,    98,   259,   202,   203,   189,   202,   202,
     202,   162,   162,   279,   115,   115,   211,   274,   274,   247,
     285,   148,    78,   202,   248,   148,    78,   202,   114,    11,
     121,   211,   214,   213,   215,   122,   122,   122,    17,    19,
      21,    22,    24,    25,    34,    35,    48,    52,   122,   312,
     313,    17,    19,    20,    24,    31,   122,   328,   329,    17,
      18,    19,    31,   122,   341,   342,   122,    98,   122,   122,
     122,    98,   122,    17,    19,    20,    24,    29,    30,    31,
     122,   322,   323,    11,    78,   115,   140,   115,    98,   286,
     195,   219,   225,   196,   222,   230,   282,   293,   284,   295,
      98,    49,     1,   269,   288,     1,    98,   270,   308,   370,
      52,   316,   120,   330,   308,   316,   330,   308,   308,   115,
     308,   228,   229,   229,   388,   388,   382,   227,   230,   254,
     230,   254,   116,   286,   202,   148,   202,   148,   148,   116,
     215,    98,    98,    98,    98,    98,    98,    98,    17,    18,
      19,    20,    21,    22,    24,    25,    34,    48,   122,   351,
     352,    98,    17,    18,    19,    20,    21,    22,    24,    25,
      29,    30,    34,    48,   122,   346,   347,   122,   313,    98,
      98,    98,    98,   122,   329,    98,    98,    98,   122,   342,
       3,   359,   369,    98,    98,    98,    98,    98,   122,   323,
     148,   115,   140,    78,   115,   220,   115,   223,    98,    98,
     288,    98,   140,     1,   292,   287,   289,   290,   140,   317,
     331,   114,   380,   202,   202,   202,   202,   202,   121,   369,
     369,   369,    21,    23,    79,    80,    81,    82,    83,    88,
      89,    90,   368,   369,   148,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,   122,   352,   148,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,   122,
     347,   369,   369,   369,   368,   369,   369,   369,   114,   114,
     369,   369,   369,   368,     6,    26,    27,    28,   324,    78,
      78,   114,   202,   156,   156,   140,   140,    50,   140,   164,
     300,   373,   114,   288,   270,   287,   114,    98,    32,   308,
     332,   333,   334,   335,   337,   114,   114,   114,   114,   114,
      78,   114,   114,   369,   369,   369,   369,   369,    21,    23,
     368,   369,   148,   148,   114,   369,   369,   369,   369,   369,
      21,    23,   368,   369,   324,   148,   148,   114,   114,   114,
      78,   114,   114,   114,   122,   122,   114,   114,   114,    78,
     114,   119,    10,    99,   374,   375,   376,   115,   221,   224,
     114,   114,   296,   115,   299,   115,   300,    36,   116,    32,
     334,   335,   336,   369,   114,   114,   114,   114,   114,   114,
     114,    78,   114,   114,   114,   114,   114,   114,   114,   114,
     114,   114,    78,   114,   114,   119,   114,   114,   369,   369,
     148,    98,   138,    78,   114,   119,   285,   285,   294,   373,
     288,   318,   122,   308,   114,   369,   369,   148,   114,   114,
     114,   140,   121,   374,   115,   376,   286,   286,   288,   115,
     373,   114,   114,   114,   114,    10,    78,   114,   279,   279,
     297,   115,    98,    10,   377,   115,   373,   319,   140,   114,
     119,   114,   373,   114,   115,    10,   298,   114,   288,   320,
     288
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)		\
   ((Current).first_line   = (Rhs)[1].first_line,	\
    (Current).first_column = (Rhs)[1].first_column,	\
    (Current).last_line    = (Rhs)[N].last_line,	\
    (Current).last_column  = (Rhs)[N].last_column)
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 378 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids an empty source file");
		  finish_file ();
		;}
    break;

  case 3:
#line 383 "../../../kgccfe/gnu/c-parse.y"
    {
		  /* In case there were missing closebraces,
		     get us back to the global binding level.  */
		  while (! global_bindings_p ())
		    poplevel (0, 0, 0);
		  /* __FUNCTION__ is defined at file scope ("").  This
		     call may not be necessary as my tests indicate it
		     still works without it.  */
		  finish_fname_decls ();
                  finish_file ();
		;}
    break;

  case 4:
#line 401 "../../../kgccfe/gnu/c-parse.y"
    {yyval.ttype = NULL_TREE; ;}
    break;

  case 6:
#line 402 "../../../kgccfe/gnu/c-parse.y"
    {yyval.ttype = NULL_TREE; ggc_collect(); ;}
    break;

  case 8:
#line 407 "../../../kgccfe/gnu/c-parse.y"
    { parsing_iso_function_signature = false; ;}
    break;

  case 11:
#line 414 "../../../kgccfe/gnu/c-parse.y"
    { STRIP_NOPS (yyvsp[-2].ttype);
		  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR
		       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)
		      || TREE_CODE (yyvsp[-2].ttype) == STRING_CST)
		    assemble_asm (yyvsp[-2].ttype);
		  else
		    error ("argument of `asm' is not a constant string"); ;}
    break;

  case 12:
#line 422 "../../../kgccfe/gnu/c-parse.y"
    { RESTORE_EXT_FLAGS (yyvsp[-1].ttype); ;}
    break;

  case 14:
#line 425 "../../../kgccfe/gnu/c-parse.y"
    {;}
    break;

  case 15:
#line 430 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    error ("ISO C forbids data definition with no type or storage class");
		  else
		    warning ("data definition has no type or storage class");

		  POP_DECLSPEC_STACK; ;}
    break;

  case 16:
#line 437 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 17:
#line 439 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 18:
#line 441 "../../../kgccfe/gnu/c-parse.y"
    { shadow_tag (yyvsp[-1].ttype); ;}
    break;

  case 21:
#line 445 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C does not allow extra `;' outside of a function"); ;}
    break;

  case 22:
#line 451 "../../../kgccfe/gnu/c-parse.y"
    { if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    YYERROR1;
		;}
    break;

  case 23:
#line 456 "../../../kgccfe/gnu/c-parse.y"
    { store_parm_decls (); ;}
    break;

  case 24:
#line 458 "../../../kgccfe/gnu/c-parse.y"
    { DECL_SOURCE_FILE (current_function_decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (current_function_decl) = yyvsp[-1].lineno;
		  finish_function (0, 1);
		  POP_DECLSPEC_STACK; ;}
    break;

  case 25:
#line 463 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 26:
#line 465 "../../../kgccfe/gnu/c-parse.y"
    { if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    YYERROR1;
		;}
    break;

  case 27:
#line 470 "../../../kgccfe/gnu/c-parse.y"
    { store_parm_decls (); ;}
    break;

  case 28:
#line 472 "../../../kgccfe/gnu/c-parse.y"
    { DECL_SOURCE_FILE (current_function_decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (current_function_decl) = yyvsp[-1].lineno;
		  finish_function (0, 1);
		  POP_DECLSPEC_STACK; ;}
    break;

  case 29:
#line 477 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 30:
#line 479 "../../../kgccfe/gnu/c-parse.y"
    { if (! start_function (NULL_TREE, yyvsp[0].ttype,
					all_prefix_attributes))
		    YYERROR1;
		;}
    break;

  case 31:
#line 484 "../../../kgccfe/gnu/c-parse.y"
    { store_parm_decls (); ;}
    break;

  case 32:
#line 486 "../../../kgccfe/gnu/c-parse.y"
    { DECL_SOURCE_FILE (current_function_decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (current_function_decl) = yyvsp[-1].lineno;
		  finish_function (0, 1);
		  POP_DECLSPEC_STACK; ;}
    break;

  case 33:
#line 491 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 36:
#line 500 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = ADDR_EXPR; ;}
    break;

  case 37:
#line 502 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = NEGATE_EXPR; ;}
    break;

  case 38:
#line 504 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = CONVERT_EXPR;
  if (warn_traditional && !in_system_header)
    warning ("traditional C rejects the unary plus operator");
		;}
    break;

  case 39:
#line 509 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = PREINCREMENT_EXPR; ;}
    break;

  case 40:
#line 511 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = PREDECREMENT_EXPR; ;}
    break;

  case 41:
#line 513 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = BIT_NOT_EXPR; ;}
    break;

  case 42:
#line 515 "../../../kgccfe/gnu/c-parse.y"
    { yyval.code = TRUTH_NOT_EXPR; ;}
    break;

  case 43:
#line 519 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;}
    break;

  case 44:
#line 524 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 46:
#line 530 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;}
    break;

  case 47:
#line 532 "../../../kgccfe/gnu/c-parse.y"
    { chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;}
    break;

  case 49:
#line 538 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_indirect_ref (yyvsp[0].ttype, "unary *"); ;}
    break;

  case 50:
#line 541 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  RESTORE_EXT_FLAGS (yyvsp[-1].ttype); ;}
    break;

  case 51:
#line 544 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);
		  overflow_warning (yyval.ttype); ;}
    break;

  case 52:
#line 548 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_label_address_expr (yyvsp[0].ttype); ;}
    break;

  case 53:
#line 550 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation--;
		  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF
		      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))
		    error ("`sizeof' applied to a bit-field");
		  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;}
    break;

  case 54:
#line 556 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation--;
		  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;}
    break;

  case 55:
#line 559 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation--;
		  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;}
    break;

  case 56:
#line 562 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation--;
		  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;}
    break;

  case 57:
#line 565 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;}
    break;

  case 58:
#line 567 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;}
    break;

  case 59:
#line 571 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation++; ;}
    break;

  case 60:
#line 575 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation++; ;}
    break;

  case 61:
#line 579 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation++; ;}
    break;

  case 63:
#line 585 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = c_cast_expr (yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 65:
#line 591 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 66:
#line 593 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 67:
#line 595 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 68:
#line 597 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 69:
#line 599 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 70:
#line 601 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 71:
#line 603 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 72:
#line 605 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 73:
#line 607 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 74:
#line 609 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 75:
#line 611 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 76:
#line 613 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 77:
#line 615 "../../../kgccfe/gnu/c-parse.y"
    { yyvsp[-1].ttype = c_common_truthvalue_conversion
		    (default_conversion (yyvsp[-1].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;}
    break;

  case 78:
#line 619 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;
		  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;}
    break;

  case 79:
#line 622 "../../../kgccfe/gnu/c-parse.y"
    { yyvsp[-1].ttype = c_common_truthvalue_conversion
		    (default_conversion (yyvsp[-1].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;}
    break;

  case 80:
#line 626 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;
		  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;}
    break;

  case 81:
#line 629 "../../../kgccfe/gnu/c-parse.y"
    { yyvsp[-1].ttype = c_common_truthvalue_conversion
		    (default_conversion (yyvsp[-1].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;}
    break;

  case 82:
#line 633 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)
				      - (yyvsp[-4].ttype == boolean_false_node)); ;}
    break;

  case 83:
#line 636 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;
		  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;}
    break;

  case 84:
#line 639 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids omitting the middle term of a ?: expression");
		  /* Make sure first operand is calculated only once.  */
		  yyvsp[0].ttype = save_expr (yyvsp[-1].ttype);
		  yyvsp[-1].ttype = c_common_truthvalue_conversion
		    (default_conversion (yyvsp[0].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;}
    break;

  case 85:
#line 647 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;
		  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;}
    break;

  case 86:
#line 650 "../../../kgccfe/gnu/c-parse.y"
    { char class;
		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);
		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
		  if (IS_EXPR_CODE_CLASS (class))
		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, MODIFY_EXPR);
		;}
    break;

  case 87:
#line 657 "../../../kgccfe/gnu/c-parse.y"
    { char class;
		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);
		  /* This inhibits warnings in
		     c_common_truthvalue_conversion.  */
		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
		  if (IS_EXPR_CODE_CLASS (class))
		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, ERROR_MARK);
		;}
    break;

  case 88:
#line 669 "../../../kgccfe/gnu/c-parse.y"
    {
		  if (yychar == YYEMPTY)
		    yychar = YYLEX;
		  yyval.ttype = build_external_ref (yyvsp[0].ttype, yychar == '(');
		;}
    break;

  case 90:
#line 676 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = fix_string_type (yyval.ttype); ;}
    break;

  case 91:
#line 678 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = fname_decl (C_RID_CODE (yyval.ttype), yyval.ttype); ;}
    break;

  case 92:
#line 680 "../../../kgccfe/gnu/c-parse.y"
    { start_init (NULL_TREE, NULL, 0);
		  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);
		  really_start_incremental_init (yyvsp[-2].ttype); ;}
    break;

  case 93:
#line 684 "../../../kgccfe/gnu/c-parse.y"
    { tree constructor = pop_init_level (0);
		  tree type = yyvsp[-5].ttype;
		  finish_init ();

		  if (pedantic && ! flag_isoc99)
		    pedwarn ("ISO C89 forbids compound literals");
		  yyval.ttype = build_compound_literal (type, constructor);
		;}
    break;

  case 94:
#line 693 "../../../kgccfe/gnu/c-parse.y"
    { char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));
		  if (IS_EXPR_CODE_CLASS (class))
		    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);
		  yyval.ttype = yyvsp[-1].ttype; ;}
    break;

  case 95:
#line 698 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = error_mark_node; ;}
    break;

  case 96:
#line 700 "../../../kgccfe/gnu/c-parse.y"
    { tree saved_last_tree;

		   if (pedantic)
		     pedwarn ("ISO C forbids braced-groups within expressions");
		  pop_label_level ();

		  saved_last_tree = COMPOUND_BODY (yyvsp[-2].ttype);
		  RECHAIN_STMTS (yyvsp[-2].ttype, COMPOUND_BODY (yyvsp[-2].ttype));
		  last_tree = saved_last_tree;
		  TREE_CHAIN (last_tree) = NULL_TREE;
		  if (!last_expr_type)
		    last_expr_type = void_type_node;
		  yyval.ttype = build1 (STMT_EXPR, last_expr_type, yyvsp[-2].ttype);
		  TREE_SIDE_EFFECTS (yyval.ttype) = 1;
		;}
    break;

  case 97:
#line 716 "../../../kgccfe/gnu/c-parse.y"
    {
		  pop_label_level ();
		  last_tree = COMPOUND_BODY (yyvsp[-2].ttype);
		  TREE_CHAIN (last_tree) = NULL_TREE;
		  yyval.ttype = error_mark_node;
		;}
    break;

  case 98:
#line 723 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;}
    break;

  case 99:
#line 725 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_va_arg (yyvsp[-3].ttype, groktypename (yyvsp[-1].ttype)); ;}
    break;

  case 100:
#line 728 "../../../kgccfe/gnu/c-parse.y"
    {
                  tree c;

                  c = fold (yyvsp[-5].ttype);
                  STRIP_NOPS (c);
                  if (TREE_CODE (c) != INTEGER_CST)
                    error ("first argument to __builtin_choose_expr not a constant");
                  yyval.ttype = integer_zerop (c) ? yyvsp[-1].ttype : yyvsp[-3].ttype;
		;}
    break;

  case 101:
#line 738 "../../../kgccfe/gnu/c-parse.y"
    {
		  tree e1, e2;

		  e1 = TYPE_MAIN_VARIANT (groktypename (yyvsp[-3].ttype));
		  e2 = TYPE_MAIN_VARIANT (groktypename (yyvsp[-1].ttype));

		  yyval.ttype = comptypes (e1, e2)
		    ? build_int_2 (1, 0) : build_int_2 (0, 0);
		;}
    break;

  case 102:
#line 748 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;}
    break;

  case 103:
#line 750 "../../../kgccfe/gnu/c-parse.y"
    {
		      yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);
		;}
    break;

  case 104:
#line 754 "../../../kgccfe/gnu/c-parse.y"
    {
                  tree expr = build_indirect_ref (yyvsp[-2].ttype, "->");

			yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);
		;}
    break;

  case 105:
#line 760 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;}
    break;

  case 106:
#line 762 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;}
    break;

  case 107:
#line 768 "../../../kgccfe/gnu/c-parse.y"
    {
	  parsing_iso_function_signature = false; /* Reset after decls.  */
	;}
    break;

  case 108:
#line 775 "../../../kgccfe/gnu/c-parse.y"
    {
	  if (warn_traditional && !in_system_header
	      && parsing_iso_function_signature)
	    warning ("traditional C rejects ISO C style function definitions");
	  parsing_iso_function_signature = false; /* Reset after warning.  */
	;}
    break;

  case 110:
#line 789 "../../../kgccfe/gnu/c-parse.y"
    { ;}
    break;

  case 115:
#line 805 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 116:
#line 807 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 117:
#line 809 "../../../kgccfe/gnu/c-parse.y"
    { shadow_tag_warned (yyvsp[-1].ttype, 1);
		  pedwarn ("empty declaration"); ;}
    break;

  case 118:
#line 812 "../../../kgccfe/gnu/c-parse.y"
    { pedwarn ("empty declaration"); ;}
    break;

  case 119:
#line 821 "../../../kgccfe/gnu/c-parse.y"
    { ;}
    break;

  case 120:
#line 829 "../../../kgccfe/gnu/c-parse.y"
    { pending_xref_error ();
		  PUSH_DECLSPEC_STACK;
		  split_specs_attrs (yyvsp[0].ttype,
				     &current_declspecs, &prefix_attributes);
		  all_prefix_attributes = prefix_attributes; ;}
    break;

  case 121:
#line 840 "../../../kgccfe/gnu/c-parse.y"
    { all_prefix_attributes = chainon (yyvsp[0].ttype, prefix_attributes); ;}
    break;

  case 122:
#line 845 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 123:
#line 847 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 124:
#line 849 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 125:
#line 851 "../../../kgccfe/gnu/c-parse.y"
    { POP_DECLSPEC_STACK; ;}
    break;

  case 126:
#line 853 "../../../kgccfe/gnu/c-parse.y"
    { shadow_tag (yyvsp[-1].ttype); ;}
    break;

  case 127:
#line 855 "../../../kgccfe/gnu/c-parse.y"
    { RESTORE_EXT_FLAGS (yyvsp[-1].ttype); ;}
    break;

  case 128:
#line 912 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 129:
#line 915 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 130:
#line 918 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 131:
#line 924 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 132:
#line 930 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 133:
#line 933 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 134:
#line 939 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 0; ;}
    break;

  case 135:
#line 942 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 136:
#line 948 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 137:
#line 951 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 138:
#line 954 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 139:
#line 957 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 140:
#line 960 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 141:
#line 963 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 142:
#line 966 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 143:
#line 972 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 144:
#line 975 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 145:
#line 978 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 146:
#line 981 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 147:
#line 984 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 148:
#line 987 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 149:
#line 993 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 150:
#line 996 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 151:
#line 999 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 152:
#line 1002 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 153:
#line 1005 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 154:
#line 1008 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 155:
#line 1014 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 156:
#line 1017 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 157:
#line 1020 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 158:
#line 1023 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 159:
#line 1026 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 160:
#line 1032 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 0; ;}
    break;

  case 161:
#line 1035 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 162:
#line 1038 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 163:
#line 1041 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 164:
#line 1047 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 165:
#line 1053 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 166:
#line 1059 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 167:
#line 1068 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 168:
#line 1074 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 169:
#line 1077 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 170:
#line 1080 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 171:
#line 1086 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 172:
#line 1092 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 173:
#line 1098 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 174:
#line 1107 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 175:
#line 1113 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 176:
#line 1116 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 177:
#line 1119 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 178:
#line 1122 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 179:
#line 1125 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 180:
#line 1128 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 181:
#line 1131 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 182:
#line 1137 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 183:
#line 1143 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 184:
#line 1149 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 185:
#line 1158 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 186:
#line 1161 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 187:
#line 1164 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 188:
#line 1167 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 189:
#line 1170 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 190:
#line 1176 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 191:
#line 1179 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 192:
#line 1182 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 193:
#line 1185 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 194:
#line 1188 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 195:
#line 1191 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 196:
#line 1194 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 197:
#line 1200 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 198:
#line 1206 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 199:
#line 1212 "../../../kgccfe/gnu/c-parse.y"
    { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 200:
#line 1221 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;}
    break;

  case 201:
#line 1224 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 202:
#line 1227 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 203:
#line 1230 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 204:
#line 1233 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;}
    break;

  case 261:
#line 1321 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 262:
#line 1323 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 266:
#line 1358 "../../../kgccfe/gnu/c-parse.y"
    { OBJC_NEED_RAW_IDENTIFIER (1);	;}
    break;

  case 269:
#line 1368 "../../../kgccfe/gnu/c-parse.y"
    { /* For a typedef name, record the meaning, not the name.
		     In case of `foo foo, bar;'.  */
		  yyval.ttype = lookup_name (yyvsp[0].ttype); ;}
    break;

  case 270:
#line 1372 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation--; yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;}
    break;

  case 271:
#line 1374 "../../../kgccfe/gnu/c-parse.y"
    { skip_evaluation--; yyval.ttype = groktypename (yyvsp[-1].ttype); ;}
    break;

  case 276:
#line 1391 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 277:
#line 1393 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-1].ttype; ;}
    break;

  case 278:
#line 1398 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
					  chainon (yyvsp[-1].ttype, all_prefix_attributes));
		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;}
    break;

  case 279:
#line 1403 "../../../kgccfe/gnu/c-parse.y"
    { finish_init ();
		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype);
		  if (In_MP_Region && Is_shared_mp_var (yyvsp[-1].ttype))
		    mp_locals[mp_nesting] = chainon (mp_locals[mp_nesting], build_tree_list (NULL, yyvsp[-1].ttype));
		;}
    break;

  case 280:
#line 1409 "../../../kgccfe/gnu/c-parse.y"
    { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
				       chainon (yyvsp[0].ttype, all_prefix_attributes));
		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype);
		  if (In_MP_Region && Is_shared_mp_var (d))
		    mp_locals[mp_nesting] = chainon (mp_locals[mp_nesting], build_tree_list (NULL, d));
                ;}
    break;

  case 281:
#line 1419 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
					  chainon (yyvsp[-1].ttype, all_prefix_attributes));
		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;}
    break;

  case 282:
#line 1424 "../../../kgccfe/gnu/c-parse.y"
    { finish_init ();
		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype);
		  if (In_MP_Region && Is_shared_mp_var (yyvsp[-1].ttype))
		    mp_locals[mp_nesting] = chainon (mp_locals[mp_nesting], build_tree_list (NULL, yyvsp[-1].ttype));
		;}
    break;

  case 283:
#line 1430 "../../../kgccfe/gnu/c-parse.y"
    { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
				       chainon (yyvsp[0].ttype, all_prefix_attributes));
		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype);
		  if (In_MP_Region && Is_shared_mp_var (d))
		    mp_locals[mp_nesting] = chainon (mp_locals[mp_nesting], build_tree_list (NULL, d));
		;}
    break;

  case 284:
#line 1441 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 285:
#line 1443 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 286:
#line 1448 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 287:
#line 1450 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 288:
#line 1455 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype; ;}
    break;

  case 289:
#line 1460 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 290:
#line 1462 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 291:
#line 1467 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 292:
#line 1469 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 293:
#line 1471 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;}
    break;

  case 294:
#line 1473 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;}
    break;

  case 295:
#line 1475 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;}
    break;

  case 303:
#line 1498 "../../../kgccfe/gnu/c-parse.y"
    { really_start_incremental_init (NULL_TREE); ;}
    break;

  case 304:
#line 1500 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = pop_init_level (0); ;}
    break;

  case 305:
#line 1502 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = error_mark_node; ;}
    break;

  case 306:
#line 1508 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids empty initializer braces"); ;}
    break;

  case 310:
#line 1522 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic && ! flag_isoc99)
		    pedwarn ("ISO C89 forbids specifying subobject to initialize"); ;}
    break;

  case 311:
#line 1525 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("obsolete use of designated initializer without `='"); ;}
    break;

  case 312:
#line 1528 "../../../kgccfe/gnu/c-parse.y"
    { set_init_label (yyvsp[-1].ttype);
		  if (pedantic)
		    pedwarn ("obsolete use of designated initializer with `:'"); ;}
    break;

  case 313:
#line 1532 "../../../kgccfe/gnu/c-parse.y"
    {;}
    break;

  case 315:
#line 1538 "../../../kgccfe/gnu/c-parse.y"
    { push_init_level (0); ;}
    break;

  case 316:
#line 1540 "../../../kgccfe/gnu/c-parse.y"
    { process_init_element (pop_init_level (0)); ;}
    break;

  case 317:
#line 1542 "../../../kgccfe/gnu/c-parse.y"
    { process_init_element (yyvsp[0].ttype); ;}
    break;

  case 321:
#line 1553 "../../../kgccfe/gnu/c-parse.y"
    { set_init_label (yyvsp[0].ttype); ;}
    break;

  case 322:
#line 1555 "../../../kgccfe/gnu/c-parse.y"
    { set_init_index (yyvsp[-3].ttype, yyvsp[-1].ttype);
		  if (pedantic)
		    pedwarn ("ISO C forbids specifying range of elements to initialize"); ;}
    break;

  case 323:
#line 1559 "../../../kgccfe/gnu/c-parse.y"
    { set_init_index (yyvsp[-1].ttype, NULL_TREE); ;}
    break;

  case 324:
#line 1564 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids nested functions");

		  push_function_context ();
		  if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    {
		      pop_function_context ();
		      YYERROR1;
		    }
		  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */
		;}
    break;

  case 325:
#line 1577 "../../../kgccfe/gnu/c-parse.y"
    { store_parm_decls (); ;}
    break;

  case 326:
#line 1585 "../../../kgccfe/gnu/c-parse.y"
    { tree decl = current_function_decl;
		  DECL_SOURCE_FILE (decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (decl) = yyvsp[-1].lineno;
		  finish_function (1, 1);
		  pop_function_context ();
		  add_decl_stmt (decl); ;}
    break;

  case 327:
#line 1595 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids nested functions");

		  push_function_context ();
		  if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    {
		      pop_function_context ();
		      YYERROR1;
		    }
		  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */
		;}
    break;

  case 328:
#line 1608 "../../../kgccfe/gnu/c-parse.y"
    { store_parm_decls (); ;}
    break;

  case 329:
#line 1616 "../../../kgccfe/gnu/c-parse.y"
    { tree decl = current_function_decl;
		  DECL_SOURCE_FILE (decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (decl) = yyvsp[-1].lineno;
		  finish_function (1, 1);
		  pop_function_context ();
		  add_decl_stmt (decl); ;}
    break;

  case 332:
#line 1636 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;}
    break;

  case 333:
#line 1638 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 334:
#line 1643 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;}
    break;

  case 335:
#line 1645 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 339:
#line 1660 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 340:
#line 1665 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;}
    break;

  case 342:
#line 1671 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 343:
#line 1676 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;}
    break;

  case 344:
#line 1678 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 345:
#line 1680 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 346:
#line 1682 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;}
    break;

  case 347:
#line 1690 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 348:
#line 1695 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;}
    break;

  case 349:
#line 1697 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 350:
#line 1699 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;}
    break;

  case 352:
#line 1705 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 353:
#line 1707 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 354:
#line 1712 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 355:
#line 1714 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 356:
#line 1719 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 357:
#line 1721 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 358:
#line 1732 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);
		  /* Start scope of tag before parsing components.  */
		;}
    break;

  case 359:
#line 1736 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;}
    break;

  case 360:
#line 1738 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),
				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
		;}
    break;

  case 361:
#line 1742 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;}
    break;

  case 362:
#line 1744 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;}
    break;

  case 363:
#line 1746 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),
				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
		;}
    break;

  case 364:
#line 1750 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = start_enum (yyvsp[-1].ttype); ;}
    break;

  case 365:
#line 1752 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),
				    chainon (yyvsp[-7].ttype, yyvsp[0].ttype)); ;}
    break;

  case 366:
#line 1755 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = start_enum (NULL_TREE); ;}
    break;

  case 367:
#line 1757 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),
				    chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;}
    break;

  case 368:
#line 1763 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;}
    break;

  case 369:
#line 1765 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;}
    break;

  case 370:
#line 1767 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype);
		  /* In ISO C, enumerated types can be referred to
		     only if already defined.  */
		  if (pedantic && !COMPLETE_TYPE_P (yyval.ttype))
		    pedwarn ("ISO C forbids forward references to `enum' types"); ;}
    break;

  case 374:
#line 1782 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic && ! flag_isoc99)
		    pedwarn ("comma at end of enumerator list"); ;}
    break;

  case 375:
#line 1788 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 376:
#line 1790 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
		  pedwarn ("no semicolon at end of struct or union"); ;}
    break;

  case 377:
#line 1795 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 378:
#line 1797 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;}
    break;

  case 379:
#line 1799 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("extra semicolon in struct or union specified"); ;}
    break;

  case 380:
#line 1805 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;}
    break;

  case 381:
#line 1808 "../../../kgccfe/gnu/c-parse.y"
    {
		  /* Support for unnamed structs or unions as members of
		     structs or unions (which is [a] useful and [b] supports
		     MS P-SDK).  */
		  if (pedantic)
		    pedwarn ("ISO C doesn't support unnamed structs/unions");

		  yyval.ttype = grokfield(yyvsp[-1].filename, yyvsp[0].lineno, NULL, current_declspecs, NULL_TREE);
		  POP_DECLSPEC_STACK; ;}
    break;

  case 382:
#line 1818 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;}
    break;

  case 383:
#line 1821 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids member declarations with no members");
		  shadow_tag(yyvsp[0].ttype);
		  yyval.ttype = NULL_TREE; ;}
    break;

  case 384:
#line 1826 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 385:
#line 1828 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  RESTORE_EXT_FLAGS (yyvsp[-1].ttype); ;}
    break;

  case 387:
#line 1835 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-3].ttype, yyvsp[0].ttype); ;}
    break;

  case 389:
#line 1841 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-3].ttype, yyvsp[0].ttype); ;}
    break;

  case 390:
#line 1846 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;}
    break;

  case 391:
#line 1850 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;}
    break;

  case 392:
#line 1853 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;}
    break;

  case 393:
#line 1859 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;}
    break;

  case 394:
#line 1863 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;}
    break;

  case 395:
#line 1866 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;}
    break;

  case 397:
#line 1878 "../../../kgccfe/gnu/c-parse.y"
    { if (yyvsp[-2].ttype == error_mark_node)
		    yyval.ttype = yyvsp[-2].ttype;
		  else
		    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;}
    break;

  case 398:
#line 1883 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = error_mark_node; ;}
    break;

  case 399:
#line 1889 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 400:
#line 1891 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 401:
#line 1896 "../../../kgccfe/gnu/c-parse.y"
    { pending_xref_error ();
		  yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 402:
#line 1899 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 403:
#line 1904 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 405:
#line 1910 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 NULL_TREE),
					all_prefix_attributes); ;}
    break;

  case 406:
#line 1914 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[0].ttype),
					all_prefix_attributes); ;}
    break;

  case 407:
#line 1918 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes)); ;}
    break;

  case 411:
#line 1931 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 412:
#line 1936 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 413:
#line 1938 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;}
    break;

  case 414:
#line 1943 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;}
    break;

  case 415:
#line 1945 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 416:
#line 1947 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 1); ;}
    break;

  case 417:
#line 1949 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 418:
#line 1951 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, NULL_TREE, 1); ;}
    break;

  case 419:
#line 1958 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_array_declarator (yyvsp[-1].ttype, yyvsp[-2].ttype, 0, 0); ;}
    break;

  case 420:
#line 1960 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_array_declarator (NULL_TREE, yyvsp[-1].ttype, 0, 0); ;}
    break;

  case 421:
#line 1962 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_array_declarator (NULL_TREE, yyvsp[-2].ttype, 0, 1); ;}
    break;

  case 422:
#line 1964 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_array_declarator (yyvsp[-1].ttype, yyvsp[-2].ttype, 1, 0); ;}
    break;

  case 423:
#line 1967 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_array_declarator (yyvsp[-1].ttype, yyvsp[-3].ttype, 1, 0); ;}
    break;

  case 426:
#line 1980 "../../../kgccfe/gnu/c-parse.y"
    {
		  pedwarn ("deprecated use of label at end of compound statement");
		;}
    break;

  case 434:
#line 1997 "../../../kgccfe/gnu/c-parse.y"
    {
		  if ((pedantic && !flag_isoc99)
		      || warn_declaration_after_statement)
		    pedwarn_c90 ("ISO C90 forbids mixed declarations and code");
		;}
    break;

  case 449:
#line 2030 "../../../kgccfe/gnu/c-parse.y"
    { pushlevel (0);
		  clear_last_expr ();
		  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);
		;}
    break;

  case 450:
#line 2037 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0); ;}
    break;

  case 451:
#line 2042 "../../../kgccfe/gnu/c-parse.y"
    { if (flag_isoc99)
		    {
		      yyval.ttype = c_begin_compound_stmt ();
		      pushlevel (0);
		      clear_last_expr ();
		      add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);
		    }
		  else
		    yyval.ttype = NULL_TREE;
		;}
    break;

  case 452:
#line 2058 "../../../kgccfe/gnu/c-parse.y"
    { if (flag_isoc99)
		    {
		      tree scope_stmt = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);
		      yyval.ttype = poplevel (kept_level_p (), 0, 0);
		      SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmt))
			= SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmt))
			= yyval.ttype;
		    }
		  else
		    yyval.ttype = NULL_TREE; ;}
    break;

  case 454:
#line 2075 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids label declarations"); ;}
    break;

  case 457:
#line 2086 "../../../kgccfe/gnu/c-parse.y"
    { tree link;
		  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))
		    {
		      tree label = shadow_label (TREE_VALUE (link));
		      C_DECLARED_LABEL_FLAG (label) = 1;
		      add_decl_stmt (label);
		    }
		;}
    break;

  case 458:
#line 2100 "../../../kgccfe/gnu/c-parse.y"
    {;}
    break;

  case 460:
#line 2104 "../../../kgccfe/gnu/c-parse.y"
    { compstmt_count++;
                      yyval.ttype = c_begin_compound_stmt (); ;}
    break;

  case 461:
#line 2109 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = convert (void_type_node, integer_zero_node); ;}
    break;

  case 462:
#line 2111 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = poplevel (kept_level_p (), 1, 0);
		  SCOPE_STMT_BLOCK (TREE_PURPOSE (yyvsp[0].ttype))
		    = SCOPE_STMT_BLOCK (TREE_VALUE (yyvsp[0].ttype))
		    = yyval.ttype; ;}
    break;

  case 465:
#line 2124 "../../../kgccfe/gnu/c-parse.y"
    { if (current_function_decl == 0)
		    {
		      error ("braced-group within expression allowed only inside a function");
		      YYERROR;
		    }
		  /* We must force a BLOCK for this level
		     so that, if it is not expanded later,
		     there is a way to turn off the entire subtree of blocks
		     that are contained in it.  */
		  keep_next_level ();
		  push_label_level ();
		  compstmt_count++;
		  yyval.ttype = add_stmt (build_stmt (COMPOUND_STMT, last_tree));
		;}
    break;

  case 466:
#line 2141 "../../../kgccfe/gnu/c-parse.y"
    { RECHAIN_STMTS (yyvsp[-1].ttype, COMPOUND_BODY (yyvsp[-1].ttype));
		  last_expr_type = NULL_TREE;
                  yyval.ttype = yyvsp[-1].ttype; ;}
    break;

  case 467:
#line 2149 "../../../kgccfe/gnu/c-parse.y"
    { c_finish_then (); ;}
    break;

  case 469:
#line 2166 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = c_begin_if_stmt (); ;}
    break;

  case 470:
#line 2168 "../../../kgccfe/gnu/c-parse.y"
    { c_expand_start_cond (c_common_truthvalue_conversion (yyvsp[-1].ttype),
				       compstmt_count,yyvsp[-3].ttype);
		  yyval.itype = stmt_count;
		  if_stmt_file = yyvsp[-7].filename;
		  if_stmt_line = yyvsp[-6].lineno; ;}
    break;

  case 471:
#line 2180 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  compstmt_count++;
		  yyval.ttype
		    = add_stmt (build_stmt (DO_STMT, NULL_TREE,
					    NULL_TREE));
		  /* In the event that a parse error prevents
		     parsing the complete do-statement, set the
		     condition now.  Otherwise, we can get crashes at
		     RTL-generation time.  */
		  DO_COND (yyval.ttype) = error_mark_node; ;}
    break;

  case 472:
#line 2191 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype;
		  RECHAIN_STMTS (yyval.ttype, DO_BODY (yyval.ttype)); ;}
    break;

  case 473:
#line 2199 "../../../kgccfe/gnu/c-parse.y"
    { if (yychar == YYEMPTY)
		    yychar = YYLEX;
		  yyval.filename = input_filename; ;}
    break;

  case 474:
#line 2205 "../../../kgccfe/gnu/c-parse.y"
    { if (yychar == YYEMPTY)
		    yychar = YYLEX;
		  yyval.lineno = lineno; ;}
    break;

  case 477:
#line 2218 "../../../kgccfe/gnu/c-parse.y"
    { if (flag_isoc99)
		    RECHAIN_STMTS (yyvsp[-2].ttype, COMPOUND_BODY (yyvsp[-2].ttype)); ;}
    break;

  case 478:
#line 2224 "../../../kgccfe/gnu/c-parse.y"
    { if (yyvsp[0].ttype)
		    {
		      STMT_LINENO (yyvsp[0].ttype) = yyvsp[-1].lineno;
		      /* ??? We currently have no way of recording
			 the filename for a statement.  This probably
			 matters little in practice at the moment,
			 but I suspect that problems will occur when
			 doing inlining at the tree level.  */
		    }
		;}
    break;

  case 479:
#line 2238 "../../../kgccfe/gnu/c-parse.y"
    { if (yyvsp[0].ttype)
		    {
		      STMT_LINENO (yyvsp[0].ttype) = yyvsp[-1].lineno;
		    }
		;}
    break;

  case 480:
#line 2247 "../../../kgccfe/gnu/c-parse.y"
    { c_expand_start_else ();
		  yyvsp[-1].itype = stmt_count; ;}
    break;

  case 481:
#line 2250 "../../../kgccfe/gnu/c-parse.y"
    { c_finish_else ();
		  c_expand_end_cond ();
		  if (extra_warnings && stmt_count == yyvsp[-3].itype)
		    warning ("empty body in an else-statement"); ;}
    break;

  case 482:
#line 2255 "../../../kgccfe/gnu/c-parse.y"
    { c_expand_end_cond ();
		  /* This warning is here instead of in simple_if, because we
		     do not want a warning if an empty if is followed by an
		     else statement.  Increment stmt_count so we don't
		     give a second error if this is a nested `if'.  */
		  if (extra_warnings && stmt_count++ == yyvsp[0].itype)
		    warning_with_file_and_line (if_stmt_file, if_stmt_line,
						"empty body in an if-statement"); ;}
    break;

  case 483:
#line 2267 "../../../kgccfe/gnu/c-parse.y"
    { c_expand_end_cond (); ;}
    break;

  case 484:
#line 2277 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = c_begin_while_stmt (); ;}
    break;

  case 485:
#line 2280 "../../../kgccfe/gnu/c-parse.y"
    { yyvsp[-1].ttype = c_common_truthvalue_conversion (yyvsp[-1].ttype);
		  c_finish_while_stmt_cond
		    (c_common_truthvalue_conversion (yyvsp[-1].ttype), yyvsp[-3].ttype);
		  yyval.ttype = add_stmt (yyvsp[-3].ttype); ;}
    break;

  case 486:
#line 2285 "../../../kgccfe/gnu/c-parse.y"
    { RECHAIN_STMTS (yyvsp[-1].ttype, WHILE_BODY (yyvsp[-1].ttype)); ;}
    break;

  case 487:
#line 2288 "../../../kgccfe/gnu/c-parse.y"
    { DO_COND (yyvsp[-4].ttype) = c_common_truthvalue_conversion (yyvsp[-2].ttype); ;}
    break;

  case 488:
#line 2290 "../../../kgccfe/gnu/c-parse.y"
    { ;}
    break;

  case 489:
#line 2292 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE,
					  NULL_TREE, NULL_TREE);
		  add_stmt (yyval.ttype); ;}
    break;

  case 490:
#line 2296 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  RECHAIN_STMTS (yyvsp[-2].ttype, FOR_INIT_STMT (yyvsp[-2].ttype)); ;}
    break;

  case 491:
#line 2299 "../../../kgccfe/gnu/c-parse.y"
    { if (yyvsp[-1].ttype)
		    FOR_COND (yyvsp[-5].ttype)
		      = c_common_truthvalue_conversion (yyvsp[-1].ttype); ;}
    break;

  case 492:
#line 2303 "../../../kgccfe/gnu/c-parse.y"
    { FOR_EXPR (yyvsp[-8].ttype) = yyvsp[-1].ttype; ;}
    break;

  case 493:
#line 2305 "../../../kgccfe/gnu/c-parse.y"
    { RECHAIN_STMTS (yyvsp[-10].ttype, FOR_BODY (yyvsp[-10].ttype)); ;}
    break;

  case 494:
#line 2307 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = c_start_case (yyvsp[-1].ttype); ;}
    break;

  case 495:
#line 2310 "../../../kgccfe/gnu/c-parse.y"
    { c_finish_case (); ;}
    break;

  case 496:
#line 2315 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_stmt (EXPR_STMT, yyvsp[-1].ttype)); ;}
    break;

  case 497:
#line 2317 "../../../kgccfe/gnu/c-parse.y"
    { check_for_loop_decls (); ;}
    break;

  case 510:
#line 2339 "../../../kgccfe/gnu/c-parse.y"
    {;}
    break;

  case 513:
#line 2346 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (options_dir, yyvsp[-1].ttype)); yyval.ttype = NULL; ;}
    break;

  case 514:
#line 2352 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL; ;}
    break;

  case 518:
#line 2361 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (exec_freq_dir, yyvsp[-1].ttype)); yyval.ttype = NULL; ;}
    break;

  case 519:
#line 2365 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_string (6, "never"); ;}
    break;

  case 520:
#line 2366 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_string (5, "init"); ;}
    break;

  case 521:
#line 2367 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_string (9, "frequent"); ;}
    break;

  case 523:
#line 2376 "../../../kgccfe/gnu/c-parse.y"
    {
	    yyval.ttype = add_stmt (build_omp_stmt (parallel_dir_b, yyvsp[0].pclause_type));
	    In_MP_Region = true;
	    mp_nesting++;
	    if (mp_nesting == MAX_MP_NESTING)
	    {
	      // will see
	      printf ("MP nesting > %d not supported\n", MAX_MP_NESTING-1);
	      abort();
	    }
	    mp_locals[mp_nesting] = NULL;
        ;}
    break;

  case 524:
#line 2389 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (parallel_dir_e, NULL));
	    yyval.ttype=NULL;
	    In_MP_Region = false;
	    if (mp_locals[mp_nesting])
	    {
	      yyvsp[-1].ttype->omp.omp_clause_list =
	        chain_parallel_list_on (yyvsp[-1].ttype->omp.omp_clause_list,
		          build_parallel_clause_list (mp_locals[mp_nesting],
			                              p_private, 0, 0));
	    }
	    mp_locals[mp_nesting] = NULL;
	    mp_nesting--;
	;}
    break;

  case 525:
#line 2407 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = NULL; ;}
    break;

  case 526:
#line 2409 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = yyvsp[-1].pclause_type; ;}
    break;

  case 527:
#line 2414 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = yyvsp[0].pclause_type; ;}
    break;

  case 528:
#line 2416 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = chain_parallel_list_on (yyvsp[-1].pclause_type, yyvsp[0].pclause_type); ;}
    break;

  case 529:
#line 2421 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_if, 0, 0); ;}
    break;

  case 530:
#line 2423 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_num_threads, 0, 0); ;}
    break;

  case 531:
#line 2425 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_private, 0, 0); ;}
    break;

  case 532:
#line 2427 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_firstprivate, 0, 0); ;}
    break;

  case 533:
#line 2429 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_shared, 0, 0); ;}
    break;

  case 534:
#line 2431 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(NULL, p_default, default_shared, 0); ;}
    break;

  case 535:
#line 2433 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(NULL, p_default, default_none, 0); ;}
    break;

  case 536:
#line 2435 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_reduction, 0, yyvsp[-3].red_op_type); ;}
    break;

  case 537:
#line 2437 "../../../kgccfe/gnu/c-parse.y"
    { yyval.pclause_type = build_parallel_clause_list(yyvsp[-1].ttype, p_copyin, 0, 0); ;}
    break;

  case 538:
#line 2442 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (for_dir_b, yyvsp[0].for_clause_type));
	    yyval.ttype = NULL;
        ;}
    break;

  case 539:
#line 2448 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (for_dir_e, NULL)); yyval.ttype = NULL; ;}
    break;

  case 540:
#line 2454 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE,
					  NULL_TREE, NULL_TREE);
		  TREE_ADDRESSABLE (yyval.ttype) = 1; // generate do-loop
		  add_stmt (yyval.ttype); ;}
    break;

  case 541:
#line 2459 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  RECHAIN_STMTS (yyvsp[-2].ttype, FOR_INIT_STMT (yyvsp[-2].ttype)); ;}
    break;

  case 542:
#line 2462 "../../../kgccfe/gnu/c-parse.y"
    { if (yyvsp[-1].ttype)
		    FOR_COND (yyvsp[-5].ttype)
		      = c_common_truthvalue_conversion (yyvsp[-1].ttype); ;}
    break;

  case 543:
#line 2466 "../../../kgccfe/gnu/c-parse.y"
    { FOR_EXPR (yyvsp[-8].ttype) = yyvsp[-1].ttype; ;}
    break;

  case 544:
#line 2468 "../../../kgccfe/gnu/c-parse.y"
    { RECHAIN_STMTS (yyvsp[-10].ttype, FOR_BODY (yyvsp[-10].ttype)); ;}
    break;

  case 545:
#line 2473 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = NULL; ;}
    break;

  case 546:
#line 2475 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = yyvsp[-1].for_clause_type; ;}
    break;

  case 547:
#line 2480 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = yyvsp[0].for_clause_type; ;}
    break;

  case 548:
#line 2482 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = chain_for_list_on (yyvsp[-1].for_clause_type, yyvsp[0].for_clause_type); ;}
    break;

  case 549:
#line 2487 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(yyvsp[-1].ttype, f_private, 0, 0); ;}
    break;

  case 550:
#line 2489 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(yyvsp[-1].ttype, f_firstprivate, 0, 0); ;}
    break;

  case 551:
#line 2491 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(yyvsp[-1].ttype, f_lastprivate, 0, 0); ;}
    break;

  case 552:
#line 2493 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(yyvsp[-1].ttype, f_reduction, 0, yyvsp[-3].red_op_type); ;}
    break;

  case 553:
#line 2495 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(NULL, f_schedule_1, yyvsp[-1].sch_k_type, 0); ;}
    break;

  case 554:
#line 2497 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(yyvsp[-1].ttype, f_schedule_2, yyvsp[-3].sch_k_type, 0); ;}
    break;

  case 555:
#line 2499 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(NULL, f_ordered, 0, 0); ;}
    break;

  case 556:
#line 2501 "../../../kgccfe/gnu/c-parse.y"
    { yyval.for_clause_type = build_for_clause_list(NULL, f_nowait, 0, 0); ;}
    break;

  case 557:
#line 2506 "../../../kgccfe/gnu/c-parse.y"
    {
       if (strcmp (IDENTIFIER_POINTER (yyvsp[0].ttype), "static"))
              error ("'%s' is not a valid schedule kind\n",  IDENTIFIER_POINTER (yyvsp[0].ttype));
       else
              yyval.sch_k_type=SK_STATIC; ;}
    break;

  case 558:
#line 2512 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sch_k_type=SK_DYNAMIC; ;}
    break;

  case 559:
#line 2514 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sch_k_type=SK_GUIDED; ;}
    break;

  case 560:
#line 2516 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sch_k_type=SK_RUNTIME; ;}
    break;

  case 561:
#line 2522 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (sections_cons_b, yyvsp[0].sections_clause_type));
	    yyval.ttype = NULL;
        ;}
    break;

  case 562:
#line 2527 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (sections_cons_e, NULL)); yyval.ttype = NULL; ;}
    break;

  case 563:
#line 2532 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = NULL; ;}
    break;

  case 564:
#line 2534 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = yyvsp[-1].sections_clause_type; ;}
    break;

  case 565:
#line 2539 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = yyvsp[0].sections_clause_type; ;}
    break;

  case 566:
#line 2541 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = chain_sections_list_on (yyvsp[-1].sections_clause_type, yyvsp[0].sections_clause_type); ;}
    break;

  case 567:
#line 2546 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = build_sections_clause_list(yyvsp[-1].ttype, sections_private, 0); ;}
    break;

  case 568:
#line 2548 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = build_sections_clause_list(yyvsp[-1].ttype, sections_firstprivate, 0); ;}
    break;

  case 569:
#line 2550 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = build_sections_clause_list(yyvsp[-1].ttype, sections_lastprivate, 0); ;}
    break;

  case 570:
#line 2552 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = build_sections_clause_list(yyvsp[-1].ttype, sections_reduction, yyvsp[-3].red_op_type); ;}
    break;

  case 571:
#line 2554 "../../../kgccfe/gnu/c-parse.y"
    { yyval.sections_clause_type = build_sections_clause_list(NULL, sections_nowait, 0); ;}
    break;

  case 572:
#line 2560 "../../../kgccfe/gnu/c-parse.y"
    {
           In_MP_Section = true;
           add_stmt (build_omp_stmt (section_cons_b, NULL));
        ;}
    break;

  case 577:
#line 2575 "../../../kgccfe/gnu/c-parse.y"
    {
	  In_MP_Section = false;
	  add_stmt (build_omp_stmt (section_cons_e, NULL));
	;}
    break;

  case 580:
#line 2588 "../../../kgccfe/gnu/c-parse.y"
    {
	  if (!In_MP_Section)
	    add_stmt (build_omp_stmt (section_cons_b, NULL));
	  else
	    In_MP_Section = false;
        ;}
    break;

  case 581:
#line 2595 "../../../kgccfe/gnu/c-parse.y"
    {
	  add_stmt (build_omp_stmt (section_cons_e, NULL));
        ;}
    break;

  case 583:
#line 2606 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (single_cons_b, yyvsp[0].single_clause_type));
	    yyval.ttype = NULL;
        ;}
    break;

  case 584:
#line 2611 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (single_cons_e, NULL)); yyval.ttype = NULL; ;}
    break;

  case 585:
#line 2616 "../../../kgccfe/gnu/c-parse.y"
    {yyval.single_clause_type = NULL;;}
    break;

  case 586:
#line 2618 "../../../kgccfe/gnu/c-parse.y"
    {yyval.single_clause_type = yyvsp[-1].single_clause_type;;}
    break;

  case 587:
#line 2623 "../../../kgccfe/gnu/c-parse.y"
    { yyval.single_clause_type = yyvsp[0].single_clause_type; ;}
    break;

  case 588:
#line 2625 "../../../kgccfe/gnu/c-parse.y"
    { yyval.single_clause_type = chain_single_list_on (yyvsp[-1].single_clause_type, yyvsp[0].single_clause_type); ;}
    break;

  case 589:
#line 2630 "../../../kgccfe/gnu/c-parse.y"
    { yyval.single_clause_type = build_single_clause_list(yyvsp[-1].ttype, single_private); ;}
    break;

  case 590:
#line 2632 "../../../kgccfe/gnu/c-parse.y"
    { yyval.single_clause_type = build_single_clause_list(yyvsp[-1].ttype, single_firstprivate); ;}
    break;

  case 591:
#line 2634 "../../../kgccfe/gnu/c-parse.y"
    { yyval.single_clause_type = build_single_clause_list(yyvsp[-1].ttype, single_copyprivate); ;}
    break;

  case 592:
#line 2636 "../../../kgccfe/gnu/c-parse.y"
    { yyval.single_clause_type = build_single_clause_list(NULL, single_nowait); ;}
    break;

  case 593:
#line 2641 "../../../kgccfe/gnu/c-parse.y"
    {
	    yyval.ttype = add_stmt (build_omp_stmt (par_for_cons_b, yyvsp[0].parallel_for_clause_type));
	    In_MP_Region = true;
	    mp_nesting++;
	    if (mp_nesting == MAX_MP_NESTING)
	    {
	      // will see
	      printf ("MP nesting > %d not supported\n", MAX_MP_NESTING-1);
	      abort();
	    }
	    mp_locals[mp_nesting] = NULL;
        ;}
    break;

  case 594:
#line 2654 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (par_for_cons_e, NULL));
	    yyval.ttype = NULL;
	    In_MP_Region = false;
	    if (mp_locals[mp_nesting])
	    {
	      yyvsp[-1].ttype->omp.omp_clause_list =
	        chain_parallel_for_list_on (yyvsp[-1].ttype->omp.omp_clause_list,
		          build_parallel_for_clause_list (mp_locals[mp_nesting],
			                              p_for_private, 0, 0, 0));
	    }
	    mp_locals[mp_nesting] = NULL;
	    mp_nesting--;
	;}
    break;

  case 595:
#line 2672 "../../../kgccfe/gnu/c-parse.y"
    {yyval.parallel_for_clause_type = NULL;;}
    break;

  case 596:
#line 2674 "../../../kgccfe/gnu/c-parse.y"
    {yyval.parallel_for_clause_type = yyvsp[-1].parallel_for_clause_type;;}
    break;

  case 597:
#line 2679 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = yyvsp[0].parallel_for_clause_type; ;}
    break;

  case 598:
#line 2681 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = chain_parallel_for_list_on (yyvsp[-1].parallel_for_clause_type, yyvsp[0].parallel_for_clause_type); ;}
    break;

  case 599:
#line 2686 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_if, 0, 0, 0); ;}
    break;

  case 600:
#line 2688 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_num_threads, 0, 0, 0); ;}
    break;

  case 601:
#line 2690 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_private, 0, 0, 0); ;}
    break;

  case 602:
#line 2692 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_copyprivate, 0, 0, 0); ;}
    break;

  case 603:
#line 2694 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_firstprivate, 0, 0, 0); ;}
    break;

  case 604:
#line 2696 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_lastprivate, 0, 0, 0); ;}
    break;

  case 605:
#line 2698 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_shared, 0, 0, 0); ;}
    break;

  case 606:
#line 2700 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(NULL, p_for_default, default_shared, 0, 0); ;}
    break;

  case 607:
#line 2702 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(NULL, p_for_default, default_none, 0, 0); ;}
    break;

  case 608:
#line 2704 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_reduction, 0, 0, yyvsp[-3].red_op_type); ;}
    break;

  case 609:
#line 2706 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_copyin, 0, 0, 0); ;}
    break;

  case 610:
#line 2708 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(NULL, p_for_schedule_1, 0, yyvsp[-1].sch_k_type, 0); ;}
    break;

  case 611:
#line 2710 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(yyvsp[-1].ttype, p_for_schedule_2, 0, yyvsp[-3].sch_k_type, 0); ;}
    break;

  case 612:
#line 2712 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_for_clause_type = build_parallel_for_clause_list(NULL, p_for_ordered, 0, 0, 0); ;}
    break;

  case 613:
#line 2717 "../../../kgccfe/gnu/c-parse.y"
    {
	    yyval.ttype = add_stmt (build_omp_stmt (par_sctn_cons_b, yyvsp[0].parallel_sections_clause_type));
	    In_MP_Region = true;
	    mp_nesting++;
	    if (mp_nesting == MAX_MP_NESTING)
	    {
	      // will see
	      printf ("MP nesting > %d not supported\n", MAX_MP_NESTING-1);
	      abort();
	    }
	    mp_locals[mp_nesting] = NULL;
        ;}
    break;

  case 614:
#line 2730 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (par_sctn_cons_e, NULL));
	    yyval.ttype = NULL;
	    In_MP_Region = false;
	    if (mp_locals[mp_nesting])
	    {
	      yyvsp[-1].ttype->omp.omp_clause_list =
	        chain_parallel_sections_list_on (yyvsp[-1].ttype->omp.omp_clause_list,
		   build_parallel_sections_clause_list (mp_locals[mp_nesting],
		   p_sections_private, 0, 0));
	    }
	    mp_locals[mp_nesting] = NULL;
	    mp_nesting--;
	;}
    break;

  case 615:
#line 2748 "../../../kgccfe/gnu/c-parse.y"
    {yyval.parallel_sections_clause_type = NULL;;}
    break;

  case 616:
#line 2750 "../../../kgccfe/gnu/c-parse.y"
    {yyval.parallel_sections_clause_type = yyvsp[-1].parallel_sections_clause_type;;}
    break;

  case 617:
#line 2755 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type=yyvsp[0].parallel_sections_clause_type; ;}
    break;

  case 618:
#line 2757 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = chain_parallel_sections_list_on (yyvsp[-1].parallel_sections_clause_type, yyvsp[0].parallel_sections_clause_type); ;}
    break;

  case 619:
#line 2762 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_if, 0, 0); ;}
    break;

  case 620:
#line 2764 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_num_threads, 0, 0); ;}
    break;

  case 621:
#line 2766 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_private, 0, 0); ;}
    break;

  case 622:
#line 2768 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_copyprivate, 0, 0); ;}
    break;

  case 623:
#line 2770 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_firstprivate, 0, 0); ;}
    break;

  case 624:
#line 2772 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_lastprivate, 0, 0); ;}
    break;

  case 625:
#line 2774 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_shared, 0, 0); ;}
    break;

  case 626:
#line 2776 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(NULL, p_sections_default, default_shared, 0); ;}
    break;

  case 627:
#line 2778 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(NULL, p_sections_default, default_none, 0); ;}
    break;

  case 628:
#line 2780 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_reduction, 0, yyvsp[-3].red_op_type); ;}
    break;

  case 629:
#line 2782 "../../../kgccfe/gnu/c-parse.y"
    { yyval.parallel_sections_clause_type = build_parallel_sections_clause_list(yyvsp[-1].ttype, p_sections_copyin, 0, 0); ;}
    break;

  case 630:
#line 2787 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (master_cons_b, NULL)); yyval.ttype = NULL; ;}
    break;

  case 631:
#line 2789 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (master_cons_e, NULL)); yyval.ttype = NULL; ;}
    break;

  case 633:
#line 2798 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (critical_cons_b, yyvsp[0].ttype)); yyval.ttype = NULL; ;}
    break;

  case 634:
#line 2800 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (critical_cons_e, NULL)); yyval.ttype = NULL; ;}
    break;

  case 635:
#line 2805 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL; ;}
    break;

  case 636:
#line 2807 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[-2].ttype; ;}
    break;

  case 637:
#line 2812 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 638:
#line 2817 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (barrier_dir, NULL)); yyval.ttype = NULL; ;}
    break;

  case 639:
#line 2822 "../../../kgccfe/gnu/c-parse.y"
    {
	    add_stmt (build_omp_stmt (atomic_cons, yyvsp[-1].ttype));
	    yyval.ttype = NULL;
        ;}
    break;

  case 641:
#line 2834 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (flush_dir, NULL)); yyval.ttype = NULL; ;}
    break;

  case 642:
#line 2837 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (flush_dir, yyvsp[-2].ttype)); yyval.ttype = NULL; ;}
    break;

  case 643:
#line 2842 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (ordered_cons_b, NULL)); yyval.ttype = NULL; ;}
    break;

  case 644:
#line 2844 "../../../kgccfe/gnu/c-parse.y"
    { add_stmt (build_omp_stmt (ordered_cons_e, NULL)); yyval.ttype = NULL; ;}
    break;

  case 646:
#line 2853 "../../../kgccfe/gnu/c-parse.y"
    { expand_threadprivate(yyvsp[-2].ttype); ;}
    break;

  case 647:
#line 2858 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_ADD;;}
    break;

  case 648:
#line 2860 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_MPY;;}
    break;

  case 649:
#line 2862 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_SUB;;}
    break;

  case 650:
#line 2864 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_BAND;;}
    break;

  case 651:
#line 2866 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_BXOR;;}
    break;

  case 652:
#line 2868 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_BIOR;;}
    break;

  case 653:
#line 2870 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_CAND;;}
    break;

  case 654:
#line 2872 "../../../kgccfe/gnu/c-parse.y"
    {yyval.red_op_type = REDUCTION_OPR_CIOR;;}
    break;

  case 655:
#line 2877 "../../../kgccfe/gnu/c-parse.y"
    {
           if(lookup_name(yyvsp[0].ttype)==0)
                        error("Undefined variable %s", IDENTIFIER_POINTER(yyvsp[0].ttype));
          yyval.ttype = build_tree_list (NULL_TREE, lookup_name (yyvsp[0].ttype));
        ;}
    break;

  case 656:
#line 2883 "../../../kgccfe/gnu/c-parse.y"
    {
      if (lookup_name (yyvsp[0].ttype) == 0)
        error ("Undefined variable %s", IDENTIFIER_POINTER(yyvsp[0].ttype));
      yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, lookup_name (yyvsp[0].ttype)));
    ;}
    break;

  case 659:
#line 2898 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++; yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 660:
#line 2900 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = c_expand_expr_stmt (yyvsp[-1].ttype); ;}
    break;

  case 661:
#line 2903 "../../../kgccfe/gnu/c-parse.y"
    { if (flag_isoc99)
		    RECHAIN_STMTS (yyvsp[-2].ttype, COMPOUND_BODY (yyvsp[-2].ttype));
		  yyval.ttype = NULL_TREE; ;}
    break;

  case 662:
#line 2907 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = add_stmt (build_break_stmt ()); ;}
    break;

  case 663:
#line 2910 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = add_stmt (build_continue_stmt ()); ;}
    break;

  case 664:
#line 2913 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = c_expand_return (NULL_TREE); ;}
    break;

  case 665:
#line 2916 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = c_expand_return (yyvsp[-1].ttype); ;}
    break;

  case 666:
#line 2919 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = simple_asm_stmt (yyvsp[-2].ttype); ;}
    break;

  case 667:
#line 2923 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = build_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE); ;}
    break;

  case 668:
#line 2928 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = build_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;}
    break;

  case 669:
#line 2933 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = build_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;}
    break;

  case 670:
#line 2936 "../../../kgccfe/gnu/c-parse.y"
    { tree decl;
		  stmt_count++;
		  decl = lookup_label (yyvsp[-1].ttype);
		  if (decl != 0)
		    {
		      TREE_USED (decl) = 1;
		      yyval.ttype = add_stmt (build_stmt (GOTO_STMT, decl));
		    }
		  else
		    yyval.ttype = NULL_TREE;
		;}
    break;

  case 671:
#line 2948 "../../../kgccfe/gnu/c-parse.y"
    { if (pedantic)
		    pedwarn ("ISO C forbids `goto *expr;'");
		  stmt_count++;
		  yyvsp[-1].ttype = convert (ptr_type_node, yyvsp[-1].ttype);
		  yyval.ttype = add_stmt (build_stmt (GOTO_STMT, yyvsp[-1].ttype)); ;}
    break;

  case 672:
#line 2954 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 673:
#line 2962 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = do_case (yyvsp[-1].ttype, NULL_TREE); ;}
    break;

  case 674:
#line 2965 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = do_case (yyvsp[-3].ttype, yyvsp[-1].ttype); ;}
    break;

  case 675:
#line 2968 "../../../kgccfe/gnu/c-parse.y"
    { stmt_count++;
		  yyval.ttype = do_case (NULL_TREE, NULL_TREE); ;}
    break;

  case 676:
#line 2971 "../../../kgccfe/gnu/c-parse.y"
    { tree label = define_label (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-4].ttype);
		  stmt_count++;
		  if (label)
		    {
		      decl_attributes (&label, yyvsp[0].ttype, 0);
		      yyval.ttype = add_stmt (build_stmt (LABEL_STMT, label));
		    }
		  else
		    yyval.ttype = NULL_TREE;
		;}
    break;

  case 677:
#line 2987 "../../../kgccfe/gnu/c-parse.y"
    { emit_line_note (input_filename, lineno);
		  yyval.ttype = NULL_TREE; ;}
    break;

  case 678:
#line 2990 "../../../kgccfe/gnu/c-parse.y"
    { emit_line_note (input_filename, lineno); ;}
    break;

  case 679:
#line 2995 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 681:
#line 3002 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = NULL_TREE; ;}
    break;

  case 684:
#line 3009 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;}
    break;

  case 685:
#line 3014 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (NULL_TREE, yyvsp[-3].ttype), yyvsp[-1].ttype); ;}
    break;

  case 686:
#line 3016 "../../../kgccfe/gnu/c-parse.y"
    { yyvsp[-5].ttype = build_string (IDENTIFIER_LENGTH (yyvsp[-5].ttype),
				     IDENTIFIER_POINTER (yyvsp[-5].ttype));
		  yyval.ttype = build_tree_list (build_tree_list (yyvsp[-5].ttype, yyvsp[-3].ttype), yyvsp[-1].ttype); ;}
    break;

  case 687:
#line 3023 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;}
    break;

  case 688:
#line 3025 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype); ;}
    break;

  case 689:
#line 3035 "../../../kgccfe/gnu/c-parse.y"
    { pushlevel (0);
		  clear_parm_order ();
		  declare_parm_level (0); ;}
    break;

  case 690:
#line 3039 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  parmlist_tags_warning ();
		  poplevel (0, 0, 0); ;}
    break;

  case 692:
#line 3047 "../../../kgccfe/gnu/c-parse.y"
    { tree parm;
		  if (pedantic)
		    pedwarn ("ISO C forbids forward parameter declarations");
		  /* Mark the forward decls as such.  */
		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
		    TREE_ASM_WRITTEN (parm) = 1;
		  clear_parm_order (); ;}
    break;

  case 693:
#line 3055 "../../../kgccfe/gnu/c-parse.y"
    { /* Dummy action so attributes are in known place
		     on parser stack.  */ ;}
    break;

  case 694:
#line 3058 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype; ;}
    break;

  case 695:
#line 3060 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;}
    break;

  case 696:
#line 3066 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = get_parm_info (0); ;}
    break;

  case 697:
#line 3068 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = get_parm_info (0);
		  /* Gcc used to allow this as an extension.  However, it does
		     not work for all targets, and thus has been disabled.
		     Also, since func (...) and func () are indistinguishable,
		     it caused problems with the code in expand_builtin which
		     tries to verify that BUILT_IN_NEXT_ARG is being used
		     correctly.  */
		  error ("ISO C requires a named argument before `...'");
		;}
    break;

  case 698:
#line 3078 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = get_parm_info (1);
		  parsing_iso_function_signature = true;
		;}
    break;

  case 699:
#line 3082 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = get_parm_info (0); ;}
    break;

  case 700:
#line 3087 "../../../kgccfe/gnu/c-parse.y"
    { push_parm_decl (yyvsp[0].ttype); ;}
    break;

  case 701:
#line 3089 "../../../kgccfe/gnu/c-parse.y"
    { push_parm_decl (yyvsp[0].ttype); ;}
    break;

  case 702:
#line 3096 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;}
    break;

  case 703:
#line 3101 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;}
    break;

  case 704:
#line 3106 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;}
    break;

  case 705:
#line 3109 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;}
    break;

  case 706:
#line 3115 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;}
    break;

  case 707:
#line 3123 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;}
    break;

  case 708:
#line 3128 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;}
    break;

  case 709:
#line 3133 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;}
    break;

  case 710:
#line 3136 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;}
    break;

  case 711:
#line 3142 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;}
    break;

  case 712:
#line 3148 "../../../kgccfe/gnu/c-parse.y"
    { prefix_attributes = chainon (prefix_attributes, yyvsp[-3].ttype);
		  all_prefix_attributes = prefix_attributes; ;}
    break;

  case 713:
#line 3157 "../../../kgccfe/gnu/c-parse.y"
    { pushlevel (0);
		  clear_parm_order ();
		  declare_parm_level (1); ;}
    break;

  case 714:
#line 3161 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = yyvsp[0].ttype;
		  parmlist_tags_warning ();
		  poplevel (0, 0, 0); ;}
    break;

  case 716:
#line 3169 "../../../kgccfe/gnu/c-parse.y"
    { tree t;
		  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))
		    if (TREE_VALUE (t) == NULL_TREE)
		      error ("`...' in old-style identifier list");
		  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype);

		  /* Make sure we have a parmlist after attributes.  */
		  if (yyvsp[-3].ttype != 0
		      && (TREE_CODE (yyval.ttype) != TREE_LIST
			  || TREE_PURPOSE (yyval.ttype) == 0
			  || TREE_CODE (TREE_PURPOSE (yyval.ttype)) != PARM_DECL))
		    YYERROR1;
		;}
    break;

  case 717:
#line 3187 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;}
    break;

  case 718:
#line 3189 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;}
    break;

  case 719:
#line 3195 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;}
    break;

  case 720:
#line 3197 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;}
    break;

  case 721:
#line 3202 "../../../kgccfe/gnu/c-parse.y"
    { yyval.ttype = SAVE_EXT_FLAGS();
		  pedantic = 0;
		  warn_pointer_arith = 0;
		  warn_traditional = 0;
		  flag_iso = 0; ;}
    break;


    }

/* Line 1000 of yacc.c.  */
#line 6560 "c-parse.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
		 yydestruct (yystos[*yyssp], yyvsp);
	       }
        }
      else
	{
	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
	  yydestruct (yytoken, &yylval);
	  yychar = YYEMPTY;

	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
#endif

  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 3209 "../../../kgccfe/gnu/c-parse.y"


/* yylex() is a thin wrapper around c_lex(), all it does is translate
   cpplib.h's token codes into yacc's token codes.  */

static enum cpp_ttype last_token;

/* The reserved keyword table.  */
struct resword
{
  const char *word;
  ENUM_BITFIELD(rid) rid : 16;
  unsigned int disable   : 16;
};

/* Disable mask.  Keywords are disabled if (reswords[i].disable & mask) is
   _true_.  */
#define D_C89	0x01	/* not in C89 */
#define D_EXT	0x02	/* GCC extension */
#define D_EXT89	0x04	/* GCC extension incorporated in C99 */
#define D_OBJC	0x08	/* Objective C only */

static const struct resword reswords[] =
{
  { "_Bool",		RID_BOOL,	0 },
  { "_Complex",		RID_COMPLEX,	0 },
  { "__FUNCTION__",	RID_FUNCTION_NAME, 0 },
  { "__PRETTY_FUNCTION__", RID_PRETTY_FUNCTION_NAME, 0 },
  { "__alignof",	RID_ALIGNOF,	0 },
  { "__alignof__",	RID_ALIGNOF,	0 },
  { "__asm",		RID_ASM,	0 },
  { "__asm__",		RID_ASM,	0 },
  { "__attribute",	RID_ATTRIBUTE,	0 },
  { "__attribute__",	RID_ATTRIBUTE,	0 },
  { "__bounded",	RID_BOUNDED,	0 },
  { "__bounded__",	RID_BOUNDED,	0 },
  { "__builtin_choose_expr", RID_CHOOSE_EXPR, 0 },
  { "__builtin_types_compatible_p", RID_TYPES_COMPATIBLE_P, 0 },
  { "__builtin_va_arg",	RID_VA_ARG,	0 },
  { "__complex",	RID_COMPLEX,	0 },
  { "__complex__",	RID_COMPLEX,	0 },
  { "__const",		RID_CONST,	0 },
  { "__const__",	RID_CONST,	0 },
  { "__extension__",	RID_EXTENSION,	0 },
  { "__func__",		RID_C99_FUNCTION_NAME, 0 },
  { "__imag",		RID_IMAGPART,	0 },
  { "__imag__",		RID_IMAGPART,	0 },
  { "__inline",		RID_INLINE,	0 },
  { "__inline__",	RID_INLINE,	0 },
  { "__label__",	RID_LABEL,	0 },
  { "__ptrbase",	RID_PTRBASE,	0 },
  { "__ptrbase__",	RID_PTRBASE,	0 },
  { "__ptrextent",	RID_PTREXTENT,	0 },
  { "__ptrextent__",	RID_PTREXTENT,	0 },
  { "__ptrvalue",	RID_PTRVALUE,	0 },
  { "__ptrvalue__",	RID_PTRVALUE,	0 },
  { "__real",		RID_REALPART,	0 },
  { "__real__",		RID_REALPART,	0 },
  { "__restrict",	RID_RESTRICT,	0 },
  { "__restrict__",	RID_RESTRICT,	0 },
  { "__signed",		RID_SIGNED,	0 },
  { "__signed__",	RID_SIGNED,	0 },
  { "__thread",		RID_THREAD,	0 },
  { "__typeof",		RID_TYPEOF,	0 },
  { "__typeof__",	RID_TYPEOF,	0 },
  { "__unbounded",	RID_UNBOUNDED,	0 },
  { "__unbounded__",	RID_UNBOUNDED,	0 },
  { "__volatile",	RID_VOLATILE,	0 },
  { "__volatile__",	RID_VOLATILE,	0 },
  { "asm",		RID_ASM,	D_EXT },
  { "auto",		RID_AUTO,	0 },
  { "break",		RID_BREAK,	0 },
  { "case",		RID_CASE,	0 },
  { "char",		RID_CHAR,	0 },
  { "const",		RID_CONST,	0 },
  { "continue",		RID_CONTINUE,	0 },
  { "default",		RID_DEFAULT,	0 },
  { "do",		RID_DO,		0 },
  { "double",		RID_DOUBLE,	0 },
  { "else",		RID_ELSE,	0 },
  { "enum",		RID_ENUM,	0 },
  { "extern",		RID_EXTERN,	0 },
  { "float",		RID_FLOAT,	0 },
  { "for",		RID_FOR,	0 },
  { "goto",		RID_GOTO,	0 },
  { "if",		RID_IF,		0 },
  { "inline",		RID_INLINE,	D_EXT89 },
  { "int",		RID_INT,	0 },
  { "long",		RID_LONG,	0 },
  { "register",		RID_REGISTER,	0 },
  { "restrict",		RID_RESTRICT,	D_C89 },
  { "return",		RID_RETURN,	0 },
  { "short",		RID_SHORT,	0 },
  { "signed",		RID_SIGNED,	0 },
  { "sizeof",		RID_SIZEOF,	0 },
  { "static",		RID_STATIC,	0 },
  { "struct",		RID_STRUCT,	0 },
  { "switch",		RID_SWITCH,	0 },
  { "typedef",		RID_TYPEDEF,	0 },
  { "typeof",		RID_TYPEOF,	D_EXT },
  { "union",		RID_UNION,	0 },
  { "unsigned",		RID_UNSIGNED,	0 },
  { "void",		RID_VOID,	0 },
  { "volatile",		RID_VOLATILE,	0 },
  { "while",		RID_WHILE,	0 },
};
#define N_reswords (sizeof reswords / sizeof (struct resword))

/* Table mapping from RID_* constants to yacc token numbers.
   Unfortunately we have to have entries for all the keywords in all
   three languages.  */
static const short rid_to_yy[RID_MAX] =
{
  /* RID_STATIC */	STATIC,
  /* RID_UNSIGNED */	TYPESPEC,
  /* RID_LONG */	TYPESPEC,
  /* RID_CONST */	TYPE_QUAL,
  /* RID_EXTERN */	SCSPEC,
  /* RID_REGISTER */	SCSPEC,
  /* RID_TYPEDEF */	SCSPEC,
  /* RID_SHORT */	TYPESPEC,
  /* RID_INLINE */	SCSPEC,
  /* RID_VOLATILE */	TYPE_QUAL,
  /* RID_SIGNED */	TYPESPEC,
  /* RID_AUTO */	SCSPEC,
  /* RID_RESTRICT */	TYPE_QUAL,

  /* C extensions */
  /* RID_BOUNDED */	TYPE_QUAL,
  /* RID_UNBOUNDED */	TYPE_QUAL,
  /* RID_COMPLEX */	TYPESPEC,
  /* RID_THREAD */	SCSPEC,

  /* C++ */
  /* RID_FRIEND */	0,
  /* RID_VIRTUAL */	0,
  /* RID_EXPLICIT */	0,
  /* RID_EXPORT */	0,
  /* RID_MUTABLE */	0,

  /* ObjC */
  /* RID_IN */		TYPE_QUAL,
  /* RID_OUT */		TYPE_QUAL,
  /* RID_INOUT */	TYPE_QUAL,
  /* RID_BYCOPY */	TYPE_QUAL,
  /* RID_BYREF */	TYPE_QUAL,
  /* RID_ONEWAY */	TYPE_QUAL,

  /* C */
  /* RID_INT */		TYPESPEC,
  /* RID_CHAR */	TYPESPEC,
  /* RID_FLOAT */	TYPESPEC,
  /* RID_DOUBLE */	TYPESPEC,
  /* RID_VOID */	TYPESPEC,
  /* RID_ENUM */	ENUM,
  /* RID_STRUCT */	STRUCT,
  /* RID_UNION */	UNION,
  /* RID_IF */		IF,
  /* RID_ELSE */	ELSE,
  /* RID_WHILE */	WHILE,
  /* RID_DO */		DO,
  /* RID_FOR */		FOR,
  /* RID_SWITCH */	SWITCH,
  /* RID_CASE */	CASE,
  /* RID_DEFAULT */	DEFAULT,
  /* RID_BREAK */	BREAK,
  /* RID_CONTINUE */	CONTINUE,
  /* RID_RETURN */	RETURN,
  /* RID_GOTO */	GOTO,
  /* RID_SIZEOF */	SIZEOF,

  /* C extensions */
  /* RID_ASM */		ASM_KEYWORD,
  /* RID_TYPEOF */	TYPEOF,
  /* RID_ALIGNOF */	ALIGNOF,
  /* RID_ATTRIBUTE */	ATTRIBUTE,
  /* RID_VA_ARG */	VA_ARG,
  /* RID_EXTENSION */	EXTENSION,
  /* RID_IMAGPART */	IMAGPART,
  /* RID_REALPART */	REALPART,
  /* RID_LABEL */	LABEL,
  /* RID_PTRBASE */	PTR_BASE,
  /* RID_PTREXTENT */	PTR_EXTENT,
  /* RID_PTRVALUE */	PTR_VALUE,

  /* RID_CHOOSE_EXPR */			CHOOSE_EXPR,
  /* RID_TYPES_COMPATIBLE_P */		TYPES_COMPATIBLE_P,

  /* RID_FUNCTION_NAME */		STRING_FUNC_NAME,
  /* RID_PRETTY_FUNCTION_NAME */	STRING_FUNC_NAME,
  /* RID_C99_FUNCTION_NAME */		VAR_FUNC_NAME,

  /* C++ */
  /* RID_BOOL */	TYPESPEC,
  /* RID_WCHAR */	0,
  /* RID_CLASS */	0,
  /* RID_PUBLIC */	0,
  /* RID_PRIVATE */	0,
  /* RID_PROTECTED */	0,
  /* RID_TEMPLATE */	0,
  /* RID_NULL */	0,
  /* RID_CATCH */	0,
  /* RID_DELETE */	0,
  /* RID_FALSE */	0,
  /* RID_NAMESPACE */	0,
  /* RID_NEW */		0,
  /* RID_OPERATOR */	0,
  /* RID_THIS */	0,
  /* RID_THROW */	0,
  /* RID_TRUE */	0,
  /* RID_TRY */		0,
  /* RID_TYPENAME */	0,
  /* RID_TYPEID */	0,
  /* RID_USING */	0,

  /* casts */
  /* RID_CONSTCAST */	0,
  /* RID_DYNCAST */	0,
  /* RID_REINTCAST */	0,
  /* RID_STATCAST */	0,

  /* Objective C */
  /* RID_ID */			OBJECTNAME,
  /* RID_AT_ENCODE */		ENCODE,
  /* RID_AT_END */		END,
  /* RID_AT_CLASS */		CLASS,
  /* RID_AT_ALIAS */		ALIAS,
  /* RID_AT_DEFS */		DEFS,
  /* RID_AT_PRIVATE */		PRIVATE,
  /* RID_AT_PROTECTED */	PROTECTED,
  /* RID_AT_PUBLIC */		PUBLIC,
  /* RID_AT_PROTOCOL */		PROTOCOL,
  /* RID_AT_SELECTOR */		SELECTOR,
  /* RID_AT_INTERFACE */	INTERFACE,
  /* RID_AT_IMPLEMENTATION */	IMPLEMENTATION
};

static void
init_reswords ()
{
  unsigned int i;
  tree id;
  int mask = (flag_isoc99 ? 0 : D_C89)
	      | (flag_no_asm ? (flag_isoc99 ? D_EXT : D_EXT|D_EXT89) : 0);

  if (!flag_objc)
     mask |= D_OBJC;

  /* It is not necessary to register ridpointers as a GC root, because
     all the trees it points to are permanently interned in the
     get_identifier hash anyway.  */
  ridpointers = (tree *) xcalloc ((int) RID_MAX, sizeof (tree));
  for (i = 0; i < N_reswords; i++)
    {
      /* If a keyword is disabled, do not enter it into the table
	 and so create a canonical spelling that isn't a keyword.  */
      if (reswords[i].disable & mask)
	continue;

      id = get_identifier (reswords[i].word);
      C_RID_CODE (id) = reswords[i].rid;
      C_IS_RESERVED_WORD (id) = 1;
      ridpointers [(int) reswords[i].rid] = id;
    }
}

#define NAME(type) cpp_type2name (type)

static void
yyerror (msgid)
     const char *msgid;
{
  const char *string = _(msgid);

  if (last_token == CPP_EOF)
    error ("%s at end of input", string);
  else if (last_token == CPP_CHAR || last_token == CPP_WCHAR)
    {
      unsigned int val = TREE_INT_CST_LOW (yylval.ttype);
      const char *const ell = (last_token == CPP_CHAR) ? "" : "L";
      if (val <= UCHAR_MAX && ISGRAPH (val))
	error ("%s before %s'%c'", string, ell, val);
      else
	error ("%s before %s'\\x%x'", string, ell, val);
    }
  else if (last_token == CPP_STRING
	   || last_token == CPP_WSTRING)
    error ("%s before string constant", string);
  else if (last_token == CPP_NUMBER)
    error ("%s before numeric constant", string);
  else if (last_token == CPP_NAME)
    error ("%s before \"%s\"", string, IDENTIFIER_POINTER (yylval.ttype));
  else
    error ("%s before '%s' token", string, NAME(last_token));
}

static int
yylexname ()
{
  tree decl;


  if (C_IS_RESERVED_WORD (yylval.ttype))
    {
      enum rid rid_code = C_RID_CODE (yylval.ttype);

      {
	int yycode = rid_to_yy[(int) rid_code];
	if (yycode == STRING_FUNC_NAME)
	  {
	    /* __FUNCTION__ and __PRETTY_FUNCTION__ get converted
	       to string constants.  */
	    const char *name = fname_string (rid_code);

	    yylval.ttype = build_string (strlen (name) + 1, name);
	    C_ARTIFICIAL_STRING_P (yylval.ttype) = 1;
	    last_token = CPP_STRING;  /* so yyerror won't choke */
	    return STRING;
	  }

	/* Return the canonical spelling for this keyword.  */
	yylval.ttype = ridpointers[(int) rid_code];
	return yycode;
      }
    }

  decl = lookup_name (yylval.ttype);
  if (decl)
    {
      if (TREE_CODE (decl) == TYPE_DECL)
	return TYPENAME;
    }

  return IDENTIFIER;
}

/* Concatenate strings before returning them to the parser.  This isn't quite
   as good as having it done in the lexer, but it's better than nothing.  */

static int
yylexstring ()
{
  enum cpp_ttype next_type;
  tree orig = yylval.ttype;

  next_type = c_lex (&yylval.ttype);
  if (next_type == CPP_STRING
      || next_type == CPP_WSTRING
      || (next_type == CPP_NAME && yylexname () == STRING))
    {
      varray_type strings;

      static int last_lineno = 0;
      static const char *last_input_filename = 0;
      if (warn_traditional && !in_system_header
	  && (lineno != last_lineno || !last_input_filename ||
	      strcmp (last_input_filename, input_filename)))
	{
	  warning ("traditional C rejects string concatenation");
	  last_lineno = lineno;
	  last_input_filename = input_filename;
	}

      VARRAY_TREE_INIT (strings, 32, "strings");
      VARRAY_PUSH_TREE (strings, orig);

      do
	{
	  VARRAY_PUSH_TREE (strings, yylval.ttype);
	  next_type = c_lex (&yylval.ttype);
	}
      while (next_type == CPP_STRING
	     || next_type == CPP_WSTRING
	     || (next_type == CPP_NAME && yylexname () == STRING));

      yylval.ttype = combine_strings (strings);
    }
  else
    yylval.ttype = orig;

  /* We will have always read one token too many.  */
  _cpp_backup_tokens (parse_in, 1);

  return STRING;
}

extern bool in_omp_pragma;
extern bool seen_omp_paren;
static int
check_omp_string (char * s, bool * status)
{
  *status = true;

  if (!strcmp (s, "\n"))
  {
    in_omp_pragma = seen_omp_paren = FALSE;
    return '\n';
  }
  if ((!strcmp (s, "mips_frequency_hint") ||
       !strcmp (s, "frequency_hint")) && !seen_omp_paren)
    return PRAGMA_EXEC_FREQ;
  if (!strcasecmp (s, "never") && !seen_omp_paren)
    return FREQ_NEVER;
  if (!strcasecmp (s, "init") && !seen_omp_paren)
    return FREQ_INIT;
  if (!strcasecmp (s, "frequent") && !seen_omp_paren)
    return FREQ_FREQUENT;
  if (!strcmp (s, "options") && !seen_omp_paren)
    return PRAGMA_OPTIONS;
  if (!strcmp (s, "private") && !seen_omp_paren)
    return PRIVATE;
  if (!strcmp (s, "parallel") && !seen_omp_paren)
    return PARALLEL;
  if (!strcmp (s, "omp") && !seen_omp_paren)
    return PRAGMA_OMP;
  if (!strcmp (s, "copyprivate") && !seen_omp_paren)
    return COPYPRIVATE;
  if (!strcmp (s, "firstprivate") && !seen_omp_paren)
    return FIRSTPRIVATE;
  if (!strcmp (s, "lastprivate") && !seen_omp_paren)
    return LASTPRIVATE;
  if (!strcmp (s, "shared"))
    return SHARED;
  if (!strcmp (s, "none"))
    return NONE;
  if (!strcmp (s, "reduction") && !seen_omp_paren)
    return REDUCTION;
  if (!strcmp (s, "copyin") && !seen_omp_paren)
    return COPYIN;
  if (!strcmp (s, "static"))
  {
    fprintf (stderr,"NYI\n");
    abort();
  }
  if (!strcmp (s, "dynamic"))
    return DYNAMIC;
  if (!strcmp (s, "guided"))
    return GUIDED;
  if (!strcmp (s, "runtime"))
    return RUNTIME;
  if (!strcmp (s, "ordered"))
    return ORDERED;
  if (!strcmp (s, "schedule"))
    return SCHEDULE;
  if (!strcmp (s, "nowait"))
    return NOWAIT;
  if (!strcmp (s, "num_threads") && !seen_omp_paren)
    return NUM_THREADS;
  if (!strcmp (s, "sections") && !seen_omp_paren)
    return SECTIONS;
  if (!strcmp (s, "section"))
    return SECTION;
  if (!strcmp (s, "single"))
    return SINGLE;
  if (!strcmp (s, "master") && !seen_omp_paren)
    return MASTER;
  if (!strcmp (s, "critical") && !seen_omp_paren)
    return CRITICAL;
  if (!strcmp (s, "barrier") && !seen_omp_paren)
    return BARRIER;
  if (!strcmp (s, "atomic") && !seen_omp_paren)
    return ATOMIC;
  if (!strcmp (s, "flush") && !seen_omp_paren)
    return FLUSH;
  if (!strcmp (s, "threadprivate") && !seen_omp_paren)
    return THREADPRIVATE;

  // this must be last, return anything
  *status = false;
  return 0;
}

static inline int
_yylex ()
{
 get_next:
  last_token = c_lex (&yylval.ttype);
  switch (last_token)
    {
    case CPP_EQ:					return '=';
    case CPP_NOT:					return '!';
    case CPP_GREATER:	yylval.code = GT_EXPR;		return ARITHCOMPARE;
    case CPP_LESS:	yylval.code = LT_EXPR;		return ARITHCOMPARE;
    case CPP_PLUS:	yylval.code = PLUS_EXPR;	return '+';
    case CPP_MINUS:	yylval.code = MINUS_EXPR;	return '-';
    case CPP_MULT:	yylval.code = MULT_EXPR;	return '*';
    case CPP_DIV:	yylval.code = TRUNC_DIV_EXPR;	return '/';
    case CPP_MOD:	yylval.code = TRUNC_MOD_EXPR;	return '%';
    case CPP_AND:	yylval.code = BIT_AND_EXPR;	return '&';
    case CPP_OR:	yylval.code = BIT_IOR_EXPR;	return '|';
    case CPP_XOR:	yylval.code = BIT_XOR_EXPR;	return '^';
    case CPP_RSHIFT:	yylval.code = RSHIFT_EXPR;	return RSHIFT;
    case CPP_LSHIFT:	yylval.code = LSHIFT_EXPR;	return LSHIFT;

    case CPP_COMPL:					return '~';
    case CPP_AND_AND:					return ANDAND;
    case CPP_OR_OR:					return OROR;
    case CPP_QUERY:					return '?';
    case CPP_OPEN_PAREN:				return '(';
    case CPP_EQ_EQ:	yylval.code = EQ_EXPR;		return EQCOMPARE;
    case CPP_NOT_EQ:	yylval.code = NE_EXPR;		return EQCOMPARE;
    case CPP_GREATER_EQ:yylval.code = GE_EXPR;		return ARITHCOMPARE;
    case CPP_LESS_EQ:	yylval.code = LE_EXPR;		return ARITHCOMPARE;

    case CPP_PLUS_EQ:	yylval.code = PLUS_EXPR;	return ASSIGN;
    case CPP_MINUS_EQ:	yylval.code = MINUS_EXPR;	return ASSIGN;
    case CPP_MULT_EQ:	yylval.code = MULT_EXPR;	return ASSIGN;
    case CPP_DIV_EQ:	yylval.code = TRUNC_DIV_EXPR;	return ASSIGN;
    case CPP_MOD_EQ:	yylval.code = TRUNC_MOD_EXPR;	return ASSIGN;
    case CPP_AND_EQ:	yylval.code = BIT_AND_EXPR;	return ASSIGN;
    case CPP_OR_EQ:	yylval.code = BIT_IOR_EXPR;	return ASSIGN;
    case CPP_XOR_EQ:	yylval.code = BIT_XOR_EXPR;	return ASSIGN;
    case CPP_RSHIFT_EQ:	yylval.code = RSHIFT_EXPR;	return ASSIGN;
    case CPP_LSHIFT_EQ:	yylval.code = LSHIFT_EXPR;	return ASSIGN;

    case CPP_OPEN_SQUARE:				return '[';
    case CPP_CLOSE_SQUARE:				return ']';
    case CPP_OPEN_BRACE:				return '{';
    case CPP_CLOSE_BRACE:				return '}';
    case CPP_ELLIPSIS:					return ELLIPSIS;

    case CPP_PLUS_PLUS:					return PLUSPLUS;
    case CPP_MINUS_MINUS:				return MINUSMINUS;
    case CPP_DEREF:					return POINTSAT;
    case CPP_DOT:					return '.';

      /* The following tokens may affect the interpretation of any
	 identifiers following, if doing Objective-C.  */
    case CPP_COLON:		OBJC_NEED_RAW_IDENTIFIER (0);	return ':';
    case CPP_COMMA:		OBJC_NEED_RAW_IDENTIFIER (0);	return ',';
    case CPP_CLOSE_PAREN:	OBJC_NEED_RAW_IDENTIFIER (0);	return ')';
    case CPP_SEMICOLON:		OBJC_NEED_RAW_IDENTIFIER (0);	return ';';

    case CPP_EOF:
      return 0;

    case CPP_NAME:
      {
	int ret = yylexname ();
	if (ret == STRING)
	  return yylexstring ();
	else if (ret == IDENTIFIER && in_omp_pragma)
	{
          if (TREE_CODE (yylval.ttype) != IDENTIFIER_NODE) abort();
	  char * omp_name = IDENTIFIER_POINTER (yylval.ttype);
	  bool valid = false;
	  int code = check_omp_string (omp_name, &valid);
	  if (valid) return code;
	}
	return ret;
      }

    case CPP_NUMBER:
    case CPP_CHAR:
    case CPP_WCHAR:
      return CONSTANT;

    case CPP_STRING:
    case CPP_WSTRING:
      return yylexstring ();

      /* This token is Objective-C specific.  It gives the next token
	 special significance.  */
    case CPP_ATSIGN:

      /* These tokens are C++ specific (and will not be generated
         in C mode, but let's be cautious).  */
    case CPP_SCOPE:
    case CPP_DEREF_STAR:
    case CPP_DOT_STAR:
    case CPP_MIN_EQ:
    case CPP_MAX_EQ:
    case CPP_MIN:
    case CPP_MAX:
      /* These tokens should not survive translation phase 4.  */
    case CPP_HASH:
    case CPP_PASTE:
      error ("syntax error at '%s' token", NAME(last_token));
      goto get_next;

    default:
      abort ();
    }
  /* NOTREACHED */
}

static int
yylex()
{
  int r;
  timevar_push (TV_LEX);
  r = _yylex();
  timevar_pop (TV_LEX);
  return r;
}

/* Function used when yydebug is set, to print a token in more detail.  */

static void
yyprint (file, yychar, yyl)
     FILE *file;
     int yychar;
     YYSTYPE yyl;
{
  tree t = yyl.ttype;

  fprintf (file, " [%s]", NAME(last_token));

  switch (yychar)
    {
    case IDENTIFIER:
    case TYPENAME:
    case OBJECTNAME:
    case TYPESPEC:
    case TYPE_QUAL:
    case SCSPEC:
    case STATIC:
      if (IDENTIFIER_POINTER (t))
	fprintf (file, " `%s'", IDENTIFIER_POINTER (t));
      break;

    case CONSTANT:
      fprintf (file, " %s", GET_MODE_NAME (TYPE_MODE (TREE_TYPE (t))));
      if (TREE_CODE (t) == INTEGER_CST)
	fprintf (file,
#if HOST_BITS_PER_WIDE_INT == 64
#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT
		 " 0x%x%016x",
#else
#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG
		 " 0x%lx%016lx",
#else
		 " 0x%llx%016llx",
#endif
#endif
#else
#if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT
		 " 0x%lx%08lx",
#else
		 " 0x%x%08x",
#endif
#endif
		 TREE_INT_CST_HIGH (t), TREE_INT_CST_LOW (t));
      break;
    }
}

/* This is not the ideal place to put these, but we have to get them out
   of c-lex.c because cp/lex.c has its own versions.  */

/* Free malloced parser stacks if necessary.  */

void
free_parser_stacks ()
{
  if (malloced_yyss)
    {
      free (malloced_yyss);
      free (malloced_yyvs);
    }
}

#include "gt-c-parse.h"

