	.file	"combine.c"
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.text
.Ltext0:
	.section	.rodata
	.type	__FUNCTION__.11000, @object
	.size	__FUNCTION__.11000, 9
__FUNCTION__.11000:
	.string	"do_SUBST"
.LC0:
	.string	"../../../kgccfe/gnu/combine.c"
	.text
	.type	do_SUBST, @function
do_SUBST:
.LFB15:
	.file 1 "../../../kgccfe/gnu/combine.c"
	.loc 1 437 0
	pushl	%ebp
.LCFI0:
	movl	%esp, %ebp
.LCFI1:
	pushl	%edi
.LCFI2:
	pushl	%esi
.LCFI3:
	pushl	%ebx
.LCFI4:
	subl	$28, %esp
.LCFI5:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 439 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 441 0
	movl	-16(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L16
	.loc 1 449 0
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4
	.loc 1 454 0
	movl	12(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L7
	.loc 1 456 0
	leal	__FUNCTION__.11000@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$456, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L7:
	.loc 1 464 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L9
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L11
.L9:
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L4
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4
.L11:
	.loc 1 468 0
	leal	__FUNCTION__.11000@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$468, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4:
	.loc 1 471 0
	movl	4+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L13
	.loc 1 472 0
	movl	4+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, 4+undobuf@GOTOFF(%ebx)
	jmp	.L15
.L13:
	.loc 1 474 0
	movl	$16, (%esp)
	call	xmalloc@PLT
	movl	%eax, -20(%ebp)
.L15:
	.loc 1 476 0
	movl	-20(%ebp), %eax
	movl	$0, 4(%eax)
	.loc 1 477 0
	movl	-20(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 478 0
	movl	-20(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 8(%edx)
	.loc 1 479 0
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 481 0
	movl	undobuf@GOTOFF(%ebx), %edx
	movl	-20(%ebp), %eax
	movl	%edx, (%eax)
	movl	-20(%ebp), %eax
	movl	%eax, undobuf@GOTOFF(%ebx)
.L16:
	.loc 1 482 0
	addl	$28, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE15:
	.size	do_SUBST, .-do_SUBST
	.type	do_SUBST_INT, @function
do_SUBST_INT:
.LFB16:
	.loc 1 493 0
	pushl	%ebp
.LCFI6:
	movl	%esp, %ebp
.LCFI7:
	pushl	%ebx
.LCFI8:
	subl	$20, %esp
.LCFI9:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 495 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 497 0
	movl	-8(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L23
	.loc 1 500 0
	movl	4+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L20
	.loc 1 501 0
	movl	4+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, 4+undobuf@GOTOFF(%ebx)
	jmp	.L22
.L20:
	.loc 1 503 0
	movl	$16, (%esp)
	call	xmalloc@PLT
	movl	%eax, -12(%ebp)
.L22:
	.loc 1 505 0
	movl	-12(%ebp), %eax
	movl	$1, 4(%eax)
	.loc 1 506 0
	movl	-12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 507 0
	movl	-12(%ebp), %edx
	movl	-8(%ebp), %eax
	movl	%eax, 8(%edx)
	.loc 1 508 0
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 510 0
	movl	undobuf@GOTOFF(%ebx), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-12(%ebp), %eax
	movl	%eax, undobuf@GOTOFF(%ebx)
.L23:
	.loc 1 511 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE16:
	.size	do_SUBST_INT, .-do_SUBST_INT
.globl combine_instructions
	.type	combine_instructions, @function
combine_instructions:
.LFB17:
	.loc 1 524 0
	pushl	%ebp
.LCFI10:
	movl	%esp, %ebp
.LCFI11:
	pushl	%edi
.LCFI12:
	pushl	%esi
.LCFI13:
	pushl	%ebx
.LCFI14:
	subl	$108, %esp
.LCFI15:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 532 0
	movl	$0, -68(%ebp)
	.loc 1 534 0
	movl	$0, combine_attempts@GOTOFF(%ebx)
	.loc 1 535 0
	movl	$0, combine_merges@GOTOFF(%ebx)
	.loc 1 536 0
	movl	$0, combine_extras@GOTOFF(%ebx)
	.loc 1 537 0
	movl	$0, combine_successes@GOTOFF(%ebx)
	.loc 1 539 0
	movl	12(%ebp), %eax
	movl	%eax, combine_max_regno@GOTOFF(%ebx)
	.loc 1 541 0
	movl	$8, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_nonzero_bits@GOTOFF(%ebx)
	.loc 1 543 0
	movl	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	xcalloc@PLT
	movl	%eax, reg_sign_bit_copies@GOTOFF(%ebx)
	.loc 1 546 0
	movl	12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_death@GOTOFF(%ebx)
	.loc 1 547 0
	movl	12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set@GOTOFF(%ebx)
	.loc 1 548 0
	movl	12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_value@GOTOFF(%ebx)
	.loc 1 549 0
	movl	12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_table_tick@GOTOFF(%ebx)
	.loc 1 550 0
	movl	12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_label@GOTOFF(%ebx)
	.loc 1 551 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_invalid@GOTOFF(%ebx)
	.loc 1 552 0
	movl	12(%ebp), %eax
	sall	$2, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_mode@GOTOFF(%ebx)
	.loc 1 554 0
	movl	12(%ebp), %eax
	sall	$3, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_nonzero_bits@GOTOFF(%ebx)
	.loc 1 556 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, reg_last_set_sign_bit_copies@GOTOFF(%ebx)
	.loc 1 559 0
	call	init_reg_last_arrays
	.loc 1 561 0
	call	init_recog_no_volatile@PLT
	.loc 1 565 0
	movl	8(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	$0, -56(%ebp)
	jmp	.L25
.L26:
	.loc 1 566 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-56(%ebp), %eax
	jle	.L27
	.loc 1 567 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L27:
	.loc 1 565 0
	movl	-64(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
.L25:
	cmpl	$0, -64(%ebp)
	jne	.L26
	.loc 1 569 0
	movl	-56(%ebp), %eax
	sall	$2, %eax
	addl	$4, %eax
	movl	%eax, (%esp)
	call	xmalloc@PLT
	movl	%eax, uid_cuid@GOTOFF(%ebx)
	.loc 1 570 0
	movl	-56(%ebp), %eax
	movl	%eax, max_uid_cuid@GOTOFF(%ebx)
	.loc 1 572 0
	movl	$0, 8(%esp)
	movl	$1, 4(%esp)
	movl	$64, (%esp)
	call	mode_for_size@PLT
	movl	%eax, nonzero_bits_mode@GOTOFF(%ebx)
	.loc 1 577 0
	movl	$0, nonzero_sign_valid@GOTOFF(%ebx)
	.loc 1 590 0
	movl	$1, label_tick@GOTOFF(%ebx)
	.loc 1 594 0
	movl	$0, subst_prev_insn@GOTOFF(%ebx)
	.loc 1 596 0
	call	setup_incoming_promotions
	.loc 1 598 0
	movl	last_basic_block@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	sbitmap_alloc@PLT
	movl	%eax, refresh_blocks@GOTOFF(%ebx)
	.loc 1 599 0
	movl	refresh_blocks@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	sbitmap_zero@PLT
	.loc 1 600 0
	movl	$0, need_refresh@GOTOFF(%ebx)
	.loc 1 602 0
	movl	8(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	$0, -56(%ebp)
	jmp	.L30
.L31:
	.loc 1 604 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	addl	$1, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 605 0
	movl	-56(%ebp), %eax
	movl	%eax, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 606 0
	movl	-64(%ebp), %eax
	movl	%eax, subst_insn@GOTOFF(%ebx)
	.loc 1 608 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L32
	.loc 1 610 0
	movl	-64(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	leal	set_nonzero_bits_and_sign_copies@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
	.loc 1 612 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	record_dead_and_set_regs
.L32:
	.loc 1 622 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L34
	.loc 1 623 0
	movl	label_tick@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, label_tick@GOTOFF(%ebx)
.L34:
	.loc 1 602 0
	movl	-64(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
.L30:
	cmpl	$0, -64(%ebp)
	jne	.L31
	.loc 1 626 0
	movl	$1, nonzero_sign_valid@GOTOFF(%ebx)
	.loc 1 630 0
	movl	$1, label_tick@GOTOFF(%ebx)
	.loc 1 631 0
	movl	$0, last_call_cuid@GOTOFF(%ebx)
	.loc 1 632 0
	movl	$0, mem_last_set@GOTOFF(%ebx)
	.loc 1 633 0
	call	init_reg_last_arrays
	.loc 1 634 0
	call	setup_incoming_promotions
	.loc 1 636 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	%eax, this_basic_block@GOTOFF(%ebx)
	jmp	.L37
.L38:
	.loc 1 638 0
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 639 0
	jmp	.L39
.L40:
	.loc 1 642 0
	movl	$0, -60(%ebp)
	.loc 1 644 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L41
	.loc 1 645 0
	movl	label_tick@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, label_tick@GOTOFF(%ebx)
	jmp	.L43
.L41:
	.loc 1 647 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L43
	.loc 1 651 0
	movl	-64(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	check_promoted_subreg
	.loc 1 655 0
	movl	-64(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L45
.L46:
	.loc 1 656 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	leal	-68(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	try_combine
	movl	%eax, -60(%ebp)
	cmpl	$0, -60(%ebp)
	jne	.L43
	.loc 1 655 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
.L45:
	cmpl	$0, -52(%ebp)
	jne	.L46
	.loc 1 662 0
	movl	-64(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L49
.L50:
.LBB2:
	.loc 1 664 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 668 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L51
	.loc 1 671 0
	movl	-44(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 672 0
	jmp	.L53
.L54:
	.loc 1 674 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	leal	-68(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	try_combine
	movl	%eax, -60(%ebp)
	cmpl	$0, -60(%ebp)
	jne	.L43
	.loc 1 673 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
.L53:
	.loc 1 672 0
	cmpl	$0, -48(%ebp)
	jne	.L54
.L51:
.LBE2:
	.loc 1 662 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
.L49:
	cmpl	$0, -52(%ebp)
	jne	.L50
	.loc 1 742 0
	movl	-64(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L57
.L58:
	.loc 1 743 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L59
.L60:
	.loc 1 745 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %ecx
	leal	-68(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	try_combine
	movl	%eax, -60(%ebp)
	cmpl	$0, -60(%ebp)
	jne	.L43
	.loc 1 744 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
.L59:
	.loc 1 743 0
	cmpl	$0, -48(%ebp)
	jne	.L60
	.loc 1 742 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
.L57:
	cmpl	$0, -52(%ebp)
	jne	.L58
	.loc 1 750 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L43
	.loc 1 751 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	record_dead_and_set_regs
.L43:
	.loc 1 640 0
	cmpl	$0, -60(%ebp)
	jne	.L65
	movl	-64(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L67
.L65:
	movl	-60(%ebp), %eax
	movl	%eax, -100(%ebp)
.L67:
	movl	-100(%ebp), %eax
	movl	%eax, -64(%ebp)
.L39:
	.loc 1 639 0
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	cmpl	-64(%ebp), %eax
	jne	.L40
	.loc 1 636 0
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	52(%eax), %eax
	movl	%eax, this_basic_block@GOTOFF(%ebx)
.L37:
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	entry_exit_blocks@GOT(%ebx), %edx
	leal	80(%edx), %edx
	cmpl	%edx, %eax
	jne	.L38
	.loc 1 758 0
	call	clear_bb_flags@PLT
.LBB3:
	.loc 1 760 0
	movl	$0, -36(%ebp)
	movl	refresh_blocks@GOTOFF(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	refresh_blocks@GOTOFF(%ebx), %eax
	addl	$12, %eax
	movl	%eax, -28(%ebp)
	movl	$0, -40(%ebp)
	jmp	.L70
.L71:
.LBB4:
	movl	-40(%ebp), %eax
	sall	$3, %eax
	addl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	movl	-88(%ebp), %eax
	orl	-84(%ebp), %eax
	testl	%eax, %eax
	je	.L72
	jmp	.L74
.L75:
.LBB5:
	movl	-36(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L83
	movl	%eax, %edx
	xorl	%eax, %eax
.L83:
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	movl	-80(%ebp), %ecx
	movl	-76(%ebp), %esi
	movl	-88(%ebp), %eax
	andl	%ecx, %eax
	movl	-84(%ebp), %edx
	andl	%esi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L76
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-88(%ebp), %eax
	andl	%esi, %eax
	movl	-84(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	movl	-40(%ebp), %eax
	sall	$6, %eax
	addl	-36(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	basic_block_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	16(%edx,%eax,4), %ecx
	movl	basic_block_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	76(%eax), %eax
	orl	$1, %eax
	movl	%eax, 76(%ecx)
	movl	-88(%ebp), %eax
	orl	-84(%ebp), %eax
	testl	%eax, %eax
	je	.L72
.L76:
.LBE5:
	addl	$1, -36(%ebp)
.L74:
	cmpl	$63, -36(%ebp)
	jbe	.L75
.L72:
.LBE4:
	addl	$1, -40(%ebp)
	movl	$0, -36(%ebp)
.L70:
	movl	-40(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jb	.L71
.LBE3:
	.loc 1 762 0
	movl	$0, (%esp)
	call	purge_all_dead_edges@PLT
	movzbl	%al, %edx
	movl	-68(%ebp), %eax
	orl	%edx, %eax
	movl	%eax, -68(%ebp)
	.loc 1 763 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_noop_moves@PLT
	.loc 1 765 0
	movl	$25, 4(%esp)
	movl	$2, (%esp)
	call	update_life_info_in_dirty_blocks@PLT
	.loc 1 770 0
	movl	refresh_blocks@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 771 0
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 772 0
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 773 0
	movl	reg_last_death@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 774 0
	movl	reg_last_set@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 775 0
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 776 0
	movl	reg_last_set_table_tick@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 777 0
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 778 0
	movl	reg_last_set_invalid@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 779 0
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 780 0
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 781 0
	movl	reg_last_set_sign_bit_copies@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 782 0
	movl	uid_cuid@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	free@PLT
.LBB6:
	.loc 1 786 0
	movl	4+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	jmp	.L79
.L80:
	.loc 1 788 0
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 789 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	free@PLT
	.loc 1 786 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
.L79:
	cmpl	$0, -24(%ebp)
	jne	.L80
	.loc 1 791 0
	movl	$0, 4+undobuf@GOTOFF(%ebx)
.LBE6:
	.loc 1 794 0
	movl	total_attempts@GOTOFF(%ebx), %edx
	movl	combine_attempts@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, total_attempts@GOTOFF(%ebx)
	.loc 1 795 0
	movl	total_merges@GOTOFF(%ebx), %edx
	movl	combine_merges@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, total_merges@GOTOFF(%ebx)
	.loc 1 796 0
	movl	total_extras@GOTOFF(%ebx), %edx
	movl	combine_extras@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, total_extras@GOTOFF(%ebx)
	.loc 1 797 0
	movl	total_successes@GOTOFF(%ebx), %edx
	movl	combine_successes@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, total_successes@GOTOFF(%ebx)
	.loc 1 799 0
	movl	$0, nonzero_sign_valid@GOTOFF(%ebx)
	.loc 1 802 0
	call	init_recog@PLT
	.loc 1 804 0
	movl	-68(%ebp), %eax
	.loc 1 805 0
	addl	$108, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE17:
	.size	combine_instructions, .-combine_instructions
	.type	init_reg_last_arrays, @function
init_reg_last_arrays:
.LFB18:
	.loc 1 811 0
	pushl	%ebp
.LCFI16:
	movl	%esp, %ebp
.LCFI17:
	pushl	%edi
.LCFI18:
	pushl	%ebx
.LCFI19:
	subl	$16, %esp
.LCFI20:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 812 0
	movl	combine_max_regno@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
	.loc 1 814 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,4), %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 815 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,4), %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 816 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,4), %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 817 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,4), %edx
	movl	reg_last_set_table_tick@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 818 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,4), %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 819 0
	movl	reg_last_set_invalid@GOTOFF(%ebx), %eax
	movl	-12(%ebp), %edx
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 820 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,4), %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 821 0
	movl	-12(%ebp), %eax
	leal	0(,%eax,8), %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 822 0
	movl	reg_last_set_sign_bit_copies@GOTOFF(%ebx), %eax
	movl	-12(%ebp), %edx
	movl	%eax, %edi
	cld
	movl	%edx, %ecx
	movl	$0, %eax
	rep
	stosb
	.loc 1 823 0
	addl	$16, %esp
	popl	%ebx
	popl	%edi
	popl	%ebp
	ret
.LFE18:
	.size	init_reg_last_arrays, .-init_reg_last_arrays
	.type	setup_incoming_promotions, @function
setup_incoming_promotions:
.LFB19:
	.loc 1 829 0
	pushl	%ebp
.LCFI21:
	movl	%esp, %ebp
.LCFI22:
	pushl	%ebx
.LCFI23:
	subl	$100, %esp
.LCFI24:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 835 0
	call	get_insns@PLT
	movl	%eax, -12(%ebp)
	.loc 1 840 0
	movl	$0, -20(%ebp)
	jmp	.L87
.L88:
	.loc 1 844 0
	movl	-20(%ebp), %eax
	subl	$4, %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L89
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	jne	.L91
.L89:
	movl	$3, -80(%ebp)
	movl	$0, -76(%ebp)
	jmp	.L92
.L91:
	movl	$7, -80(%ebp)
	movl	$0, -76(%ebp)
.L92:
	movl	-76(%ebp), %eax
	cmpl	%eax, -84(%ebp)
	jb	.L93
	movl	-76(%ebp), %eax
	cmpl	%eax, -84(%ebp)
	ja	.L95
	movl	-80(%ebp), %eax
	cmpl	%eax, -88(%ebp)
	jbe	.L93
.L95:
	movl	-20(%ebp), %eax
	subl	$44, %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L96
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	jne	.L98
.L96:
	movl	$3, -64(%ebp)
	movl	$0, -60(%ebp)
	jmp	.L99
.L98:
	movl	$7, -64(%ebp)
	movl	$0, -60(%ebp)
.L99:
	movl	-60(%ebp), %eax
	cmpl	%eax, -68(%ebp)
	ja	.L100
	movl	-60(%ebp), %eax
	cmpl	%eax, -68(%ebp)
	jb	.L102
	movl	-64(%ebp), %eax
	cmpl	%eax, -72(%ebp)
	ja	.L100
.L102:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L103
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$131072, %eax
	testl	%eax, %eax
	je	.L105
.L103:
	movl	$1, -56(%ebp)
	jmp	.L106
.L105:
	movl	$2, -56(%ebp)
.L106:
	movl	-20(%ebp), %eax
	movl	$0, %edx
	divl	-56(%ebp)
	movl	%edx, %eax
	testl	%eax, %eax
	jne	.L100
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L100
.L93:
	movl	-20(%ebp), %eax
	movl	fixed_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L100
	leal	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	promoted_input_arg@PLT
	movl	%eax, -16(%ebp)
	cmpl	$0, -16(%ebp)
	je	.L100
	.loc 1 847 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	-24(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -52(%ebp)
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -48(%ebp)
	movl	-28(%ebp), %eax
	testl	%eax, %eax
	je	.L110
	movl	$131, -44(%ebp)
	jmp	.L112
.L110:
	movl	$130, -44(%ebp)
.L112:
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	record_value_for_reg
.L100:
	.loc 1 840 0
	addl	$1, -20(%ebp)
.L87:
	cmpl	$175, -20(%ebp)
	jbe	.L88
	.loc 1 854 0
	addl	$100, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE19:
	.size	setup_incoming_promotions, .-setup_incoming_promotions
	.type	set_nonzero_bits_and_sign_copies, @function
set_nonzero_bits_and_sign_copies:
.LFB20:
	.loc 1 872 0
	pushl	%ebp
.LCFI25:
	movl	%esp, %ebp
.LCFI26:
	pushl	%edi
.LCFI27:
	pushl	%esi
.LCFI28:
	pushl	%ebx
.LCFI29:
	subl	$60, %esp
.LCFI30:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 875 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L134
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L134
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	jne	.L134
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L134
	.loc 1 882 0
	cmpl	$0, 12(%ebp)
	je	.L121
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L123
.L121:
	.loc 1 884 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	.loc 1 885 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movb	$1, (%eax)
	.loc 1 886 0
	jmp	.L134
.L123:
	.loc 1 891 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_field_assignment
	movl	%eax, 12(%ebp)
	.loc 1 896 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	8(%ebp), %eax
	je	.L124
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L126
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L126
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L126
.L124:
.LBB7:
	.loc 1 902 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 926 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%edx, %ecx
	xorl	$-1, %ecx
	xorl	$-1, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L129
	.loc 1 927 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	%edx, -44(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -40(%ebp)
	movl	%ecx, -36(%ebp)
	movl	nonzero_bits_mode@GOTOFF(%ebx), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-40(%ebp), %eax
	orl	%esi, %eax
	movl	-36(%ebp), %edx
	orl	%edi, %edx
	movl	-44(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.L129:
	.loc 1 929 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -24(%ebp)
	.loc 1 930 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	je	.L131
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	movzbl	%al, %eax
	cmpl	-24(%ebp), %eax
	jbe	.L134
.L131:
	.loc 1 932 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	-24(%ebp), %eax
	movb	%al, (%edx)
	.loc 1 896 0
	jmp	.L134
.L126:
.LBE7:
	.loc 1 936 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	.loc 1 937 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movb	$1, (%eax)
.L134:
	.loc 1 940 0
	addl	$60, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE20:
	.size	set_nonzero_bits_and_sign_copies, .-set_nonzero_bits_and_sign_copies
	.type	can_combine_p, @function
can_combine_p:
.LFB21:
	.loc 1 959 0
	pushl	%ebp
.LCFI31:
	movl	%esp, %ebp
.LCFI32:
	pushl	%esi
.LCFI33:
	pushl	%ebx
.LCFI34:
	subl	$96, %esp
.LCFI35:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 961 0
	movl	$0, -48(%ebp)
	.loc 1 968 0
	cmpl	$0, 20(%ebp)
	je	.L136
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	next_active_insn@PLT
	cmpl	20(%ebp), %eax
	jne	.L138
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	next_active_insn@PLT
	cmpl	12(%ebp), %eax
	jne	.L138
	movl	$1, -80(%ebp)
	jmp	.L141
.L138:
	movl	$0, -80(%ebp)
.L141:
	movl	-80(%ebp), %eax
	movl	%eax, -84(%ebp)
	jmp	.L142
.L136:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	next_active_insn@PLT
	cmpl	12(%ebp), %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -84(%ebp)
.L142:
	movl	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 985 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L143
	.loc 1 986 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L145
.L143:
	.loc 1 987 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L146
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L146
	.loc 1 990 0
	movl	$0, -52(%ebp)
	jmp	.L149
.L150:
.LBB8:
	.loc 1 992 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, -28(%ebp)
	.loc 1 994 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -76(%ebp)
	cmpl	$58, -76(%ebp)
	je	.L153
	cmpl	$59, -76(%ebp)
	je	.L167
	cmpl	$57, -76(%ebp)
	je	.L152
	jmp	.L151
.L153:
	.loc 1 1012 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L167
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L167
.LBB9:
	.loc 1 1015 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 1016 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -20(%ebp)
	.loc 1 1017 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L158:
.LBB10:
	.loc 1 1021 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, -12(%ebp)
	.loc 1 1023 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	jne	.L159
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L159
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-16(%ebp), %eax
	jne	.L162
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax), %ecx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	reg_set_between_p@PLT
	testl	%eax, %eax
	setne	-69(%ebp)
	jmp	.L164
.L162:
	cmpl	$175, -16(%ebp)
	seta	-69(%ebp)
.L164:
	cmpb	$0, -69(%ebp)
	je	.L159
	.loc 1 1029 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L159:
.LBE10:
	.loc 1 1031 0
	subl	$1, -20(%ebp)
	cmpl	$0, -20(%ebp)
	jns	.L158
	.loc 1 1033 0
	jmp	.L167
.L152:
.LBE9:
	.loc 1 1042 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	je	.L168
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	je	.L167
.L168:
	.loc 1 1048 0
	cmpl	$0, -48(%ebp)
	je	.L170
	.loc 1 1049 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L170:
	.loc 1 1051 0
	movl	-28(%ebp), %eax
	movl	%eax, -48(%ebp)
	.loc 1 1052 0
	jmp	.L167
.L151:
	.loc 1 1056 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L167:
.LBE8:
	.loc 1 990 0
	addl	$1, -52(%ebp)
.L149:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-52(%ebp), %eax
	jg	.L150
	.loc 1 1060 0
	cmpl	$0, -48(%ebp)
	je	.L173
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$51, %ax
	jne	.L145
.L173:
	.loc 1 1064 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L146:
	.loc 1 1067 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L145:
	.loc 1 1069 0
	cmpl	$0, -48(%ebp)
	jne	.L176
	.loc 1 1070 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L176:
	.loc 1 1072 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_field_assignment
	movl	%eax, -48(%ebp)
	.loc 1 1073 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 1076 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	8(%eax), %eax
	cmpl	-40(%ebp), %eax
	je	.L178
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L178
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L178
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L182
	movl	$0, 8(%esp)
	movl	$4, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L178
.L182:
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$51, %ax
	je	.L178
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$60, %ax
	je	.L178
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L186
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$58, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_fusage@PLT
	testl	%eax, %eax
	jne	.L178
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L186
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L186
	movl	-40(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_regs@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	jne	.L178
.L186:
	cmpl	$0, 20(%ebp)
	je	.L191
	cmpl	$0, -32(%ebp)
	jne	.L191
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_used_between_p@PLT
	testl	%eax, %eax
	jne	.L178
.L191:
	cmpl	$0, -32(%ebp)
	jne	.L194
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L196
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$3, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L198
.L196:
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L199
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -64(%ebp)
	jmp	.L201
.L199:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
.L201:
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	jne	.L178
.L198:
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$51, %ax
	jne	.L202
	movl	-44(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L178
.L202:
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$53, %ax
	je	.L178
.L194:
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$9, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L178
	cmpl	$0, 20(%ebp)
	je	.L205
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$9, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L178
.L205:
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L207
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -60(%ebp)
	jmp	.L209
.L207:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
.L209:
	movl	last_call_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, -60(%ebp)
	jge	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L210
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L210
.L178:
	.loc 1 1131 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L210:
	.loc 1 1134 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L219
	.loc 1 1145 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L227
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L223
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-40(%ebp), %eax
	movl	4(%eax), %esi
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %ecx, %eax
	addl	%edx, %eax
	movzbl	(%eax,%esi), %eax
	testb	%al, %al
	je	.L225
.L223:
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L227
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-44(%ebp), %eax
	movl	4(%eax), %esi
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %ecx, %eax
	addl	%edx, %eax
	movzbl	(%eax,%esi), %eax
	testb	%al, %al
	jne	.L227
.L225:
	.loc 1 1157 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L219:
	.loc 1 1159 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$79, %ax
	je	.L227
	.loc 1 1160 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L227:
	.loc 1 1165 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L229
	.loc 1 1166 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -52(%ebp)
	jmp	.L231
.L232:
	.loc 1 1167 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L233
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L235
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L233
.L235:
	.loc 1 1171 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L233:
	.loc 1 1166 0
	subl	$1, -52(%ebp)
.L231:
	cmpl	$0, -52(%ebp)
	jns	.L232
.L229:
	.loc 1 1176 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$51, %ax
	je	.L237
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	volatile_refs_p@PLT
	testl	%eax, %eax
	je	.L239
.L237:
	.loc 1 1179 0
	cmpl	$0, 20(%ebp)
	je	.L240
	movl	20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	volatile_refs_p@PLT
	testl	%eax, %eax
	je	.L240
	.loc 1 1180 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L240:
	.loc 1 1182 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L243
.L244:
	.loc 1 1183 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L245
	movl	-36(%ebp), %eax
	cmpl	20(%ebp), %eax
	je	.L245
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	volatile_refs_p@PLT
	testl	%eax, %eax
	je	.L245
	.loc 1 1184 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L245:
	.loc 1 1182 0
	movl	-36(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
.L243:
	movl	-36(%ebp), %eax
	cmpl	12(%ebp), %eax
	jne	.L244
.L239:
	.loc 1 1190 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$51, %ax
	jne	.L249
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L249
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L249
	.loc 1 1192 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L249:
	.loc 1 1197 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L253
.L254:
	.loc 1 1198 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L255
	movl	-36(%ebp), %eax
	cmpl	20(%ebp), %eax
	je	.L255
	movl	-36(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	volatile_insn_p@PLT
	testl	%eax, %eax
	je	.L255
	.loc 1 1199 0
	movl	$0, -68(%ebp)
	jmp	.L166
.L255:
	.loc 1 1197 0
	movl	-36(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
.L253:
	movl	-36(%ebp), %eax
	cmpl	12(%ebp), %eax
	jne	.L254
	.loc 1 1235 0
	movl	24(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 1236 0
	movl	28(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 1238 0
	movl	$1, -68(%ebp)
.L166:
	movl	-68(%ebp), %eax
	.loc 1 1239 0
	addl	$96, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE21:
	.size	can_combine_p, .-can_combine_p
	.type	sets_function_arg_p, @function
sets_function_arg_p:
.LFB22:
	.loc 1 1247 0
	pushl	%ebp
.LCFI36:
	movl	%esp, %ebp
.LCFI37:
	pushl	%ebx
.LCFI38:
	subl	$80, %esp
.LCFI39:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1251 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -76(%ebp)
	cmpl	$49, -76(%ebp)
	je	.L264
	cmpl	$57, -76(%ebp)
	je	.L265
	cmpl	$42, -76(%ebp)
	je	.L263
	jmp	.L262
.L263:
	.loc 1 1254 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	sets_function_arg_p
	movl	%eax, -72(%ebp)
	jmp	.L266
.L264:
	.loc 1 1257 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L267
.L268:
	.loc 1 1258 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, (%esp)
	call	sets_function_arg_p
	testl	%eax, %eax
	je	.L267
	.loc 1 1259 0
	movl	$1, -72(%ebp)
	jmp	.L266
.L267:
	.loc 1 1257 0
	subl	$1, -16(%ebp)
	cmpl	$0, -16(%ebp)
	jns	.L268
	.loc 1 1261 0
	jmp	.L262
.L265:
	.loc 1 1264 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 1265 0
	jmp	.L271
.L272:
	.loc 1 1268 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
.L271:
	.loc 1 1265 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L272
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L272
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L272
	.loc 1 1270 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L276
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L276
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	subl	$4, %eax
	movl	%eax, -64(%ebp)
	movl	$0, -60(%ebp)
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L279
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	jne	.L281
.L279:
	movl	$3, -56(%ebp)
	movl	$0, -52(%ebp)
	jmp	.L282
.L281:
	movl	$7, -56(%ebp)
	movl	$0, -52(%ebp)
.L282:
	movl	-52(%ebp), %eax
	cmpl	%eax, -60(%ebp)
	jb	.L283
	movl	-52(%ebp), %eax
	cmpl	%eax, -60(%ebp)
	ja	.L285
	movl	-56(%ebp), %eax
	cmpl	%eax, -64(%ebp)
	jbe	.L283
.L285:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	subl	$44, %eax
	movl	%eax, -48(%ebp)
	movl	$0, -44(%ebp)
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L286
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	jne	.L288
.L286:
	movl	$3, -40(%ebp)
	movl	$0, -36(%ebp)
	jmp	.L289
.L288:
	movl	$7, -40(%ebp)
	movl	$0, -36(%ebp)
.L289:
	movl	-36(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	ja	.L276
	movl	-36(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	jb	.L291
	movl	-40(%ebp), %eax
	cmpl	%eax, -48(%ebp)
	ja	.L276
.L291:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L292
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$131072, %eax
	testl	%eax, %eax
	je	.L294
.L292:
	movl	$1, -28(%ebp)
	jmp	.L295
.L294:
	movl	$2, -28(%ebp)
.L295:
	movl	-32(%ebp), %eax
	movl	$0, %edx
	divl	-28(%ebp)
	movl	%edx, %eax
	testl	%eax, %eax
	jne	.L276
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L276
.L283:
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	fixed_regs@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	jne	.L276
	movl	$1, -68(%ebp)
	jmp	.L298
.L276:
	movl	$0, -68(%ebp)
.L298:
	movl	-68(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L266
.L262:
	.loc 1 1278 0
	movl	$0, -72(%ebp)
.L266:
	movl	-72(%ebp), %eax
	.loc 1 1279 0
	addl	$80, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE22:
	.size	sets_function_arg_p, .-sets_function_arg_p
	.type	combinable_i3pat, @function
combinable_i3pat:
.LFB23:
	.loc 1 1326 0
	pushl	%ebp
.LCFI40:
	movl	%esp, %ebp
.LCFI41:
	pushl	%esi
.LCFI42:
	pushl	%ebx
.LCFI43:
	subl	$80, %esp
.LCFI44:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1327 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 1329 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L301
.LBB11:
	.loc 1 1331 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_field_assignment
	movl	%eax, -28(%ebp)
	.loc 1 1332 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 1333 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 1334 0
	movl	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1340 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 1342 0
	jmp	.L303
.L304:
	.loc 1 1345 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L303:
	.loc 1 1342 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L304
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L304
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L304
	.loc 1 1373 0
	movl	-16(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L308
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L310
	cmpl	$0, 20(%ebp)
	je	.L308
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L310
.L308:
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L313
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L313
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-16(%ebp), %eax
	movl	4(%eax), %esi
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %ecx, %eax
	addl	%edx, %eax
	movzbl	(%eax,%esi), %eax
	testb	%al, %al
	je	.L310
.L313:
	cmpl	$0, 24(%ebp)
	je	.L316
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L316
.L310:
	.loc 1 1392 0
	movl	$0, -52(%ebp)
	jmp	.L318
.L316:
	.loc 1 1399 0
	cmpl	$0, 28(%ebp)
	je	.L333
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L333
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L333
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$1, %eax
	je	.L333
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L324
	movl	$17, -44(%ebp)
	jmp	.L326
.L324:
	movl	$30, -44(%ebp)
.L326:
	movl	-44(%ebp), %eax
	cmpl	%eax, -48(%ebp)
	je	.L333
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	jne	.L328
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	fixed_regs@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	jne	.L333
.L328:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$29, %eax
	je	.L333
	.loc 1 1411 0
	movl	28(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L331
	.loc 1 1412 0
	movl	$0, -52(%ebp)
	jmp	.L318
.L331:
	.loc 1 1414 0
	movl	28(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, (%edx)
	jmp	.L333
.L301:
.LBE11:
	.loc 1 1418 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L333
.LBB12:
	.loc 1 1422 0
	movl	$0, -12(%ebp)
	jmp	.L335
.L336:
	.loc 1 1423 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	leal	4(%eax), %edx
	movl	-12(%ebp), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	28(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	combinable_i3pat
	testl	%eax, %eax
	jne	.L337
	.loc 1 1425 0
	movl	$0, -52(%ebp)
	jmp	.L318
.L337:
	.loc 1 1422 0
	addl	$1, -12(%ebp)
.L335:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-12(%ebp), %eax
	jg	.L336
.L333:
.LBE12:
	.loc 1 1428 0
	movl	$1, -52(%ebp)
.L318:
	movl	-52(%ebp), %eax
	.loc 1 1429 0
	addl	$80, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE23:
	.size	combinable_i3pat, .-combinable_i3pat
	.type	contains_muldiv, @function
contains_muldiv:
.LFB24:
	.loc 1 1437 0
	pushl	%ebp
.LCFI45:
	movl	%esp, %ebp
.LCFI46:
	pushl	%ebx
.LCFI47:
	subl	$36, %esp
.LCFI48:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1438 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -24(%ebp)
	cmpl	$88, -24(%ebp)
	je	.L342
	cmpl	$88, -24(%ebp)
	jb	.L341
	cmpl	$92, -24(%ebp)
	ja	.L341
	.loc 1 1441 0
	movl	$1, -20(%ebp)
	jmp	.L344
.L342:
	.loc 1 1444 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L345
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	jns	.L347
.L345:
	movl	$1, -16(%ebp)
	jmp	.L348
.L347:
	movl	$0, -16(%ebp)
.L348:
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
	jmp	.L344
.L341:
	.loc 1 1447 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	cmpl	$50, -12(%ebp)
	je	.L351
	cmpl	$50, -12(%ebp)
	jg	.L352
	cmpl	$49, -12(%ebp)
	je	.L350
	jmp	.L349
.L352:
	cmpl	$60, -12(%ebp)
	je	.L351
	cmpl	$99, -12(%ebp)
	je	.L351
	jmp	.L349
.L351:
	.loc 1 1450 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	contains_muldiv
	testl	%eax, %eax
	jne	.L353
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	contains_muldiv
	testl	%eax, %eax
	je	.L355
.L353:
	movl	$1, -8(%ebp)
	jmp	.L356
.L355:
	movl	$0, -8(%ebp)
.L356:
	movl	-8(%ebp), %eax
	movl	%eax, -20(%ebp)
	jmp	.L344
.L350:
	.loc 1 1454 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	contains_muldiv
	movl	%eax, -20(%ebp)
	jmp	.L344
.L349:
	.loc 1 1457 0
	movl	$0, -20(%ebp)
.L344:
	movl	-20(%ebp), %eax
	.loc 1 1460 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE24:
	.size	contains_muldiv, .-contains_muldiv
	.type	cant_combine_insn_p, @function
cant_combine_insn_p:
.LFB25:
	.loc 1 1469 0
	pushl	%ebp
.LCFI49:
	movl	%esp, %ebp
.LCFI50:
	pushl	%ebx
.LCFI51:
	subl	$36, %esp
.LCFI52:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1476 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	je	.L359
	.loc 1 1477 0
	movl	$1, -32(%ebp)
	jmp	.L361
.L359:
	.loc 1 1486 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L362
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L364
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L366
.L364:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -24(%ebp)
.L366:
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L367
.L362:
	movl	$0, -28(%ebp)
.L367:
	movl	-28(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1487 0
	cmpl	$0, -16(%ebp)
	jne	.L368
	.loc 1 1488 0
	movl	$0, -32(%ebp)
	jmp	.L361
.L368:
	.loc 1 1489 0
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 1490 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 1491 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L370
	.loc 1 1492 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
.L370:
	.loc 1 1493 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L372
	.loc 1 1494 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
.L372:
	.loc 1 1495 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L374
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L374
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L377
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	fixed_regs@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	je	.L379
.L377:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L374
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	fixed_regs@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	testb	%al, %al
	jne	.L374
.L379:
	.loc 1 1500 0
	movl	$1, -32(%ebp)
	jmp	.L361
.L374:
	.loc 1 1502 0
	movl	$0, -32(%ebp)
.L361:
	movl	-32(%ebp), %eax
	.loc 1 1503 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE25:
	.size	cant_combine_insn_p, .-cant_combine_insn_p
	.section	.rodata
	.type	__FUNCTION__.12102, @object
	.size	__FUNCTION__.12102, 12
__FUNCTION__.12102:
	.string	"try_combine"
	.text
	.type	try_combine, @function
try_combine:
.LFB26:
	.loc 1 1525 0
	pushl	%ebp
.LCFI53:
	movl	%esp, %ebp
.LCFI54:
	pushl	%edi
.LCFI55:
	pushl	%esi
.LCFI56:
	pushl	%ebx
.LCFI57:
	subl	$716, %esp
.LCFI58:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1527 0
	movl	$0, -260(%ebp)
	.loc 1 1528 0
	movl	$0, -252(%ebp)
	movl	$0, -248(%ebp)
	.loc 1 1536 0
	movl	$0, -224(%ebp)
	movl	$0, -220(%ebp)
	.loc 1 1540 0
	movl	$0, -264(%ebp)
	.loc 1 1542 0
	movl	$0, -276(%ebp)
	movl	$0, -280(%ebp)
	.loc 1 1546 0
	movl	$0, -212(%ebp)
	movl	$0, -208(%ebp)
	movl	$0, -204(%ebp)
	.loc 1 1547 0
	movl	$0, -200(%ebp)
	.loc 1 1551 0
	movl	$0, -196(%ebp)
	.loc 1 1553 0
	movl	$0, -192(%ebp)
	.loc 1 1562 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cant_combine_insn_p
	testl	%eax, %eax
	jne	.L383
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	cant_combine_insn_p
	testl	%eax, %eax
	jne	.L383
	cmpl	$0, 16(%ebp)
	je	.L386
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	cant_combine_insn_p
	testl	%eax, %eax
	je	.L386
.L383:
	.loc 1 1574 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L386:
	.loc 1 1576 0
	movl	combine_attempts@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, combine_attempts@GOTOFF(%ebx)
	.loc 1 1577 0
	movl	$0, 8+undobuf@GOTOFF(%ebx)
.LBB13:
	.loc 1 1580 0
	leal	newpat_used_regs@GOTOFF(%ebx), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-172(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-172(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE13:
	.loc 1 1584 0
	cmpl	$0, 16(%ebp)
	je	.L389
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L391
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -676(%ebp)
	jmp	.L393
.L391:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -676(%ebp)
.L393:
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L394
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -672(%ebp)
	jmp	.L396
.L394:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -672(%ebp)
.L396:
	movl	-672(%ebp), %eax
	cmpl	%eax, -676(%ebp)
	jle	.L389
	.loc 1 1585 0
	movl	16(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, 12(%ebp)
.L389:
	.loc 1 1587 0
	movl	$0, added_links_insn@GOTOFF(%ebx)
	.loc 1 1605 0
	cmpl	$0, 16(%ebp)
	jne	.L398
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	je	.L398
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L398
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L398
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	next_real_insn@PLT
	cmpl	8(%ebp), %eax
	jne	.L398
.LBB14:
	.loc 1 1621 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -168(%ebp)
	.loc 1 1633 0
	movl	$0, -176(%ebp)
	jmp	.L411
.L412:
	.loc 1 1634 0
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	je	.L413
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L415
.L413:
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L416
.L415:
	.loc 1 1633 0
	addl	$1, -176(%ebp)
.L411:
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-176(%ebp), %eax
	jg	.L412
.L416:
	.loc 1 1640 0
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-176(%ebp), %eax
	jne	.L398
	.loc 1 1641 0
	movl	$0, -176(%ebp)
	jmp	.L418
.L419:
	.loc 1 1642 0
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	je	.L420
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L422
.L420:
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L422
	.loc 1 1646 0
	movl	combine_merges@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, combine_merges@GOTOFF(%ebx)
	.loc 1 1648 0
	movl	8(%ebp), %eax
	movl	%eax, subst_insn@GOTOFF(%ebx)
	.loc 1 1649 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L424
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -668(%ebp)
	jmp	.L426
.L424:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -668(%ebp)
.L426:
	movl	-668(%ebp), %edx
	movl	%edx, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 1651 0
	movl	$0, -244(%ebp)
	movl	-244(%ebp), %eax
	movl	%eax, -240(%ebp)
	.loc 1 1652 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -268(%ebp)
	.loc 1 1657 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %ecx
	movl	-168(%ebp), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	addl	$4, %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 1660 0
	movl	-168(%ebp), %eax
	movl	%eax, -256(%ebp)
	.loc 1 1661 0
	movl	$1, -196(%ebp)
	.loc 1 1662 0
	jmp	.L427
.L422:
	.loc 1 1641 0
	addl	$1, -176(%ebp)
.L418:
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-176(%ebp), %eax
	jg	.L419
.L398:
.LBE14:
	.loc 1 1669 0
	cmpl	$0, 16(%ebp)
	jne	.L428
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L430
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L432
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -660(%ebp)
	jmp	.L434
.L432:
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -660(%ebp)
.L434:
	movl	-660(%ebp), %ecx
	movl	%ecx, -664(%ebp)
	jmp	.L435
.L430:
	movl	$0, -664(%ebp)
.L435:
	movl	-664(%ebp), %esi
	movl	%esi, -184(%ebp)
	cmpl	$0, -184(%ebp)
	je	.L428
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L437
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L428
.L437:
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L428
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L428
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -656(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L441
	movl	$16, -652(%ebp)
	jmp	.L443
.L441:
	movl	$8, -652(%ebp)
.L443:
	movl	-652(%ebp), %edi
	cmpl	%edi, -656(%ebp)
	jne	.L428
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L428
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L428
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L428
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L428
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -648(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L449
	movl	$8, -644(%ebp)
	jmp	.L451
.L449:
	movl	$4, -644(%ebp)
.L451:
	movl	-644(%ebp), %eax
	cmpl	%eax, -648(%ebp)
	jne	.L428
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L428
.LBB15:
	.loc 1 1685 0
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L454
	.loc 1 1686 0
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	cmpl	$0, -308(%ebp)
	jns	.L456
	movl	$-1, -640(%ebp)
	movl	$-1, -636(%ebp)
	jmp	.L458
.L456:
	movl	$0, -640(%ebp)
	movl	$0, -636(%ebp)
.L458:
	movl	-640(%ebp), %edx
	movl	-636(%ebp), %ecx
	movl	%edx, -304(%ebp)
	movl	%ecx, -300(%ebp)
	jmp	.L459
.L454:
	.loc 1 1689 0
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	.loc 1 1690 0
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	16(%eax), %edx
	movl	12(%eax), %eax
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
.L459:
	.loc 1 1693 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L460
	.loc 1 1700 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L462
	movl	$0, -632(%ebp)
	movl	$0, -628(%ebp)
	jmp	.L464
.L462:
	movl	$0, -632(%ebp)
	movl	$-1, -628(%ebp)
.L464:
	movl	-312(%ebp), %esi
	movl	-308(%ebp), %edi
	movl	-632(%ebp), %eax
	andl	%esi, %eax
	movl	-628(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	.loc 1 1701 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -624(%ebp)
	movl	%edx, -620(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L465
	movl	$-1, -616(%ebp)
	movl	$-1, -612(%ebp)
	jmp	.L467
.L465:
	movl	$-1, -616(%ebp)
	movl	$0, -612(%ebp)
.L467:
	movl	-624(%ebp), %eax
	andl	-616(%ebp), %eax
	movl	-620(%ebp), %edx
	andl	-612(%ebp), %edx
	movl	-312(%ebp), %esi
	movl	-308(%ebp), %edi
	movl	%esi, -608(%ebp)
	movl	%edi, -604(%ebp)
	movl	-608(%ebp), %esi
	orl	%eax, %esi
	movl	-604(%ebp), %edi
	orl	%edx, %edi
	movl	%esi, -312(%ebp)
	movl	%edi, -308(%ebp)
	jmp	.L468
.L460:
	.loc 1 1704 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L469
	.loc 1 1705 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	jmp	.L468
.L469:
	.loc 1 1706 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	jne	.L471
.LBB16:
	.loc 1 1709 0
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$31, %eax
	negl	%eax
	movl	%eax, -164(%ebp)
	.loc 1 1711 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L473
	movl	$-1, -600(%ebp)
	movl	$-1, -596(%ebp)
	jmp	.L475
.L473:
	movl	$-1, -600(%ebp)
	movl	$0, -596(%ebp)
.L475:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L476
	movl	$63, -588(%ebp)
	jmp	.L478
.L476:
	movl	$31, -588(%ebp)
.L478:
	movl	-600(%ebp), %eax
	movl	-596(%ebp), %edx
	movzbl	-588(%ebp), %ecx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1045
	movl	%eax, %edx
	xorl	%eax, %eax
.L1045:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	movl	%eax, -584(%ebp)
	movl	%edx, -580(%ebp)
	movl	-584(%ebp), %eax
	andl	%esi, %eax
	movl	-580(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	.loc 1 1713 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -576(%ebp)
	movl	%edx, -572(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L479
	movl	$63, -564(%ebp)
	jmp	.L481
.L479:
	movl	$31, -564(%ebp)
.L481:
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	movzbl	-564(%ebp), %ecx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1044
	movl	%eax, %edx
	xorl	%eax, %eax
.L1044:
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$1, %esi, %edi
	addl	%esi, %esi
	movl	%esi, -560(%ebp)
	movl	%edi, -556(%ebp)
	movl	-312(%ebp), %esi
	movl	-308(%ebp), %edi
	movl	-560(%ebp), %eax
	orl	%esi, %eax
	movl	-556(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	.loc 1 1715 0
	movl	-164(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, %ecx
	xorl	-300(%ebp), %ecx
	xorl	-304(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L468
	.loc 1 1716 0
	cmpl	$0, -308(%ebp)
	jns	.L484
	movl	$-1, -552(%ebp)
	movl	$-1, -548(%ebp)
	jmp	.L486
.L484:
	movl	$0, -552(%ebp)
	movl	$0, -548(%ebp)
.L486:
	movl	-552(%ebp), %eax
	movl	-548(%ebp), %edx
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	jmp	.L468
.L471:
.LBE16:
	.loc 1 1721 0
	leal	__FUNCTION__.12102@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1721, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L468:
	.loc 1 1723 0
	movl	combine_merges@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, combine_merges@GOTOFF(%ebx)
	.loc 1 1724 0
	movl	8(%ebp), %eax
	movl	%eax, subst_insn@GOTOFF(%ebx)
	.loc 1 1725 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L487
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -544(%ebp)
	jmp	.L489
.L487:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -544(%ebp)
.L489:
	movl	-544(%ebp), %edx
	movl	%edx, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 1726 0
	movl	$0, -244(%ebp)
	movl	-244(%ebp), %eax
	movl	%eax, -240(%ebp)
	.loc 1 1727 0
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -268(%ebp)
	.loc 1 1729 0
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 16(%esp)
	movl	-304(%ebp), %eax
	movl	-300(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	immed_double_const@PLT
	movl	-184(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 1732 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -256(%ebp)
	.loc 1 1733 0
	jmp	.L427
.L428:
.LBE15:
	.loc 1 1750 0
	cmpl	$0, 16(%ebp)
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	jle	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$4, %eax
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L490
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %edx
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L490
	.loc 1 1762 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -176(%ebp)
	jmp	.L501
.L502:
	.loc 1 1763 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L503
	.loc 1 1762 0
	subl	$1, -176(%ebp)
.L501:
	cmpl	$1, -176(%ebp)
	jg	.L502
.L503:
	.loc 1 1766 0
	cmpl	$1, -176(%ebp)
	jne	.L490
	.loc 1 1773 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %edx
	movl	12(%ebp), %eax
	movl	36(%eax), %ecx
	movl	12(%ebp), %eax
	movl	28(%eax), %esi
	movl	12(%ebp), %eax
	movl	4(%eax), %edi
	movl	$0, 40(%esp)
	movl	$0, 36(%esp)
	movl	$-1, 32(%esp)
	movl	%edx, 28(%esp)
	movl	%ecx, 24(%esp)
	movl	%esi, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	%edi, 8(%esp)
	movl	$0, 4(%esp)
	movl	$42, (%esp)
	call	gen_rtx_fmt_iuuBteiee@PLT
	movl	%eax, 16(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, subst_prev_insn@GOTOFF(%ebx)
	.loc 1 1779 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%ebp), %edx
	addl	$44, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 1780 0
	movl	16(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	addl	$4, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
.L490:
	.loc 1 1787 0
	leal	-272(%ebp), %eax
	movl	%eax, 20(%esp)
	leal	-268(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	can_combine_p
	testl	%eax, %eax
	je	.L506
	cmpl	$0, 16(%ebp)
	je	.L508
	leal	-280(%ebp), %eax
	movl	%eax, 20(%esp)
	leal	-276(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	can_combine_p
	testl	%eax, %eax
	jne	.L508
.L506:
	.loc 1 1790 0
	call	undo_all
	.loc 1 1791 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L508:
	.loc 1 1796 0
	movl	-272(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_overlap_mentioned_p@PLT
	movl	%eax, -212(%ebp)
	.loc 1 1797 0
	cmpl	$0, 16(%ebp)
	je	.L510
	movl	-280(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L510
	movl	$1, -540(%ebp)
	jmp	.L513
.L510:
	movl	$0, -540(%ebp)
.L513:
	movl	-540(%ebp), %ecx
	movl	%ecx, -208(%ebp)
	.loc 1 1798 0
	cmpl	$0, 16(%ebp)
	je	.L514
	movl	-280(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L514
	movl	$1, -536(%ebp)
	jmp	.L517
.L514:
	movl	$0, -536(%ebp)
.L517:
	movl	-536(%ebp), %esi
	movl	%esi, -204(%ebp)
	.loc 1 1802 0
	cmpl	$0, 16(%ebp)
	je	.L518
	movl	-272(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L518
	movl	$1, -532(%ebp)
	jmp	.L521
.L518:
	movl	$0, -532(%ebp)
.L521:
	movl	-532(%ebp), %edi
	movl	%edi, -200(%ebp)
	.loc 1 1805 0
	cmpl	$0, 16(%ebp)
	je	.L522
	cmpl	$0, -204(%ebp)
	je	.L522
	cmpl	$0, -200(%ebp)
	je	.L522
	movl	$1, -528(%ebp)
	jmp	.L526
.L522:
	movl	$0, -528(%ebp)
.L526:
	movl	-276(%ebp), %edx
	movl	-268(%ebp), %ecx
	movl	8(%ebp), %esi
	addl	$44, %esi
	leal	-264(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-528(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	combinable_i3pat
	testl	%eax, %eax
	jne	.L527
	.loc 1 1809 0
	call	undo_all
	.loc 1 1810 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L527:
	.loc 1 1816 0
	movl	-272(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	je	.L529
	cmpl	$0, 16(%ebp)
	je	.L531
	movl	-280(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	je	.L529
.L531:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L533
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L533
.L529:
	.loc 1 1820 0
	movl	$1, -192(%ebp)
.L533:
	.loc 1 1860 0
	movl	-268(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -240(%ebp)
	.loc 1 1862 0
	cmpl	$0, 16(%ebp)
	je	.L535
	cmpl	$0, -200(%ebp)
	je	.L537
	movl	-276(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L535
	jmp	.L540
.L537:
	movl	-276(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L541
	movl	-276(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L541
	movl	$1, -520(%ebp)
	jmp	.L544
.L541:
	movl	$0, -520(%ebp)
.L544:
	movzbl	-520(%ebp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L535
.L540:
	movl	$1, -524(%ebp)
	jmp	.L545
.L535:
	movl	$0, -524(%ebp)
.L545:
	movl	-524(%ebp), %edx
	movl	%edx, -244(%ebp)
	.loc 1 1873 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L546
	movl	-272(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -516(%ebp)
	jmp	.L548
.L546:
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -516(%ebp)
.L548:
	movl	-516(%ebp), %ecx
	movl	%ecx, -216(%ebp)
	.loc 1 1877 0
	cmpl	$0, -240(%ebp)
	je	.L549
	.loc 1 1878 0
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -216(%ebp)
.L549:
	.loc 1 1880 0
	movl	combine_merges@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, combine_merges@GOTOFF(%ebx)
	.loc 1 1884 0
	call	max_reg_num@PLT
	movl	%eax, -188(%ebp)
	.loc 1 1886 0
	movl	8(%ebp), %eax
	movl	%eax, subst_insn@GOTOFF(%ebx)
	.loc 1 1902 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L551
	.loc 1 1907 0
	cmpl	$0, 16(%ebp)
	je	.L553
	.loc 1 1909 0
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L555
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -512(%ebp)
	jmp	.L557
.L555:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -512(%ebp)
.L557:
	movl	-512(%ebp), %esi
	movl	%esi, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 1910 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	-280(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -280(%ebp)
	jmp	.L551
.L553:
	.loc 1 1914 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L558
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -508(%ebp)
	jmp	.L560
.L558:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -508(%ebp)
.L560:
	movl	-508(%ebp), %edi
	movl	%edi, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 1915 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	-272(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -272(%ebp)
.L551:
	.loc 1 1931 0
	cmpl	$0, 16(%ebp)
	jne	.L561
	cmpl	$0, -240(%ebp)
	je	.L561
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L561
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L561
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L561
	movl	-268(%ebp), %edx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L561
	.loc 1 1941 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -256(%ebp)
	.loc 1 1942 0
	movl	-272(%ebp), %edx
	movl	-256(%ebp), %eax
	movl	12(%eax), %eax
	addl	$4, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 1944 0
	movl	$1, -232(%ebp)
	.loc 1 1931 0
	jmp	.L568
.L561:
	.loc 1 1982 0
	movl	$0, n_occurrences@GOTOFF(%ebx)
	.loc 1 1988 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L569
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -504(%ebp)
	jmp	.L571
.L569:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -504(%ebp)
.L571:
	movl	-504(%ebp), %eax
	movl	%eax, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 1989 0
	cmpl	$0, -200(%ebp)
	jne	.L572
	cmpl	$0, -208(%ebp)
	je	.L572
	movl	$1, -500(%ebp)
	jmp	.L575
.L572:
	movl	$0, -500(%ebp)
.L575:
	movl	-272(%ebp), %edx
	movl	-268(%ebp), %ecx
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	-500(%ebp), %esi
	movl	%esi, 16(%esp)
	movl	$0, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	subst
	movl	%eax, -256(%ebp)
	.loc 1 1991 0
	movl	$1, -252(%ebp)
	.loc 1 1994 0
	movl	n_occurrences@GOTOFF(%ebx), %eax
	movl	%eax, -232(%ebp)
.L568:
	.loc 1 2000 0
	cmpl	$0, 16(%ebp)
	je	.L576
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	je	.L576
	.loc 1 2006 0
	movl	-276(%ebp), %eax
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	combinable_i3pat
	testl	%eax, %eax
	jne	.L579
	.loc 1 2009 0
	call	undo_all
	.loc 1 2010 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L579:
	.loc 1 2013 0
	movl	$0, n_occurrences@GOTOFF(%ebx)
	.loc 1 2014 0
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L581
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -496(%ebp)
	jmp	.L583
.L581:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -496(%ebp)
.L583:
	movl	-496(%ebp), %edi
	movl	%edi, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 2015 0
	movl	-280(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	-256(%ebp), %ecx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	subst
	movl	%eax, -256(%ebp)
	.loc 1 2016 0
	movl	$1, -248(%ebp)
.L576:
	.loc 1 2021 0
	call	max_reg_num@PLT
	cmpl	-188(%ebp), %eax
	jne	.L584
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	je	.L584
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L587
	movl	-256(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L587
	cmpl	$0, -192(%ebp)
	jne	.L587
.L584:
	.loc 1 2036 0
	call	undo_all
	.loc 1 2037 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L587:
	.loc 1 2045 0
	cmpl	$0, -244(%ebp)
	jne	.L590
	cmpl	$0, -240(%ebp)
	je	.L427
.L590:
	.loc 1 2047 0
	movl	combine_extras@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, combine_extras@GOTOFF(%ebx)
	.loc 1 2049 0
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L592
.LBB17:
	.loc 1 2051 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -160(%ebp)
	.loc 1 2052 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	addl	-244(%ebp), %eax
	addl	-240(%ebp), %eax
	movl	%eax, -236(%ebp)
	.loc 1 2053 0
	movl	-236(%ebp), %eax
	movl	%eax, (%esp)
	call	rtvec_alloc@PLT
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, -256(%ebp)
	.loc 1 2054 0
	movl	-160(%ebp), %eax
	movl	(%eax), %eax
	leal	0(,%eax,4), %ecx
	movl	-160(%ebp), %edx
	addl	$4, %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	addl	$4, %eax
	movl	%eax, %edi
	movl	%edx, %esi
	cld
	rep
	movsb
	jmp	.L594
.L592:
.LBE17:
.LBB18:
	.loc 1 2059 0
	movl	-256(%ebp), %eax
	movl	%eax, -156(%ebp)
	.loc 1 2060 0
	movl	-240(%ebp), %eax
	addl	-244(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -236(%ebp)
	.loc 1 2061 0
	movl	-236(%ebp), %eax
	movl	%eax, (%esp)
	call	rtvec_alloc@PLT
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, -256(%ebp)
	.loc 1 2062 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %edx
	movl	-156(%ebp), %eax
	movl	%eax, 4(%edx)
.L594:
.LBE18:
	.loc 1 2065 0
	cmpl	$0, -244(%ebp)
	je	.L595
	.loc 1 2066 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -492(%ebp)
	subl	$1, -236(%ebp)
	movl	-236(%ebp), %eax
	movl	%eax, -488(%ebp)
	movl	16(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L597
	movl	-280(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -484(%ebp)
	jmp	.L599
.L597:
	movl	16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -484(%ebp)
.L599:
	movl	-484(%ebp), %esi
	movl	-488(%ebp), %edx
	movl	-492(%ebp), %ecx
	movl	%esi, 4(%ecx,%edx,4)
.L595:
	.loc 1 2070 0
	cmpl	$0, -240(%ebp)
	je	.L427
	.loc 1 2075 0
	cmpl	$0, 16(%ebp)
	jne	.L601
	.loc 1 2076 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %ecx
	subl	$1, -236(%ebp)
	movl	-236(%ebp), %edx
	movl	-216(%ebp), %eax
	movl	%eax, 4(%ecx,%edx,4)
	jmp	.L427
.L601:
	.loc 1 2079 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %esi
	subl	$1, -236(%ebp)
	movl	-236(%ebp), %edi
	movl	-280(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	subst
	movl	%eax, 4(%esi,%edi,4)
.L427:
	.loc 1 2089 0
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	mark_used_regs_combine
	.loc 1 2092 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
	.loc 1 2103 0
	cmpl	$0, -228(%ebp)
	jns	.L603
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L603
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L603
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L603
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L603
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L603
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	je	.L603
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L603
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L603
	.loc 1 2112 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -256(%ebp)
	.loc 1 2113 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
	.loc 1 2103 0
	jmp	.L613
.L603:
	.loc 1 2116 0
	cmpl	$0, -228(%ebp)
	jns	.L613
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L613
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L613
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L613
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L613
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L613
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	je	.L613
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L613
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L613
	.loc 1 2125 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	%eax, -256(%ebp)
	.loc 1 2126 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
.L613:
	.loc 1 2135 0
	cmpl	$0, 16(%ebp)
	je	.L623
	cmpl	$0, -228(%ebp)
	jns	.L623
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L623
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L623
.LBB19:
	.loc 1 2139 0
	movl	-268(%ebp), %eax
	movl	%eax, -148(%ebp)
	.loc 1 2145 0
	movl	-256(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	split_insns@PLT
	movl	%eax, -296(%ebp)
	.loc 1 2154 0
	movl	-296(%ebp), %eax
	testl	%eax, %eax
	jne	.L628
	movl	-256(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L628
	.loc 1 2158 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	-268(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	je	.L631
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L631
	movl	-268(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L631
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L635
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L631
	cmpl	$0, -240(%ebp)
	jne	.L631
	movl	-268(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L631
.L635:
	.loc 1 2164 0
	movl	-268(%ebp), %eax
	movl	4(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -148(%ebp)
.L631:
	.loc 1 2167 0
	movl	-148(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	-256(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$2, (%esp)
	call	gen_rtvec@PLT
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	split_insns@PLT
	movl	%eax, -296(%ebp)
	.loc 1 2175 0
	movl	-296(%ebp), %eax
	testl	%eax, %eax
	jne	.L628
	movl	-268(%ebp), %eax
	cmpl	%eax, -148(%ebp)
	je	.L628
	.loc 1 2177 0
	movl	-268(%ebp), %eax
	movl	%eax, -148(%ebp)
	.loc 1 2178 0
	movl	-268(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	-256(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$2, (%esp)
	call	gen_rtvec@PLT
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	split_insns@PLT
	movl	%eax, -296(%ebp)
.L628:
	.loc 1 2187 0
	movl	-296(%ebp), %eax
	testl	%eax, %eax
	je	.L641
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	jne	.L641
	.loc 1 2189 0
	movl	-296(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -296(%ebp)
	.loc 1 2190 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-296(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
	.loc 1 2191 0
	cmpl	$0, -228(%ebp)
	js	.L646
	.loc 1 2192 0
	movl	-296(%ebp), %eax
	movl	%eax, -256(%ebp)
	.loc 1 2187 0
	jmp	.L646
.L641:
	.loc 1 2194 0
	movl	-296(%ebp), %eax
	testl	%eax, %eax
	je	.L646
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	jne	.L646
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	next_real_insn@PLT
	cmpl	8(%ebp), %eax
	je	.L649
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L651
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -480(%ebp)
	jmp	.L653
.L651:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -480(%ebp)
.L653:
	movl	-296(%ebp), %eax
	movl	44(%eax), %eax
	movl	-480(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	jne	.L646
.L649:
.LBB20:
	.loc 1 2199 0
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -292(%ebp)
	.loc 1 2200 0
	movl	-296(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -260(%ebp)
	.loc 1 2202 0
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L654
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L656
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -472(%ebp)
	jmp	.L658
.L656:
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %edx
	movl	-296(%ebp), %eax
	movl	20(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -472(%ebp)
.L658:
	movl	-472(%ebp), %eax
	movl	%eax, -476(%ebp)
	jmp	.L659
.L654:
	movl	$0, -476(%ebp)
.L659:
	movl	-476(%ebp), %edx
	movl	%edx, -140(%ebp)
	.loc 1 2203 0
	movl	-296(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L660
	movl	-296(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L662
	movl	-296(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -464(%ebp)
	jmp	.L664
.L662:
	movl	-296(%ebp), %eax
	movl	44(%eax), %eax
	movl	-296(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	single_set_2@PLT
	movl	%eax, -464(%ebp)
.L664:
	movl	-464(%ebp), %ecx
	movl	%ecx, -468(%ebp)
	jmp	.L665
.L660:
	movl	$0, -468(%ebp)
.L665:
	movl	-468(%ebp), %esi
	movl	%esi, -144(%ebp)
	.loc 1 2209 0
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L666
	.loc 1 2210 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L666:
	.loc 1 2212 0
	leal	-288(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -224(%ebp)
	.loc 1 2218 0
	cmpl	$0, -224(%ebp)
	js	.L668
	cmpl	$0, -144(%ebp)
	je	.L668
	cmpl	$0, -140(%ebp)
	je	.L668
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	next_real_insn@PLT
	cmpl	8(%ebp), %eax
	je	.L672
	movl	-144(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_used_between_p@PLT
	testl	%eax, %eax
	jne	.L668
.L672:
	.loc 1 2221 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
.L668:
	.loc 1 2223 0
	cmpl	$0, -228(%ebp)
	js	.L674
	.loc 1 2224 0
	movl	-292(%ebp), %eax
	movl	%eax, -256(%ebp)
.L674:
	.loc 1 2229 0
	cmpl	$0, -228(%ebp)
	js	.L646
.LBB21:
	.loc 1 2231 0
	movl	-140(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -136(%ebp)
	.loc 1 2232 0
	movl	-144(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -132(%ebp)
	.loc 1 2234 0
	jmp	.L677
.L678:
	.loc 1 2237 0
	movl	-136(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -136(%ebp)
.L677:
	.loc 1 2234 0
	movl	-136(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L678
	movl	-136(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L678
	movl	-136(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L678
	.loc 1 2239 0
	jmp	.L682
.L683:
	.loc 1 2242 0
	movl	-132(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -132(%ebp)
.L682:
	.loc 1 2239 0
	movl	-132(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L683
	movl	-132(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L683
	movl	-132(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L683
	.loc 1 2244 0
	movl	-136(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L646
	movl	-132(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L646
	movl	-136(%ebp), %eax
	movl	4(%eax), %edx
	movl	-132(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L646
	.loc 1 2247 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-132(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	12(%edx), %eax
	addl	$1, %eax
	movl	%eax, 12(%edx)
.L646:
.LBE21:
.LBE20:
	.loc 1 2254 0
	cmpl	$0, -228(%ebp)
	jns	.L725
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -152(%ebp)
	cmpl	$0, -152(%ebp)
	je	.L725
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %edx
	movl	-268(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	je	.L693
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L693
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L693
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L725
	cmpl	$0, -240(%ebp)
	jne	.L725
	movl	-268(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L725
.L693:
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	next_real_insn@PLT
	cmpl	8(%ebp), %eax
	je	.L699
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L701
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -460(%ebp)
	jmp	.L703
.L701:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -460(%ebp)
.L703:
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	-460(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	jne	.L725
.L699:
	movl	-256(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	jne	.L725
.LBB22:
	.loc 1 2271 0
	movl	-268(%ebp), %eax
	movl	%eax, -128(%ebp)
	.loc 1 2272 0
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -124(%ebp)
	.loc 1 2273 0
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	.loc 1 2277 0
	movl	-268(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-120(%ebp), %eax
	je	.L705
	cmpl	$0, -120(%ebp)
	je	.L705
	.loc 1 2279 0
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -128(%ebp)
	.loc 1 2281 0
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L705
	.loc 1 2282 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	-128(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L705:
	.loc 1 2288 0
	cmpl	$88, -124(%ebp)
	jne	.L709
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L709
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -456(%ebp)
	movl	%ecx, -452(%ebp)
	cmpl	$0, -452(%ebp)
	js	.L709
	cmpl	$0, -452(%ebp)
	jg	.L713
	cmpl	$0, -456(%ebp)
	jbe	.L709
.L713:
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -176(%ebp)
	cmpl	$0, -176(%ebp)
	js	.L709
	.loc 1 2293 0
	movl	-176(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 2297 0
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -124(%ebp)
.L709:
	.loc 1 2303 0
	cmpl	$73, -124(%ebp)
	jne	.L715
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L715
	.loc 1 2308 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L718
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L720
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L718
.L720:
	.loc 1 2310 0
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$130, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 2308 0
	jmp	.L715
.L718:
	.loc 1 2314 0
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$131, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
.L715:
	.loc 1 2319 0
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -260(%ebp)
	.loc 1 2320 0
	movl	-128(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 2321 0
	leal	-288(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -224(%ebp)
	.loc 1 2325 0
	cmpl	$0, -224(%ebp)
	js	.L725
	cmpl	$88, -124(%ebp)
	jne	.L723
	cmpl	$0, -192(%ebp)
	je	.L725
.L723:
	.loc 1 2326 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
	.loc 1 2135 0
	jmp	.L725
.L623:
.LBE22:
.LBE19:
	.loc 1 2345 0
	cmpl	$0, 16(%ebp)
	je	.L726
	cmpl	$0, -228(%ebp)
	jns	.L726
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L726
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L726
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L737
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -444(%ebp)
	jmp	.L739
.L737:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -444(%ebp)
.L739:
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %eax
	movl	-444(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L743
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L743
	movl	-184(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -436(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L746
	movl	$64, -432(%ebp)
	jmp	.L748
.L746:
	movl	$32, -432(%ebp)
.L748:
	movl	-432(%ebp), %esi
	cmpl	%esi, -436(%ebp)
	jge	.L743
	movl	-184(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$31, %ax
	ja	.L743
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L743
	movl	$1, -440(%ebp)
	jmp	.L752
.L743:
	movl	$0, -440(%ebp)
.L752:
	cmpl	$0, -440(%ebp)
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L754
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L756
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L756
	movl	-184(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -424(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L759
	movl	$64, -420(%ebp)
	jmp	.L761
.L759:
	movl	$32, -420(%ebp)
.L761:
	movl	-420(%ebp), %edi
	cmpl	%edi, -424(%ebp)
	jge	.L756
	movl	-184(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$31, %ax
	ja	.L756
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L756
	movl	$1, -428(%ebp)
	jmp	.L765
.L756:
	movl	$0, -428(%ebp)
.L765:
	cmpl	$0, -428(%ebp)
	jne	.L726
.L754:
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L726
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L726
.LBB23:
	.loc 1 2381 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
	.loc 1 2382 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -116(%ebp)
	.loc 1 2383 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	%eax, -256(%ebp)
	.loc 1 2384 0
	movl	-256(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-116(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	-256(%ebp), %eax
	addl	$12, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 2386 0
	leal	-288(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -224(%ebp)
	.loc 1 2388 0
	cmpl	$0, -224(%ebp)
	js	.L768
	.loc 1 2389 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
.L768:
	.loc 1 2391 0
	cmpl	$0, -228(%ebp)
	js	.L725
.LBB24:
	.loc 1 2405 0
	movl	-256(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%edx, 44(%eax)
	.loc 1 2406 0
	movl	$0, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$4, (%esp)
	call	gen_rtx_fmt_ue@PLT
	movl	%eax, (%esp)
	call	distribute_links
	.loc 1 2417 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -112(%ebp)
	.loc 1 2418 0
	jmp	.L772
.L773:
	.loc 1 2422 0
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L774
	movl	-112(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L774
	.loc 1 2424 0
	movl	-112(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -108(%ebp)
	jmp	.L777
.L778:
	.loc 1 2426 0
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L779
	.loc 1 2427 0
	movl	-108(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
.L779:
	.loc 1 2425 0
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -108(%ebp)
.L777:
	.loc 1 2424 0
	cmpl	$0, -108(%ebp)
	jne	.L778
	.loc 1 2429 0
	jmp	.L725
.L774:
	.loc 1 2420 0
	movl	-112(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -112(%ebp)
.L772:
	.loc 1 2418 0
	cmpl	$0, -112(%ebp)
	je	.L725
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	52(%eax), %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, %edx
	je	.L773
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	52(%eax), %eax
	movl	(%eax), %eax
	cmpl	-112(%ebp), %eax
	jne	.L773
	.loc 1 2345 0
	jmp	.L725
.L726:
.LBE24:
.LBE23:
	.loc 1 2440 0
	cmpl	$0, 16(%ebp)
	je	.L725
	cmpl	$0, -228(%ebp)
	jns	.L725
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	asm_noperands@PLT
	testl	%eax, %eax
	jns	.L725
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L725
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L795
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -416(%ebp)
	jmp	.L797
.L795:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -416(%ebp)
.L797:
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %eax
	movl	-416(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	jne	.L725
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	contains_muldiv
	testl	%eax, %eax
	je	.L803
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	contains_muldiv
	testl	%eax, %eax
	jne	.L725
.L803:
	.loc 1 2473 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %eax
	movl	%eax, -260(%ebp)
	.loc 1 2474 0
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -256(%ebp)
	.loc 1 2477 0
	leal	-288(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -224(%ebp)
	.loc 1 2479 0
	cmpl	$0, -224(%ebp)
	js	.L725
	.loc 1 2480 0
	leal	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -228(%ebp)
.L725:
	.loc 1 2485 0
	cmpl	$0, -228(%ebp)
	jns	.L806
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	check_asm_operands@PLT
	testl	%eax, %eax
	je	.L808
	cmpl	$0, -244(%ebp)
	jne	.L808
	cmpl	$0, -240(%ebp)
	je	.L806
.L808:
	.loc 1 2489 0
	call	undo_all
	.loc 1 2490 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L806:
	.loc 1 2494 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L811
.LBB25:
	.loc 1 2496 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -292(%ebp)
.LBB26:
	.loc 1 2500 0
	leal	newpat_used_regs@GOTOFF(%ebx), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-96(%ebp), %eax
	addl	$8, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	-96(%ebp), %eax
	addl	$16, %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
.LBE26:
	.loc 1 2502 0
	movl	8+undobuf@GOTOFF(%ebx), %edx
	leal	-296(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	leal	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	movl	%eax, -220(%ebp)
	.loc 1 2505 0
	cmpl	$0, -220(%ebp)
	jns	.L813
	movl	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	check_asm_operands@PLT
	testl	%eax, %eax
	jne	.L813
	.loc 1 2507 0
	call	undo_all
	.loc 1 2508 0
	movl	$0, -680(%ebp)
	jmp	.L388
.L813:
	.loc 1 2511 0
	movl	8+undobuf@GOTOFF(%ebx), %edx
	movl	-292(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 2516 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	68(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L816
.L817:
	.loc 1 2518 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 2520 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$10, %al
	jne	.L818
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	44(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L818
	.loc 1 2523 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L821
	.loc 1 2524 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	subl	$1, %eax
	movl	%eax, 24(%edx)
.L821:
	.loc 1 2526 0
	movl	8+undobuf@GOTOFF(%ebx), %edx
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	remove_note@PLT
.L818:
	.loc 1 2516 0
	movl	-100(%ebp), %eax
	movl	%eax, -104(%ebp)
.L816:
	cmpl	$0, -104(%ebp)
	jne	.L817
	.loc 1 2530 0
	movl	-296(%ebp), %eax
	movl	%eax, -104(%ebp)
	jmp	.L824
.L825:
	.loc 1 2531 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L826
	.loc 1 2532 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L826:
	.loc 1 2530 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -104(%ebp)
.L824:
	cmpl	$0, -104(%ebp)
	jne	.L825
	.loc 1 2534 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	8+undobuf@GOTOFF(%ebx), %edx
	movl	-296(%ebp), %ecx
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	distribute_notes
.L811:
.LBE25:
.LBB27:
	.loc 1 2555 0
	movl	$0, -84(%ebp)
	.loc 1 2556 0
	movl	$0, -72(%ebp)
	.loc 1 2557 0
	movl	$0, -296(%ebp)
	.loc 1 2564 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L829
	movl	-260(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L831
.L829:
	cmpl	$0, -212(%ebp)
	jne	.L831
	cmpl	$0, -204(%ebp)
	jne	.L831
	movl	-268(%ebp), %ecx
	movl	%ecx, -412(%ebp)
	jmp	.L834
.L831:
	movl	$0, -412(%ebp)
.L834:
	movl	-412(%ebp), %esi
	movl	%esi, -64(%ebp)
	.loc 1 2567 0
	cmpl	$0, 16(%ebp)
	je	.L835
	cmpl	$0, -208(%ebp)
	jne	.L835
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L838
	movl	-260(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	jne	.L835
.L838:
	movl	-276(%ebp), %edi
	movl	%edi, -408(%ebp)
	jmp	.L840
.L835:
	movl	$0, -408(%ebp)
.L840:
	movl	-408(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 2571 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	8(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -80(%ebp)
	.loc 1 2572 0
	movl	12(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 2573 0
	cmpl	$0, 16(%ebp)
	je	.L841
	.loc 1 2574 0
	movl	16(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -84(%ebp)
	movl	16(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -72(%ebp)
.L841:
	.loc 1 2580 0
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
	.loc 1 2581 0
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
	.loc 1 2582 0
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
	.loc 1 2583 0
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
	.loc 1 2584 0
	movl	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
	.loc 1 2585 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L843
	.loc 1 2586 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
.L843:
	.loc 1 2588 0
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx_if_shared@PLT
	movl	%eax, -92(%ebp)
	.loc 1 2589 0
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx_if_shared@PLT
	movl	%eax, -88(%ebp)
	.loc 1 2590 0
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx_if_shared@PLT
	movl	%eax, -84(%ebp)
	.loc 1 2591 0
	movl	-256(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx_if_shared@PLT
	movl	%eax, -256(%ebp)
	.loc 1 2592 0
	movl	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx_if_shared@PLT
	movl	%eax, -260(%ebp)
	.loc 1 2593 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L845
	.loc 1 2594 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
.L845:
	.loc 1 2596 0
	movl	8(%ebp), %edx
	movl	-228(%ebp), %eax
	movl	%eax, 52(%edx)
	.loc 1 2597 0
	movl	-256(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%edx, 44(%eax)
	.loc 1 2599 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L847
	movl	8(%ebp), %eax
	movl	76(%eax), %eax
	testl	%eax, %eax
	je	.L847
.LBB28:
	.loc 1 2601 0
	movl	8(%ebp), %eax
	movl	76(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 2603 0
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	reset_used_flags@PLT
	.loc 1 2604 0
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -56(%ebp)
	.loc 1 2606 0
	cmpl	$0, -252(%ebp)
	je	.L850
	.loc 1 2607 0
	movl	-272(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_rtx@PLT
.L850:
	.loc 1 2609 0
	cmpl	$0, -248(%ebp)
	je	.L852
	.loc 1 2610 0
	movl	-280(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_rtx@PLT
.L852:
	.loc 1 2612 0
	movl	8(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, 76(%edx)
.L847:
.LBE28:
	.loc 1 2615 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L854
	.loc 1 2616 0
	movl	8+undobuf@GOTOFF(%ebx), %edx
	movl	-220(%ebp), %eax
	movl	%eax, 52(%edx)
.L854:
	.loc 1 2627 0
	cmpl	$0, -196(%ebp)
	je	.L856
	.loc 1 2629 0
	movl	$0, -176(%ebp)
	jmp	.L858
.L859:
	.loc 1 2630 0
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L860
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L860
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	-268(%ebp), %eax
	cmpl	%eax, %edx
	je	.L860
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	jne	.L860
	.loc 1 2635 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -184(%ebp)
	.loc 1 2636 0
	jmp	.L865
.L866:
	.loc 1 2639 0
	movl	-184(%ebp), %eax
	cmpl	8(%ebp), %eax
	je	.L867
	movl	-184(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L867
	.loc 1 2640 0
	movl	-184(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -180(%ebp)
	jmp	.L870
.L871:
	.loc 1 2641 0
	movl	-180(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	12(%ebp), %eax
	jne	.L872
	.loc 1 2642 0
	movl	-180(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%edx)
.L872:
	.loc 1 2640 0
	movl	-180(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -180(%ebp)
.L870:
	cmpl	$0, -180(%ebp)
	jne	.L871
.L867:
	.loc 1 2638 0
	movl	-184(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -184(%ebp)
.L865:
	.loc 1 2636 0
	cmpl	$0, -184(%ebp)
	je	.L860
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	52(%eax), %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, %edx
	je	.L866
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	(%eax), %eax
	cmpl	-184(%ebp), %eax
	jne	.L866
.L860:
	.loc 1 2629 0
	addl	$1, -176(%ebp)
.L858:
	movl	12(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-176(%ebp), %eax
	jg	.L859
	.loc 1 2644 0
	cmpl	$0, -92(%ebp)
	je	.L877
.LBB29:
	.loc 1 2646 0
	movl	-92(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 2647 0
	jmp	.L879
.L880:
	.loc 1 2648 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
.L879:
	.loc 1 2647 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L880
	.loc 1 2649 0
	movl	-52(%ebp), %edx
	movl	-88(%ebp), %eax
	movl	%eax, 12(%edx)
	jmp	.L882
.L877:
.LBE29:
	.loc 1 2652 0
	movl	-88(%ebp), %eax
	movl	%eax, -92(%ebp)
.L882:
	.loc 1 2653 0
	movl	$0, -88(%ebp)
.L856:
	.loc 1 2656 0
	movl	8(%ebp), %eax
	movl	$0, 60(%eax)
	.loc 1 2657 0
	movl	8(%ebp), %eax
	movl	$0, 68(%eax)
	.loc 1 2658 0
	movl	12(%ebp), %eax
	movl	$0, 60(%eax)
	.loc 1 2659 0
	movl	12(%ebp), %eax
	movl	$0, 68(%eax)
	.loc 1 2661 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L883
	.loc 1 2663 0
	movl	12(%ebp), %edx
	movl	-224(%ebp), %eax
	movl	%eax, 52(%edx)
	.loc 1 2664 0
	movl	-260(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%edx, 44(%eax)
	jmp	.L885
.L883:
	.loc 1 2668 0
	movl	12(%ebp), %eax
	movw	$47, (%eax)
	.loc 1 2669 0
	movl	12(%ebp), %eax
	movl	$-99, 44(%eax)
	.loc 1 2670 0
	movl	12(%ebp), %eax
	movl	$0, 36(%eax)
.L885:
	.loc 1 2673 0
	cmpl	$0, 16(%ebp)
	je	.L886
	.loc 1 2675 0
	movl	16(%ebp), %eax
	movl	$0, 60(%eax)
	.loc 1 2676 0
	movl	16(%ebp), %eax
	movl	$0, 68(%eax)
	.loc 1 2677 0
	movl	16(%ebp), %eax
	movw	$47, (%eax)
	.loc 1 2678 0
	movl	16(%ebp), %eax
	movl	$-99, 44(%eax)
	.loc 1 2679 0
	movl	16(%ebp), %eax
	movl	$0, 36(%eax)
.L886:
	.loc 1 2687 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L888
	.loc 1 2689 0
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L890
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -404(%ebp)
	jmp	.L892
.L890:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -404(%ebp)
.L892:
	movl	-260(%ebp), %edx
	leal	-296(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-404(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	move_deaths
	.loc 1 2690 0
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L893
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -400(%ebp)
	jmp	.L895
.L893:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -400(%ebp)
.L895:
	movl	-260(%ebp), %edx
	movl	-256(%ebp), %ecx
	leal	-296(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-400(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	move_deaths
	jmp	.L896
.L888:
	.loc 1 2693 0
	cmpl	$0, 16(%ebp)
	je	.L897
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L899
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -392(%ebp)
	jmp	.L901
.L899:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -392(%ebp)
.L901:
	movl	-392(%ebp), %edi
	movl	%edi, -396(%ebp)
	jmp	.L902
.L897:
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L903
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -388(%ebp)
	jmp	.L905
.L903:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -388(%ebp)
.L905:
	movl	-388(%ebp), %eax
	movl	%eax, -396(%ebp)
.L902:
	movl	-256(%ebp), %eax
	leal	-296(%ebp), %edx
	movl	%edx, 16(%esp)
	movl	8(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	-396(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	move_deaths
.L896:
	.loc 1 2697 0
	cmpl	$0, -92(%ebp)
	je	.L906
	.loc 1 2698 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L908
	movl	12(%ebp), %ecx
	movl	%ecx, -384(%ebp)
	jmp	.L910
.L908:
	movl	$0, -384(%ebp)
.L910:
	movl	-60(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-384(%ebp), %esi
	movl	%esi, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_notes
.L906:
	.loc 1 2700 0
	cmpl	$0, -88(%ebp)
	je	.L911
	.loc 1 2701 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L913
	movl	12(%ebp), %edi
	movl	%edi, -380(%ebp)
	jmp	.L915
.L913:
	movl	$0, -380(%ebp)
.L915:
	movl	-60(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-380(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_notes
.L911:
	.loc 1 2703 0
	cmpl	$0, -84(%ebp)
	je	.L916
	.loc 1 2704 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L918
	movl	12(%ebp), %edx
	movl	%edx, -376(%ebp)
	jmp	.L920
.L918:
	movl	$0, -376(%ebp)
.L920:
	movl	-60(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-376(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_notes
.L916:
	.loc 1 2706 0
	movl	-296(%ebp), %eax
	testl	%eax, %eax
	je	.L921
	.loc 1 2707 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L923
	movl	12(%ebp), %esi
	movl	%esi, -372(%ebp)
	jmp	.L925
.L923:
	movl	$0, -372(%ebp)
.L925:
	movl	-296(%ebp), %edx
	movl	-60(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-372(%ebp), %edi
	movl	%edi, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
.L921:
	.loc 1 2715 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L926
	movl	-288(%ebp), %eax
	testl	%eax, %eax
	je	.L926
	.loc 1 2717 0
	movl	-288(%ebp), %eax
	movl	%eax, -184(%ebp)
	jmp	.L929
.L930:
	.loc 1 2718 0
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L931
	.loc 1 2719 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L931:
	.loc 1 2717 0
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -184(%ebp)
.L929:
	cmpl	$0, -184(%ebp)
	jne	.L930
	.loc 1 2721 0
	movl	-288(%ebp), %eax
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	12(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	distribute_notes
.L926:
	.loc 1 2724 0
	movl	-284(%ebp), %eax
	testl	%eax, %eax
	je	.L934
	.loc 1 2726 0
	movl	-284(%ebp), %eax
	movl	%eax, -184(%ebp)
	jmp	.L936
.L937:
	.loc 1 2727 0
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L938
	.loc 1 2728 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-184(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L938:
	.loc 1 2726 0
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -184(%ebp)
.L936:
	cmpl	$0, -184(%ebp)
	jne	.L937
	.loc 1 2730 0
	movl	-284(%ebp), %eax
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	8(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	8(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	distribute_notes
.L934:
	.loc 1 2740 0
	movl	-264(%ebp), %eax
	testl	%eax, %eax
	je	.L941
	.loc 1 2742 0
	movl	-264(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L943
	.loc 1 2743 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-264(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L943:
	.loc 1 2745 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L945
	movl	-260(%ebp), %eax
	movl	-264(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L945
	.loc 1 2746 0
	movl	-264(%ebp), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-60(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
	.loc 1 2745 0
	jmp	.L941
.L945:
	.loc 1 2750 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L948
	movl	12(%ebp), %eax
	movl	%eax, -368(%ebp)
	jmp	.L950
.L948:
	movl	$0, -368(%ebp)
.L950:
	movl	-264(%ebp), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-60(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-368(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
.L941:
	.loc 1 2756 0
	cmpl	$0, -212(%ebp)
	je	.L951
	.loc 1 2758 0
	movl	-268(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L953
	.loc 1 2759 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L953:
	.loc 1 2761 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L955
	movl	-260(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L955
	.loc 1 2762 0
	movl	-268(%ebp), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
	.loc 1 2761 0
	jmp	.L951
.L955:
	.loc 1 2765 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L958
	movl	12(%ebp), %esi
	movl	%esi, -364(%ebp)
	jmp	.L960
.L958:
	movl	$0, -364(%ebp)
.L960:
	movl	-268(%ebp), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-364(%ebp), %edi
	movl	%edi, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
.L951:
	.loc 1 2770 0
	cmpl	$0, -208(%ebp)
	je	.L961
	.loc 1 2772 0
	movl	-276(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L963
	.loc 1 2773 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L963:
	.loc 1 2775 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L965
	movl	-260(%ebp), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L965
	.loc 1 2776 0
	movl	-276(%ebp), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
	.loc 1 2775 0
	jmp	.L961
.L965:
	.loc 1 2779 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L968
	movl	12(%ebp), %eax
	movl	%eax, -360(%ebp)
	jmp	.L970
.L968:
	movl	$0, -360(%ebp)
.L970:
	movl	-276(%ebp), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-360(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
.L961:
	.loc 1 2784 0
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_links
	.loc 1 2785 0
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_links
	.loc 1 2786 0
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_links
	.loc 1 2788 0
	movl	-268(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L971
.LBB30:
	.loc 1 2791 0
	movl	$0, -44(%ebp)
	movl	$0, -40(%ebp)
	.loc 1 2801 0
	movl	8(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L973
.L974:
	.loc 1 2802 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L975
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L977
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -352(%ebp)
	jmp	.L979
.L977:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -352(%ebp)
.L979:
	movl	-352(%ebp), %esi
	movl	%esi, -356(%ebp)
	jmp	.L980
.L975:
	movl	$0, -356(%ebp)
.L980:
	movl	-356(%ebp), %edi
	movl	%edi, -36(%ebp)
	cmpl	$0, -36(%ebp)
	je	.L981
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L981
	.loc 1 2804 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -40(%ebp)
.L981:
	.loc 1 2801 0
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
.L973:
	cmpl	$0, -48(%ebp)
	jne	.L974
	.loc 1 2806 0
	movl	-268(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	-44(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	record_value_for_reg
	.loc 1 2810 0
	cmpl	$0, -240(%ebp)
	jne	.L971
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L986
	movl	-260(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L971
.L986:
	cmpl	$0, -212(%ebp)
	jne	.L971
	.loc 1 2814 0
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 2815 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-68(%ebp), %eax
	movl	16(%edx,%eax,4), %edx
	movl	12(%edx), %eax
	subl	$1, %eax
	movl	%eax, 12(%edx)
.L971:
.LBE30:
	.loc 1 2819 0
	cmpl	$0, 16(%ebp)
	je	.L989
	movl	-276(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L989
.LBB31:
	.loc 1 2822 0
	movl	$0, -28(%ebp)
	movl	$0, -24(%ebp)
	.loc 1 2824 0
	movl	8(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L992
.L993:
	.loc 1 2825 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L994
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L996
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -344(%ebp)
	jmp	.L998
.L996:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -344(%ebp)
.L998:
	movl	-344(%ebp), %eax
	movl	%eax, -348(%ebp)
	jmp	.L999
.L994:
	movl	$0, -348(%ebp)
.L999:
	movl	-348(%ebp), %edx
	movl	%edx, -20(%ebp)
	cmpl	$0, -20(%ebp)
	je	.L1000
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	-276(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1000
	.loc 1 2827 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -24(%ebp)
.L1000:
	.loc 1 2824 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -32(%ebp)
.L992:
	cmpl	$0, -32(%ebp)
	jne	.L993
	.loc 1 2829 0
	movl	-276(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	record_value_for_reg
	.loc 1 2831 0
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 2832 0
	cmpl	$0, -244(%ebp)
	jne	.L989
	cmpl	$0, -208(%ebp)
	jne	.L989
	.loc 1 2833 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-68(%ebp), %eax
	movl	16(%edx,%eax,4), %edx
	movl	12(%edx), %eax
	subl	$1, %eax
	movl	%eax, 12(%edx)
.L989:
.LBE31:
	.loc 1 2839 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L1006
	.loc 1 2840 0
	movl	-260(%ebp), %edx
	movl	$0, 8(%esp)
	leal	set_nonzero_bits_and_sign_copies@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
.L1006:
	.loc 1 2841 0
	movl	-256(%ebp), %edx
	movl	$0, 8(%esp)
	leal	set_nonzero_bits_and_sign_copies@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
	.loc 1 2850 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	returnjump_p@PLT
	testl	%eax, %eax
	jne	.L1008
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	any_uncondjump_p@PLT
	testl	%eax, %eax
	je	.L1010
.L1008:
	.loc 1 2852 0
	movl	20(%ebp), %eax
	movl	$1, (%eax)
	.loc 1 2854 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	next_nonnote_insn@PLT
	movl	%eax, -184(%ebp)
	cmpl	$0, -184(%ebp)
	je	.L1011
	movl	-184(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$45, %ax
	je	.L1010
.L1011:
	.loc 1 2856 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_barrier_after@PLT
.L1010:
	.loc 1 2859 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1013
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	returnjump_p@PLT
	testl	%eax, %eax
	jne	.L1015
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	any_uncondjump_p@PLT
	testl	%eax, %eax
	je	.L1013
.L1015:
	.loc 1 2863 0
	movl	20(%ebp), %eax
	movl	$1, (%eax)
	.loc 1 2865 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	next_nonnote_insn@PLT
	movl	%eax, -184(%ebp)
	cmpl	$0, -184(%ebp)
	je	.L1017
	movl	-184(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$45, %ax
	je	.L1013
.L1017:
	.loc 1 2867 0
	movl	8+undobuf@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	emit_barrier_after@PLT
.L1013:
	.loc 1 2872 0
	movl	-256(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1019
	movl	-256(%ebp), %eax
	movl	12(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1019
	movl	-256(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1019
	.loc 1 2875 0
	movl	20(%ebp), %eax
	movl	$1, (%eax)
.L1019:
.LBE27:
	.loc 1 2878 0
	movl	combine_successes@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, combine_successes@GOTOFF(%ebx)
	.loc 1 2879 0
	call	undo_commit
	.loc 1 2883 0
	movl	$0, subst_prev_insn@GOTOFF(%ebx)
	.loc 1 2885 0
	movl	added_links_insn@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1023
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L1025
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L1027
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -340(%ebp)
	jmp	.L1029
.L1027:
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -340(%ebp)
.L1029:
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L1030
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -336(%ebp)
	jmp	.L1032
.L1030:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -336(%ebp)
.L1032:
	movl	-336(%ebp), %ecx
	cmpl	%ecx, -340(%ebp)
	jge	.L1023
.L1025:
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L1033
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -332(%ebp)
	jmp	.L1035
.L1033:
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -332(%ebp)
.L1035:
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L1036
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -328(%ebp)
	jmp	.L1038
.L1036:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -328(%ebp)
.L1038:
	movl	-328(%ebp), %esi
	cmpl	%esi, -332(%ebp)
	jge	.L1023
	.loc 1 2888 0
	movl	added_links_insn@GOTOFF(%ebx), %edi
	movl	%edi, -680(%ebp)
	jmp	.L388
.L1023:
	.loc 1 2890 0
	movl	-260(%ebp), %eax
	testl	%eax, %eax
	je	.L1040
	movl	12(%ebp), %eax
	movl	%eax, -324(%ebp)
	jmp	.L1042
.L1040:
	movl	8(%ebp), %edx
	movl	%edx, -324(%ebp)
.L1042:
	movl	-324(%ebp), %ecx
	movl	%ecx, -680(%ebp)
.L388:
	movl	-680(%ebp), %eax
	.loc 1 2891 0
	addl	$716, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE26:
	.size	try_combine, .-try_combine
	.type	undo_all, @function
undo_all:
.LFB27:
	.loc 1 2897 0
	pushl	%ebp
.LCFI59:
	movl	%esp, %ebp
.LCFI60:
	subl	$16, %esp
.LCFI61:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 2900 0
	movl	undobuf@GOTOFF(%ecx), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1047
.L1048:
	.loc 1 2902 0
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	.loc 1 2903 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L1049
	.loc 1 2904 0
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, (%edx)
	jmp	.L1051
.L1049:
	.loc 1 2906 0
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	8(%eax), %eax
	movl	%eax, (%edx)
.L1051:
	.loc 1 2908 0
	movl	4+undobuf@GOTOFF(%ecx), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 2909 0
	movl	-8(%ebp), %eax
	movl	%eax, 4+undobuf@GOTOFF(%ecx)
	.loc 1 2900 0
	movl	-4(%ebp), %eax
	movl	%eax, -8(%ebp)
.L1047:
	cmpl	$0, -8(%ebp)
	jne	.L1048
	.loc 1 2912 0
	movl	$0, undobuf@GOTOFF(%ecx)
	.loc 1 2916 0
	movl	$0, subst_prev_insn@GOTOFF(%ecx)
	.loc 1 2917 0
	leave
	ret
.LFE27:
	.size	undo_all, .-undo_all
	.type	undo_commit, @function
undo_commit:
.LFB28:
	.loc 1 2924 0
	pushl	%ebp
.LCFI62:
	movl	%esp, %ebp
.LCFI63:
	subl	$16, %esp
.LCFI64:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 2927 0
	movl	undobuf@GOTOFF(%ecx), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1055
.L1056:
	.loc 1 2929 0
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	.loc 1 2930 0
	movl	4+undobuf@GOTOFF(%ecx), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 2931 0
	movl	-8(%ebp), %eax
	movl	%eax, 4+undobuf@GOTOFF(%ecx)
	.loc 1 2927 0
	movl	-4(%ebp), %eax
	movl	%eax, -8(%ebp)
.L1055:
	cmpl	$0, -8(%ebp)
	jne	.L1056
	.loc 1 2933 0
	movl	$0, undobuf@GOTOFF(%ecx)
	.loc 1 2934 0
	leave
	ret
.LFE28:
	.size	undo_commit, .-undo_commit
	.type	find_split_point, @function
find_split_point:
.LFB29:
	.loc 1 2948 0
	pushl	%ebp
.LCFI65:
	movl	%esp, %ebp
.LCFI66:
	pushl	%edi
.LCFI67:
	pushl	%esi
.LCFI68:
	pushl	%ebx
.LCFI69:
	subl	$252, %esp
.LCFI70:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2949 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 2950 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -68(%ebp)
	.loc 1 2952 0
	movl	$0, -120(%ebp)
	movl	$0, -116(%ebp)
	.loc 1 2953 0
	movl	$0, -112(%ebp)
	movl	$0, -108(%ebp)
	.loc 1 2954 0
	movl	$0, -60(%ebp)
	.loc 1 2955 0
	movl	$0, -56(%ebp)
	.loc 1 2958 0
	movl	-68(%ebp), %eax
	subl	$57, %eax
	movl	%eax, -208(%ebp)
	cmpl	$37, -208(%ebp)
	ja	.L1060
	movl	-208(%ebp), %eax
	sall	$2, %eax
	movl	.L1065@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1065:
	.long	.L1061@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1062@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1063@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1060@GOTOFF
	.long	.L1064@GOTOFF
	.long	.L1064@GOTOFF
	.text
.L1062:
	.loc 1 2964 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1066
	.loc 1 2965 0
	movl	8(%ebp), %edx
	movl	%edx, -204(%ebp)
	jmp	.L1068
.L1066:
	.loc 1 2967 0
	movl	-72(%ebp), %eax
	addl	$4, %eax
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1063:
	.loc 1 2989 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1060
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1060
	movl	-72(%ebp), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	jne	.L1060
.LBB32:
	.loc 1 2993 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %eax
	addl	$704, %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 2995 0
	movl	subst_insn@GOTOFF(%ebx), %esi
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	split_insns@PLT
	movl	%eax, -48(%ebp)
	.loc 1 3002 0
	cmpl	$0, -48(%ebp)
	je	.L1073
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	je	.L1073
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	jne	.L1073
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-52(%ebp), %eax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-52(%ebp), %eax
	jne	.L1073
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %edx
	movl	-72(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	je	.L1073
.LBB33:
	.loc 1 3016 0
	movl	-48(%ebp), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 3017 0
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	44(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 3024 0
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_rtx@PLT
	movl	%eax, -40(%ebp)
	.loc 1 3025 0
	movl	$0, -64(%ebp)
	.loc 1 3026 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-44(%ebp), %eax
	jne	.L1085
	.loc 1 3027 0
	movl	-40(%ebp), %eax
	addl	$4, %eax
	movl	%eax, -64(%ebp)
	jmp	.L1087
.L1085:
	.loc 1 3028 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L1087
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-44(%ebp), %eax
	jne	.L1087
	.loc 1 3030 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	addl	$4, %eax
	movl	%eax, -64(%ebp)
.L1087:
	.loc 1 3032 0
	cmpl	$0, -64(%ebp)
	je	.L1060
	.loc 1 3034 0
	movl	-72(%ebp), %edx
	addl	$4, %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3035 0
	movl	-64(%ebp), %ecx
	movl	%ecx, -204(%ebp)
	jmp	.L1068
.L1073:
.LBE33:
	.loc 1 3044 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1060
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1093
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1060
.L1093:
	.loc 1 3048 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	addl	$4, %eax
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1061:
.LBE32:
	.loc 1 3069 0
	movl	-72(%ebp), %eax
	addl	$12, %eax
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3070 0
	cmpl	$0, -64(%ebp)
	je	.L1095
	movl	-72(%ebp), %eax
	addl	$12, %eax
	cmpl	-64(%ebp), %eax
	je	.L1095
	.loc 1 3071 0
	movl	-64(%ebp), %esi
	movl	%esi, -204(%ebp)
	jmp	.L1068
.L1095:
	.loc 1 3074 0
	movl	-72(%ebp), %eax
	addl	$4, %eax
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3075 0
	cmpl	$0, -64(%ebp)
	je	.L1098
	movl	-72(%ebp), %eax
	addl	$4, %eax
	cmpl	-64(%ebp), %eax
	je	.L1098
	.loc 1 3076 0
	movl	-64(%ebp), %edi
	movl	%edi, -204(%ebp)
	jmp	.L1068
.L1098:
	.loc 1 3080 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	jne	.L1101
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L1101
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1101
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1101
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1101
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -224(%ebp)
	movl	%ecx, -220(%ebp)
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-224(%ebp), %esi
	movl	-220(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -200(%ebp)
	movl	%edi, -196(%ebp)
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -192(%ebp)
	movl	-192(%ebp), %edi
	movl	%edi, -192(%ebp)
	movl	$0, -188(%ebp)
	movl	-188(%ebp), %eax
	cmpl	%eax, -196(%ebp)
	jg	.L1101
	movl	-188(%ebp), %edx
	cmpl	%edx, -196(%ebp)
	jl	.L1108
	movl	-192(%ebp), %ecx
	cmpl	%ecx, -200(%ebp)
	ja	.L1101
.L1108:
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1101
.LBB34:
	.loc 1 3091 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	.loc 1 3092 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	.loc 1 3093 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	.loc 1 3094 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 3095 0
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 3096 0
	movl	-96(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1199
	movl	%eax, %edx
	xorl	%eax, %eax
.L1199:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	.loc 1 3101 0
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%edx, %ecx
	xorl	-76(%ebp), %ecx
	xorl	-80(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1110
	.loc 1 3102 0
	movl	-104(%ebp), %ecx
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1198
	movl	%eax, %edx
	xorl	%eax, %eax
.L1198:
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	jmp	.L1112
.L1110:
	.loc 1 3105 0
	movl	-104(%ebp), %ecx
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1196
	movl	%eax, %edx
	xorl	%eax, %eax
.L1196:
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -180(%ebp)
	movl	-104(%ebp), %ecx
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1197
	movl	%esi, %edi
	xorl	%esi, %esi
.L1197:
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	-180(%ebp), %esi
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1112:
	.loc 1 3112 0
	movl	-72(%ebp), %edx
	addl	$4, %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3114 0
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3115 0
	cmpl	$0, -64(%ebp)
	je	.L1101
	movl	-72(%ebp), %eax
	addl	$12, %eax
	cmpl	-64(%ebp), %eax
	je	.L1101
	.loc 1 3116 0
	movl	-64(%ebp), %edi
	movl	%edi, -204(%ebp)
	jmp	.L1068
.L1101:
.LBE34:
	.loc 1 3121 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -68(%ebp)
	.loc 1 3123 0
	movl	-68(%ebp), %eax
	subl	$93, %eax
	movl	%eax, -212(%ebp)
	cmpl	$50, -212(%ebp)
	ja	.L1115
	movl	-212(%ebp), %eax
	sall	$2, %eax
	movl	.L1120@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1120:
	.long	.L1116@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1118@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1115@GOTOFF
	.long	.L1119@GOTOFF
	.long	.L1119@GOTOFF
	.text
.L1116:
	.loc 1 3135 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1115
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1115
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -112(%ebp)
	movl	%edx, -108(%ebp)
	cmpl	$0, -108(%ebp)
	js	.L1115
	cmpl	$0, -108(%ebp)
	jg	.L1125
	cmpl	$6, -112(%ebp)
	jbe	.L1115
.L1125:
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1115
	movl	-72(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	find_single_use@PLT
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	je	.L1115
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$113, %ax
	je	.L1128
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$112, %ax
	jne	.L1115
.L1128:
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1115
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1115
.LBB35:
	.loc 1 3146 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	$0, 36(%esp)
	movl	$0, 32(%esp)
	movl	$1, 28(%esp)
	movl	$1, 20(%esp)
	movl	$0, 24(%esp)
	movl	$0, 16(%esp)
	movl	-112(%ebp), %eax
	movl	-108(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, 4(%esp)
	movl	%ecx, (%esp)
	call	make_extraction
	movl	%eax, -28(%ebp)
	.loc 1 3147 0
	cmpl	$0, -28(%ebp)
	je	.L1115
	.loc 1 3149 0
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3150 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1118:
.LBE35:
	.loc 1 3179 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 3184 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$3, %eax
	je	.L1115
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$3, %eax
	je	.L1115
	.loc 1 3188 0
	movl	$0, -112(%ebp)
	movl	$0, -108(%ebp)
	.loc 1 3189 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 3190 0
	movl	$0, -60(%ebp)
	.loc 1 3191 0
	jmp	.L1115
.L1119:
	.loc 1 3195 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1115
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1115
	.loc 1 3198 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 3199 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 3200 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -112(%ebp)
	movl	%edx, -108(%ebp)
	.loc 1 3204 0
	cmpl	$143, -68(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -60(%ebp)
.L1115:
	.loc 1 3212 0
	movl	-120(%ebp), %eax
	orl	-116(%ebp), %eax
	testl	%eax, %eax
	je	.L1137
	cmpl	$0, -108(%ebp)
	js	.L1137
	movl	-112(%ebp), %eax
	movl	-108(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-120(%ebp), %esi
	adcl	-116(%ebp), %edi
	movl	%esi, -176(%ebp)
	movl	%edi, -172(%ebp)
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %edi
	movl	%edi, -168(%ebp)
	movl	$0, -164(%ebp)
	movl	-164(%ebp), %eax
	cmpl	%eax, -172(%ebp)
	ja	.L1137
	movl	-164(%ebp), %edx
	cmpl	%edx, -172(%ebp)
	jb	.L1141
	movl	-168(%ebp), %ecx
	cmpl	%ecx, -176(%ebp)
	ja	.L1137
.L1141:
.LBB36:
	.loc 1 3214 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
	.loc 1 3222 0
	cmpl	$0, -60(%ebp)
	je	.L1142
	cmpl	$0, -116(%ebp)
	ja	.L1142
	cmpl	$0, -116(%ebp)
	jb	.L1145
	cmpl	$8, -120(%ebp)
	ja	.L1142
.L1145:
	.loc 1 3224 0
	movl	-120(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1195
	movl	%eax, %edx
	xorl	%eax, %eax
.L1195:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edi
	movl	-112(%ebp), %eax
	movl	-108(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %esi
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%edi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3231 0
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3232 0
	cmpl	$0, -64(%ebp)
	je	.L1137
	movl	-72(%ebp), %eax
	addl	$12, %eax
	cmpl	-64(%ebp), %eax
	je	.L1137
	.loc 1 3233 0
	movl	-64(%ebp), %esi
	movl	%esi, -204(%ebp)
	jmp	.L1068
.L1142:
	.loc 1 3237 0
	movl	-24(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	subl	-120(%ebp), %eax
	sbbl	-116(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -156(%ebp)
	movl	-24(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	subl	-120(%ebp), %esi
	sbbl	-116(%ebp), %edi
	movl	%esi, -224(%ebp)
	movl	%edi, -220(%ebp)
	movl	-112(%ebp), %eax
	movl	-108(%ebp), %edx
	movl	-224(%ebp), %esi
	movl	-220(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %esi
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -152(%ebp)
	cmpl	$0, -60(%ebp)
	je	.L1149
	movl	$100, -148(%ebp)
	jmp	.L1151
.L1149:
	movl	$99, -148(%ebp)
.L1151:
	movl	-156(%ebp), %edi
	movl	%edi, 12(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %edx
	movl	%edx, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3246 0
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3247 0
	cmpl	$0, -64(%ebp)
	je	.L1137
	movl	-72(%ebp), %eax
	addl	$12, %eax
	cmpl	-64(%ebp), %eax
	je	.L1137
	.loc 1 3248 0
	movl	-64(%ebp), %ecx
	movl	%ecx, -204(%ebp)
	jmp	.L1068
.L1137:
.LBE36:
	.loc 1 3255 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L1154
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	je	.L1154
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1157
.L1154:
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1158
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1157
.L1158:
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1166
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1157
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1157
.L1166:
	.loc 1 3263 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	addl	$12, %eax
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1157:
	.loc 1 3270 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L1169
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	je	.L1169
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	je	.L1169
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	jne	.L1173
.L1169:
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	register_operand@PLT
	testl	%eax, %eax
	jne	.L1173
	.loc 1 3275 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	addl	$4, %eax
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1173:
	.loc 1 3277 0
	movl	$0, -204(%ebp)
	jmp	.L1068
.L1064:
	.loc 1 3284 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L1175
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L1175
	.loc 1 3286 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -140(%ebp)
	movl	-72(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -136(%ebp)
	cmpl	$94, -68(%ebp)
	jne	.L1178
	movl	$93, -132(%ebp)
	jmp	.L1180
.L1178:
	movl	$94, -132(%ebp)
.L1180:
	movl	-144(%ebp), %esi
	movl	%esi, 12(%esp)
	movl	-140(%ebp), %edi
	movl	%edi, 8(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-132(%ebp), %edx
	movl	%edx, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-72(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 3292 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1175:
	.loc 1 3298 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L1060
.LBB37:
	.loc 1 3300 0
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 3301 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	-72(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3302 0
	movl	-72(%ebp), %edx
	addl	$12, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1060:
.LBE37:
	.loc 1 3311 0
	movl	-68(%ebp), %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$49, %eax
	movl	%eax, -216(%ebp)
	cmpl	$50, -216(%ebp)
	ja	.L1182
	movl	-216(%ebp), %eax
	sall	$2, %eax
	movl	.L1186@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1186:
	.long	.L1183@GOTOFF
	.long	.L1184@GOTOFF
	.long	.L1185@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1184@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1182@GOTOFF
	.long	.L1185@GOTOFF
	.long	.L1184@GOTOFF
	.text
.L1185:
	.loc 1 3315 0
	movl	-72(%ebp), %eax
	addl	$20, %eax
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3316 0
	cmpl	$0, -64(%ebp)
	je	.L1184
	.loc 1 3317 0
	movl	-64(%ebp), %ecx
	movl	%ecx, -204(%ebp)
	jmp	.L1068
.L1184:
	.loc 1 3322 0
	movl	-72(%ebp), %eax
	addl	$12, %eax
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3323 0
	cmpl	$0, -64(%ebp)
	je	.L1183
	.loc 1 3324 0
	movl	-64(%ebp), %esi
	movl	%esi, -204(%ebp)
	jmp	.L1068
.L1183:
	.loc 1 3329 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	je	.L1189
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L1189
	.loc 1 3330 0
	movl	-72(%ebp), %edi
	addl	$4, %edi
	movl	%edi, -204(%ebp)
	jmp	.L1068
.L1189:
	.loc 1 3332 0
	movl	-72(%ebp), %eax
	addl	$4, %eax
	movl	12(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	find_split_point
	movl	%eax, -64(%ebp)
	.loc 1 3333 0
	cmpl	$0, -64(%ebp)
	je	.L1192
	.loc 1 3334 0
	movl	-64(%ebp), %eax
	movl	%eax, -204(%ebp)
	jmp	.L1068
.L1192:
	.loc 1 3335 0
	movl	8(%ebp), %edx
	movl	%edx, -204(%ebp)
	jmp	.L1068
.L1182:
	.loc 1 3339 0
	movl	$0, -204(%ebp)
.L1068:
	movl	-204(%ebp), %eax
	.loc 1 3340 0
	addl	$252, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE29:
	.size	find_split_point, .-find_split_point
	.section	.rodata
	.type	__FUNCTION__.14994, @object
	.size	__FUNCTION__.14994, 6
__FUNCTION__.14994:
	.string	"subst"
.LC1:
	.string	"ie"
	.text
	.type	subst, @function
subst:
.LFB30:
	.loc 1 3366 0
	pushl	%ebp
.LCFI71:
	movl	%esp, %ebp
.LCFI72:
	pushl	%esi
.LCFI73:
	pushl	%ebx
.LCFI74:
	subl	$112, %esp
.LCFI75:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3367 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -44(%ebp)
	.loc 1 3368 0
	movl	$0, -40(%ebp)
	.loc 1 3382 0
	cmpl	$0, 20(%ebp)
	jne	.L1201
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L1203
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1201
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1201
	movl	8(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L1201
.L1203:
	.loc 1 3384 0
	movl	n_occurrences@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, n_occurrences@GOTOFF(%ebx)
	.loc 1 3385 0
	cmpl	$0, 24(%ebp)
	je	.L1208
	movl	n_occurrences@GOTOFF(%ebx), %eax
	cmpl	$1, %eax
	jle	.L1208
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -96(%ebp)
	jmp	.L1211
.L1208:
	movl	16(%ebp), %eax
	movl	%eax, -96(%ebp)
.L1211:
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1201:
	.loc 1 3395 0
	cmpl	$0, 20(%ebp)
	jne	.L1213
	cmpl	$71, -44(%ebp)
	jne	.L1213
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1213
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1213
	.loc 1 3397 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1213:
	.loc 1 3401 0
	cmpl	$76, -44(%ebp)
	je	.L1218
	cmpl	$145, -44(%ebp)
	je	.L1218
	movl	-44(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$111, %al
	jne	.L1218
	.loc 1 3402 0
	movl	8(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1218:
	.loc 1 3410 0
	movl	8(%ebp), %eax
	cmpl	16(%ebp), %eax
	je	.L1222
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1224
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1224
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1224
	movl	8(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L1224
.L1222:
	.loc 1 3411 0
	movl	16(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1224:
	.loc 1 3422 0
	cmpl	$49, -44(%ebp)
	jne	.L1228
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L1228
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$51, %ax
	jne	.L1228
	.loc 1 3426 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -24(%ebp)
	.loc 1 3429 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L1232
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1232
	.loc 1 3431 0
	movl	-24(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1232:
	.loc 1 3433 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	leal	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3435 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -28(%ebp)
	jmp	.L1235
.L1236:
.LBB38:
	.loc 1 3437 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 3439 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1237
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$79, %ax
	je	.L1237
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$69, %ax
	je	.L1237
	.loc 1 3443 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	subst
	movl	%eax, -24(%ebp)
	.loc 1 3446 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L1241
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1241
	.loc 1 3448 0
	movl	-24(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1241:
	.loc 1 3450 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	leal	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1237:
.LBE38:
	.loc 1 3435 0
	subl	$1, -28(%ebp)
.L1235:
	cmpl	$0, -28(%ebp)
	jg	.L1236
	.loc 1 3422 0
	jmp	.L1245
.L1228:
	.loc 1 3456 0
	movl	-44(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 3457 0
	movl	-44(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -36(%ebp)
	.loc 1 3463 0
	cmpl	$57, -44(%ebp)
	jne	.L1246
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1248
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$79, %ax
	je	.L1248
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$69, %ax
	jne	.L1246
.L1248:
	.loc 1 3467 0
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, -36(%ebp)
.L1246:
	.loc 1 3471 0
	movl	-36(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L1251
	.loc 1 3472 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
.L1251:
	.loc 1 3474 0
	movl	$0, -28(%ebp)
	jmp	.L1253
.L1254:
	.loc 1 3476 0
	movl	-28(%ebp), %eax
	addl	-36(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L1255
.LBB39:
	.loc 1 3479 0
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1257
.L1258:
	.loc 1 3481 0
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	cmpl	12(%ebp), %eax
	je	.L1259
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1261
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1261
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1261
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L1261
.L1259:
	.loc 1 3483 0
	cmpl	$0, 24(%ebp)
	je	.L1265
	movl	n_occurrences@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1265
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -92(%ebp)
	jmp	.L1268
.L1265:
	movl	16(%ebp), %eax
	movl	%eax, -92(%ebp)
.L1268:
	movl	-92(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 3485 0
	movl	n_occurrences@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, n_occurrences@GOTOFF(%ebx)
	.loc 1 3481 0
	jmp	.L1269
.L1261:
	.loc 1 3489 0
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-16(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -24(%ebp)
	.loc 1 3494 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L1269
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1269
	.loc 1 3496 0
	movl	-24(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1269:
	.loc 1 3499 0
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	leal	4(%eax), %edx
	movl	-16(%ebp), %eax
	sall	$2, %eax
	addl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3479 0
	subl	$1, -16(%ebp)
.L1257:
	cmpl	$0, -16(%ebp)
	jns	.L1258
	jmp	.L1273
.L1255:
.LBE39:
	.loc 1 3502 0
	movl	-28(%ebp), %eax
	addl	-36(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L1273
	.loc 1 3505 0
	movl	-28(%ebp), %eax
	movl	8(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -24(%ebp)
	.loc 1 3506 0
	cmpl	$0, 20(%ebp)
	je	.L1275
	cmpl	$73, -44(%ebp)
	je	.L1277
	cmpl	$74, -44(%ebp)
	je	.L1277
	cmpl	$143, -44(%ebp)
	jne	.L1275
.L1277:
	cmpl	$0, -28(%ebp)
	jne	.L1275
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1275
	jmp	.L1282
.L1275:
	.loc 1 3513 0
	movl	-28(%ebp), %eax
	movl	8(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	cmpl	12(%ebp), %eax
	je	.L1283
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1285
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1285
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1285
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L1285
.L1283:
	.loc 1 3528 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1289
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L1291
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	jne	.L1293
.L1291:
	movl	$1, -88(%ebp)
	jmp	.L1294
.L1293:
	movl	$0, -88(%ebp)
.L1294:
	movzbl	-88(%ebp), %eax
	movb	%al, -81(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L1295
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	jne	.L1297
.L1295:
	movl	$1, -80(%ebp)
	jmp	.L1298
.L1297:
	movl	$0, -80(%ebp)
.L1298:
	movzbl	-80(%ebp), %eax
	xorb	-81(%ebp), %al
	testb	%al, %al
	je	.L1289
	cmpl	$73, -44(%ebp)
	jne	.L1300
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L1302
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	jne	.L1304
.L1302:
	movl	$1, -76(%ebp)
	jmp	.L1305
.L1304:
	movl	$0, -76(%ebp)
.L1305:
	movzbl	-76(%ebp), %eax
	movb	%al, -69(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L1306
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	jne	.L1308
.L1306:
	movl	$1, -68(%ebp)
	jmp	.L1309
.L1308:
	movl	$0, -68(%ebp)
.L1309:
	movzbl	-68(%ebp), %eax
	xorb	-69(%ebp), %al
	testb	%al, %al
	je	.L1289
.L1300:
	.loc 1 3538 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1289:
	.loc 1 3541 0
	cmpl	$73, -44(%ebp)
	jne	.L1310
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1310
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1310
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_cannot_change_mode_class@PLT
	testb	%al, %al
	je	.L1310
	.loc 1 3547 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1310:
	.loc 1 3550 0
	cmpl	$0, 24(%ebp)
	je	.L1315
	movl	n_occurrences@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1315
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -64(%ebp)
	jmp	.L1318
.L1315:
	movl	16(%ebp), %eax
	movl	%eax, -64(%ebp)
.L1318:
	movl	-64(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 3551 0
	movl	n_occurrences@GOTOFF(%ebx), %eax
	addl	$1, %eax
	movl	%eax, n_occurrences@GOTOFF(%ebx)
	.loc 1 3513 0
	jmp	.L1282
.L1285:
	.loc 1 3562 0
	cmpl	$0, 20(%ebp)
	je	.L1319
	cmpl	$73, -44(%ebp)
	je	.L1321
	cmpl	$74, -44(%ebp)
	je	.L1321
	cmpl	$143, -44(%ebp)
	je	.L1321
.L1319:
	cmpl	$57, -44(%ebp)
	jne	.L1324
.L1321:
	cmpl	$0, -28(%ebp)
	jne	.L1324
	movl	$1, -60(%ebp)
	jmp	.L1326
.L1324:
	movl	$0, -60(%ebp)
.L1326:
	movl	-28(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -24(%ebp)
.L1282:
	.loc 1 3575 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L1327
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1327
	.loc 1 3576 0
	movl	-24(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1212
.L1327:
	.loc 1 3578 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1330
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1330
.LBB40:
	.loc 1 3580 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 3582 0
	movl	8(%ebp), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	simplify_subreg@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3585 0
	cmpl	$0, 8(%ebp)
	jne	.L1273
	.loc 1 3586 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3578 0
	jmp	.L1273
.L1330:
.LBE40:
	.loc 1 3588 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1335
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1335
	.loc 1 3591 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$131, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3593 0
	cmpl	$0, 8(%ebp)
	jne	.L1273
	.loc 1 3594 0
	leal	__FUNCTION__.14994@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3594, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1335:
	.loc 1 3597 0
	movl	-28(%ebp), %eax
	sall	$3, %eax
	addl	8(%ebp), %eax
	leal	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1273:
	.loc 1 3474 0
	addl	$1, -28(%ebp)
.L1253:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jl	.L1254
.L1245:
	.loc 1 3606 0
	movl	$0, -28(%ebp)
	jmp	.L1340
.L1341:
	.loc 1 3610 0
	cmpl	$64, -44(%ebp)
	je	.L1342
	cmpl	$71, -44(%ebp)
	je	.L1342
	cmpl	$59, -44(%ebp)
	je	.L1342
	.loc 1 3611 0
	cmpl	$3, -28(%ebp)
	sete	%al
	movzbl	%al, %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_simplify_rtx
	movl	%eax, 8(%ebp)
.L1342:
	.loc 1 3613 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	cmpl	-44(%ebp), %eax
	je	.L1346
	.loc 1 3616 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -44(%ebp)
	.loc 1 3620 0
	movl	$0, -40(%ebp)
	.loc 1 3606 0
	addl	$1, -28(%ebp)
.L1340:
	cmpl	$3, -28(%ebp)
	jle	.L1341
.L1346:
	.loc 1 3623 0
	movl	8(%ebp), %eax
	movl	%eax, -100(%ebp)
.L1212:
	movl	-100(%ebp), %eax
	.loc 1 3624 0
	addl	$112, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE30:
	.size	subst, .-subst
	.section	.rodata
	.type	__FUNCTION__.15491, @object
	.size	__FUNCTION__.15491, 21
__FUNCTION__.15491:
	.string	"combine_simplify_rtx"
	.text
	.type	combine_simplify_rtx, @function
combine_simplify_rtx:
.LFB31:
	.loc 1 3640 0
	pushl	%ebp
.LCFI76:
	movl	%esp, %ebp
.LCFI77:
	pushl	%edi
.LCFI78:
	pushl	%esi
.LCFI79:
	pushl	%ebx
.LCFI80:
	subl	$252, %esp
.LCFI81:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3641 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -148(%ebp)
	.loc 1 3642 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -144(%ebp)
	.loc 1 3649 0
	movl	-148(%ebp), %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L1350
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	swap_commutative_operands_p@PLT
	testl	%eax, %eax
	je	.L1350
	.loc 1 3652 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -140(%ebp)
	.loc 1 3653 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3654 0
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	-140(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1350:
	.loc 1 3675 0
	cmpl	$85, -148(%ebp)
	je	.L1353
	cmpl	$86, -148(%ebp)
	je	.L1353
	cmpl	$88, -148(%ebp)
	jne	.L1356
.L1353:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1356
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$99, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -140(%ebp)
	cmpl	$0, -140(%ebp)
	je	.L1356
.LBB41:
	.loc 1 3690 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -128(%ebp)
	.loc 1 3692 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 16(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$99, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -128(%ebp)
	.loc 1 3695 0
	movl	-140(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1356:
.LBE41:
	.loc 1 3705 0
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$50, %al
	je	.L1365
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	je	.L1365
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	jne	.L1368
.L1365:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1369
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1371
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1371
.L1369:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1368
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1371
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1371
.L1368:
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$49, %al
	jne	.L1375
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1375
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1371
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L1375
.L1371:
.LBB42:
	.loc 1 3723 0
	leal	-164(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	if_then_else_cond
	movl	%eax, -152(%ebp)
	.loc 1 3724 0
	movl	-152(%ebp), %eax
	testl	%eax, %eax
	je	.L1375
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	jne	.L1380
	movl	-156(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	je	.L1375
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	je	.L1375
.L1380:
.LBB43:
	.loc 1 3731 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -160(%ebp)
	.loc 1 3732 0
	leal	-160(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$112, (%esp)
	call	simplify_comparison
	movl	%eax, -124(%ebp)
	.loc 1 3734 0
	cmpl	$112, -124(%ebp)
	jne	.L1383
	movl	-152(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1383
	.loc 1 3735 0
	movl	8(%ebp), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1383:
	.loc 1 3739 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	-156(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -156(%ebp)
	.loc 1 3740 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	-164(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	subst
	movl	%eax, -164(%ebp)
	.loc 1 3744 0
	movl	-156(%ebp), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	general_operand@PLT
	testl	%eax, %eax
	je	.L1375
	movl	-164(%ebp), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	general_operand@PLT
	testl	%eax, %eax
	je	.L1375
	.loc 1 3752 0
	movl	-156(%ebp), %eax
	movl	const_true_rtx@GOT(%ebx), %edx
	movl	(%edx), %edx
	cmpl	%edx, %eax
	jne	.L1389
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1389
	.loc 1 3753 0
	movl	-160(%ebp), %eax
	movl	-152(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 3752 0
	jmp	.L1392
.L1389:
	.loc 1 3754 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-156(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1393
	movl	-164(%ebp), %eax
	movl	const_true_rtx@GOT(%ebx), %edx
	movl	(%edx), %edx
	cmpl	%edx, %eax
	jne	.L1393
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	reverse_condition@PLT
	testl	%eax, %eax
	je	.L1393
	.loc 1 3756 0
	movl	-160(%ebp), %esi
	movl	-152(%ebp), %edi
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	reverse_condition@PLT
	movl	%eax, %edx
	movl	%esi, 12(%esp)
	movl	%edi, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 3754 0
	jmp	.L1392
.L1393:
	.loc 1 3761 0
	movl	-156(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1397
	movl	-156(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	xorl	$-1, %ecx
	xorl	$-1, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1397
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1397
	.loc 1 3764 0
	movl	-160(%ebp), %eax
	movl	-152(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3761 0
	jmp	.L1392
.L1397:
	.loc 1 3768 0
	movl	-164(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1401
	movl	-164(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	xorl	$-1, %ecx
	xorl	$-1, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1401
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-156(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1401
	.loc 1 3771 0
	movl	-160(%ebp), %esi
	movl	-152(%ebp), %edi
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	reverse_condition@PLT
	movl	%eax, %edx
	movl	%esi, 12(%esp)
	movl	%edi, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3768 0
	jmp	.L1392
.L1401:
	.loc 1 3777 0
	movl	-164(%ebp), %esi
	movl	-156(%ebp), %edi
	movl	-160(%ebp), %eax
	movl	-152(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$82, (%esp)
	call	gen_rtx_fmt_eee@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1392:
	.loc 1 3782 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -148(%ebp)
	.loc 1 3783 0
	movl	$0, 12(%ebp)
.L1375:
.LBE43:
.LBE42:
	.loc 1 3790 0
	movl	$0, -140(%ebp)
	.loc 1 3791 0
	movl	-148(%ebp), %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$49, %eax
	movl	%eax, -228(%ebp)
	cmpl	$50, -228(%ebp)
	ja	.L1405
	movl	-228(%ebp), %eax
	sall	$2, %eax
	movl	.L1410@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1410:
	.long	.L1406@GOTOFF
	.long	.L1407@GOTOFF
	.long	.L1408@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1409@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1405@GOTOFF
	.long	.L1408@GOTOFF
	.long	.L1407@GOTOFF
	.text
.L1406:
	.loc 1 3794 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, -140(%ebp)
	.loc 1 3795 0
	jmp	.L1405
.L1409:
.LBB44:
	.loc 1 3798 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	.loc 1 3799 0
	cmpl	$0, -120(%ebp)
	jne	.L1411
	.loc 1 3801 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	.loc 1 3802 0
	cmpl	$0, -120(%ebp)
	jne	.L1411
	.loc 1 3803 0
	movl	12(%ebp), %eax
	movl	%eax, -120(%ebp)
.L1411:
	.loc 1 3805 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_relational_operation@PLT
	movl	%eax, -140(%ebp)
	.loc 1 3818 0
	jmp	.L1405
.L1407:
.LBE44:
	.loc 1 3821 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -140(%ebp)
	.loc 1 3822 0
	jmp	.L1405
.L1408:
	.loc 1 3825 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 20(%esp)
	movl	%ecx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_ternary_operation@PLT
	movl	%eax, -140(%ebp)
.L1405:
	.loc 1 3830 0
	cmpl	$0, -140(%ebp)
	je	.L1414
	.loc 1 3832 0
	movl	-140(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 3833 0
	movl	-140(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -148(%ebp)
	.loc 1 3834 0
	movl	$0, 12(%ebp)
	.loc 1 3835 0
	movl	-140(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -144(%ebp)
.L1414:
	.loc 1 3839 0
	cmpl	$85, -148(%ebp)
	je	.L1416
	cmpl	$86, -148(%ebp)
	je	.L1416
	cmpl	$93, -148(%ebp)
	je	.L1416
	cmpl	$94, -148(%ebp)
	je	.L1416
	cmpl	$95, -148(%ebp)
	jne	.L1421
.L1416:
	.loc 1 3842 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 8(%ebp)
	.loc 1 3843 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -148(%ebp)
	.loc 1 3844 0
	movl	$0, 12(%ebp)
.L1421:
	.loc 1 3850 0
	cmpl	$85, -148(%ebp)
	je	.L1422
	cmpl	$86, -148(%ebp)
	je	.L1422
	cmpl	$88, -148(%ebp)
	je	.L1422
	cmpl	$89, -148(%ebp)
	je	.L1422
	cmpl	$93, -148(%ebp)
	je	.L1422
	cmpl	$94, -148(%ebp)
	je	.L1422
	cmpl	$95, -148(%ebp)
	je	.L1422
	cmpl	$103, -148(%ebp)
	je	.L1422
	cmpl	$102, -148(%ebp)
	je	.L1422
	cmpl	$105, -148(%ebp)
	je	.L1422
	cmpl	$104, -148(%ebp)
	jne	.L1433
.L1422:
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	je	.L1434
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	je	.L1434
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$5, %eax
	je	.L1434
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$7, %eax
	jne	.L1438
.L1434:
	cmpl	$89, -148(%ebp)
	jne	.L1439
.L1438:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1433
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1439
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1439
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1433
.L1439:
	.loc 1 3856 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	cmpl	-148(%ebp), %eax
	jne	.L1433
.LBB45:
	.loc 1 3858 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -116(%ebp)
	.loc 1 3859 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -112(%ebp)
	.loc 1 3860 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -108(%ebp)
	.loc 1 3865 0
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1444
	movl	-112(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1452
.L1444:
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L1452
.LBB46:
	.loc 1 3867 0
	movl	-112(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 3868 0
	movl	-108(%ebp), %eax
	movl	%eax, -112(%ebp)
	.loc 1 3869 0
	movl	-100(%ebp), %eax
	movl	%eax, -108(%ebp)
.L1452:
.LBE46:
	.loc 1 3871 0
	cmpl	$86, -148(%ebp)
	je	.L1454
	cmpl	$89, -148(%ebp)
	je	.L1456
	movl	-148(%ebp), %edx
	movl	%edx, -216(%ebp)
	jmp	.L1458
.L1456:
	movl	$88, -216(%ebp)
.L1458:
	movl	-216(%ebp), %ecx
	movl	%ecx, -220(%ebp)
	jmp	.L1459
.L1454:
	movl	$85, -220(%ebp)
.L1459:
	movl	-108(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-112(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-220(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -104(%ebp)
	.loc 1 3878 0
	cmpl	$0, -104(%ebp)
	jne	.L1460
	movl	-148(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L1460
	.loc 1 3880 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -116(%ebp)
	.loc 1 3881 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -104(%ebp)
.L1460:
	.loc 1 3886 0
	cmpl	$0, -104(%ebp)
	je	.L1433
	.loc 1 3887 0
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1433:
.LBE45:
	.loc 1 3892 0
	movl	-148(%ebp), %edx
	subl	$57, %edx
	movl	%edx, -232(%ebp)
	cmpl	$96, -232(%ebp)
	ja	.L1464
	movl	-232(%ebp), %eax
	sall	$2, %eax
	movl	.L1486@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1486:
	.long	.L1465@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1466@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1467@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1468@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1469@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1470@GOTOFF
	.long	.L1471@GOTOFF
	.long	.L1472@GOTOFF
	.long	.L1473@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1474@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1475@GOTOFF
	.long	.L1475@GOTOFF
	.long	.L1475@GOTOFF
	.long	.L1476@GOTOFF
	.long	.L1477@GOTOFF
	.long	.L1477@GOTOFF
	.long	.L1477@GOTOFF
	.long	.L1477@GOTOFF
	.long	.L1477@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1478@GOTOFF
	.long	.L1479@GOTOFF
	.long	.L1479@GOTOFF
	.long	.L1480@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1481@GOTOFF
	.long	.L1482@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1483@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1484@GOTOFF
	.long	.L1479@GOTOFF
	.long	.L1479@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1464@GOTOFF
	.long	.L1485@GOTOFF
	.text
.L1468:
	.loc 1 3897 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$76, 4(%esp)
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -140(%ebp)
	.loc 1 3898 0
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	-140(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 3899 0
	jmp	.L1464
.L1467:
	.loc 1 3902 0
	cmpl	$0, 12(%ebp)
	jne	.L1487
	.loc 1 3903 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 12(%ebp)
.L1487:
	.loc 1 3906 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1489
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1497
.L1489:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_offset@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1497
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L1499
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_common@PLT
	testl	%eax, %eax
	je	.L1497
.L1499:
	.loc 1 3913 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1497:
	.loc 1 3915 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$4, %eax
	je	.L1464
.LBB47:
	.loc 1 3919 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_subreg@PLT
	movl	%eax, -96(%ebp)
	.loc 1 3921 0
	cmpl	$0, -96(%ebp)
	je	.L1502
	.loc 1 3922 0
	movl	-96(%ebp), %ecx
	movl	%ecx, -224(%ebp)
	jmp	.L1386
.L1502:
.LBE47:
	.loc 1 3927 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1506
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	je	.L1464
.L1506:
	.loc 1 3930 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1476:
	.loc 1 3940 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1508
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1508
	.loc 1 3942 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1508:
	.loc 1 3945 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1511
	.loc 1 3946 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1511:
	.loc 1 3949 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L1513
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1513
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, -140(%ebp)
	cmpl	$0, -140(%ebp)
	je	.L1513
	.loc 1 3954 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-140(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1513:
	.loc 1 3960 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L1517
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1517
	.loc 1 3962 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %esi
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$98, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1517:
	.loc 1 3966 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1520
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1520
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L1520
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L1520
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1520
.LBB48:
	.loc 1 3973 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -92(%ebp)
	.loc 1 3975 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %esi
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$98, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3979 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1520:
.LBE48:
	.loc 1 4005 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1526
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L1464
.L1526:
.LBB49:
	.loc 1 4007 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -84(%ebp)
	.loc 1 4010 0
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	.loc 1 4011 0
	movl	-80(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -88(%ebp)
	.loc 1 4013 0
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	.loc 1 4014 0
	cmpl	$0, -80(%ebp)
	jne	.L1529
	.loc 1 4015 0
	movl	-144(%ebp), %eax
	movl	%eax, -80(%ebp)
.L1529:
	.loc 1 4016 0
	movl	-80(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -84(%ebp)
	.loc 1 4018 0
	movl	-84(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L1531
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	je	.L1531
.LBB50:
	.loc 1 4020 0
	movl	-84(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 4021 0
	movl	-88(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -88(%ebp)
.L1531:
.LBE50:
	.loc 1 4024 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L1534
	movl	$93, -212(%ebp)
	jmp	.L1536
.L1534:
	movl	$94, -212(%ebp)
.L1536:
	movl	-84(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-212(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1472:
.LBE49:
	.loc 1 4031 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1537
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1537
	.loc 1 4033 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1537:
	.loc 1 4036 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L1540
	.loc 1 4037 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$1, 4(%esp)
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1540:
	.loc 1 4044 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$86, %ax
	jne	.L1542
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1544
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1544
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1547
.L1544:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1542
.L1547:
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1548
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1548
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1551
.L1548:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1542
.L1551:
	.loc 1 4047 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1542:
	.loc 1 4051 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1552
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1554
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1554
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1557
.L1554:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1552
.L1557:
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1558
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1558
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1561
.L1558:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1552
.L1561:
	.loc 1 4055 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -140(%ebp)
	.loc 1 4056 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_simplify_rtx
	movl	%eax, -140(%ebp)
	.loc 1 4057 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1552:
	.loc 1 4062 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L1562
	.loc 1 4064 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -140(%ebp)
	.loc 1 4065 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1562:
	.loc 1 4069 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L1564
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1564
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1564
	.loc 1 4071 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1564:
	.loc 1 4077 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L1568
	.loc 1 4079 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, -140(%ebp)
	.loc 1 4081 0
	cmpl	$0, -140(%ebp)
	je	.L1568
	.loc 1 4082 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1568:
	.loc 1 4085 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -140(%ebp)
	.loc 1 4091 0
	movl	-140(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L1571
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1571
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1571
	.loc 1 4094 0
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-140(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$100, 4(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_shift_const
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1571:
	.loc 1 4104 0
	movl	-140(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1464
	movl	-140(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1577
	movl	-140(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1464
.L1577:
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -132(%ebp)
	cmpl	$0, -132(%ebp)
	js	.L1464
.LBB51:
	.loc 1 4113 0
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-132(%ebp), %eax
	leal	-1(%eax), %esi
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-132(%ebp), %eax
	subl	$1, %eax
	movl	%eax, 16(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%esi, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$99, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -72(%ebp)
	.loc 1 4118 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L1580
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L1580
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-140(%ebp), %eax
	je	.L1464
.L1580:
	.loc 1 4121 0
	movl	-72(%ebp), %edx
	movl	%edx, -224(%ebp)
	jmp	.L1386
.L1480:
.LBE51:
	.loc 1 4129 0
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	je	.L1464
	.loc 1 4132 0
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1584
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1586
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L1586
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L1584
.L1586:
	.loc 1 4135 0
	movl	-144(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	4(%eax,%edx,8), %ecx
	movl	(%eax,%edx,8), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	force_to_mode
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1584:
	.loc 1 4140 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	je	.L1589
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1591
.L1589:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1591
	.loc 1 4143 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1591:
	.loc 1 4147 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$139, %ax
	je	.L1593
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1595
.L1593:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	je	.L1596
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1595
.L1596:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1595
	.loc 1 4152 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %ecx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1595:
	.loc 1 4157 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1599
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$132, %ax
	jne	.L1599
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1599
	.loc 1 4160 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1599:
	.loc 1 4167 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1603
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L1603
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L1606
.L1603:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	addl	$1, %eax
	cmpl	%eax, %ecx
	jb	.L1606
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L1608
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	je	.L1606
.L1608:
	.loc 1 4173 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1606:
	.loc 1 4179 0
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1610
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1610
	movl	-144(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1610
	.loc 1 4182 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1610:
	.loc 1 4187 0
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1464
	movl	-144(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -140(%ebp)
	cmpl	$0, -140(%ebp)
	je	.L1464
	movl	-140(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1464
	.loc 1 4191 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1481:
	.loc 1 4197 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$133, %ax
	jne	.L1619
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1619
	.loc 1 4199 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1619:
	.loc 1 4203 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$139, %ax
	je	.L1622
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1624
.L1622:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$133, %ax
	jne	.L1624
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1624
	.loc 1 4207 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %ecx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1624:
	.loc 1 4212 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$134, %ax
	jne	.L1464
	.loc 1 4215 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1466:
	.loc 1 4240 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1464
	.loc 1 4241 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4242 0
	jmp	.L1464
.L1470:
	.loc 1 4258 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L1633
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1633
.LBB52:
	.loc 1 4263 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 4264 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 4265 0
	movl	-64(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1633:
.LBE52:
	.loc 1 4273 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1636
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1638
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1638
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1638
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1638
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1636
	movl	flag_pic@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1644
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	pic_address_needs_scratch@PLT
	testl	%eax, %eax
	jne	.L1636
.L1644:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1638
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1636
.L1638:
	.loc 1 4275 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1636:
	.loc 1 4285 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L1647
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1647
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1647
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1647
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -132(%ebp)
	cmpl	$0, -132(%ebp)
	jns	.L1652
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -132(%ebp)
	cmpl	$0, -132(%ebp)
	js	.L1647
.L1652:
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1647
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L1655
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1655
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-132(%ebp), %ecx
	addl	$1, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1795
	movl	%eax, %edx
	xorl	%eax, %eax
.L1795:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L1658
.L1655:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1647
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %edx
	movl	-132(%ebp), %eax
	addl	$1, %eax
	cmpl	%eax, %edx
	jne	.L1647
.L1658:
	.loc 1 4299 0
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-132(%ebp), %eax
	leal	-1(%eax), %esi
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-132(%ebp), %eax
	leal	-1(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%esi, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$99, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1647:
	.loc 1 4310 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1660
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1660
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	reversed_comparison
	movl	%eax, -136(%ebp)
	cmpl	$0, -136(%ebp)
	je	.L1660
	.loc 1 4316 0
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1660:
	.loc 1 4323 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1664
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1664
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1667
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1664
.L1667:
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1664
	.loc 1 4328 0
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %esi
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %edi
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%edi, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%esi, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$99, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1664:
	.loc 1 4339 0
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -208(%ebp)
	movl	%edx, -204(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-208(%ebp), %eax
	andl	%esi, %eax
	movl	-204(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1464
.LBB53:
	.loc 1 4344 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, -60(%ebp)
	.loc 1 4345 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_simplify_rtx
	movl	%eax, -140(%ebp)
	.loc 1 4350 0
	movl	-140(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	je	.L1464
	movl	-140(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L1464
	.loc 1 4351 0
	movl	-140(%ebp), %ecx
	movl	%ecx, -224(%ebp)
	jmp	.L1386
.L1471:
.LBE53:
	.loc 1 4358 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1675
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1675
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	reversed_comparison
	movl	%eax, -136(%ebp)
	cmpl	$0, -136(%ebp)
	je	.L1675
	.loc 1 4364 0
	movl	-136(%ebp), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1675:
	.loc 1 4368 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L1679
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1679
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L1679
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1679
	.loc 1 4372 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1679:
	.loc 1 4377 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L1684
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1684
.LBB54:
	.loc 1 4382 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 4383 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 4384 0
	movl	8(%ebp), %eax
	movl	4(%eax), %esi
	movl	-52(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1684:
.LBE54:
	.loc 1 4390 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L1687
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1687
.LBB55:
	.loc 1 4395 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -48(%ebp)
	.loc 1 4396 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 4397 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %esi
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1687:
.LBE55:
	.loc 1 4403 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1464
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	je	.L1692
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	je	.L1692
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$5, %eax
	je	.L1692
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$7, %eax
	jne	.L1464
.L1692:
	.loc 1 4404 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1473:
	.loc 1 4415 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L1696
	.loc 1 4417 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 8(%ebp)
	.loc 1 4425 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	je	.L1696
	.loc 1 4426 0
	movl	8(%ebp), %edx
	movl	%edx, -224(%ebp)
	jmp	.L1386
.L1696:
	.loc 1 4429 0
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1699
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1699
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1464
.L1699:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$89, %ax
	jne	.L1464
.LBB56:
	.loc 1 4434 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -40(%ebp)
	.loc 1 4435 0
	cmpl	$0, -40(%ebp)
	je	.L1464
	.loc 1 4436 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$89, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1474:
.LBE56:
	.loc 1 4443 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1464
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -132(%ebp)
	cmpl	$0, -132(%ebp)
	js	.L1464
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	je	.L1709
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L1709
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	je	.L1709
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$98, %ax
	je	.L1709
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$101, %ax
	jne	.L1464
.L1709:
	.loc 1 4450 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-132(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$100, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1478:
	.loc 1 4462 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	je	.L1714
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$4, %eax
	je	.L1464
.L1714:
.LBB57:
	.loc 1 4469 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -160(%ebp)
	.loc 1 4470 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -164(%ebp)
	.loc 1 4473 0
	movl	-160(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L1717
	.loc 1 4474 0
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -164(%ebp)
	movl	-160(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -160(%ebp)
.L1717:
	.loc 1 4477 0
	leal	-164(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-160(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_comparison
	movl	%eax, -36(%ebp)
	.loc 1 4491 0
	cmpl	$112, -36(%ebp)
	jne	.L1719
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1719
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1719
	movl	-160(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1719
	movl	-160(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1719
	.loc 1 4496 0
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1719:
	.loc 1 4499 0
	cmpl	$112, -36(%ebp)
	jne	.L1725
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1725
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1725
	movl	-160(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1725
	movl	-160(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L1725
	.loc 1 4506 0
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -160(%ebp)
	.loc 1 4507 0
	movl	-160(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	-144(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1725:
	.loc 1 4512 0
	cmpl	$113, -36(%ebp)
	jne	.L1731
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1731
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1731
	movl	-160(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1731
	movl	-160(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1731
	.loc 1 4518 0
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -160(%ebp)
	.loc 1 4519 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %esi
	movl	-160(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1731:
	.loc 1 4524 0
	cmpl	$113, -36(%ebp)
	jne	.L1737
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1737
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1737
	movl	-160(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1737
	movl	-160(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L1737
	.loc 1 4531 0
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -160(%ebp)
	.loc 1 4532 0
	movl	-160(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	$1, 4(%esp)
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1737:
	.loc 1 4586 0
	cmpl	$112, -36(%ebp)
	jne	.L1743
	movl	-144(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1743
	movl	-144(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1743
	movl	-144(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	movl	-144(%ebp), %esi
	movl	mode_bitsize@GOT(%ebx), %ecx
	movzwl	(%ecx,%esi,2), %ecx
	movzwl	%cx, %ecx
	subl	$1, %ecx
	movl	$1, %esi
	movl	$0, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L1794
	movl	%esi, %edi
	xorl	%esi, %esi
.L1794:
	movl	%edx, %ecx
	xorl	%edi, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1743
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1743
	movl	-160(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-144(%ebp), %eax
	jne	.L1743
	movl	-160(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -132(%ebp)
	cmpl	$0, -132(%ebp)
	js	.L1743
	.loc 1 4594 0
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-132(%ebp), %eax
	leal	-1(%eax), %esi
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%esi, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, 8(%ebp)
	.loc 1 4597 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L1751
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1751
	.loc 1 4598 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1751:
	.loc 1 4600 0
	movl	8(%ebp), %ecx
	movl	%ecx, -224(%ebp)
	jmp	.L1386
.L1743:
	.loc 1 4604 0
	movl	-36(%ebp), %eax
	cmpl	-148(%ebp), %eax
	je	.L1754
	.loc 1 4605 0
	movl	-164(%ebp), %eax
	movl	-160(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1754:
	.loc 1 4609 0
	movl	-160(%ebp), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4610 0
	movl	-164(%ebp), %eax
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4612 0
	jmp	.L1464
.L1469:
.LBE57:
	.loc 1 4615 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_if_then_else
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1479:
	.loc 1 4622 0
	cmpl	$0, 20(%ebp)
	je	.L1756
	.loc 1 4623 0
	movl	8(%ebp), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1756:
	.loc 1 4625 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1465:
	.loc 1 4628 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_set
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1475:
	.loc 1 4633 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_logical
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1483:
	.loc 1 4637 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1758
	.loc 1 4638 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1758:
	.loc 1 4642 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1464
	.loc 1 4646 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$141, %ax
	je	.L1761
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$139, %ax
	je	.L1761
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L1764
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -200(%ebp)
	movl	%edx, -196(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1793
	movl	%eax, %edx
	xorl	%eax, %eax
.L1793:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-200(%ebp), %eax
	andl	%esi, %eax
	movl	-196(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1764
.L1761:
	.loc 1 4653 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1764:
	.loc 1 4656 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-144(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L1464
	.loc 1 4657 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1484:
	.loc 1 4663 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	je	.L1768
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1464
.L1768:
	.loc 1 4665 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4666 0
	jmp	.L1464
.L1482:
	.loc 1 4670 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	jne	.L1464
	.loc 1 4671 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4672 0
	jmp	.L1464
.L1477:
	.loc 1 4680 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1773
	.loc 1 4681 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_shift_const
	movl	%eax, -224(%ebp)
	jmp	.L1386
.L1773:
	.loc 1 4685 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1464
	.loc 1 4686 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L1792
	movl	%eax, %edx
	xorl	%eax, %eax
.L1792:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	force_to_mode
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4694 0
	jmp	.L1464
.L1485:
.LBB58:
	.loc 1 4698 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 4699 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4702 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	je	.L1777
	.loc 1 4703 0
	leal	__FUNCTION__.15491@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4703, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1777:
	.loc 1 4704 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 4705 0
	cmpl	$1, -24(%ebp)
	jne	.L1464
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1464
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$154, %ax
	jne	.L1464
.LBB59:
	.loc 1 4709 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -192(%ebp)
	movl	%ecx, -188(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-188(%ebp), %ecx
	imull	%eax, %ecx
	movl	-192(%ebp), %esi
	imull	%edx, %esi
	addl	%esi, %ecx
	mull	-192(%ebp)
	addl	%edx, %ecx
	movl	%ecx, %edx
	movl	%eax, -20(%ebp)
	jmp	.L1791
.L1782:
.L1791:
	.loc 1 4714 0
	movl	-32(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L1783
	.loc 1 4715 0
	movl	-32(%ebp), %ecx
	movl	%ecx, -224(%ebp)
	jmp	.L1386
.L1783:
	.loc 1 4716 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$154, %ax
	jne	.L1464
.LBB60:
	.loc 1 4718 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -176(%ebp)
	movl	%edx, -172(%ebp)
	.loc 1 4719 0
	movl	-20(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -180(%ebp)
	movl	-180(%ebp), %ecx
	cmpl	-172(%ebp), %ecx
	jl	.L1786
	movl	-180(%ebp), %eax
	cmpl	-172(%ebp), %eax
	jg	.L1788
	movl	-184(%ebp), %edx
	cmpl	-176(%ebp), %edx
	jbe	.L1786
.L1788:
	.loc 1 4720 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1782
.L1786:
	.loc 1 4723 0
	movl	-20(%ebp), %edx
	movl	-176(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	.loc 1 4724 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 4729 0
	jmp	.L1782
.L1464:
.LBE60:
.LBE59:
.LBE58:
	.loc 1 4739 0
	movl	8(%ebp), %eax
	movl	%eax, -224(%ebp)
.L1386:
	movl	-224(%ebp), %eax
	.loc 1 4740 0
	addl	$252, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE31:
	.size	combine_simplify_rtx, .-combine_simplify_rtx
	.type	simplify_if_then_else, @function
simplify_if_then_else:
.LFB32:
	.loc 1 4747 0
	pushl	%ebp
.LCFI82:
	movl	%esp, %ebp
.LCFI83:
	pushl	%edi
.LCFI84:
	pushl	%esi
.LCFI85:
	pushl	%ebx
.LCFI86:
	subl	$188, %esp
.LCFI87:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4748 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -108(%ebp)
	.loc 1 4749 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 4750 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 4751 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -96(%ebp)
	.loc 1 4752 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -92(%ebp)
	.loc 1 4753 0
	movl	-92(%ebp), %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -88(%ebp)
	.loc 1 4760 0
	cmpl	$0, -88(%ebp)
	je	.L1797
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -100(%ebp)
	jne	.L1797
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-96(%ebp), %eax
	jne	.L1797
	.loc 1 4761 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1797:
	.loc 1 4764 0
	cmpl	$0, -88(%ebp)
	je	.L1802
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-100(%ebp), %eax
	jne	.L1802
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -96(%ebp)
	jne	.L1802
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	reversed_comparison
	movl	%eax, -72(%ebp)
	cmpl	$0, -72(%ebp)
	je	.L1802
	.loc 1 4768 0
	movl	-72(%ebp), %eax
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1802:
	.loc 1 4774 0
	cmpl	$0, -88(%ebp)
	je	.L1807
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	movl	%eax, -76(%ebp)
	cmpl	$0, -76(%ebp)
	je	.L1807
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1807
.LBB61:
	.loc 1 4780 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 4781 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 4782 0
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 4783 0
	movl	$0, -56(%ebp)
	.loc 1 4787 0
	cmpl	$113, -76(%ebp)
	jne	.L1811
	.loc 1 4789 0
	movl	$1, -56(%ebp)
	movl	$113, -92(%ebp)
	movl	$112, -76(%ebp)
	.loc 1 4790 0
	movl	-100(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -96(%ebp)
.L1811:
	.loc 1 4797 0
	cmpl	$113, -92(%ebp)
	jne	.L1813
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-64(%ebp), %eax
	jne	.L1813
	movl	-68(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L1813
	.loc 1 4799 0
	movl	$113, -76(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -60(%ebp)
	.loc 1 4797 0
	jmp	.L1817
.L1813:
	.loc 1 4800 0
	cmpl	$113, -92(%ebp)
	jne	.L1817
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-64(%ebp), %eax
	jne	.L1817
	movl	-68(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-68(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L1817
	.loc 1 4803 0
	movl	$113, -76(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	movl	%eax, -60(%ebp)
.L1817:
	.loc 1 4809 0
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L1821
	.loc 1 4810 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %edi
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	known_cond
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	subst
	movl	%eax, -100(%ebp)
.L1821:
	.loc 1 4813 0
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L1823
	.loc 1 4814 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %edi
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-60(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	known_cond
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	subst
	movl	%eax, -96(%ebp)
.L1823:
	.loc 1 4818 0
	cmpl	$0, -56(%ebp)
	je	.L1825
	movl	-96(%ebp), %edx
	movl	%edx, -152(%ebp)
	jmp	.L1827
.L1825:
	movl	-100(%ebp), %eax
	movl	%eax, -152(%ebp)
.L1827:
	movl	8(%ebp), %eax
	addl	$12, %eax
	movl	-152(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 4819 0
	cmpl	$0, -56(%ebp)
	je	.L1828
	movl	-100(%ebp), %eax
	movl	%eax, -148(%ebp)
	jmp	.L1830
.L1828:
	movl	-96(%ebp), %edx
	movl	%edx, -148(%ebp)
.L1830:
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	-148(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 4821 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 4822 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -96(%ebp)
	.loc 1 4823 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -92(%ebp)
.L1807:
.LBE61:
	.loc 1 4832 0
	cmpl	$0, -88(%ebp)
	je	.L1831
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	testl	%eax, %eax
	je	.L1831
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	-100(%ebp), %eax
	je	.L1834
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1836
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1844
.L1836:
	movl	-96(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1844
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	-96(%ebp), %eax
	jne	.L1834
.L1844:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-100(%ebp), %eax
	je	.L1834
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1847
	movl	-96(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1834
.L1847:
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1849
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1849
	movl	-96(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L1834
.L1849:
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L1834
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1831
.L1834:
	.loc 1 4846 0
	movl	$0, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	reversed_comparison_code@PLT
	movl	%eax, -92(%ebp)
	.loc 1 4847 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	reversed_comparison
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4851 0
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4852 0
	movl	8(%ebp), %edx
	addl	$20, %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 4854 0
	movl	-100(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -96(%ebp)
	.loc 1 4855 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 4858 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -92(%ebp)
	.loc 1 4859 0
	movl	-92(%ebp), %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -88(%ebp)
.L1831:
	.loc 1 4864 0
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1853
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1853
	.loc 1 4865 0
	movl	-100(%ebp), %eax
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1853:
	.loc 1 4868 0
	cmpl	$113, -92(%ebp)
	jne	.L1856
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1856
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1859
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1859
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1862
.L1859:
	movl	flag_finite_math_only@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1856
.L1862:
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1856
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1856
	.loc 1 4872 0
	movl	-96(%ebp), %edx
	movl	%edx, -156(%ebp)
	jmp	.L1801
.L1856:
	.loc 1 4873 0
	cmpl	$112, -92(%ebp)
	jne	.L1865
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1865
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1868
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1868
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1871
.L1868:
	movl	flag_finite_math_only@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1865
.L1871:
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1865
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1865
	.loc 1 4877 0
	movl	-100(%ebp), %eax
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1865:
	.loc 1 4881 0
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1874
	movl	-96(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L1874
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1874
	cmpl	$0, -88(%ebp)
	je	.L1874
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1874
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1874
	.loc 1 4887 0
	movl	-92(%ebp), %edx
	movl	%edx, -160(%ebp)
	cmpl	$114, -160(%ebp)
	jb	.L1874
	cmpl	$115, -160(%ebp)
	jbe	.L1881
	cmpl	$117, -160(%ebp)
	ja	.L1874
	jmp	.L1882
.L1881:
	.loc 1 4891 0
	movl	-108(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$139, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1882:
	.loc 1 4894 0
	movl	-108(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$139, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	-108(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1874:
	.loc 1 4904 0
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L1883
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L1883
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L1886
.L1883:
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1887
.L1886:
	cmpl	$0, -88(%ebp)
	je	.L1887
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1887
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1887
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1887
	.loc 1 4909 0
	movl	-92(%ebp), %eax
	subl	$114, %eax
	movl	%eax, -164(%ebp)
	cmpl	$7, -164(%ebp)
	ja	.L1887
	movl	-164(%ebp), %eax
	sall	$2, %eax
	movl	.L1896@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1896:
	.long	.L1892@GOTOFF
	.long	.L1892@GOTOFF
	.long	.L1893@GOTOFF
	.long	.L1893@GOTOFF
	.long	.L1894@GOTOFF
	.long	.L1894@GOTOFF
	.long	.L1895@GOTOFF
	.long	.L1895@GOTOFF
	.text
.L1892:
	.loc 1 4913 0
	movl	-96(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$103, (%esp)
	call	gen_binary
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1893:
	.loc 1 4916 0
	movl	-96(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$102, (%esp)
	call	gen_binary
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1894:
	.loc 1 4919 0
	movl	-96(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$105, (%esp)
	call	gen_binary
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1895:
	.loc 1 4922 0
	movl	-96(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$104, (%esp)
	call	gen_binary
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1887:
	.loc 1 4934 0
	cmpl	$0, -88(%ebp)
	je	.L1897
	movl	-108(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1897
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1897
.LBB62:
	.loc 1 4939 0
	movl	$57, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -52(%ebp)
	.loc 1 4940 0
	movl	$57, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -48(%ebp)
	.loc 1 4941 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 4942 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 4943 0
	movl	$1, -36(%ebp)
	movl	$1, -32(%ebp)
	.loc 1 4944 0
	movl	-108(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4945 0
	movl	$0, -24(%ebp)
	movl	$0, -20(%ebp)
	.loc 1 4947 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L1901
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$86, %ax
	je	.L1901
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1901
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	je	.L1901
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	je	.L1901
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L1901
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L1908
.L1901:
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1908
	.loc 1 4952 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 4947 0
	jmp	.L1910
.L1908:
	.loc 1 4956 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L1911
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1911
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L1914
.L1911:
	movl	-52(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1914
	.loc 1 4959 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 4956 0
	jmp	.L1910
.L1914:
	.loc 1 4960 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	jne	.L1916
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L1918
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$86, %ax
	je	.L1918
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1918
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	je	.L1918
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	je	.L1918
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L1918
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L1916
.L1918:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1916
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1916
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1916
	movl	-48(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %esi
	movl	-108(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	cmpl	%eax, %esi
	jbe	.L1916
	.loc 1 4976 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4977 0
	movl	$130, -32(%ebp)
	.loc 1 4978 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 4960 0
	jmp	.L1910
.L1916:
	.loc 1 4980 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	jne	.L1929
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L1931
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1931
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L1929
.L1931:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1929
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1929
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1929
	movl	-48(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %esi
	movl	-108(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	cmpl	%eax, %esi
	jbe	.L1929
	.loc 1 4992 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 4993 0
	movl	$130, -32(%ebp)
	.loc 1 4994 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 4980 0
	jmp	.L1910
.L1929:
	.loc 1 4996 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1938
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L1940
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$86, %ax
	je	.L1940
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1940
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	je	.L1940
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	je	.L1940
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L1940
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L1938
.L1940:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1938
	movl	-108(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1938
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1938
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1938
	movl	-48(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-144(%ebp), %eax
	andl	%esi, %eax
	movl	-140(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1938
	.loc 1 5012 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 5013 0
	movl	$131, -32(%ebp)
	.loc 1 5014 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 4996 0
	jmp	.L1910
.L1938:
	.loc 1 5016 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L1910
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	je	.L1953
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L1953
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L1910
.L1953:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1910
	movl	-108(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1910
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L1910
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1910
	movl	-48(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -136(%ebp)
	movl	%edx, -132(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-136(%ebp), %eax
	andl	%esi, %eax
	movl	-132(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1910
	.loc 1 5028 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 5029 0
	movl	$131, -32(%ebp)
	.loc 1 5030 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
.L1910:
	.loc 1 5033 0
	cmpl	$0, -24(%ebp)
	je	.L1897
	.loc 1 5035 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %edi
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	subst
	movl	%eax, -84(%ebp)
	.loc 1 5037 0
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, 12(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, -84(%ebp)
	.loc 1 5039 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	subst
	movl	%eax, -84(%ebp)
	.loc 1 5040 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -84(%ebp)
	.loc 1 5042 0
	cmpl	$1, -32(%ebp)
	je	.L1962
	.loc 1 5043 0
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -84(%ebp)
.L1962:
	.loc 1 5045 0
	movl	-84(%ebp), %eax
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1897:
.LBE62:
	.loc 1 5054 0
	cmpl	$112, -92(%ebp)
	jne	.L1964
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L1964
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-96(%ebp), %eax
	jne	.L1964
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1964
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1969
	movl	-100(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -80(%ebp)
	cmpl	$0, -80(%ebp)
	jns	.L1971
.L1969:
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-108(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L1964
	movl	-100(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -80(%ebp)
	cmpl	$0, -80(%ebp)
	js	.L1964
.L1971:
	.loc 1 5061 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	-80(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -156(%ebp)
	jmp	.L1801
.L1964:
	.loc 1 5065 0
	movl	8(%ebp), %edx
	movl	%edx, -156(%ebp)
.L1801:
	movl	-156(%ebp), %eax
	.loc 1 5066 0
	addl	$188, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE32:
	.size	simplify_if_then_else, .-simplify_if_then_else
	.type	simplify_set, @function
simplify_set:
.LFB33:
	.loc 1 5073 0
	pushl	%ebp
.LCFI88:
	movl	%esp, %ebp
.LCFI89:
	pushl	%ebx
.LCFI90:
	subl	$196, %esp
.LCFI91:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5074 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 5075 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 5077 0
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1975
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -168(%ebp)
	jmp	.L1977
.L1975:
	movl	-72(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -168(%ebp)
.L1977:
	movl	-168(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 5082 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$69, %ax
	jne	.L1978
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$61, %ax
	jne	.L1978
	.loc 1 5083 0
	movl	-76(%ebp), %eax
	movl	%eax, -164(%ebp)
	jmp	.L1981
.L1978:
	.loc 1 5089 0
	movl	-68(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1982
	movl	-68(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L1982
	.loc 1 5092 0
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$-1, 8(%esp)
	movl	$-1, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -76(%ebp)
	.loc 1 5093 0
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L1982:
	.loc 1 5099 0
	movl	-68(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$4, %eax
	je	.L1985
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L1987
.L1985:
	movl	subst_insn@GOTOFF(%ebx), %edx
	leal	-80(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	find_single_use@PLT
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	je	.L1987
	movl	8+undobuf@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L1989
	movl	8+undobuf@GOTOFF(%ebx), %edx
	movl	-80(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1987
.L1989:
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L1987
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1987
.LBB63:
	.loc 1 5107 0
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	.loc 1 5110 0
	movl	$0, -48(%ebp)
	.loc 1 5111 0
	movl	-72(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -44(%ebp)
	.loc 1 5114 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L1993
	.loc 1 5115 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1995
.L1993:
	.loc 1 5117 0
	movl	-76(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -88(%ebp)
.L1995:
	.loc 1 5120 0
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1996
	.loc 1 5121 0
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	jmp	.L1998
.L1996:
	.loc 1 5122 0
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1999
	.loc 1 5123 0
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	jmp	.L1998
.L1999:
	.loc 1 5125 0
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
.L1998:
	.loc 1 5126 0
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_relational_operation@PLT
	movl	%eax, -52(%ebp)
	.loc 1 5127 0
	cmpl	$0, -52(%ebp)
	je	.L2001
.LBB64:
	.loc 1 5129 0
	movl	-80(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 5130 0
	movl	-80(%ebp), %eax
	movl	%eax, 8+undobuf@GOTOFF(%ebx)
	.loc 1 5131 0
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 5134 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L2003
.LBB65:
	.loc 1 5136 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	simplify_rtx@PLT
	movl	%eax, -32(%ebp)
	.loc 1 5137 0
	cmpl	$0, -32(%ebp)
	je	.L2003
	.loc 1 5138 0
	movl	-36(%ebp), %edx
	addl	$12, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L2003:
.LBE65:
	.loc 1 5142 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5143 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5144 0
	movl	8(%ebp), %eax
	movl	%eax, -164(%ebp)
	jmp	.L1981
.L2001:
.LBE64:
	.loc 1 5148 0
	leal	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_comparison
	movl	%eax, -56(%ebp)
	.loc 1 5184 0
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L2006
.LBB66:
	.loc 1 5188 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 5197 0
	cmpl	$112, -60(%ebp)
	jne	.L2008
	cmpl	$113, -56(%ebp)
	je	.L2010
.L2008:
	cmpl	$113, -60(%ebp)
	jne	.L2011
	cmpl	$112, -56(%ebp)
	jne	.L2011
.L2010:
	cmpl	$0, -48(%ebp)
	jne	.L2011
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-88(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2011
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2011
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-84(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L2011
.LBB67:
	.loc 1 5203 0
	movl	-80(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	$0, -96(%ebp)
	.loc 1 5205 0
	movl	-80(%ebp), %edx
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	recog_for_combine
	testl	%eax, %eax
	jns	.L2011
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	check_asm_operands@PLT
	testl	%eax, %eax
	jne	.L2011
	.loc 1 5208 0
	movl	-64(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movw	%ax, (%edx)
	.loc 1 5209 0
	movl	$0, -80(%ebp)
	.loc 1 5211 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	-84(%ebp), %ecx
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, -84(%ebp)
.L2011:
.LBE67:
	.loc 1 5215 0
	movl	$1, -48(%ebp)
.L2006:
.LBE66:
	.loc 1 5218 0
	cmpl	$0, -48(%ebp)
	je	.L2019
	.loc 1 5219 0
	movl	-80(%ebp), %eax
	movl	%eax, 8+undobuf@GOTOFF(%ebx)
.L2019:
	.loc 1 5234 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L2021
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-44(%ebp), %eax
	je	.L2023
.L2021:
	.loc 1 5236 0
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5237 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 5234 0
	jmp	.L2025
.L2023:
	.loc 1 5242 0
	movl	-84(%ebp), %eax
	movl	-76(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5243 0
	movl	-88(%ebp), %eax
	movl	-76(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5099 0
	jmp	.L2025
.L1987:
.LBE63:
	.loc 1 5250 0
	movl	$57, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -76(%ebp)
	.loc 1 5251 0
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L2025:
	.loc 1 5266 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2026
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2026
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L2026
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -160(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2030
	movl	$7, -156(%ebp)
	jmp	.L2032
.L2030:
	movl	$3, -156(%ebp)
.L2032:
	movl	-160(%ebp), %eax
	addl	-156(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2033
	movl	$8, -148(%ebp)
	jmp	.L2035
.L2033:
	movl	$4, -148(%ebp)
.L2035:
	movl	-152(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-148(%ebp)
	movl	%eax, -144(%ebp)
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -140(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2036
	movl	$7, -136(%ebp)
	jmp	.L2038
.L2036:
	movl	$3, -136(%ebp)
.L2038:
	movl	-140(%ebp), %eax
	addl	-136(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2039
	movl	$8, -128(%ebp)
	jmp	.L2041
.L2039:
	movl	$4, -128(%ebp)
.L2041:
	movl	-132(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-128(%ebp)
	cmpl	%eax, -144(%ebp)
	jne	.L2026
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2043
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2043
	movl	-72(%ebp), %eax
	movl	4(%eax), %edx
	movl	mips_regno_to_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_cannot_change_mode_class@PLT
	movzbl	%al, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L2026
.L2043:
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2046
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2026
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2026
.L2046:
	.loc 1 5286 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5289 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5291 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L2026:
	.loc 1 5323 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2049
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2049
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L2049
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L2049
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2049
	.loc 1 5330 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2055
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L2057
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L2055
.L2057:
	movl	$130, -116(%ebp)
	jmp	.L2059
.L2055:
	movl	$131, -116(%ebp)
.L2059:
	movl	-124(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx@PLT
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5334 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
.L2049:
	.loc 1 5344 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$69, %ax
	je	.L2060
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$82, %ax
	jne	.L2060
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L2060
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$113, %ax
	je	.L2064
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$112, %ax
	jne	.L2060
.L2064:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2060
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L2060
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	can_conditionally_move_p@PLT
	testl	%eax, %eax
	jne	.L2060
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L2060
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2060
.LBB68:
	.loc 1 5359 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$112, %ax
	jne	.L2071
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -112(%ebp)
	jmp	.L2073
.L2071:
	movl	-76(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -112(%ebp)
.L2073:
	movl	-112(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 5361 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$112, %ax
	jne	.L2074
	movl	-76(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -108(%ebp)
	jmp	.L2076
.L2074:
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -108(%ebp)
.L2076:
	movl	-108(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5362 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 5364 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2077
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2077
	.loc 1 5366 0
	movl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5364 0
	jmp	.L2080
.L2077:
	.loc 1 5367 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2081
	movl	-28(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2081
	.loc 1 5369 0
	movl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5367 0
	jmp	.L2080
.L2081:
	.loc 1 5370 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2084
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2084
	.loc 1 5372 0
	movl	-28(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 5370 0
	jmp	.L2080
.L2084:
	.loc 1 5373 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2080
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2080
	.loc 1 5375 0
	movl	-28(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -28(%ebp)
.L2080:
	.loc 1 5377 0
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %ecx
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -16(%ebp)
	.loc 1 5379 0
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %ecx
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -12(%ebp)
	.loc 1 5385 0
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, %ecx
	movl	-76(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5390 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
.L2060:
.LBE68:
	.loc 1 5395 0
	movl	-76(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L2089
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2089
	.loc 1 5396 0
	movl	-76(%ebp), %eax
	movl	%eax, -164(%ebp)
	jmp	.L1981
.L2089:
	.loc 1 5397 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L2092
	movl	-72(%ebp), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2092
	.loc 1 5398 0
	movl	-72(%ebp), %eax
	movl	%eax, -164(%ebp)
	jmp	.L1981
.L2092:
	.loc 1 5401 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_field_assignment
	movl	%eax, -164(%ebp)
.L1981:
	movl	-164(%ebp), %eax
	.loc 1 5402 0
	addl	$196, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE33:
	.size	simplify_set, .-simplify_set
	.section	.rodata
	.type	__FUNCTION__.18230, @object
	.size	__FUNCTION__.18230, 17
__FUNCTION__.18230:
	.string	"simplify_logical"
	.text
	.type	simplify_logical, @function
simplify_logical:
.LFB34:
	.loc 1 5411 0
	pushl	%ebp
.LCFI92:
	movl	%esp, %ebp
.LCFI93:
	pushl	%edi
.LCFI94:
	pushl	%esi
.LCFI95:
	pushl	%ebx
.LCFI96:
	subl	$140, %esp
.LCFI97:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5412 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	.loc 1 5413 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 5414 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 5417 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -116(%ebp)
	cmpl	$94, -116(%ebp)
	je	.L2099
	cmpl	$95, -116(%ebp)
	je	.L2100
	cmpl	$93, -116(%ebp)
	je	.L2098
	jmp	.L2097
.L2098:
	.loc 1 5422 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2101
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2101
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2101
	.loc 1 5425 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L2101:
	.loc 1 5429 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2105
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2105
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2105
	.loc 1 5432 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L2105:
	.loc 1 5437 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L2109
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2109
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2109
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2109
	.loc 1 5441 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L2109:
	.loc 1 5443 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L2114
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2114
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2114
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2114
	.loc 1 5447 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L2114:
	.loc 1 5452 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2119
	movl	-40(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	jbe	.L2121
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -112(%ebp)
	movl	%ecx, -108(%ebp)
	cmpl	$0, -108(%ebp)
	js	.L2119
	cmpl	$0, -108(%ebp)
	jg	.L2121
	cmpl	$0, -112(%ebp)
	jbe	.L2119
.L2121:
	.loc 1 5456 0
	movl	-32(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_and_const_int
	movl	%eax, 8(%ebp)
	.loc 1 5461 0
	cmpl	$0, 12(%ebp)
	je	.L2124
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2124
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2124
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2124
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2124
	.loc 1 5465 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -96(%ebp)
	movl	%ecx, -92(%ebp)
	movl	-32(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-96(%ebp), %eax
	andl	%esi, %eax
	movl	-92(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2124:
	.loc 1 5470 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	je	.L2131
	.loc 1 5471 0
	movl	8(%ebp), %ecx
	movl	%ecx, -100(%ebp)
	jmp	.L2130
.L2131:
	.loc 1 5473 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	je	.L2133
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	jne	.L2119
.L2133:
	.loc 1 5475 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -32(%ebp)
.L2119:
	.loc 1 5479 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2135
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2137
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2135
.L2137:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2135
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2135
	.loc 1 5484 0
	movl	-32(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2135:
	.loc 1 5501 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L2141
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2143
.L2141:
	.loc 1 5503 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 8(%ebp)
	.loc 1 5508 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	je	.L2143
	.loc 1 5509 0
	movl	8(%ebp), %edx
	movl	%edx, -100(%ebp)
	jmp	.L2130
.L2143:
	.loc 1 5512 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L2145
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2147
.L2145:
	.loc 1 5513 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2147:
	.loc 1 5522 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L2148
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2148
	.loc 1 5523 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %esi
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2148:
	.loc 1 5529 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L2154
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L2154
	.loc 1 5530 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %esi
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2099:
	.loc 1 5538 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2155
	movl	-40(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2155
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	movl	-32(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-88(%ebp), %eax
	andl	%esi, %eax
	movl	-84(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2155
	.loc 1 5541 0
	movl	-32(%ebp), %ecx
	movl	%ecx, -100(%ebp)
	jmp	.L2130
.L2155:
	.loc 1 5544 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2159
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2161
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2159
.L2161:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2159
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2159
	.loc 1 5549 0
	movl	-32(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2159:
	.loc 1 5554 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2165
	.loc 1 5556 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 8(%ebp)
	.loc 1 5562 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L2165
	.loc 1 5563 0
	movl	8(%ebp), %edx
	movl	%edx, -100(%ebp)
	jmp	.L2130
.L2165:
	.loc 1 5566 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2168
	.loc 1 5568 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 8(%ebp)
	.loc 1 5574 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L2168
	.loc 1 5575 0
	movl	8(%ebp), %ecx
	movl	%ecx, -100(%ebp)
	jmp	.L2130
.L2168:
	.loc 1 5581 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L2171
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L2173
.L2171:
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L2174
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2174
.L2173:
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2174
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2174
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2174
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	-40(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2174
	.loc 1 5588 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L2180
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L2182
.L2180:
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
.L2182:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	-76(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$98, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2174:
	.loc 1 5597 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2154
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L2154
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L2154
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2154
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2154
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -72(%ebp)
	movl	%ecx, -68(%ebp)
	cmpl	$0, -68(%ebp)
	jg	.L2154
	cmpl	$0, -68(%ebp)
	js	.L2190
	cmpl	$63, -72(%ebp)
	ja	.L2154
.L2190:
.LBB69:
	.loc 1 5603 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5604 0
	movl	-32(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-24(%ebp), %ecx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2229
	movl	%eax, %edx
	xorl	%eax, %eax
.L2229:
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 5606 0
	movl	-24(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	%edi, %esi
	sarl	%cl, %edi
	testb	$32, %cl
	je	.L2230
	movl	%edi, %esi
	sarl	$31, %edi
.L2230:
	movl	-32(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2154
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-48(%ebp), %esi
	movl	-44(%ebp), %edi
	movl	-64(%ebp), %eax
	andl	%esi, %eax
	movl	-60(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2154
	.loc 1 5609 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, %eax
	orl	-48(%ebp), %eax
	movl	%edi, %edx
	orl	-44(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	addl	$12, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 5611 0
	movl	-36(%ebp), %ecx
	movl	%ecx, -100(%ebp)
	jmp	.L2130
.L2100:
.LBE69:
	.loc 1 5621 0
	movl	-40(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2193
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-56(%ebp), %eax
	andl	%esi, %eax
	movl	-52(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2193
	.loc 1 5624 0
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2193:
.LBB70:
	.loc 1 5630 0
	movl	$0, -20(%ebp)
	.loc 1 5632 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L2196
	.loc 1 5633 0
	addl	$1, -20(%ebp)
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
.L2196:
	.loc 1 5634 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L2198
	.loc 1 5635 0
	addl	$1, -20(%ebp)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
.L2198:
	.loc 1 5637 0
	cmpl	$2, -20(%ebp)
	jne	.L2200
	.loc 1 5639 0
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5640 0
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	jmp	.L2202
.L2200:
	.loc 1 5642 0
	cmpl	$1, -20(%ebp)
	jne	.L2202
	.loc 1 5643 0
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2202:
.LBE70:
	.loc 1 5652 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2204
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2204
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2204
	.loc 1 5655 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2204:
	.loc 1 5659 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2208
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2208
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2208
	.loc 1 5662 0
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2208:
	.loc 1 5668 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	-32(%ebp), %eax
	jne	.L2212
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2212
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	reversed_comparison
	movl	%eax, -28(%ebp)
	cmpl	$0, -28(%ebp)
	je	.L2212
	.loc 1 5673 0
	movl	-28(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2212:
	.loc 1 5679 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	-32(%ebp), %eax
	jne	.L2216
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2216
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2216
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	-40(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2216
	.loc 1 5684 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$114, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -100(%ebp)
	jmp	.L2130
.L2216:
	.loc 1 5688 0
	movl	-40(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2154
	movl	-40(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	movl	-40(%ebp), %esi
	movl	mode_bitsize@GOT(%ebx), %ecx
	movzwl	(%ecx,%esi,2), %ecx
	movzwl	%cx, %ecx
	subl	$1, %ecx
	movl	$1, %esi
	movl	$0, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2228
	movl	%esi, %edi
	xorl	%esi, %esi
.L2228:
	movl	%edx, %ecx
	xorl	%edi, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2154
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -32(%ebp)
	jne	.L2154
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2154
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	reversed_comparison
	movl	%eax, -28(%ebp)
	cmpl	$0, -28(%ebp)
	je	.L2154
	.loc 1 5695 0
	movl	-28(%ebp), %edx
	movl	%edx, -100(%ebp)
	jmp	.L2130
.L2097:
	.loc 1 5700 0
	leal	__FUNCTION__.18230@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5700, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2154:
	.loc 1 5703 0
	movl	8(%ebp), %ecx
	movl	%ecx, -100(%ebp)
.L2130:
	movl	-100(%ebp), %eax
	.loc 1 5704 0
	addl	$140, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE34:
	.size	simplify_logical, .-simplify_logical
	.type	expand_compound_operation, @function
expand_compound_operation:
.LFB35:
	.loc 1 5722 0
	pushl	%ebp
.LCFI98:
	movl	%esp, %ebp
.LCFI99:
	pushl	%edi
.LCFI100:
	pushl	%esi
.LCFI101:
	pushl	%ebx
.LCFI102:
	subl	$140, %esp
.LCFI103:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5723 0
	movl	$0, -48(%ebp)
	movl	$0, -44(%ebp)
	.loc 1 5724 0
	movl	$0, -32(%ebp)
	.loc 1 5728 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -128(%ebp)
	cmpl	$131, -128(%ebp)
	je	.L2234
	cmpl	$131, -128(%ebp)
	ja	.L2237
	cmpl	$130, -128(%ebp)
	je	.L2233
	jmp	.L2232
.L2237:
	cmpl	$142, -128(%ebp)
	je	.L2235
	cmpl	$143, -128(%ebp)
	je	.L2236
	jmp	.L2232
.L2234:
	.loc 1 5731 0
	movl	$1, -32(%ebp)
.L2233:
	.loc 1 5741 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2238
	.loc 1 5742 0
	movl	8(%ebp), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2238:
	.loc 1 5753 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2241
	movl	$8, -116(%ebp)
	jmp	.L2243
.L2241:
	movl	$4, -116(%ebp)
.L2243:
	movl	-116(%ebp), %ecx
	cmpl	%ecx, -120(%ebp)
	jle	.L2244
	.loc 1 5754 0
	movl	8(%ebp), %esi
	movl	%esi, -124(%ebp)
	jmp	.L2240
.L2244:
	.loc 1 5759 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L2246
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$3, %eax
	je	.L2246
	.loc 1 5760 0
	movl	8(%ebp), %edi
	movl	%edi, -124(%ebp)
	jmp	.L2240
.L2246:
	.loc 1 5762 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 5766 0
	movl	-40(%ebp), %eax
	orl	-36(%ebp), %eax
	testl	%eax, %eax
	jne	.L2251
	.loc 1 5767 0
	movl	8(%ebp), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2236:
	.loc 1 5772 0
	movl	$1, -32(%ebp)
.L2235:
	.loc 1 5775 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L2252
	.loc 1 5776 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2252:
	.loc 1 5778 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2254
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2254
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L2257
.L2254:
	.loc 1 5781 0
	movl	8(%ebp), %ecx
	movl	%ecx, -124(%ebp)
	jmp	.L2240
.L2257:
	.loc 1 5786 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L2258
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$3, %eax
	je	.L2258
	.loc 1 5787 0
	movl	8(%ebp), %esi
	movl	%esi, -124(%ebp)
	jmp	.L2240
.L2258:
	.loc 1 5789 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 5790 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 5795 0
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	-40(%ebp), %esi
	movl	-36(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -112(%ebp)
	movl	%edi, -108(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %edi
	movl	%edi, -104(%ebp)
	movl	$0, -100(%ebp)
	movl	-100(%ebp), %eax
	cmpl	%eax, -108(%ebp)
	jb	.L2251
	movl	-100(%ebp), %ecx
	cmpl	%ecx, -108(%ebp)
	ja	.L2263
	movl	-104(%ebp), %esi
	cmpl	%esi, -112(%ebp)
	jbe	.L2251
.L2263:
	.loc 1 5796 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$58, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 5801 0
	jmp	.L2251
.L2232:
	.loc 1 5804 0
	movl	8(%ebp), %edi
	movl	%edi, -124(%ebp)
	jmp	.L2240
.L2251:
	.loc 1 5809 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	jne	.L2264
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2264
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	shrdl	$1, %edx, %eax
	shrl	%edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-96(%ebp), %eax
	andl	%esi, %eax
	movl	-92(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2264
.LBB71:
	.loc 1 5817 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$131, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -20(%ebp)
	.loc 1 5818 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2264:
.LBE71:
	.loc 1 5822 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L2268
	.loc 1 5827 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$132, %ax
	jne	.L2270
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L2270
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2270
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-88(%ebp), %eax
	andl	%esi, %eax
	movl	-84(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2270
	.loc 1 5832 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2270:
	.loc 1 5835 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2275
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L2275
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2275
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2275
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-80(%ebp), %eax
	andl	%esi, %eax
	movl	-76(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2275
	.loc 1 5841 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2275:
	.loc 1 5847 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$132, %ax
	jne	.L2281
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L2281
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2281
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2281
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2281
	.loc 1 5854 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2281:
	.loc 1 5857 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2268
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L2268
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2268
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2268
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2268
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2268
	.loc 1 5865 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2268:
	.loc 1 5884 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -28(%ebp)
	.loc 1 5885 0
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-40(%ebp), %esi
	adcl	-36(%ebp), %edi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-68(%ebp), %edi
	cmpl	-44(%ebp), %edi
	jb	.L2293
	movl	-68(%ebp), %eax
	cmpl	-44(%ebp), %eax
	ja	.L2295
	movl	-72(%ebp), %ecx
	cmpl	-48(%ebp), %ecx
	jb	.L2293
.L2295:
	.loc 1 5886 0
	movl	-40(%ebp), %edx
	movl	-28(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -64(%ebp)
	movl	-48(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, %esi
	subl	%edx, %esi
	movl	%esi, %edx
	movl	-40(%ebp), %eax
	movl	%edx, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 16(%esp)
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -60(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L2296
	movl	$100, -52(%ebp)
	jmp	.L2298
.L2296:
	movl	$99, -52(%ebp)
.L2298:
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-60(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	-56(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	-52(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -24(%ebp)
	jmp	.L2299
.L2293:
	.loc 1 5894 0
	cmpl	$0, -32(%ebp)
	je	.L2300
	cmpl	$0, -36(%ebp)
	ja	.L2300
	cmpl	$0, -36(%ebp)
	jb	.L2303
	cmpl	$63, -40(%ebp)
	ja	.L2300
.L2303:
	.loc 1 5895 0
	movl	-40(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2307
	movl	%eax, %edx
	xorl	%eax, %eax
.L2307:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-48(%ebp), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 16(%esp)
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$100, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -24(%ebp)
	.loc 1 5894 0
	jmp	.L2299
.L2300:
	.loc 1 5902 0
	movl	8(%ebp), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2240
.L2299:
	.loc 1 5906 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L2304
	.loc 1 5907 0
	movl	8(%ebp), %ecx
	movl	%ecx, -124(%ebp)
	jmp	.L2240
.L2304:
	.loc 1 5909 0
	movl	-24(%ebp), %esi
	movl	%esi, -124(%ebp)
.L2240:
	movl	-124(%ebp), %eax
	.loc 1 5910 0
	addl	$140, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE35:
	.size	expand_compound_operation, .-expand_compound_operation
	.type	expand_field_assignment, @function
expand_field_assignment:
.LFB36:
	.loc 1 5923 0
	pushl	%ebp
.LCFI104:
	movl	%esp, %ebp
.LCFI105:
	pushl	%edi
.LCFI106:
	pushl	%esi
.LCFI107:
	pushl	%ebx
.LCFI108:
	subl	$124, %esp
.LCFI109:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	jmp	.L2351
.L2309:
.L2351:
	.loc 1 5933 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	jne	.L2310
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2310
	.loc 1 5936 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 5937 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -32(%ebp)
	.loc 1 5938 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lsb@PLT
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -36(%ebp)
	.loc 1 5933 0
	jmp	.L2338
.L2310:
	.loc 1 5940 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	jne	.L2314
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2314
	.loc 1 5943 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 5944 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 5945 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 5949 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2338
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -112(%ebp)
	movl	%ecx, -108(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	-112(%ebp), %esi
	movl	-108(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -104(%ebp)
	movl	%edi, -100(%ebp)
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %edi
	movl	%edi, -96(%ebp)
	movl	$0, -92(%ebp)
	movl	-92(%ebp), %eax
	cmpl	%eax, -100(%ebp)
	jl	.L2338
	movl	-92(%ebp), %edx
	cmpl	%edx, -100(%ebp)
	jg	.L2320
	movl	-96(%ebp), %ecx
	cmpl	%ecx, -104(%ebp)
	jbe	.L2338
.L2320:
	.loc 1 5951 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$58, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -40(%ebp)
	.loc 1 5940 0
	jmp	.L2338
.L2314:
	.loc 1 5974 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2321
	movl	nonzero_sign_valid@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L2321
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -84(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2324
	movl	$7, -80(%ebp)
	jmp	.L2326
.L2324:
	movl	$3, -80(%ebp)
.L2326:
	movl	-84(%ebp), %esi
	addl	-80(%ebp), %esi
	movl	%esi, -76(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2327
	movl	$8, -72(%ebp)
	jmp	.L2329
.L2327:
	movl	$4, -72(%ebp)
.L2329:
	movl	-76(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-72(%ebp)
	movl	%eax, -68(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -64(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2330
	movl	$7, -60(%ebp)
	jmp	.L2332
.L2330:
	movl	$3, -60(%ebp)
.L2332:
	movl	-64(%ebp), %edi
	addl	-60(%ebp), %edi
	movl	%edi, -56(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2333
	movl	$8, -52(%ebp)
	jmp	.L2335
.L2333:
	movl	$4, -52(%ebp)
.L2335:
	movl	-56(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-52(%ebp)
	cmpl	%eax, -68(%ebp)
	jne	.L2321
	.loc 1 5982 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 8(%ebp)
	.loc 1 5986 0
	jmp	.L2309
.L2339:
	.loc 1 5992 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L2338:
	.loc 1 5991 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2340
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	jne	.L2339
.L2340:
	.loc 1 5994 0
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
	.loc 1 5997 0
	movl	-24(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L2342
	movl	-24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	je	.L2342
.LBB72:
	.loc 1 6002 0
	movl	-24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L2345
	movl	-24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L2345
	movl	-24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L2321
.L2345:
	.loc 1 6006 0
	movl	-24(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	$0, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -20(%ebp)
	.loc 1 6007 0
	cmpl	$52, -20(%ebp)
	je	.L2321
	.loc 1 6010 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 6011 0
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -40(%ebp)
.L2342:
.LBE72:
	.loc 1 6015 0
	cmpl	$63, -32(%ebp)
	jg	.L2321
	.loc 1 6016 0
	movl	-32(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2352
	movl	%eax, %edx
	xorl	%eax, %eax
.L2352:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -28(%ebp)
	.loc 1 6023 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-36(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	gen_binary
	movl	%eax, %esi
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 8(%ebp)
	.loc 1 6039 0
	jmp	.L2309
.L2321:
	.loc 1 6041 0
	movl	8(%ebp), %eax
	.loc 1 6042 0
	addl	$124, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE36:
	.size	expand_field_assignment, .-expand_field_assignment
.globl __moddi3
.globl __divdi3
	.type	make_extraction, @function
make_extraction:
.LFB37:
	.loc 1 6081 0
	pushl	%ebp
.LCFI110:
	movl	%esp, %ebp
.LCFI111:
	pushl	%edi
.LCFI112:
	pushl	%esi
.LCFI113:
	pushl	%ebx
.LCFI114:
	subl	$364, %esp
.LCFI115:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	16(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	32(%ebp), %eax
	movl	%eax, -124(%ebp)
	.loc 1 6085 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -76(%ebp)
	.loc 1 6087 0
	movl	byte_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 6088 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 6089 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 6090 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 6091 0
	movl	-128(%ebp), %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -52(%ebp)
	.loc 1 6092 0
	movl	$0, -48(%ebp)
	.loc 1 6093 0
	movl	$0, -44(%ebp)
	.loc 1 6094 0
	movl	24(%ebp), %eax
	movl	%eax, -40(%ebp)
	.loc 1 6098 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	jne	.L2354
	.loc 1 6102 0
	movl	$1, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 12(%ebp)
	jmp	.L2356
.L2354:
	.loc 1 6103 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2357
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2357
	.loc 1 6110 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2360
	.loc 1 6111 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -76(%ebp)
.L2360:
	.loc 1 6112 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 12(%ebp)
	.loc 1 6103 0
	jmp	.L2356
.L2357:
	.loc 1 6114 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L2356
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2356
	cmpl	$0, 24(%ebp)
	jne	.L2356
	movl	-120(%ebp), %eax
	orl	-116(%ebp), %eax
	testl	%eax, %eax
	jne	.L2356
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -296(%ebp)
	movl	%edx, -292(%ebp)
	movl	-292(%ebp), %eax
	cmpl	-124(%ebp), %eax
	ja	.L2356
	movl	-292(%ebp), %edx
	cmpl	-124(%ebp), %edx
	jb	.L2367
	movl	-296(%ebp), %esi
	cmpl	-128(%ebp), %esi
	jae	.L2356
.L2367:
	.loc 1 6123 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	subl	%esi, %edx
	sbbl	%edi, %ecx
	movl	12(%ebp), %eax
	movl	4(%eax), %esi
	movl	44(%ebp), %eax
	movl	%eax, 36(%esp)
	movl	40(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	36(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	%edx, 20(%esp)
	movl	%ecx, 24(%esp)
	movl	$0, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%esi, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -44(%ebp)
	.loc 1 6126 0
	cmpl	$0, -44(%ebp)
	je	.L2356
	.loc 1 6127 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -284(%ebp)
	jmp	.L2369
.L2356:
	.loc 1 6130 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -72(%ebp)
	.loc 1 6132 0
	cmpl	$0, 24(%ebp)
	je	.L2370
	movl	24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2370
	.loc 1 6133 0
	movl	24(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	movl	$0, 24(%ebp)
.L2370:
	.loc 1 6148 0
	cmpl	$52, -52(%ebp)
	je	.L2373
	cmpl	$0, -48(%ebp)
	je	.L2375
	movl	-72(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jne	.L2373
.L2375:
	cmpl	$0, 24(%ebp)
	jne	.L2377
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2379
	movl	$64, -280(%ebp)
	movl	$0, -276(%ebp)
	jmp	.L2381
.L2379:
	movl	$32, -280(%ebp)
	movl	$0, -276(%ebp)
.L2381:
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	-280(%ebp), %esi
	movl	-276(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2377
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2377
	cmpl	$0, 40(%ebp)
	je	.L2384
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2377
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$74, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	jne	.L2384
.L2377:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2373
	cmpl	$0, 24(%ebp)
	jne	.L2373
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	-120(%ebp), %esi
	movl	-116(%ebp), %edi
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2373
	movl	-72(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-52(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jb	.L2373
	movl	-72(%ebp), %eax
	cmpl	-52(%ebp), %eax
	je	.L2384
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	jne	.L2373
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L2373
.L2384:
	.loc 1 6173 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2393
.LBB73:
	.loc 1 6178 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2395
	.loc 1 6179 0
	movl	-76(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	subl	-128(%ebp), %esi
	sbbl	-124(%ebp), %edi
	movl	%esi, -320(%ebp)
	movl	%edi, -316(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	-320(%ebp), %esi
	movl	-316(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	$3, %edx, %eax
	shrl	$3, %edx
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	jmp	.L2397
.L2395:
	.loc 1 6181 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	movl	-300(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -328(%ebp)
	movl	%edx, -324(%ebp)
	movl	-328(%ebp), %esi
	movl	-324(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-304(%ebp), %eax
	adcl	-300(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
.L2397:
	.loc 1 6183 0
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -44(%ebp)
	jmp	.L2398
.L2393:
.LBE73:
	.loc 1 6185 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2399
	.loc 1 6189 0
	movl	-52(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L2401
.LBB74:
	.loc 1 6191 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2403
	movl	$64, -272(%ebp)
	movl	$0, -268(%ebp)
	jmp	.L2405
.L2403:
	movl	$32, -272(%ebp)
	movl	$0, -268(%ebp)
.L2405:
	movl	-272(%ebp), %esi
	movl	-268(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__divdi3@PLT
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	.loc 1 6193 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2406
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -264(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2408
	movl	$8, -260(%ebp)
	jmp	.L2410
.L2408:
	movl	$4, -260(%ebp)
.L2410:
	movl	-260(%ebp), %edi
	cmpl	%edi, -264(%ebp)
	jle	.L2406
	.loc 1 6195 0
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %ecx
	movl	-52(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, -256(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2412
	movl	$8, -252(%ebp)
	jmp	.L2414
.L2412:
	movl	$4, -252(%ebp)
.L2414:
	movl	-256(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-252(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	subl	-88(%ebp), %eax
	sbbl	-84(%ebp), %edx
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
.L2406:
	.loc 1 6199 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2415
	movl	$8, -248(%ebp)
	movl	$0, -244(%ebp)
	jmp	.L2417
.L2415:
	movl	$4, -248(%ebp)
	movl	$0, -244(%ebp)
.L2417:
	movl	-84(%ebp), %eax
	movl	-248(%ebp), %ecx
	imull	%eax, %ecx
	movl	-244(%ebp), %eax
	imull	-88(%ebp), %eax
	addl	%eax, %ecx
	movl	-248(%ebp), %eax
	mull	-88(%ebp)
	movl	%eax, -328(%ebp)
	movl	%edx, -324(%ebp)
	addl	-324(%ebp), %ecx
	movl	%ecx, -324(%ebp)
	movl	-328(%ebp), %esi
	movl	-324(%ebp), %edi
	movl	%esi, -88(%ebp)
	movl	%edi, -84(%ebp)
	movl	-328(%ebp), %eax
	movl	-324(%ebp), %edx
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	.loc 1 6200 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2418
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-52(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L2418
	.loc 1 6202 0
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %ecx
	movl	-52(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, -240(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2421
	movl	$8, -236(%ebp)
	jmp	.L2423
.L2421:
	movl	$4, -236(%ebp)
.L2423:
	movl	-240(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-236(%ebp)
	movl	%edx, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	addl	%eax, -88(%ebp)
	adcl	%edx, -84(%ebp)
.L2418:
	.loc 1 6207 0
	movl	-72(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -232(%ebp)
	movl	-232(%ebp), %esi
	movl	%esi, -232(%ebp)
	movl	$0, -228(%ebp)
	movl	-228(%ebp), %edi
	cmpl	-84(%ebp), %edi
	jg	.L2424
	movl	-228(%ebp), %eax
	cmpl	-84(%ebp), %eax
	jl	.L2426
	movl	-232(%ebp), %edx
	cmpl	-88(%ebp), %edx
	ja	.L2424
.L2426:
	.loc 1 6208 0
	movl	$0, -284(%ebp)
	jmp	.L2369
.L2424:
	.loc 1 6210 0
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_SUBREG@PLT
	movl	%eax, -44(%ebp)
	jmp	.L2398
.L2401:
.LBE74:
	.loc 1 6213 0
	movl	12(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L2398
.L2399:
	.loc 1 6216 0
	cmpl	$0, -124(%ebp)
	ja	.L2428
	cmpl	$0, -124(%ebp)
	jb	.L2430
	cmpl	$63, -128(%ebp)
	ja	.L2428
.L2430:
	movl	-128(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2549
	movl	%eax, %edx
	xorl	%eax, %eax
.L2549:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	%esi, -224(%ebp)
	movl	%edi, -220(%ebp)
	jmp	.L2431
.L2428:
	movl	$-1, -224(%ebp)
	movl	$-1, -220(%ebp)
.L2431:
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-224(%ebp), %eax
	movl	-220(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -44(%ebp)
.L2398:
	.loc 1 6225 0
	cmpl	$0, 40(%ebp)
	je	.L2432
	.loc 1 6226 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2434
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L2436
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -212(%ebp)
	jmp	.L2438
.L2436:
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$74, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -212(%ebp)
.L2438:
	movl	-212(%ebp), %edx
	movl	%edx, -216(%ebp)
	jmp	.L2439
.L2434:
	movl	-44(%ebp), %esi
	movl	%esi, -216(%ebp)
.L2439:
	movl	-216(%ebp), %edi
	movl	%edi, -284(%ebp)
	jmp	.L2369
.L2432:
	.loc 1 6231 0
	movl	8(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jne	.L2440
	.loc 1 6232 0
	movl	-44(%ebp), %eax
	movl	%eax, -284(%ebp)
	jmp	.L2369
.L2440:
	.loc 1 6234 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2442
	.loc 1 6235 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -284(%ebp)
	jmp	.L2369
.L2442:
	.loc 1 6240 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2444
	movl	-52(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2444
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -208(%ebp)
	movl	%edx, -204(%ebp)
	movl	-52(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	shrdl	$1, %edx, %eax
	shrl	%edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-208(%ebp), %eax
	andl	%esi, %eax
	movl	-204(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2444
.LBB75:
	.loc 1 6248 0
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$131, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -36(%ebp)
	.loc 1 6249 0
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$130, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -32(%ebp)
	.loc 1 6253 0
	movl	$57, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, %esi
	movl	$57, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	cmpl	%eax, %esi
	jg	.L2448
	.loc 1 6254 0
	movl	-36(%ebp), %edx
	movl	%edx, -284(%ebp)
	jmp	.L2369
.L2448:
	.loc 1 6255 0
	movl	-32(%ebp), %esi
	movl	%esi, -284(%ebp)
	jmp	.L2369
.L2444:
.LBE75:
	.loc 1 6261 0
	cmpl	$0, 36(%ebp)
	je	.L2450
	movl	$131, -196(%ebp)
	jmp	.L2452
.L2450:
	movl	$130, -196(%ebp)
.L2452:
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-196(%ebp), %edi
	movl	%edi, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -284(%ebp)
	jmp	.L2369
.L2373:
	.loc 1 6268 0
	cmpl	$0, 24(%ebp)
	jne	.L2453
	movl	-120(%ebp), %eax
	orl	-116(%ebp), %eax
	testl	%eax, %eax
	jne	.L2453
	cmpl	$0, 40(%ebp)
	jne	.L2453
	cmpl	$0, 44(%ebp)
	jne	.L2453
	cmpl	$0, -48(%ebp)
	jne	.L2453
	cmpl	$0, 36(%ebp)
	je	.L2453
	.loc 1 6270 0
	movl	$0, -284(%ebp)
	jmp	.L2369
.L2453:
	.loc 1 6277 0
	cmpl	$0, -48(%ebp)
	jne	.L2460
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2460
	cmpl	$0, 24(%ebp)
	jne	.L2463
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-128(%ebp), %esi
	adcl	-124(%ebp), %edi
	movl	%esi, -192(%ebp)
	movl	%edi, -188(%ebp)
	movl	-76(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %edi
	movl	%edi, -184(%ebp)
	movl	$0, -180(%ebp)
	movl	-180(%ebp), %eax
	cmpl	%eax, -188(%ebp)
	ja	.L2465
	movl	-180(%ebp), %edx
	cmpl	%edx, -188(%ebp)
	jb	.L2463
	movl	-184(%ebp), %esi
	cmpl	%esi, -192(%ebp)
	ja	.L2465
.L2463:
	cmpl	$0, 24(%ebp)
	je	.L2460
	movl	-128(%ebp), %eax
	xorl	$1, %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	je	.L2460
.L2465:
	.loc 1 6280 0
	movl	$0, -284(%ebp)
	jmp	.L2369
.L2460:
	.loc 1 6284 0
	cmpl	$0, 40(%ebp)
	je	.L2468
	movl	$-1, 4(%esp)
	movl	$0, (%esp)
	call	mode_for_extraction@PLT
	cmpl	$54, %eax
	je	.L2468
	.loc 1 6286 0
	movl	$0, 4(%esp)
	movl	$0, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -64(%ebp)
	.loc 1 6287 0
	movl	$2, 4(%esp)
	movl	$0, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -60(%ebp)
	.loc 1 6288 0
	movl	$3, 4(%esp)
	movl	$0, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -56(%ebp)
.L2468:
	.loc 1 6291 0
	cmpl	$0, 40(%ebp)
	jne	.L2471
	cmpl	$0, 36(%ebp)
	je	.L2471
	movl	$-1, 4(%esp)
	movl	$2, (%esp)
	call	mode_for_extraction@PLT
	cmpl	$54, %eax
	je	.L2471
	.loc 1 6294 0
	movl	$1, 4(%esp)
	movl	$2, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -64(%ebp)
	.loc 1 6295 0
	movl	$3, 4(%esp)
	movl	$2, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -60(%ebp)
	.loc 1 6296 0
	movl	$0, 4(%esp)
	movl	$2, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -56(%ebp)
.L2471:
	.loc 1 6299 0
	cmpl	$0, 40(%ebp)
	jne	.L2475
	cmpl	$0, 36(%ebp)
	jne	.L2475
	movl	$-1, 4(%esp)
	movl	$1, (%esp)
	call	mode_for_extraction@PLT
	cmpl	$54, %eax
	je	.L2475
	.loc 1 6302 0
	movl	$1, 4(%esp)
	movl	$1, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -64(%ebp)
	.loc 1 6303 0
	movl	$3, 4(%esp)
	movl	$1, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -60(%ebp)
	.loc 1 6304 0
	movl	$0, 4(%esp)
	movl	$1, (%esp)
	call	mode_for_extraction@PLT
	movl	%eax, -56(%ebp)
.L2475:
	.loc 1 6309 0
	cmpl	$0, 8(%ebp)
	je	.L2479
	movl	-56(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2479
	.loc 1 6311 0
	movl	8(%ebp), %eax
	movl	%eax, -56(%ebp)
.L2479:
	.loc 1 6313 0
	cmpl	$0, 24(%ebp)
	je	.L2482
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L2482
	movl	-60(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2482
	.loc 1 6315 0
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -60(%ebp)
.L2482:
	.loc 1 6320 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2486
	.loc 1 6321 0
	movl	-64(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L2488
.L2486:
	.loc 1 6322 0
	movl	-72(%ebp), %eax
	cmpl	-68(%ebp), %eax
	je	.L2488
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	jne	.L2490
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L2488
.L2490:
	.loc 1 6325 0
	movl	-56(%ebp), %eax
	movl	%eax, -68(%ebp)
.L2488:
	.loc 1 6327 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	.loc 1 6354 0
	cmpl	$0, -68(%ebp)
	je	.L2492
	movl	-68(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-76(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2492
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2492
	movl	-72(%ebp), %eax
	cmpl	-68(%ebp), %eax
	je	.L2496
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	jne	.L2492
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L2492
.L2496:
.LBB76:
	.loc 1 6361 0
	movl	$0, -28(%ebp)
	.loc 1 6369 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2499
	cmpl	$0, -48(%ebp)
	jne	.L2499
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-76(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2499
	.loc 1 6372 0
	movl	-76(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %ecx
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%ecx, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	subl	%eax, -28(%ebp)
.L2499:
	.loc 1 6375 0
	cmpl	$0, 24(%ebp)
	jne	.L2503
	.loc 1 6377 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	movl	-308(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -328(%ebp)
	movl	%edx, -324(%ebp)
	movl	-328(%ebp), %esi
	movl	-324(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-312(%ebp), %eax
	adcl	-308(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6378 0
	movl	-68(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	-120(%ebp), %esi
	movl	-116(%ebp), %edi
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
.L2503:
	.loc 1 6381 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2505
	cmpl	$0, -48(%ebp)
	jne	.L2505
	movl	-76(%ebp), %eax
	cmpl	-68(%ebp), %eax
	je	.L2505
	.loc 1 6384 0
	movl	-76(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %ecx
	movl	-68(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	subl	-28(%ebp), %eax
	movl	%eax, -28(%ebp)
.L2505:
	.loc 1 6387 0
	cmpl	$0, -28(%ebp)
	jne	.L2509
	movl	-72(%ebp), %eax
	cmpl	-68(%ebp), %eax
	je	.L2512
.L2509:
	.loc 1 6388 0
	movl	-28(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, 12(%ebp)
	.loc 1 6354 0
	jmp	.L2512
.L2492:
.LBE76:
	.loc 1 6394 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2512
	.loc 1 6396 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-68(%ebp), %eax
	je	.L2514
	cmpl	$0, 24(%ebp)
	jne	.L2516
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-128(%ebp), %esi
	adcl	-124(%ebp), %edi
	movl	%esi, -176(%ebp)
	movl	%edi, -172(%ebp)
	movl	-68(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %edi
	movl	%edi, -168(%ebp)
	movl	$0, -164(%ebp)
	movl	-164(%ebp), %eax
	cmpl	%eax, -172(%ebp)
	jb	.L2514
	movl	-164(%ebp), %edx
	cmpl	%edx, -172(%ebp)
	ja	.L2516
	movl	-168(%ebp), %esi
	cmpl	%esi, -176(%ebp)
	jbe	.L2514
.L2516:
	.loc 1 6399 0
	movl	$0, -284(%ebp)
	jmp	.L2369
.L2514:
	.loc 1 6401 0
	cmpl	$0, 24(%ebp)
	jne	.L2519
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-128(%ebp), %esi
	adcl	-124(%ebp), %edi
	movl	%esi, -152(%ebp)
	movl	%edi, -148(%ebp)
	cmpl	$0, -148(%ebp)
	ja	.L2519
	cmpl	$0, -148(%ebp)
	jb	.L2522
	cmpl	$63, -152(%ebp)
	ja	.L2519
.L2522:
	movl	-128(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2547
	movl	%eax, %edx
	xorl	%eax, %eax
.L2547:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	-104(%ebp), %ecx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2548
	movl	%esi, %edi
	xorl	%esi, %esi
.L2548:
	movl	%esi, -160(%ebp)
	movl	%edi, -156(%ebp)
	jmp	.L2523
.L2519:
	movl	$-1, -160(%ebp)
	movl	$-1, -156(%ebp)
.L2523:
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, 12(%ebp)
.L2512:
	.loc 1 6412 0
	cmpl	$0, 24(%ebp)
	je	.L2524
	movl	-60(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L2524
.LBB77:
	.loc 1 6415 0
	movl	24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$131, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -24(%ebp)
	.loc 1 6421 0
	movl	flag_expensive_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2527
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2527
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	24(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	shrdl	$1, %edx, %eax
	shrl	%edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-144(%ebp), %eax
	andl	%esi, %eax
	movl	-140(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2527
.LBB78:
	.loc 1 6429 0
	movl	24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$130, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -20(%ebp)
	.loc 1 6433 0
	movl	$57, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, %esi
	movl	$57, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	cmpl	%eax, %esi
	jge	.L2527
	.loc 1 6434 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
.L2527:
.LBE78:
	.loc 1 6436 0
	movl	-24(%ebp), %eax
	movl	%eax, 24(%ebp)
	.loc 1 6412 0
	jmp	.L2532
.L2524:
.LBE77:
	.loc 1 6438 0
	cmpl	$0, 24(%ebp)
	je	.L2532
	movl	-60(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2532
	.loc 1 6440 0
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, 24(%ebp)
.L2532:
	.loc 1 6445 0
	cmpl	$0, 24(%ebp)
	jne	.L2535
	cmpl	$0, -40(%ebp)
	je	.L2535
	movl	-40(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	xorl	-116(%ebp), %ecx
	xorl	-120(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2535
	.loc 1 6446 0
	movl	-40(%ebp), %eax
	movl	%eax, 24(%ebp)
	.loc 1 6445 0
	jmp	.L2539
.L2535:
	.loc 1 6448 0
	cmpl	$0, 24(%ebp)
	jne	.L2539
	.loc 1 6449 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 24(%ebp)
.L2539:
	.loc 1 6452 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -136(%ebp)
	cmpl	$0, 36(%ebp)
	je	.L2541
	movl	$143, -132(%ebp)
	jmp	.L2543
.L2541:
	movl	$142, -132(%ebp)
.L2543:
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-136(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-132(%ebp), %esi
	movl	%esi, (%esp)
	call	gen_rtx_fmt_eee@PLT
	movl	%eax, -44(%ebp)
	.loc 1 6454 0
	cmpl	$0, 40(%ebp)
	jne	.L2544
	.loc 1 6455 0
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -44(%ebp)
.L2544:
	.loc 1 6457 0
	movl	-44(%ebp), %edi
	movl	%edi, -284(%ebp)
.L2369:
	movl	-284(%ebp), %eax
	.loc 1 6458 0
	addl	$364, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE37:
	.size	make_extraction, .-make_extraction
	.type	extract_left_shift, @function
extract_left_shift:
.LFB38:
	.loc 1 6467 0
	pushl	%ebp
.LCFI116:
	movl	%esp, %ebp
.LCFI117:
	pushl	%edi
.LCFI118:
	pushl	%esi
.LCFI119:
	pushl	%ebx
.LCFI120:
	subl	$92, %esp
.LCFI121:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6468 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -28(%ebp)
	.loc 1 6469 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
	.loc 1 6472 0
	movl	-28(%ebp), %eax
	subl	$85, %eax
	movl	%eax, -68(%ebp)
	cmpl	$12, -68(%ebp)
	ja	.L2551
	movl	$1, %eax
	movl	%eax, %edx
	movzbl	-68(%ebp), %ecx
	sall	%cl, %edx
	movl	%edx, -72(%ebp)
	movl	-72(%ebp), %eax
	andl	$1793, %eax
	testl	%eax, %eax
	jne	.L2552
	movl	-72(%ebp), %eax
	andl	$2052, %eax
	testl	%eax, %eax
	jne	.L2553
	movl	-72(%ebp), %eax
	andl	$4096, %eax
	testl	%eax, %eax
	jne	.L2554
	jmp	.L2551
.L2554:
	.loc 1 6478 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2551
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -64(%ebp)
	movl	%ecx, -60(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -52(%ebp)
	movl	-52(%ebp), %eax
	cmpl	%eax, -60(%ebp)
	jl	.L2551
	movl	-52(%ebp), %edx
	cmpl	%edx, -60(%ebp)
	jg	.L2558
	movl	-56(%ebp), %ecx
	cmpl	%ecx, -64(%ebp)
	jb	.L2551
.L2558:
	.loc 1 6480 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -44(%ebp)
	jmp	.L2559
.L2553:
	.loc 1 6485 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	extract_left_shift
	movl	%eax, -20(%ebp)
	cmpl	$0, -20(%ebp)
	je	.L2551
	.loc 1 6486 0
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -44(%ebp)
	jmp	.L2559
.L2552:
	.loc 1 6493 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2551
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -40(%ebp)
	movl	%ecx, -36(%ebp)
	movl	12(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2567
	movl	%eax, %edx
	xorl	%eax, %eax
.L2567:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	-40(%ebp), %eax
	andl	%esi, %eax
	movl	-36(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2551
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	extract_left_shift
	movl	%eax, -20(%ebp)
	cmpl	$0, -20(%ebp)
	je	.L2551
	.loc 1 6496 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	12(%ebp), %ecx
	shrdl	%edx, %eax
	sarl	%cl, %edx
	testb	$32, %cl
	je	.L2566
	movl	%edx, %eax
	sarl	$31, %edx
.L2566:
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -44(%ebp)
	jmp	.L2559
.L2551:
	.loc 1 6505 0
	movl	$0, -44(%ebp)
.L2559:
	movl	-44(%ebp), %eax
	.loc 1 6506 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE38:
	.size	extract_left_shift, .-extract_left_shift
	.type	make_compound_operation, @function
make_compound_operation:
.LFB39:
	.loc 1 6530 0
	pushl	%ebp
.LCFI122:
	movl	%esp, %ebp
.LCFI123:
	pushl	%edi
.LCFI124:
	pushl	%esi
.LCFI125:
	pushl	%ebx
.LCFI126:
	subl	$268, %esp
.LCFI127:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6531 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	.loc 1 6532 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	.loc 1 6533 0
	movl	-56(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -52(%ebp)
	.loc 1 6537 0
	movl	$0, -32(%ebp)
	.loc 1 6545 0
	cmpl	$76, -60(%ebp)
	je	.L2569
	cmpl	$85, -60(%ebp)
	je	.L2569
	cmpl	$86, -60(%ebp)
	je	.L2569
	cmpl	$84, -60(%ebp)
	je	.L2573
	movl	-60(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	jne	.L2575
.L2573:
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	je	.L2576
.L2575:
	cmpl	$84, 12(%ebp)
	je	.L2577
	movl	12(%ebp), %eax
	movl	%eax, -212(%ebp)
	jmp	.L2579
.L2577:
	movl	$57, -212(%ebp)
.L2579:
	movl	-212(%ebp), %edx
	movl	%edx, -216(%ebp)
	jmp	.L2580
.L2576:
	movl	$84, -216(%ebp)
.L2580:
	movl	-216(%ebp), %ecx
	movl	%ecx, -220(%ebp)
	jmp	.L2581
.L2569:
	movl	$76, -220(%ebp)
.L2581:
	movl	-220(%ebp), %esi
	movl	%esi, -40(%ebp)
	.loc 1 6553 0
	movl	-60(%ebp), %edi
	subl	$73, %edi
	movl	%edi, -224(%ebp)
	cmpl	$27, -224(%ebp)
	ja	.L2582
	movl	-224(%ebp), %eax
	sall	$2, %eax
	movl	.L2588@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2588:
	.long	.L2583@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2584@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2585@GOTOFF
	.long	.L2582@GOTOFF
	.long	.L2586@GOTOFF
	.long	.L2587@GOTOFF
	.text
.L2585:
	.loc 1 6558 0
	cmpl	$76, 12(%ebp)
	jne	.L2582
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2582
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -208(%ebp)
	movl	%ecx, -204(%ebp)
	cmpl	$0, -204(%ebp)
	jg	.L2582
	cmpl	$0, -204(%ebp)
	js	.L2593
	cmpl	$63, -208(%ebp)
	ja	.L2582
.L2593:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2582
	.loc 1 6562 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6563 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2675
	movl	%eax, %edx
	xorl	%eax, %eax
.L2675:
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -32(%ebp)
	.loc 1 6567 0
	jmp	.L2582
.L2584:
	.loc 1 6572 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2582
	.loc 1 6577 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2596
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	js	.L2596
	.loc 1 6580 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6581 0
	cmpl	$84, 12(%ebp)
	sete	%al
	movzbl	%al, %esi
	movl	-36(%ebp), %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%esi, 36(%esp)
	movl	$0, 32(%esp)
	movl	$1, 28(%esp)
	movl	%edx, 20(%esp)
	movl	%ecx, 24(%esp)
	movl	%eax, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	.loc 1 6577 0
	jmp	.L2582
.L2596:
	.loc 1 6586 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2600
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2600
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2600
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	js	.L2600
	.loc 1 6591 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6593 0
	cmpl	$84, 12(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -196(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edi
	movl	-196(%ebp), %eax
	movl	%eax, 36(%esp)
	movl	$0, 32(%esp)
	movl	$1, 28(%esp)
	movl	%edx, 20(%esp)
	movl	%ecx, 24(%esp)
	movl	%esi, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edi, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	.loc 1 6586 0
	jmp	.L2582
.L2600:
	.loc 1 6598 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	je	.L2605
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L2607
.L2605:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2607
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2607
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	js	.L2607
	.loc 1 6605 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %esi
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	%esi, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -32(%ebp)
	.loc 1 6610 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6598 0
	jmp	.L2582
.L2607:
	.loc 1 6616 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$98, %ax
	jne	.L2611
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2611
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	js	.L2611
	movl	-36(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -188(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -184(%ebp)
	movl	%edi, -180(%ebp)
	movl	-180(%ebp), %edi
	cmpl	%edi, -188(%ebp)
	jg	.L2611
	movl	-180(%ebp), %eax
	cmpl	%eax, -188(%ebp)
	jl	.L2616
	movl	-184(%ebp), %edx
	cmpl	%edx, -192(%ebp)
	ja	.L2611
.L2616:
	.loc 1 6621 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6622 0
	cmpl	$84, 12(%ebp)
	sete	%al
	movzbl	%al, %ecx
	movl	-36(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	%eax, %esi
	sarl	$31, %esi
	movl	%esi, -172(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %esi
	movl	$0, %edi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -240(%ebp)
	movl	-240(%ebp), %edx
	movl	4(%edx), %eax
	movl	8(%edx), %edx
	movl	%eax, -240(%ebp)
	movl	%edx, -236(%ebp)
	movl	%esi, %eax
	movl	%edi, %edx
	subl	-240(%ebp), %eax
	sbbl	-236(%ebp), %edx
	movl	%eax, -240(%ebp)
	movl	%edx, -236(%ebp)
	movl	%ecx, 36(%esp)
	movl	$0, 32(%esp)
	movl	$1, 28(%esp)
	movl	-176(%ebp), %edx
	movl	-172(%ebp), %ecx
	movl	%edx, 20(%esp)
	movl	%ecx, 24(%esp)
	movl	$0, 16(%esp)
	movl	-240(%ebp), %esi
	movl	-236(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	.loc 1 6616 0
	jmp	.L2582
.L2611:
	.loc 1 6631 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2617
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	jne	.L2617
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$99, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	je	.L2617
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2617
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2617
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -168(%ebp)
	movl	%ecx, -164(%ebp)
	cmpl	$0, -164(%ebp)
	jg	.L2617
	cmpl	$0, -164(%ebp)
	js	.L2624
	cmpl	$63, -168(%ebp)
	ja	.L2617
.L2624:
	cmpl	$64, -52(%ebp)
	jg	.L2617
.LBB79:
	.loc 1 6639 0
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 6641 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2674
	movl	%edx, %eax
	xorl	%edx, %edx
.L2674:
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 6642 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-160(%ebp), %eax
	andl	%esi, %eax
	movl	-156(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2582
	.loc 1 6643 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$99, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 6631 0
	jmp	.L2582
.L2617:
.LBE79:
	.loc 1 6654 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	js	.L2628
	.loc 1 6655 0
	cmpl	$84, 12(%ebp)
	sete	%al
	movzbl	%al, %esi
	movl	-36(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -148(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%esi, 36(%esp)
	movl	$0, 32(%esp)
	movl	$1, 28(%esp)
	movl	-152(%ebp), %esi
	movl	-148(%ebp), %edi
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	$0, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	jmp	.L2582
.L2628:
	.loc 1 6662 0
	cmpl	$84, 12(%ebp)
	jne	.L2582
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	js	.L2582
	.loc 1 6664 0
	movl	-36(%ebp), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	$1, 36(%esp)
	movl	$0, 32(%esp)
	movl	$1, 28(%esp)
	movl	$1, 20(%esp)
	movl	$0, 24(%esp)
	movl	$0, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	.loc 1 6669 0
	jmp	.L2582
.L2587:
	.loc 1 6674 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$99, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	je	.L2586
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	jne	.L2586
	cmpl	$64, -52(%ebp)
	jg	.L2586
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	movl	-52(%ebp), %ecx
	subl	$1, %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	-144(%ebp), %eax
	andl	%esi, %eax
	movl	-140(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2586
	.loc 1 6679 0
	movl	8(%ebp), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$99, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -32(%ebp)
	.loc 1 6683 0
	jmp	.L2582
.L2586:
	.loc 1 6689 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 6690 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 6694 0
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2636
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L2636
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2636
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -136(%ebp)
	movl	%ecx, -132(%ebp)
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -128(%ebp)
	movl	%edi, -124(%ebp)
	movl	-124(%ebp), %edi
	cmpl	%edi, -132(%ebp)
	jl	.L2636
	movl	-124(%ebp), %eax
	cmpl	%eax, -132(%ebp)
	jg	.L2641
	movl	-128(%ebp), %edx
	cmpl	%edx, -136(%ebp)
	jb	.L2636
.L2641:
	.loc 1 6699 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6700 0
	cmpl	$84, 12(%ebp)
	sete	%al
	movzbl	%al, %ecx
	cmpl	$100, -60(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -116(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	%eax, %esi
	sarl	$31, %esi
	movl	%esi, -228(%ebp)
	movl	-48(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-232(%ebp), %esi
	movl	-228(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, -112(%ebp)
	movl	%edx, -108(%ebp)
	movl	-48(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -232(%ebp)
	movl	%edi, -228(%ebp)
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-232(%ebp), %esi
	movl	-228(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%ecx, 36(%esp)
	movl	$0, 32(%esp)
	movl	-116(%ebp), %edi
	movl	%edi, 28(%esp)
	movl	-112(%ebp), %esi
	movl	-108(%ebp), %edi
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	.loc 1 6704 0
	jmp	.L2582
.L2636:
	.loc 1 6712 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L2582
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2644
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L2582
.L2644:
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2582
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -104(%ebp)
	movl	%ecx, -100(%ebp)
	cmpl	$0, -100(%ebp)
	jg	.L2582
	cmpl	$0, -100(%ebp)
	js	.L2648
	cmpl	$63, -104(%ebp)
	ja	.L2582
.L2648:
	movl	-48(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_left_shift
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L2582
	.loc 1 6718 0
	cmpl	$84, 12(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -92(%ebp)
	cmpl	$100, -60(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -88(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -228(%ebp)
	movl	-48(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-232(%ebp), %esi
	movl	-228(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	-92(%ebp), %edx
	movl	%edx, 36(%esp)
	movl	$0, 32(%esp)
	movl	-88(%ebp), %ecx
	movl	%ecx, 28(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	$0, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	make_extraction
	movl	%eax, -32(%ebp)
	.loc 1 6722 0
	jmp	.L2582
.L2583:
	.loc 1 6729 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -28(%ebp)
	.loc 1 6730 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	%ax, %dx
	je	.L2650
	movl	-56(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2650
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2650
.LBB80:
	.loc 1 6735 0
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$-1, 8(%esp)
	movl	$-1, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -20(%ebp)
	.loc 1 6739 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L2654
	.loc 1 6740 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -20(%ebp)
.L2654:
	.loc 1 6742 0
	movl	-20(%ebp), %esi
	movl	%esi, -84(%ebp)
	jmp	.L2656
.L2650:
.LBE80:
	.loc 1 6749 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$130, %ax
	je	.L2657
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$131, %ax
	jne	.L2582
.L2657:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2582
	.loc 1 6753 0
	movl	-56(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L2660
	movl	-56(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L2662
.L2660:
	.loc 1 6757 0
	movl	-56(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	je	.L2663
	movl	-56(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	jne	.L2582
.L2663:
	.loc 1 6759 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %ecx
	movl	%edx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -28(%ebp)
	.loc 1 6753 0
	jmp	.L2665
.L2662:
	.loc 1 6762 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -28(%ebp)
.L2665:
	.loc 1 6763 0
	movl	-28(%ebp), %edi
	movl	%edi, -84(%ebp)
	jmp	.L2656
.L2582:
	.loc 1 6771 0
	cmpl	$0, -32(%ebp)
	je	.L2666
	.loc 1 6773 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, 8(%ebp)
	.loc 1 6774 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
.L2666:
	.loc 1 6778 0
	movl	-60(%ebp), %eax
	movl	rtx_format@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -24(%ebp)
	.loc 1 6779 0
	movl	$0, -36(%ebp)
	jmp	.L2668
.L2669:
	.loc 1 6780 0
	movl	-36(%ebp), %eax
	addl	-24(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L2670
	.loc 1 6782 0
	movl	-36(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 6783 0
	movl	-36(%ebp), %eax
	sall	$3, %eax
	addl	8(%ebp), %eax
	leal	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L2670:
	.loc 1 6779 0
	addl	$1, -36(%ebp)
.L2668:
	movl	-60(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-36(%ebp), %eax
	jg	.L2669
	.loc 1 6786 0
	movl	8(%ebp), %eax
	movl	%eax, -84(%ebp)
.L2656:
	movl	-84(%ebp), %eax
	.loc 1 6787 0
	addl	$268, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE39:
	.size	make_compound_operation, .-make_compound_operation
	.type	get_pos_from_mask, @function
get_pos_from_mask:
.LFB40:
	.loc 1 6800 0
	pushl	%ebp
.LCFI128:
	movl	%esp, %ebp
.LCFI129:
	pushl	%edi
.LCFI130:
	pushl	%esi
.LCFI131:
	pushl	%ebx
.LCFI132:
	subl	$44, %esp
.LCFI133:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 6802 0
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	%esi, %eax
	andl	-40(%ebp), %eax
	movl	%edi, %edx
	andl	-36(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -24(%ebp)
	.loc 1 6805 0
	cmpl	$0, -24(%ebp)
	jns	.L2677
	.loc 1 6806 0
	movl	$-1, -44(%ebp)
	jmp	.L2679
.L2677:
	.loc 1 6810 0
	movl	-24(%ebp), %ecx
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2683
	movl	%edx, %eax
	xorl	%edx, %edx
.L2683:
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -20(%ebp)
	.loc 1 6812 0
	cmpl	$0, -20(%ebp)
	jg	.L2680
	.loc 1 6813 0
	movl	$-1, -44(%ebp)
	jmp	.L2679
.L2680:
	.loc 1 6815 0
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	16(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	.loc 1 6816 0
	movl	-24(%ebp), %eax
	movl	%eax, -44(%ebp)
.L2679:
	movl	-44(%ebp), %eax
	.loc 1 6817 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE40:
	.size	get_pos_from_mask, .-get_pos_from_mask
	.type	force_to_mode, @function
force_to_mode:
.LFB41:
	.loc 1 6842 0
	pushl	%ebp
.LCFI134:
	movl	%esp, %ebp
.LCFI135:
	pushl	%edi
.LCFI136:
	pushl	%esi
.LCFI137:
	pushl	%ebx
.LCFI138:
	subl	$460, %esp
.LCFI139:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	16(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -116(%ebp)
	.loc 1 6843 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	.loc 1 6844 0
	cmpl	$0, 28(%ebp)
	jne	.L2685
	cmpl	$95, -60(%ebp)
	je	.L2685
	cmpl	$96, -60(%ebp)
	je	.L2685
	cmpl	$87, -60(%ebp)
	jne	.L2689
.L2685:
	movl	$1, -420(%ebp)
	jmp	.L2690
.L2689:
	movl	$0, -420(%ebp)
.L2690:
	movl	-420(%ebp), %eax
	movl	%eax, -56(%ebp)
	.loc 1 6855 0
	cmpl	$60, -60(%ebp)
	je	.L2691
	cmpl	$51, -60(%ebp)
	je	.L2691
	cmpl	$59, -60(%ebp)
	jne	.L2694
.L2691:
	.loc 1 6856 0
	movl	8(%ebp), %edx
	movl	%edx, -416(%ebp)
	jmp	.L2695
.L2694:
	.loc 1 6861 0
	movl	12(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	%eax, %ecx
	jne	.L2696
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	jne	.L2698
.L2696:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -412(%ebp)
	jmp	.L2699
.L2698:
	movl	12(%ebp), %ecx
	movl	%ecx, -412(%ebp)
.L2699:
	movl	-412(%ebp), %esi
	movl	%esi, -52(%ebp)
	.loc 1 6867 0
	cmpl	$100, -60(%ebp)
	je	.L2700
	cmpl	$99, -60(%ebp)
	jne	.L2702
.L2700:
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jae	.L2702
	.loc 1 6869 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
.L2702:
	.loc 1 6872 0
	cmpl	$0, -52(%ebp)
	je	.L2704
	.loc 1 6873 0
	movl	-52(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-120(%ebp), %eax
	andl	%esi, %eax
	movl	-116(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
.L2704:
	.loc 1 6878 0
	cmpl	$0, -52(%ebp)
	je	.L2706
	.loc 1 6879 0
	movl	-52(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$63, %ax
	jbe	.L2708
	movl	-52(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -408(%ebp)
	movl	%edi, -404(%ebp)
	jmp	.L2710
.L2708:
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	leal	1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2910
	movl	%eax, %edx
	xorl	%eax, %eax
.L2910:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	%esi, -408(%ebp)
	movl	%edi, -404(%ebp)
.L2710:
	movl	-408(%ebp), %eax
	movl	-404(%ebp), %edx
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	jmp	.L2711
.L2706:
	.loc 1 6884 0
	movl	$-1, -104(%ebp)
	movl	$-1, -100(%ebp)
.L2711:
	.loc 1 6887 0
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	.loc 1 6890 0
	cmpl	$0, 28(%ebp)
	jne	.L2712
	movl	-120(%ebp), %ecx
	movl	-116(%ebp), %esi
	movl	-96(%ebp), %eax
	andl	%ecx, %eax
	movl	-92(%ebp), %edx
	andl	%esi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2712
	.loc 1 6891 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 8(%ebp)
.L2712:
	.loc 1 6895 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2715
	.loc 1 6897 0
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	je	.L2717
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	jne	.L2719
.L2717:
	.loc 1 6898 0
	movl	8(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2719:
	.loc 1 6901 0
	movl	8(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 8(%ebp)
	.loc 1 6902 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2715:
	.loc 1 6908 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L2720
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -400(%ebp)
	movl	%edi, -396(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-400(%ebp), %eax
	andl	%esi, %eax
	movl	-396(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2720
	.loc 1 6910 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2720:
	.loc 1 6914 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	12(%ebp), %eax
	jne	.L2723
	cmpl	$73, -60(%ebp)
	je	.L2723
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	-96(%ebp), %eax
	movl	%edi, %edx
	andl	-92(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2723
	.loc 1 6915 0
	movl	8(%ebp), %edi
	movl	%edi, -416(%ebp)
	jmp	.L2695
.L2723:
	.loc 1 6917 0
	movl	-60(%ebp), %eax
	subl	$58, %eax
	movl	%eax, -424(%ebp)
	cmpl	$85, -424(%ebp)
	ja	.L2727
	movl	-424(%ebp), %eax
	sall	$2, %eax
	movl	.L2746@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2746:
	.long	.L2728@GOTOFF
	.long	.L2729@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2730@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2731@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2732@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2733@GOTOFF
	.long	.L2734@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2736@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2737@GOTOFF
	.long	.L2738@GOTOFF
	.long	.L2738@GOTOFF
	.long	.L2739@GOTOFF
	.long	.L2740@GOTOFF
	.long	.L2741@GOTOFF
	.long	.L2742@GOTOFF
	.long	.L2743@GOTOFF
	.long	.L2741@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2744@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2745@GOTOFF
	.long	.L2745@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2745@GOTOFF
	.long	.L2745@GOTOFF
	.text
.L2729:
	.loc 1 6922 0
	movl	8(%ebp), %edx
	movl	%edx, -416(%ebp)
	jmp	.L2695
.L2728:
	.loc 1 6928 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2727
	.loc 1 6930 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2745:
	.loc 1 6937 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, 8(%ebp)
	.loc 1 6938 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	cmpl	-60(%ebp), %eax
	je	.L2727
	.loc 1 6939 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2730:
	.loc 1 6943 0
	cmpl	$0, 24(%ebp)
	je	.L2727
	movl	24(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2753
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, 4(%esp)
	movl	24(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2727
.L2753:
	.loc 1 6945 0
	movl	24(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 6946 0
	jmp	.L2727
.L2731:
	.loc 1 6949 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L2727
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jb	.L2757
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	-120(%ebp), %ecx
	andl	%eax, %ecx
	movl	%ecx, -392(%ebp)
	movl	-116(%ebp), %esi
	andl	%edx, %esi
	movl	%esi, -388(%ebp)
	movl	-392(%ebp), %eax
	movl	-388(%ebp), %edx
	movl	%eax, -392(%ebp)
	movl	%edx, -388(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-392(%ebp), %eax
	andl	%esi, %eax
	movl	-388(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2727
.L2757:
	.loc 1 6958 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2737:
	.loc 1 6966 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2775
	.loc 1 6968 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	movl	8(%ebp), %ecx
	movl	4(%ecx), %ecx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_and_const_int
	movl	%eax, 8(%ebp)
	.loc 1 6975 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2761
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2761
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -384(%ebp)
	movl	%edx, -380(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-384(%ebp), %eax
	andl	%esi, %eax
	movl	-380(%ebp), %edx
	andl	%edi, %edx
	movl	%edx, %ecx
	xorl	-116(%ebp), %ecx
	xorl	-120(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2761
	.loc 1 6978 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L2761:
	.loc 1 6985 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L2727
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2727
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%edx, %ecx
	xorl	-116(%ebp), %ecx
	xorl	-120(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L2727
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2727
.LBB81:
	.loc 1 6990 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -376(%ebp)
	movl	%edx, -372(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -368(%ebp)
	movl	%edi, -364(%ebp)
	movl	-120(%ebp), %ecx
	movl	-116(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	-368(%ebp), %esi
	andl	%eax, %esi
	movl	-364(%ebp), %edi
	andl	%edx, %edi
	movl	-376(%ebp), %eax
	orl	%esi, %eax
	movl	-372(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	.loc 1 6991 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 6996 0
	cmpl	$0, -36(%ebp)
	jle	.L2770
	cmpl	$63, -36(%ebp)
	jg	.L2770
	movl	-36(%ebp), %ecx
	subl	$1, %ecx
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	shrdl	%edx, %eax
	sarl	%cl, %edx
	testb	$32, %cl
	je	.L2909
	movl	%edx, %eax
	sarl	$31, %edx
.L2909:
	andl	$1, %eax
	testb	%al, %al
	je	.L2770
	.loc 1 6998 0
	movl	-36(%ebp), %ecx
	movl	$-1, %eax
	movl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L2908
	movl	%esi, %edi
	xorl	%esi, %esi
.L2908:
	movl	-88(%ebp), %eax
	orl	%esi, %eax
	movl	-84(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
.L2770:
	.loc 1 7000 0
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -32(%ebp)
	.loc 1 7001 0
	movl	$57, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	movl	%eax, %esi
	movl	$57, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_cost@PLT
	cmpl	%eax, %esi
	jge	.L2727
	.loc 1 7002 0
	movl	-32(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 7005 0
	jmp	.L2727
.L2733:
.LBE81:
.LBB82:
	.loc 1 7017 0
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -28(%ebp)
	.loc 1 7018 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	.loc 1 7023 0
	cmpl	$63, -28(%ebp)
	ja	.L2776
	movl	-28(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2907
	movl	%eax, %edx
	xorl	%eax, %eax
.L2907:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-80(%ebp), %eax
	movl	%edi, %edx
	andl	-76(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L2776
	.loc 1 7025 0
	movl	-28(%ebp), %ecx
	movl	$-1, %eax
	movl	$-1, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2906
	movl	%eax, %edx
	xorl	%eax, %eax
.L2906:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-80(%ebp), %eax
	orl	%esi, %eax
	movl	-76(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
.L2776:
	.loc 1 7027 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2736
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L2736
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -360(%ebp)
	movl	%edx, -356(%ebp)
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-360(%ebp), %eax
	andl	%esi, %eax
	movl	-356(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2736
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -352(%ebp)
	movl	%edx, -348(%ebp)
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-352(%ebp), %eax
	andl	%esi, %eax
	movl	-348(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L2736
	.loc 1 7031 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-80(%ebp), %eax
	movl	%edi, %edx
	andl	-76(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2736:
.LBE82:
	.loc 1 7042 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 7043 0
	jmp	.L2775
.L2734:
	.loc 1 7048 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2783
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -344(%ebp)
	movl	%ecx, -340(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	-344(%ebp), %eax
	andl	%esi, %eax
	movl	-340(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -336(%ebp)
	movl	%edx, -332(%ebp)
	movl	-332(%ebp), %ecx
	cmpl	-116(%ebp), %ecx
	jb	.L2783
	movl	-332(%ebp), %esi
	cmpl	-116(%ebp), %esi
	ja	.L2786
	movl	-336(%ebp), %edi
	cmpl	-120(%ebp), %edi
	jbe	.L2783
.L2786:
	.loc 1 7053 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
	.loc 1 7055 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2783:
	.loc 1 7060 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2787
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -328(%ebp)
	movl	%ecx, -324(%ebp)
	movl	-104(%ebp), %esi
	movl	-100(%ebp), %edi
	movl	-328(%ebp), %eax
	orl	%esi, %eax
	movl	-324(%ebp), %edx
	orl	%edi, %edx
	movl	8(%ebp), %ecx
	movl	4(%ecx), %ecx
	movl	4(%ecx), %esi
	movl	8(%ecx), %edi
	movl	%edx, %ecx
	xorl	%edi, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2787
	.loc 1 7064 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
	.loc 1 7066 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2787:
	.loc 1 7069 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 7070 0
	jmp	.L2775
.L2738:
	.loc 1 7079 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2775
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2775
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2775
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -320(%ebp)
	movl	%edi, -316(%ebp)
	cmpl	$0, -316(%ebp)
	jg	.L2775
	cmpl	$0, -316(%ebp)
	js	.L2794
	cmpl	$63, -320(%ebp)
	ja	.L2775
.L2794:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2775
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -432(%ebp)
	movl	%ecx, -428(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	-432(%ebp), %esi
	movl	-428(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -312(%ebp)
	movl	%edi, -308(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %edi
	movl	%edi, -304(%ebp)
	movl	$0, -300(%ebp)
	movl	-300(%ebp), %eax
	cmpl	%eax, -308(%ebp)
	jg	.L2775
	movl	-300(%ebp), %edx
	cmpl	%edx, -308(%ebp)
	jl	.L2797
	movl	-304(%ebp), %ecx
	cmpl	%ecx, -312(%ebp)
	jae	.L2775
.L2797:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -296(%ebp)
	movl	%edx, -292(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-296(%ebp), %eax
	andl	%esi, %eax
	movl	-292(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2775
	.loc 1 7090 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	movl	8(%ebp), %ecx
	movl	4(%ecx), %ecx
	movl	12(%ecx), %ecx
	movl	4(%ecx), %esi
	movl	8(%ecx), %edi
	movl	%esi, %ecx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2905
	movl	%eax, %edx
	xorl	%eax, %eax
.L2905:
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -40(%ebp)
	.loc 1 7092 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, (%esp)
	call	gen_binary
	movl	%eax, -40(%ebp)
	.loc 1 7094 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$100, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 7096 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2775:
	.loc 1 7103 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -48(%ebp)
	.loc 1 7106 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -44(%ebp)
	.loc 1 7110 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-52(%ebp), %eax
	jne	.L2799
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-48(%ebp), %eax
	jne	.L2799
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-44(%ebp), %eax
	je	.L2727
.L2799:
	.loc 1 7111 0
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 7112 0
	jmp	.L2727
.L2740:
	.loc 1 7121 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2803
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2803
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -288(%ebp)
	movl	%edi, -284(%ebp)
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -280(%ebp)
	movl	-280(%ebp), %edi
	movl	%edi, -280(%ebp)
	movl	$0, -276(%ebp)
	movl	-276(%ebp), %eax
	cmpl	%eax, -284(%ebp)
	jl	.L2806
	movl	-276(%ebp), %edx
	cmpl	%edx, -284(%ebp)
	jg	.L2803
	movl	-280(%ebp), %ecx
	cmpl	%ecx, -288(%ebp)
	jb	.L2806
.L2803:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L2727
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -272(%ebp)
	movl	%edx, -268(%ebp)
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %esi
	movl	%esi, -264(%ebp)
	movl	$0, -260(%ebp)
	movl	-260(%ebp), %edi
	cmpl	%edi, -268(%ebp)
	ja	.L2727
	movl	-260(%ebp), %eax
	cmpl	%eax, -268(%ebp)
	jb	.L2806
	movl	-264(%ebp), %edx
	cmpl	%edx, -272(%ebp)
	jae	.L2727
.L2806:
	.loc 1 7132 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2810
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2810
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -256(%ebp)
	movl	%edi, -252(%ebp)
	movl	-52(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %edi
	movl	%edi, -248(%ebp)
	movl	$0, -244(%ebp)
	movl	-244(%ebp), %eax
	cmpl	%eax, -252(%ebp)
	jg	.L2810
	movl	-244(%ebp), %edx
	cmpl	%edx, -252(%ebp)
	jl	.L2814
	movl	-248(%ebp), %ecx
	cmpl	%ecx, -256(%ebp)
	jae	.L2810
.L2814:
	movl	-52(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2810
	.loc 1 7136 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2904
	movl	%edx, %eax
	xorl	%edx, %edx
.L2904:
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 7132 0
	jmp	.L2816
.L2810:
	.loc 1 7138 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
.L2816:
	.loc 1 7140 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -48(%ebp)
	.loc 1 7144 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-52(%ebp), %eax
	jne	.L2817
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-48(%ebp), %eax
	je	.L2727
.L2817:
	.loc 1 7145 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 7146 0
	jmp	.L2727
.L2743:
	.loc 1 7153 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2820
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -240(%ebp)
	movl	%edi, -236(%ebp)
	cmpl	$0, -236(%ebp)
	jg	.L2820
	cmpl	$0, -236(%ebp)
	js	.L2823
	cmpl	$63, -240(%ebp)
	ja	.L2820
.L2823:
	movl	-52(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2820
.LBB83:
	.loc 1 7157 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7161 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2903
	movl	%eax, %edx
	xorl	%eax, %eax
.L2903:
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 7166 0
	movl	-52(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2825
	movl	-52(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	-72(%ebp), %eax
	movl	%edi, %edx
	andl	-68(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L2827
.L2825:
	.loc 1 7168 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
.L2827:
	.loc 1 7170 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -24(%ebp)
	.loc 1 7172 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-52(%ebp), %eax
	jne	.L2828
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-24(%ebp), %eax
	je	.L2820
.L2828:
	.loc 1 7173 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L2820:
.LBE83:
	.loc 1 7180 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2839
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2839
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -432(%ebp)
	movl	%ecx, -428(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	$0, %edx
	movl	-432(%ebp), %esi
	movl	-428(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -232(%ebp)
	movl	%edi, -228(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %edi
	movl	%edi, -224(%ebp)
	movl	$0, -220(%ebp)
	movl	-220(%ebp), %eax
	cmpl	%eax, -228(%ebp)
	jl	.L2839
	movl	-220(%ebp), %edx
	cmpl	%edx, -228(%ebp)
	jg	.L2834
	movl	-224(%ebp), %ecx
	cmpl	%ecx, -232(%ebp)
	jb	.L2839
.L2834:
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L2839
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -432(%ebp)
	movl	%edi, -428(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	-432(%ebp), %esi
	movl	-428(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -216(%ebp)
	movl	%edi, -212(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %edi
	movl	%edi, -208(%ebp)
	movl	$0, -204(%ebp)
	movl	-204(%ebp), %eax
	cmpl	%eax, -212(%ebp)
	jg	.L2839
	movl	-204(%ebp), %edx
	cmpl	%edx, -212(%ebp)
	jl	.L2837
	movl	-208(%ebp), %ecx
	cmpl	%ecx, -216(%ebp)
	ja	.L2839
.L2837:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %esi
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	cmpl	%eax, %esi
	jl	.L2839
	.loc 1 7195 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %esi
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%esi, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 7199 0
	jmp	.L2839
.L2742:
	.loc 1 7204 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L2840
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2902
	movl	%eax, %edx
	xorl	%eax, %eax
.L2902:
	movl	%edx, %ecx
	xorl	-116(%ebp), %ecx
	xorl	-120(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2840
	.loc 1 7207 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2840:
	.loc 1 7216 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2843
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2843
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -200(%ebp)
	movl	%ecx, -196(%ebp)
	cmpl	$0, -196(%ebp)
	jg	.L2843
	cmpl	$0, -196(%ebp)
	js	.L2847
	cmpl	$63, -200(%ebp)
	ja	.L2843
.L2847:
.LBB84:
	.loc 1 7219 0
	movl	$-1, -20(%ebp)
	.loc 1 7225 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	jbe	.L2848
	.loc 1 7227 0
	movl	$-1, -96(%ebp)
	movl	$-1, -92(%ebp)
	.loc 1 7234 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %esi
	movl	$0, %edi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -440(%ebp)
	movl	%ecx, -436(%ebp)
	movl	%esi, %eax
	movl	%edi, %edx
	subl	-440(%ebp), %eax
	sbbl	-436(%ebp), %edx
	movl	%eax, -192(%ebp)
	movl	%edx, -188(%ebp)
	cmpl	$0, -188(%ebp)
	jg	.L2853
	cmpl	$0, -188(%ebp)
	js	.L2852
	cmpl	$63, -192(%ebp)
	ja	.L2853
.L2852:
	.loc 1 7236 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	addl	$64, %eax
	movl	%eax, %ecx
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2901
	movl	%edx, %eax
	xorl	%edx, %edx
.L2901:
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	jmp	.L2853
.L2848:
	.loc 1 7242 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	.loc 1 7243 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L2900
	movl	%edx, %eax
	xorl	%edx, %edx
.L2900:
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
.L2853:
	.loc 1 7246 0
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L2854
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -20(%ebp)
	cmpl	$0, -20(%ebp)
	js	.L2843
.L2854:
	.loc 1 7249 0
	cmpl	$0, -20(%ebp)
	jns	.L2856
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -180(%ebp)
	jmp	.L2858
.L2856:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-20(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -180(%ebp)
.L2858:
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-180(%ebp), %ecx
	movl	%ecx, 16(%esp)
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$100, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_shift_const
	movl	%eax, 8(%ebp)
	.loc 1 7254 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	je	.L2843
	.loc 1 7255 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2843:
.LBE84:
	.loc 1 7261 0
	movl	-120(%ebp), %eax
	xorl	$1, %eax
	orl	-116(%ebp), %eax
	testl	%eax, %eax
	jne	.L2839
	.loc 1 7262 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L2839:
	.loc 1 7270 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L2861
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L2727
.L2861:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2727
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2727
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -176(%ebp)
	movl	%edi, -172(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %esi
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%esi, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	subl	$1, %eax
	movl	%eax, -168(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -164(%ebp)
	movl	-164(%ebp), %ecx
	cmpl	%ecx, -172(%ebp)
	jg	.L2727
	movl	-164(%ebp), %esi
	cmpl	%esi, -172(%ebp)
	jl	.L2867
	movl	-168(%ebp), %edi
	cmpl	%edi, -176(%ebp)
	ja	.L2727
.L2867:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L2727
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2727
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2727
	.loc 1 7278 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2741:
	.loc 1 7289 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2727
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2727
	.loc 1 7292 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -160(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -156(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -152(%ebp)
	cmpl	$98, -60(%ebp)
	jne	.L2874
	movl	$101, -148(%ebp)
	jmp	.L2876
.L2874:
	movl	$98, -148(%ebp)
.L2876:
	movl	-160(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-156(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	-152(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	-148(%ebp), %esi
	movl	%esi, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -40(%ebp)
	.loc 1 7295 0
	cmpl	$0, -40(%ebp)
	je	.L2727
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2727
	.loc 1 7296 0
	movl	-40(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %edi
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, (%esp)
	call	force_to_mode
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 7300 0
	jmp	.L2727
.L2735:
	.loc 1 7305 0
	movl	-120(%ebp), %eax
	xorl	$1, %eax
	orl	-116(%ebp), %eax
	testl	%eax, %eax
	jne	.L2879
	.loc 1 7306 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	28(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2879:
	.loc 1 7311 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 7312 0
	jmp	.L2881
.L2739:
	.loc 1 7319 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L2882
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2882
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L2882
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -432(%ebp)
	movl	%ecx, -428(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	-432(%ebp), %esi
	movl	-428(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -144(%ebp)
	movl	%edi, -140(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %edi
	movl	%edi, -136(%ebp)
	movl	$0, -132(%ebp)
	movl	-132(%ebp), %eax
	cmpl	%eax, -140(%ebp)
	jg	.L2882
	movl	-132(%ebp), %edx
	cmpl	%edx, -140(%ebp)
	jl	.L2887
	movl	-136(%ebp), %ecx
	cmpl	%ecx, -144(%ebp)
	jae	.L2882
.L2887:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -128(%ebp)
	movl	%edi, -124(%ebp)
	cmpl	$0, -124(%ebp)
	jg	.L2882
	cmpl	$0, -124(%ebp)
	js	.L2889
	cmpl	$63, -128(%ebp)
	ja	.L2882
.L2889:
	.loc 1 7326 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2899
	movl	%eax, %edx
	xorl	%eax, %eax
.L2899:
	movl	%esi, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -40(%ebp)
	.loc 1 7328 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$95, (%esp)
	call	gen_binary
	movl	%eax, -40(%ebp)
	.loc 1 7329 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$100, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 7331 0
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2882:
	.loc 1 7336 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
.L2881:
	.loc 1 7339 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -48(%ebp)
	.loc 1 7342 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-52(%ebp), %eax
	jne	.L2890
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-48(%ebp), %eax
	je	.L2727
.L2890:
	.loc 1 7343 0
	movl	-52(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
	.loc 1 7344 0
	jmp	.L2727
.L2744:
	.loc 1 7350 0
	movl	-120(%ebp), %eax
	andl	$-2, %eax
	movl	-116(%ebp), %edx
	andb	$255, %dh
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2727
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2727
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L2727
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2727
	.loc 1 7353 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, -416(%ebp)
	jmp	.L2695
.L2732:
	.loc 1 7361 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 7365 0
	movl	8(%ebp), %eax
	movl	20(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	force_to_mode
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	8(%ebp), %edx
	addl	$20, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L2727:
	.loc 1 7376 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -416(%ebp)
.L2695:
	movl	-416(%ebp), %eax
	.loc 1 7377 0
	addl	$460, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE41:
	.size	force_to_mode, .-force_to_mode
	.type	if_then_else_cond, @function
if_then_else_cond:
.LFB42:
	.loc 1 7390 0
	pushl	%ebp
.LCFI140:
	movl	%esp, %ebp
.LCFI141:
	pushl	%esi
.LCFI142:
	pushl	%ebx
.LCFI143:
	subl	$96, %esp
.LCFI144:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7391 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 7392 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -28(%ebp)
	.loc 1 7397 0
	cmpl	$112, -28(%ebp)
	je	.L2912
	cmpl	$113, -28(%ebp)
	jne	.L2914
.L2912:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2914
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2914
	.loc 1 7400 0
	cmpl	$112, -28(%ebp)
	je	.L2917
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -80(%ebp)
	jmp	.L2919
.L2917:
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -80(%ebp)
.L2919:
	movl	12(%ebp), %eax
	movl	-80(%ebp), %edx
	movl	%edx, (%eax)
	.loc 1 7401 0
	cmpl	$112, -28(%ebp)
	jne	.L2920
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L2922
.L2920:
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
.L2922:
	movl	16(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%edx, (%eax)
	.loc 1 7402 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L2914:
	.loc 1 7407 0
	movl	-28(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$49, %al
	jne	.L2924
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	if_then_else_cond
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	je	.L2924
	.loc 1 7410 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-36(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7411 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-44(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7413 0
	movl	-24(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L2924:
	.loc 1 7418 0
	cmpl	$84, -28(%ebp)
	je	.L2927
	.loc 1 7424 0
	movl	-28(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	je	.L2929
	movl	-28(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$50, %al
	je	.L2929
	movl	-28(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	jne	.L2932
.L2929:
	.loc 1 7427 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	if_then_else_cond
	movl	%eax, -24(%ebp)
	.loc 1 7428 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	leal	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	if_then_else_cond
	movl	%eax, -20(%ebp)
	.loc 1 7430 0
	cmpl	$0, -24(%ebp)
	jne	.L2933
	cmpl	$0, -20(%ebp)
	je	.L2935
.L2933:
	cmpl	$0, -24(%ebp)
	je	.L2936
	cmpl	$0, -20(%ebp)
	je	.L2936
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2935
.L2936:
	.loc 1 7436 0
	cmpl	$0, -24(%ebp)
	jne	.L2939
	.loc 1 7437 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -36(%ebp)
	jmp	.L2941
.L2939:
	.loc 1 7438 0
	cmpl	$0, -20(%ebp)
	jne	.L2941
	.loc 1 7439 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -40(%ebp)
.L2941:
	.loc 1 7441 0
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7442 0
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7443 0
	cmpl	$0, -24(%ebp)
	je	.L2943
	movl	-24(%ebp), %edx
	movl	%edx, -68(%ebp)
	jmp	.L2945
.L2943:
	movl	-20(%ebp), %eax
	movl	%eax, -68(%ebp)
.L2945:
	movl	-68(%ebp), %edx
	movl	%edx, -72(%ebp)
	jmp	.L2923
.L2935:
	.loc 1 7450 0
	cmpl	$85, -28(%ebp)
	je	.L2946
	cmpl	$94, -28(%ebp)
	je	.L2946
	cmpl	$95, -28(%ebp)
	je	.L2946
	cmpl	$86, -28(%ebp)
	je	.L2946
	cmpl	$105, -28(%ebp)
	jne	.L2951
.L2946:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L2951
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L2951
.LBB85:
	.loc 1 7455 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 7456 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 7458 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7459 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7461 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2951
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2951
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %esi
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	cmpl	%eax, %esi
	jne	.L2956
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2956
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2959
.L2956:
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, %esi
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	cmpl	%eax, %esi
	jne	.L2951
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2951
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2951
.L2959:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2951
	.loc 1 7472 0
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7473 0
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	cmpl	$86, -28(%ebp)
	jne	.L2963
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -60(%ebp)
	jmp	.L2965
.L2963:
	movl	-12(%ebp), %eax
	movl	%eax, -60(%ebp)
.L2965:
	movl	-64(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_binary
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7479 0
	movl	-24(%ebp), %edx
	movl	%edx, -72(%ebp)
	jmp	.L2923
.L2951:
.LBE85:
	.loc 1 7485 0
	cmpl	$88, -28(%ebp)
	je	.L2966
	cmpl	$93, -28(%ebp)
	je	.L2966
	cmpl	$104, -28(%ebp)
	jne	.L2927
.L2966:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L2927
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L2927
	.loc 1 7489 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7490 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7492 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2927
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %esi
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	cmpl	%eax, %esi
	jne	.L2974
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2974
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2977
.L2974:
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, %esi
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	cmpl	%eax, %esi
	jne	.L2927
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2927
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L2927
.L2977:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L2927
	.loc 1 7503 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7504 0
	movl	-24(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L2932:
	.loc 1 7509 0
	cmpl	$82, -28(%ebp)
	jne	.L2981
	.loc 1 7513 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7514 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7515 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$112, %ax
	jne	.L2983
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2983
	.loc 1 7516 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L2983:
	.loc 1 7517 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$113, %ax
	jne	.L2986
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2986
	.loc 1 7519 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7520 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L2986:
	.loc 1 7523 0
	movl	-24(%ebp), %edx
	movl	%edx, -72(%ebp)
	jmp	.L2923
.L2981:
	.loc 1 7528 0
	cmpl	$73, -28(%ebp)
	jne	.L2989
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	if_then_else_cond
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	je	.L2989
	.loc 1 7532 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-36(%ebp), %edx
	movl	%ecx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7534 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-44(%ebp), %edx
	movl	%ecx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7537 0
	movl	-24(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L2989:
	.loc 1 7542 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L2927
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	je	.L3000
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2927
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3000
	jmp	.L2927
.L3000:
	.loc 1 7548 0
	cmpl	$1, -32(%ebp)
	jne	.L3010
	.loc 1 7550 0
	movl	$1, 4(%esp)
	movl	$0, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7551 0
	movl	8(%ebp), %edx
	movl	%edx, -72(%ebp)
	jmp	.L2923
.L3010:
	.loc 1 7556 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	8(%ebp), %eax
	je	.L3012
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	8(%ebp), %eax
	je	.L3012
	cmpl	$0, -32(%ebp)
	je	.L3015
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-32(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L3015
.L3012:
	.loc 1 7560 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7561 0
	movl	8(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2923
.L3015:
	.loc 1 7565 0
	cmpl	$0, -32(%ebp)
	je	.L2927
	movl	-32(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L2927
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L2927
	.loc 1 7569 0
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %ecx
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	16(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7570 0
	movl	8(%ebp), %edx
	movl	%edx, -72(%ebp)
	jmp	.L2923
.L2927:
	.loc 1 7574 0
	movl	16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 7575 0
	movl	$0, -72(%ebp)
.L2923:
	movl	-72(%ebp), %eax
	.loc 1 7576 0
	addl	$96, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE42:
	.size	if_then_else_cond, .-if_then_else_cond
	.type	known_cond, @function
known_cond:
.LFB43:
	.loc 1 7591 0
	pushl	%ebp
.LCFI145:
	movl	%esp, %ebp
.LCFI146:
	pushl	%ebx
.LCFI147:
	subl	$100, %esp
.LCFI148:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7592 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -52(%ebp)
	.loc 1 7597 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	je	.L3022
	.loc 1 7598 0
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3022:
	.loc 1 7602 0
	cmpl	$113, 12(%ebp)
	jne	.L3025
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3025
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L3025
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L3025
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$8, %eax
	je	.L3025
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L3025
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L3025
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$8, %eax
	je	.L3025
	.loc 1 7606 0
	movl	20(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3025:
	.loc 1 7608 0
	cmpl	$124, 12(%ebp)
	jne	.L3034
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3034
	.loc 1 7609 0
	movl	20(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3034:
	.loc 1 7614 0
	cmpl	$139, -52(%ebp)
	jne	.L3037
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3037
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	20(%ebp), %eax
	jne	.L3037
	.loc 1 7615 0
	movl	12(%ebp), %eax
	movl	%eax, -80(%ebp)
	cmpl	$113, -80(%ebp)
	jb	.L3044
	cmpl	$115, -80(%ebp)
	jbe	.L3042
	cmpl	$117, -80(%ebp)
	ja	.L3044
	jmp	.L3043
.L3042:
	.loc 1 7618 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3043:
	.loc 1 7620 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3037:
	.loc 1 7630 0
	movl	-52(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	je	.L3045
	movl	-52(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L3047
.L3045:
	.loc 1 7632 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3048
	.loc 1 7633 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, 12(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, 16(%ebp)
.L3048:
	.loc 1 7635 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3044
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3044
	.loc 1 7637 0
	movl	-52(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	jne	.L3053
	.loc 1 7639 0
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	comparison_dominates_p@PLT
	testl	%eax, %eax
	je	.L3055
	.loc 1 7640 0
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3055:
	.loc 1 7642 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	movl	%eax, -52(%ebp)
	.loc 1 7643 0
	cmpl	$0, -52(%ebp)
	je	.L3057
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	comparison_dominates_p@PLT
	testl	%eax, %eax
	je	.L3057
	.loc 1 7645 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3057:
	.loc 1 7647 0
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3053:
	.loc 1 7649 0
	cmpl	$103, -52(%ebp)
	je	.L3060
	cmpl	$102, -52(%ebp)
	je	.L3060
	cmpl	$104, -52(%ebp)
	je	.L3060
	cmpl	$105, -52(%ebp)
	jne	.L3044
.L3060:
.LBB86:
	.loc 1 7652 0
	cmpl	$104, -52(%ebp)
	je	.L3064
	cmpl	$105, -52(%ebp)
	jne	.L3066
.L3064:
	movl	$1, -72(%ebp)
	jmp	.L3067
.L3066:
	movl	$0, -72(%ebp)
.L3067:
	movl	-72(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 7658 0
	cmpl	$103, -52(%ebp)
	je	.L3068
	cmpl	$105, -52(%ebp)
	jne	.L3070
.L3068:
	cmpl	$113, 12(%ebp)
	je	.L3070
	cmpl	$112, 12(%ebp)
	je	.L3070
	.loc 1 7660 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	reverse_condition@PLT
	movl	%eax, 12(%ebp)
.L3070:
	.loc 1 7662 0
	movl	12(%ebp), %eax
	subl	$114, %eax
	movl	%eax, -84(%ebp)
	cmpl	$7, -84(%ebp)
	ja	.L3044
	movl	-84(%ebp), %eax
	sall	$2, %eax
	movl	.L3077@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3077:
	.long	.L3073@GOTOFF
	.long	.L3073@GOTOFF
	.long	.L3074@GOTOFF
	.long	.L3074@GOTOFF
	.long	.L3075@GOTOFF
	.long	.L3075@GOTOFF
	.long	.L3076@GOTOFF
	.long	.L3076@GOTOFF
	.text
.L3073:
	.loc 1 7665 0
	cmpl	$0, -32(%ebp)
	jne	.L3078
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -68(%ebp)
	jmp	.L3080
.L3078:
	movl	8(%ebp), %eax
	movl	%eax, -68(%ebp)
.L3080:
	movl	-68(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3074:
	.loc 1 7667 0
	cmpl	$0, -32(%ebp)
	jne	.L3081
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3083
.L3081:
	movl	8(%ebp), %eax
	movl	%eax, -64(%ebp)
.L3083:
	movl	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3075:
	.loc 1 7669 0
	cmpl	$0, -32(%ebp)
	je	.L3084
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3086
.L3084:
	movl	8(%ebp), %eax
	movl	%eax, -60(%ebp)
.L3086:
	movl	-60(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3076:
	.loc 1 7671 0
	cmpl	$0, -32(%ebp)
	je	.L3087
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3089
.L3087:
	movl	8(%ebp), %eax
	movl	%eax, -56(%ebp)
.L3089:
	movl	-56(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3047:
.LBE86:
	.loc 1 7678 0
	cmpl	$73, -52(%ebp)
	jne	.L3090
.LBB87:
	.loc 1 7680 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 7681 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	known_cond
	movl	%eax, -20(%ebp)
	.loc 1 7683 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-20(%ebp), %eax
	je	.L3092
	.loc 1 7687 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	simplify_subreg@PLT
	movl	%eax, -24(%ebp)
	.loc 1 7689 0
	cmpl	$0, -24(%ebp)
	je	.L3094
	.loc 1 7690 0
	movl	-24(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3094:
	.loc 1 7692 0
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L3092:
	.loc 1 7695 0
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3090:
.LBE87:
	.loc 1 7703 0
	cmpl	$131, -52(%ebp)
	jne	.L3044
.LBB88:
	.loc 1 7705 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
	.loc 1 7706 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	known_cond
	movl	%eax, -8(%ebp)
	.loc 1 7708 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-8(%ebp), %eax
	je	.L3097
	.loc 1 7712 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$131, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, -12(%ebp)
	.loc 1 7714 0
	cmpl	$0, -12(%ebp)
	je	.L3099
	.loc 1 7715 0
	movl	-12(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3099:
	.loc 1 7717 0
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L3097:
	.loc 1 7720 0
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3024
.L3044:
.LBE88:
	.loc 1 7723 0
	movl	-52(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -44(%ebp)
	.loc 1 7724 0
	movl	-52(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -40(%ebp)
	jmp	.L3101
.L3102:
	.loc 1 7726 0
	movl	-40(%ebp), %eax
	addl	-44(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L3103
	.loc 1 7727 0
	movl	-40(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	known_cond
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	sall	$3, %eax
	addl	8(%ebp), %eax
	addl	$4, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	jmp	.L3105
.L3103:
	.loc 1 7728 0
	movl	-40(%ebp), %eax
	addl	-44(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L3105
	.loc 1 7729 0
	movl	-40(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -36(%ebp)
	jmp	.L3107
.L3108:
	.loc 1 7730 0
	movl	-40(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-36(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	known_cond
	movl	%eax, %ecx
	movl	-40(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	leal	4(%eax), %edx
	movl	-36(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
	.loc 1 7729 0
	subl	$1, -36(%ebp)
.L3107:
	cmpl	$0, -36(%ebp)
	jns	.L3108
.L3105:
	.loc 1 7724 0
	subl	$1, -40(%ebp)
.L3101:
	cmpl	$0, -40(%ebp)
	jns	.L3102
	.loc 1 7734 0
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
.L3024:
	movl	-76(%ebp), %eax
	.loc 1 7735 0
	addl	$100, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE43:
	.size	known_cond, .-known_cond
	.type	rtx_equal_for_field_assignment_p, @function
rtx_equal_for_field_assignment_p:
.LFB44:
	.loc 1 7744 0
	pushl	%ebp
.LCFI149:
	movl	%esp, %ebp
.LCFI150:
	pushl	%ebx
.LCFI151:
	subl	$20, %esp
.LCFI152:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7745 0
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L3112
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3114
.L3112:
	.loc 1 7746 0
	movl	$1, -8(%ebp)
	jmp	.L3115
.L3114:
	.loc 1 7748 0
	cmpl	$0, 8(%ebp)
	je	.L3116
	cmpl	$0, 12(%ebp)
	je	.L3116
	movl	8(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	je	.L3119
.L3116:
	.loc 1 7749 0
	movl	$0, -8(%ebp)
	jmp	.L3115
.L3119:
	.loc 1 7754 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3120
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3120
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3120
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3120
	.loc 1 7758 0
	movl	$1, -8(%ebp)
	jmp	.L3115
.L3120:
	.loc 1 7760 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3125
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3125
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3125
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3125
	.loc 1 7764 0
	movl	$1, -8(%ebp)
	jmp	.L3115
.L3125:
	.loc 1 7771 0
	movl	$0, -8(%ebp)
.L3115:
	movl	-8(%ebp), %eax
	.loc 1 7772 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE44:
	.size	rtx_equal_for_field_assignment_p, .-rtx_equal_for_field_assignment_p
	.type	make_field_assignment, @function
make_field_assignment:
.LFB45:
	.loc 1 7782 0
	pushl	%ebp
.LCFI153:
	movl	%esp, %ebp
.LCFI154:
	pushl	%edi
.LCFI155:
	pushl	%esi
.LCFI156:
	pushl	%ebx
.LCFI157:
	subl	$172, %esp
.LCFI158:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7783 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 7784 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 7798 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L3132
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$98, %ax
	jne	.L3132
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3132
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	xorl	$-1, %ecx
	xorl	$-2, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L3132
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_for_field_assignment_p
	testl	%eax, %eax
	je	.L3132
	.loc 1 7803 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	$0, 36(%esp)
	movl	$1, 32(%esp)
	movl	$1, 28(%esp)
	movl	$1, 20(%esp)
	movl	$0, 24(%esp)
	movl	%eax, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	make_extraction
	movl	%eax, -36(%ebp)
	.loc 1 7805 0
	cmpl	$0, -36(%ebp)
	je	.L3138
	.loc 1 7806 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -132(%ebp)
	jmp	.L3140
.L3138:
	.loc 1 7807 0
	movl	8(%ebp), %eax
	movl	%eax, -132(%ebp)
	jmp	.L3140
.L3132:
	.loc 1 7810 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L3141
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3141
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L3141
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L3141
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$98, %ax
	jne	.L3141
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	xorl	$-1, %ecx
	xorl	$-2, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L3141
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_for_field_assignment_p
	testl	%eax, %eax
	je	.L3141
	.loc 1 7818 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	$0, 36(%esp)
	movl	$1, 32(%esp)
	movl	$1, 28(%esp)
	movl	$1, 20(%esp)
	movl	$0, 24(%esp)
	movl	%eax, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	make_extraction
	movl	%eax, -36(%ebp)
	.loc 1 7821 0
	cmpl	$0, -36(%ebp)
	je	.L3149
	.loc 1 7822 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -132(%ebp)
	jmp	.L3140
.L3149:
	.loc 1 7823 0
	movl	8(%ebp), %edx
	movl	%edx, -132(%ebp)
	jmp	.L3140
.L3141:
	.loc 1 7828 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L3151
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L3151
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3151
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_for_field_assignment_p
	testl	%eax, %eax
	je	.L3151
	.loc 1 7832 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	$0, 36(%esp)
	movl	$1, 32(%esp)
	movl	$1, 28(%esp)
	movl	$1, 20(%esp)
	movl	$0, 24(%esp)
	movl	%eax, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	make_extraction
	movl	%eax, -36(%ebp)
	.loc 1 7834 0
	cmpl	$0, -36(%ebp)
	je	.L3156
	.loc 1 7835 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -132(%ebp)
	jmp	.L3140
.L3156:
	.loc 1 7836 0
	movl	8(%ebp), %esi
	movl	%esi, -132(%ebp)
	jmp	.L3140
.L3151:
	.loc 1 7847 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L3158
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	je	.L3158
	.loc 1 7848 0
	movl	8(%ebp), %edi
	movl	%edi, -132(%ebp)
	jmp	.L3140
.L3158:
	.loc 1 7850 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -32(%ebp)
	.loc 1 7851 0
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -28(%ebp)
	.loc 1 7853 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L3161
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3161
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_for_field_assignment_p
	testl	%eax, %eax
	je	.L3161
	.loc 1 7856 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-28(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7853 0
	jmp	.L3165
.L3161:
	.loc 1 7857 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L3166
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3166
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_for_field_assignment_p
	testl	%eax, %eax
	je	.L3166
	.loc 1 7860 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 7857 0
	jmp	.L3165
.L3166:
	.loc 1 7862 0
	movl	8(%ebp), %eax
	movl	%eax, -132(%ebp)
	jmp	.L3140
.L3165:
	.loc 1 7864 0
	movl	-64(%ebp), %ecx
	movl	-60(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-128(%ebp), %eax
	andl	%esi, %eax
	movl	-124(%ebp), %edx
	andl	%edi, %edx
	leal	-72(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	get_pos_from_mask
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	.loc 1 7865 0
	cmpl	$0, -52(%ebp)
	js	.L3170
	movl	-56(%ebp), %esi
	movl	-52(%ebp), %edi
	movl	%esi, -144(%ebp)
	movl	%edi, -140(%ebp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	-144(%ebp), %esi
	movl	-140(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -120(%ebp)
	movl	%edi, -116(%ebp)
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -112(%ebp)
	movl	-112(%ebp), %edi
	movl	%edi, -112(%ebp)
	movl	$0, -108(%ebp)
	movl	-108(%ebp), %eax
	cmpl	%eax, -116(%ebp)
	ja	.L3170
	movl	-108(%ebp), %edx
	cmpl	%edx, -116(%ebp)
	jb	.L3173
	movl	-112(%ebp), %esi
	cmpl	%esi, -120(%ebp)
	ja	.L3170
.L3173:
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L3170
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	movl	-64(%ebp), %esi
	movl	-60(%ebp), %edi
	movl	-104(%ebp), %eax
	andl	%esi, %eax
	movl	-100(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3175
.L3170:
	.loc 1 7868 0
	movl	8(%ebp), %edi
	movl	%edi, -132(%ebp)
	jmp	.L3140
.L3175:
	.loc 1 7870 0
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	$0, 36(%esp)
	movl	$1, 32(%esp)
	movl	$1, 28(%esp)
	movl	%eax, 20(%esp)
	movl	%edx, 24(%esp)
	movl	$0, 16(%esp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	make_extraction
	movl	%eax, -36(%ebp)
	.loc 1 7871 0
	cmpl	$0, -36(%ebp)
	jne	.L3176
	.loc 1 7872 0
	movl	8(%ebp), %eax
	movl	%eax, -132(%ebp)
	jmp	.L3140
.L3176:
	.loc 1 7876 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	jne	.L3178
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -92(%ebp)
	jmp	.L3180
.L3178:
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -92(%ebp)
.L3180:
	movl	-92(%ebp), %edx
	movl	%edx, -20(%ebp)
	.loc 1 7882 0
	movl	-20(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$63, %ax
	ja	.L3181
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3185
	movl	%eax, %edx
	xorl	%eax, %eax
.L3185:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	%esi, -88(%ebp)
	movl	%edi, -84(%ebp)
	jmp	.L3183
.L3181:
	movl	$-1, -88(%ebp)
	movl	$-1, -84(%ebp)
.L3183:
	movl	-56(%ebp), %edx
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 16(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	$100, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, %edx
	movl	$0, 20(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-88(%ebp), %esi
	movl	-84(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	force_to_mode
	movl	%eax, -40(%ebp)
	.loc 1 7890 0
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -132(%ebp)
.L3140:
	movl	-132(%ebp), %eax
	.loc 1 7891 0
	addl	$172, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE45:
	.size	make_field_assignment, .-make_field_assignment
	.type	apply_distributive_law, @function
apply_distributive_law:
.LFB46:
	.loc 1 7899 0
	pushl	%ebp
.LCFI159:
	movl	%esp, %ebp
.LCFI160:
	pushl	%ebx
.LCFI161:
	subl	$68, %esp
.LCFI162:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 7900 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -28(%ebp)
	.loc 1 7908 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L3187
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L3187
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$8, %eax
	jne	.L3190
.L3187:
	.loc 1 7909 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3190:
	.loc 1 7912 0
	cmpl	$94, -28(%ebp)
	je	.L3192
	cmpl	$93, -28(%ebp)
	je	.L3192
	cmpl	$95, -28(%ebp)
	je	.L3192
	cmpl	$85, -28(%ebp)
	je	.L3192
	cmpl	$86, -28(%ebp)
	je	.L3192
	.loc 1 7914 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3192:
	.loc 1 7916 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7920 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	je	.L3198
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$111, %al
	jne	.L3200
.L3198:
	.loc 1 7922 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3200:
	.loc 1 7924 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -24(%ebp)
	.loc 1 7925 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -20(%ebp)
	.loc 1 7926 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -8(%ebp)
	.loc 1 7927 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	cmpl	-8(%ebp), %eax
	je	.L3201
	.loc 1 7928 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3201:
	.loc 1 7931 0
	movl	-8(%ebp), %eax
	subl	$73, %eax
	movl	%eax, -52(%ebp)
	cmpl	$27, -52(%ebp)
	ja	.L3203
	movl	-52(%ebp), %eax
	sall	$2, %eax
	movl	.L3208@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3208:
	.long	.L3204@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3205@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3206@GOTOFF
	.long	.L3206@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3212@GOTOFF
	.long	.L3203@GOTOFF
	.long	.L3206@GOTOFF
	.long	.L3206@GOTOFF
	.text
.L3206:
	.loc 1 7938 0
	cmpl	$85, -28(%ebp)
	je	.L3209
	cmpl	$86, -28(%ebp)
	jne	.L3212
.L3209:
	.loc 1 7939 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3205:
	.loc 1 7943 0
	cmpl	$85, -28(%ebp)
	je	.L3212
	cmpl	$86, -28(%ebp)
	je	.L3212
	.loc 1 7944 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3204:
	.loc 1 7963 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L3216
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3216
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L3216
	movl	-24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %ecx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	%eax, %ecx
	jne	.L3216
	movl	-24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L3216
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -44(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3222
	movl	$8, -40(%ebp)
	jmp	.L3224
.L3222:
	movl	$4, -40(%ebp)
.L3224:
	movl	-40(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	jle	.L3225
.L3216:
	.loc 1 7971 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3225:
	.loc 1 7973 0
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -12(%ebp)
	.loc 1 7975 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3203:
	.loc 1 7978 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3212:
	.loc 1 7985 0
	movl	-8(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L3226
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3226
	.loc 1 7987 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7985 0
	jmp	.L3229
.L3226:
	.loc 1 7988 0
	movl	-8(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L3230
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3230
	.loc 1 7990 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7988 0
	jmp	.L3229
.L3230:
	.loc 1 7991 0
	movl	-8(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L3233
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3233
	.loc 1 7993 0
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 7991 0
	jmp	.L3229
.L3233:
	.loc 1 7994 0
	movl	-20(%ebp), %eax
	movl	12(%eax), %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3236
	.loc 1 7995 0
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3229
.L3236:
	.loc 1 7997 0
	movl	8(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L3191
.L3229:
	.loc 1 8000 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -12(%ebp)
	.loc 1 8004 0
	cmpl	$95, -28(%ebp)
	jne	.L3238
	cmpl	$94, -8(%ebp)
	jne	.L3238
	.loc 1 8006 0
	movl	$93, -8(%ebp)
	.loc 1 8007 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, -16(%ebp)
.L3238:
	.loc 1 8013 0
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -48(%ebp)
.L3191:
	movl	-48(%ebp), %eax
	.loc 1 8015 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE46:
	.size	apply_distributive_law, .-apply_distributive_law
	.type	simplify_and_const_int, @function
simplify_and_const_int:
.LFB47:
	.loc 1 8029 0
	pushl	%ebp
.LCFI163:
	movl	%esp, %ebp
.LCFI164:
	pushl	%edi
.LCFI165:
	pushl	%esi
.LCFI166:
	pushl	%ebx
.LCFI167:
	subl	$76, %esp
.LCFI168:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	20(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 8040 0
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, 16(%ebp)
	.loc 1 8043 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L3243
	.loc 1 8044 0
	movl	16(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3243:
	.loc 1 8048 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3246
	.loc 1 8049 0
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-56(%ebp), %eax
	movl	%edi, %edx
	andl	-52(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3246:
	.loc 1 8055 0
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%esi, %ecx
	andl	%eax, %ecx
	movl	%ecx, -40(%ebp)
	movl	%edi, %eax
	andl	%edx, %eax
	movl	%eax, -36(%ebp)
	.loc 1 8061 0
	movl	-40(%ebp), %ecx
	movl	-36(%ebp), %esi
	movl	-56(%ebp), %eax
	andl	%ecx, %eax
	movl	-52(%ebp), %edx
	andl	%esi, %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	.loc 1 8064 0
	movl	-56(%ebp), %eax
	orl	-52(%ebp), %eax
	testl	%eax, %eax
	jne	.L3248
	.loc 1 8065 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3248:
	.loc 1 8069 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L3250
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3250
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -28(%ebp)
	cmpl	$0, -28(%ebp)
	js	.L3250
	.loc 1 8071 0
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3250:
	.loc 1 8079 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	je	.L3254
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$95, %ax
	jne	.L3256
.L3254:
	.loc 1 8080 0
	movl	16(%ebp), %eax
	movl	12(%eax), %esi
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, %edi
	movl	16(%ebp), %eax
	movl	4(%eax), %esi
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%edi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3256:
	.loc 1 8094 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3257
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L3257
.LBB89:
	.loc 1 8099 0
	movl	16(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -24(%ebp)
	.loc 1 8100 0
	movl	16(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -20(%ebp)
	.loc 1 8101 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-24(%ebp), %eax
	jne	.L3260
	.loc 1 8102 0
	movl	-20(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3260:
	.loc 1 8103 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-20(%ebp), %eax
	jne	.L3257
	.loc 1 8104 0
	movl	-24(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3257:
.LBE89:
	.loc 1 8109 0
	cmpl	$0, 8(%ebp)
	je	.L3263
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3263
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	12(%ebp), %eax
	jne	.L3263
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	16(%ebp), %eax
	jne	.L3263
	.loc 1 8112 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 16(%ebp)
	.loc 1 8109 0
	jmp	.L3268
.L3263:
	.loc 1 8114 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, 16(%ebp)
.L3268:
	.loc 1 8117 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L3269
	.loc 1 8118 0
	cmpl	$0, 8(%ebp)
	je	.L3271
	movl	8(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3273
.L3271:
	movl	16(%ebp), %eax
	movl	%eax, -60(%ebp)
.L3273:
	movl	-60(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L3245
.L3269:
	.loc 1 8121 0
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%edx, %ecx
	xorl	-36(%ebp), %ecx
	xorl	-40(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L3274
	.loc 1 8122 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%ebp)
	jmp	.L3276
.L3274:
	.loc 1 8126 0
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	.loc 1 8128 0
	cmpl	$0, 8(%ebp)
	je	.L3277
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L3277
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	12(%ebp), %eax
	je	.L3280
.L3277:
	.loc 1 8129 0
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
	.loc 1 8128 0
	jmp	.L3276
.L3280:
	.loc 1 8133 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3281
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	xorl	-52(%ebp), %ecx
	xorl	-56(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L3283
.L3281:
	.loc 1 8135 0
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	8(%ebp), %edx
	addl	$12, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L3283:
	.loc 1 8137 0
	movl	8(%ebp), %edx
	addl	$4, %edx
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
.L3276:
	.loc 1 8141 0
	movl	8(%ebp), %eax
	movl	%eax, -64(%ebp)
.L3245:
	movl	-64(%ebp), %eax
	.loc 1 8142 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE47:
	.size	simplify_and_const_int, .-simplify_and_const_int
	.type	cached_nonzero_bits, @function
cached_nonzero_bits:
.LFB48:
	.loc 1 8158 0
	pushl	%ebp
.LCFI169:
	movl	%esp, %ebp
.LCFI170:
	pushl	%ebx
.LCFI171:
	subl	$68, %esp
.LCFI172:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 8159 0
	movl	8(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3286
	movl	12(%ebp), %eax
	cmpl	20(%ebp), %eax
	jne	.L3286
	.loc 1 8160 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	jmp	.L3289
.L3286:
	.loc 1 8166 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L3290
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3292
.L3290:
.LBB90:
	.loc 1 8169 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 8170 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 8173 0
	movl	-16(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jne	.L3293
	.loc 1 8174 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	nonzero_bits1
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	jmp	.L3289
.L3293:
	.loc 1 8178 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L3295
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3297
.L3295:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L3298
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L3297
.L3298:
	.loc 1 8181 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	nonzero_bits1
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	jmp	.L3289
.L3297:
	.loc 1 8184 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L3300
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3292
.L3300:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-16(%ebp), %eax
	je	.L3302
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-16(%ebp), %eax
	jne	.L3292
.L3302:
	.loc 1 8187 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	nonzero_bits1
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	jmp	.L3289
.L3292:
.LBE90:
	.loc 1 8191 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	nonzero_bits1
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
.L3289:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	.loc 1 8192 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE48:
	.size	cached_nonzero_bits, .-cached_nonzero_bits
	.section	.rodata
	.type	__FUNCTION__.22321, @object
	.size	__FUNCTION__.22321, 14
__FUNCTION__.22321:
	.string	"nonzero_bits1"
	.text
	.type	nonzero_bits1, @function
nonzero_bits1:
.LFB49:
	.loc 1 8214 0
	pushl	%ebp
.LCFI173:
	movl	%esp, %ebp
.LCFI174:
	pushl	%edi
.LCFI175:
	pushl	%esi
.LCFI176:
	pushl	%ebx
.LCFI177:
	subl	$380, %esp
.LCFI178:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	24(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -180(%ebp)
	.loc 1 8215 0
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8218 0
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	.loc 1 8222 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L3306
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L3306
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$8, %eax
	je	.L3306
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L3306
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L3306
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L3312
.L3306:
	.loc 1 8223 0
	movl	-168(%ebp), %eax
	movl	-164(%ebp), %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	jmp	.L3313
.L3312:
	.loc 1 8226 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-60(%ebp), %eax
	jbe	.L3314
	.loc 1 8228 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 12(%ebp)
	.loc 1 8229 0
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8230 0
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
.L3314:
	.loc 1 8233 0
	cmpl	$64, -60(%ebp)
	jbe	.L3316
	.loc 1 8236 0
	movl	-168(%ebp), %edx
	movl	-164(%ebp), %ecx
	movl	%edx, -312(%ebp)
	movl	%ecx, -308(%ebp)
	jmp	.L3313
.L3316:
	.loc 1 8257 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -64(%ebp)
	.loc 1 8258 0
	movl	-64(%ebp), %ecx
	subl	$64, %ecx
	movl	%ecx, -316(%ebp)
	cmpl	$79, -316(%ebp)
	ja	.L3318
	movl	-316(%ebp), %eax
	sall	$2, %eax
	movl	.L3336@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3336:
	.long	.L3319@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3320@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3321@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3322@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3323@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3325@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3324@GOTOFF
	.long	.L3326@GOTOFF
	.long	.L3327@GOTOFF
	.long	.L3327@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3328@GOTOFF
	.long	.L3328@GOTOFF
	.long	.L3328@GOTOFF
	.long	.L3328@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3327@GOTOFF
	.long	.L3327@GOTOFF
	.long	.L3327@GOTOFF
	.long	.L3327@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3329@GOTOFF
	.long	.L3330@GOTOFF
	.long	.L3331@GOTOFF
	.long	.L3332@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3334@GOTOFF
	.long	.L3318@GOTOFF
	.long	.L3335@GOTOFF
	.text
.L3320:
	.loc 1 8273 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	8(%eax), %eax
	cmpl	8(%ebp), %eax
	je	.L3337
	movl	global_rtl@GOT(%ebx), %eax
	movl	12(%eax), %eax
	cmpl	8(%ebp), %eax
	je	.L3337
	movl	global_rtl@GOT(%ebx), %eax
	movl	20(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L3340
.L3337:
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	40(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	je	.L3340
.LBB91:
	.loc 1 8279 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	40(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	shrb	$3, %al
	movzbl	%al, %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -152(%ebp)
	movl	%edx, -148(%ebp)
	.loc 1 8289 0
	movl	-152(%ebp), %eax
	movl	-148(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
.L3340:
.LBE91:
	.loc 1 8297 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3342
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	12(%ebp), %eax
	je	.L3344
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L3342
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3342
.L3344:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	label_tick@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	je	.L3347
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L3342
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L3342
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	jne	.L3342
.L3347:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L3351
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -300(%ebp)
	jmp	.L3353
.L3351:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -300(%ebp)
.L3353:
	movl	subst_low_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, -300(%ebp)
	jge	.L3342
	.loc 1 8307 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	-168(%ebp), %esi
	andl	%eax, %esi
	movl	%esi, -312(%ebp)
	movl	-164(%ebp), %edi
	andl	%edx, %edi
	movl	%edi, -308(%ebp)
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	jmp	.L3313
.L3342:
	.loc 1 8309 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -56(%ebp)
	.loc 1 8311 0
	cmpl	$0, -56(%ebp)
	je	.L3355
	.loc 1 8333 0
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	-168(%ebp), %ecx
	andl	%eax, %ecx
	movl	%ecx, -312(%ebp)
	movl	-164(%ebp), %esi
	andl	%edx, %esi
	movl	%esi, -308(%ebp)
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	jmp	.L3313
.L3355:
	.loc 1 8335 0
	movl	nonzero_sign_valid@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L3357
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3357
.LBB92:
	.loc 1 8337 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	.loc 1 8339 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-60(%ebp), %eax
	jae	.L3360
	.loc 1 8341 0
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -296(%ebp)
	movl	%edi, -292(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	-296(%ebp), %esi
	xorl	%eax, %esi
	movl	-292(%ebp), %edi
	xorl	%edx, %edi
	movl	-144(%ebp), %eax
	orl	%esi, %eax
	movl	-140(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
.L3360:
	.loc 1 8342 0
	movl	-144(%ebp), %eax
	movl	-140(%ebp), %edx
	movl	-168(%ebp), %edi
	andl	%eax, %edi
	movl	%edi, -312(%ebp)
	movl	-164(%ebp), %eax
	andl	%edx, %eax
	movl	%eax, -308(%ebp)
	movl	-312(%ebp), %edx
	movl	-308(%ebp), %ecx
	movl	%edx, -312(%ebp)
	movl	%ecx, -308(%ebp)
	jmp	.L3313
.L3357:
.LBE92:
	.loc 1 8345 0
	movl	-168(%ebp), %esi
	movl	-164(%ebp), %edi
	movl	%esi, -312(%ebp)
	movl	%edi, -308(%ebp)
	jmp	.L3313
.L3319:
	.loc 1 8355 0
	movl	8(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
	jmp	.L3313
.L3322:
	.loc 1 8362 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3362
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3318
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	je	.L3318
.L3362:
	.loc 1 8363 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8365 0
	jmp	.L3318
.L3329:
	.loc 1 8379 0
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3318
	cmpl	$64, -60(%ebp)
	ja	.L3318
	.loc 1 8381 0
	movl	$1, -168(%ebp)
	movl	$0, -164(%ebp)
	.loc 1 8382 0
	jmp	.L3318
.L3325:
	.loc 1 8393 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jae	.L3318
	.loc 1 8394 0
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -288(%ebp)
	movl	%edi, -284(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	-288(%ebp), %esi
	andl	%eax, %esi
	movl	-284(%ebp), %edi
	andl	%edx, %edi
	movl	-168(%ebp), %eax
	orl	%esi, %eax
	movl	-164(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8395 0
	jmp	.L3318
.L3332:
	.loc 1 8408 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -280(%ebp)
	movl	%edx, -276(%ebp)
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	-280(%ebp), %esi
	andl	%eax, %esi
	movl	-276(%ebp), %edi
	andl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8410 0
	jmp	.L3318
.L3331:
	.loc 1 8413 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8414 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L3318
	.loc 1 8415 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8416 0
	jmp	.L3318
.L3330:
	.loc 1 8422 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	.loc 1 8423 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L3373
	.loc 1 8425 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-160(%ebp), %eax
	andl	%esi, %eax
	movl	-156(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	.loc 1 8426 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3468
	movl	%eax, %edx
	xorl	%eax, %eax
.L3468:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-160(%ebp), %eax
	movl	%edi, %edx
	andl	-156(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3373
	.loc 1 8429 0
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -272(%ebp)
	movl	%edi, -268(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	-272(%ebp), %esi
	andl	%eax, %esi
	movl	-268(%ebp), %edi
	andl	%edx, %edi
	movl	-160(%ebp), %eax
	orl	%esi, %eax
	movl	-156(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
.L3373:
	.loc 1 8433 0
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %esi
	movl	-168(%ebp), %edx
	andl	%eax, %edx
	movl	-164(%ebp), %ecx
	andl	%esi, %ecx
	movl	%edx, -168(%ebp)
	movl	%ecx, -164(%ebp)
	.loc 1 8434 0
	jmp	.L3318
.L3326:
	.loc 1 8437 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -264(%ebp)
	movl	%edx, -260(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	-264(%ebp), %esi
	andl	%eax, %esi
	movl	-260(%ebp), %edi
	andl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8439 0
	jmp	.L3318
.L3327:
.LBB93:
	.loc 1 8445 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -136(%ebp)
	movl	%edx, -132(%ebp)
	.loc 1 8449 0
	movl	-136(%ebp), %ecx
	movl	-132(%ebp), %esi
	movl	-168(%ebp), %eax
	andl	%ecx, %eax
	movl	-164(%ebp), %edx
	andl	%esi, %edx
	movl	%edx, %ecx
	xorl	-164(%ebp), %ecx
	xorl	-168(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L3318
	.loc 1 8450 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	orl	-136(%ebp), %esi
	movl	%edx, %edi
	orl	-132(%ebp), %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8453 0
	jmp	.L3318
.L3324:
.LBE93:
.LBB94:
	.loc 1 8465 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	.loc 1 8467 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	.loc 1 8468 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	addl	$1, %eax
	movl	%eax, -52(%ebp)
	.loc 1 8469 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	addl	$1, %eax
	movl	%eax, -48(%ebp)
	.loc 1 8470 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	%esi, %eax
	andl	-128(%ebp), %eax
	movl	%edi, %edx
	andl	-124(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, -44(%ebp)
	.loc 1 8471 0
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, -40(%ebp)
	.loc 1 8473 0
	movl	-60(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3466
	movl	%eax, %edx
	xorl	%eax, %eax
.L3466:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-128(%ebp), %eax
	movl	%edi, %edx
	andl	-124(%ebp), %edx
	movl	%eax, -112(%ebp)
	movl	%edx, -108(%ebp)
	.loc 1 8475 0
	movl	-60(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3467
	movl	%eax, %edx
	xorl	%eax, %eax
.L3467:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
	.loc 1 8476 0
	movl	-60(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8477 0
	movl	$0, -32(%ebp)
	.loc 1 8479 0
	movl	-64(%ebp), %edi
	subl	$85, %edi
	movl	%edi, -320(%ebp)
	cmpl	$7, -320(%ebp)
	ja	.L3378
	movl	-320(%ebp), %eax
	sall	$2, %eax
	movl	.L3386@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3386:
	.long	.L3379@GOTOFF
	.long	.L3380@GOTOFF
	.long	.L3378@GOTOFF
	.long	.L3381@GOTOFF
	.long	.L3382@GOTOFF
	.long	.L3383@GOTOFF
	.long	.L3384@GOTOFF
	.long	.L3385@GOTOFF
	.text
.L3379:
	.loc 1 8482 0
	movl	-52(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-48(%ebp), %edx
	movl	%edx, -252(%ebp)
	movl	-324(%ebp), %ecx
	cmpl	%ecx, -252(%ebp)
	jge	.L3387
	movl	-324(%ebp), %esi
	movl	%esi, -252(%ebp)
.L3387:
	movl	-252(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -36(%ebp)
	.loc 1 8483 0
	movl	-44(%ebp), %edi
	movl	%edi, -332(%ebp)
	movl	-40(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	-332(%ebp), %edx
	cmpl	%edx, -328(%ebp)
	jle	.L3388
	movl	-332(%ebp), %ecx
	movl	%ecx, -328(%ebp)
.L3388:
	movl	-328(%ebp), %esi
	movl	%esi, -32(%ebp)
	.loc 1 8484 0
	jmp	.L3389
.L3380:
	.loc 1 8486 0
	movl	-44(%ebp), %edi
	movl	%edi, -340(%ebp)
	movl	-40(%ebp), %eax
	movl	%eax, -336(%ebp)
	movl	-340(%ebp), %edx
	cmpl	%edx, -336(%ebp)
	jle	.L3390
	movl	-340(%ebp), %ecx
	movl	%ecx, -336(%ebp)
.L3390:
	movl	-336(%ebp), %esi
	movl	%esi, -32(%ebp)
	.loc 1 8487 0
	jmp	.L3389
.L3381:
	.loc 1 8489 0
	movl	-48(%ebp), %eax
	addl	-52(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8490 0
	movl	-40(%ebp), %eax
	addl	-44(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 8491 0
	jmp	.L3389
.L3382:
	.loc 1 8493 0
	cmpl	$0, -48(%ebp)
	je	.L3389
	.loc 1 8495 0
	movl	-112(%ebp), %eax
	orl	-108(%ebp), %eax
	testl	%eax, %eax
	jne	.L3389
	movl	-104(%ebp), %eax
	orl	-100(%ebp), %eax
	testl	%eax, %eax
	jne	.L3389
	.loc 1 8496 0
	movl	-52(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8497 0
	jmp	.L3389
.L3384:
	.loc 1 8499 0
	cmpl	$0, -48(%ebp)
	je	.L3389
	.loc 1 8501 0
	movl	-52(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 8502 0
	jmp	.L3389
.L3383:
	.loc 1 8504 0
	cmpl	$0, -48(%ebp)
	je	.L3389
	.loc 1 8506 0
	movl	-112(%ebp), %eax
	orl	-108(%ebp), %eax
	testl	%eax, %eax
	jne	.L3397
	movl	-104(%ebp), %eax
	orl	-100(%ebp), %eax
	testl	%eax, %eax
	jne	.L3397
	.loc 1 8507 0
	movl	-52(%ebp), %edi
	movl	%edi, -344(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-344(%ebp), %edx
	cmpl	%edx, -248(%ebp)
	jle	.L3400
	movl	-344(%ebp), %ecx
	movl	%ecx, -248(%ebp)
.L3400:
	movl	-248(%ebp), %esi
	movl	%esi, -36(%ebp)
.L3397:
	.loc 1 8508 0
	movl	-44(%ebp), %edi
	movl	%edi, -352(%ebp)
	movl	-40(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-352(%ebp), %edx
	cmpl	%edx, -348(%ebp)
	jle	.L3401
	movl	-352(%ebp), %ecx
	movl	%ecx, -348(%ebp)
.L3401:
	movl	-348(%ebp), %esi
	movl	%esi, -32(%ebp)
	.loc 1 8509 0
	jmp	.L3389
.L3385:
	.loc 1 8511 0
	cmpl	$0, -48(%ebp)
	je	.L3389
	.loc 1 8513 0
	movl	-52(%ebp), %edi
	movl	%edi, -356(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-356(%ebp), %edx
	cmpl	%edx, -244(%ebp)
	jle	.L3403
	movl	-356(%ebp), %ecx
	movl	%ecx, -244(%ebp)
.L3403:
	movl	-244(%ebp), %esi
	movl	%esi, -36(%ebp)
	.loc 1 8514 0
	movl	-44(%ebp), %edi
	movl	%edi, -364(%ebp)
	movl	-40(%ebp), %eax
	movl	%eax, -360(%ebp)
	movl	-364(%ebp), %edx
	cmpl	%edx, -360(%ebp)
	jle	.L3404
	movl	-364(%ebp), %ecx
	movl	%ecx, -360(%ebp)
.L3404:
	movl	-360(%ebp), %esi
	movl	%esi, -32(%ebp)
	.loc 1 8515 0
	jmp	.L3389
.L3378:
	.loc 1 8517 0
	leal	__FUNCTION__.22321@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8517, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3389:
	.loc 1 8520 0
	movl	-36(%ebp), %eax
	cmpl	-60(%ebp), %eax
	jae	.L3405
	.loc 1 8521 0
	movl	-36(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3465
	movl	%eax, %edx
	xorl	%eax, %eax
.L3465:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
.L3405:
	.loc 1 8523 0
	cmpl	$0, -32(%ebp)
	jle	.L3318
	.loc 1 8524 0
	movl	-32(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3464
	movl	%eax, %edx
	xorl	%eax, %eax
.L3464:
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8536 0
	jmp	.L3318
.L3335:
.LBE94:
	.loc 1 8539 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3318
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -240(%ebp)
	movl	%ecx, -236(%ebp)
	cmpl	$0, -236(%ebp)
	jg	.L3318
	cmpl	$0, -236(%ebp)
	js	.L3412
	cmpl	$63, -240(%ebp)
	ja	.L3318
.L3412:
	.loc 1 8541 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3463
	movl	%eax, %edx
	xorl	%eax, %eax
.L3463:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8542 0
	jmp	.L3318
.L3321:
	.loc 1 8549 0
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L3413
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L3413
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	jle	.L3413
	.loc 1 8550 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -232(%ebp)
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-232(%ebp), %ecx
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%esi, %ecx
	andl	%eax, %ecx
	movl	%ecx, -168(%ebp)
	movl	%edi, %eax
	andl	%edx, %eax
	movl	%eax, -164(%ebp)
.L3413:
	.loc 1 8556 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -228(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3417
	movl	$64, -224(%ebp)
	jmp	.L3419
.L3417:
	movl	$32, -224(%ebp)
.L3419:
	movl	-224(%ebp), %esi
	cmpl	%esi, -228(%ebp)
	jg	.L3318
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L3318
	.loc 1 8560 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8565 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3423
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3425
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L3423
.L3425:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	-168(%ebp), %eax
	movl	-164(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3462
	movl	%edx, %eax
	xorl	%edx, %edx
.L3462:
	andl	$1, %eax
	testb	%al, %al
	jne	.L3427
	jmp	.L3429
.L3423:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3430
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3432
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L3430
.L3432:
	movl	$1, -220(%ebp)
	jmp	.L3434
.L3430:
	movl	$0, -220(%ebp)
.L3434:
	movzbl	-220(%ebp), %eax
	testb	%al, %al
	jne	.L3427
.L3429:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L3318
.L3427:
	.loc 1 8577 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L3318
	.loc 1 8579 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -216(%ebp)
	movl	%edi, -212(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	-216(%ebp), %esi
	andl	%eax, %esi
	movl	-212(%ebp), %edi
	andl	%edx, %edi
	movl	-168(%ebp), %eax
	orl	%esi, %eax
	movl	-164(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8583 0
	jmp	.L3318
.L3328:
	.loc 1 8595 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3318
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L3318
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -208(%ebp)
	movl	%ecx, -204(%ebp)
	cmpl	$0, -204(%ebp)
	jg	.L3318
	cmpl	$0, -204(%ebp)
	js	.L3440
	cmpl	$63, -208(%ebp)
	ja	.L3318
.L3440:
.LBB95:
	.loc 1 8599 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 8600 0
	movl	-28(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -24(%ebp)
	.loc 1 8601 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 8602 0
	movl	-28(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	.loc 1 8604 0
	movl	8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	.loc 1 8605 0
	movl	-96(%ebp), %eax
	andl	-88(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-92(%ebp), %eax
	andl	-84(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 8606 0
	movl	$0, -72(%ebp)
	movl	$0, -68(%ebp)
	.loc 1 8608 0
	movl	-60(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jbe	.L3441
	.loc 1 8609 0
	movl	-168(%ebp), %eax
	movl	-164(%ebp), %edx
	movl	-88(%ebp), %esi
	andl	%eax, %esi
	movl	-84(%ebp), %edi
	andl	%edx, %edi
	movl	-96(%ebp), %ecx
	movl	-92(%ebp), %eax
	movl	%eax, -368(%ebp)
	movl	%ecx, %eax
	notl	%eax
	movl	-368(%ebp), %edx
	notl	%edx
	movl	%esi, %ecx
	andl	%eax, %ecx
	movl	%ecx, -72(%ebp)
	movl	%edi, %eax
	andl	%edx, %eax
	movl	%eax, -68(%ebp)
.L3441:
	.loc 1 8611 0
	cmpl	$100, -64(%ebp)
	jne	.L3443
	.loc 1 8612 0
	movl	-20(%ebp), %ecx
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3461
	movl	%edx, %eax
	xorl	%edx, %edx
.L3461:
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	jmp	.L3445
.L3443:
	.loc 1 8613 0
	cmpl	$99, -64(%ebp)
	jne	.L3446
	.loc 1 8615 0
	movl	-20(%ebp), %ecx
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L3459
	movl	%edx, %eax
	xorl	%edx, %edx
.L3459:
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	.loc 1 8620 0
	movl	-20(%ebp), %edx
	movl	-24(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3460
	movl	%eax, %edx
	xorl	%eax, %eax
.L3460:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-80(%ebp), %eax
	movl	%edi, %edx
	andl	-76(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3445
	.loc 1 8621 0
	movl	-20(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3457
	movl	%eax, %edx
	xorl	%eax, %eax
.L3457:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	-20(%ebp), %edx
	movl	-24(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3458
	movl	%eax, %edx
	xorl	%eax, %eax
.L3458:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-80(%ebp), %eax
	orl	%esi, %eax
	movl	-76(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	jmp	.L3445
.L3446:
	.loc 1 8623 0
	cmpl	$97, -64(%ebp)
	jne	.L3450
	.loc 1 8624 0
	movl	-20(%ebp), %ecx
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3456
	movl	%eax, %edx
	xorl	%eax, %eax
.L3456:
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	jmp	.L3445
.L3450:
	.loc 1 8626 0
	movl	-20(%ebp), %eax
	movl	$0, %edx
	divl	-24(%ebp)
	movl	%edx, %eax
	movl	%eax, %ecx
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L3454
	movl	%esi, %edi
	xorl	%esi, %esi
.L3454:
	movl	%esi, -200(%ebp)
	movl	%edi, -196(%ebp)
	movl	-20(%ebp), %eax
	movl	$0, %edx
	divl	-24(%ebp)
	movl	-24(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, %ecx
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	%edi, %esi
	shrl	%cl, %edi
	testb	$32, %cl
	je	.L3455
	movl	%edi, %esi
	xorl	%edi, %edi
.L3455:
	movl	-200(%ebp), %eax
	orl	%esi, %eax
	movl	-196(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, %ecx
	andl	-96(%ebp), %ecx
	movl	%ecx, -80(%ebp)
	movl	%edx, %eax
	andl	-92(%ebp), %eax
	movl	%eax, -76(%ebp)
.L3445:
	.loc 1 8629 0
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	-72(%ebp), %esi
	orl	%eax, %esi
	movl	-68(%ebp), %edi
	orl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8631 0
	jmp	.L3318
.L3334:
.LBE95:
	.loc 1 8635 0
	movl	-60(%ebp), %eax
	movl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	leal	1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3453
	movl	%eax, %edx
	xorl	%eax, %eax
.L3453:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	.loc 1 8636 0
	jmp	.L3318
.L3323:
	.loc 1 8639 0
	movl	8(%ebp), %eax
	movl	12(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -192(%ebp)
	movl	%edx, -188(%ebp)
	movl	8(%ebp), %eax
	movl	20(%eax), %ecx
	movl	-184(%ebp), %eax
	movl	-180(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	cached_nonzero_bits
	movl	-192(%ebp), %esi
	orl	%eax, %esi
	movl	-188(%ebp), %edi
	orl	%edx, %edi
	movl	-168(%ebp), %eax
	andl	%esi, %eax
	movl	-164(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
.L3318:
	.loc 1 8647 0
	movl	-168(%ebp), %eax
	movl	-164(%ebp), %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
.L3313:
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	.loc 1 8648 0
	addl	$380, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE49:
	.size	nonzero_bits1, .-nonzero_bits1
	.type	cached_num_sign_bit_copies, @function
cached_num_sign_bit_copies:
.LFB50:
	.loc 1 8668 0
	pushl	%ebp
.LCFI179:
	movl	%esp, %ebp
.LCFI180:
	pushl	%ebx
.LCFI181:
	subl	$52, %esp
.LCFI182:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8669 0
	movl	8(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3470
	movl	12(%ebp), %eax
	cmpl	20(%ebp), %eax
	jne	.L3470
	.loc 1 8670 0
	movl	24(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3473
.L3470:
	.loc 1 8676 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L3474
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3476
.L3474:
.LBB96:
	.loc 1 8679 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 8680 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 8683 0
	movl	-12(%ebp), %eax
	cmpl	-8(%ebp), %eax
	jne	.L3477
	.loc 1 8684 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	num_sign_bit_copies1
	movl	%eax, -24(%ebp)
	jmp	.L3473
.L3477:
	.loc 1 8689 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L3479
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3481
.L3479:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-8(%ebp), %eax
	je	.L3482
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-8(%ebp), %eax
	jne	.L3481
.L3482:
	.loc 1 8692 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	num_sign_bit_copies1
	movl	%eax, -24(%ebp)
	jmp	.L3473
.L3481:
	.loc 1 8696 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L3484
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3476
.L3484:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L3486
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L3476
.L3486:
	.loc 1 8699 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	num_sign_bit_copies1
	movl	%eax, -24(%ebp)
	jmp	.L3473
.L3476:
.LBE96:
	.loc 1 8704 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	num_sign_bit_copies1
	movl	%eax, -24(%ebp)
.L3473:
	movl	-24(%ebp), %eax
	.loc 1 8705 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE50:
	.size	cached_num_sign_bit_copies, .-cached_num_sign_bit_copies
	.type	num_sign_bit_copies1, @function
num_sign_bit_copies1:
.LFB51:
	.loc 1 8719 0
	pushl	%ebp
.LCFI183:
	movl	%esp, %ebp
.LCFI184:
	pushl	%edi
.LCFI185:
	pushl	%esi
.LCFI186:
	pushl	%ebx
.LCFI187:
	subl	$348, %esp
.LCFI188:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 8720 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -40(%ebp)
	.loc 1 8730 0
	cmpl	$0, 12(%ebp)
	jne	.L3490
	.loc 1 8731 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 12(%ebp)
.L3490:
	.loc 1 8733 0
	cmpl	$0, 12(%ebp)
	je	.L3492
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L3492
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L3492
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	je	.L3492
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L3492
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L3492
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$8, %eax
	jne	.L3499
.L3492:
	.loc 1 8734 0
	movl	$1, -292(%ebp)
	jmp	.L3500
.L3499:
	.loc 1 8736 0
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 8739 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-36(%ebp), %eax
	jbe	.L3501
	.loc 1 8741 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8742 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-36(%ebp), %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -288(%ebp)
	cmpl	$0, -288(%ebp)
	jg	.L3503
	movl	$1, -288(%ebp)
.L3503:
	movl	-288(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3501:
	.loc 1 8746 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L3504
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-36(%ebp), %eax
	jae	.L3504
	.loc 1 8757 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -284(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3507
	movl	$64, -280(%ebp)
	jmp	.L3509
.L3507:
	movl	$32, -280(%ebp)
.L3509:
	movl	-280(%ebp), %edx
	cmpl	%edx, -284(%ebp)
	jge	.L3504
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3511
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3504
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	je	.L3504
.L3511:
	.loc 1 8762 0
	movl	$1, -292(%ebp)
	jmp	.L3500
.L3504:
	.loc 1 8766 0
	movl	-40(%ebp), %ecx
	subl	$64, %ecx
	movl	%ecx, -296(%ebp)
	cmpl	$78, -296(%ebp)
	ja	.L3514
	movl	-296(%ebp), %eax
	sall	$2, %eax
	movl	.L3536@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3536:
	.long	.L3515@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3516@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3517@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3518@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3519@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3520@GOTOFF
	.long	.L3520@GOTOFF
	.long	.L3521@GOTOFF
	.long	.L3522@GOTOFF
	.long	.L3523@GOTOFF
	.long	.L3524@GOTOFF
	.long	.L3525@GOTOFF
	.long	.L3526@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3528@GOTOFF
	.long	.L3529@GOTOFF
	.long	.L3530@GOTOFF
	.long	.L3531@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3530@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3527@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3532@GOTOFF
	.long	.L3533@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3534@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3514@GOTOFF
	.long	.L3535@GOTOFF
	.text
.L3516:
	.loc 1 8778 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3537
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	12(%ebp), %eax
	jne	.L3537
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	label_tick@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	je	.L3540
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L3537
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L3537
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	jne	.L3537
.L3540:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L3544
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -276(%ebp)
	jmp	.L3546
.L3544:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -276(%ebp)
.L3546:
	movl	subst_low_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, -276(%ebp)
	jge	.L3537
	.loc 1 8786 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_last_set_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3537:
	.loc 1 8788 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -20(%ebp)
	.loc 1 8789 0
	cmpl	$0, -20(%ebp)
	je	.L3548
	.loc 1 8790 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3548:
	.loc 1 8792 0
	movl	nonzero_sign_valid@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L3514
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	je	.L3514
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-36(%ebp), %eax
	jne	.L3514
	.loc 1 8794 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	reg_sign_bit_copies@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3518:
	.loc 1 8800 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3514
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3556
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L3514
.L3556:
	.loc 1 8801 0
	movl	-36(%ebp), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	testl	%eax, %eax
	js	.L3558
	movl	-36(%ebp), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	addl	$1, %eax
	movl	%eax, -272(%ebp)
	jmp	.L3560
.L3558:
	movl	$1, -272(%ebp)
.L3560:
	movl	-272(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3515:
	.loc 1 8809 0
	movl	8(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	12(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%esi, %ecx
	andl	%eax, %ecx
	movl	%ecx, -48(%ebp)
	movl	%edi, %eax
	andl	%edx, %eax
	movl	%eax, -44(%ebp)
	.loc 1 8810 0
	cmpl	$64, -36(%ebp)
	ja	.L3561
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3679
	movl	%eax, %edx
	xorl	%eax, %eax
.L3679:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-48(%ebp), %eax
	movl	%edi, %edx
	andl	-44(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3561
	.loc 1 8812 0
	movl	-48(%ebp), %ecx
	movl	-44(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	12(%ebp), %esi
	movl	mode_mask_array@GOT(%ebx), %ecx
	movl	4(%ecx,%esi,8), %edi
	movl	(%ecx,%esi,8), %esi
	movl	%eax, %ecx
	andl	%esi, %ecx
	movl	%ecx, -48(%ebp)
	movl	%edx, %eax
	andl	%edi, %eax
	movl	%eax, -44(%ebp)
.L3561:
	.loc 1 8814 0
	movl	-48(%ebp), %eax
	orl	-44(%ebp), %eax
	testl	%eax, %eax
	je	.L3564
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -268(%ebp)
	jmp	.L3566
.L3564:
	movl	-36(%ebp), %edx
	movl	%edx, -268(%ebp)
.L3566:
	movl	-268(%ebp), %ecx
	movl	%ecx, -292(%ebp)
	jmp	.L3500
.L3517:
	.loc 1 8821 0
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L3567
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L3567
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L3567
	.loc 1 8823 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8824 0
	movl	-36(%ebp), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	addl	$1, %eax
	movl	-32(%ebp), %edi
	movl	%edi, -300(%ebp)
	movl	%eax, -264(%ebp)
	movl	-300(%ebp), %eax
	cmpl	%eax, -264(%ebp)
	jge	.L3571
	movl	-300(%ebp), %edx
	movl	%edx, -264(%ebp)
.L3571:
	movl	-264(%ebp), %ecx
	movl	%ecx, -292(%ebp)
	jmp	.L3500
.L3567:
	.loc 1 8830 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-36(%ebp), %eax
	jb	.L3572
	.loc 1 8832 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8833 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-36(%ebp), %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -260(%ebp)
	cmpl	$0, -260(%ebp)
	jg	.L3574
	movl	$1, -260(%ebp)
.L3574:
	movl	-260(%ebp), %esi
	movl	%esi, -292(%ebp)
	jmp	.L3500
.L3572:
	.loc 1 8850 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L3514
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3514
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$4, %al
	je	.L3578
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	$53, %al
	jne	.L3514
.L3578:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3514
	.loc 1 8854 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3535:
	.loc 1 8860 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3514
	.loc 1 8861 0
	movl	-36(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -324(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-328(%ebp), %esi
	movl	-324(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, -256(%ebp)
	movl	%edx, -252(%ebp)
	cmpl	$0, -252(%ebp)
	jg	.L3583
	cmpl	$0, -252(%ebp)
	js	.L3584
	cmpl	$0, -256(%ebp)
	ja	.L3583
.L3584:
	movl	$1, -256(%ebp)
	movl	$0, -252(%ebp)
.L3583:
	movl	-256(%ebp), %edi
	movl	%edi, -292(%ebp)
	jmp	.L3500
.L3533:
	.loc 1 8865 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %edx
	movl	-36(%ebp), %eax
	movl	%eax, %esi
	subl	%edx, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	addl	%eax, %esi
	movl	%esi, -292(%ebp)
	jmp	.L3500
.L3534:
	.loc 1 8870 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8871 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-36(%ebp), %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -244(%ebp)
	cmpl	$0, -244(%ebp)
	jg	.L3585
	movl	$1, -244(%ebp)
.L3585:
	movl	-244(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3528:
	.loc 1 8875 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3530:
	.loc 1 8881 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3514
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L3514
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -240(%ebp)
	movl	%ecx, -236(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -228(%ebp)
	movl	-228(%ebp), %esi
	cmpl	%esi, -236(%ebp)
	jg	.L3514
	movl	-228(%ebp), %edi
	cmpl	%edi, -236(%ebp)
	jl	.L3590
	movl	-232(%ebp), %eax
	cmpl	%eax, -240(%ebp)
	jae	.L3514
.L3590:
	.loc 1 8885 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8886 0
	movl	-32(%ebp), %eax
	movl	%eax, -216(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -212(%ebp)
	cmpl	$98, -40(%ebp)
	jne	.L3591
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -208(%ebp)
	movl	%edi, -204(%ebp)
	jmp	.L3593
.L3591:
	movl	-36(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -324(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-328(%ebp), %esi
	movl	-324(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, -208(%ebp)
	movl	%edi, -204(%ebp)
.L3593:
	movl	-216(%ebp), %eax
	movl	-212(%ebp), %edx
	subl	-208(%ebp), %eax
	sbbl	-204(%ebp), %edx
	movl	%eax, -200(%ebp)
	movl	%edx, -196(%ebp)
	cmpl	$0, -196(%ebp)
	js	.L3594
	cmpl	$0, -196(%ebp)
	jg	.L3596
	cmpl	$0, -200(%ebp)
	jbe	.L3594
.L3596:
	movl	-32(%ebp), %edx
	movl	%edx, -192(%ebp)
	cmpl	$98, -40(%ebp)
	jne	.L3597
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -188(%ebp)
	jmp	.L3599
.L3597:
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, -188(%ebp)
.L3599:
	movl	-192(%ebp), %esi
	subl	-188(%ebp), %esi
	movl	%esi, -220(%ebp)
	jmp	.L3600
.L3594:
	movl	$1, -220(%ebp)
.L3600:
	movl	-220(%ebp), %edi
	movl	%edi, -292(%ebp)
	jmp	.L3500
.L3521:
	.loc 1 8896 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8897 0
	cmpl	$64, -36(%ebp)
	jbe	.L3601
	.loc 1 8898 0
	cmpl	$1, -32(%ebp)
	jle	.L3603
	movl	-32(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -184(%ebp)
	jmp	.L3605
.L3603:
	movl	$1, -184(%ebp)
.L3605:
	movl	-184(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3601:
	.loc 1 8900 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 8901 0
	movl	-48(%ebp), %eax
	xorl	$1, %eax
	orl	-44(%ebp), %eax
	testl	%eax, %eax
	jne	.L3606
	.loc 1 8902 0
	movl	-36(%ebp), %edx
	movl	%edx, -292(%ebp)
	jmp	.L3500
.L3606:
	.loc 1 8904 0
	cmpl	$1, -32(%ebp)
	jle	.L3608
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3678
	movl	%eax, %edx
	xorl	%eax, %eax
.L3678:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-48(%ebp), %eax
	movl	%edi, %edx
	andl	-44(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3608
	.loc 1 8906 0
	subl	$1, -32(%ebp)
.L3608:
	.loc 1 8908 0
	movl	-32(%ebp), %ecx
	movl	%ecx, -292(%ebp)
	jmp	.L3500
.L3527:
	.loc 1 8914 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8915 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -28(%ebp)
	.loc 1 8916 0
	movl	-32(%ebp), %esi
	movl	%esi, -304(%ebp)
	movl	-28(%ebp), %edi
	movl	%edi, -180(%ebp)
	movl	-304(%ebp), %eax
	cmpl	%eax, -180(%ebp)
	jle	.L3611
	movl	-304(%ebp), %edx
	movl	%edx, -180(%ebp)
.L3611:
	movl	-180(%ebp), %ecx
	movl	%ecx, -292(%ebp)
	jmp	.L3500
.L3520:
	.loc 1 8924 0
	cmpl	$85, -40(%ebp)
	jne	.L3612
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3612
	cmpl	$64, -36(%ebp)
	ja	.L3612
	.loc 1 8927 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 8928 0
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3677
	movl	%eax, %edx
	xorl	%eax, %eax
.L3677:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-48(%ebp), %eax
	movl	%edi, %edx
	andl	-44(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3612
	.loc 1 8929 0
	movl	-48(%ebp), %eax
	xorl	$1, %eax
	orl	-44(%ebp), %eax
	testl	%eax, %eax
	je	.L3617
	movl	-48(%ebp), %eax
	orl	-44(%ebp), %eax
	testl	%eax, %eax
	je	.L3617
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -176(%ebp)
	jmp	.L3620
.L3617:
	movl	-36(%ebp), %esi
	movl	%esi, -176(%ebp)
.L3620:
	movl	-176(%ebp), %edi
	movl	%edi, -292(%ebp)
	jmp	.L3500
.L3612:
	.loc 1 8933 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8934 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -28(%ebp)
	.loc 1 8935 0
	movl	-32(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	-28(%ebp), %edx
	movl	%edx, -168(%ebp)
	movl	-308(%ebp), %ecx
	cmpl	%ecx, -168(%ebp)
	jle	.L3621
	movl	-308(%ebp), %esi
	movl	%esi, -168(%ebp)
.L3621:
	cmpl	$1, -168(%ebp)
	jle	.L3622
	movl	-32(%ebp), %edi
	movl	%edi, -312(%ebp)
	movl	-28(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-312(%ebp), %edx
	cmpl	%edx, -164(%ebp)
	jle	.L3624
	movl	-312(%ebp), %ecx
	movl	%ecx, -164(%ebp)
.L3624:
	movl	-164(%ebp), %esi
	subl	$1, %esi
	movl	%esi, -172(%ebp)
	jmp	.L3625
.L3622:
	movl	$1, -172(%ebp)
.L3625:
	movl	-172(%ebp), %edi
	movl	%edi, -24(%ebp)
	.loc 1 8948 0
	movl	-24(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3522:
	.loc 1 8956 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 8957 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -28(%ebp)
	.loc 1 8959 0
	movl	-32(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-36(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	subl	%edx, %eax
	movl	%ecx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	movl	%eax, -24(%ebp)
	.loc 1 8960 0
	cmpl	$0, -24(%ebp)
	jle	.L3626
	cmpl	$64, -36(%ebp)
	ja	.L3628
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3676
	movl	%eax, %edx
	xorl	%eax, %eax
.L3676:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-160(%ebp), %eax
	andl	%esi, %eax
	movl	-156(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3626
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -152(%ebp)
	movl	%edx, -148(%ebp)
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3675
	movl	%eax, %edx
	xorl	%eax, %eax
.L3675:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-152(%ebp), %eax
	andl	%esi, %eax
	movl	-148(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3626
.L3628:
	.loc 1 8966 0
	subl	$1, -24(%ebp)
.L3626:
	.loc 1 8968 0
	movl	-24(%ebp), %edi
	movl	%edi, -140(%ebp)
	cmpl	$0, -140(%ebp)
	jg	.L3631
	movl	$1, -140(%ebp)
.L3631:
	movl	-140(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3525:
	.loc 1 8974 0
	cmpl	$64, -36(%ebp)
	jbe	.L3632
	.loc 1 8975 0
	movl	$1, -292(%ebp)
	jmp	.L3500
.L3632:
	.loc 1 8976 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -136(%ebp)
	movl	%edx, -132(%ebp)
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3674
	movl	%eax, %edx
	xorl	%eax, %eax
.L3674:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-136(%ebp), %eax
	andl	%esi, %eax
	movl	-132(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3634
	.loc 1 8978 0
	movl	$1, -292(%ebp)
	jmp	.L3500
.L3634:
	.loc 1 8980 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3526:
	.loc 1 8984 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3523:
	.loc 1 8990 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -24(%ebp)
	.loc 1 8991 0
	cmpl	$1, -24(%ebp)
	jle	.L3636
	cmpl	$64, -36(%ebp)
	ja	.L3638
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3673
	movl	%eax, %edx
	xorl	%eax, %eax
.L3673:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-128(%ebp), %eax
	andl	%esi, %eax
	movl	-124(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3636
.L3638:
	.loc 1 8995 0
	subl	$1, -24(%ebp)
.L3636:
	.loc 1 8997 0
	movl	-24(%ebp), %edx
	movl	%edx, -292(%ebp)
	jmp	.L3500
.L3524:
	.loc 1 9000 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -24(%ebp)
	.loc 1 9001 0
	cmpl	$1, -24(%ebp)
	jle	.L3640
	cmpl	$64, -36(%ebp)
	ja	.L3642
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3672
	movl	%eax, %edx
	xorl	%eax, %eax
.L3672:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-120(%ebp), %eax
	andl	%esi, %eax
	movl	-116(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3640
.L3642:
	.loc 1 9005 0
	subl	$1, -24(%ebp)
.L3640:
	.loc 1 9007 0
	movl	-24(%ebp), %ecx
	movl	%ecx, -292(%ebp)
	jmp	.L3500
.L3531:
	.loc 1 9012 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 9013 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3644
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -112(%ebp)
	movl	%edi, -108(%ebp)
	cmpl	$0, -108(%ebp)
	js	.L3644
	cmpl	$0, -108(%ebp)
	jg	.L3647
	cmpl	$0, -112(%ebp)
	jbe	.L3644
.L3647:
	.loc 1 9015 0
	movl	-32(%ebp), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	addl	%esi, %edx
	adcl	%edi, %ecx
	movl	-36(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -100(%ebp)
	movl	%edx, -96(%ebp)
	movl	%ecx, -92(%ebp)
	movl	-100(%ebp), %eax
	cmpl	%eax, -92(%ebp)
	jl	.L3648
	movl	-100(%ebp), %edx
	cmpl	%edx, -92(%ebp)
	jg	.L3649
	movl	-104(%ebp), %ecx
	cmpl	%ecx, -96(%ebp)
	jbe	.L3648
.L3649:
	movl	-104(%ebp), %esi
	movl	-100(%ebp), %edi
	movl	%esi, -96(%ebp)
	movl	%edi, -92(%ebp)
.L3648:
	movl	-96(%ebp), %edi
	movl	%edi, -32(%ebp)
.L3644:
	.loc 1 9017 0
	movl	-32(%ebp), %eax
	movl	%eax, -292(%ebp)
	jmp	.L3500
.L3529:
	.loc 1 9021 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3650
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L3650
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -88(%ebp)
	movl	%ecx, -84(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -76(%ebp)
	movl	-76(%ebp), %esi
	cmpl	%esi, -84(%ebp)
	jl	.L3653
	movl	-76(%ebp), %edi
	cmpl	%edi, -84(%ebp)
	jg	.L3650
	movl	-80(%ebp), %eax
	cmpl	%eax, -88(%ebp)
	jb	.L3653
.L3650:
	.loc 1 9024 0
	movl	$1, -292(%ebp)
	jmp	.L3500
.L3653:
	.loc 1 9026 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 9027 0
	movl	-32(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -324(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	-328(%ebp), %esi
	movl	-324(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	cmpl	$0, -68(%ebp)
	jg	.L3655
	cmpl	$0, -68(%ebp)
	js	.L3656
	cmpl	$0, -72(%ebp)
	ja	.L3655
.L3656:
	movl	$1, -72(%ebp)
	movl	$0, -68(%ebp)
.L3655:
	movl	-72(%ebp), %edi
	movl	%edi, -292(%ebp)
	jmp	.L3500
.L3519:
	.loc 1 9030 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -32(%ebp)
	.loc 1 9031 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, -28(%ebp)
	.loc 1 9032 0
	movl	-32(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-28(%ebp), %edx
	movl	%edx, -60(%ebp)
	movl	-316(%ebp), %ecx
	cmpl	%ecx, -60(%ebp)
	jle	.L3657
	movl	-316(%ebp), %esi
	movl	%esi, -60(%ebp)
.L3657:
	movl	-60(%ebp), %edi
	movl	%edi, -292(%ebp)
	jmp	.L3500
.L3532:
	.loc 1 9040 0
	movl	$1, -48(%ebp)
	movl	$0, -44(%ebp)
	.loc 1 9041 0
	cmpl	$64, -36(%ebp)
	ja	.L3658
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3671
	movl	%eax, %edx
	xorl	%eax, %eax
.L3671:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-48(%ebp), %eax
	movl	%edi, %edx
	andl	-44(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3658
	.loc 1 9043 0
	movl	-48(%ebp), %ecx
	movl	-44(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	12(%ebp), %esi
	movl	mode_mask_array@GOT(%ebx), %ecx
	movl	4(%ecx,%esi,8), %edi
	movl	(%ecx,%esi,8), %esi
	movl	%eax, %ecx
	andl	%esi, %ecx
	movl	%ecx, -48(%ebp)
	movl	%edx, %eax
	andl	%edi, %eax
	movl	%eax, -44(%ebp)
.L3658:
	.loc 1 9045 0
	movl	-48(%ebp), %eax
	orl	-44(%ebp), %eax
	testl	%eax, %eax
	je	.L3661
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -56(%ebp)
	jmp	.L3663
.L3661:
	movl	-36(%ebp), %eax
	movl	%eax, -56(%ebp)
.L3663:
	movl	-56(%ebp), %edx
	movl	%edx, -292(%ebp)
	jmp	.L3500
.L3514:
	.loc 1 9057 0
	cmpl	$64, -36(%ebp)
	jbe	.L3664
	.loc 1 9058 0
	movl	$1, -292(%ebp)
	jmp	.L3500
.L3664:
	.loc 1 9060 0
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 9061 0
	movl	-36(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L3670
	movl	%eax, %edx
	xorl	%eax, %eax
.L3670:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	-48(%ebp), %eax
	movl	%edi, %edx
	andl	-44(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3666
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -52(%ebp)
	jmp	.L3668
.L3666:
	movl	$1, -52(%ebp)
.L3668:
	movl	-52(%ebp), %ecx
	movl	%ecx, -292(%ebp)
.L3500:
	movl	-292(%ebp), %eax
	.loc 1 9063 0
	addl	$348, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE51:
	.size	num_sign_bit_copies1, .-num_sign_bit_copies1
.globl extended_count
	.type	extended_count, @function
extended_count:
.LFB52:
	.loc 1 9081 0
	pushl	%ebp
.LCFI189:
	movl	%esp, %ebp
.LCFI190:
	pushl	%esi
.LCFI191:
	pushl	%ebx
.LCFI192:
	subl	$48, %esp
.LCFI193:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9082 0
	movl	nonzero_sign_valid@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L3681
	.loc 1 9083 0
	movl	$0, -20(%ebp)
	jmp	.L3683
.L3681:
	.loc 1 9085 0
	cmpl	$0, 16(%ebp)
	je	.L3684
	movl	12(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3686
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %esi
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	floor_log2_wide@PLT
	movl	%esi, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -12(%ebp)
	jmp	.L3688
.L3686:
	movl	$0, -12(%ebp)
.L3688:
	movl	-12(%ebp), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3689
.L3684:
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	subl	$1, %eax
	movl	%eax, -16(%ebp)
.L3689:
	movl	-16(%ebp), %edx
	movl	%edx, -20(%ebp)
.L3683:
	movl	-20(%ebp), %eax
	.loc 1 9091 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE52:
	.size	extended_count, .-extended_count
	.type	merge_outer_ops, @function
merge_outer_ops:
.LFB53:
	.loc 1 9122 0
	pushl	%ebp
.LCFI194:
	movl	%esp, %ebp
.LCFI195:
	pushl	%edi
.LCFI196:
	pushl	%esi
.LCFI197:
	pushl	%ebx
.LCFI198:
	subl	$92, %esp
.LCFI199:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	20(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 9123 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 9124 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 9126 0
	movl	28(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-32(%ebp), %esi
	movl	-28(%ebp), %edi
	movl	-72(%ebp), %eax
	andl	%esi, %eax
	movl	-68(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 9127 0
	movl	28(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -64(%ebp)
	movl	%edi, -60(%ebp)
	movl	-40(%ebp), %esi
	movl	-36(%ebp), %edi
	movl	-64(%ebp), %eax
	andl	%esi, %eax
	movl	-60(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 9130 0
	cmpl	$93, -20(%ebp)
	jne	.L3692
	.loc 1 9131 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %esi
	movl	-40(%ebp), %edx
	andl	%eax, %edx
	movl	-36(%ebp), %ecx
	andl	%esi, %ecx
	movl	%edx, -40(%ebp)
	movl	%ecx, -36(%ebp)
.L3692:
	.loc 1 9136 0
	cmpl	$1, 16(%ebp)
	je	.L3694
	cmpl	$57, -20(%ebp)
	jne	.L3696
.L3694:
	.loc 1 9137 0
	movl	$1, -52(%ebp)
	jmp	.L3697
.L3696:
	.loc 1 9139 0
	cmpl	$1, -20(%ebp)
	jne	.L3698
	.loc 1 9140 0
	movl	16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	jmp	.L3700
.L3698:
	.loc 1 9142 0
	movl	-20(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L3701
	.loc 1 9144 0
	movl	-20(%ebp), %edi
	subl	$85, %edi
	movl	%edi, -76(%ebp)
	cmpl	$10, -76(%ebp)
	ja	.L3700
	movl	-76(%ebp), %eax
	sall	$2, %eax
	movl	.L3709@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3709:
	.long	.L3704@GOTOFF
	.long	.L3700@GOTOFF
	.long	.L3705@GOTOFF
	.long	.L3700@GOTOFF
	.long	.L3700@GOTOFF
	.long	.L3700@GOTOFF
	.long	.L3700@GOTOFF
	.long	.L3700@GOTOFF
	.long	.L3706@GOTOFF
	.long	.L3707@GOTOFF
	.long	.L3708@GOTOFF
	.text
.L3706:
	.loc 1 9147 0
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %esi
	movl	-32(%ebp), %edx
	andl	%eax, %edx
	movl	-28(%ebp), %ecx
	andl	%esi, %ecx
	movl	%edx, -32(%ebp)
	movl	%ecx, -28(%ebp)
	.loc 1 9148 0
	jmp	.L3700
.L3707:
	.loc 1 9150 0
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %esi
	movl	-32(%ebp), %edx
	orl	%eax, %edx
	movl	-28(%ebp), %ecx
	orl	%esi, %ecx
	movl	%edx, -32(%ebp)
	movl	%ecx, -28(%ebp)
	.loc 1 9151 0
	jmp	.L3700
.L3708:
	.loc 1 9153 0
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %esi
	movl	-32(%ebp), %edx
	xorl	%eax, %edx
	movl	-28(%ebp), %ecx
	xorl	%esi, %ecx
	movl	%edx, -32(%ebp)
	movl	%ecx, -28(%ebp)
	.loc 1 9154 0
	jmp	.L3700
.L3704:
	.loc 1 9156 0
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	addl	%eax, -32(%ebp)
	adcl	%edx, -28(%ebp)
	.loc 1 9157 0
	jmp	.L3700
.L3705:
	.loc 1 9159 0
	movl	$1, -20(%ebp)
	jmp	.L3700
.L3701:
	.loc 1 9167 0
	cmpl	$85, -20(%ebp)
	je	.L3710
	cmpl	$85, 16(%ebp)
	je	.L3710
	cmpl	$87, -20(%ebp)
	je	.L3710
	cmpl	$87, 16(%ebp)
	jne	.L3714
.L3710:
	.loc 1 9168 0
	movl	$0, -52(%ebp)
	jmp	.L3697
.L3714:
	.loc 1 9172 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%edx, %ecx
	xorl	-36(%ebp), %ecx
	xorl	-40(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L3715
	.loc 1 9173 0
	movl	$0, -52(%ebp)
	jmp	.L3697
.L3715:
	.loc 1 9176 0
	movl	-20(%ebp), %eax
	movl	%eax, -80(%ebp)
	cmpl	$94, -80(%ebp)
	je	.L3718
	cmpl	$95, -80(%ebp)
	je	.L3719
	cmpl	$93, -80(%ebp)
	je	.L3717
	jmp	.L3700
.L3718:
	.loc 1 9179 0
	cmpl	$93, 16(%ebp)
	jne	.L3700
	.loc 1 9181 0
	movl	$57, -20(%ebp)
	.loc 1 9185 0
	jmp	.L3700
.L3719:
	.loc 1 9188 0
	cmpl	$93, 16(%ebp)
	jne	.L3722
	.loc 1 9190 0
	movl	$93, -20(%ebp)
	movl	32(%ebp), %eax
	movl	$1, (%eax)
	jmp	.L3700
.L3722:
	.loc 1 9193 0
	movl	$93, -20(%ebp)
	movl	-32(%ebp), %ecx
	movl	-28(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	12(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	.loc 1 9194 0
	jmp	.L3700
.L3717:
	.loc 1 9197 0
	cmpl	$94, 16(%ebp)
	jne	.L3725
	.loc 1 9199 0
	movl	$57, -20(%ebp)
	jmp	.L3700
.L3725:
	.loc 1 9202 0
	movl	32(%ebp), %eax
	movl	$1, (%eax)
.L3700:
	.loc 1 9209 0
	movl	28(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -48(%ebp)
	movl	%edi, -44(%ebp)
	movl	-32(%ebp), %esi
	movl	-28(%ebp), %edi
	movl	-48(%ebp), %eax
	andl	%esi, %eax
	movl	-44(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 9210 0
	movl	-32(%ebp), %eax
	orl	-28(%ebp), %eax
	testl	%eax, %eax
	jne	.L3727
	cmpl	$94, -20(%ebp)
	je	.L3729
	cmpl	$95, -20(%ebp)
	je	.L3729
	cmpl	$85, -20(%ebp)
	jne	.L3727
.L3729:
	.loc 1 9212 0
	movl	$1, -20(%ebp)
	.loc 1 9210 0
	jmp	.L3732
.L3727:
	.loc 1 9213 0
	movl	-32(%ebp), %eax
	orl	-28(%ebp), %eax
	testl	%eax, %eax
	jne	.L3733
	cmpl	$93, -20(%ebp)
	jne	.L3733
	.loc 1 9214 0
	movl	$57, -20(%ebp)
	.loc 1 9213 0
	jmp	.L3732
.L3733:
	.loc 1 9215 0
	movl	-32(%ebp), %esi
	movl	-28(%ebp), %edi
	movl	28(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L3732
	cmpl	$93, -20(%ebp)
	jne	.L3732
	.loc 1 9217 0
	movl	$1, -20(%ebp)
.L3732:
	.loc 1 9222 0
	movl	28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 9224 0
	movl	8(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 9225 0
	movl	12(%ebp), %ecx
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	.loc 1 9227 0
	movl	$1, -52(%ebp)
.L3697:
	movl	-52(%ebp), %eax
	.loc 1 9228 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE53:
	.size	merge_outer_ops, .-merge_outer_ops
	.type	simplify_shift_const, @function
simplify_shift_const:
.LFB54:
	.loc 1 9245 0
	pushl	%ebp
.LCFI200:
	movl	%esp, %ebp
.LCFI201:
	pushl	%edi
.LCFI202:
	pushl	%esi
.LCFI203:
	pushl	%ebx
.LCFI204:
	subl	$284, %esp
.LCFI205:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9246 0
	movl	12(%ebp), %eax
	movl	%eax, -80(%ebp)
	.loc 1 9249 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 9252 0
	movl	-68(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -252(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3740
	movl	$7, -248(%ebp)
	jmp	.L3742
.L3740:
	movl	$3, -248(%ebp)
.L3742:
	movl	-252(%ebp), %eax
	addl	-248(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3743
	movl	$8, -240(%ebp)
	jmp	.L3745
.L3743:
	movl	$4, -240(%ebp)
.L3745:
	movl	-244(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-240(%ebp)
	movl	%eax, -56(%ebp)
	.loc 1 9254 0
	movl	$1, -84(%ebp)
	.loc 1 9255 0
	movl	$0, -104(%ebp)
	movl	$0, -100(%ebp)
	.loc 1 9257 0
	movl	$0, -88(%ebp)
	.loc 1 9265 0
	movl	-68(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	andl	%eax, 24(%ebp)
	.loc 1 9271 0
	cmpl	$0, 24(%ebp)
	js	.L3746
	movl	-68(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	24(%ebp), %eax
	jg	.L3748
.L3746:
	.loc 1 9273 0
	cmpl	$0, 8(%ebp)
	je	.L3749
	.loc 1 9274 0
	movl	8(%ebp), %edx
	movl	%edx, -236(%ebp)
	jmp	.L3751
.L3749:
	.loc 1 9276 0
	movl	24(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -236(%ebp)
	jmp	.L3751
.L3748:
	.loc 1 9279 0
	movl	24(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 9284 0
	jmp	.L4026
.L3753:
	.loc 1 9288 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L3754
	.loc 1 9289 0
	movl	20(%ebp), %ecx
	movl	%ecx, -236(%ebp)
	jmp	.L3751
.L3754:
	.loc 1 9293 0
	movl	-88(%ebp), %eax
	testl	%eax, %eax
	jne	.L3756
	.loc 1 9297 0
	cmpl	$101, 12(%ebp)
	jne	.L3758
.LBB97:
	.loc 1 9299 0
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -44(%ebp)
	.loc 1 9300 0
	movl	$98, 12(%ebp)
	.loc 1 9301 0
	movl	16(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$7, %eax
	je	.L3760
	movl	16(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L3762
.L3760:
	.loc 1 9302 0
	movl	16(%ebp), %eax
	movl	mode_unit_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3763
	movl	16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	16(%ebp), %edx
	movl	mode_unit_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %edx
	movzbw	%cl, %ax
	divb	%dl
	movzbl	%al, %eax
	movl	%eax, -232(%ebp)
	jmp	.L3765
.L3763:
	movl	$0, -232(%ebp)
.L3765:
	movl	-44(%ebp), %eax
	movl	$0, %edx
	divl	-232(%ebp)
	subl	-76(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 9301 0
	jmp	.L3758
.L3762:
	.loc 1 9304 0
	movl	-76(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -76(%ebp)
.L3758:
.LBE97:
	.loc 1 9311 0
	cmpl	$99, 12(%ebp)
	je	.L3766
	cmpl	$100, 12(%ebp)
	je	.L3766
	cmpl	$98, 12(%ebp)
	jne	.L3769
.L3766:
	movl	16(%ebp), %eax
	movl	%eax, -228(%ebp)
	jmp	.L3770
.L3769:
	movl	-68(%ebp), %edx
	movl	%edx, -228(%ebp)
.L3770:
	movl	-228(%ebp), %ecx
	movl	%ecx, -64(%ebp)
	.loc 1 9325 0
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jae	.L3771
	.loc 1 9327 0
	cmpl	$99, 12(%ebp)
	jne	.L3773
	.loc 1 9328 0
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	movl	%eax, -76(%ebp)
	jmp	.L3771
.L3773:
	.loc 1 9329 0
	cmpl	$98, 12(%ebp)
	je	.L3775
	cmpl	$101, 12(%ebp)
	jne	.L3777
.L3775:
	.loc 1 9330 0
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %edx
	movl	-76(%ebp), %eax
	movl	%edx, %ecx
	movl	$0, %edx
	divl	%ecx
	movl	%edx, -76(%ebp)
	.loc 1 9329 0
	jmp	.L3771
.L3777:
	.loc 1 9335 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9336 0
	movl	$0, -76(%ebp)
	.loc 1 9337 0
	jmp	.L3756
.L3771:
	.loc 1 9343 0
	cmpl	$99, 12(%ebp)
	jne	.L3778
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jne	.L3778
	.loc 1 9347 0
	movl	$0, -76(%ebp)
	.loc 1 9348 0
	jmp	.L3756
.L3778:
	.loc 1 9356 0
	cmpl	$99, 12(%ebp)
	jne	.L3781
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %ecx
	addl	-76(%ebp), %ecx
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	%eax, %ecx
	jb	.L3781
	.loc 1 9359 0
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	movl	%eax, -76(%ebp)
.L3781:
	.loc 1 9365 0
	movl	-64(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3784
	cmpl	$99, 12(%ebp)
	jne	.L3784
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -224(%ebp)
	movl	%edx, -220(%ebp)
	movl	-64(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4031
	movl	%eax, %edx
	xorl	%eax, %eax
.L4031:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-224(%ebp), %eax
	andl	%esi, %eax
	movl	-220(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3784
	.loc 1 9370 0
	movl	$100, 12(%ebp)
.L3784:
	.loc 1 9372 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	subl	$58, %eax
	movl	%eax, -256(%ebp)
	cmpl	$85, -256(%ebp)
	ja	.L3756
	movl	-256(%ebp), %eax
	sall	$2, %eax
	movl	.L3804@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L3804:
	.long	.L3789@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3790@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3791@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3792@GOTOFF
	.long	.L3793@GOTOFF
	.long	.L3794@GOTOFF
	.long	.L3795@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3796@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3797@GOTOFF
	.long	.L3797@GOTOFF
	.long	.L3797@GOTOFF
	.long	.L3798@GOTOFF
	.long	.L3799@GOTOFF
	.long	.L3799@GOTOFF
	.long	.L3800@GOTOFF
	.long	.L3799@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3801@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3802@GOTOFF
	.long	.L3802@GOTOFF
	.long	.L3803@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3756@GOTOFF
	.long	.L3802@GOTOFF
	.long	.L3802@GOTOFF
	.text
.L3802:
	.loc 1 9378 0
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -48(%ebp)
	.loc 1 9379 0
	movl	-48(%ebp), %eax
	cmpl	20(%ebp), %eax
	je	.L3756
	.loc 1 9381 0
	movl	-48(%ebp), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9382 0
	jmp	.L3752
.L3791:
	.loc 1 9390 0
	cmpl	$99, 12(%ebp)
	je	.L3807
	cmpl	$100, 12(%ebp)
	jne	.L3756
.L3807:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	jne	.L3756
	movl	20(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L3756
	movl	-68(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-76(%ebp), %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -60(%ebp)
	cmpl	$52, -60(%ebp)
	je	.L3756
	.loc 1 9396 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	jne	.L3813
	movl	-76(%ebp), %eax
	shrl	$3, %eax
	movl	%eax, -216(%ebp)
	movl	$0, -212(%ebp)
	jmp	.L3815
.L3813:
	movl	$0, -216(%ebp)
	movl	$0, -212(%ebp)
.L3815:
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	-216(%ebp), %eax
	movl	-212(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -48(%ebp)
	.loc 1 9400 0
	cmpl	$99, 12(%ebp)
	jne	.L3816
	movl	$130, -208(%ebp)
	jmp	.L3818
.L3816:
	movl	$131, -208(%ebp)
.L3818:
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-208(%ebp), %edx
	movl	%edx, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9402 0
	movl	$0, -76(%ebp)
	.loc 1 9403 0
	jmp	.L3752
.L3789:
	.loc 1 9412 0
	cmpl	$99, 12(%ebp)
	je	.L3819
	cmpl	$100, 12(%ebp)
	jne	.L3756
.L3819:
	movl	-68(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	-76(%ebp), %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -60(%ebp)
	cmpl	$52, -60(%ebp)
	je	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-60(%ebp), %eax
	jne	.L3756
	.loc 1 9421 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -48(%ebp)
	.loc 1 9422 0
	movl	-76(%ebp), %eax
	shrl	$3, %eax
	movl	%eax, %edx
	movl	$0, %ecx
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	-48(%ebp), %edx
	addl	$4, %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST
	.loc 1 9427 0
	cmpl	$99, 12(%ebp)
	jne	.L3824
	movl	$130, -204(%ebp)
	jmp	.L3826
.L3824:
	movl	$131, -204(%ebp)
.L3826:
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-204(%ebp), %ecx
	movl	%ecx, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9429 0
	movl	$0, -76(%ebp)
	.loc 1 9430 0
	jmp	.L3752
.L3790:
	.loc 1 9438 0
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -200(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3830
	movl	$7, -196(%ebp)
	jmp	.L3832
.L3830:
	movl	$3, -196(%ebp)
.L3832:
	movl	-200(%ebp), %eax
	addl	-196(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3833
	movl	$8, -188(%ebp)
	jmp	.L3835
.L3833:
	movl	$4, -188(%ebp)
.L3835:
	movl	-192(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-188(%ebp)
	cmpl	-56(%ebp), %eax
	jne	.L3756
	.loc 1 9445 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9446 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-68(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L3752
	.loc 1 9447 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -68(%ebp)
	.loc 1 9448 0
	jmp	.L3752
.L3795:
	.loc 1 9456 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L3756
	.loc 1 9459 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	gen_binary
	movl	%eax, 20(%ebp)
	.loc 1 9462 0
	jmp	.L3752
.L3796:
	.loc 1 9468 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L3756
	.loc 1 9471 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_binary
	movl	%eax, 20(%ebp)
	.loc 1 9474 0
	jmp	.L3752
.L3800:
	.loc 1 9484 0
	cmpl	$100, 12(%ebp)
	jne	.L3799
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3799
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jb	.L3799
	.loc 1 9489 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9490 0
	jmp	.L3752
.L3799:
	.loc 1 9500 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3848
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L3848
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -184(%ebp)
	movl	%ecx, -180(%ebp)
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %ecx
	movl	%ecx, -176(%ebp)
	movl	$0, -172(%ebp)
	movl	-172(%ebp), %eax
	cmpl	%eax, -180(%ebp)
	jg	.L3848
	movl	-172(%ebp), %edx
	cmpl	%edx, -180(%ebp)
	jl	.L3852
	movl	-176(%ebp), %ecx
	cmpl	%ecx, -184(%ebp)
	jae	.L3848
.L3852:
	movl	16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3848
	movl	-68(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3848
.LBB98:
	.loc 1 9506 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -40(%ebp)
	.loc 1 9507 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 9518 0
	cmpl	$97, 12(%ebp)
	jne	.L3855
	cmpl	$99, -40(%ebp)
	jne	.L3855
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3855
	.loc 1 9525 0
	movl	-68(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-36(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4030
	movl	%eax, %edx
	xorl	%eax, %eax
.L4030:
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%esi, %ecx
	andl	%eax, %ecx
	movl	%ecx, -96(%ebp)
	movl	%edi, %eax
	andl	%edx, %eax
	movl	%eax, -92(%ebp)
	.loc 1 9528 0
	movl	20(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, 20(%ebp)
	.loc 1 9530 0
	movl	-76(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$97, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, 20(%ebp)
	.loc 1 9532 0
	movl	-36(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 9533 0
	movl	$99, 12(%ebp)
	.loc 1 9534 0
	jmp	.L3752
.L3855:
	.loc 1 9544 0
	cmpl	$99, 12(%ebp)
	jne	.L3859
	cmpl	$97, -40(%ebp)
	jne	.L3859
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-64(%ebp), %eax
	jne	.L3859
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	cmpl	-36(%ebp), %eax
	jbe	.L3859
	.loc 1 9549 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9551 0
	movl	-36(%ebp), %edx
	movl	-76(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -72(%ebp)
	.loc 1 9552 0
	cmpl	$0, -72(%ebp)
	jns	.L3864
	.loc 1 9553 0
	movl	-72(%ebp), %eax
	negl	%eax
	movl	%eax, -76(%ebp)
	movl	$97, 12(%ebp)
	jmp	.L3752
.L3864:
	.loc 1 9555 0
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 9557 0
	jmp	.L3752
.L3859:
	.loc 1 9575 0
	movl	12(%ebp), %eax
	cmpl	-40(%ebp), %eax
	jne	.L3867
	.loc 1 9577 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	16(%ebp), %eax
	je	.L3869
	cmpl	$99, 12(%ebp)
	je	.L3756
	cmpl	$100, 12(%ebp)
	je	.L3756
	cmpl	$98, 12(%ebp)
	je	.L3756
.L3869:
	.loc 1 9582 0
	movl	-36(%ebp), %eax
	addl	%eax, -76(%ebp)
	.loc 1 9583 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9584 0
	jmp	.L3752
.L3867:
	.loc 1 9587 0
	cmpl	$99, 12(%ebp)
	je	.L3756
	cmpl	$98, 12(%ebp)
	jne	.L3874
	cmpl	$99, -40(%ebp)
	je	.L3756
.L3874:
	movl	-68(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3756
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	16(%ebp), %eax
	je	.L3877
	cmpl	$99, -40(%ebp)
	je	.L3756
	cmpl	$100, -40(%ebp)
	je	.L3756
	cmpl	$98, -40(%ebp)
	je	.L3756
	cmpl	$98, 12(%ebp)
	je	.L3756
.L3877:
	.loc 1 9600 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -32(%ebp)
	.loc 1 9602 0
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -32(%ebp)
	.loc 1 9607 0
	cmpl	$0, -32(%ebp)
	je	.L3756
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	leal	-88(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	$93, 8(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_outer_ops
	testl	%eax, %eax
	je	.L3756
	.loc 1 9616 0
	movl	-76(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 9617 0
	cmpl	$99, 12(%ebp)
	je	.L3885
	cmpl	$100, 12(%ebp)
	jne	.L3887
.L3885:
	movl	$1, -164(%ebp)
	jmp	.L3888
.L3887:
	movl	$0, -164(%ebp)
.L3888:
	movzbl	-164(%ebp), %eax
	movl	%eax, %ecx
	xorl	$1, %ecx
	movb	%cl, -157(%ebp)
	cmpl	$99, -40(%ebp)
	je	.L3889
	cmpl	$100, -40(%ebp)
	jne	.L3891
.L3889:
	movl	$1, -156(%ebp)
	jmp	.L3892
.L3891:
	movl	$0, -156(%ebp)
.L3892:
	movzbl	-156(%ebp), %eax
	xorb	-157(%ebp), %al
	testb	%al, %al
	je	.L3893
	.loc 1 9619 0
	movl	-72(%ebp), %eax
	addl	-36(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3895
.L3893:
	.loc 1 9621 0
	movl	-72(%ebp), %eax
	subl	-36(%ebp), %eax
	movl	%eax, -72(%ebp)
.L3895:
	.loc 1 9627 0
	cmpl	$0, -72(%ebp)
	jle	.L3896
	cmpl	$98, -40(%ebp)
	jne	.L3898
	cmpl	$97, 12(%ebp)
	je	.L3900
.L3898:
	cmpl	$99, -40(%ebp)
	jne	.L3896
	cmpl	$100, 12(%ebp)
	jne	.L3896
.L3900:
	.loc 1 9630 0
	movl	-40(%ebp), %eax
	movl	%eax, 12(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 9627 0
	jmp	.L3902
.L3896:
	.loc 1 9631 0
	cmpl	$0, -72(%ebp)
	jns	.L3903
	.loc 1 9632 0
	movl	-40(%ebp), %eax
	movl	%eax, 12(%ebp)
	movl	-72(%ebp), %eax
	negl	%eax
	movl	%eax, -76(%ebp)
	jmp	.L3902
.L3903:
	.loc 1 9634 0
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
.L3902:
	.loc 1 9636 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9637 0
	jmp	.L3752
.L3848:
.LBE98:
	.loc 1 9644 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	cmpl	12(%ebp), %eax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3756
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	je	.L3756
	.loc 1 9651 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9652 0
	movl	$0, -76(%ebp)
	.loc 1 9653 0
	jmp	.L3752
.L3798:
	.loc 1 9659 0
	movl	-68(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9661 0
	jmp	.L3752
.L3797:
	.loc 1 9673 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$94, %ax
	jne	.L3909
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3909
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3909
	cmpl	$100, 12(%ebp)
	je	.L3913
	cmpl	$99, 12(%ebp)
	jne	.L3909
.L3913:
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3909
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3909
	.loc 1 9681 0
	movl	$0, -76(%ebp)
	.loc 1 9682 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$116, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9685 0
	cmpl	$99, 12(%ebp)
	jne	.L3752
	.loc 1 9686 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$87, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9688 0
	jmp	.L3752
.L3909:
	.loc 1 9697 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3919
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	je	.L3919
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3919
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %esi
	leal	-88(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 8(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_outer_ops
	testl	%eax, %eax
	je	.L3919
	.loc 1 9705 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9706 0
	jmp	.L3752
.L3919:
.LBB99:
	.loc 1 9714 0
	movl	-76(%ebp), %edx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -28(%ebp)
	.loc 1 9716 0
	movl	-76(%ebp), %edx
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -24(%ebp)
	.loc 1 9718 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_binary
	movl	%eax, 20(%ebp)
	.loc 1 9719 0
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	apply_distributive_law
	movl	%eax, 20(%ebp)
	.loc 1 9721 0
	movl	$0, -76(%ebp)
	.loc 1 9723 0
	jmp	.L3756
.L3801:
.LBE99:
	.loc 1 9730 0
	cmpl	$100, 12(%ebp)
	jne	.L3756
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	16(%ebp), %eax
	jne	.L3756
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3756
	movl	16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3756
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	$2, %eax
	jle	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3756
	leal	-88(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$1, 12(%esp)
	movl	$0, 16(%esp)
	movl	$95, 8(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_outer_ops
	testl	%eax, %eax
	je	.L3756
	.loc 1 9743 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9744 0
	movl	$0, -76(%ebp)
	.loc 1 9745 0
	jmp	.L3752
.L3794:
	.loc 1 9752 0
	cmpl	$100, 12(%ebp)
	jne	.L3933
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3933
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3933
	.loc 1 9756 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9757 0
	movl	$0, -76(%ebp)
	.loc 1 9758 0
	jmp	.L3752
.L3933:
	.loc 1 9763 0
	cmpl	$97, 12(%ebp)
	jne	.L3756
	leal	-88(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 16(%esp)
	movl	$87, 8(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_outer_ops
	testl	%eax, %eax
	je	.L3756
	.loc 1 9768 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9769 0
	jmp	.L3752
.L3792:
	.loc 1 9777 0
	cmpl	$100, 12(%ebp)
	jne	.L3940
	movl	16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3940
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3940
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %ecx
	xorl	$1, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3940
	leal	-88(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$1, 12(%esp)
	movl	$0, 16(%esp)
	movl	$95, 8(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_outer_ops
	testl	%eax, %eax
	je	.L3940
	.loc 1 9785 0
	movl	$0, -76(%ebp)
	.loc 1 9786 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9787 0
	jmp	.L3752
.L3940:
	.loc 1 9796 0
	cmpl	$99, 12(%ebp)
	je	.L3946
	cmpl	$100, 12(%ebp)
	jne	.L3948
.L3946:
	cmpl	$63, -76(%ebp)
	ja	.L3948
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	-76(%ebp), %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4029
	movl	%edx, %eax
	xorl	%edx, %edx
.L4029:
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3948
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -152(%ebp)
	movl	%edx, -148(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-152(%ebp), %eax
	andl	%esi, %eax
	movl	-148(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3948
	.loc 1 9802 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9803 0
	jmp	.L3752
.L3948:
	.loc 1 9805 0
	cmpl	$99, 12(%ebp)
	je	.L3952
	cmpl	$100, 12(%ebp)
	jne	.L3954
.L3952:
	cmpl	$63, -76(%ebp)
	ja	.L3954
	movl	16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3954
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	-76(%ebp), %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4028
	movl	%edx, %eax
	xorl	%edx, %edx
.L4028:
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3954
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-144(%ebp), %eax
	andl	%esi, %eax
	movl	-140(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3954
	.loc 1 9814 0
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9815 0
	jmp	.L3752
.L3954:
	.loc 1 9819 0
	cmpl	$97, 12(%ebp)
	jne	.L3756
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$97, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	je	.L3756
	movl	-48(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	leal	-88(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	$85, 8(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	merge_outer_ops
	testl	%eax, %eax
	je	.L3756
	.loc 1 9828 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9829 0
	jmp	.L3752
.L3793:
	.loc 1 9841 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L3756
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-76(%ebp), %eax
	jne	.L3756
	cmpl	$100, 12(%ebp)
	je	.L3968
	cmpl	$99, 12(%ebp)
	jne	.L3756
.L3968:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L3756
	.loc 1 9851 0
	movl	$0, -76(%ebp)
	.loc 1 9852 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	20(%ebp), %eax
	movl	12(%eax), %edx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$115, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9855 0
	cmpl	$99, 12(%ebp)
	jne	.L3752
	.loc 1 9856 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$87, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9858 0
	jmp	.L3752
.L3803:
	.loc 1 9865 0
	cmpl	$100, 12(%ebp)
	jne	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3756
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -136(%ebp)
	movl	%ecx, -132(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -128(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -124(%ebp)
	movl	-124(%ebp), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L3756
	movl	-124(%ebp), %edx
	cmpl	%edx, -132(%ebp)
	jg	.L3979
	movl	-128(%ebp), %ecx
	cmpl	%ecx, -136(%ebp)
	jb	.L3756
.L3979:
.LBB100:
	.loc 1 9872 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 9874 0
	movl	-76(%ebp), %esi
	movl	$0, %edi
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	-20(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -20(%ebp)
	.loc 1 9879 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$132, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 20(%ebp)
	.loc 1 9880 0
	movl	$0, -76(%ebp)
.L3752:
.L4026:
.LBE100:
	.loc 1 9284 0
	cmpl	$0, -76(%ebp)
	jne	.L3753
.L3756:
	.loc 1 9897 0
	cmpl	$99, 12(%ebp)
	je	.L3980
	cmpl	$100, 12(%ebp)
	je	.L3980
	cmpl	$98, 12(%ebp)
	jne	.L3983
.L3980:
	movl	16(%ebp), %eax
	movl	%eax, -120(%ebp)
	jmp	.L3984
.L3983:
	movl	-68(%ebp), %edx
	movl	%edx, -120(%ebp)
.L3984:
	movl	-120(%ebp), %ecx
	movl	%ecx, -64(%ebp)
	.loc 1 9910 0
	cmpl	$0, 8(%ebp)
	je	.L3985
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	jne	.L3985
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3985
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L3985
	.loc 1 9913 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 9910 0
	jmp	.L3990
.L3985:
	.loc 1 9915 0
	movl	-76(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -52(%ebp)
.L3990:
	.loc 1 9917 0
	cmpl	$0, 8(%ebp)
	je	.L3991
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3991
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-64(%ebp), %eax
	jne	.L3991
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	20(%ebp), %eax
	jne	.L3991
	.loc 1 9920 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 9917 0
	jmp	.L3996
.L3991:
	.loc 1 9921 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-64(%ebp), %eax
	je	.L3996
	.loc 1 9922 0
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, 20(%ebp)
.L3996:
	.loc 1 9925 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L3998
	.loc 1 9926 0
	cmpl	$0, 8(%ebp)
	je	.L4000
	movl	8(%ebp), %eax
	movl	%eax, -116(%ebp)
	jmp	.L4002
.L4000:
	movl	20(%ebp), %edx
	movl	%edx, -116(%ebp)
.L4002:
	movl	-116(%ebp), %ecx
	movl	%ecx, -236(%ebp)
	jmp	.L3751
.L3998:
	.loc 1 9928 0
	movl	-52(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -48(%ebp)
	.loc 1 9929 0
	cmpl	$0, -48(%ebp)
	je	.L4003
	.loc 1 9930 0
	movl	-48(%ebp), %eax
	movl	%eax, 8(%ebp)
	jmp	.L4005
.L4003:
	.loc 1 9932 0
	movl	-52(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 8(%ebp)
.L4005:
	.loc 1 9939 0
	movl	-84(%ebp), %eax
	cmpl	$1, %eax
	je	.L4006
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	cmpl	12(%ebp), %eax
	jne	.L4006
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4006
	.loc 1 9941 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_shift_const
	movl	%eax, 8(%ebp)
.L4006:
	.loc 1 9946 0
	cmpl	$100, -80(%ebp)
	jne	.L4010
	movl	16(%ebp), %eax
	cmpl	-64(%ebp), %eax
	je	.L4010
	.loc 1 9947 0
	movl	16(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	24(%ebp), %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4027
	movl	%edx, %eax
	xorl	%edx, %edx
.L4027:
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, 8(%ebp)
.L4010:
	.loc 1 9951 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, 8(%ebp)
	.loc 1 9955 0
	movl	-88(%ebp), %eax
	testl	%eax, %eax
	je	.L4013
	.loc 1 9956 0
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
.L4013:
	.loc 1 9958 0
	movl	-84(%ebp), %eax
	cmpl	$1, %eax
	je	.L4015
	.loc 1 9960 0
	movl	16(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$63, %ax
	ja	.L4017
	.loc 1 9961 0
	movl	-104(%ebp), %edx
	movl	-100(%ebp), %ecx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%eax, -104(%ebp)
	movl	%edx, -100(%ebp)
.L4017:
	.loc 1 9963 0
	movl	-84(%ebp), %eax
	cmpl	$93, %eax
	jne	.L4019
	.loc 1 9964 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, 8(%ebp)
	jmp	.L4015
.L4019:
	.loc 1 9965 0
	movl	-84(%ebp), %eax
	cmpl	$57, %eax
	jne	.L4021
	.loc 1 9968 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 8(%ebp)
	jmp	.L4015
.L4021:
	.loc 1 9969 0
	movl	-84(%ebp), %eax
	movl	%eax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	jne	.L4023
	.loc 1 9970 0
	movl	-84(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	simplify_gen_unary@PLT
	movl	%eax, 8(%ebp)
	jmp	.L4015
.L4023:
	.loc 1 9972 0
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	-84(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_binary
	movl	%eax, 8(%ebp)
.L4015:
	.loc 1 9975 0
	movl	8(%ebp), %eax
	movl	%eax, -236(%ebp)
.L3751:
	movl	-236(%ebp), %eax
	.loc 1 9976 0
	addl	$284, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE54:
	.size	simplify_shift_const, .-simplify_shift_const
	.type	recog_for_combine, @function
recog_for_combine:
.LFB55:
	.loc 1 9996 0
	pushl	%ebp
.LCFI206:
	movl	%esp, %ebp
.LCFI207:
	pushl	%esi
.LCFI208:
	pushl	%ebx
.LCFI209:
	subl	$64, %esp
.LCFI210:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9997 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 9999 0
	movl	$0, -40(%ebp)
	.loc 1 10001 0
	movl	$0, -24(%ebp)
	.loc 1 10007 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L4033
	.loc 1 10008 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -28(%ebp)
	jmp	.L4035
.L4036:
	.loc 1 10009 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L4037
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4037
	.loc 1 10011 0
	movl	$-1, -48(%ebp)
	jmp	.L4040
.L4037:
	.loc 1 10008 0
	subl	$1, -28(%ebp)
.L4035:
	cmpl	$0, -28(%ebp)
	jns	.L4036
.L4033:
	.loc 1 10015 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	shallow_copy_rtx@PLT
	movl	%eax, -20(%ebp)
	.loc 1 10016 0
	movl	-20(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 10017 0
	movl	-20(%ebp), %eax
	movl	$0, 68(%eax)
	.loc 1 10019 0
	leal	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	recog@PLT
	movl	%eax, -32(%ebp)
	.loc 1 10026 0
	cmpl	$0, -32(%ebp)
	jns	.L4041
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	check_asm_operands@PLT
	testl	%eax, %eax
	jne	.L4041
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L4041
.LBB101:
	.loc 1 10031 0
	movl	$0, -16(%ebp)
	movl	$0, -28(%ebp)
	jmp	.L4045
.L4046:
	.loc 1 10032 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	je	.L4047
	.loc 1 10034 0
	movl	-28(%ebp), %eax
	cmpl	-16(%ebp), %eax
	je	.L4049
	.loc 1 10035 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %ecx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	leal	4(%eax), %edx
	movl	-16(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	do_SUBST
.L4049:
	.loc 1 10036 0
	addl	$1, -16(%ebp)
.L4047:
	.loc 1 10031 0
	addl	$1, -28(%ebp)
.L4045:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	jg	.L4046
	.loc 1 10039 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_SUBST_INT
	.loc 1 10041 0
	cmpl	$1, -16(%ebp)
	jne	.L4052
	.loc 1 10042 0
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
.L4052:
	.loc 1 10044 0
	movl	-20(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 10045 0
	leal	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	recog@PLT
	movl	%eax, -32(%ebp)
.L4041:
.LBE101:
	.loc 1 10049 0
	cmpl	$0, -32(%ebp)
	jns	.L4054
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L4054
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	set_noop_p@PLT
	testl	%eax, %eax
	je	.L4054
	.loc 1 10050 0
	movl	$2147483647, -32(%ebp)
	movl	$0, -40(%ebp)
.L4054:
	.loc 1 10054 0
	movl	-40(%ebp), %eax
	testl	%eax, %eax
	je	.L4058
.LBB102:
	.loc 1 10056 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L4060
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	addl	%eax, %edx
	movl	%edx, -44(%ebp)
	jmp	.L4062
.L4060:
	movl	-40(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -44(%ebp)
.L4062:
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	rtvec_alloc@PLT
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, -12(%ebp)
	.loc 1 10062 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L4063
	.loc 1 10063 0
	movl	$0, -28(%ebp)
	jmp	.L4065
.L4066:
	.loc 1 10064 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %esi
	movl	-28(%ebp), %ecx
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, 4(%esi,%ecx,4)
	.loc 1 10063 0
	addl	$1, -28(%ebp)
.L4065:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	jg	.L4066
	jmp	.L4068
.L4063:
	.loc 1 10066 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%edx)
.L4068:
	.loc 1 10068 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	add_clobbers@PLT
	.loc 1 10070 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -28(%ebp)
	.loc 1 10071 0
	jmp	.L4069
.L4070:
	.loc 1 10073 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4071
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	reg_dead_at_p
	testl	%eax, %eax
	jne	.L4071
	.loc 1 10075 0
	movl	$-1, -48(%ebp)
	jmp	.L4040
.L4071:
	.loc 1 10076 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$10, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -24(%ebp)
	.loc 1 10071 0
	addl	$1, -28(%ebp)
.L4069:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-28(%ebp), %eax
	jg	.L4070
	.loc 1 10079 0
	movl	-12(%ebp), %eax
	movl	%eax, -36(%ebp)
.L4058:
.LBE102:
	.loc 1 10082 0
	movl	8(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 10083 0
	movl	16(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 10085 0
	movl	-32(%ebp), %eax
	movl	%eax, -48(%ebp)
.L4040:
	movl	-48(%ebp), %eax
	.loc 1 10086 0
	addl	$64, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE55:
	.size	recog_for_combine, .-recog_for_combine
	.type	gen_lowpart_for_combine, @function
gen_lowpart_for_combine:
.LFB56:
	.loc 1 10103 0
	pushl	%ebp
.LCFI211:
	movl	%esp, %ebp
.LCFI212:
	pushl	%esi
.LCFI213:
	pushl	%ebx
.LCFI214:
	addl	$-128, %esp
.LCFI215:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10106 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	8(%ebp), %eax
	jne	.L4077
	.loc 1 10107 0
	movl	12(%ebp), %eax
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4077:
	.loc 1 10112 0
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4080
	movl	$8, -100(%ebp)
	jmp	.L4082
.L4080:
	movl	$4, -100(%ebp)
.L4082:
	movl	-100(%ebp), %eax
	cmpl	%eax, -104(%ebp)
	jle	.L4083
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L4085
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L4083
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L4083
.L4085:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	je	.L4083
	.loc 1 10117 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4083:
	.loc 1 10122 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4089
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L4089
	.loc 1 10124 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 12(%ebp)
	.loc 1 10125 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	8(%ebp), %eax
	jne	.L4089
	.loc 1 10126 0
	movl	12(%ebp), %eax
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4089:
	.loc 1 10129 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, -28(%ebp)
	.loc 1 10131 0
	cmpl	$0, -28(%ebp)
	je	.L4093
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4093
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4093
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L4093
	.loc 1 10135 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	imull	$54, %eax, %edx
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	leal	(%edx,%eax), %eax
	movl	%eax, 4(%esp)
	movl	subregs_of_mode@GOT(%ebx), %eax
	movl	%eax, (%esp)
	call	bitmap_set_bit@PLT
.L4093:
	.loc 1 10140 0
	cmpl	$0, -28(%ebp)
	je	.L4098
	.loc 1 10141 0
	movl	-28(%ebp), %eax
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4098:
	.loc 1 10143 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L4100
.LBB103:
	.loc 1 10145 0
	movl	$0, -24(%ebp)
	.loc 1 10149 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L4102
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	je	.L4104
.L4102:
	.loc 1 10150 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4104:
	.loc 1 10155 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L4105
	.loc 1 10156 0
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_SUBREG@PLT
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4105:
	.loc 1 10158 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L4107
	.loc 1 10159 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -92(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4109
	movl	$8, -88(%ebp)
	jmp	.L4111
.L4109:
	movl	$4, -88(%ebp)
.L4111:
	movl	-88(%ebp), %eax
	cmpl	%eax, -92(%ebp)
	jle	.L4112
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -96(%ebp)
	jmp	.L4114
.L4112:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4115
	movl	$8, -84(%ebp)
	jmp	.L4117
.L4115:
	movl	$4, -84(%ebp)
.L4117:
	movl	-84(%ebp), %eax
	movl	%eax, -96(%ebp)
.L4114:
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -76(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4118
	movl	$8, -72(%ebp)
	jmp	.L4120
.L4118:
	movl	$4, -72(%ebp)
.L4120:
	movl	-72(%ebp), %eax
	cmpl	%eax, -76(%ebp)
	jle	.L4121
	movl	8(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	jmp	.L4123
.L4121:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4124
	movl	$8, -68(%ebp)
	jmp	.L4126
.L4124:
	movl	$4, -68(%ebp)
.L4126:
	movl	-68(%ebp), %eax
	movl	%eax, -80(%ebp)
.L4123:
	movl	-96(%ebp), %eax
	subl	-80(%ebp), %eax
	movl	%eax, -24(%ebp)
.L4107:
	.loc 1 10162 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L4127
	.loc 1 10166 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4129
	movl	$8, -60(%ebp)
	jmp	.L4131
.L4129:
	movl	$4, -60(%ebp)
.L4131:
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	%eax, -60(%ebp)
	jge	.L4132
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4134
	movl	$8, -56(%ebp)
	jmp	.L4136
.L4134:
	movl	$4, -56(%ebp)
.L4136:
	movl	-56(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L4137
.L4132:
	movl	8(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -64(%ebp)
.L4137:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4138
	movl	$8, -48(%ebp)
	jmp	.L4140
.L4138:
	movl	$4, -48(%ebp)
.L4140:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	%eax, -48(%ebp)
	jge	.L4141
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4143
	movl	$8, -44(%ebp)
	jmp	.L4145
.L4143:
	movl	$4, -44(%ebp)
.L4145:
	movl	-44(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L4146
.L4141:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
.L4146:
	movl	-64(%ebp), %eax
	subl	-52(%ebp), %eax
	subl	%eax, -24(%ebp)
.L4127:
	.loc 1 10170 0
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4100:
.LBE103:
	.loc 1 10175 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L4147
	.loc 1 10176 0
	movl	12(%ebp), %eax
	movl	12(%eax), %esi
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4147:
.LBB104:
	.loc 1 10183 0
	movl	$0, -20(%ebp)
	.loc 1 10185 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 10187 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_offset@PLT
	movl	%eax, -20(%ebp)
	.loc 1 10188 0
	cmpl	$0, -12(%ebp)
	jne	.L4149
	.loc 1 10190 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	int_mode_for_mode@PLT
	movl	%eax, -12(%ebp)
	.loc 1 10191 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_common@PLT
	movl	%eax, 12(%ebp)
.L4149:
	.loc 1 10193 0
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, -16(%ebp)
	.loc 1 10194 0
	cmpl	$0, -16(%ebp)
	je	.L4151
	.loc 1 10195 0
	movl	-16(%ebp), %eax
	movl	%eax, -108(%ebp)
	jmp	.L4079
.L4151:
	.loc 1 10196 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -108(%ebp)
.L4079:
	movl	-108(%ebp), %eax
.LBE104:
	.loc 1 10198 0
	subl	$-128, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE56:
	.size	gen_lowpart_for_combine, .-gen_lowpart_for_combine
	.type	gen_binary, @function
gen_binary:
.LFB57:
	.loc 1 10208 0
	pushl	%ebp
.LCFI216:
	movl	%esp, %ebp
.LCFI217:
	pushl	%edi
.LCFI218:
	pushl	%esi
.LCFI219:
	pushl	%ebx
.LCFI220:
	subl	$60, %esp
.LCFI221:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10212 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L4155
	.loc 1 10213 0
	movl	16(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L4157
.L4155:
	.loc 1 10214 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L4158
	.loc 1 10215 0
	movl	20(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L4157
.L4158:
	.loc 1 10217 0
	movl	8(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L4160
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_commutative_operands_p@PLT
	testl	%eax, %eax
	je	.L4160
	.loc 1 10219 0
	movl	16(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 16(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, 20(%ebp)
.L4160:
	.loc 1 10221 0
	movl	8(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	jne	.L4163
.LBB105:
	.loc 1 10223 0
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
	.loc 1 10227 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L4165
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	20(%ebp), %eax
	jne	.L4165
	.loc 1 10229 0
	movl	16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 20(%ebp)
	.loc 1 10230 0
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 16(%ebp)
	.loc 1 10231 0
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
.L4165:
	.loc 1 10234 0
	cmpl	$0, -20(%ebp)
	jne	.L4168
	.loc 1 10235 0
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
.L4168:
	.loc 1 10236 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_relational_operation@PLT
	movl	%eax, -28(%ebp)
	jmp	.L4170
.L4163:
.LBE105:
	.loc 1 10239 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -28(%ebp)
.L4170:
	.loc 1 10241 0
	cmpl	$0, -28(%ebp)
	je	.L4171
	.loc 1 10242 0
	movl	-28(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L4157
.L4171:
	.loc 1 10245 0
	movl	8(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L4173
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_commutative_operands_p@PLT
	testl	%eax, %eax
	je	.L4173
	.loc 1 10247 0
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -44(%ebp)
	jmp	.L4157
.L4173:
	.loc 1 10251 0
	cmpl	$93, 8(%ebp)
	jne	.L4176
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4176
	movl	12(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L4176
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, %eax
	notl	%eax
	movl	%edi, %edx
	notl	%edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-40(%ebp), %eax
	andl	%esi, %eax
	movl	-36(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4176
	.loc 1 10254 0
	movl	16(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L4157
.L4176:
	.loc 1 10256 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -44(%ebp)
.L4157:
	movl	-44(%ebp), %eax
	.loc 1 10257 0
	addl	$60, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE57:
	.size	gen_binary, .-gen_binary
	.type	simplify_comparison, @function
simplify_comparison:
.LFB58:
	.loc 1 10275 0
	pushl	%ebp
.LCFI222:
	movl	%esp, %ebp
.LCFI223:
	pushl	%edi
.LCFI224:
	pushl	%esi
.LCFI225:
	pushl	%ebx
.LCFI226:
	subl	$572, %esp
.LCFI227:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10276 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10277 0
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L4670
.L4183:
.L4670:
	.loc 1 10317 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %edx
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	%ax, %dx
	jne	.L4184
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4184
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$98, %ax
	jne	.L4187
	cmpl	$112, 8(%ebp)
	je	.L4189
	cmpl	$113, 8(%ebp)
	je	.L4189
.L4187:
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L4191
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L4193
.L4191:
	cmpl	$115, 8(%ebp)
	je	.L4193
	cmpl	$117, 8(%ebp)
	je	.L4193
	cmpl	$114, 8(%ebp)
	je	.L4193
	cmpl	$116, 8(%ebp)
	jne	.L4189
.L4193:
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L4184
	cmpl	$119, 8(%ebp)
	je	.L4184
	cmpl	$121, 8(%ebp)
	je	.L4184
	cmpl	$118, 8(%ebp)
	je	.L4184
	cmpl	$120, 8(%ebp)
	je	.L4184
.L4189:
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4184
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L4184
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -544(%ebp)
	movl	%ecx, -540(%ebp)
	cmpl	$0, -540(%ebp)
	jg	.L4184
	cmpl	$0, -540(%ebp)
	js	.L4204
	cmpl	$63, -544(%ebp)
	ja	.L4184
.L4204:
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4184
.LBB106:
	.loc 1 10330 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -76(%ebp)
	.loc 1 10331 0
	movl	-76(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	.loc 1 10332 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 10334 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L4206
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L4208
.L4206:
	.loc 1 10335 0
	movl	-72(%ebp), %ecx
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4697
	movl	%edx, %eax
	xorl	%edx, %edx
.L4697:
	movl	-72(%ebp), %ecx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L4698
	movl	%esi, %edi
	xorl	%esi, %esi
.L4698:
	movl	-160(%ebp), %eax
	andl	%esi, %eax
	movl	-156(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	.loc 1 10334 0
	jmp	.L4209
.L4208:
	.loc 1 10336 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L4209
	.loc 1 10337 0
	movl	-72(%ebp), %ecx
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L4695
	movl	%esi, %edi
	xorl	%esi, %esi
.L4695:
	movl	%esi, %eax
	andl	-160(%ebp), %eax
	movl	%edi, %edx
	andl	-156(%ebp), %edx
	movl	-72(%ebp), %ecx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4696
	movl	%edx, %eax
	xorl	%edx, %edx
.L4696:
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
.L4209:
	.loc 1 10339 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -536(%ebp)
	movl	%edx, -532(%ebp)
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-536(%ebp), %eax
	andl	%esi, %eax
	movl	-532(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4211
	movl	-100(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -528(%ebp)
	movl	%edx, -524(%ebp)
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-528(%ebp), %eax
	andl	%esi, %eax
	movl	-524(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4211
	.loc 1 10341 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10317 0
	jmp	.L4183
.L4184:
.LBE106:
	.loc 1 10359 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L4215
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L4215
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4215
	movl	-100(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4215
.LBB107:
	.loc 1 10363 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 10364 0
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 10365 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -152(%ebp)
	movl	%edx, -148(%ebp)
	.loc 1 10366 0
	movl	-100(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	.loc 1 10367 0
	movl	$0, -60(%ebp)
	.loc 1 10369 0
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4220
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4220
	movl	-68(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L4220
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L4220
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4220
	movl	-152(%ebp), %ecx
	movl	-148(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	%eax, -520(%ebp)
	movl	%edx, -516(%ebp)
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-520(%ebp), %eax
	andl	%esi, %eax
	movl	-516(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4220
	movl	-144(%ebp), %ecx
	movl	-140(%ebp), %esi
	movl	%ecx, %eax
	notl	%eax
	movl	%esi, %edx
	notl	%edx
	movl	%eax, -512(%ebp)
	movl	%edx, -508(%ebp)
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-512(%ebp), %eax
	andl	%esi, %eax
	movl	-508(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4220
	.loc 1 10381 0
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10382 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10386 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	unsigned_condition@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10388 0
	movl	$1, -60(%ebp)
	.loc 1 10369 0
	jmp	.L4228
.L4220:
	.loc 1 10391 0
	movl	-152(%ebp), %eax
	movl	-148(%ebp), %edx
	movl	%edx, %ecx
	xorl	-140(%ebp), %ecx
	xorl	-144(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4228
	.loc 1 10392 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, %edx
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -80(%ebp)
	.loc 1 10394 0
	jmp	.L4230
.L4231:
	.loc 1 10395 0
	movl	-152(%ebp), %esi
	movl	-148(%ebp), %edi
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4232
	.loc 1 10397 0
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -104(%ebp)
	.loc 1 10398 0
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -100(%ebp)
	.loc 1 10399 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	unsigned_condition@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10400 0
	movl	$1, -60(%ebp)
	.loc 1 10401 0
	jmp	.L4228
.L4232:
	.loc 1 10394 0
	movl	-80(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
.L4230:
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-80(%ebp), %eax
	jne	.L4231
.L4228:
	.loc 1 10404 0
	cmpl	$0, -60(%ebp)
	je	.L4211
	.loc 1 10359 0
	jmp	.L4183
.L4215:
.LBE107:
	.loc 1 10411 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L4235
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	je	.L4237
.L4235:
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L4211
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$87, %ax
	jne	.L4211
	cmpl	$113, 8(%ebp)
	je	.L4237
	cmpl	$112, 8(%ebp)
	jne	.L4211
.L4237:
	.loc 1 10414 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10418 0
	jmp	.L4183
.L4211:
	.loc 1 10423 0
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_commutative_operands_p@PLT
	testl	%eax, %eax
	je	.L4671
	.loc 1 10425 0
	movl	-104(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10426 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10434 0
	jmp	.L4671
.L4244:
.LBB108:
	.loc 1 10436 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	.loc 1 10437 0
	movl	-56(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -52(%ebp)
	.loc 1 10438 0
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, -136(%ebp)
	movl	%edx, -132(%ebp)
	.loc 1 10449 0
	movl	-56(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L4245
	cmpl	$0, -56(%ebp)
	jne	.L4247
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	je	.L4245
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L4247
.L4245:
	.loc 1 10457 0
	movl	-100(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	.loc 1 10458 0
	cmpl	$0, -56(%ebp)
	je	.L4250
	.loc 1 10459 0
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	trunc_int_for_mode@PLT
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
.L4250:
	.loc 1 10460 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10466 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	je	.L4252
	cmpl	$113, 8(%ebp)
	je	.L4254
	cmpl	$112, 8(%ebp)
	je	.L4254
	cmpl	$114, 8(%ebp)
	je	.L4254
	cmpl	$118, 8(%ebp)
	je	.L4254
	cmpl	$117, 8(%ebp)
	je	.L4254
	cmpl	$121, 8(%ebp)
	jne	.L4252
.L4254:
	cmpl	$64, -52(%ebp)
	ja	.L4252
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L4252
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4252
	.loc 1 10473 0
	cmpl	$113, 8(%ebp)
	je	.L4263
	cmpl	$114, 8(%ebp)
	je	.L4263
	cmpl	$118, 8(%ebp)
	jne	.L4266
.L4263:
	movl	$112, -504(%ebp)
	jmp	.L4267
.L4266:
	movl	$113, -504(%ebp)
.L4267:
	movl	-504(%ebp), %ecx
	movl	%ecx, 8(%ebp)
	.loc 1 10474 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	movl	$0, -128(%ebp)
	movl	$0, -124(%ebp)
.L4252:
	.loc 1 10480 0
	movl	-124(%ebp), %eax
	xorl	$-1, %eax
	movl	-128(%ebp), %edx
	xorl	$-1, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4268
	cmpl	$113, 8(%ebp)
	je	.L4270
	cmpl	$112, 8(%ebp)
	je	.L4270
	cmpl	$115, 8(%ebp)
	je	.L4270
	cmpl	$116, 8(%ebp)
	je	.L4270
	cmpl	$118, 8(%ebp)
	je	.L4270
	cmpl	$121, 8(%ebp)
	jne	.L4268
.L4270:
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	cmpl	-52(%ebp), %eax
	jne	.L4268
	.loc 1 10485 0
	cmpl	$113, 8(%ebp)
	je	.L4277
	cmpl	$116, 8(%ebp)
	je	.L4277
	cmpl	$118, 8(%ebp)
	jne	.L4280
.L4277:
	movl	$112, -500(%ebp)
	jmp	.L4281
.L4280:
	movl	$113, -500(%ebp)
.L4281:
	movl	-500(%ebp), %esi
	movl	%esi, 8(%ebp)
	.loc 1 10486 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	movl	$0, -128(%ebp)
	movl	$0, -124(%ebp)
.L4268:
	.loc 1 10493 0
	movl	8(%ebp), %edi
	subl	$114, %edi
	movl	%edi, -548(%ebp)
	cmpl	$7, -548(%ebp)
	ja	.L4282
	movl	-548(%ebp), %eax
	sall	$2, %eax
	movl	.L4291@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L4291:
	.long	.L4283@GOTOFF
	.long	.L4284@GOTOFF
	.long	.L4285@GOTOFF
	.long	.L4286@GOTOFF
	.long	.L4287@GOTOFF
	.long	.L4288@GOTOFF
	.long	.L4289@GOTOFF
	.long	.L4290@GOTOFF
	.text
.L4286:
	.loc 1 10497 0
	cmpl	$0, -124(%ebp)
	js	.L4282
	cmpl	$0, -124(%ebp)
	jg	.L4293
	cmpl	$0, -128(%ebp)
	jbe	.L4282
.L4293:
	.loc 1 10499 0
	addl	$-1, -128(%ebp)
	adcl	$-1, -124(%ebp)
	.loc 1 10500 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10501 0
	movl	$116, 8(%ebp)
.L4285:
	.loc 1 10509 0
	cmpl	$0, -124(%ebp)
	jns	.L4294
	.loc 1 10511 0
	addl	$1, -128(%ebp)
	adcl	$0, -124(%ebp)
	.loc 1 10512 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10513 0
	movl	$117, 8(%ebp)
	jmp	.L4282
.L4294:
	.loc 1 10518 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4282
	cmpl	$64, -52(%ebp)
	ja	.L4282
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -496(%ebp)
	movl	%edx, -492(%ebp)
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4694
	movl	%eax, %edx
	xorl	%eax, %eax
.L4694:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-496(%ebp), %eax
	andl	%esi, %eax
	movl	-492(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4282
	.loc 1 10522 0
	movl	$113, 8(%ebp)
	.loc 1 10523 0
	jmp	.L4282
.L4283:
	.loc 1 10527 0
	cmpl	$0, -124(%ebp)
	js	.L4282
	cmpl	$0, -124(%ebp)
	jg	.L4301
	cmpl	$0, -128(%ebp)
	jbe	.L4282
.L4301:
	.loc 1 10529 0
	addl	$-1, -128(%ebp)
	adcl	$-1, -124(%ebp)
	.loc 1 10530 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10531 0
	movl	$115, 8(%ebp)
.L4284:
	.loc 1 10539 0
	cmpl	$0, -124(%ebp)
	jns	.L4302
	.loc 1 10541 0
	addl	$1, -128(%ebp)
	adcl	$0, -124(%ebp)
	.loc 1 10542 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10543 0
	movl	$114, 8(%ebp)
	jmp	.L4282
.L4302:
	.loc 1 10548 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4282
	cmpl	$64, -52(%ebp)
	ja	.L4282
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -488(%ebp)
	movl	%edx, -484(%ebp)
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4693
	movl	%eax, %edx
	xorl	%eax, %eax
.L4693:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-488(%ebp), %eax
	andl	%esi, %eax
	movl	-484(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4282
	.loc 1 10552 0
	movl	$112, 8(%ebp)
	.loc 1 10553 0
	jmp	.L4282
.L4290:
	.loc 1 10557 0
	cmpl	$0, -124(%ebp)
	js	.L4308
	cmpl	$0, -124(%ebp)
	jg	.L4310
	cmpl	$0, -128(%ebp)
	jbe	.L4308
.L4310:
	.loc 1 10559 0
	addl	$-1, -128(%ebp)
	adcl	$-1, -124(%ebp)
	.loc 1 10560 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10561 0
	movl	$120, 8(%ebp)
	jmp	.L4289
.L4308:
	.loc 1 10566 0
	cmpl	$64, -52(%ebp)
	ja	.L4282
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4692
	movl	%eax, %edx
	xorl	%eax, %eax
.L4692:
	movl	%edx, %ecx
	xorl	-124(%ebp), %ecx
	xorl	-128(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4282
	.loc 1 10569 0
	movl	$0, -128(%ebp)
	movl	$0, -124(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10570 0
	movl	$114, 8(%ebp)
	.loc 1 10571 0
	jmp	.L4282
.L4289:
	.loc 1 10578 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4313
	.loc 1 10579 0
	movl	$113, 8(%ebp)
	jmp	.L4282
.L4313:
	.loc 1 10582 0
	cmpl	$64, -52(%ebp)
	ja	.L4282
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4691
	movl	%eax, %edx
	xorl	%eax, %eax
.L4691:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%edx, %ecx
	xorl	-124(%ebp), %ecx
	xorl	-128(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4282
	.loc 1 10585 0
	movl	$0, -128(%ebp)
	movl	$0, -124(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10586 0
	movl	$114, 8(%ebp)
	.loc 1 10588 0
	jmp	.L4282
.L4287:
	.loc 1 10592 0
	cmpl	$0, -124(%ebp)
	js	.L4318
	cmpl	$0, -124(%ebp)
	jg	.L4320
	cmpl	$1, -128(%ebp)
	jbe	.L4318
.L4320:
	.loc 1 10594 0
	addl	$-1, -128(%ebp)
	adcl	$-1, -124(%ebp)
	.loc 1 10595 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10596 0
	movl	$119, 8(%ebp)
	jmp	.L4288
.L4318:
	.loc 1 10601 0
	cmpl	$64, -52(%ebp)
	ja	.L4282
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4690
	movl	%eax, %edx
	xorl	%eax, %eax
.L4690:
	movl	%edx, %ecx
	xorl	-124(%ebp), %ecx
	xorl	-128(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4282
	.loc 1 10604 0
	movl	$0, -128(%ebp)
	movl	$0, -124(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10605 0
	movl	$117, 8(%ebp)
	.loc 1 10606 0
	jmp	.L4282
.L4288:
	.loc 1 10613 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4323
	.loc 1 10614 0
	movl	$112, 8(%ebp)
	jmp	.L4282
.L4323:
	.loc 1 10617 0
	cmpl	$64, -52(%ebp)
	ja	.L4282
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4689
	movl	%eax, %edx
	xorl	%eax, %eax
.L4689:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%edx, %ecx
	xorl	-124(%ebp), %ecx
	xorl	-128(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4282
	.loc 1 10620 0
	movl	$0, -128(%ebp)
	movl	$0, -124(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10621 0
	movl	$117, 8(%ebp)
.L4282:
	.loc 1 10631 0
	cmpl	$113, 8(%ebp)
	je	.L4327
	cmpl	$112, 8(%ebp)
	jne	.L4329
.L4327:
	movl	$1, -480(%ebp)
	jmp	.L4330
.L4329:
	movl	$0, -480(%ebp)
.L4330:
	movl	-480(%ebp), %eax
	movl	%eax, -48(%ebp)
	.loc 1 10632 0
	cmpl	$117, 8(%ebp)
	je	.L4331
	cmpl	$114, 8(%ebp)
	jne	.L4333
.L4331:
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4333
	movl	$1, -476(%ebp)
	jmp	.L4335
.L4333:
	movl	$0, -476(%ebp)
.L4335:
	movl	-476(%ebp), %edx
	movl	%edx, -44(%ebp)
	.loc 1 10633 0
	cmpl	$121, 8(%ebp)
	je	.L4336
	cmpl	$120, 8(%ebp)
	je	.L4336
	cmpl	$119, 8(%ebp)
	je	.L4336
	cmpl	$118, 8(%ebp)
	jne	.L4340
.L4336:
	movl	$1, -472(%ebp)
	jmp	.L4341
.L4340:
	movl	$0, -472(%ebp)
.L4341:
	movl	-472(%ebp), %ecx
	movl	%ecx, -40(%ebp)
	.loc 1 10638 0
	cmpl	$0, -44(%ebp)
	je	.L4342
	movl	-56(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L4342
	.loc 1 10640 0
	movl	-56(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4688
	movl	%eax, %edx
	xorl	%eax, %eax
.L4688:
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	force_to_mode
	movl	%eax, -104(%ebp)
.L4342:
	.loc 1 10649 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	subl	$73, %eax
	movl	%eax, -552(%ebp)
	cmpl	$70, -552(%ebp)
	ja	.L4247
	movl	-552(%ebp), %eax
	sall	$2, %eax
	movl	.L4364@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L4364:
	.long	.L4346@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4347@GOTOFF
	.long	.L4348@GOTOFF
	.long	.L4349@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4350@GOTOFF
	.long	.L4351@GOTOFF
	.long	.L4352@GOTOFF
	.long	.L4353@GOTOFF
	.long	.L4354@GOTOFF
	.long	.L4355@GOTOFF
	.long	.L4356@GOTOFF
	.long	.L4357@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4358@GOTOFF
	.long	.L4359@GOTOFF
	.long	.L4360@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4361@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4247@GOTOFF
	.long	.L4362@GOTOFF
	.long	.L4363@GOTOFF
	.text
.L4363:
	.loc 1 10657 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4362
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4362
	cmpl	$0, -48(%ebp)
	je	.L4362
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4362
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -88(%ebp)
	cmpl	$0, -88(%ebp)
	js	.L4362
	.loc 1 10675 0
	movl	-104(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10676 0
	movl	-88(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 10677 0
	movl	-88(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	.loc 1 10680 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reverse_condition@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10681 0
	jmp	.L4243
.L4362:
	.loc 1 10687 0
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_compound_operation
	movl	%eax, -96(%ebp)
	.loc 1 10688 0
	movl	-96(%ebp), %eax
	cmpl	-104(%ebp), %eax
	je	.L4247
	.loc 1 10690 0
	movl	-96(%ebp), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10691 0
	jmp	.L4243
.L4353:
	.loc 1 10697 0
	cmpl	$0, -48(%ebp)
	je	.L4372
	movl	-56(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$96, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4372
	.loc 1 10700 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10701 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10702 0
	jmp	.L4243
.L4372:
	.loc 1 10707 0
	cmpl	$0, -44(%ebp)
	je	.L4247
	.loc 1 10709 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10710 0
	cmpl	$114, 8(%ebp)
	jne	.L4377
	movl	$117, -468(%ebp)
	jmp	.L4379
.L4377:
	movl	$114, -468(%ebp)
.L4379:
	movl	-468(%ebp), %esi
	movl	%esi, 8(%ebp)
	.loc 1 10711 0
	jmp	.L4243
.L4349:
	.loc 1 10717 0
	cmpl	$0, -48(%ebp)
	je	.L4380
	movl	-56(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$87, (%esp)
	call	simplify_unary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4380
	.loc 1 10720 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10721 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10722 0
	jmp	.L4243
.L4380:
	.loc 1 10726 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	.loc 1 10732 0
	cmpl	$0, -44(%ebp)
	je	.L4384
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$139, %ax
	je	.L4386
	cmpl	$64, -52(%ebp)
	ja	.L4384
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -464(%ebp)
	movl	%edx, -460(%ebp)
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4687
	movl	%eax, %edx
	xorl	%eax, %eax
.L4687:
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-464(%ebp), %eax
	andl	%esi, %eax
	movl	-460(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4384
.L4386:
	.loc 1 10738 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10739 0
	cmpl	$117, 8(%ebp)
	jne	.L4389
	movl	$112, -456(%ebp)
	jmp	.L4391
.L4389:
	movl	$113, -456(%ebp)
.L4391:
	movl	-456(%ebp), %edi
	movl	%edi, 8(%ebp)
	.loc 1 10740 0
	jmp	.L4243
.L4384:
	.loc 1 10745 0
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	cmpl	$1, %eax
	jbe	.L4247
	.loc 1 10747 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10748 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10749 0
	jmp	.L4243
.L4355:
	.loc 1 10756 0
	cmpl	$0, -48(%ebp)
	je	.L4394
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4394
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$101, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4394
	.loc 1 10760 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10761 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10762 0
	jmp	.L4243
.L4394:
	.loc 1 10768 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4361
	cmpl	$0, -44(%ebp)
	je	.L4361
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4361
	cmpl	$64, -52(%ebp)
	ja	.L4361
	.loc 1 10772 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4686
	movl	%eax, %edx
	xorl	%eax, %eax
.L4686:
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -104(%ebp)
	.loc 1 10776 0
	cmpl	$117, 8(%ebp)
	jne	.L4402
	movl	$112, -452(%ebp)
	jmp	.L4404
.L4402:
	movl	$113, -452(%ebp)
.L4404:
	movl	-452(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 10777 0
	jmp	.L4243
.L4361:
	.loc 1 10784 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	cmpl	$0, -48(%ebp)
	je	.L4247
	.loc 1 10786 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10787 0
	jmp	.L4243
.L4359:
	.loc 1 10796 0
	cmpl	$0, -40(%ebp)
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4247
	movl	-128(%ebp), %esi
	movl	-124(%ebp), %edi
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4685
	movl	%edx, %eax
	xorl	%edx, %edx
.L4685:
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4247
	.loc 1 10803 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10804 0
	jmp	.L4243
.L4346:
	.loc 1 10818 0
	cmpl	$64, -52(%ebp)
	ja	.L4412
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L4412
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L4412
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4412
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	jns	.L4412
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	%esi, -448(%ebp)
	movl	%edi, -444(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	shrdl	$1, %edx, %eax
	shrl	%edx
	movl	%eax, -440(%ebp)
	movl	%edx, -436(%ebp)
	movl	-436(%ebp), %edi
	cmpl	%edi, -444(%ebp)
	jg	.L4412
	movl	-436(%ebp), %eax
	cmpl	%eax, -444(%ebp)
	jl	.L4419
	movl	-440(%ebp), %edx
	cmpl	%edx, -448(%ebp)
	jae	.L4412
.L4419:
	movl	-128(%ebp), %esi
	movl	-124(%ebp), %edi
	movl	%esi, -432(%ebp)
	movl	%edi, -428(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	$1, %edi, %esi
	shrl	%edi
	movl	%esi, -424(%ebp)
	movl	%edi, -420(%ebp)
	movl	-420(%ebp), %edi
	cmpl	%edi, -428(%ebp)
	ja	.L4412
	movl	-420(%ebp), %eax
	cmpl	%eax, -428(%ebp)
	jb	.L4421
	movl	-424(%ebp), %edx
	cmpl	%edx, -432(%ebp)
	jae	.L4412
.L4421:
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -416(%ebp)
	movl	%edx, -412(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-416(%ebp), %eax
	andl	%esi, %eax
	movl	-412(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L4422
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %esi
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	-56(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	cmpl	%eax, %esi
	jbe	.L4412
.L4422:
	.loc 1 10835 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10836 0
	jmp	.L4243
.L4412:
	.loc 1 10841 0
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-52(%ebp), %eax
	jae	.L4247
.L4360:
	.loc 1 10850 0
	cmpl	$0, -40(%ebp)
	jne	.L4425
	cmpl	$0, -48(%ebp)
	je	.L4247
.L4425:
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4247
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, -408(%ebp)
	movl	%edx, -404(%ebp)
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -400(%ebp)
	movl	%edi, -396(%ebp)
	movl	-396(%ebp), %edi
	cmpl	%edi, -404(%ebp)
	ja	.L4247
	movl	-396(%ebp), %eax
	cmpl	%eax, -404(%ebp)
	jb	.L4430
	movl	-400(%ebp), %edx
	cmpl	%edx, -408(%ebp)
	jae	.L4247
.L4430:
	.loc 1 10856 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10857 0
	jmp	.L4243
.L4347:
	.loc 1 10865 0
	cmpl	$0, -48(%ebp)
	je	.L4431
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4431
	.loc 1 10869 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10870 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10871 0
	jmp	.L4243
.L4431:
	.loc 1 10875 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$139, %ax
	jne	.L4247
	cmpl	$0, -44(%ebp)
	je	.L4247
	.loc 1 10878 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10879 0
	cmpl	$117, 8(%ebp)
	jne	.L4439
	movl	$113, -388(%ebp)
	jmp	.L4441
.L4439:
	movl	$112, -388(%ebp)
.L4441:
	movl	-388(%ebp), %ecx
	movl	%ecx, 8(%ebp)
	.loc 1 10880 0
	jmp	.L4243
.L4348:
	.loc 1 10894 0
	cmpl	$0, -48(%ebp)
	je	.L4442
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4442
	.loc 1 10898 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10899 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10900 0
	jmp	.L4243
.L4442:
	.loc 1 10903 0
	cmpl	$0, -48(%ebp)
	je	.L4445
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4445
	.loc 1 10907 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10908 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10909 0
	jmp	.L4243
.L4445:
	.loc 1 10914 0
	cmpl	$0, -44(%ebp)
	je	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$99, %ax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L4247
	.loc 1 10920 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10921 0
	cmpl	$114, 8(%ebp)
	jne	.L4454
	movl	$116, -384(%ebp)
	jmp	.L4456
.L4454:
	movl	$115, -384(%ebp)
.L4456:
	movl	-384(%ebp), %esi
	movl	%esi, 8(%ebp)
	.loc 1 10922 0
	jmp	.L4243
.L4352:
	.loc 1 10929 0
	cmpl	$0, -48(%ebp)
	je	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$95, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4247
	.loc 1 10933 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10934 0
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10935 0
	jmp	.L4243
.L4358:
	.loc 1 10946 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$4, %eax
	je	.L4247
	.loc 1 10954 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	jne	.L4462
	.loc 1 10955 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -92(%ebp)
	jmp	.L4464
.L4462:
	.loc 1 10957 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -92(%ebp)
.L4464:
	.loc 1 10961 0
	cmpl	$112, 8(%ebp)
	je	.L4465
	cmpl	$113, 8(%ebp)
	je	.L4465
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4247
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4247
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L4684
	movl	%esi, %edi
	xorl	%esi, %esi
.L4684:
	movl	%esi, %eax
	andl	$1, %eax
	movl	%edi, %edx
	andl	$0, %edx
	testl	%eax, %eax
	je	.L4247
	cmpl	$117, 8(%ebp)
	je	.L4465
	cmpl	$114, 8(%ebp)
	jne	.L4247
.L4465:
.LBB109:
	.loc 1 10970 0
	cmpl	$117, 8(%ebp)
	je	.L4473
	cmpl	$112, 8(%ebp)
	jne	.L4475
.L4473:
	.loc 1 10971 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 10970 0
	jmp	.L4476
.L4475:
	.loc 1 10973 0
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	movl	%eax, -36(%ebp)
.L4476:
	.loc 1 10975 0
	cmpl	$0, -36(%ebp)
	je	.L4247
	.loc 1 10977 0
	movl	-36(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 10978 0
	movl	-96(%ebp), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10979 0
	movl	-92(%ebp), %eax
	movl	%eax, -100(%ebp)
	.loc 1 10980 0
	jmp	.L4243
.L4351:
.LBE109:
	.loc 1 10988 0
	cmpl	$0, -44(%ebp)
	je	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L4247
	.loc 1 10992 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 10993 0
	cmpl	$114, 8(%ebp)
	jne	.L4483
	movl	$115, -380(%ebp)
	jmp	.L4485
.L4483:
	movl	$116, -380(%ebp)
.L4485:
	movl	-380(%ebp), %edi
	movl	%edi, 8(%ebp)
	.loc 1 10994 0
	jmp	.L4243
.L4350:
	.loc 1 11001 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4486
	cmpl	$0, -48(%ebp)
	je	.L4486
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L4486
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4486
	.loc 1 11005 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	$1, 12(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_and_const_int
	movl	%eax, -104(%ebp)
	.loc 1 11010 0
	jmp	.L4243
.L4486:
	.loc 1 11016 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4491
	cmpl	$0, -48(%ebp)
	je	.L4491
	cmpl	$64, -52(%ebp)
	ja	.L4491
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4491
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L4491
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4491
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L4491
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -376(%ebp)
	movl	%ecx, -372(%ebp)
	cmpl	$0, -372(%ebp)
	jg	.L4491
	cmpl	$0, -372(%ebp)
	js	.L4500
	cmpl	$63, -376(%ebp)
	ja	.L4491
.L4500:
	.loc 1 11024 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -368(%ebp)
	movl	%edx, -364(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-368(%ebp), %eax
	andl	%esi, %eax
	movl	-364(%ebp), %edx
	andl	%edi, %edx
	movl	-104(%ebp), %ecx
	movl	4(%ecx), %ecx
	movl	12(%ecx), %ecx
	movl	4(%ecx), %esi
	movl	8(%ecx), %edi
	movl	%esi, %ecx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4683
	movl	%eax, %edx
	xorl	%eax, %eax
.L4683:
	movl	%eax, -136(%ebp)
	movl	%edx, -132(%ebp)
	.loc 1 11026 0
	movl	-136(%ebp), %eax
	andl	$-2, %eax
	movl	-132(%ebp), %edx
	andb	$255, %dh
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4491
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	je	.L4502
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	je	.L4491
	movl	-96(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L4491
.L4502:
	.loc 1 11031 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 11032 0
	jmp	.L4243
.L4491:
	.loc 1 11039 0
	cmpl	$0, -48(%ebp)
	je	.L4505
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4505
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4505
	cmpl	$64, -52(%ebp)
	ja	.L4505
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -360(%ebp)
	movl	%edx, -356(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-360(%ebp), %eax
	andl	%esi, %eax
	movl	-356(%ebp), %edx
	andl	%edi, %edx
	movl	-52(%ebp), %ecx
	subl	$1, %ecx
	movl	$1, %esi
	movl	$0, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L4682
	movl	%esi, %edi
	xorl	%esi, %esi
.L4682:
	movl	%edx, %ecx
	xorl	%edi, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4505
	.loc 1 11046 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 11047 0
	cmpl	$113, 8(%ebp)
	jne	.L4511
	movl	$114, -348(%ebp)
	jmp	.L4513
.L4511:
	movl	$117, -348(%ebp)
.L4513:
	movl	-348(%ebp), %ecx
	movl	%ecx, 8(%ebp)
	.loc 1 11048 0
	jmp	.L4243
.L4505:
	.loc 1 11055 0
	cmpl	$0, -48(%ebp)
	jne	.L4514
	cmpl	$0, -40(%ebp)
	je	.L4516
.L4514:
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4516
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -344(%ebp)
	movl	%edx, -340(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-344(%ebp), %eax
	andl	%esi, %eax
	movl	-340(%ebp), %edx
	andl	%edi, %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	movl	%eax, -88(%ebp)
	cmpl	$0, -88(%ebp)
	js	.L4516
	movl	-88(%ebp), %ecx
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	shrdl	%edx, %eax
	sarl	%cl, %edx
	testb	$32, %cl
	je	.L4681
	movl	%edx, %eax
	sarl	$31, %edx
.L4681:
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4516
	movl	-88(%ebp), %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -80(%ebp)
	cmpl	$52, -80(%ebp)
	je	.L4516
	.loc 1 11063 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -104(%ebp)
	.loc 1 11064 0
	jmp	.L4243
.L4516:
	.loc 1 11071 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4521
.LBB110:
	.loc 1 11074 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	.loc 1 11077 0
	movl	-80(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L4523
	movl	-80(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$3, %eax
	jne	.L4521
.L4523:
	movl	-80(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-52(%ebp), %eax
	jae	.L4525
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4527
	movl	$64, -336(%ebp)
	jmp	.L4529
.L4527:
	movl	$32, -336(%ebp)
.L4529:
	movl	-336(%ebp), %esi
	cmpl	-52(%ebp), %esi
	jae	.L4530
.L4525:
	movl	-80(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	cmpl	-52(%ebp), %eax
	jb	.L4521
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L4521
.L4530:
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4521
	cmpl	$64, -52(%ebp)
	ja	.L4521
	movl	-80(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L4521
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	movl	-136(%ebp), %eax
	movl	-132(%ebp), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4521
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	%esi, %eax
	andl	-120(%ebp), %eax
	movl	%edi, %edx
	andl	-116(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4521
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%edx, %ecx
	xorl	-132(%ebp), %ecx
	xorl	-136(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L4521
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%edx, %ecx
	xorl	-116(%ebp), %ecx
	xorl	-120(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L4521
	.loc 1 11100 0
	movl	-120(%ebp), %edx
	movl	-116(%ebp), %ecx
	movl	-80(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -104(%ebp)
	.loc 1 11103 0
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -104(%ebp)
	.loc 1 11104 0
	jmp	.L4243
.L4521:
.LBE110:
	.loc 1 11110 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	cmpl	$0, -48(%ebp)
	je	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$96, %ax
	jne	.L4247
	.loc 1 11115 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$100, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	$1, 12(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_and_const_int
	movl	%eax, -104(%ebp)
	.loc 1 11120 0
	cmpl	$112, 8(%ebp)
	jne	.L4545
	movl	$113, -332(%ebp)
	jmp	.L4547
.L4545:
	movl	$112, -332(%ebp)
.L4547:
	movl	-332(%ebp), %edi
	movl	%edi, 8(%ebp)
	.loc 1 11121 0
	jmp	.L4243
.L4354:
	.loc 1 11131 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4548
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L4548
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -560(%ebp)
	movl	%ecx, -556(%ebp)
	cmpl	$0, -48(%ebp)
	sete	%cl
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-560(%ebp), %esi
	movl	-556(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -328(%ebp)
	movl	%edi, -324(%ebp)
	cmpl	$0, -324(%ebp)
	jg	.L4548
	cmpl	$0, -324(%ebp)
	js	.L4552
	cmpl	$63, -328(%ebp)
	ja	.L4548
.L4552:
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4680
	movl	%eax, %edx
	xorl	%eax, %eax
.L4680:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	%esi, %eax
	andl	-128(%ebp), %eax
	movl	%edi, %edx
	andl	-124(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4548
	cmpl	$64, -52(%ebp)
	ja	.L4548
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -320(%ebp)
	movl	%edx, -316(%ebp)
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	cmpl	$0, -48(%ebp)
	sete	%al
	movzbl	%al, %eax
	leal	(%edx,%eax), %eax
	movl	%eax, %ecx
	movl	-136(%ebp), %eax
	movl	-132(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4679
	movl	%edx, %eax
	xorl	%edx, %edx
.L4679:
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-320(%ebp), %eax
	andl	%esi, %eax
	movl	-316(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4548
.LBB111:
	.loc 1 11144 0
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%esi, %ecx
	andl	%eax, %ecx
	movl	%ecx, -112(%ebp)
	movl	%edi, %eax
	andl	%edx, %eax
	movl	%eax, -108(%ebp)
	.loc 1 11146 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-112(%ebp), %eax
	movl	-108(%ebp), %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4678
	movl	%edx, %eax
	xorl	%edx, %edx
.L4678:
	movl	%eax, -112(%ebp)
	movl	%edx, -108(%ebp)
	.loc 1 11147 0
	movl	-112(%ebp), %edx
	movl	-108(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -100(%ebp)
	.loc 1 11148 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 11149 0
	jmp	.L4243
.L4548:
.LBE111:
	.loc 1 11154 0
	cmpl	$0, -44(%ebp)
	je	.L4556
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4556
	cmpl	$64, -52(%ebp)
	ja	.L4556
	.loc 1 11157 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4677
	movl	%eax, %edx
	xorl	%eax, %eax
.L4677:
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -104(%ebp)
	.loc 1 11161 0
	cmpl	$117, 8(%ebp)
	jne	.L4560
	movl	$112, -308(%ebp)
	jmp	.L4562
.L4560:
	movl	$113, -308(%ebp)
.L4562:
	movl	-308(%ebp), %edi
	movl	%edi, 8(%ebp)
	.loc 1 11162 0
	jmp	.L4243
.L4556:
	.loc 1 11168 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	cmpl	$0, -48(%ebp)
	je	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4247
	.loc 1 11173 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	$1, 12(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	simplify_and_const_int
	movl	%eax, -104(%ebp)
	.loc 1 11175 0
	jmp	.L4243
.L4356:
	.loc 1 11182 0
	cmpl	$0, -48(%ebp)
	je	.L4568
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4568
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4568
	.loc 1 11185 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$100, 4(%esp)
	movl	$0, (%esp)
	call	simplify_shift_const
	movl	%eax, -104(%ebp)
	.loc 1 11188 0
	jmp	.L4243
.L4568:
	.loc 1 11193 0
	cmpl	$0, -40(%ebp)
	jne	.L4572
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4572
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L4572
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4572
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	subl	%edx, %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -80(%ebp)
	cmpl	$52, -80(%ebp)
	je	.L4572
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	$1, %edi, %esi
	shrl	%edi
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$1, %esi
	adcl	$0, %edi
	movl	%esi, -304(%ebp)
	movl	%edi, -300(%ebp)
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -296(%ebp)
	movl	%edi, -292(%ebp)
	movl	-292(%ebp), %edi
	cmpl	%edi, -300(%ebp)
	ja	.L4572
	movl	-292(%ebp), %eax
	cmpl	%eax, -300(%ebp)
	jb	.L4579
	movl	-296(%ebp), %edx
	cmpl	%edx, -304(%ebp)
	ja	.L4572
.L4579:
	.loc 1 11203 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -104(%ebp)
	.loc 1 11204 0
	jmp	.L4243
.L4572:
	.loc 1 11210 0
	cmpl	$0, -40(%ebp)
	jne	.L4357
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4357
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L4357
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4357
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$97, %ax
	jne	.L4357
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4357
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	subl	%edx, %eax
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -80(%ebp)
	cmpl	$52, -80(%ebp)
	je	.L4357
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	$1, %edi, %esi
	shrl	%edi
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$1, %esi
	adcl	$0, %edi
	movl	%esi, -288(%ebp)
	movl	%edi, -284(%ebp)
	movl	-80(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	%esi, -280(%ebp)
	movl	%edi, -276(%ebp)
	movl	-276(%ebp), %edi
	cmpl	%edi, -284(%ebp)
	ja	.L4357
	movl	-276(%ebp), %eax
	cmpl	%eax, -284(%ebp)
	jb	.L4588
	movl	-280(%ebp), %edx
	cmpl	%edx, -288(%ebp)
	ja	.L4357
.L4588:
.LBB112:
	.loc 1 11222 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 11223 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 11225 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$99, (%esp)
	call	gen_binary
	movl	%eax, -24(%ebp)
	.loc 1 11227 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_binary
	movl	%eax, -104(%ebp)
	.loc 1 11230 0
	jmp	.L4243
.L4357:
.LBE112:
	.loc 1 11239 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4589
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	js	.L4589
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -272(%ebp)
	movl	%edi, -268(%ebp)
	cmpl	$0, -268(%ebp)
	jg	.L4589
	cmpl	$0, -268(%ebp)
	js	.L4593
	cmpl	$63, -272(%ebp)
	ja	.L4589
.L4593:
	cmpl	$64, -52(%ebp)
	ja	.L4589
	movl	-104(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -264(%ebp)
	movl	%edx, -260(%ebp)
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4676
	movl	%eax, %edx
	xorl	%eax, %eax
.L4676:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-264(%ebp), %eax
	andl	%esi, %eax
	movl	-260(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4589
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	je	.L4596
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4675
	movl	%edx, %eax
	xorl	%edx, %edx
.L4675:
	shrdl	$1, %edx, %eax
	shrl	%edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$1, %esi
	adcl	$0, %edi
	movl	%esi, -256(%ebp)
	movl	%edi, -252(%ebp)
	jmp	.L4598
.L4596:
	movl	$0, -256(%ebp)
	movl	$0, -252(%ebp)
.L4598:
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	-256(%ebp), %esi
	movl	-252(%ebp), %edi
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%esi, -248(%ebp)
	movl	%edi, -244(%ebp)
	movl	-56(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4674
	movl	%edx, %eax
	xorl	%edx, %edx
.L4674:
	movl	%eax, -240(%ebp)
	movl	%edx, -236(%ebp)
	movl	-236(%ebp), %edx
	cmpl	%edx, -244(%ebp)
	ja	.L4589
	movl	-236(%ebp), %ecx
	cmpl	%ecx, -244(%ebp)
	jb	.L4600
	movl	-240(%ebp), %esi
	cmpl	%esi, -248(%ebp)
	ja	.L4589
.L4600:
	.loc 1 11254 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$100, %ax
	jne	.L4601
	.loc 1 11255 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	unsigned_condition@PLT
	movl	%eax, 8(%ebp)
.L4601:
	.loc 1 11257 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %ecx
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4673
	movl	%eax, %edx
	xorl	%eax, %eax
.L4673:
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	.loc 1 11258 0
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
	.loc 1 11259 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 11260 0
	jmp	.L4243
.L4589:
	.loc 1 11265 0
	movl	-128(%ebp), %eax
	orl	-124(%ebp), %eax
	testl	%eax, %eax
	jne	.L4247
	cmpl	$0, -48(%ebp)
	jne	.L4604
	cmpl	$0, -44(%ebp)
	je	.L4247
.L4604:
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4247
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-52(%ebp), %eax
	subl	$1, %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L4247
	.loc 1 11271 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 11272 0
	cmpl	$112, 8(%ebp)
	je	.L4608
	cmpl	$115, 8(%ebp)
	jne	.L4610
.L4608:
	movl	$117, -232(%ebp)
	jmp	.L4611
.L4610:
	movl	$114, -232(%ebp)
.L4611:
	movl	-232(%ebp), %edi
	movl	%edi, 8(%ebp)
.L4243:
.L4671:
.LBE108:
	.loc 1 10434 0
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L4244
.L4247:
	.loc 1 11306 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-100(%ebp), %eax
	jne	.L4612
	movl	$84, -228(%ebp)
	jmp	.L4614
.L4612:
	movl	$57, -228(%ebp)
.L4614:
	movl	-228(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -104(%ebp)
	.loc 1 11307 0
	movl	$57, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	make_compound_operation
	movl	%eax, -100(%ebp)
	.loc 1 11309 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4615
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L4615
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4615
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4615
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4615
	cmpl	$112, 8(%ebp)
	je	.L4621
	cmpl	$113, 8(%ebp)
	jne	.L4615
.L4621:
	.loc 1 11317 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L4623
	.loc 1 11320 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 11321 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -100(%ebp)
	jmp	.L4615
.L4623:
	.loc 1 11323 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4615
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -224(%ebp)
	movl	%edx, -220(%ebp)
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-224(%ebp), %eax
	andl	%esi, %eax
	movl	-220(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4615
	.loc 1 11329 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -96(%ebp)
	.loc 1 11331 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -216(%ebp)
	movl	%edx, -212(%ebp)
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-216(%ebp), %eax
	andl	%esi, %eax
	movl	-212(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4615
	.loc 1 11333 0
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -100(%ebp)
.L4615:
	.loc 1 11343 0
	movl	-104(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -84(%ebp)
	.loc 1 11344 0
	cmpl	$0, -84(%ebp)
	je	.L4628
	movl	-84(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L4628
	movl	-84(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -204(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4631
	movl	$8, -200(%ebp)
	jmp	.L4633
.L4631:
	movl	$4, -200(%ebp)
.L4633:
	movl	-200(%ebp), %edx
	cmpl	%edx, -204(%ebp)
	jge	.L4628
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	jne	.L4628
	.loc 1 11347 0
	movl	-84(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	.loc 1 11348 0
	jmp	.L4636
.L4637:
	.loc 1 11351 0
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	je	.L4638
.LBB113:
	.loc 1 11359 0
	cmpl	$113, 8(%ebp)
	je	.L4640
	cmpl	$112, 8(%ebp)
	je	.L4640
	cmpl	$118, 8(%ebp)
	je	.L4640
	cmpl	$119, 8(%ebp)
	je	.L4640
	cmpl	$120, 8(%ebp)
	je	.L4640
	cmpl	$121, 8(%ebp)
	jne	.L4646
.L4640:
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -192(%ebp)
	movl	%edx, -188(%ebp)
	movl	-84(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-192(%ebp), %eax
	andl	%esi, %eax
	movl	-188(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4646
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L4648
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_nonzero_bits
	movl	%eax, -184(%ebp)
	movl	%edx, -180(%ebp)
	movl	-84(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	notl	%esi
	movl	%edx, %edi
	notl	%edi
	movl	-184(%ebp), %eax
	andl	%esi, %eax
	movl	-180(%ebp), %edx
	andl	%edi, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4646
.L4648:
	movl	$1, -196(%ebp)
	jmp	.L4650
.L4646:
	movl	$0, -196(%ebp)
.L4650:
	movl	-196(%ebp), %ecx
	movl	%ecx, -20(%ebp)
	.loc 1 11368 0
	cmpl	$0, -20(%ebp)
	jne	.L4651
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %esi
	movl	-80(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	-84(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	cmpl	%eax, %esi
	jbe	.L4653
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	cached_num_sign_bit_copies
	movl	%eax, %esi
	movl	-80(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	-84(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	cmpl	%eax, %esi
	jbe	.L4653
.L4651:
	.loc 1 11378 0
	movl	-104(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$93, %ax
	jne	.L4655
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	have_insn_for@PLT
	testl	%eax, %eax
	jne	.L4655
	.loc 1 11380 0
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, %esi
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -104(%ebp)
.L4655:
	.loc 1 11386 0
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -104(%ebp)
	.loc 1 11387 0
	cmpl	$0, -20(%ebp)
	je	.L4658
	movl	-100(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4658
	.loc 1 11388 0
	movl	-100(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -176(%ebp)
	movl	%edx, -172(%ebp)
	movl	-84(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-176(%ebp), %eax
	andl	%esi, %eax
	movl	-172(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -100(%ebp)
.L4658:
	.loc 1 11389 0
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -100(%ebp)
	.loc 1 11390 0
	jmp	.L4628
.L4653:
	.loc 1 11396 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-100(%ebp), %eax
	jne	.L4638
	cmpl	$117, 8(%ebp)
	je	.L4662
	cmpl	$114, 8(%ebp)
	jne	.L4638
.L4662:
	movl	-84(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L4638
	.loc 1 11399 0
	movl	-84(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	leal	-1(%eax), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4672
	movl	%eax, %edx
	xorl	%eax, %eax
.L4672:
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %esi
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	gen_binary
	movl	%eax, -104(%ebp)
	.loc 1 11403 0
	cmpl	$117, 8(%ebp)
	jne	.L4665
	movl	$112, -164(%ebp)
	jmp	.L4667
.L4665:
	movl	$113, -164(%ebp)
.L4667:
	movl	-164(%ebp), %ecx
	movl	%ecx, 8(%ebp)
	.loc 1 11404 0
	jmp	.L4628
.L4638:
.LBE113:
	.loc 1 11350 0
	movl	-80(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
.L4636:
	.loc 1 11348 0
	cmpl	$0, -80(%ebp)
	je	.L4628
	movl	-80(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	jbe	.L4637
.L4628:
	.loc 1 11414 0
	movl	12(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 11415 0
	movl	16(%ebp), %edx
	movl	-100(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 11417 0
	movl	8(%ebp), %eax
	.loc 1 11418 0
	addl	$572, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE58:
	.size	simplify_comparison, .-simplify_comparison
	.type	combine_reversed_comparison_code, @function
combine_reversed_comparison_code:
.LFB59:
	.loc 1 11425 0
	pushl	%ebp
.LCFI228:
	movl	%esp, %ebp
.LCFI229:
	pushl	%ebx
.LCFI230:
	subl	$36, %esp
.LCFI231:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11426 0
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reversed_comparison_code@PLT
	movl	%eax, -12(%ebp)
	.loc 1 11429 0
	cmpl	$0, -12(%ebp)
	jne	.L4700
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$4, %eax
	je	.L4702
.L4700:
	.loc 1 11431 0
	movl	-12(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L4703
.L4702:
	.loc 1 11434 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -8(%ebp)
	.loc 1 11435 0
	cmpl	$0, -8(%ebp)
	je	.L4704
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$84, %ax
	je	.L4706
.L4704:
	.loc 1 11436 0
	movl	$0, -24(%ebp)
	jmp	.L4703
.L4706:
	.loc 1 11437 0
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	4(%eax), %ecx
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	$0, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	reversed_comparison_code_parts@PLT
	movl	%eax, -24(%ebp)
.L4703:
	movl	-24(%ebp), %eax
	.loc 1 11439 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE59:
	.size	combine_reversed_comparison_code, .-combine_reversed_comparison_code
	.type	reversed_comparison, @function
reversed_comparison:
.LFB60:
	.loc 1 11446 0
	pushl	%ebp
.LCFI232:
	movl	%esp, %ebp
.LCFI233:
	subl	$40, %esp
.LCFI234:
	.loc 1 11447 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	combine_reversed_comparison_code
	movl	%eax, -4(%ebp)
	.loc 1 11448 0
	cmpl	$0, -4(%ebp)
	jne	.L4709
	.loc 1 11449 0
	movl	$0, -20(%ebp)
	jmp	.L4711
.L4709:
	.loc 1 11451 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_binary
	movl	%eax, -20(%ebp)
.L4711:
	movl	-20(%ebp), %eax
	.loc 1 11452 0
	leave
	ret
.LFE60:
	.size	reversed_comparison, .-reversed_comparison
	.type	update_table_tick, @function
update_table_tick:
.LFB61:
	.loc 1 11461 0
	pushl	%ebp
.LCFI235:
	movl	%esp, %ebp
.LCFI236:
	pushl	%ebx
.LCFI237:
	subl	$52, %esp
.LCFI238:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11462 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 11463 0
	movl	-36(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -32(%ebp)
	.loc 1 11466 0
	cmpl	$71, -36(%ebp)
	jne	.L4714
.LBB114:
	.loc 1 11468 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 11471 0
	cmpl	$175, -24(%ebp)
	ja	.L4716
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-24(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -40(%ebp)
	jmp	.L4718
.L4716:
	movl	$1, -40(%ebp)
.L4718:
	movl	-40(%ebp), %eax
	addl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 11474 0
	movl	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	jmp	.L4719
.L4720:
	.loc 1 11475 0
	movl	-16(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_table_tick@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	label_tick@GOTOFF(%ebx), %eax
	movl	%eax, (%edx)
	.loc 1 11474 0
	addl	$1, -16(%ebp)
.L4719:
	movl	-16(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jb	.L4720
	.loc 1 11477 0
	jmp	.L4740
.L4714:
.LBE114:
	.loc 1 11480 0
	movl	-36(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -28(%ebp)
	jmp	.L4723
.L4724:
	.loc 1 11483 0
	movl	-28(%ebp), %eax
	addl	-32(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L4725
	.loc 1 11488 0
	cmpl	$0, -28(%ebp)
	jne	.L4727
	movl	-36(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$50, %al
	je	.L4729
	movl	-36(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L4727
.L4729:
.LBB115:
	.loc 1 11494 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 11495 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 11499 0
	movl	-12(%ebp), %eax
	cmpl	-8(%ebp), %eax
	je	.L4740
	.loc 1 11505 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L4732
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L4734
.L4732:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L4740
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L4740
.L4734:
	.loc 1 11512 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L4736
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L4727
.L4736:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-8(%ebp), %eax
	je	.L4738
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-8(%ebp), %eax
	jne	.L4727
.L4738:
	.loc 1 11516 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-8(%ebp), %eax
	sete	%al
	movzbl	%al, %edx
	movl	-12(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	%eax, (%esp)
	call	update_table_tick
	.loc 1 11517 0
	jmp	.L4740
.L4727:
.LBE115:
	.loc 1 11521 0
	movl	-28(%ebp), %eax
	movl	8(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, (%esp)
	call	update_table_tick
.L4725:
	.loc 1 11480 0
	subl	$1, -28(%ebp)
.L4723:
	cmpl	$0, -28(%ebp)
	jns	.L4724
.L4740:
	.loc 1 11523 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE61:
	.size	update_table_tick, .-update_table_tick
	.type	record_value_for_reg, @function
record_value_for_reg:
.LFB62:
	.loc 1 11535 0
	pushl	%ebp
.LCFI239:
	movl	%esp, %ebp
.LCFI240:
	pushl	%esi
.LCFI241:
	pushl	%ebx
.LCFI242:
	subl	$80, %esp
.LCFI243:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11536 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 11539 0
	cmpl	$175, -28(%ebp)
	ja	.L4742
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-28(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -52(%ebp)
	jmp	.L4744
.L4742:
	movl	$1, -52(%ebp)
.L4744:
	movl	-52(%ebp), %eax
	addl	-28(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 11544 0
	movl	16(%ebp), %eax
	testl	%eax, %eax
	je	.L4745
	cmpl	$0, 12(%ebp)
	je	.L4745
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L4745
.LBB116:
	.loc 1 11550 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4749
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -48(%ebp)
	jmp	.L4751
.L4749:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
.L4751:
	movl	-48(%ebp), %eax
	movl	%eax, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 11551 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -16(%ebp)
	.loc 1 11557 0
	cmpl	$0, -16(%ebp)
	je	.L4745
	.loc 1 11559 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L4753
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L4755
.L4753:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L4755
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L4755
	.loc 1 11563 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L4755:
	.loc 1 11565 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	replace_rtx@PLT
	movl	%eax, 16(%ebp)
.L4745:
.LBE116:
	.loc 1 11573 0
	movl	-28(%ebp), %eax
	movl	%eax, -20(%ebp)
	jmp	.L4758
.L4759:
	.loc 1 11575 0
	cmpl	$0, 12(%ebp)
	je	.L4760
	.loc 1 11576 0
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
.L4760:
	.loc 1 11578 0
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 11579 0
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 11580 0
	movl	-20(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	.loc 1 11581 0
	movl	reg_last_set_sign_bit_copies@GOTOFF(%ebx), %edx
	movl	-20(%ebp), %eax
	leal	(%edx,%eax), %eax
	movb	$0, (%eax)
	.loc 1 11582 0
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 11573 0
	addl	$1, -20(%ebp)
.L4758:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jb	.L4759
	.loc 1 11586 0
	movl	16(%ebp), %eax
	testl	%eax, %eax
	je	.L4763
	.loc 1 11587 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	update_table_tick
.L4763:
	.loc 1 11596 0
	movl	-28(%ebp), %eax
	movl	%eax, -20(%ebp)
	jmp	.L4765
.L4766:
	.loc 1 11598 0
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	label_tick@GOTOFF(%ebx), %eax
	movl	%eax, (%edx)
	.loc 1 11599 0
	movl	16(%ebp), %eax
	testl	%eax, %eax
	je	.L4767
	movl	-20(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_table_tick@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	label_tick@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jne	.L4767
	.loc 1 11600 0
	movl	reg_last_set_invalid@GOTOFF(%ebx), %eax
	movl	-20(%ebp), %edx
	addl	%edx, %eax
	movb	$1, (%eax)
	.loc 1 11599 0
	jmp	.L4770
.L4767:
	.loc 1 11602 0
	movl	reg_last_set_invalid@GOTOFF(%ebx), %eax
	movl	-20(%ebp), %edx
	addl	%edx, %eax
	movb	$0, (%eax)
.L4770:
	.loc 1 11596 0
	addl	$1, -20(%ebp)
.L4765:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jb	.L4766
	.loc 1 11608 0
	movl	16(%ebp), %eax
	testl	%eax, %eax
	je	.L4772
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	16(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value_validate
	testl	%eax, %eax
	jne	.L4772
	.loc 1 11611 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, 16(%ebp)
	.loc 1 11612 0
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	$1, 12(%esp)
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	16(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value_validate
	testl	%eax, %eax
	jne	.L4772
	.loc 1 11614 0
	movl	$0, 16(%ebp)
.L4772:
	.loc 1 11620 0
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 11622 0
	movl	16(%ebp), %eax
	testl	%eax, %eax
	je	.L4784
.LBB117:
	.loc 1 11624 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 11625 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4778
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -44(%ebp)
	jmp	.L4780
.L4778:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
.L4780:
	movl	-44(%ebp), %eax
	movl	%eax, subst_low_cuid@GOTOFF(%ebx)
	.loc 1 11626 0
	movl	-28(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	-12(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 11627 0
	movl	-12(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4781
	movl	-12(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L4781
	.loc 1 11629 0
	movl	nonzero_bits_mode@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
.L4781:
	.loc 1 11630 0
	movl	-28(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %esi
	movl	16(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_nonzero_bits
	movl	%eax, (%esi)
	movl	%edx, 4(%esi)
	.loc 1 11631 0
	movl	reg_last_set_sign_bit_copies@GOTOFF(%ebx), %edx
	movl	-28(%ebp), %eax
	leal	(%edx,%eax), %esi
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	16(%ebp), %edx
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	cached_num_sign_bit_copies
	movb	%al, (%esi)
.L4784:
.LBE117:
	.loc 1 11634 0
	addl	$80, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE62:
	.size	record_value_for_reg, .-record_value_for_reg
	.type	record_dead_and_set_regs_1, @function
record_dead_and_set_regs_1:
.LFB63:
	.loc 1 11644 0
	pushl	%ebp
.LCFI244:
	movl	%esp, %ebp
.LCFI245:
	pushl	%ebx
.LCFI246:
	subl	$52, %esp
.LCFI247:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11645 0
	movl	16(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 11647 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4786
	.loc 1 11648 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L4786:
	.loc 1 11650 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4788
	.loc 1 11655 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L4790
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L4790
	.loc 1 11656 0
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	record_value_for_reg
	.loc 1 11655 0
	jmp	.L4809
.L4790:
	.loc 1 11657 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L4794
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4794
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L4794
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -32(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4798
	movl	$64, -28(%ebp)
	jmp	.L4800
.L4798:
	movl	$32, -28(%ebp)
.L4800:
	movl	-28(%ebp), %eax
	cmpl	%eax, -32(%ebp)
	jg	.L4794
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L4794
	.loc 1 11662 0
	movl	12(%ebp), %eax
	movl	12(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	record_value_for_reg
	.loc 1 11657 0
	jmp	.L4809
.L4794:
	.loc 1 11666 0
	movl	$0, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	record_value_for_reg
	jmp	.L4809
.L4788:
	.loc 1 11668 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L4809
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	push_operand@PLT
	testl	%eax, %eax
	jne	.L4809
	.loc 1 11671 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4806
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -24(%ebp)
	jmp	.L4808
.L4806:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
.L4808:
	movl	-24(%ebp), %eax
	movl	%eax, mem_last_set@GOTOFF(%ebx)
.L4809:
	.loc 1 11672 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE63:
	.size	record_dead_and_set_regs_1, .-record_dead_and_set_regs_1
	.type	record_dead_and_set_regs, @function
record_dead_and_set_regs:
.LFB64:
	.loc 1 11687 0
	pushl	%ebp
.LCFI248:
	movl	%esp, %ebp
.LCFI249:
	pushl	%edi
.LCFI250:
	pushl	%esi
.LCFI251:
	pushl	%ebx
.LCFI252:
	subl	$44, %esp
.LCFI253:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11691 0
	movl	8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L4811
.L4812:
	.loc 1 11693 0
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	jne	.L4813
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4813
.LBB118:
	.loc 1 11696 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 11700 0
	cmpl	$175, -20(%ebp)
	ja	.L4816
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-20(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -36(%ebp)
	jmp	.L4818
.L4816:
	movl	$1, -36(%ebp)
.L4818:
	movl	-36(%ebp), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 11702 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L4819
.L4820:
	.loc 1 11703 0
	movl	-24(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 11702 0
	addl	$1, -24(%ebp)
.L4819:
	movl	-24(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jb	.L4820
	.loc 1 11693 0
	jmp	.L4822
.L4813:
.LBE118:
	.loc 1 11705 0
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$2, %al
	jne	.L4822
	.loc 1 11706 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	record_value_for_reg
.L4822:
	.loc 1 11691 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
.L4811:
	cmpl	$0, -28(%ebp)
	jne	.L4812
	.loc 1 11709 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L4825
	.loc 1 11711 0
	movl	$0, -24(%ebp)
	jmp	.L4827
.L4828:
	.loc 1 11712 0
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	shrl	$6, %edx
	movl	regs_invalidated_by_call@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-24(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L4837
	movl	%edx, %eax
	xorl	%edx, %edx
.L4837:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L4829
	.loc 1 11714 0
	movl	-24(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 11715 0
	movl	-24(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_mode@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	.loc 1 11716 0
	movl	-24(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	.loc 1 11717 0
	movl	reg_last_set_sign_bit_copies@GOTOFF(%ebx), %edx
	movl	-24(%ebp), %eax
	leal	(%edx,%eax), %eax
	movb	$0, (%eax)
	.loc 1 11718 0
	movl	-24(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
.L4829:
	.loc 1 11711 0
	addl	$1, -24(%ebp)
.L4827:
	cmpl	$175, -24(%ebp)
	jbe	.L4828
	.loc 1 11721 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4832
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -32(%ebp)
	jmp	.L4834
.L4832:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
.L4834:
	movl	-32(%ebp), %eax
	movl	%eax, mem_last_set@GOTOFF(%ebx)
	movl	mem_last_set@GOTOFF(%ebx), %eax
	movl	%eax, last_call_cuid@GOTOFF(%ebx)
	.loc 1 11728 0
	jmp	.L4836
.L4825:
	.loc 1 11731 0
	movl	8(%ebp), %eax
	movl	44(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	record_dead_and_set_regs_1@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
.L4836:
	.loc 1 11732 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE64:
	.size	record_dead_and_set_regs, .-record_dead_and_set_regs
	.type	record_promoted_value, @function
record_promoted_value:
.LFB65:
	.loc 1 11747 0
	pushl	%ebp
.LCFI254:
	movl	%esp, %ebp
.LCFI255:
	pushl	%edi
.LCFI256:
	pushl	%esi
.LCFI257:
	pushl	%ebx
.LCFI258:
	subl	$44, %esp
.LCFI259:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11749 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 11750 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
	.loc 1 11752 0
	movl	-20(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L4859
	.loc 1 11755 0
	movl	8(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L4860
.L4842:
	.loc 1 11757 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
	.loc 1 11758 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L4843
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L4845
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L4847
.L4845:
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -44(%ebp)
.L4847:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L4848
.L4843:
	movl	$0, -48(%ebp)
.L4848:
	movl	-48(%ebp), %esi
	movl	%esi, -28(%ebp)
	.loc 1 11760 0
	cmpl	$0, -28(%ebp)
	je	.L4849
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4849
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	-24(%ebp), %eax
	jne	.L4849
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	je	.L4853
.L4849:
	.loc 1 11764 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 11765 0
	jmp	.L4841
.L4853:
	.loc 1 11768 0
	movl	-24(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	8(%ebp), %eax
	jne	.L4854
	.loc 1 11770 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L4854
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	jle	.L4854
	.loc 1 11771 0
	movl	-24(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %ecx
	movl	-24(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	reg_last_set_nonzero_bits@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %esi
	movl	4(%eax), %edi
	movl	%esi, -40(%ebp)
	movl	%edi, -36(%ebp)
	movl	-20(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	movl	(%eax,%edx,8), %esi
	movl	4(%eax,%edx,8), %edi
	movl	-40(%ebp), %eax
	andl	%esi, %eax
	movl	-36(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.L4854:
	.loc 1 11774 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4859
	.loc 1 11776 0
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 11777 0
	movl	8(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -32(%ebp)
.L4841:
.L4860:
	.loc 1 11755 0
	cmpl	$0, -32(%ebp)
	jne	.L4842
.L4859:
	.loc 1 11782 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE65:
	.size	record_promoted_value, .-record_promoted_value
	.type	check_promoted_subreg, @function
check_promoted_subreg:
.LFB66:
	.loc 1 11791 0
	pushl	%ebp
.LCFI260:
	movl	%esp, %ebp
.LCFI261:
	pushl	%ebx
.LCFI262:
	subl	$36, %esp
.LCFI263:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11792 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4862
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L4862
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4862
	.loc 1 11794 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	record_promoted_value
	.loc 1 11792 0
	jmp	.L4875
.L4862:
.LBB119:
	.loc 1 11797 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -16(%ebp)
	.loc 1 11800 0
	movl	$0, -12(%ebp)
	jmp	.L4867
.L4868:
	.loc 1 11801 0
	movl	-12(%ebp), %eax
	addl	-16(%ebp), %eax
	movzbl	(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
	cmpl	$86, -24(%ebp)
	je	.L4870
	cmpl	$101, -24(%ebp)
	je	.L4871
	cmpl	$69, -24(%ebp)
	je	.L4870
	jmp	.L4869
.L4871:
	.loc 1 11804 0
	movl	-12(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	check_promoted_subreg
	.loc 1 11805 0
	jmp	.L4869
.L4870:
	.loc 1 11808 0
	movl	-12(%ebp), %eax
	movl	12(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	testl	%eax, %eax
	je	.L4869
	.loc 1 11809 0
	movl	$0, -8(%ebp)
	jmp	.L4873
.L4874:
	.loc 1 11810 0
	movl	-12(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	check_promoted_subreg
	.loc 1 11809 0
	addl	$1, -8(%ebp)
.L4873:
	movl	-12(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-8(%ebp), %eax
	jg	.L4874
.L4869:
	.loc 1 11800 0
	addl	$1, -12(%ebp)
.L4867:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-12(%ebp), %eax
	jg	.L4868
.L4875:
.LBE119:
	.loc 1 11814 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE66:
	.size	check_promoted_subreg, .-check_promoted_subreg
	.type	get_last_value_validate, @function
get_last_value_validate:
.LFB67:
	.loc 1 11832 0
	pushl	%ebp
.LCFI264:
	movl	%esp, %ebp
.LCFI265:
	pushl	%ebx
.LCFI266:
	subl	$84, %esp
.LCFI267:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11833 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 11834 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -36(%ebp)
	.loc 1 11835 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 11838 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4877
.LBB120:
	.loc 1 11840 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 11843 0
	cmpl	$175, -24(%ebp)
	ja	.L4879
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-24(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -64(%ebp)
	jmp	.L4881
.L4879:
	movl	$1, -64(%ebp)
.L4881:
	movl	-64(%ebp), %eax
	addl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 11846 0
	movl	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	jmp	.L4882
.L4883:
	.loc 1 11847 0
	movl	reg_last_set_invalid@GOTOFF(%ebx), %edx
	movl	-16(%ebp), %eax
	leal	(%edx,%eax), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	jne	.L4884
	cmpl	$175, -24(%ebp)
	jbe	.L4886
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L4886
	movl	-24(%ebp), %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	je	.L4889
.L4886:
	movl	-16(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	16(%ebp), %eax
	jle	.L4889
.L4884:
	.loc 1 11856 0
	cmpl	$0, 20(%ebp)
	je	.L4890
	.loc 1 11857 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
.L4890:
	.loc 1 11858 0
	movl	20(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L4892
.L4889:
	.loc 1 11846 0
	addl	$1, -16(%ebp)
.L4882:
	movl	-16(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jb	.L4883
	.loc 1 11861 0
	movl	$1, -60(%ebp)
	jmp	.L4892
.L4877:
.LBE120:
	.loc 1 11866 0
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L4894
	movl	-40(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L4894
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4897
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -56(%ebp)
	jmp	.L4899
.L4897:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
.L4899:
	movl	mem_last_set@GOTOFF(%ebx), %eax
	cmpl	%eax, -56(%ebp)
	jg	.L4894
	.loc 1 11869 0
	cmpl	$0, 20(%ebp)
	je	.L4901
	.loc 1 11870 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
.L4901:
	.loc 1 11871 0
	movl	20(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L4892
.L4894:
	.loc 1 11874 0
	movl	$0, -28(%ebp)
	jmp	.L4903
.L4904:
	.loc 1 11876 0
	movl	-28(%ebp), %eax
	addl	-36(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L4905
	.loc 1 11881 0
	cmpl	$1, -28(%ebp)
	jne	.L4907
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L4909
	movl	-40(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L4907
.L4909:
.LBB121:
	.loc 1 11887 0
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 11888 0
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 11891 0
	movl	-12(%ebp), %eax
	cmpl	-8(%ebp), %eax
	jne	.L4911
	.loc 1 11892 0
	movl	$1, -60(%ebp)
	jmp	.L4892
.L4911:
	.loc 1 11897 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L4913
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L4915
.L4913:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-8(%ebp), %eax
	je	.L4916
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-8(%ebp), %eax
	jne	.L4915
.L4916:
	.loc 1 11900 0
	movl	$1, -60(%ebp)
	jmp	.L4892
.L4915:
	.loc 1 11904 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L4918
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L4907
.L4918:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L4920
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L4907
.L4920:
	.loc 1 11907 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-12(%ebp), %eax
	sete	%al
	movzbl	%al, %eax
	sall	$3, %eax
	addl	-8(%ebp), %eax
	leal	4(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	get_last_value_validate
	movl	%eax, -60(%ebp)
	jmp	.L4892
.L4907:
.LBE121:
	.loc 1 11913 0
	movl	-28(%ebp), %eax
	sall	$3, %eax
	addl	-40(%ebp), %eax
	leal	4(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	get_last_value_validate
	testl	%eax, %eax
	jne	.L4924
	.loc 1 11915 0
	movl	$0, -60(%ebp)
	jmp	.L4892
.L4905:
	.loc 1 11918 0
	movl	-28(%ebp), %eax
	addl	-36(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L4924
	.loc 1 11919 0
	movl	$0, -60(%ebp)
	jmp	.L4892
.L4924:
	.loc 1 11874 0
	addl	$1, -28(%ebp)
.L4903:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jl	.L4904
	.loc 1 11923 0
	movl	$1, -60(%ebp)
.L4892:
	movl	-60(%ebp), %eax
	.loc 1 11924 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE67:
	.size	get_last_value_validate, .-get_last_value_validate
	.type	get_last_value, @function
get_last_value:
.LFB68:
	.loc 1 11933 0
	pushl	%ebp
.LCFI268:
	movl	%esp, %ebp
.LCFI269:
	pushl	%ebx
.LCFI270:
	subl	$52, %esp
.LCFI271:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11940 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4929
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_p@PLT
	testl	%eax, %eax
	je	.L4929
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L4929
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	get_last_value
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	testl	%eax, %eax
	je	.L4929
	.loc 1 11945 0
	movl	-12(%ebp), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_lowpart_for_combine
	movl	%eax, -28(%ebp)
	jmp	.L4934
.L4929:
	.loc 1 11947 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L4935
	.loc 1 11948 0
	movl	$0, -28(%ebp)
	jmp	.L4934
.L4935:
	.loc 1 11950 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 11951 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_value@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 11963 0
	movl	-12(%ebp), %eax
	testl	%eax, %eax
	je	.L4937
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	label_tick@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	je	.L4939
	cmpl	$175, -8(%ebp)
	jbe	.L4937
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	16(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jne	.L4937
	movl	-8(%ebp), %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	je	.L4939
.L4937:
	.loc 1 11969 0
	movl	$0, -28(%ebp)
	jmp	.L4934
.L4939:
	.loc 1 11973 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4943
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -24(%ebp)
	jmp	.L4945
.L4943:
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
.L4945:
	movl	subst_low_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, -24(%ebp)
	jl	.L4946
	.loc 1 11974 0
	movl	$0, -28(%ebp)
	jmp	.L4934
.L4946:
	.loc 1 11977 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %ecx
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	$0, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value_validate
	testl	%eax, %eax
	je	.L4948
	.loc 1 11979 0
	movl	-12(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L4934
.L4948:
	.loc 1 11984 0
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -12(%ebp)
	.loc 1 11985 0
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set_label@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %ecx
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	$1, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	get_last_value_validate
	testl	%eax, %eax
	je	.L4950
	.loc 1 11987 0
	movl	-12(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L4934
.L4950:
	.loc 1 11989 0
	movl	$0, -28(%ebp)
.L4934:
	movl	-28(%ebp), %eax
	.loc 1 11990 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE68:
	.size	get_last_value, .-get_last_value
	.type	use_crosses_set_p, @function
use_crosses_set_p:
.LFB69:
	.loc 1 11999 0
	pushl	%ebp
.LCFI272:
	movl	%esp, %ebp
.LCFI273:
	pushl	%ebx
.LCFI274:
	subl	$52, %esp
.LCFI275:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12002 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -20(%ebp)
	.loc 1 12004 0
	cmpl	$71, -20(%ebp)
	jne	.L4954
.LBB122:
	.loc 1 12006 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 12008 0
	cmpl	$175, -16(%ebp)
	ja	.L4956
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-16(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -48(%ebp)
	jmp	.L4958
.L4956:
	movl	$1, -48(%ebp)
.L4958:
	movl	-48(%ebp), %eax
	addl	-16(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 12016 0
	jmp	.L4959
.L4960:
	.loc 1 12017 0
	movl	-16(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4961
	movl	-16(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L4963
	movl	-16(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -44(%ebp)
	jmp	.L4965
.L4963:
	movl	-16(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_set@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
.L4965:
	movl	-44(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	.L4961
	.loc 1 12019 0
	movl	$1, -40(%ebp)
	jmp	.L4967
.L4961:
	.loc 1 12016 0
	addl	$1, -16(%ebp)
.L4959:
	movl	-16(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jb	.L4960
	.loc 1 12020 0
	movl	$0, -40(%ebp)
	jmp	.L4967
.L4954:
.LBE122:
	.loc 1 12023 0
	cmpl	$76, -20(%ebp)
	jne	.L4969
	movl	mem_last_set@GOTOFF(%ebx), %eax
	cmpl	12(%ebp), %eax
	jle	.L4969
	.loc 1 12024 0
	movl	$1, -40(%ebp)
	jmp	.L4967
.L4969:
	.loc 1 12026 0
	movl	-20(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -28(%ebp)
	.loc 1 12028 0
	movl	-20(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -24(%ebp)
	jmp	.L4972
.L4973:
	.loc 1 12030 0
	movl	-24(%ebp), %eax
	addl	-28(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L4974
.LBB123:
	.loc 1 12033 0
	movl	-24(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -8(%ebp)
	jmp	.L4976
.L4977:
	.loc 1 12034 0
	movl	-24(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	je	.L4978
	.loc 1 12035 0
	movl	$1, -40(%ebp)
	jmp	.L4967
.L4978:
	.loc 1 12033 0
	subl	$1, -8(%ebp)
.L4976:
	cmpl	$0, -8(%ebp)
	jns	.L4977
	jmp	.L4981
.L4974:
.LBE123:
	.loc 1 12037 0
	movl	-24(%ebp), %eax
	addl	-28(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L4981
	movl	-24(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	use_crosses_set_p
	testl	%eax, %eax
	je	.L4981
	.loc 1 12039 0
	movl	$1, -40(%ebp)
	jmp	.L4967
.L4981:
	.loc 1 12028 0
	subl	$1, -24(%ebp)
.L4972:
	cmpl	$0, -24(%ebp)
	jns	.L4973
	.loc 1 12041 0
	movl	$0, -40(%ebp)
.L4967:
	movl	-40(%ebp), %eax
	.loc 1 12042 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE69:
	.size	use_crosses_set_p, .-use_crosses_set_p
	.type	reg_dead_at_p_1, @function
reg_dead_at_p_1:
.LFB70:
	.loc 1 12060 0
	pushl	%ebp
.LCFI276:
	movl	%esp, %ebp
.LCFI277:
	pushl	%ebx
.LCFI278:
	subl	$36, %esp
.LCFI279:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12063 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4997
	.loc 1 12066 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 12067 0
	cmpl	$175, -12(%ebp)
	ja	.L4989
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-12(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -28(%ebp)
	jmp	.L4991
.L4989:
	movl	$1, -28(%ebp)
.L4991:
	movl	-28(%ebp), %eax
	addl	-12(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 12070 0
	movl	reg_dead_endregno@GOTOFF(%ebx), %eax
	cmpl	-12(%ebp), %eax
	jbe	.L4997
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	cmpl	-8(%ebp), %eax
	jae	.L4997
	.loc 1 12071 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	jne	.L4994
	movl	$1, -24(%ebp)
	jmp	.L4996
.L4994:
	movl	$-1, -24(%ebp)
.L4996:
	movl	-24(%ebp), %eax
	movl	%eax, reg_dead_flag@GOTOFF(%ebx)
.L4997:
	.loc 1 12072 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE70:
	.size	reg_dead_at_p_1, .-reg_dead_at_p_1
	.type	reg_dead_at_p, @function
reg_dead_at_p:
.LFB71:
	.loc 1 12086 0
	pushl	%ebp
.LCFI280:
	movl	%esp, %ebp
.LCFI281:
	pushl	%edi
.LCFI282:
	pushl	%esi
.LCFI283:
	pushl	%ebx
.LCFI284:
	subl	$44, %esp
.LCFI285:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12091 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, reg_dead_regno@GOTOFF(%ebx)
	.loc 1 12092 0
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	cmpl	$175, %eax
	ja	.L4999
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -36(%ebp)
	jmp	.L5001
.L4999:
	movl	$1, -36(%ebp)
.L5001:
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	addl	-36(%ebp), %eax
	movl	%eax, reg_dead_endregno@GOTOFF(%ebx)
	.loc 1 12097 0
	movl	$0, reg_dead_flag@GOTOFF(%ebx)
	.loc 1 12100 0
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	cmpl	$175, %eax
	ja	.L5009
	.loc 1 12102 0
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	movl	%eax, -16(%ebp)
	jmp	.L5004
.L5005:
	.loc 1 12103 0
	movl	-16(%ebp), %eax
	shrl	$6, %eax
	movl	newpat_used_regs@GOTOFF(%ebx,%eax,8), %esi
	movl	4+newpat_used_regs@GOTOFF(%ebx,%eax,8), %edi
	movl	-16(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	%esi, %eax
	movl	%edi, %edx
	shrdl	%edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	.L5032
	movl	%edx, %eax
	xorl	%edx, %edx
.L5032:
	andl	$1, %eax
	testl	%eax, %eax
	je	.L5006
	.loc 1 12104 0
	movl	$0, -32(%ebp)
	jmp	.L5008
.L5006:
	.loc 1 12102 0
	addl	$1, -16(%ebp)
.L5004:
	movl	reg_dead_endregno@GOTOFF(%ebx), %eax
	cmpl	%eax, -16(%ebp)
	jb	.L5005
	.loc 1 12109 0
	jmp	.L5009
.L5010:
	.loc 1 12112 0
	movl	12(%ebp), %eax
	movl	44(%eax), %edx
	movl	$0, 8(%esp)
	leal	reg_dead_at_p_1@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	note_stores@PLT
	.loc 1 12113 0
	movl	reg_dead_flag@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L5011
	.loc 1 12114 0
	movl	reg_dead_flag@GOTOFF(%ebx), %eax
	cmpl	$1, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	jmp	.L5008
.L5011:
	.loc 1 12116 0
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	je	.L5013
	.loc 1 12117 0
	movl	$1, -32(%ebp)
	jmp	.L5008
.L5013:
	.loc 1 12110 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_nonnote_insn@PLT
	movl	%eax, 12(%ebp)
.L5009:
	.loc 1 12109 0
	cmpl	$0, 12(%ebp)
	je	.L5015
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	je	.L5015
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$45, %ax
	jne	.L5010
.L5015:
	.loc 1 12121 0
	cmpl	$0, 12(%ebp)
	jne	.L5018
	.loc 1 12122 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L5020
.L5018:
	.loc 1 12125 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	movl	52(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L5021
.L5022:
	.loc 1 12126 0
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	cmpl	12(%ebp), %eax
	je	.L5023
	.loc 1 12125 0
	movl	-20(%ebp), %eax
	movl	52(%eax), %eax
	movl	%eax, -20(%ebp)
.L5021:
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, -20(%ebp)
	jne	.L5022
.L5023:
	.loc 1 12129 0
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, -20(%ebp)
	jne	.L5020
	.loc 1 12130 0
	movl	$0, -32(%ebp)
	jmp	.L5008
.L5020:
	.loc 1 12133 0
	movl	reg_dead_regno@GOTOFF(%ebx), %eax
	movl	%eax, -16(%ebp)
	jmp	.L5026
.L5027:
	.loc 1 12134 0
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	je	.L5028
	.loc 1 12135 0
	movl	$0, -32(%ebp)
	jmp	.L5008
.L5028:
	.loc 1 12133 0
	addl	$1, -16(%ebp)
.L5026:
	movl	reg_dead_endregno@GOTOFF(%ebx), %eax
	cmpl	%eax, -16(%ebp)
	jb	.L5027
	.loc 1 12137 0
	movl	$1, -32(%ebp)
.L5008:
	movl	-32(%ebp), %eax
	.loc 1 12138 0
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE71:
	.size	reg_dead_at_p, .-reg_dead_at_p
	.type	mark_used_regs_combine, @function
mark_used_regs_combine:
.LFB72:
	.loc 1 12146 0
	pushl	%ebp
.LCFI286:
	movl	%esp, %ebp
.LCFI287:
	pushl	%edi
.LCFI288:
	pushl	%esi
.LCFI289:
	pushl	%ebx
.LCFI290:
	subl	$76, %esp
.LCFI291:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12147 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -48(%ebp)
	.loc 1 12151 0
	movl	-48(%ebp), %eax
	subl	$50, %eax
	movl	%eax, -68(%ebp)
	cmpl	$28, -68(%ebp)
	ja	.L5034
	movl	-68(%ebp), %eax
	sall	$2, %eax
	movl	.L5039@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L5039:
	.long	.L5072@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5036@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5037@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5038@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5034@GOTOFF
	.long	.L5072@GOTOFF
	.long	.L5072@GOTOFF
	.text
.L5037:
	.loc 1 12173 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L5072
	.loc 1 12174 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mark_used_regs_combine
	.loc 1 12175 0
	jmp	.L5072
.L5038:
	.loc 1 12178 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 12181 0
	cmpl	$175, -44(%ebp)
	ja	.L5072
.LBB124:
	.loc 1 12186 0
	cmpl	$29, -44(%ebp)
	je	.L5072
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L5047
	movl	$17, -64(%ebp)
	jmp	.L5049
.L5047:
	movl	$30, -64(%ebp)
.L5049:
	movl	-64(%ebp), %edx
	cmpl	-44(%ebp), %edx
	je	.L5072
	cmpl	$0, -44(%ebp)
	jne	.L5051
	movl	-44(%ebp), %eax
	movl	fixed_regs@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	jne	.L5072
.L5051:
	cmpl	$1, -44(%ebp)
	jne	.L5053
	.loc 1 12194 0
	jmp	.L5072
.L5053:
	.loc 1 12196 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-44(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-44(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 12197 0
	movl	-44(%ebp), %eax
	movl	%eax, -32(%ebp)
	jmp	.L5054
.L5055:
	.loc 1 12198 0
	movl	-32(%ebp), %eax
	shrl	$6, %eax
	movl	%eax, -60(%ebp)
	movl	newpat_used_regs@GOTOFF(%ebx,%eax,8), %edx
	movl	4+newpat_used_regs@GOTOFF(%ebx,%eax,8), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L5073
	movl	%esi, %edi
	xorl	%esi, %esi
.L5073:
	movl	-56(%ebp), %eax
	orl	%esi, %eax
	movl	-52(%ebp), %edx
	orl	%edi, %edx
	movl	-60(%ebp), %ecx
	movl	%eax, newpat_used_regs@GOTOFF(%ebx,%ecx,8)
	movl	%edx, 4+newpat_used_regs@GOTOFF(%ebx,%ecx,8)
	.loc 1 12197 0
	addl	$1, -32(%ebp)
.L5054:
	movl	-32(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jb	.L5055
	.loc 1 12200 0
	jmp	.L5072
.L5036:
.LBE124:
.LBB125:
	.loc 1 12206 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 12208 0
	jmp	.L5056
.L5057:
	.loc 1 12212 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L5056:
	.loc 1 12208 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L5057
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L5057
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$142, %ax
	je	.L5057
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L5057
	.loc 1 12214 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L5062
	.loc 1 12215 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mark_used_regs_combine
.L5062:
	.loc 1 12217 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	mark_used_regs_combine
	.loc 1 12219 0
	jmp	.L5072
.L5034:
.LBE125:
.LBB126:
	.loc 1 12228 0
	movl	-48(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -24(%ebp)
	.loc 1 12230 0
	movl	-48(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$1, %eax
	movl	%eax, -40(%ebp)
	jmp	.L5064
.L5065:
	.loc 1 12232 0
	movl	-40(%ebp), %eax
	addl	-24(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L5066
	.loc 1 12233 0
	movl	-40(%ebp), %eax
	movl	8(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, (%esp)
	call	mark_used_regs_combine
	jmp	.L5068
.L5066:
	.loc 1 12234 0
	movl	-40(%ebp), %eax
	addl	-24(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L5068
.LBB127:
	.loc 1 12238 0
	movl	$0, -20(%ebp)
	jmp	.L5070
.L5071:
	.loc 1 12239 0
	movl	-40(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, (%esp)
	call	mark_used_regs_combine
	.loc 1 12238 0
	addl	$1, -20(%ebp)
.L5070:
	movl	-40(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	cmpl	-20(%ebp), %eax
	jg	.L5071
.L5068:
.LBE127:
	.loc 1 12230 0
	subl	$1, -40(%ebp)
.L5064:
	cmpl	$0, -40(%ebp)
	jns	.L5065
.L5072:
.LBE126:
	.loc 1 12243 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE72:
	.size	mark_used_regs_combine, .-mark_used_regs_combine
.globl remove_death
	.type	remove_death, @function
remove_death:
.LFB73:
	.loc 1 12253 0
	pushl	%ebp
.LCFI292:
	movl	%esp, %ebp
.LCFI293:
	pushl	%ebx
.LCFI294:
	subl	$36, %esp
.LCFI295:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12254 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	movl	%eax, -8(%ebp)
	.loc 1 12256 0
	cmpl	$0, -8(%ebp)
	je	.L5075
	.loc 1 12258 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	subl	$1, %eax
	movl	%eax, 24(%edx)
	.loc 1 12259 0
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	remove_note@PLT
.L5075:
	.loc 1 12262 0
	movl	-8(%ebp), %eax
	.loc 1 12263 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE73:
	.size	remove_death, .-remove_death
	.type	move_deaths, @function
move_deaths:
.LFB74:
	.loc 1 12282 0
	pushl	%ebp
.LCFI296:
	movl	%esp, %ebp
.LCFI297:
	pushl	%ebx
.LCFI298:
	subl	$164, %esp
.LCFI299:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12285 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -64(%ebp)
	.loc 1 12287 0
	cmpl	$71, -64(%ebp)
	jne	.L5079
.LBB128:
	.loc 1 12289 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 12290 0
	movl	-60(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 12294 0
	cmpl	$0, 12(%ebp)
	je	.L5081
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L5081
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5173
.L5081:
	.loc 1 12300 0
	movl	-56(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 12301 0
	jmp	.L5085
.L5086:
	.loc 1 12302 0
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -52(%ebp)
.L5085:
	.loc 1 12301 0
	cmpl	$0, -52(%ebp)
	je	.L5087
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jg	.L5086
.L5087:
	.loc 1 12304 0
	movl	-56(%ebp), %eax
	movl	%eax, -48(%ebp)
	.loc 1 12305 0
	jmp	.L5089
.L5090:
	.loc 1 12306 0
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -48(%ebp)
.L5089:
	.loc 1 12305 0
	cmpl	$0, -48(%ebp)
	je	.L5091
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jg	.L5090
.L5091:
	.loc 1 12308 0
	cmpl	$0, -52(%ebp)
	je	.L5173
	cmpl	$0, -48(%ebp)
	je	.L5173
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5096
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -140(%ebp)
	jmp	.L5098
.L5096:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -140(%ebp)
.L5098:
	movl	-140(%ebp), %eax
	cmpl	16(%ebp), %eax
	jl	.L5173
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5100
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -136(%ebp)
	jmp	.L5102
.L5100:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -136(%ebp)
.L5102:
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5103
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -132(%ebp)
	jmp	.L5105
.L5103:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -132(%ebp)
.L5105:
	movl	-132(%ebp), %eax
	cmpl	%eax, -136(%ebp)
	jl	.L5106
	movl	-56(%ebp), %eax
	cmpl	-48(%ebp), %eax
	je	.L5173
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5109
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -128(%ebp)
	jmp	.L5111
.L5109:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -128(%ebp)
.L5111:
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5112
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -124(%ebp)
	jmp	.L5114
.L5112:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -124(%ebp)
.L5114:
	movl	-124(%ebp), %eax
	cmpl	%eax, -128(%ebp)
	jne	.L5173
.L5106:
.LBB129:
	.loc 1 12314 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	remove_death@PLT
	movl	%eax, -44(%ebp)
	.loc 1 12325 0
	cmpl	$0, -44(%ebp)
	je	.L5115
	cmpl	$175, -60(%ebp)
	ja	.L5115
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L5115
.LBB130:
	.loc 1 12329 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 12331 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-40(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-40(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 12334 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-60(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 12337 0
	movl	-40(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L5119
.L5120:
	.loc 1 12338 0
	movl	-28(%ebp), %eax
	cmpl	-60(%ebp), %eax
	jb	.L5121
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jb	.L5123
.L5121:
	.loc 1 12339 0
	movl	-56(%ebp), %eax
	movl	68(%eax), %ecx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-28(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%ecx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	%edx, 68(%eax)
.L5123:
	.loc 1 12337 0
	addl	$1, -28(%ebp)
.L5119:
	movl	-28(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jb	.L5120
	.loc 1 12325 0
	jmp	.L5125
.L5115:
.LBE130:
	.loc 1 12350 0
	cmpl	$0, -44(%ebp)
	je	.L5126
	cmpl	$0, -44(%ebp)
	je	.L5125
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L5125
.L5126:
	cmpl	$175, -60(%ebp)
	ja	.L5125
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	cmpl	$1, %eax
	jbe	.L5125
.LBB131:
	.loc 1 12358 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-60(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 12360 0
	movl	$0, -80(%ebp)
	.loc 1 12362 0
	cmpl	$0, -44(%ebp)
	je	.L5131
	.loc 1 12363 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	movl	%eax, -16(%ebp)
	jmp	.L5133
.L5131:
	.loc 1 12365 0
	movl	$1, -16(%ebp)
.L5133:
	.loc 1 12367 0
	movl	-16(%ebp), %eax
	addl	-60(%ebp), %eax
	movl	%eax, -20(%ebp)
	jmp	.L5134
.L5135:
	.loc 1 12368 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-20(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	leal	-80(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_deaths
	.loc 1 12367 0
	addl	$1, -20(%ebp)
.L5134:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jb	.L5135
.L5125:
.LBE131:
	.loc 1 12372 0
	cmpl	$0, -44(%ebp)
	je	.L5136
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	jne	.L5136
	.loc 1 12374 0
	movl	24(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 12(%eax)
	.loc 1 12375 0
	movl	24(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 12372 0
	jmp	.L5139
.L5136:
	.loc 1 12378 0
	movl	24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	24(%ebp), %eax
	movl	%edx, (%eax)
.L5139:
	.loc 1 12380 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
	.loc 1 12383 0
	jmp	.L5173
.L5079:
.LBE129:
.LBE128:
	.loc 1 12386 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L5140
.LBB132:
	.loc 1 12388 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 12390 0
	movl	8(%ebp), %eax
	movl	12(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_deaths
	.loc 1 12398 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L5142
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L5142
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L5145
	movl	-12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L5147
	movl	$8, -116(%ebp)
	jmp	.L5149
.L5147:
	movl	$4, -116(%ebp)
.L5149:
	movl	-120(%ebp), %eax
	addl	-116(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -112(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L5150
	movl	$8, -108(%ebp)
	jmp	.L5152
.L5150:
	movl	$4, -108(%ebp)
.L5152:
	movl	-112(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-108(%ebp)
	movl	%eax, -104(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -100(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L5153
	movl	$8, -96(%ebp)
	jmp	.L5155
.L5153:
	movl	$4, -96(%ebp)
.L5155:
	movl	-100(%ebp), %eax
	addl	-96(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -92(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L5156
	movl	$8, -88(%ebp)
	jmp	.L5158
.L5156:
	movl	$4, -88(%ebp)
.L5158:
	movl	-92(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-88(%ebp)
	cmpl	%eax, -104(%ebp)
	jne	.L5145
.L5142:
	.loc 1 12406 0
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	move_deaths
	.loc 1 12407 0
	jmp	.L5173
.L5145:
	.loc 1 12412 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L5159
	.loc 1 12413 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
.L5159:
	.loc 1 12419 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L5173
	.loc 1 12420 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_deaths
	.loc 1 12422 0
	jmp	.L5173
.L5140:
.LBE132:
	.loc 1 12425 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$59, %ax
	je	.L5173
	.loc 1 12428 0
	movl	-64(%ebp), %edx
	movl	rtx_length@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -72(%ebp)
	.loc 1 12429 0
	movl	-64(%ebp), %edx
	movl	rtx_format@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -76(%ebp)
	.loc 1 12431 0
	movl	$0, -68(%ebp)
	jmp	.L5164
.L5165:
	.loc 1 12433 0
	movl	-68(%ebp), %eax
	addl	-76(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$69, %al
	jne	.L5166
.LBB133:
	.loc 1 12436 0
	movl	-68(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -8(%ebp)
	jmp	.L5168
.L5169:
	.loc 1 12437 0
	movl	-68(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_deaths
	.loc 1 12436 0
	subl	$1, -8(%ebp)
.L5168:
	cmpl	$0, -8(%ebp)
	jns	.L5169
	jmp	.L5171
.L5166:
.LBE133:
	.loc 1 12440 0
	movl	-68(%ebp), %eax
	addl	-76(%ebp), %eax
	movzbl	(%eax), %eax
	cmpb	$101, %al
	jne	.L5171
	.loc 1 12441 0
	movl	-68(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax,%edx,8), %edx
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_deaths
.L5171:
	.loc 1 12431 0
	addl	$1, -68(%ebp)
.L5164:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	jl	.L5165
.L5173:
	.loc 1 12443 0
	addl	$164, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE74:
	.size	move_deaths, .-move_deaths
	.type	reg_bitfield_target_p, @function
reg_bitfield_target_p:
.LFB75:
	.loc 1 12452 0
	pushl	%ebp
.LCFI300:
	movl	%esp, %ebp
.LCFI301:
	pushl	%ebx
.LCFI302:
	subl	$52, %esp
.LCFI303:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12455 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L5175
.LBB134:
	.loc 1 12457 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 12461 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	jne	.L5177
	.loc 1 12462 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L5179
.L5177:
	.loc 1 12463 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	jne	.L5180
	.loc 1 12464 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L5179
.L5180:
	.loc 1 12466 0
	movl	$0, -44(%ebp)
	jmp	.L5182
.L5179:
	.loc 1 12468 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L5183
	.loc 1 12469 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L5183:
	.loc 1 12471 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L5185
	.loc 1 12472 0
	movl	$0, -44(%ebp)
	jmp	.L5182
.L5185:
	.loc 1 12474 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 12475 0
	cmpl	$175, -16(%ebp)
	ja	.L5187
	cmpl	$175, -20(%ebp)
	jbe	.L5189
.L5187:
	.loc 1 12476 0
	movl	-24(%ebp), %eax
	cmpl	8(%ebp), %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -44(%ebp)
	jmp	.L5182
.L5189:
	.loc 1 12478 0
	movl	-24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-16(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-16(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 12479 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-20(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-20(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 12481 0
	movl	-12(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jbe	.L5190
	movl	-20(%ebp), %eax
	cmpl	-8(%ebp), %eax
	jae	.L5190
	movl	$1, -40(%ebp)
	jmp	.L5193
.L5190:
	movl	$0, -40(%ebp)
.L5193:
	movl	-40(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L5182
.L5175:
.LBE134:
	.loc 1 12484 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L5194
	.loc 1 12485 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	subl	$1, %eax
	movl	%eax, -32(%ebp)
	jmp	.L5196
.L5197:
	.loc 1 12486 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_bitfield_target_p
	testl	%eax, %eax
	je	.L5198
	.loc 1 12487 0
	movl	$1, -44(%ebp)
	jmp	.L5182
.L5198:
	.loc 1 12485 0
	subl	$1, -32(%ebp)
.L5196:
	cmpl	$0, -32(%ebp)
	jns	.L5197
.L5194:
	.loc 1 12489 0
	movl	$0, -44(%ebp)
.L5182:
	movl	-44(%ebp), %eax
	.loc 1 12490 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE75:
	.size	reg_bitfield_target_p, .-reg_bitfield_target_p
	.section	.rodata
	.type	__FUNCTION__.28032, @object
	.size	__FUNCTION__.28032, 17
__FUNCTION__.28032:
	.string	"distribute_notes"
	.text
	.type	distribute_notes, @function
distribute_notes:
.LFB76:
	.loc 1 12509 0
	pushl	%ebp
.LCFI304:
	movl	%esp, %ebp
.LCFI305:
	pushl	%edi
.LCFI306:
	pushl	%esi
.LCFI307:
	pushl	%ebx
.LCFI308:
	subl	$172, %esp
.LCFI309:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 12513 0
	movl	8(%ebp), %eax
	movl	%eax, -80(%ebp)
	jmp	.L5202
.L5203:
.LBB135:
	.loc 1 12515 0
	movl	$0, -68(%ebp)
	movl	$0, -64(%ebp)
	.loc 1 12519 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L5204
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L5204
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L5204
	.loc 1 12521 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
.L5204:
	.loc 1 12523 0
	movl	-80(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 12524 0
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -160(%ebp)
	cmpl	$29, -160(%ebp)
	ja	.L5208
	movl	-160(%ebp), %eax
	sall	$2, %eax
	movl	.L5222@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L5222:
	.long	.L5208@GOTOFF
	.long	.L5209@GOTOFF
	.long	.L5210@GOTOFF
	.long	.L5211@GOTOFF
	.long	.L5211@GOTOFF
	.long	.L5223@GOTOFF
	.long	.L5213@GOTOFF
	.long	.L5214@GOTOFF
	.long	.L5223@GOTOFF
	.long	.L5210@GOTOFF
	.long	.L5215@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5216@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5217@GOTOFF
	.long	.L5211@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5217@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5218@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5208@GOTOFF
	.long	.L5219@GOTOFF
	.long	.L5220@GOTOFF
	.long	.L5219@GOTOFF
	.long	.L5219@GOTOFF
	.long	.L5221@GOTOFF
	.text
.L5217:
	.loc 1 12531 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12532 0
	jmp	.L5223
.L5221:
	.loc 1 12537 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12538 0
	jmp	.L5223
.L5220:
	.loc 1 12541 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L5224
	.loc 1 12542 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5224:
	.loc 1 12543 0
	cmpl	$0, 20(%ebp)
	je	.L5227
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L5227
	.loc 1 12544 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12543 0
	jmp	.L5223
.L5227:
	.loc 1 12546 0
	leal	__FUNCTION__.28032@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$12546, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5218:
	.loc 1 12551 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5230
	.loc 1 12552 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5230:
	.loc 1 12553 0
	cmpl	$0, 20(%ebp)
	je	.L5233
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5233
	.loc 1 12554 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12553 0
	jmp	.L5223
.L5233:
	.loc 1 12555 0
	movl	flag_non_call_exceptions@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L5236
	.loc 1 12557 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	may_trap_p@PLT
	testl	%eax, %eax
	je	.L5238
	.loc 1 12558 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5238:
	.loc 1 12559 0
	cmpl	$0, 20(%ebp)
	je	.L5223
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	may_trap_p@PLT
	testl	%eax, %eax
	je	.L5223
	.loc 1 12560 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5236:
	.loc 1 12566 0
	leal	__FUNCTION__.28032@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$12566, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5219:
	.loc 1 12574 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5243
	.loc 1 12575 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5243:
	.loc 1 12576 0
	cmpl	$0, 20(%ebp)
	je	.L5246
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5246
	.loc 1 12577 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12576 0
	jmp	.L5223
.L5246:
	.loc 1 12579 0
	leal	__FUNCTION__.28032@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$12579, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5215:
	.loc 1 12600 0
	movl	16(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L5249
	.loc 1 12602 0
	movl	12(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L5223
	.loc 1 12605 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L5252
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	sete	-154(%ebp)
	jmp	.L5254
.L5252:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	sete	-154(%ebp)
.L5254:
	cmpb	$0, -154(%ebp)
	je	.L5223
	.loc 1 12608 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5249:
	.loc 1 12613 0
	movl	16(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5223
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L5259
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	sete	-153(%ebp)
	jmp	.L5261
.L5259:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	testl	%eax, %eax
	sete	-153(%ebp)
.L5261:
	cmpb	$0, -153(%ebp)
	je	.L5223
	.loc 1 12619 0
	movl	-80(%ebp), %eax
	movb	$1, 2(%eax)
	.loc 1 12620 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12622 0
	jmp	.L5223
.L5211:
	.loc 1 12638 0
	movl	12(%ebp), %eax
	cmpl	16(%ebp), %eax
	jne	.L5223
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L5265
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L5223
.L5265:
	.loc 1 12640 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12641 0
	jmp	.L5223
.L5210:
	.loc 1 12647 0
	movl	16(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L5274
	.loc 1 12648 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
.L5274:
	.loc 1 12650 0
	cmpl	$0, 20(%ebp)
	je	.L5223
	movl	20(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L5223
	.loc 1 12652 0
	cmpl	$0, -68(%ebp)
	je	.L5279
	.loc 1 12653 0
	movl	20(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L5223
.L5279:
	.loc 1 12655 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12657 0
	jmp	.L5223
.L5216:
	.loc 1 12664 0
	movl	16(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L5281
	movl	$0, 8(%esp)
	movl	$4, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -72(%ebp)
	cmpl	$0, -72(%ebp)
	je	.L5283
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	jne	.L5283
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L5283
.L5281:
	.loc 1 12668 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
.L5283:
	.loc 1 12670 0
	cmpl	$0, 20(%ebp)
	je	.L5286
	movl	20(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L5288
	movl	$0, 8(%esp)
	movl	$4, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -72(%ebp)
	cmpl	$0, -72(%ebp)
	je	.L5286
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	jne	.L5286
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L5286
.L5288:
	.loc 1 12676 0
	cmpl	$0, -68(%ebp)
	je	.L5292
	.loc 1 12677 0
	movl	20(%ebp), %eax
	movl	%eax, -64(%ebp)
	jmp	.L5286
.L5292:
	.loc 1 12679 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
.L5286:
	.loc 1 12684 0
	cmpl	$0, -68(%ebp)
	je	.L5294
	movl	-68(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L5294
	movl	-68(%ebp), %eax
	movl	76(%eax), %eax
	testl	%eax, %eax
	je	.L5294
	.loc 1 12686 0
	movl	-68(%ebp), %eax
	movl	76(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	je	.L5298
	.loc 1 12687 0
	leal	__FUNCTION__.28032@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$12687, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5298:
	.loc 1 12688 0
	movl	-68(%ebp), %eax
	movl	76(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L5300
	.loc 1 12689 0
	movl	-68(%ebp), %eax
	movl	76(%eax), %edx
	movl	36(%edx), %eax
	subl	$1, %eax
	movl	%eax, 36(%edx)
.L5300:
	.loc 1 12690 0
	movl	$0, -68(%ebp)
.L5294:
	.loc 1 12692 0
	cmpl	$0, -64(%ebp)
	je	.L5223
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$43, %ax
	jne	.L5223
	movl	-64(%ebp), %eax
	movl	76(%eax), %eax
	testl	%eax, %eax
	je	.L5223
	.loc 1 12694 0
	movl	-64(%ebp), %eax
	movl	76(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	je	.L5306
	.loc 1 12695 0
	leal	__FUNCTION__.28032@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$12695, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5306:
	.loc 1 12696 0
	movl	-64(%ebp), %eax
	movl	76(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$46, %ax
	jne	.L5308
	.loc 1 12697 0
	movl	-64(%ebp), %eax
	movl	76(%eax), %edx
	movl	36(%edx), %eax
	subl	$1, %eax
	movl	%eax, 36(%edx)
.L5308:
	.loc 1 12698 0
	movl	$0, -64(%ebp)
	.loc 1 12700 0
	jmp	.L5223
.L5213:
	.loc 1 12714 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L5310
	.loc 1 12715 0
	movl	12(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5310:
	.loc 1 12718 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 8(%esp)
	movl	$7, 4(%esp)
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -72(%ebp)
	.loc 1 12719 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_real_insn@PLT
	movl	%eax, -68(%ebp)
	.loc 1 12720 0
	cmpl	$0, -72(%ebp)
	je	.L5313
	cmpl	$0, -68(%ebp)
	je	.L5313
	.loc 1 12721 0
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 12720 0
	jmp	.L5223
.L5313:
	.loc 1 12724 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	12(%ebp), %eax
	jne	.L5223
	.loc 1 12725 0
	movl	$0, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 12727 0
	jmp	.L5223
.L5214:
	.loc 1 12731 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L5317
	.loc 1 12732 0
	movl	12(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5223
.L5317:
	.loc 1 12735 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 8(%esp)
	movl	$6, 4(%esp)
	movl	%eax, (%esp)
	call	find_reg_note@PLT
	movl	%eax, -72(%ebp)
	.loc 1 12736 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	next_real_insn@PLT
	movl	%eax, -68(%ebp)
	.loc 1 12737 0
	cmpl	$0, -72(%ebp)
	je	.L5320
	cmpl	$0, -68(%ebp)
	je	.L5320
	.loc 1 12738 0
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 12737 0
	jmp	.L5223
.L5320:
	.loc 1 12741 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	12(%ebp), %eax
	jne	.L5223
	.loc 1 12742 0
	movl	$0, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 12744 0
	jmp	.L5223
.L5209:
	.loc 1 12761 0
	cmpl	$0, 12(%ebp)
	je	.L5324
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5324
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$58, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_fusage@PLT
	testl	%eax, %eax
	je	.L5324
	.loc 1 12764 0
	movl	12(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12761 0
	jmp	.L5328
.L5324:
	.loc 1 12765 0
	movl	16(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5329
	.loc 1 12766 0
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L5328
.L5329:
	.loc 1 12767 0
	cmpl	$0, 20(%ebp)
	je	.L5328
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	next_nonnote_insn@PLT
	cmpl	16(%ebp), %eax
	jne	.L5328
	movl	20(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5328
	.loc 1 12769 0
	movl	20(%ebp), %eax
	movl	%eax, -68(%ebp)
.L5328:
	.loc 1 12771 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L5223
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L5223
	.loc 1 12775 0
	cmpl	$0, -68(%ebp)
	jne	.L5336
.LBB136:
	.loc 1 12777 0
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	%eax, -60(%ebp)
	.loc 1 12779 0
	movl	16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L5338
.L5339:
	.loc 1 12781 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	je	.L5340
	.loc 1 12783 0
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	cmpl	-72(%ebp), %eax
	je	.L5342
	.loc 1 12785 0
	jmp	.L5344
.L5340:
	.loc 1 12791 0
	movl	-72(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_set_p@PLT
	testl	%eax, %eax
	je	.L5345
.LBB137:
	.loc 1 12793 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L5347
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L5349
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -148(%ebp)
	jmp	.L5351
.L5349:
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -148(%ebp)
.L5351:
	movl	-148(%ebp), %eax
	movl	%eax, -152(%ebp)
	jmp	.L5352
.L5347:
	movl	$0, -152(%ebp)
.L5352:
	movl	-152(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	.loc 1 12794 0
	movl	$0, -52(%ebp)
	.loc 1 12799 0
	cmpl	$0, -56(%ebp)
	je	.L5353
	.loc 1 12800 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 12801 0
	jmp	.L5355
.L5356:
	.loc 1 12804 0
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
.L5355:
	.loc 1 12801 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L5356
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L5356
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L5356
.L5353:
	.loc 1 12815 0
	cmpl	$0, -56(%ebp)
	je	.L5359
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L5359
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L5359
	.loc 1 12829 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%edx, 44(%eax)
	.loc 1 12831 0
	movl	-72(%ebp), %eax
	movl	68(%eax), %edx
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	distribute_notes
	.loc 1 12833 0
	movl	-72(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, (%esp)
	call	distribute_links
	.loc 1 12835 0
	movl	-72(%ebp), %eax
	movw	$47, (%eax)
	.loc 1 12836 0
	movl	-72(%ebp), %eax
	movl	$-99, 44(%eax)
	.loc 1 12837 0
	movl	-72(%ebp), %eax
	movl	$0, 36(%eax)
	.loc 1 12815 0
	jmp	.L5370
.L5359:
	.loc 1 12860 0
	movl	-72(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5364
	.loc 1 12863 0
	movl	-72(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12865 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	jne	.L5370
	.loc 1 12867 0
	movl	-72(%ebp), %eax
	movl	68(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-72(%ebp), %eax
	movl	%edx, 68(%eax)
	jmp	.L5370
.L5364:
	.loc 1 12873 0
	movl	-80(%ebp), %eax
	movb	$10, 2(%eax)
	.loc 1 12877 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_note@PLT
	testl	%eax, %eax
	jne	.L5342
	.loc 1 12879 0
	movl	-72(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12880 0
	jmp	.L5342
.L5345:
.LBE137:
	.loc 1 12883 0
	movl	-72(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	jne	.L5371
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5370
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%esp)
	movl	$58, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_fusage@PLT
	testl	%eax, %eax
	je	.L5370
.L5371:
	.loc 1 12887 0
	movl	-72(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 12895 0
	cmpl	$0, 20(%ebp)
	je	.L5342
	movl	-68(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jg	.L5342
	movl	-68(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5377
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -144(%ebp)
	jmp	.L5379
.L5377:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -144(%ebp)
.L5379:
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5380
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -140(%ebp)
	jmp	.L5382
.L5380:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -140(%ebp)
.L5382:
	movl	-140(%ebp), %esi
	cmpl	%esi, -144(%ebp)
	jle	.L5342
	cmpl	$0, 12(%ebp)
	je	.L5342
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5385
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -136(%ebp)
	jmp	.L5387
.L5385:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -136(%ebp)
.L5387:
	movl	20(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5388
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -132(%ebp)
	jmp	.L5390
.L5388:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -132(%ebp)
.L5390:
	movl	-132(%ebp), %edi
	cmpl	%edi, -136(%ebp)
	jle	.L5342
	movl	20(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5342
.LBB138:
	.loc 1 12901 0
	movl	-68(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 12902 0
	movl	-68(%ebp), %eax
	movl	$0, 60(%eax)
	.loc 1 12903 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_links
	.loc 1 12905 0
	jmp	.L5342
.L5370:
.LBE138:
	.loc 1 12908 0
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	cmpl	-72(%ebp), %eax
	je	.L5342
.L5344:
	.loc 1 12779 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -72(%ebp)
.L5338:
	cmpl	$0, -68(%ebp)
	je	.L5339
.L5342:
	.loc 1 12917 0
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	jne	.L5336
	cmpl	$0, -68(%ebp)
	jne	.L5336
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	-60(%ebp), %eax
	movl	32(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	bitmap_bit_p@PLT
	testl	%eax, %eax
	je	.L5336
	.loc 1 12921 0
	movl	refresh_blocks@GOTOFF(%ebx), %eax
	movl	%eax, -128(%ebp)
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	shrl	$6, %eax
	movl	%eax, -124(%ebp)
	movl	refresh_blocks@GOTOFF(%ebx), %edx
	movl	12(%edx,%eax,8), %esi
	movl	16(%edx,%eax,8), %edi
	movl	%esi, -120(%ebp)
	movl	%edi, -116(%ebp)
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L5451
	movl	%esi, %edi
	xorl	%esi, %esi
.L5451:
	movl	-120(%ebp), %eax
	orl	%esi, %eax
	movl	-116(%ebp), %edx
	orl	%edi, %edx
	movl	-124(%ebp), %edi
	movl	-128(%ebp), %ecx
	movl	%eax, 12(%ecx,%edi,8)
	movl	%edx, 16(%ecx,%edi,8)
	.loc 1 12922 0
	movl	$1, need_refresh@GOTOFF(%ebx)
.L5336:
.LBE136:
	.loc 1 12932 0
	cmpl	$0, -68(%ebp)
	je	.L5223
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	jne	.L5223
.LBB139:
	.loc 1 12934 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 12939 0
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	noop_move_p@PLT
	testl	%eax, %eax
	je	.L5399
	.loc 1 12941 0
	movl	refresh_blocks@GOTOFF(%ebx), %esi
	movl	%esi, -112(%ebp)
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	shrl	$6, %eax
	movl	%eax, -108(%ebp)
	movl	refresh_blocks@GOTOFF(%ebx), %edx
	movl	12(%edx,%eax,8), %esi
	movl	16(%edx,%eax,8), %edi
	movl	%esi, -104(%ebp)
	movl	%edi, -100(%ebp)
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L5450
	movl	%esi, %edi
	xorl	%esi, %esi
.L5450:
	movl	-104(%ebp), %eax
	orl	%esi, %eax
	movl	-100(%ebp), %edx
	orl	%edi, %edx
	movl	-108(%ebp), %edi
	movl	-112(%ebp), %ecx
	movl	%eax, 12(%ecx,%edi,8)
	movl	%edx, 16(%ecx,%edi,8)
	.loc 1 12942 0
	movl	$1, need_refresh@GOTOFF(%ebx)
.L5399:
	.loc 1 12945 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L5401
	movl	-68(%ebp), %eax
	movl	44(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_bitfield_target_p
	testl	%eax, %eax
	je	.L5403
.L5401:
	.loc 1 12951 0
	movl	-44(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	cmpl	-68(%ebp), %eax
	je	.L5404
	.loc 1 12952 0
	movl	-44(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	$0, (%eax)
.L5404:
	.loc 1 12953 0
	movl	$0, -68(%ebp)
	.loc 1 12945 0
	jmp	.L5406
.L5403:
	.loc 1 12956 0
	movl	-44(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	reg_last_death@GOTOFF(%ebx), %eax
	addl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	%eax, (%edx)
.L5406:
	.loc 1 12967 0
	cmpl	$0, -68(%ebp)
	je	.L5223
	cmpl	$175, -44(%ebp)
	ja	.L5223
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-44(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	cmpl	$1, %eax
	jbe	.L5223
.LBB140:
	.loc 1 12971 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-44(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	.loc 1 12973 0
	movl	$1, -36(%ebp)
	.loc 1 12976 0
	movl	-44(%ebp), %eax
	movl	%eax, -32(%ebp)
	jmp	.L5410
.L5411:
	.loc 1 12977 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	-32(%ebp), %edx
	addl	$1, %edx
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	refers_to_regno_p@PLT
	testl	%eax, %eax
	jne	.L5412
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$58, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_fusage@PLT
	testl	%eax, %eax
	je	.L5414
.L5412:
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_regno_p@PLT
	testl	%eax, %eax
	je	.L5415
.L5414:
	.loc 1 12980 0
	movl	$0, -36(%ebp)
.L5415:
	.loc 1 12976 0
	addl	$1, -32(%ebp)
.L5410:
	movl	-32(%ebp), %eax
	cmpl	-40(%ebp), %eax
	jb	.L5411
	.loc 1 12982 0
	cmpl	$0, -36(%ebp)
	jne	.L5223
	.loc 1 12987 0
	movl	-44(%ebp), %eax
	movl	%eax, -32(%ebp)
	jmp	.L5418
.L5419:
.LBB141:
	.loc 1 12990 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-32(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 12991 0
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	%eax, -24(%ebp)
	.loc 1 12993 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L5420
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_bitfield_target_p
	testl	%eax, %eax
	jne	.L5420
.LBB142:
	.loc 1 12998 0
	movl	$0, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -20(%ebp)
	.loc 1 13000 0
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	distribute_notes
	.loc 1 12993 0
	jmp	.L5423
.L5420:
.LBE142:
	.loc 1 13003 0
	movl	-68(%ebp), %eax
	movl	44(%eax), %eax
	movl	-32(%ebp), %edx
	addl	$1, %edx
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	refers_to_regno_p@PLT
	testl	%eax, %eax
	jne	.L5423
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$58, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	find_regno_fusage@PLT
	testl	%eax, %eax
	jne	.L5423
	.loc 1 13006 0
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -72(%ebp)
.L5426:
	.loc 1 13009 0
	movl	-72(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	je	.L5427
	.loc 1 13011 0
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	cmpl	-72(%ebp), %eax
	jne	.L5431
	.loc 1 13013 0
	movl	refresh_blocks@GOTOFF(%ebx), %esi
	movl	%esi, -96(%ebp)
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	shrl	$6, %eax
	movl	%eax, -92(%ebp)
	movl	refresh_blocks@GOTOFF(%ebx), %edx
	movl	12(%edx,%eax,8), %esi
	movl	16(%edx,%eax,8), %edi
	movl	%esi, -88(%ebp)
	movl	%edi, -84(%ebp)
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, %ecx
	andl	$63, %ecx
	movl	$1, %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L5449
	movl	%esi, %edi
	xorl	%esi, %esi
.L5449:
	movl	-88(%ebp), %eax
	orl	%esi, %eax
	movl	-84(%ebp), %edx
	orl	%edi, %edx
	movl	-92(%ebp), %edi
	movl	-96(%ebp), %ecx
	movl	%eax, 12(%ecx,%edi,8)
	movl	%edx, 16(%ecx,%edi,8)
	.loc 1 13015 0
	movl	$1, need_refresh@GOTOFF(%ebx)
	.loc 1 13016 0
	jmp	.L5423
.L5427:
	.loc 1 13020 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	dead_or_set_p@PLT
	testl	%eax, %eax
	jne	.L5432
	movl	-72(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_bitfield_target_p
	testl	%eax, %eax
	je	.L5431
.L5432:
	.loc 1 13024 0
	movl	-72(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$10, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-72(%ebp), %eax
	movl	%edx, 68(%eax)
	.loc 1 13027 0
	jmp	.L5423
.L5431:
	.loc 1 13007 0
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -72(%ebp)
	.loc 1 13029 0
	jmp	.L5426
.L5423:
.LBE141:
	.loc 1 12988 0
	movl	-32(%ebp), %edx
	movl	reg_raw_mode@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	-32(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mips_hard_regno_nregs@PLT
	addl	%eax, -32(%ebp)
.L5418:
	.loc 1 12987 0
	movl	-32(%ebp), %eax
	cmpl	-40(%ebp), %eax
	jb	.L5419
	.loc 1 13033 0
	movl	$0, -68(%ebp)
	.loc 1 13037 0
	jmp	.L5223
.L5208:
.LBE140:
.LBE139:
	.loc 1 13042 0
	leal	__FUNCTION__.28032@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$13042, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5223:
	.loc 1 13045 0
	cmpl	$0, -68(%ebp)
	je	.L5435
	.loc 1 13047 0
	movl	-68(%ebp), %eax
	movl	68(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	.loc 1 13048 0
	movl	-68(%ebp), %edx
	movl	-80(%ebp), %eax
	movl	%eax, 68(%edx)
	jmp	.L5437
.L5435:
	.loc 1 13050 0
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	je	.L5438
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$10, %al
	jne	.L5437
.L5438:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L5437
	.loc 1 13053 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	subl	$1, %eax
	movl	%eax, 24(%edx)
.L5437:
	.loc 1 13055 0
	cmpl	$0, -64(%ebp)
	je	.L5441
	.loc 1 13057 0
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$1, %al
	je	.L5443
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$10, %al
	jne	.L5445
.L5443:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L5445
	.loc 1 13060 0
	movl	reg_n_info@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%edx,%eax,4), %edx
	movl	24(%edx), %eax
	addl	$1, %eax
	movl	%eax, 24(%edx)
.L5445:
	.loc 1 13062 0
	movl	-64(%ebp), %eax
	movl	68(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-80(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	-80(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	%edx, 68(%eax)
.L5441:
.LBE135:
	.loc 1 12513 0
	movl	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
.L5202:
	cmpl	$0, -80(%ebp)
	jne	.L5203
	.loc 1 13068 0
	addl	$172, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE76:
	.size	distribute_notes, .-distribute_notes
	.type	distribute_links, @function
distribute_links:
.LFB77:
	.loc 1 13077 0
	pushl	%ebp
.LCFI310:
	movl	%esp, %ebp
.LCFI311:
	pushl	%ebx
.LCFI312:
	subl	$68, %esp
.LCFI313:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 13080 0
	movl	8(%ebp), %eax
	movl	%eax, -32(%ebp)
	jmp	.L5453
.L5454:
.LBB143:
	.loc 1 13082 0
	movl	$0, -24(%ebp)
	.loc 1 13086 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 13099 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$47, %ax
	je	.L5455
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L5457
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$57, %ax
	jne	.L5459
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L5461
.L5459:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	single_set_2@PLT
	movl	%eax, -48(%ebp)
.L5461:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L5462
.L5457:
	movl	$0, -52(%ebp)
.L5462:
	movl	-52(%ebp), %eax
	movl	%eax, -16(%ebp)
	cmpl	$0, -16(%ebp)
	je	.L5455
	.loc 1 13103 0
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 13104 0
	jmp	.L5464
.L5465:
	.loc 1 13107 0
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
.L5464:
	.loc 1 13104 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L5465
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$143, %ax
	je	.L5465
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$142, %ax
	je	.L5465
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$74, %ax
	je	.L5465
	.loc 1 13118 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 13119 0
	jmp	.L5470
.L5471:
	.loc 1 13122 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	jne	.L5472
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L5472
	.loc 1 13124 0
	movl	-20(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_referenced_p@PLT
	testl	%eax, %eax
	je	.L5477
	.loc 1 13125 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 13126 0
	jmp	.L5477
.L5472:
	.loc 1 13128 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$44, %ax
	jne	.L5478
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$58, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	find_reg_fusage@PLT
	testl	%eax, %eax
	je	.L5478
	.loc 1 13131 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 13132 0
	jmp	.L5477
.L5478:
	.loc 1 13121 0
	movl	-20(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -20(%ebp)
.L5470:
	.loc 1 13119 0
	cmpl	$0, -20(%ebp)
	je	.L5477
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	52(%eax), %edx
	movl	entry_exit_blocks@GOT(%ebx), %eax
	leal	80(%eax), %eax
	cmpl	%eax, %edx
	je	.L5471
	movl	this_basic_block@GOTOFF(%ebx), %eax
	movl	52(%eax), %eax
	movl	(%eax), %eax
	cmpl	-20(%ebp), %eax
	jne	.L5471
.L5477:
	.loc 1 13138 0
	cmpl	$0, -24(%ebp)
	je	.L5455
.LBB144:
	.loc 1 13142 0
	movl	-24(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L5484
.L5485:
	.loc 1 13143 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	je	.L5486
	.loc 1 13142 0
	movl	-8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -8(%ebp)
.L5484:
	cmpl	$0, -8(%ebp)
	jne	.L5485
.L5486:
	.loc 1 13146 0
	cmpl	$0, -8(%ebp)
	jne	.L5455
	.loc 1 13148 0
	movl	-24(%ebp), %eax
	movl	60(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 12(%eax)
	.loc 1 13149 0
	movl	-24(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 60(%edx)
	.loc 1 13153 0
	movl	added_links_insn@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	je	.L5489
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5491
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -44(%ebp)
	jmp	.L5493
.L5491:
	movl	added_links_insn@GOTOFF(%ebx), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
.L5493:
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5494
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -40(%ebp)
	jmp	.L5496
.L5494:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
.L5496:
	movl	-40(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	jle	.L5455
.L5489:
	.loc 1 13155 0
	movl	-24(%ebp), %eax
	movl	%eax, added_links_insn@GOTOFF(%ebx)
.L5455:
.LBE144:
.LBE143:
	.loc 1 13080 0
	movl	-28(%ebp), %eax
	movl	%eax, -32(%ebp)
.L5453:
	cmpl	$0, -32(%ebp)
	jne	.L5454
	.loc 1 13159 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE77:
	.size	distribute_links, .-distribute_links
	.section	.rodata
	.type	__FUNCTION__.28829, @object
	.size	__FUNCTION__.28829, 10
__FUNCTION__.28829:
	.string	"insn_cuid"
	.text
	.type	insn_cuid, @function
insn_cuid:
.LFB78:
	.loc 1 13166 0
	pushl	%ebp
.LCFI314:
	movl	%esp, %ebp
.LCFI315:
	pushl	%ebx
.LCFI316:
	subl	$20, %esp
.LCFI317:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 13167 0
	jmp	.L5500
.L5501:
	.loc 1 13169 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L5500:
	.loc 1 13167 0
	cmpl	$0, 8(%ebp)
	je	.L5502
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5502
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$42, %ax
	jne	.L5502
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$58, %ax
	je	.L5501
.L5502:
	.loc 1 13171 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5506
	.loc 1 13172 0
	leal	__FUNCTION__.28829@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$13172, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L5506:
	.loc 1 13174 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	max_uid_cuid@GOTOFF(%ebx), %eax
	cmpl	%eax, %edx
	jle	.L5508
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	insn_cuid
	movl	%eax, -8(%ebp)
	jmp	.L5510
.L5508:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	sall	$2, %eax
	movl	%eax, %edx
	movl	uid_cuid@GOTOFF(%ebx), %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
.L5510:
	movl	-8(%ebp), %eax
	.loc 1 13175 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE78:
	.size	insn_cuid, .-insn_cuid
	.section	.rodata
	.align 4
.LC2:
	.string	";; Combiner statistics: %d attempts, %d substitutions (%d requiring new space),\n;; %d successes.\n\n"
	.text
.globl dump_combine_stats
	.type	dump_combine_stats, @function
dump_combine_stats:
.LFB79:
	.loc 1 13180 0
	pushl	%ebp
.LCFI318:
	movl	%esp, %ebp
.LCFI319:
	pushl	%esi
.LCFI320:
	pushl	%ebx
.LCFI321:
	subl	$32, %esp
.LCFI322:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 13181 0
	movl	combine_successes@GOTOFF(%ebx), %eax
	movl	combine_extras@GOTOFF(%ebx), %edx
	movl	combine_merges@GOTOFF(%ebx), %ecx
	movl	combine_attempts@GOTOFF(%ebx), %esi
	movl	%eax, 20(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 12(%esp)
	movl	%esi, 8(%esp)
	leal	.LC2@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	fnotice@PLT
	.loc 1 13185 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE79:
	.size	dump_combine_stats, .-dump_combine_stats
	.section	.rodata
	.align 4
.LC3:
	.string	"\n;; Combiner totals: %d attempts, %d substitutions (%d requiring new space),\n;; %d successes.\n"
	.text
.globl dump_combine_total_stats
	.type	dump_combine_total_stats, @function
dump_combine_total_stats:
.LFB80:
	.loc 1 13190 0
	pushl	%ebp
.LCFI323:
	movl	%esp, %ebp
.LCFI324:
	pushl	%esi
.LCFI325:
	pushl	%ebx
.LCFI326:
	subl	$32, %esp
.LCFI327:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 13191 0
	movl	total_successes@GOTOFF(%ebx), %eax
	movl	total_extras@GOTOFF(%ebx), %edx
	movl	total_merges@GOTOFF(%ebx), %ecx
	movl	total_attempts@GOTOFF(%ebx), %esi
	movl	%eax, 20(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 12(%esp)
	movl	%esi, 8(%esp)
	leal	.LC3@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	fnotice@PLT
	.loc 1 13195 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE80:
	.size	dump_combine_total_stats, .-dump_combine_total_stats
	.local	combine_attempts
	.comm	combine_attempts,4,4
	.local	combine_merges
	.comm	combine_merges,4,4
	.local	combine_extras
	.comm	combine_extras,4,4
	.local	combine_successes
	.comm	combine_successes,4,4
	.local	total_attempts
	.comm	total_attempts,4,4
	.local	total_merges
	.comm	total_merges,4,4
	.local	total_extras
	.comm	total_extras,4,4
	.local	total_successes
	.comm	total_successes,4,4
	.local	uid_cuid
	.comm	uid_cuid,4,4
	.local	max_uid_cuid
	.comm	max_uid_cuid,4,4
	.local	combine_max_regno
	.comm	combine_max_regno,4,4
	.local	reg_last_death
	.comm	reg_last_death,4,4
	.local	reg_last_set
	.comm	reg_last_set,4,4
	.local	mem_last_set
	.comm	mem_last_set,4,4
	.local	last_call_cuid
	.comm	last_call_cuid,4,4
	.local	subst_insn
	.comm	subst_insn,4,4
	.local	subst_prev_insn
	.comm	subst_prev_insn,4,4
	.local	subst_low_cuid
	.comm	subst_low_cuid,4,4
	.local	newpat_used_regs
	.comm	newpat_used_regs,24,8
	.local	added_links_insn
	.comm	added_links_insn,4,4
	.local	this_basic_block
	.comm	this_basic_block,4,4
	.local	refresh_blocks
	.comm	refresh_blocks,4,4
	.local	need_refresh
	.comm	need_refresh,4,4
	.local	reg_last_set_value
	.comm	reg_last_set_value,4,4
	.local	reg_last_set_label
	.comm	reg_last_set_label,4,4
	.local	reg_last_set_table_tick
	.comm	reg_last_set_table_tick,4,4
	.local	reg_last_set_invalid
	.comm	reg_last_set_invalid,4,4
	.local	label_tick
	.comm	label_tick,4,4
	.local	reg_nonzero_bits
	.comm	reg_nonzero_bits,4,4
	.local	nonzero_bits_mode
	.comm	nonzero_bits_mode,4,4
	.local	reg_sign_bit_copies
	.comm	reg_sign_bit_copies,4,4
	.local	nonzero_sign_valid
	.comm	nonzero_sign_valid,4,4
	.local	reg_last_set_mode
	.comm	reg_last_set_mode,4,4
	.local	reg_last_set_nonzero_bits
	.comm	reg_last_set_nonzero_bits,4,4
	.local	reg_last_set_sign_bit_copies
	.comm	reg_last_set_sign_bit_copies,4,4
	.local	undobuf
	.comm	undobuf,12,4
	.local	n_occurrences
	.comm	n_occurrences,4,4
	.local	reg_dead_regno
	.comm	reg_dead_regno,4,4
	.local	reg_dead_endregno
	.comm	reg_dead_endregno,4,4
	.local	reg_dead_flag
	.comm	reg_dead_flag,4,4
	.section	.debug_frame,"",@progbits
.Lframe0:
	.long	.LECIE0-.LSCIE0
.LSCIE0:
	.long	0xffffffff
	.byte	0x1
	.string	""
	.uleb128 0x1
	.sleb128 -4
	.byte	0x8
	.byte	0xc
	.uleb128 0x4
	.uleb128 0x4
	.byte	0x88
	.uleb128 0x1
	.align 4
.LECIE0:
.LSFDE0:
	.long	.LEFDE0-.LASFDE0
.LASFDE0:
	.long	.Lframe0
	.long	.LFB15
	.long	.LFE15-.LFB15
	.byte	0x4
	.long	.LCFI0-.LFB15
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI5-.LCFI1
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE0:
.LSFDE2:
	.long	.LEFDE2-.LASFDE2
.LASFDE2:
	.long	.Lframe0
	.long	.LFB16
	.long	.LFE16-.LFB16
	.byte	0x4
	.long	.LCFI6-.LFB16
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI7-.LCFI6
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI9-.LCFI7
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE2:
.LSFDE4:
	.long	.LEFDE4-.LASFDE4
.LASFDE4:
	.long	.Lframe0
	.long	.LFB17
	.long	.LFE17-.LFB17
	.byte	0x4
	.long	.LCFI10-.LFB17
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI11-.LCFI10
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI15-.LCFI11
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE4:
.LSFDE6:
	.long	.LEFDE6-.LASFDE6
.LASFDE6:
	.long	.Lframe0
	.long	.LFB18
	.long	.LFE18-.LFB18
	.byte	0x4
	.long	.LCFI16-.LFB18
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI17-.LCFI16
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI20-.LCFI17
	.byte	0x83
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE6:
.LSFDE8:
	.long	.LEFDE8-.LASFDE8
.LASFDE8:
	.long	.Lframe0
	.long	.LFB19
	.long	.LFE19-.LFB19
	.byte	0x4
	.long	.LCFI21-.LFB19
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI22-.LCFI21
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI24-.LCFI22
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE8:
.LSFDE10:
	.long	.LEFDE10-.LASFDE10
.LASFDE10:
	.long	.Lframe0
	.long	.LFB20
	.long	.LFE20-.LFB20
	.byte	0x4
	.long	.LCFI25-.LFB20
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI26-.LCFI25
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI30-.LCFI26
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE10:
.LSFDE12:
	.long	.LEFDE12-.LASFDE12
.LASFDE12:
	.long	.Lframe0
	.long	.LFB21
	.long	.LFE21-.LFB21
	.byte	0x4
	.long	.LCFI31-.LFB21
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI32-.LCFI31
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI35-.LCFI32
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE12:
.LSFDE14:
	.long	.LEFDE14-.LASFDE14
.LASFDE14:
	.long	.Lframe0
	.long	.LFB22
	.long	.LFE22-.LFB22
	.byte	0x4
	.long	.LCFI36-.LFB22
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI37-.LCFI36
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI39-.LCFI37
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE14:
.LSFDE16:
	.long	.LEFDE16-.LASFDE16
.LASFDE16:
	.long	.Lframe0
	.long	.LFB23
	.long	.LFE23-.LFB23
	.byte	0x4
	.long	.LCFI40-.LFB23
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI41-.LCFI40
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI44-.LCFI41
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE16:
.LSFDE18:
	.long	.LEFDE18-.LASFDE18
.LASFDE18:
	.long	.Lframe0
	.long	.LFB24
	.long	.LFE24-.LFB24
	.byte	0x4
	.long	.LCFI45-.LFB24
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI46-.LCFI45
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI48-.LCFI46
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE18:
.LSFDE20:
	.long	.LEFDE20-.LASFDE20
.LASFDE20:
	.long	.Lframe0
	.long	.LFB25
	.long	.LFE25-.LFB25
	.byte	0x4
	.long	.LCFI49-.LFB25
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI50-.LCFI49
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI52-.LCFI50
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE20:
.LSFDE22:
	.long	.LEFDE22-.LASFDE22
.LASFDE22:
	.long	.Lframe0
	.long	.LFB26
	.long	.LFE26-.LFB26
	.byte	0x4
	.long	.LCFI53-.LFB26
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI54-.LCFI53
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI58-.LCFI54
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE22:
.LSFDE24:
	.long	.LEFDE24-.LASFDE24
.LASFDE24:
	.long	.Lframe0
	.long	.LFB27
	.long	.LFE27-.LFB27
	.byte	0x4
	.long	.LCFI59-.LFB27
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI60-.LCFI59
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE24:
.LSFDE26:
	.long	.LEFDE26-.LASFDE26
.LASFDE26:
	.long	.Lframe0
	.long	.LFB28
	.long	.LFE28-.LFB28
	.byte	0x4
	.long	.LCFI62-.LFB28
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI63-.LCFI62
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE26:
.LSFDE28:
	.long	.LEFDE28-.LASFDE28
.LASFDE28:
	.long	.Lframe0
	.long	.LFB29
	.long	.LFE29-.LFB29
	.byte	0x4
	.long	.LCFI65-.LFB29
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI66-.LCFI65
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI70-.LCFI66
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE28:
.LSFDE30:
	.long	.LEFDE30-.LASFDE30
.LASFDE30:
	.long	.Lframe0
	.long	.LFB30
	.long	.LFE30-.LFB30
	.byte	0x4
	.long	.LCFI71-.LFB30
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI72-.LCFI71
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI75-.LCFI72
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE30:
.LSFDE32:
	.long	.LEFDE32-.LASFDE32
.LASFDE32:
	.long	.Lframe0
	.long	.LFB31
	.long	.LFE31-.LFB31
	.byte	0x4
	.long	.LCFI76-.LFB31
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI77-.LCFI76
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI81-.LCFI77
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE32:
.LSFDE34:
	.long	.LEFDE34-.LASFDE34
.LASFDE34:
	.long	.Lframe0
	.long	.LFB32
	.long	.LFE32-.LFB32
	.byte	0x4
	.long	.LCFI82-.LFB32
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI83-.LCFI82
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI87-.LCFI83
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE34:
.LSFDE36:
	.long	.LEFDE36-.LASFDE36
.LASFDE36:
	.long	.Lframe0
	.long	.LFB33
	.long	.LFE33-.LFB33
	.byte	0x4
	.long	.LCFI88-.LFB33
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI89-.LCFI88
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI91-.LCFI89
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE36:
.LSFDE38:
	.long	.LEFDE38-.LASFDE38
.LASFDE38:
	.long	.Lframe0
	.long	.LFB34
	.long	.LFE34-.LFB34
	.byte	0x4
	.long	.LCFI92-.LFB34
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI93-.LCFI92
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI97-.LCFI93
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE38:
.LSFDE40:
	.long	.LEFDE40-.LASFDE40
.LASFDE40:
	.long	.Lframe0
	.long	.LFB35
	.long	.LFE35-.LFB35
	.byte	0x4
	.long	.LCFI98-.LFB35
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI99-.LCFI98
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI103-.LCFI99
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE40:
.LSFDE42:
	.long	.LEFDE42-.LASFDE42
.LASFDE42:
	.long	.Lframe0
	.long	.LFB36
	.long	.LFE36-.LFB36
	.byte	0x4
	.long	.LCFI104-.LFB36
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI105-.LCFI104
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI109-.LCFI105
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE42:
.LSFDE44:
	.long	.LEFDE44-.LASFDE44
.LASFDE44:
	.long	.Lframe0
	.long	.LFB37
	.long	.LFE37-.LFB37
	.byte	0x4
	.long	.LCFI110-.LFB37
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI111-.LCFI110
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI115-.LCFI111
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE44:
.LSFDE46:
	.long	.LEFDE46-.LASFDE46
.LASFDE46:
	.long	.Lframe0
	.long	.LFB38
	.long	.LFE38-.LFB38
	.byte	0x4
	.long	.LCFI116-.LFB38
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI117-.LCFI116
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI121-.LCFI117
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE46:
.LSFDE48:
	.long	.LEFDE48-.LASFDE48
.LASFDE48:
	.long	.Lframe0
	.long	.LFB39
	.long	.LFE39-.LFB39
	.byte	0x4
	.long	.LCFI122-.LFB39
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI123-.LCFI122
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI127-.LCFI123
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE48:
.LSFDE50:
	.long	.LEFDE50-.LASFDE50
.LASFDE50:
	.long	.Lframe0
	.long	.LFB40
	.long	.LFE40-.LFB40
	.byte	0x4
	.long	.LCFI128-.LFB40
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI129-.LCFI128
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI133-.LCFI129
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE50:
.LSFDE52:
	.long	.LEFDE52-.LASFDE52
.LASFDE52:
	.long	.Lframe0
	.long	.LFB41
	.long	.LFE41-.LFB41
	.byte	0x4
	.long	.LCFI134-.LFB41
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI135-.LCFI134
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI139-.LCFI135
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE52:
.LSFDE54:
	.long	.LEFDE54-.LASFDE54
.LASFDE54:
	.long	.Lframe0
	.long	.LFB42
	.long	.LFE42-.LFB42
	.byte	0x4
	.long	.LCFI140-.LFB42
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI141-.LCFI140
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI144-.LCFI141
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE54:
.LSFDE56:
	.long	.LEFDE56-.LASFDE56
.LASFDE56:
	.long	.Lframe0
	.long	.LFB43
	.long	.LFE43-.LFB43
	.byte	0x4
	.long	.LCFI145-.LFB43
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI146-.LCFI145
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI148-.LCFI146
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE56:
.LSFDE58:
	.long	.LEFDE58-.LASFDE58
.LASFDE58:
	.long	.Lframe0
	.long	.LFB44
	.long	.LFE44-.LFB44
	.byte	0x4
	.long	.LCFI149-.LFB44
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI150-.LCFI149
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI152-.LCFI150
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE58:
.LSFDE60:
	.long	.LEFDE60-.LASFDE60
.LASFDE60:
	.long	.Lframe0
	.long	.LFB45
	.long	.LFE45-.LFB45
	.byte	0x4
	.long	.LCFI153-.LFB45
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI154-.LCFI153
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI158-.LCFI154
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE60:
.LSFDE62:
	.long	.LEFDE62-.LASFDE62
.LASFDE62:
	.long	.Lframe0
	.long	.LFB46
	.long	.LFE46-.LFB46
	.byte	0x4
	.long	.LCFI159-.LFB46
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI160-.LCFI159
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI162-.LCFI160
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE62:
.LSFDE64:
	.long	.LEFDE64-.LASFDE64
.LASFDE64:
	.long	.Lframe0
	.long	.LFB47
	.long	.LFE47-.LFB47
	.byte	0x4
	.long	.LCFI163-.LFB47
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI164-.LCFI163
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI168-.LCFI164
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE64:
.LSFDE66:
	.long	.LEFDE66-.LASFDE66
.LASFDE66:
	.long	.Lframe0
	.long	.LFB48
	.long	.LFE48-.LFB48
	.byte	0x4
	.long	.LCFI169-.LFB48
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI170-.LCFI169
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI172-.LCFI170
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE66:
.LSFDE68:
	.long	.LEFDE68-.LASFDE68
.LASFDE68:
	.long	.Lframe0
	.long	.LFB49
	.long	.LFE49-.LFB49
	.byte	0x4
	.long	.LCFI173-.LFB49
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI174-.LCFI173
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI178-.LCFI174
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE68:
.LSFDE70:
	.long	.LEFDE70-.LASFDE70
.LASFDE70:
	.long	.Lframe0
	.long	.LFB50
	.long	.LFE50-.LFB50
	.byte	0x4
	.long	.LCFI179-.LFB50
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI180-.LCFI179
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI182-.LCFI180
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE70:
.LSFDE72:
	.long	.LEFDE72-.LASFDE72
.LASFDE72:
	.long	.Lframe0
	.long	.LFB51
	.long	.LFE51-.LFB51
	.byte	0x4
	.long	.LCFI183-.LFB51
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI184-.LCFI183
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI188-.LCFI184
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE72:
.LSFDE74:
	.long	.LEFDE74-.LASFDE74
.LASFDE74:
	.long	.Lframe0
	.long	.LFB52
	.long	.LFE52-.LFB52
	.byte	0x4
	.long	.LCFI189-.LFB52
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI190-.LCFI189
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI193-.LCFI190
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE74:
.LSFDE76:
	.long	.LEFDE76-.LASFDE76
.LASFDE76:
	.long	.Lframe0
	.long	.LFB53
	.long	.LFE53-.LFB53
	.byte	0x4
	.long	.LCFI194-.LFB53
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI195-.LCFI194
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI199-.LCFI195
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE76:
.LSFDE78:
	.long	.LEFDE78-.LASFDE78
.LASFDE78:
	.long	.Lframe0
	.long	.LFB54
	.long	.LFE54-.LFB54
	.byte	0x4
	.long	.LCFI200-.LFB54
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI201-.LCFI200
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI205-.LCFI201
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE78:
.LSFDE80:
	.long	.LEFDE80-.LASFDE80
.LASFDE80:
	.long	.Lframe0
	.long	.LFB55
	.long	.LFE55-.LFB55
	.byte	0x4
	.long	.LCFI206-.LFB55
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI207-.LCFI206
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI210-.LCFI207
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE80:
.LSFDE82:
	.long	.LEFDE82-.LASFDE82
.LASFDE82:
	.long	.Lframe0
	.long	.LFB56
	.long	.LFE56-.LFB56
	.byte	0x4
	.long	.LCFI211-.LFB56
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI212-.LCFI211
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI215-.LCFI212
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE82:
.LSFDE84:
	.long	.LEFDE84-.LASFDE84
.LASFDE84:
	.long	.Lframe0
	.long	.LFB57
	.long	.LFE57-.LFB57
	.byte	0x4
	.long	.LCFI216-.LFB57
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI217-.LCFI216
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI221-.LCFI217
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE84:
.LSFDE86:
	.long	.LEFDE86-.LASFDE86
.LASFDE86:
	.long	.Lframe0
	.long	.LFB58
	.long	.LFE58-.LFB58
	.byte	0x4
	.long	.LCFI222-.LFB58
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI223-.LCFI222
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI227-.LCFI223
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE86:
.LSFDE88:
	.long	.LEFDE88-.LASFDE88
.LASFDE88:
	.long	.Lframe0
	.long	.LFB59
	.long	.LFE59-.LFB59
	.byte	0x4
	.long	.LCFI228-.LFB59
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI229-.LCFI228
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI231-.LCFI229
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE88:
.LSFDE90:
	.long	.LEFDE90-.LASFDE90
.LASFDE90:
	.long	.Lframe0
	.long	.LFB60
	.long	.LFE60-.LFB60
	.byte	0x4
	.long	.LCFI232-.LFB60
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI233-.LCFI232
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE90:
.LSFDE92:
	.long	.LEFDE92-.LASFDE92
.LASFDE92:
	.long	.Lframe0
	.long	.LFB61
	.long	.LFE61-.LFB61
	.byte	0x4
	.long	.LCFI235-.LFB61
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI236-.LCFI235
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI238-.LCFI236
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE92:
.LSFDE94:
	.long	.LEFDE94-.LASFDE94
.LASFDE94:
	.long	.Lframe0
	.long	.LFB62
	.long	.LFE62-.LFB62
	.byte	0x4
	.long	.LCFI239-.LFB62
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI240-.LCFI239
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI243-.LCFI240
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE94:
.LSFDE96:
	.long	.LEFDE96-.LASFDE96
.LASFDE96:
	.long	.Lframe0
	.long	.LFB63
	.long	.LFE63-.LFB63
	.byte	0x4
	.long	.LCFI244-.LFB63
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI245-.LCFI244
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI247-.LCFI245
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE96:
.LSFDE98:
	.long	.LEFDE98-.LASFDE98
.LASFDE98:
	.long	.Lframe0
	.long	.LFB64
	.long	.LFE64-.LFB64
	.byte	0x4
	.long	.LCFI248-.LFB64
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI249-.LCFI248
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI253-.LCFI249
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE98:
.LSFDE100:
	.long	.LEFDE100-.LASFDE100
.LASFDE100:
	.long	.Lframe0
	.long	.LFB65
	.long	.LFE65-.LFB65
	.byte	0x4
	.long	.LCFI254-.LFB65
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI255-.LCFI254
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI259-.LCFI255
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE100:
.LSFDE102:
	.long	.LEFDE102-.LASFDE102
.LASFDE102:
	.long	.Lframe0
	.long	.LFB66
	.long	.LFE66-.LFB66
	.byte	0x4
	.long	.LCFI260-.LFB66
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI261-.LCFI260
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI263-.LCFI261
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE102:
.LSFDE104:
	.long	.LEFDE104-.LASFDE104
.LASFDE104:
	.long	.Lframe0
	.long	.LFB67
	.long	.LFE67-.LFB67
	.byte	0x4
	.long	.LCFI264-.LFB67
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI265-.LCFI264
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI267-.LCFI265
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE104:
.LSFDE106:
	.long	.LEFDE106-.LASFDE106
.LASFDE106:
	.long	.Lframe0
	.long	.LFB68
	.long	.LFE68-.LFB68
	.byte	0x4
	.long	.LCFI268-.LFB68
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI269-.LCFI268
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI271-.LCFI269
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE106:
.LSFDE108:
	.long	.LEFDE108-.LASFDE108
.LASFDE108:
	.long	.Lframe0
	.long	.LFB69
	.long	.LFE69-.LFB69
	.byte	0x4
	.long	.LCFI272-.LFB69
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI273-.LCFI272
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI275-.LCFI273
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE108:
.LSFDE110:
	.long	.LEFDE110-.LASFDE110
.LASFDE110:
	.long	.Lframe0
	.long	.LFB70
	.long	.LFE70-.LFB70
	.byte	0x4
	.long	.LCFI276-.LFB70
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI277-.LCFI276
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI279-.LCFI277
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE110:
.LSFDE112:
	.long	.LEFDE112-.LASFDE112
.LASFDE112:
	.long	.Lframe0
	.long	.LFB71
	.long	.LFE71-.LFB71
	.byte	0x4
	.long	.LCFI280-.LFB71
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI281-.LCFI280
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI285-.LCFI281
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE112:
.LSFDE114:
	.long	.LEFDE114-.LASFDE114
.LASFDE114:
	.long	.Lframe0
	.long	.LFB72
	.long	.LFE72-.LFB72
	.byte	0x4
	.long	.LCFI286-.LFB72
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI287-.LCFI286
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI291-.LCFI287
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE114:
.LSFDE116:
	.long	.LEFDE116-.LASFDE116
.LASFDE116:
	.long	.Lframe0
	.long	.LFB73
	.long	.LFE73-.LFB73
	.byte	0x4
	.long	.LCFI292-.LFB73
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI293-.LCFI292
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI295-.LCFI293
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE116:
.LSFDE118:
	.long	.LEFDE118-.LASFDE118
.LASFDE118:
	.long	.Lframe0
	.long	.LFB74
	.long	.LFE74-.LFB74
	.byte	0x4
	.long	.LCFI296-.LFB74
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI297-.LCFI296
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI299-.LCFI297
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE118:
.LSFDE120:
	.long	.LEFDE120-.LASFDE120
.LASFDE120:
	.long	.Lframe0
	.long	.LFB75
	.long	.LFE75-.LFB75
	.byte	0x4
	.long	.LCFI300-.LFB75
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI301-.LCFI300
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI303-.LCFI301
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE120:
.LSFDE122:
	.long	.LEFDE122-.LASFDE122
.LASFDE122:
	.long	.Lframe0
	.long	.LFB76
	.long	.LFE76-.LFB76
	.byte	0x4
	.long	.LCFI304-.LFB76
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI305-.LCFI304
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI309-.LCFI305
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE122:
.LSFDE124:
	.long	.LEFDE124-.LASFDE124
.LASFDE124:
	.long	.Lframe0
	.long	.LFB77
	.long	.LFE77-.LFB77
	.byte	0x4
	.long	.LCFI310-.LFB77
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI311-.LCFI310
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI313-.LCFI311
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE124:
.LSFDE126:
	.long	.LEFDE126-.LASFDE126
.LASFDE126:
	.long	.Lframe0
	.long	.LFB78
	.long	.LFE78-.LFB78
	.byte	0x4
	.long	.LCFI314-.LFB78
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI315-.LCFI314
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI317-.LCFI315
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE126:
.LSFDE128:
	.long	.LEFDE128-.LASFDE128
.LASFDE128:
	.long	.Lframe0
	.long	.LFB79
	.long	.LFE79-.LFB79
	.byte	0x4
	.long	.LCFI318-.LFB79
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI319-.LCFI318
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI322-.LCFI319
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE128:
.LSFDE130:
	.long	.LEFDE130-.LASFDE130
.LASFDE130:
	.long	.Lframe0
	.long	.LFB80
	.long	.LFE80-.LFB80
	.byte	0x4
	.long	.LCFI323-.LFB80
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI324-.LCFI323
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI327-.LCFI324
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE130:
	.file 2 "../../../kgccfe/gnu/MIPS/config.h"
	.file 3 "../../../kgccfe/gnu/rtl.h"
	.file 4 "../../../kgccfe/gnu/machmode.h"
	.file 5 "../../../kgccfe/gnu/bitmap.h"
	.file 6 "../../../kgccfe/gnu/basic-block.h"
	.file 7 "../../../kgccfe/gnu/sbitmap.h"
	.file 8 "../../../kgccfe/gnu/hard-reg-set.h"
	.file 9 "/usr/include/stdio.h"
	.file 10 "/usr/include/libio.h"
	.file 11 "/usr/include/bits/types.h"
	.file 12 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h"
	.file 13 "../../../kgccfe/gnu/MIPS/mips.h"
	.file 14 "../../../kgccfe/gnu/flags.h"
	.file 15 "../../../kgccfe/gnu/varray.h"
	.file 16 "../../../kgccfe/gnu/regs.h"
	.file 17 "../../../kgccfe/gnu/function.h"
	.text
.Letext0:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
.LLST0:
	.long	.LFB15-.Ltext0
	.long	.LCFI0-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI0-.Ltext0
	.long	.LCFI1-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI1-.Ltext0
	.long	.LFE15-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST1:
	.long	.LFB16-.Ltext0
	.long	.LCFI6-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI6-.Ltext0
	.long	.LCFI7-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI7-.Ltext0
	.long	.LFE16-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST2:
	.long	.LFB17-.Ltext0
	.long	.LCFI10-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI10-.Ltext0
	.long	.LCFI11-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI11-.Ltext0
	.long	.LFE17-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST3:
	.long	.LFB18-.Ltext0
	.long	.LCFI16-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI16-.Ltext0
	.long	.LCFI17-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI17-.Ltext0
	.long	.LFE18-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST4:
	.long	.LFB19-.Ltext0
	.long	.LCFI21-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI21-.Ltext0
	.long	.LCFI22-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI22-.Ltext0
	.long	.LFE19-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST5:
	.long	.LFB20-.Ltext0
	.long	.LCFI25-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI25-.Ltext0
	.long	.LCFI26-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI26-.Ltext0
	.long	.LFE20-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST6:
	.long	.LFB21-.Ltext0
	.long	.LCFI31-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI31-.Ltext0
	.long	.LCFI32-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI32-.Ltext0
	.long	.LFE21-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST7:
	.long	.LFB22-.Ltext0
	.long	.LCFI36-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI36-.Ltext0
	.long	.LCFI37-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI37-.Ltext0
	.long	.LFE22-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST8:
	.long	.LFB23-.Ltext0
	.long	.LCFI40-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI40-.Ltext0
	.long	.LCFI41-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI41-.Ltext0
	.long	.LFE23-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST9:
	.long	.LFB24-.Ltext0
	.long	.LCFI45-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI45-.Ltext0
	.long	.LCFI46-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI46-.Ltext0
	.long	.LFE24-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST10:
	.long	.LFB25-.Ltext0
	.long	.LCFI49-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI49-.Ltext0
	.long	.LCFI50-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI50-.Ltext0
	.long	.LFE25-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST11:
	.long	.LFB26-.Ltext0
	.long	.LCFI53-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI53-.Ltext0
	.long	.LCFI54-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI54-.Ltext0
	.long	.LFE26-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST12:
	.long	.LFB27-.Ltext0
	.long	.LCFI59-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI59-.Ltext0
	.long	.LCFI60-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI60-.Ltext0
	.long	.LFE27-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST13:
	.long	.LFB28-.Ltext0
	.long	.LCFI62-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI62-.Ltext0
	.long	.LCFI63-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI63-.Ltext0
	.long	.LFE28-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST14:
	.long	.LFB29-.Ltext0
	.long	.LCFI65-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI65-.Ltext0
	.long	.LCFI66-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI66-.Ltext0
	.long	.LFE29-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST15:
	.long	.LFB30-.Ltext0
	.long	.LCFI71-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI71-.Ltext0
	.long	.LCFI72-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI72-.Ltext0
	.long	.LFE30-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST16:
	.long	.LFB31-.Ltext0
	.long	.LCFI76-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI76-.Ltext0
	.long	.LCFI77-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI77-.Ltext0
	.long	.LFE31-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST17:
	.long	.LFB32-.Ltext0
	.long	.LCFI82-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI82-.Ltext0
	.long	.LCFI83-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI83-.Ltext0
	.long	.LFE32-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST18:
	.long	.LFB33-.Ltext0
	.long	.LCFI88-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI88-.Ltext0
	.long	.LCFI89-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI89-.Ltext0
	.long	.LFE33-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST19:
	.long	.LFB34-.Ltext0
	.long	.LCFI92-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI92-.Ltext0
	.long	.LCFI93-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI93-.Ltext0
	.long	.LFE34-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST20:
	.long	.LFB35-.Ltext0
	.long	.LCFI98-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI98-.Ltext0
	.long	.LCFI99-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI99-.Ltext0
	.long	.LFE35-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST21:
	.long	.LFB36-.Ltext0
	.long	.LCFI104-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI104-.Ltext0
	.long	.LCFI105-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI105-.Ltext0
	.long	.LFE36-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST22:
	.long	.LFB37-.Ltext0
	.long	.LCFI110-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI110-.Ltext0
	.long	.LCFI111-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI111-.Ltext0
	.long	.LFE37-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST23:
	.long	.LFB38-.Ltext0
	.long	.LCFI116-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI116-.Ltext0
	.long	.LCFI117-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI117-.Ltext0
	.long	.LFE38-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST24:
	.long	.LFB39-.Ltext0
	.long	.LCFI122-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI122-.Ltext0
	.long	.LCFI123-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI123-.Ltext0
	.long	.LFE39-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST25:
	.long	.LFB40-.Ltext0
	.long	.LCFI128-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI128-.Ltext0
	.long	.LCFI129-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI129-.Ltext0
	.long	.LFE40-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST26:
	.long	.LFB41-.Ltext0
	.long	.LCFI134-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI134-.Ltext0
	.long	.LCFI135-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI135-.Ltext0
	.long	.LFE41-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST27:
	.long	.LFB42-.Ltext0
	.long	.LCFI140-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI140-.Ltext0
	.long	.LCFI141-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI141-.Ltext0
	.long	.LFE42-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST28:
	.long	.LFB43-.Ltext0
	.long	.LCFI145-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI145-.Ltext0
	.long	.LCFI146-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI146-.Ltext0
	.long	.LFE43-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST29:
	.long	.LFB44-.Ltext0
	.long	.LCFI149-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI149-.Ltext0
	.long	.LCFI150-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI150-.Ltext0
	.long	.LFE44-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST30:
	.long	.LFB45-.Ltext0
	.long	.LCFI153-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI153-.Ltext0
	.long	.LCFI154-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI154-.Ltext0
	.long	.LFE45-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST31:
	.long	.LFB46-.Ltext0
	.long	.LCFI159-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI159-.Ltext0
	.long	.LCFI160-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI160-.Ltext0
	.long	.LFE46-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST32:
	.long	.LFB47-.Ltext0
	.long	.LCFI163-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI163-.Ltext0
	.long	.LCFI164-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI164-.Ltext0
	.long	.LFE47-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST33:
	.long	.LFB48-.Ltext0
	.long	.LCFI169-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI169-.Ltext0
	.long	.LCFI170-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI170-.Ltext0
	.long	.LFE48-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST34:
	.long	.LFB49-.Ltext0
	.long	.LCFI173-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI173-.Ltext0
	.long	.LCFI174-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI174-.Ltext0
	.long	.LFE49-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST35:
	.long	.LFB50-.Ltext0
	.long	.LCFI179-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI179-.Ltext0
	.long	.LCFI180-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI180-.Ltext0
	.long	.LFE50-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST36:
	.long	.LFB51-.Ltext0
	.long	.LCFI183-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI183-.Ltext0
	.long	.LCFI184-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI184-.Ltext0
	.long	.LFE51-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST37:
	.long	.LFB52-.Ltext0
	.long	.LCFI189-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI189-.Ltext0
	.long	.LCFI190-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI190-.Ltext0
	.long	.LFE52-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST38:
	.long	.LFB53-.Ltext0
	.long	.LCFI194-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI194-.Ltext0
	.long	.LCFI195-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI195-.Ltext0
	.long	.LFE53-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST39:
	.long	.LFB54-.Ltext0
	.long	.LCFI200-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI200-.Ltext0
	.long	.LCFI201-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI201-.Ltext0
	.long	.LFE54-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST40:
	.long	.LFB55-.Ltext0
	.long	.LCFI206-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI206-.Ltext0
	.long	.LCFI207-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI207-.Ltext0
	.long	.LFE55-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST41:
	.long	.LFB56-.Ltext0
	.long	.LCFI211-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI211-.Ltext0
	.long	.LCFI212-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI212-.Ltext0
	.long	.LFE56-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST42:
	.long	.LFB57-.Ltext0
	.long	.LCFI216-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI216-.Ltext0
	.long	.LCFI217-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI217-.Ltext0
	.long	.LFE57-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST43:
	.long	.LFB58-.Ltext0
	.long	.LCFI222-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI222-.Ltext0
	.long	.LCFI223-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI223-.Ltext0
	.long	.LFE58-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST44:
	.long	.LFB59-.Ltext0
	.long	.LCFI228-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI228-.Ltext0
	.long	.LCFI229-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI229-.Ltext0
	.long	.LFE59-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST45:
	.long	.LFB60-.Ltext0
	.long	.LCFI232-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI232-.Ltext0
	.long	.LCFI233-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI233-.Ltext0
	.long	.LFE60-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST46:
	.long	.LFB61-.Ltext0
	.long	.LCFI235-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI235-.Ltext0
	.long	.LCFI236-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI236-.Ltext0
	.long	.LFE61-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST47:
	.long	.LFB62-.Ltext0
	.long	.LCFI239-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI239-.Ltext0
	.long	.LCFI240-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI240-.Ltext0
	.long	.LFE62-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST48:
	.long	.LFB63-.Ltext0
	.long	.LCFI244-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI244-.Ltext0
	.long	.LCFI245-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI245-.Ltext0
	.long	.LFE63-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST49:
	.long	.LFB64-.Ltext0
	.long	.LCFI248-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI248-.Ltext0
	.long	.LCFI249-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI249-.Ltext0
	.long	.LFE64-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST50:
	.long	.LFB65-.Ltext0
	.long	.LCFI254-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI254-.Ltext0
	.long	.LCFI255-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI255-.Ltext0
	.long	.LFE65-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST51:
	.long	.LFB66-.Ltext0
	.long	.LCFI260-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI260-.Ltext0
	.long	.LCFI261-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI261-.Ltext0
	.long	.LFE66-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST52:
	.long	.LFB67-.Ltext0
	.long	.LCFI264-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI264-.Ltext0
	.long	.LCFI265-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI265-.Ltext0
	.long	.LFE67-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST53:
	.long	.LFB68-.Ltext0
	.long	.LCFI268-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI268-.Ltext0
	.long	.LCFI269-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI269-.Ltext0
	.long	.LFE68-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST54:
	.long	.LFB69-.Ltext0
	.long	.LCFI272-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI272-.Ltext0
	.long	.LCFI273-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI273-.Ltext0
	.long	.LFE69-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST55:
	.long	.LFB70-.Ltext0
	.long	.LCFI276-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI276-.Ltext0
	.long	.LCFI277-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI277-.Ltext0
	.long	.LFE70-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST56:
	.long	.LFB71-.Ltext0
	.long	.LCFI280-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI280-.Ltext0
	.long	.LCFI281-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI281-.Ltext0
	.long	.LFE71-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST57:
	.long	.LFB72-.Ltext0
	.long	.LCFI286-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI286-.Ltext0
	.long	.LCFI287-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI287-.Ltext0
	.long	.LFE72-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST58:
	.long	.LFB73-.Ltext0
	.long	.LCFI292-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI292-.Ltext0
	.long	.LCFI293-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI293-.Ltext0
	.long	.LFE73-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST59:
	.long	.LFB74-.Ltext0
	.long	.LCFI296-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI296-.Ltext0
	.long	.LCFI297-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI297-.Ltext0
	.long	.LFE74-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST60:
	.long	.LFB75-.Ltext0
	.long	.LCFI300-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI300-.Ltext0
	.long	.LCFI301-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI301-.Ltext0
	.long	.LFE75-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST61:
	.long	.LFB76-.Ltext0
	.long	.LCFI304-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI304-.Ltext0
	.long	.LCFI305-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI305-.Ltext0
	.long	.LFE76-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST62:
	.long	.LFB77-.Ltext0
	.long	.LCFI310-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI310-.Ltext0
	.long	.LCFI311-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI311-.Ltext0
	.long	.LFE77-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST63:
	.long	.LFB78-.Ltext0
	.long	.LCFI314-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI314-.Ltext0
	.long	.LCFI315-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI315-.Ltext0
	.long	.LFE78-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST64:
	.long	.LFB79-.Ltext0
	.long	.LCFI318-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI318-.Ltext0
	.long	.LCFI319-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI319-.Ltext0
	.long	.LFE79-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST65:
	.long	.LFB80-.Ltext0
	.long	.LCFI323-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI323-.Ltext0
	.long	.LCFI324-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI324-.Ltext0
	.long	.LFE80-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
	.section	.debug_info
	.long	0x7e0b
	.value	0x2
	.long	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.long	.Ldebug_line0
	.long	.Letext0
	.long	.Ltext0
	.string	"GNU C 4.1.2 (Ubuntu 4.1.2-0ubuntu4)"
	.byte	0x1
	.string	"../../../kgccfe/gnu/combine.c"
	.string	"/usa/handong/simplnano/cmplr-open64-merge/targia32_sl1/gccfe/gnu"
	.uleb128 0x2
	.string	"rtx"
	.byte	0x2
	.byte	0xc
	.long	0xa7
	.uleb128 0x3
	.byte	0x4
	.long	0xad
	.uleb128 0x4
	.long	0x19b
	.string	"rtx_def"
	.byte	0xc
	.byte	0x2
	.byte	0xb
	.uleb128 0x5
	.long	.LASF0
	.byte	0x3
	.byte	0x8a
	.long	0xb7c
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x3
	.byte	0x8d
	.long	0x884
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"jump"
	.byte	0x3
	.byte	0x94
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"call"
	.byte	0x3
	.byte	0x97
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"unchanging"
	.byte	0x3
	.byte	0x9f
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"volatil"
	.byte	0x3
	.byte	0xa8
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"in_struct"
	.byte	0x3
	.byte	0xba
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"used"
	.byte	0x3
	.byte	0xc1
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"integrated"
	.byte	0x3
	.byte	0xc6
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"frame_related"
	.byte	0x3
	.byte	0xcf
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"fld"
	.byte	0x3
	.byte	0xd4
	.long	0x1794
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"rtvec"
	.byte	0x2
	.byte	0xe
	.long	0x1a8
	.uleb128 0x3
	.byte	0x4
	.long	0x1ae
	.uleb128 0x4
	.long	0x1e3
	.string	"rtvec_def"
	.byte	0x8
	.byte	0x2
	.byte	0xd
	.uleb128 0x7
	.string	"num_elem"
	.byte	0x3
	.byte	0xf8
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"elem"
	.byte	0x3
	.byte	0xf9
	.long	0x17a4
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"tree"
	.byte	0x2
	.byte	0x10
	.long	0x1ef
	.uleb128 0x3
	.byte	0x4
	.long	0x1f5
	.uleb128 0x8
	.string	"tree_node"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x207
	.uleb128 0x9
	.long	0x20c
	.uleb128 0xa
	.string	"char"
	.byte	0x1
	.byte	0x8
	.uleb128 0xa
	.string	"int"
	.byte	0x4
	.byte	0x5
	.uleb128 0xb
	.long	0x391
	.string	"reg_class"
	.byte	0x4
	.byte	0xd
	.value	0x7ec
	.uleb128 0xc
	.string	"NO_REGS"
	.sleb128 0
	.uleb128 0xc
	.string	"M16_NA_REGS"
	.sleb128 1
	.uleb128 0xc
	.string	"M16_REGS"
	.sleb128 2
	.uleb128 0xc
	.string	"T_REG"
	.sleb128 3
	.uleb128 0xc
	.string	"M16_T_REGS"
	.sleb128 4
	.uleb128 0xc
	.string	"GR_REGS"
	.sleb128 5
	.uleb128 0xc
	.string	"FP_REGS"
	.sleb128 6
	.uleb128 0xc
	.string	"HI_REG"
	.sleb128 7
	.uleb128 0xc
	.string	"LO_REG"
	.sleb128 8
	.uleb128 0xc
	.string	"HILO_REG"
	.sleb128 9
	.uleb128 0xc
	.string	"MD_REGS"
	.sleb128 10
	.uleb128 0xc
	.string	"COP0_REGS"
	.sleb128 11
	.uleb128 0xc
	.string	"COP2_REGS"
	.sleb128 12
	.uleb128 0xc
	.string	"COP3_REGS"
	.sleb128 13
	.uleb128 0xc
	.string	"HI_AND_GR_REGS"
	.sleb128 14
	.uleb128 0xc
	.string	"LO_AND_GR_REGS"
	.sleb128 15
	.uleb128 0xc
	.string	"HILO_AND_GR_REGS"
	.sleb128 16
	.uleb128 0xc
	.string	"HI_AND_FP_REGS"
	.sleb128 17
	.uleb128 0xc
	.string	"COP0_AND_GR_REGS"
	.sleb128 18
	.uleb128 0xc
	.string	"COP2_AND_GR_REGS"
	.sleb128 19
	.uleb128 0xc
	.string	"COP3_AND_GR_REGS"
	.sleb128 20
	.uleb128 0xc
	.string	"ALL_COP_REGS"
	.sleb128 21
	.uleb128 0xc
	.string	"ALL_COP_AND_GR_REGS"
	.sleb128 22
	.uleb128 0xc
	.string	"ST_REGS"
	.sleb128 23
	.uleb128 0xc
	.string	"ALL_REGS"
	.sleb128 24
	.uleb128 0xc
	.string	"LIM_REG_CLASSES"
	.sleb128 25
	.byte	0x0
	.uleb128 0xd
	.long	0x463
	.string	"mips_args"
	.byte	0x40
	.byte	0xd
	.value	0xaaa
	.uleb128 0xe
	.string	"gp_reg_found"
	.byte	0xd
	.value	0xaad
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0xe
	.string	"arg_number"
	.byte	0xd
	.value	0xab0
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0xe
	.string	"num_gprs"
	.byte	0xd
	.value	0xab5
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0xe
	.string	"num_fprs"
	.byte	0xd
	.value	0xab8
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0xe
	.string	"stack_words"
	.byte	0xd
	.value	0xabb
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0xe
	.string	"fp_code"
	.byte	0xd
	.value	0xac8
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0xe
	.string	"prototype"
	.byte	0xd
	.value	0xacb
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0xe
	.string	"num_adjusts"
	.byte	0xd
	.value	0xad3
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0xe
	.string	"adjust"
	.byte	0xd
	.value	0xad4
	.long	0x46a
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.byte	0x0
	.uleb128 0xf
	.long	.LASF2
	.byte	0x4
	.byte	0x7
	.uleb128 0x10
	.long	0x47a
	.long	0x9c
	.uleb128 0x11
	.long	0x47a
	.byte	0x7
	.byte	0x0
	.uleb128 0xf
	.long	.LASF2
	.byte	0x4
	.byte	0x7
	.uleb128 0x12
	.string	"CUMULATIVE_ARGS"
	.byte	0xd
	.value	0xad5
	.long	0x391
	.uleb128 0x2
	.string	"size_t"
	.byte	0xc
	.byte	0xd6
	.long	0x463
	.uleb128 0xa
	.string	"unsigned char"
	.byte	0x1
	.byte	0x8
	.uleb128 0xa
	.string	"short unsigned int"
	.byte	0x2
	.byte	0x7
	.uleb128 0xa
	.string	"long unsigned int"
	.byte	0x4
	.byte	0x7
	.uleb128 0xa
	.string	"signed char"
	.byte	0x1
	.byte	0x6
	.uleb128 0xa
	.string	"short int"
	.byte	0x2
	.byte	0x5
	.uleb128 0xa
	.string	"long long int"
	.byte	0x8
	.byte	0x5
	.uleb128 0xa
	.string	"long long unsigned int"
	.byte	0x8
	.byte	0x7
	.uleb128 0x2
	.string	"__quad_t"
	.byte	0xb
	.byte	0x3b
	.long	0x4ff
	.uleb128 0x2
	.string	"__off_t"
	.byte	0xb
	.byte	0x90
	.long	0x549
	.uleb128 0xa
	.string	"long int"
	.byte	0x4
	.byte	0x5
	.uleb128 0x2
	.string	"__off64_t"
	.byte	0xb
	.byte	0x91
	.long	0x52a
	.uleb128 0x13
	.byte	0x4
	.uleb128 0x3
	.byte	0x4
	.long	0x20c
	.uleb128 0x2
	.string	"FILE"
	.byte	0x9
	.byte	0x2e
	.long	0x57a
	.uleb128 0x14
	.long	0x7f5
	.long	.LASF3
	.byte	0x94
	.byte	0x9
	.byte	0x2e
	.uleb128 0xe
	.string	"_flags"
	.byte	0xa
	.value	0x10c
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0xe
	.string	"_IO_read_ptr"
	.byte	0xa
	.value	0x111
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0xe
	.string	"_IO_read_end"
	.byte	0xa
	.value	0x112
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0xe
	.string	"_IO_read_base"
	.byte	0xa
	.value	0x113
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0xe
	.string	"_IO_write_base"
	.byte	0xa
	.value	0x114
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0xe
	.string	"_IO_write_ptr"
	.byte	0xa
	.value	0x115
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0xe
	.string	"_IO_write_end"
	.byte	0xa
	.value	0x116
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0xe
	.string	"_IO_buf_base"
	.byte	0xa
	.value	0x117
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0xe
	.string	"_IO_buf_end"
	.byte	0xa
	.value	0x118
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0xe
	.string	"_IO_save_base"
	.byte	0xa
	.value	0x11a
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0xe
	.string	"_IO_backup_base"
	.byte	0xa
	.value	0x11b
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0xe
	.string	"_IO_save_end"
	.byte	0xa
	.value	0x11c
	.long	0x568
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0xe
	.string	"_markers"
	.byte	0xa
	.value	0x11e
	.long	0x84c
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0xe
	.string	"_chain"
	.byte	0xa
	.value	0x120
	.long	0x852
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0xe
	.string	"_fileno"
	.byte	0xa
	.value	0x122
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0xe
	.string	"_flags2"
	.byte	0xa
	.value	0x126
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0xe
	.string	"_old_offset"
	.byte	0xa
	.value	0x128
	.long	0x53a
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0xe
	.string	"_cur_column"
	.byte	0xa
	.value	0x12c
	.long	0x4b8
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0xe
	.string	"_vtable_offset"
	.byte	0xa
	.value	0x12d
	.long	0x4e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x46
	.uleb128 0xe
	.string	"_shortbuf"
	.byte	0xa
	.value	0x12e
	.long	0x858
	.byte	0x2
	.byte	0x23
	.uleb128 0x47
	.uleb128 0xe
	.string	"_lock"
	.byte	0xa
	.value	0x132
	.long	0x868
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0xe
	.string	"_offset"
	.byte	0xa
	.value	0x13b
	.long	0x555
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0xe
	.string	"__pad1"
	.byte	0xa
	.value	0x144
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0xe
	.string	"__pad2"
	.byte	0xa
	.value	0x145
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0xe
	.string	"__pad3"
	.byte	0xa
	.value	0x146
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0xe
	.string	"__pad4"
	.byte	0xa
	.value	0x147
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0xe
	.string	"__pad5"
	.byte	0xa
	.value	0x148
	.long	0x499
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0xe
	.string	"_mode"
	.byte	0xa
	.value	0x14a
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0xe
	.string	"_unused2"
	.byte	0xa
	.value	0x14c
	.long	0x86e
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x4a7
	.uleb128 0x15
	.string	"_IO_lock_t"
	.byte	0xa
	.byte	0xb0
	.uleb128 0x4
	.long	0x84c
	.string	"_IO_marker"
	.byte	0xc
	.byte	0xa
	.byte	0xb6
	.uleb128 0x7
	.string	"_next"
	.byte	0xa
	.byte	0xb7
	.long	0x84c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"_sbuf"
	.byte	0xa
	.byte	0xb8
	.long	0x852
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"_pos"
	.byte	0xa
	.byte	0xbc
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x809
	.uleb128 0x3
	.byte	0x4
	.long	0x57a
	.uleb128 0x10
	.long	0x868
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x7fb
	.uleb128 0x10
	.long	0x87e
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x27
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x214
	.uleb128 0x16
	.long	0xacd
	.string	"machine_mode"
	.byte	0x4
	.byte	0x4
	.byte	0x1d
	.uleb128 0xc
	.string	"VOIDmode"
	.sleb128 0
	.uleb128 0xc
	.string	"BImode"
	.sleb128 1
	.uleb128 0xc
	.string	"QImode"
	.sleb128 2
	.uleb128 0xc
	.string	"HImode"
	.sleb128 3
	.uleb128 0xc
	.string	"SImode"
	.sleb128 4
	.uleb128 0xc
	.string	"DImode"
	.sleb128 5
	.uleb128 0xc
	.string	"TImode"
	.sleb128 6
	.uleb128 0xc
	.string	"OImode"
	.sleb128 7
	.uleb128 0xc
	.string	"PQImode"
	.sleb128 8
	.uleb128 0xc
	.string	"PHImode"
	.sleb128 9
	.uleb128 0xc
	.string	"PSImode"
	.sleb128 10
	.uleb128 0xc
	.string	"PDImode"
	.sleb128 11
	.uleb128 0xc
	.string	"QFmode"
	.sleb128 12
	.uleb128 0xc
	.string	"HFmode"
	.sleb128 13
	.uleb128 0xc
	.string	"TQFmode"
	.sleb128 14
	.uleb128 0xc
	.string	"SFmode"
	.sleb128 15
	.uleb128 0xc
	.string	"DFmode"
	.sleb128 16
	.uleb128 0xc
	.string	"XFmode"
	.sleb128 17
	.uleb128 0xc
	.string	"TFmode"
	.sleb128 18
	.uleb128 0xc
	.string	"QCmode"
	.sleb128 19
	.uleb128 0xc
	.string	"HCmode"
	.sleb128 20
	.uleb128 0xc
	.string	"SCmode"
	.sleb128 21
	.uleb128 0xc
	.string	"DCmode"
	.sleb128 22
	.uleb128 0xc
	.string	"XCmode"
	.sleb128 23
	.uleb128 0xc
	.string	"TCmode"
	.sleb128 24
	.uleb128 0xc
	.string	"CQImode"
	.sleb128 25
	.uleb128 0xc
	.string	"CHImode"
	.sleb128 26
	.uleb128 0xc
	.string	"CSImode"
	.sleb128 27
	.uleb128 0xc
	.string	"CDImode"
	.sleb128 28
	.uleb128 0xc
	.string	"CTImode"
	.sleb128 29
	.uleb128 0xc
	.string	"COImode"
	.sleb128 30
	.uleb128 0xc
	.string	"V1DImode"
	.sleb128 31
	.uleb128 0xc
	.string	"V2QImode"
	.sleb128 32
	.uleb128 0xc
	.string	"V2HImode"
	.sleb128 33
	.uleb128 0xc
	.string	"V2SImode"
	.sleb128 34
	.uleb128 0xc
	.string	"V2DImode"
	.sleb128 35
	.uleb128 0xc
	.string	"V4QImode"
	.sleb128 36
	.uleb128 0xc
	.string	"V4HImode"
	.sleb128 37
	.uleb128 0xc
	.string	"V4SImode"
	.sleb128 38
	.uleb128 0xc
	.string	"V4DImode"
	.sleb128 39
	.uleb128 0xc
	.string	"V8QImode"
	.sleb128 40
	.uleb128 0xc
	.string	"V8HImode"
	.sleb128 41
	.uleb128 0xc
	.string	"V8SImode"
	.sleb128 42
	.uleb128 0xc
	.string	"V8DImode"
	.sleb128 43
	.uleb128 0xc
	.string	"V16QImode"
	.sleb128 44
	.uleb128 0xc
	.string	"V2SFmode"
	.sleb128 45
	.uleb128 0xc
	.string	"V2DFmode"
	.sleb128 46
	.uleb128 0xc
	.string	"V4SFmode"
	.sleb128 47
	.uleb128 0xc
	.string	"V4DFmode"
	.sleb128 48
	.uleb128 0xc
	.string	"V8SFmode"
	.sleb128 49
	.uleb128 0xc
	.string	"V8DFmode"
	.sleb128 50
	.uleb128 0xc
	.string	"V16SFmode"
	.sleb128 51
	.uleb128 0xc
	.string	"BLKmode"
	.sleb128 52
	.uleb128 0xc
	.string	"CCmode"
	.sleb128 53
	.uleb128 0xc
	.string	"MAX_MACHINE_MODE"
	.sleb128 54
	.byte	0x0
	.uleb128 0x17
	.long	0xb7c
	.long	.LASF4
	.byte	0x4
	.byte	0x4
	.byte	0x2c
	.uleb128 0xc
	.string	"MODE_RANDOM"
	.sleb128 0
	.uleb128 0xc
	.string	"MODE_INT"
	.sleb128 1
	.uleb128 0xc
	.string	"MODE_FLOAT"
	.sleb128 2
	.uleb128 0xc
	.string	"MODE_PARTIAL_INT"
	.sleb128 3
	.uleb128 0xc
	.string	"MODE_CC"
	.sleb128 4
	.uleb128 0xc
	.string	"MODE_COMPLEX_INT"
	.sleb128 5
	.uleb128 0xc
	.string	"MODE_COMPLEX_FLOAT"
	.sleb128 6
	.uleb128 0xc
	.string	"MODE_VECTOR_INT"
	.sleb128 7
	.uleb128 0xc
	.string	"MODE_VECTOR_FLOAT"
	.sleb128 8
	.uleb128 0xc
	.string	"MAX_MODE_CLASS"
	.sleb128 9
	.byte	0x0
	.uleb128 0x16
	.long	0x134b
	.string	"rtx_code"
	.byte	0x4
	.byte	0x3
	.byte	0x2f
	.uleb128 0xc
	.string	"UNKNOWN"
	.sleb128 0
	.uleb128 0xc
	.string	"NIL"
	.sleb128 1
	.uleb128 0xc
	.string	"INCLUDE"
	.sleb128 2
	.uleb128 0xc
	.string	"EXPR_LIST"
	.sleb128 3
	.uleb128 0xc
	.string	"INSN_LIST"
	.sleb128 4
	.uleb128 0xc
	.string	"MATCH_OPERAND"
	.sleb128 5
	.uleb128 0xc
	.string	"MATCH_SCRATCH"
	.sleb128 6
	.uleb128 0xc
	.string	"MATCH_DUP"
	.sleb128 7
	.uleb128 0xc
	.string	"MATCH_OPERATOR"
	.sleb128 8
	.uleb128 0xc
	.string	"MATCH_PARALLEL"
	.sleb128 9
	.uleb128 0xc
	.string	"MATCH_OP_DUP"
	.sleb128 10
	.uleb128 0xc
	.string	"MATCH_PAR_DUP"
	.sleb128 11
	.uleb128 0xc
	.string	"MATCH_INSN"
	.sleb128 12
	.uleb128 0xc
	.string	"DEFINE_INSN"
	.sleb128 13
	.uleb128 0xc
	.string	"DEFINE_PEEPHOLE"
	.sleb128 14
	.uleb128 0xc
	.string	"DEFINE_SPLIT"
	.sleb128 15
	.uleb128 0xc
	.string	"DEFINE_INSN_AND_SPLIT"
	.sleb128 16
	.uleb128 0xc
	.string	"DEFINE_PEEPHOLE2"
	.sleb128 17
	.uleb128 0xc
	.string	"DEFINE_COMBINE"
	.sleb128 18
	.uleb128 0xc
	.string	"DEFINE_EXPAND"
	.sleb128 19
	.uleb128 0xc
	.string	"DEFINE_DELAY"
	.sleb128 20
	.uleb128 0xc
	.string	"DEFINE_FUNCTION_UNIT"
	.sleb128 21
	.uleb128 0xc
	.string	"DEFINE_ASM_ATTRIBUTES"
	.sleb128 22
	.uleb128 0xc
	.string	"DEFINE_COND_EXEC"
	.sleb128 23
	.uleb128 0xc
	.string	"SEQUENCE"
	.sleb128 24
	.uleb128 0xc
	.string	"ADDRESS"
	.sleb128 25
	.uleb128 0xc
	.string	"DEFINE_CPU_UNIT"
	.sleb128 26
	.uleb128 0xc
	.string	"DEFINE_QUERY_CPU_UNIT"
	.sleb128 27
	.uleb128 0xc
	.string	"EXCLUSION_SET"
	.sleb128 28
	.uleb128 0xc
	.string	"PRESENCE_SET"
	.sleb128 29
	.uleb128 0xc
	.string	"ABSENCE_SET"
	.sleb128 30
	.uleb128 0xc
	.string	"DEFINE_BYPASS"
	.sleb128 31
	.uleb128 0xc
	.string	"DEFINE_AUTOMATON"
	.sleb128 32
	.uleb128 0xc
	.string	"AUTOMATA_OPTION"
	.sleb128 33
	.uleb128 0xc
	.string	"DEFINE_RESERVATION"
	.sleb128 34
	.uleb128 0xc
	.string	"DEFINE_INSN_RESERVATION"
	.sleb128 35
	.uleb128 0xc
	.string	"DEFINE_ATTR"
	.sleb128 36
	.uleb128 0xc
	.string	"ATTR"
	.sleb128 37
	.uleb128 0xc
	.string	"SET_ATTR"
	.sleb128 38
	.uleb128 0xc
	.string	"SET_ATTR_ALTERNATIVE"
	.sleb128 39
	.uleb128 0xc
	.string	"EQ_ATTR"
	.sleb128 40
	.uleb128 0xc
	.string	"ATTR_FLAG"
	.sleb128 41
	.uleb128 0xc
	.string	"INSN"
	.sleb128 42
	.uleb128 0xc
	.string	"JUMP_INSN"
	.sleb128 43
	.uleb128 0xc
	.string	"CALL_INSN"
	.sleb128 44
	.uleb128 0xc
	.string	"BARRIER"
	.sleb128 45
	.uleb128 0xc
	.string	"CODE_LABEL"
	.sleb128 46
	.uleb128 0xc
	.string	"NOTE"
	.sleb128 47
	.uleb128 0xc
	.string	"COND_EXEC"
	.sleb128 48
	.uleb128 0xc
	.string	"PARALLEL"
	.sleb128 49
	.uleb128 0xc
	.string	"ASM_INPUT"
	.sleb128 50
	.uleb128 0xc
	.string	"ASM_OPERANDS"
	.sleb128 51
	.uleb128 0xc
	.string	"UNSPEC"
	.sleb128 52
	.uleb128 0xc
	.string	"UNSPEC_VOLATILE"
	.sleb128 53
	.uleb128 0xc
	.string	"ADDR_VEC"
	.sleb128 54
	.uleb128 0xc
	.string	"ADDR_DIFF_VEC"
	.sleb128 55
	.uleb128 0xc
	.string	"PREFETCH"
	.sleb128 56
	.uleb128 0xc
	.string	"SET"
	.sleb128 57
	.uleb128 0xc
	.string	"USE"
	.sleb128 58
	.uleb128 0xc
	.string	"CLOBBER"
	.sleb128 59
	.uleb128 0xc
	.string	"CALL"
	.sleb128 60
	.uleb128 0xc
	.string	"RETURN"
	.sleb128 61
	.uleb128 0xc
	.string	"TRAP_IF"
	.sleb128 62
	.uleb128 0xc
	.string	"RESX"
	.sleb128 63
	.uleb128 0xc
	.string	"CONST_INT"
	.sleb128 64
	.uleb128 0xc
	.string	"CONST_DOUBLE"
	.sleb128 65
	.uleb128 0xc
	.string	"CONST_VECTOR"
	.sleb128 66
	.uleb128 0xc
	.string	"CONST_STRING"
	.sleb128 67
	.uleb128 0xc
	.string	"CONST"
	.sleb128 68
	.uleb128 0xc
	.string	"PC"
	.sleb128 69
	.uleb128 0xc
	.string	"VALUE"
	.sleb128 70
	.uleb128 0xc
	.string	"REG"
	.sleb128 71
	.uleb128 0xc
	.string	"SCRATCH"
	.sleb128 72
	.uleb128 0xc
	.string	"SUBREG"
	.sleb128 73
	.uleb128 0xc
	.string	"STRICT_LOW_PART"
	.sleb128 74
	.uleb128 0xc
	.string	"CONCAT"
	.sleb128 75
	.uleb128 0xc
	.string	"MEM"
	.sleb128 76
	.uleb128 0xc
	.string	"LABEL_REF"
	.sleb128 77
	.uleb128 0xc
	.string	"SYMBOL_REF"
	.sleb128 78
	.uleb128 0xc
	.string	"CC0"
	.sleb128 79
	.uleb128 0xc
	.string	"ADDRESSOF"
	.sleb128 80
	.uleb128 0xc
	.string	"QUEUED"
	.sleb128 81
	.uleb128 0xc
	.string	"IF_THEN_ELSE"
	.sleb128 82
	.uleb128 0xc
	.string	"COND"
	.sleb128 83
	.uleb128 0xc
	.string	"COMPARE"
	.sleb128 84
	.uleb128 0xc
	.string	"PLUS"
	.sleb128 85
	.uleb128 0xc
	.string	"MINUS"
	.sleb128 86
	.uleb128 0xc
	.string	"NEG"
	.sleb128 87
	.uleb128 0xc
	.string	"MULT"
	.sleb128 88
	.uleb128 0xc
	.string	"DIV"
	.sleb128 89
	.uleb128 0xc
	.string	"MOD"
	.sleb128 90
	.uleb128 0xc
	.string	"UDIV"
	.sleb128 91
	.uleb128 0xc
	.string	"UMOD"
	.sleb128 92
	.uleb128 0xc
	.string	"AND"
	.sleb128 93
	.uleb128 0xc
	.string	"IOR"
	.sleb128 94
	.uleb128 0xc
	.string	"XOR"
	.sleb128 95
	.uleb128 0xc
	.string	"NOT"
	.sleb128 96
	.uleb128 0xc
	.string	"ASHIFT"
	.sleb128 97
	.uleb128 0xc
	.string	"ROTATE"
	.sleb128 98
	.uleb128 0xc
	.string	"ASHIFTRT"
	.sleb128 99
	.uleb128 0xc
	.string	"LSHIFTRT"
	.sleb128 100
	.uleb128 0xc
	.string	"ROTATERT"
	.sleb128 101
	.uleb128 0xc
	.string	"SMIN"
	.sleb128 102
	.uleb128 0xc
	.string	"SMAX"
	.sleb128 103
	.uleb128 0xc
	.string	"UMIN"
	.sleb128 104
	.uleb128 0xc
	.string	"UMAX"
	.sleb128 105
	.uleb128 0xc
	.string	"PRE_DEC"
	.sleb128 106
	.uleb128 0xc
	.string	"PRE_INC"
	.sleb128 107
	.uleb128 0xc
	.string	"POST_DEC"
	.sleb128 108
	.uleb128 0xc
	.string	"POST_INC"
	.sleb128 109
	.uleb128 0xc
	.string	"PRE_MODIFY"
	.sleb128 110
	.uleb128 0xc
	.string	"POST_MODIFY"
	.sleb128 111
	.uleb128 0xc
	.string	"NE"
	.sleb128 112
	.uleb128 0xc
	.string	"EQ"
	.sleb128 113
	.uleb128 0xc
	.string	"GE"
	.sleb128 114
	.uleb128 0xc
	.string	"GT"
	.sleb128 115
	.uleb128 0xc
	.string	"LE"
	.sleb128 116
	.uleb128 0xc
	.string	"LT"
	.sleb128 117
	.uleb128 0xc
	.string	"GEU"
	.sleb128 118
	.uleb128 0xc
	.string	"GTU"
	.sleb128 119
	.uleb128 0xc
	.string	"LEU"
	.sleb128 120
	.uleb128 0xc
	.string	"LTU"
	.sleb128 121
	.uleb128 0xc
	.string	"UNORDERED"
	.sleb128 122
	.uleb128 0xc
	.string	"ORDERED"
	.sleb128 123
	.uleb128 0xc
	.string	"UNEQ"
	.sleb128 124
	.uleb128 0xc
	.string	"UNGE"
	.sleb128 125
	.uleb128 0xc
	.string	"UNGT"
	.sleb128 126
	.uleb128 0xc
	.string	"UNLE"
	.sleb128 127
	.uleb128 0xc
	.string	"UNLT"
	.sleb128 128
	.uleb128 0xc
	.string	"LTGT"
	.sleb128 129
	.uleb128 0xc
	.string	"SIGN_EXTEND"
	.sleb128 130
	.uleb128 0xc
	.string	"ZERO_EXTEND"
	.sleb128 131
	.uleb128 0xc
	.string	"TRUNCATE"
	.sleb128 132
	.uleb128 0xc
	.string	"FLOAT_EXTEND"
	.sleb128 133
	.uleb128 0xc
	.string	"FLOAT_TRUNCATE"
	.sleb128 134
	.uleb128 0xc
	.string	"FLOAT"
	.sleb128 135
	.uleb128 0xc
	.string	"FIX"
	.sleb128 136
	.uleb128 0xc
	.string	"UNSIGNED_FLOAT"
	.sleb128 137
	.uleb128 0xc
	.string	"UNSIGNED_FIX"
	.sleb128 138
	.uleb128 0xc
	.string	"ABS"
	.sleb128 139
	.uleb128 0xc
	.string	"SQRT"
	.sleb128 140
	.uleb128 0xc
	.string	"FFS"
	.sleb128 141
	.uleb128 0xc
	.string	"SIGN_EXTRACT"
	.sleb128 142
	.uleb128 0xc
	.string	"ZERO_EXTRACT"
	.sleb128 143
	.uleb128 0xc
	.string	"HIGH"
	.sleb128 144
	.uleb128 0xc
	.string	"LO_SUM"
	.sleb128 145
	.uleb128 0xc
	.string	"RANGE_INFO"
	.sleb128 146
	.uleb128 0xc
	.string	"RANGE_REG"
	.sleb128 147
	.uleb128 0xc
	.string	"RANGE_VAR"
	.sleb128 148
	.uleb128 0xc
	.string	"RANGE_LIVE"
	.sleb128 149
	.uleb128 0xc
	.string	"CONSTANT_P_RTX"
	.sleb128 150
	.uleb128 0xc
	.string	"CALL_PLACEHOLDER"
	.sleb128 151
	.uleb128 0xc
	.string	"VEC_MERGE"
	.sleb128 152
	.uleb128 0xc
	.string	"VEC_SELECT"
	.sleb128 153
	.uleb128 0xc
	.string	"VEC_CONCAT"
	.sleb128 154
	.uleb128 0xc
	.string	"VEC_DUPLICATE"
	.sleb128 155
	.uleb128 0xc
	.string	"SS_PLUS"
	.sleb128 156
	.uleb128 0xc
	.string	"US_PLUS"
	.sleb128 157
	.uleb128 0xc
	.string	"SS_MINUS"
	.sleb128 158
	.uleb128 0xc
	.string	"US_MINUS"
	.sleb128 159
	.uleb128 0xc
	.string	"SS_TRUNCATE"
	.sleb128 160
	.uleb128 0xc
	.string	"US_TRUNCATE"
	.sleb128 161
	.uleb128 0xc
	.string	"PHI"
	.sleb128 162
	.uleb128 0xc
	.string	"LAST_AND_UNUSED_RTX_CODE"
	.sleb128 163
	.byte	0x0
	.uleb128 0x18
	.long	0x1425
	.byte	0x4
	.byte	0x3
	.byte	0x4d
	.uleb128 0x6
	.string	"min_align"
	.byte	0x3
	.byte	0x4f
	.long	0x463
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"base_after_vec"
	.byte	0x3
	.byte	0x51
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"min_after_vec"
	.byte	0x3
	.byte	0x52
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"max_after_vec"
	.byte	0x3
	.byte	0x54
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"min_after_base"
	.byte	0x3
	.byte	0x56
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"max_after_base"
	.byte	0x3
	.byte	0x58
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"offset_unsigned"
	.byte	0x3
	.byte	0x5b
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"scale"
	.byte	0x3
	.byte	0x5d
	.long	0x463
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.byte	0x0
	.uleb128 0x2
	.string	"addr_diff_vec_flags"
	.byte	0x3
	.byte	0x5e
	.long	0x134b
	.uleb128 0x14
	.long	0x1499
	.long	.LASF5
	.byte	0x18
	.byte	0x3
	.byte	0x68
	.uleb128 0x7
	.string	"alias"
	.byte	0x3
	.byte	0x69
	.long	0x4ff
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"expr"
	.byte	0x3
	.byte	0x6a
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x19
	.long	.LASF6
	.byte	0x3
	.byte	0x6b
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"size"
	.byte	0x3
	.byte	0x6c
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"align"
	.byte	0x3
	.byte	0x6d
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x1a
	.long	.LASF5
	.byte	0x3
	.byte	0x6e
	.long	0x1440
	.uleb128 0x1b
	.long	0x1576
	.string	"rtunion_def"
	.byte	0x8
	.byte	0x3
	.byte	0x73
	.uleb128 0x1c
	.string	"rtwint"
	.byte	0x3
	.byte	0x74
	.long	0x4ff
	.uleb128 0x1c
	.string	"rtint"
	.byte	0x3
	.byte	0x75
	.long	0x214
	.uleb128 0x1c
	.string	"rtuint"
	.byte	0x3
	.byte	0x76
	.long	0x463
	.uleb128 0x1c
	.string	"rtstr"
	.byte	0x3
	.byte	0x77
	.long	0x201
	.uleb128 0x1c
	.string	"rtx"
	.byte	0x3
	.byte	0x78
	.long	0x9c
	.uleb128 0x1c
	.string	"rtvec"
	.byte	0x3
	.byte	0x79
	.long	0x19b
	.uleb128 0x1c
	.string	"rttype"
	.byte	0x3
	.byte	0x7a
	.long	0x884
	.uleb128 0x1c
	.string	"rt_addr_diff_vec_flags"
	.byte	0x3
	.byte	0x7b
	.long	0x1425
	.uleb128 0x1c
	.string	"rt_cselib"
	.byte	0x3
	.byte	0x7c
	.long	0x158a
	.uleb128 0x1c
	.string	"rtbit"
	.byte	0x3
	.byte	0x7d
	.long	0x15f0
	.uleb128 0x1c
	.string	"rttree"
	.byte	0x3
	.byte	0x7e
	.long	0x1e3
	.uleb128 0x1c
	.string	"bb"
	.byte	0x3
	.byte	0x7f
	.long	0x1779
	.uleb128 0x1c
	.string	"rtmem"
	.byte	0x3
	.byte	0x80
	.long	0x177f
	.byte	0x0
	.uleb128 0x1d
	.string	"cselib_val_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x1576
	.uleb128 0x4
	.long	0x15f0
	.string	"bitmap_head_def"
	.byte	0x10
	.byte	0x3
	.byte	0x7d
	.uleb128 0x19
	.long	.LASF7
	.byte	0x5
	.byte	0x3d
	.long	0x1e28
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"current"
	.byte	0x5
	.byte	0x3e
	.long	0x1e28
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"indx"
	.byte	0x5
	.byte	0x3f
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"using_obstack"
	.byte	0x5
	.byte	0x40
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1590
	.uleb128 0x4
	.long	0x1779
	.string	"basic_block_def"
	.byte	0x50
	.byte	0x3
	.byte	0x7f
	.uleb128 0x7
	.string	"head"
	.byte	0x6
	.byte	0xb5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"end"
	.byte	0x6
	.byte	0xb5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"head_tree"
	.byte	0x6
	.byte	0xb8
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"end_tree"
	.byte	0x6
	.byte	0xb9
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"pred"
	.byte	0x6
	.byte	0xbc
	.long	0x1f91
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"succ"
	.byte	0x6
	.byte	0xbc
	.long	0x1f91
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"local_set"
	.byte	0x6
	.byte	0xc1
	.long	0x1ec4
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"cond_local_set"
	.byte	0x6
	.byte	0xc5
	.long	0x1ec4
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"global_live_at_start"
	.byte	0x6
	.byte	0xcb
	.long	0x1ec4
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"global_live_at_end"
	.byte	0x6
	.byte	0xcd
	.long	0x1ec4
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"aux"
	.byte	0x6
	.byte	0xd0
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"index"
	.byte	0x6
	.byte	0xd3
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"prev_bb"
	.byte	0x6
	.byte	0xd6
	.long	0x1779
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"next_bb"
	.byte	0x6
	.byte	0xd6
	.long	0x1779
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"loop_depth"
	.byte	0x6
	.byte	0xd9
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x7
	.string	"loop_father"
	.byte	0x6
	.byte	0xdc
	.long	0x2208
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x19
	.long	.LASF8
	.byte	0x6
	.byte	0xdf
	.long	0x1ed2
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x7
	.string	"frequency"
	.byte	0x6
	.byte	0xe2
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x7
	.string	"flags"
	.byte	0x6
	.byte	0xe5
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x15f6
	.uleb128 0x3
	.byte	0x4
	.long	0x1499
	.uleb128 0x2
	.string	"rtunion"
	.byte	0x3
	.byte	0x82
	.long	0x14a4
	.uleb128 0x10
	.long	0x17a4
	.long	0x1785
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x17b4
	.long	0x9c
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9c
	.uleb128 0x4
	.long	0x17f0
	.string	"const_equiv_data"
	.byte	0x8
	.byte	0xf
	.byte	0x24
	.uleb128 0x7
	.string	"rtx"
	.byte	0xf
	.byte	0x32
	.long	0xa7
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"age"
	.byte	0xf
	.byte	0x36
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x16
	.long	0x198b
	.string	"varray_data_enum"
	.byte	0x4
	.byte	0xf
	.byte	0x3c
	.uleb128 0xc
	.string	"VARRAY_DATA_C"
	.sleb128 0
	.uleb128 0xc
	.string	"VARRAY_DATA_UC"
	.sleb128 1
	.uleb128 0xc
	.string	"VARRAY_DATA_S"
	.sleb128 2
	.uleb128 0xc
	.string	"VARRAY_DATA_US"
	.sleb128 3
	.uleb128 0xc
	.string	"VARRAY_DATA_I"
	.sleb128 4
	.uleb128 0xc
	.string	"VARRAY_DATA_U"
	.sleb128 5
	.uleb128 0xc
	.string	"VARRAY_DATA_L"
	.sleb128 6
	.uleb128 0xc
	.string	"VARRAY_DATA_UL"
	.sleb128 7
	.uleb128 0xc
	.string	"VARRAY_DATA_HINT"
	.sleb128 8
	.uleb128 0xc
	.string	"VARRAY_DATA_UHINT"
	.sleb128 9
	.uleb128 0xc
	.string	"VARRAY_DATA_GENERIC"
	.sleb128 10
	.uleb128 0xc
	.string	"VARRAY_DATA_CPTR"
	.sleb128 11
	.uleb128 0xc
	.string	"VARRAY_DATA_RTX"
	.sleb128 12
	.uleb128 0xc
	.string	"VARRAY_DATA_RTVEC"
	.sleb128 13
	.uleb128 0xc
	.string	"VARRAY_DATA_TREE"
	.sleb128 14
	.uleb128 0xc
	.string	"VARRAY_DATA_BITMAP"
	.sleb128 15
	.uleb128 0xc
	.string	"VARRAY_DATA_REG"
	.sleb128 16
	.uleb128 0xc
	.string	"VARRAY_DATA_CONST_EQUIV"
	.sleb128 17
	.uleb128 0xc
	.string	"VARRAY_DATA_BB"
	.sleb128 18
	.uleb128 0xc
	.string	"VARRAY_DATA_TE"
	.sleb128 19
	.uleb128 0xc
	.string	"NUM_VARRAY_DATA"
	.sleb128 20
	.byte	0x0
	.uleb128 0x1b
	.long	0x1a87
	.string	"varray_data_tag"
	.byte	0x8
	.byte	0xf
	.byte	0x55
	.uleb128 0x1c
	.string	"c"
	.byte	0xf
	.byte	0x56
	.long	0x858
	.uleb128 0x1c
	.string	"uc"
	.byte	0xf
	.byte	0x58
	.long	0x1a87
	.uleb128 0x1c
	.string	"s"
	.byte	0xf
	.byte	0x5a
	.long	0x1a97
	.uleb128 0x1c
	.string	"us"
	.byte	0xf
	.byte	0x5c
	.long	0x1aa7
	.uleb128 0x1c
	.string	"i"
	.byte	0xf
	.byte	0x5e
	.long	0x1ab7
	.uleb128 0x1c
	.string	"u"
	.byte	0xf
	.byte	0x60
	.long	0x1ac7
	.uleb128 0x1c
	.string	"l"
	.byte	0xf
	.byte	0x62
	.long	0x1ad7
	.uleb128 0x1c
	.string	"ul"
	.byte	0xf
	.byte	0x64
	.long	0x1ae7
	.uleb128 0x1c
	.string	"hint"
	.byte	0xf
	.byte	0x66
	.long	0x1af7
	.uleb128 0x1c
	.string	"uhint"
	.byte	0xf
	.byte	0x68
	.long	0x1b07
	.uleb128 0x1c
	.string	"generic"
	.byte	0xf
	.byte	0x6a
	.long	0x1b17
	.uleb128 0x1c
	.string	"cptr"
	.byte	0xf
	.byte	0x6c
	.long	0x1b27
	.uleb128 0x1c
	.string	"rtx"
	.byte	0xf
	.byte	0x6e
	.long	0x1b37
	.uleb128 0x1c
	.string	"rtvec"
	.byte	0xf
	.byte	0x70
	.long	0x1b47
	.uleb128 0x1c
	.string	"tree"
	.byte	0xf
	.byte	0x72
	.long	0x1b57
	.uleb128 0x1c
	.string	"bitmap"
	.byte	0xf
	.byte	0x74
	.long	0x1b67
	.uleb128 0x1c
	.string	"reg"
	.byte	0xf
	.byte	0x76
	.long	0x1b77
	.uleb128 0x1c
	.string	"const_equiv"
	.byte	0xf
	.byte	0x78
	.long	0x1c73
	.uleb128 0x1c
	.string	"bb"
	.byte	0xf
	.byte	0x7a
	.long	0x1c83
	.uleb128 0x1c
	.string	"te"
	.byte	0xf
	.byte	0x7c
	.long	0x1c93
	.byte	0x0
	.uleb128 0x10
	.long	0x1a97
	.long	0x4a7
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1aa7
	.long	0x4f2
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1ab7
	.long	0x4b8
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1ac7
	.long	0x214
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1ad7
	.long	0x463
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1ae7
	.long	0x549
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1af7
	.long	0x4ce
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b07
	.long	0x4ff
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b17
	.long	0x510
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b27
	.long	0x566
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b37
	.long	0x568
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b47
	.long	0xa7
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b57
	.long	0x1a8
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b67
	.long	0x1ef
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b77
	.long	0x15f0
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1b87
	.long	0x1c6d
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x4
	.long	0x1c6d
	.string	"reg_info_def"
	.byte	0x2c
	.byte	0xf
	.byte	0x76
	.uleb128 0x7
	.string	"first_uid"
	.byte	0x10
	.byte	0x31
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"last_uid"
	.byte	0x10
	.byte	0x32
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"last_note_uid"
	.byte	0x10
	.byte	0x33
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"sets"
	.byte	0x10
	.byte	0x36
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"refs"
	.byte	0x10
	.byte	0x39
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"freq"
	.byte	0x10
	.byte	0x3a
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"deaths"
	.byte	0x10
	.byte	0x3b
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"live_length"
	.byte	0x10
	.byte	0x3c
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"calls_crossed"
	.byte	0x10
	.byte	0x3d
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x19
	.long	.LASF9
	.byte	0x10
	.byte	0x3e
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"changes_mode"
	.byte	0x10
	.byte	0x3f
	.long	0x20c
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1b87
	.uleb128 0x10
	.long	0x1c83
	.long	0x17ba
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1c93
	.long	0x1779
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.long	0x1ca3
	.long	0x1cae
	.uleb128 0x11
	.long	0x47a
	.byte	0x0
	.byte	0x0
	.uleb128 0x1d
	.string	"elt_list"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x1ca3
	.uleb128 0x2
	.string	"varray_data"
	.byte	0xf
	.byte	0x7e
	.long	0x198b
	.uleb128 0x4
	.long	0x1d3c
	.string	"varray_head_tag"
	.byte	0x18
	.byte	0xf
	.byte	0x81
	.uleb128 0x7
	.string	"num_elements"
	.byte	0xf
	.byte	0x82
	.long	0x499
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"elements_used"
	.byte	0xf
	.byte	0x83
	.long	0x499
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"type"
	.byte	0xf
	.byte	0x85
	.long	0x17f0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"name"
	.byte	0xf
	.byte	0x86
	.long	0x201
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"data"
	.byte	0xf
	.byte	0x87
	.long	0x1cb4
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.byte	0x0
	.uleb128 0x2
	.string	"varray_type"
	.byte	0xf
	.byte	0x8a
	.long	0x1d4f
	.uleb128 0x3
	.byte	0x4
	.long	0x1cc7
	.uleb128 0x2
	.string	"HARD_REG_ELT_TYPE"
	.byte	0x8
	.byte	0x29
	.long	0x510
	.uleb128 0x2
	.string	"HARD_REG_SET"
	.byte	0x8
	.byte	0x34
	.long	0x1d82
	.uleb128 0x10
	.long	0x1d92
	.long	0x1d55
	.uleb128 0x11
	.long	0x47a
	.byte	0x2
	.byte	0x0
	.uleb128 0x2
	.string	"BITMAP_WORD"
	.byte	0x5
	.byte	0x1d
	.long	0x4ce
	.uleb128 0x4
	.long	0x1dfc
	.string	"bitmap_element_def"
	.byte	0x1c
	.byte	0x5
	.byte	0x34
	.uleb128 0x19
	.long	.LASF10
	.byte	0x5
	.byte	0x35
	.long	0x1dfc
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"prev"
	.byte	0x5
	.byte	0x36
	.long	0x1dfc
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"indx"
	.byte	0x5
	.byte	0x37
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"bits"
	.byte	0x5
	.byte	0x38
	.long	0x1e02
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1da5
	.uleb128 0x10
	.long	0x1e12
	.long	0x1d92
	.uleb128 0x11
	.long	0x47a
	.byte	0x3
	.byte	0x0
	.uleb128 0x2
	.string	"bitmap_element"
	.byte	0x5
	.byte	0x39
	.long	0x1da5
	.uleb128 0x3
	.byte	0x4
	.long	0x1e12
	.uleb128 0x2
	.string	"bitmap_head"
	.byte	0x5
	.byte	0x42
	.long	0x1590
	.uleb128 0x2
	.string	"bitmap"
	.byte	0x5
	.byte	0x43
	.long	0x15f0
	.uleb128 0x4
	.long	0x1ea9
	.string	"simple_bitmap_def"
	.byte	0x14
	.byte	0x7
	.byte	0x20
	.uleb128 0x7
	.string	"n_bits"
	.byte	0x7
	.byte	0x21
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"size"
	.byte	0x7
	.byte	0x22
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"bytes"
	.byte	0x7
	.byte	0x23
	.long	0x463
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"elms"
	.byte	0x7
	.byte	0x24
	.long	0x1b07
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x2
	.string	"sbitmap"
	.byte	0x7
	.byte	0x25
	.long	0x1eb8
	.uleb128 0x3
	.byte	0x4
	.long	0x1e4f
	.uleb128 0x3
	.byte	0x4
	.long	0x510
	.uleb128 0x2
	.string	"regset"
	.byte	0x6
	.byte	0x22
	.long	0x1e41
	.uleb128 0x2
	.string	"gcov_type"
	.byte	0x6
	.byte	0x75
	.long	0x4ff
	.uleb128 0x4
	.long	0x1f8b
	.string	"edge_def"
	.byte	0x28
	.byte	0x6
	.byte	0x78
	.uleb128 0x7
	.string	"pred_next"
	.byte	0x6
	.byte	0x7a
	.long	0x1f8b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"succ_next"
	.byte	0x6
	.byte	0x7a
	.long	0x1f8b
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"src"
	.byte	0x6
	.byte	0x7d
	.long	0x1779
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x19
	.long	.LASF11
	.byte	0x6
	.byte	0x7d
	.long	0x1779
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"insns"
	.byte	0x6
	.byte	0x80
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"aux"
	.byte	0x6
	.byte	0x83
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"flags"
	.byte	0x6
	.byte	0x85
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"probability"
	.byte	0x6
	.byte	0x86
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x19
	.long	.LASF8
	.byte	0x6
	.byte	0x87
	.long	0x1ed2
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1ee3
	.uleb128 0x2
	.string	"edge"
	.byte	0x6
	.byte	0x89
	.long	0x1f8b
	.uleb128 0x4
	.long	0x2208
	.string	"loop"
	.byte	0x80
	.byte	0x6
	.byte	0xdc
	.uleb128 0xe
	.string	"num"
	.byte	0x6
	.value	0x176
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0xe
	.string	"header"
	.byte	0x6
	.value	0x179
	.long	0x220e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0xe
	.string	"latch"
	.byte	0x6
	.value	0x17c
	.long	0x220e
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0xe
	.string	"pre_header"
	.byte	0x6
	.value	0x17f
	.long	0x220e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0xe
	.string	"pre_header_edges"
	.byte	0x6
	.value	0x184
	.long	0x2219
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0xe
	.string	"num_pre_header_edges"
	.byte	0x6
	.value	0x187
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x1e
	.long	.LASF7
	.byte	0x6
	.value	0x18b
	.long	0x220e
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0xe
	.string	"last"
	.byte	0x6
	.value	0x18f
	.long	0x220e
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0xe
	.string	"nodes"
	.byte	0x6
	.value	0x192
	.long	0x1ea9
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0xe
	.string	"num_nodes"
	.byte	0x6
	.value	0x195
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0xe
	.string	"entry_edges"
	.byte	0x6
	.value	0x198
	.long	0x2219
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0xe
	.string	"num_entries"
	.byte	0x6
	.value	0x19b
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0xe
	.string	"exit_edges"
	.byte	0x6
	.value	0x19e
	.long	0x2219
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0xe
	.string	"num_exits"
	.byte	0x6
	.value	0x1a1
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0xe
	.string	"exits_doms"
	.byte	0x6
	.value	0x1a4
	.long	0x1ea9
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0xe
	.string	"depth"
	.byte	0x6
	.value	0x1a7
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0xe
	.string	"pred"
	.byte	0x6
	.value	0x1aa
	.long	0x221f
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0xe
	.string	"level"
	.byte	0x6
	.value	0x1ae
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0xe
	.string	"outer"
	.byte	0x6
	.value	0x1b1
	.long	0x2208
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x1e
	.long	.LASF12
	.byte	0x6
	.value	0x1b4
	.long	0x2208
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x1e
	.long	.LASF10
	.byte	0x6
	.value	0x1b7
	.long	0x2208
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0xe
	.string	"invalid"
	.byte	0x6
	.value	0x1ba
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0xe
	.string	"aux"
	.byte	0x6
	.value	0x1bd
	.long	0x566
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0xe
	.string	"vtop"
	.byte	0x6
	.value	0x1c3
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0xe
	.string	"cont"
	.byte	0x6
	.value	0x1c7
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0xe
	.string	"start"
	.byte	0x6
	.value	0x1ca
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0xe
	.string	"end"
	.byte	0x6
	.value	0x1cd
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0xe
	.string	"top"
	.byte	0x6
	.value	0x1d1
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.uleb128 0xe
	.string	"scan_start"
	.byte	0x6
	.value	0x1d4
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.uleb128 0xe
	.string	"sink"
	.byte	0x6
	.value	0x1d7
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0xe
	.string	"exit_labels"
	.byte	0x6
	.value	0x1e2
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0xe
	.string	"exit_count"
	.byte	0x6
	.value	0x1e6
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1f9d
	.uleb128 0x1a
	.long	.LASF9
	.byte	0x6
	.byte	0xe6
	.long	0x1779
	.uleb128 0x3
	.byte	0x4
	.long	0x1f91
	.uleb128 0x3
	.byte	0x4
	.long	0x2208
	.uleb128 0x4
	.long	0x2284
	.string	"var_refs_queue"
	.byte	0x10
	.byte	0x11
	.byte	0x17
	.uleb128 0x7
	.string	"modified"
	.byte	0x11
	.byte	0x18
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"promoted_mode"
	.byte	0x11
	.byte	0x19
	.long	0x884
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x19
	.long	.LASF13
	.byte	0x11
	.byte	0x1a
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x19
	.long	.LASF10
	.byte	0x11
	.byte	0x1b
	.long	0x2284
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x2225
	.uleb128 0x14
	.long	0x22d0
	.long	.LASF14
	.byte	0x10
	.byte	0x11
	.byte	0x24
	.uleb128 0x19
	.long	.LASF7
	.byte	0x11
	.byte	0x26
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"last"
	.byte	0x11
	.byte	0x27
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x19
	.long	.LASF15
	.byte	0x11
	.byte	0x28
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x19
	.long	.LASF10
	.byte	0x11
	.byte	0x29
	.long	0x22d0
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x228a
	.uleb128 0x4
	.long	0x2425
	.string	"emit_status"
	.byte	0x34
	.byte	0x11
	.byte	0x37
	.uleb128 0x7
	.string	"x_reg_rtx_no"
	.byte	0x11
	.byte	0x3a
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"x_first_label_num"
	.byte	0x11
	.byte	0x3d
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"x_first_insn"
	.byte	0x11
	.byte	0x44
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"x_last_insn"
	.byte	0x11
	.byte	0x45
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x19
	.long	.LASF15
	.byte	0x11
	.byte	0x4a
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x19
	.long	.LASF14
	.byte	0x11
	.byte	0x50
	.long	0x22d0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"x_cur_insn_uid"
	.byte	0x11
	.byte	0x54
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"x_last_linenum"
	.byte	0x11
	.byte	0x58
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"x_last_filename"
	.byte	0x11
	.byte	0x59
	.long	0x201
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"regno_pointer_align_length"
	.byte	0x11
	.byte	0x5f
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"regno_pointer_align"
	.byte	0x11
	.byte	0x65
	.long	0x7f5
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"regno_decl"
	.byte	0x11
	.byte	0x69
	.long	0x2425
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"x_regno_reg_rtx"
	.byte	0x11
	.byte	0x70
	.long	0x17b4
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1e3
	.uleb128 0x4
	.long	0x250b
	.string	"expr_status"
	.byte	0x1c
	.byte	0x11
	.byte	0x7d
	.uleb128 0x7
	.string	"x_pending_stack_adjust"
	.byte	0x11
	.byte	0x80
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"x_inhibit_defer_pop"
	.byte	0x11
	.byte	0x91
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"x_stack_pointer_delta"
	.byte	0x11
	.byte	0x97
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"x_saveregs_value"
	.byte	0x11
	.byte	0x9c
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"x_apply_args_value"
	.byte	0x11
	.byte	0x9f
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"x_forced_labels"
	.byte	0x11
	.byte	0xa2
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"x_pending_chain"
	.byte	0x11
	.byte	0xa5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.byte	0x0
	.uleb128 0x1f
	.long	0x2575
	.long	.LASF16
	.byte	0x4
	.byte	0x11
	.value	0x1f1
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_UNLIKELY_EXECUTED"
	.sleb128 0
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_NORMAL"
	.sleb128 1
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_HOT"
	.sleb128 2
	.byte	0x0
	.uleb128 0x20
	.long	0x2f34
	.string	"function"
	.value	0x134
	.byte	0x3
	.byte	0x1f
	.uleb128 0x7
	.string	"eh"
	.byte	0x11
	.byte	0xb5
	.long	0x2f40
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"stmt"
	.byte	0x11
	.byte	0xb6
	.long	0x2f54
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"expr"
	.byte	0x11
	.byte	0xb7
	.long	0x2f5a
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"emit"
	.byte	0x11
	.byte	0xb8
	.long	0x2f60
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"varasm"
	.byte	0x11
	.byte	0xb9
	.long	0x2f76
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"name"
	.byte	0x11
	.byte	0xbe
	.long	0x201
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"decl"
	.byte	0x11
	.byte	0xc1
	.long	0x1e3
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"outer"
	.byte	0x11
	.byte	0xc4
	.long	0x2f7c
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"pops_args"
	.byte	0x11
	.byte	0xc9
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"args_size"
	.byte	0x11
	.byte	0xce
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"pretend_args_size"
	.byte	0x11
	.byte	0xd3
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"outgoing_args_size"
	.byte	0x11
	.byte	0xd7
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"arg_offset_rtx"
	.byte	0x11
	.byte	0xdb
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"args_info"
	.byte	0x11
	.byte	0xdf
	.long	0x481
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"return_rtx"
	.byte	0x11
	.byte	0xe5
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x7
	.string	"internal_arg_pointer"
	.byte	0x11
	.byte	0xe8
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x7
	.string	"cannot_inline"
	.byte	0x11
	.byte	0xec
	.long	0x201
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x7
	.string	"hard_reg_initial_vals"
	.byte	0x11
	.byte	0xf0
	.long	0x2f99
	.byte	0x3
	.byte	0x23
	.uleb128 0x80
	.uleb128 0x7
	.string	"x_function_call_count"
	.byte	0x11
	.byte	0xf3
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0x84
	.uleb128 0x7
	.string	"x_nonlocal_labels"
	.byte	0x11
	.byte	0xf8
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0x88
	.uleb128 0x7
	.string	"x_nonlocal_goto_handler_slots"
	.byte	0x11
	.byte	0xfe
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x8c
	.uleb128 0xe
	.string	"x_nonlocal_goto_handler_labels"
	.byte	0x11
	.value	0x102
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x90
	.uleb128 0xe
	.string	"x_nonlocal_goto_stack_level"
	.byte	0x11
	.value	0x107
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x94
	.uleb128 0xe
	.string	"x_cleanup_label"
	.byte	0x11
	.value	0x10d
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x98
	.uleb128 0xe
	.string	"x_return_label"
	.byte	0x11
	.value	0x112
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x9c
	.uleb128 0xe
	.string	"computed_goto_common_label"
	.byte	0x11
	.value	0x115
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xa0
	.uleb128 0xe
	.string	"computed_goto_common_reg"
	.byte	0x11
	.value	0x116
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xa4
	.uleb128 0xe
	.string	"x_save_expr_regs"
	.byte	0x11
	.value	0x11a
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xa8
	.uleb128 0xe
	.string	"x_stack_slot_list"
	.byte	0x11
	.value	0x11e
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xac
	.uleb128 0xe
	.string	"x_rtl_expr_chain"
	.byte	0x11
	.value	0x121
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0xb0
	.uleb128 0xe
	.string	"x_tail_recursion_label"
	.byte	0x11
	.value	0x125
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xb4
	.uleb128 0xe
	.string	"x_tail_recursion_reentry"
	.byte	0x11
	.value	0x128
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xb8
	.uleb128 0xe
	.string	"x_arg_pointer_save_area"
	.byte	0x11
	.value	0x12e
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xbc
	.uleb128 0xe
	.string	"x_clobber_return_insn"
	.byte	0x11
	.value	0x133
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xc0
	.uleb128 0xe
	.string	"x_frame_offset"
	.byte	0x11
	.value	0x138
	.long	0x4ff
	.byte	0x3
	.byte	0x23
	.uleb128 0xc4
	.uleb128 0xe
	.string	"x_context_display"
	.byte	0x11
	.value	0x13d
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0xcc
	.uleb128 0xe
	.string	"x_trampoline_list"
	.byte	0x11
	.value	0x146
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0xd0
	.uleb128 0xe
	.string	"x_parm_birth_insn"
	.byte	0x11
	.value	0x149
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xd4
	.uleb128 0xe
	.string	"x_last_parm_insn"
	.byte	0x11
	.value	0x14d
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0xd8
	.uleb128 0xe
	.string	"x_max_parm_reg"
	.byte	0x11
	.value	0x151
	.long	0x463
	.byte	0x3
	.byte	0x23
	.uleb128 0xdc
	.uleb128 0xe
	.string	"x_parm_reg_stack_loc"
	.byte	0x11
	.value	0x157
	.long	0x17b4
	.byte	0x3
	.byte	0x23
	.uleb128 0xe0
	.uleb128 0xe
	.string	"x_temp_slots"
	.byte	0x11
	.value	0x15a
	.long	0x2fab
	.byte	0x3
	.byte	0x23
	.uleb128 0xe4
	.uleb128 0xe
	.string	"x_temp_slot_level"
	.byte	0x11
	.value	0x15d
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.uleb128 0xe
	.string	"x_var_temp_slot_level"
	.byte	0x11
	.value	0x160
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0xec
	.uleb128 0xe
	.string	"x_target_temp_slot_level"
	.byte	0x11
	.value	0x166
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0xf0
	.uleb128 0xe
	.string	"fixup_var_refs_queue"
	.byte	0x11
	.value	0x16a
	.long	0x2284
	.byte	0x3
	.byte	0x23
	.uleb128 0xf4
	.uleb128 0xe
	.string	"inlinable"
	.byte	0x11
	.value	0x16d
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0xf8
	.uleb128 0xe
	.string	"no_debugging_symbols"
	.byte	0x11
	.value	0x16e
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0xfc
	.uleb128 0xe
	.string	"original_arg_vector"
	.byte	0x11
	.value	0x16f
	.long	0x19b
	.byte	0x3
	.byte	0x23
	.uleb128 0x100
	.uleb128 0xe
	.string	"original_decl_initial"
	.byte	0x11
	.value	0x170
	.long	0x1e3
	.byte	0x3
	.byte	0x23
	.uleb128 0x104
	.uleb128 0xe
	.string	"inl_last_parm_insn"
	.byte	0x11
	.value	0x173
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x108
	.uleb128 0xe
	.string	"inl_max_label_num"
	.byte	0x11
	.value	0x175
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0x10c
	.uleb128 0xe
	.string	"funcdef_no"
	.byte	0x11
	.value	0x178
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0x110
	.uleb128 0xe
	.string	"machine"
	.byte	0x11
	.value	0x17d
	.long	0x2fc4
	.byte	0x3
	.byte	0x23
	.uleb128 0x114
	.uleb128 0xe
	.string	"stack_alignment_needed"
	.byte	0x11
	.value	0x17f
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0x118
	.uleb128 0xe
	.string	"preferred_stack_boundary"
	.byte	0x11
	.value	0x181
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0x11c
	.uleb128 0xe
	.string	"language"
	.byte	0x11
	.value	0x184
	.long	0x2fde
	.byte	0x3
	.byte	0x23
	.uleb128 0x120
	.uleb128 0xe
	.string	"epilogue_delay_list"
	.byte	0x11
	.value	0x18a
	.long	0x9c
	.byte	0x3
	.byte	0x23
	.uleb128 0x124
	.uleb128 0x21
	.string	"returns_struct"
	.byte	0x11
	.value	0x190
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"returns_pcc_struct"
	.byte	0x11
	.value	0x194
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"returns_pointer"
	.byte	0x11
	.value	0x197
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"needs_context"
	.byte	0x11
	.value	0x19a
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"calls_setjmp"
	.byte	0x11
	.value	0x19d
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"calls_longjmp"
	.byte	0x11
	.value	0x1a0
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"calls_alloca"
	.byte	0x11
	.value	0x1a4
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"calls_eh_return"
	.byte	0x11
	.value	0x1a7
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"has_nonlocal_label"
	.byte	0x11
	.value	0x1ab
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"has_nonlocal_goto"
	.byte	0x11
	.value	0x1af
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"contains_functions"
	.byte	0x11
	.value	0x1b2
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"has_computed_jump"
	.byte	0x11
	.value	0x1b5
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"is_thunk"
	.byte	0x11
	.value	0x1ba
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"all_throwers_are_sibcalls"
	.byte	0x11
	.value	0x1c1
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"instrument_entry_exit"
	.byte	0x11
	.value	0x1c5
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"arc_profile"
	.byte	0x11
	.value	0x1c8
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"profile"
	.byte	0x11
	.value	0x1cb
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"limit_stack"
	.byte	0x11
	.value	0x1cf
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"stdarg"
	.byte	0x11
	.value	0x1d2
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"x_whole_function_mode_p"
	.byte	0x11
	.value	0x1d8
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"x_dont_save_pending_sizes_p"
	.byte	0x11
	.value	0x1e1
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"uses_const_pool"
	.byte	0x11
	.value	0x1e4
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"uses_pic_offset_table"
	.byte	0x11
	.value	0x1e7
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"uses_eh_lsda"
	.byte	0x11
	.value	0x1ea
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x21
	.string	"arg_pointer_save_area_init"
	.byte	0x11
	.value	0x1ed
	.long	0x463
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x1e
	.long	.LASF16
	.byte	0x11
	.value	0x1fa
	.long	0x250b
	.byte	0x3
	.byte	0x23
	.uleb128 0x12c
	.uleb128 0xe
	.string	"max_jumptable_ents"
	.byte	0x11
	.value	0x1fe
	.long	0x214
	.byte	0x3
	.byte	0x23
	.uleb128 0x130
	.byte	0x0
	.uleb128 0x1d
	.string	"eh_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2f34
	.uleb128 0x1d
	.string	"stmt_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2f46
	.uleb128 0x3
	.byte	0x4
	.long	0x242b
	.uleb128 0x3
	.byte	0x4
	.long	0x22d6
	.uleb128 0x1d
	.string	"varasm_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2f66
	.uleb128 0x3
	.byte	0x4
	.long	0x2575
	.uleb128 0x1d
	.string	"initial_value_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2f82
	.uleb128 0x1d
	.string	"temp_slot"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2f9f
	.uleb128 0x1d
	.string	"machine_function"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2fb1
	.uleb128 0x1d
	.string	"language_function"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x2fca
	.uleb128 0xa
	.string	"_Bool"
	.byte	0x1
	.byte	0x2
	.uleb128 0x22
	.long	0x300b
	.byte	0x4
	.byte	0x1
	.value	0x143
	.uleb128 0x23
	.string	"r"
	.byte	0x1
	.value	0x143
	.long	0x9c
	.uleb128 0x23
	.string	"i"
	.byte	0x1
	.value	0x143
	.long	0x214
	.byte	0x0
	.uleb128 0x22
	.long	0x3029
	.byte	0x4
	.byte	0x1
	.value	0x144
	.uleb128 0x23
	.string	"r"
	.byte	0x1
	.value	0x144
	.long	0x17b4
	.uleb128 0x23
	.string	"i"
	.byte	0x1
	.value	0x144
	.long	0x87e
	.byte	0x0
	.uleb128 0xd
	.long	0x3082
	.string	"undo"
	.byte	0x10
	.byte	0x1
	.value	0x140
	.uleb128 0x1e
	.long	.LASF10
	.byte	0x1
	.value	0x141
	.long	0x3082
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0xe
	.string	"is_int"
	.byte	0x1
	.value	0x142
	.long	0x214
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0xe
	.string	"old_contents"
	.byte	0x1
	.value	0x143
	.long	0x2fed
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0xe
	.string	"where"
	.byte	0x1
	.value	0x144
	.long	0x300b
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x3029
	.uleb128 0xd
	.long	0x30cb
	.string	"undobuf"
	.byte	0xc
	.byte	0x1
	.value	0x14e
	.uleb128 0xe
	.string	"undos"
	.byte	0x1
	.value	0x14f
	.long	0x3082
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0xe
	.string	"frees"
	.byte	0x1
	.value	0x150
	.long	0x3082
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1e
	.long	.LASF17
	.byte	0x1
	.value	0x151
	.long	0x9c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x24
	.long	0x313d
	.string	"do_SUBST"
	.byte	0x1
	.value	0x1b5
	.byte	0x1
	.long	.LFB15
	.long	.LFE15
	.long	.LLST0
	.uleb128 0x25
	.string	"into"
	.byte	0x1
	.value	0x1b4
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"newval"
	.byte	0x1
	.value	0x1b4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"buf"
	.byte	0x1
	.value	0x1b6
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"oldval"
	.byte	0x1
	.value	0x1b7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x27
	.long	.LASF18
	.long	0x74fa
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.11000
	.byte	0x0
	.uleb128 0x24
	.long	0x31a3
	.string	"do_SUBST_INT"
	.byte	0x1
	.value	0x1ed
	.byte	0x1
	.long	.LFB16
	.long	.LFE16
	.long	.LLST1
	.uleb128 0x25
	.string	"into"
	.byte	0x1
	.value	0x1ec
	.long	0x87e
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"newval"
	.byte	0x1
	.value	0x1ec
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"buf"
	.byte	0x1
	.value	0x1ee
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"oldval"
	.byte	0x1
	.value	0x1ef
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x28
	.long	0x3336
	.byte	0x1
	.string	"combine_instructions"
	.byte	0x1
	.value	0x20c
	.byte	0x1
	.long	0x214
	.long	.LFB17
	.long	.LFE17
	.long	.LLST2
	.uleb128 0x25
	.string	"f"
	.byte	0x1
	.value	0x20a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"nregs"
	.byte	0x1
	.value	0x20b
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x29
	.long	.LASF19
	.byte	0x1
	.value	0x20d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x29
	.long	.LASF10
	.byte	0x1
	.value	0x20d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x211
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF20
	.byte	0x1
	.value	0x212
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"nextlinks"
	.byte	0x1
	.value	0x212
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF21
	.byte	0x1
	.value	0x214
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2a
	.string	"retry"
	.byte	0x1
	.value	0x2f1
	.long	.L43
	.uleb128 0x2b
	.long	0x327c
	.long	.LBB2
	.long	.LBE2
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0x298
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x2b
	.long	0x330c
	.long	.LBB3
	.long	.LBE3
	.uleb128 0x26
	.string	"word_num_"
	.byte	0x1
	.value	0x2f8
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"bit_num_"
	.byte	0x1
	.value	0x2f8
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"size_"
	.byte	0x1
	.value	0x2f8
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"ptr_"
	.byte	0x1
	.value	0x2f8
	.long	0x1ebe
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2c
	.long	.LBB4
	.long	.LBE4
	.uleb128 0x26
	.string	"word_"
	.byte	0x1
	.value	0x2f8
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2c
	.long	.LBB5
	.long	.LBE5
	.uleb128 0x26
	.string	"_mask"
	.byte	0x1
	.value	0x2f8
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB6
	.long	.LBE6
	.uleb128 0x26
	.string	"undo"
	.byte	0x1
	.value	0x311
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF10
	.byte	0x1
	.value	0x311
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.long	0x3372
	.string	"init_reg_last_arrays"
	.byte	0x1
	.value	0x32b
	.byte	0x1
	.long	.LFB18
	.long	.LFE18
	.long	.LLST3
	.uleb128 0x26
	.string	"nregs"
	.byte	0x1
	.value	0x32c
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x24
	.long	0x33ed
	.string	"setup_incoming_promotions"
	.byte	0x1
	.value	0x33d
	.byte	0x1
	.long	.LFB19
	.long	.LFE19
	.long	.LLST4
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x33f
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"reg"
	.byte	0x1
	.value	0x340
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x341
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF13
	.byte	0x1
	.value	0x342
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF7
	.byte	0x1
	.value	0x343
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x24
	.long	0x3478
	.string	"set_nonzero_bits_and_sign_copies"
	.byte	0x1
	.value	0x368
	.byte	0x1
	.long	.LFB20
	.long	.LFE20
	.long	.LLST5
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x365
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"set"
	.byte	0x1
	.value	0x366
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"data"
	.byte	0x1
	.value	0x367
	.long	0x566
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x26
	.string	"num"
	.byte	0x1
	.value	0x369
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB7
	.long	.LBE7
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0x386
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x35c8
	.string	"can_combine_p"
	.byte	0x1
	.value	0x3bf
	.byte	0x1
	.long	0x214
	.long	.LFB21
	.long	.LFE21
	.long	.LLST6
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x3ba
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"i3"
	.byte	0x1
	.value	0x3bb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"pred"
	.byte	0x1
	.value	0x3bc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"succ"
	.byte	0x1
	.value	0x3bd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x25
	.string	"pdest"
	.byte	0x1
	.value	0x3be
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x25
	.string	"psrc"
	.byte	0x1
	.value	0x3be
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x3c0
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0x3c1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0x3c1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x3c1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"p"
	.byte	0x1
	.value	0x3c2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"all_adjacent"
	.byte	0x1
	.value	0x3c6
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LBB8
	.long	.LBE8
	.uleb128 0x26
	.string	"elt"
	.byte	0x1
	.value	0x3e0
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2c
	.long	.LBB9
	.long	.LBE9
	.uleb128 0x26
	.string	"i3pat"
	.byte	0x1
	.value	0x3f7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x3f8
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x3f9
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2c
	.long	.LBB10
	.long	.LBE10
	.uleb128 0x26
	.string	"i3elt"
	.byte	0x1
	.value	0x3fd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x3621
	.string	"sets_function_arg_p"
	.byte	0x1
	.value	0x4df
	.byte	0x1
	.long	0x214
	.long	.LFB22
	.long	.LFE22
	.long	.LLST7
	.uleb128 0x25
	.string	"pat"
	.byte	0x1
	.value	0x4de
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x4e0
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x29
	.long	.LASF24
	.byte	0x1
	.value	0x4e1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2d
	.long	0x372e
	.string	"combinable_i3pat"
	.byte	0x1
	.value	0x52e
	.byte	0x1
	.long	0x214
	.long	.LFB23
	.long	.LFE23
	.long	.LLST8
	.uleb128 0x25
	.string	"i3"
	.byte	0x1
	.value	0x528
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"loc"
	.byte	0x1
	.value	0x529
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"i2dest"
	.byte	0x1
	.value	0x52a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"i1dest"
	.byte	0x1
	.value	0x52b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x25
	.string	"i1_not_in_src"
	.byte	0x1
	.value	0x52c
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x25
	.string	"pi3dest_killed"
	.byte	0x1
	.value	0x52d
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x26
	.string	"x"
	.byte	0x1
	.value	0x52f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2b
	.long	0x3716
	.long	.LBB11
	.long	.LBE11
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0x533
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x534
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0x535
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x29
	.long	.LASF24
	.byte	0x1
	.value	0x536
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB12
	.long	.LBE12
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x58c
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x3765
	.string	"contains_muldiv"
	.byte	0x1
	.value	0x59d
	.byte	0x1
	.long	0x214
	.long	.LFB24
	.long	.LFE24
	.long	.LLST9
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x59c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x2d
	.long	0x37cf
	.string	"cant_combine_insn_p"
	.byte	0x1
	.value	0x5bd
	.byte	0x1
	.long	0x214
	.long	.LFB25
	.long	.LFE25
	.long	.LLST10
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x5bc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0x5be
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0x5bf
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x5bf
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2d
	.long	0x3f2e
	.string	"try_combine"
	.byte	0x1
	.value	0x5f5
	.byte	0x1
	.long	0x9c
	.long	.LFB26
	.long	.LFE26
	.long	.LLST11
	.uleb128 0x25
	.string	"i3"
	.byte	0x1
	.value	0x5f3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"i2"
	.byte	0x1
	.value	0x5f3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"i1"
	.byte	0x1
	.value	0x5f3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF21
	.byte	0x1
	.value	0x5f4
	.long	0x87e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x26
	.string	"newpat"
	.byte	0x1
	.value	0x5f7
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x26
	.string	"newi2pat"
	.byte	0x1
	.value	0x5f7
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -268
	.uleb128 0x26
	.string	"substed_i2"
	.byte	0x1
	.value	0x5f8
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -260
	.uleb128 0x26
	.string	"substed_i1"
	.byte	0x1
	.value	0x5f8
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x26
	.string	"added_sets_1"
	.byte	0x1
	.value	0x5fa
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -252
	.uleb128 0x26
	.string	"added_sets_2"
	.byte	0x1
	.value	0x5fa
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x26
	.string	"total_sets"
	.byte	0x1
	.value	0x5fc
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -244
	.uleb128 0x26
	.string	"i2_is_used"
	.byte	0x1
	.value	0x5fe
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x29
	.long	.LASF25
	.byte	0x1
	.value	0x600
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x26
	.string	"i2_code_number"
	.byte	0x1
	.value	0x600
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x26
	.string	"other_code_number"
	.byte	0x1
	.value	0x600
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -228
	.uleb128 0x26
	.string	"i3dest_killed"
	.byte	0x1
	.value	0x604
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x26
	.string	"i2dest"
	.byte	0x1
	.value	0x606
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -276
	.uleb128 0x26
	.string	"i2src"
	.byte	0x1
	.value	0x606
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x26
	.string	"i1dest"
	.byte	0x1
	.value	0x606
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -284
	.uleb128 0x26
	.string	"i1src"
	.byte	0x1
	.value	0x606
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x26
	.string	"i2pat"
	.byte	0x1
	.value	0x608
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x26
	.string	"i2dest_in_i2src"
	.byte	0x1
	.value	0x60a
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -220
	.uleb128 0x26
	.string	"i1dest_in_i1src"
	.byte	0x1
	.value	0x60a
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x26
	.string	"i2dest_in_i1src"
	.byte	0x1
	.value	0x60a
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x26
	.string	"i1_feeds_i3"
	.byte	0x1
	.value	0x60b
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x26
	.string	"new_i3_notes"
	.byte	0x1
	.value	0x60d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -292
	.uleb128 0x26
	.string	"new_i2_notes"
	.byte	0x1
	.value	0x60d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x26
	.string	"i3_subst_into_i2"
	.byte	0x1
	.value	0x60f
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -204
	.uleb128 0x26
	.string	"have_mult"
	.byte	0x1
	.value	0x611
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x26
	.string	"maxreg"
	.byte	0x1
	.value	0x613
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x614
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0x615
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x616
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2a
	.string	"validate_replacement"
	.byte	0x1
	.value	0x826
	.long	.L427
	.uleb128 0x2b
	.long	0x3aef
	.long	.LBB13
	.long	.LBE13
	.uleb128 0x29
	.long	.LASF27
	.byte	0x1
	.value	0x62c
	.long	0x3f2e
	.byte	0x3
	.byte	0x91
	.sleb128 -180
	.byte	0x0
	.uleb128 0x2b
	.long	0x3b0c
	.long	.LBB14
	.long	.LBE14
	.uleb128 0x26
	.string	"p2"
	.byte	0x1
	.value	0x655
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.byte	0x0
	.uleb128 0x2b
	.long	0x3b53
	.long	.LBB15
	.long	.LBE15
	.uleb128 0x26
	.string	"lo"
	.byte	0x1
	.value	0x693
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x26
	.string	"hi"
	.byte	0x1
	.value	0x693
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x2c
	.long	.LBB16
	.long	.LBE16
	.uleb128 0x26
	.string	"sign"
	.byte	0x1
	.value	0x6ac
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x3b71
	.long	.LBB17
	.long	.LBE17
	.uleb128 0x26
	.string	"old"
	.byte	0x1
	.value	0x803
	.long	0x19b
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.byte	0x0
	.uleb128 0x2b
	.long	0x3b8f
	.long	.LBB18
	.long	.LBE18
	.uleb128 0x26
	.string	"old"
	.byte	0x1
	.value	0x80b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -164
	.byte	0x0
	.uleb128 0x2b
	.long	0x3ca4
	.long	.LBB19
	.long	.LBE19
	.uleb128 0x26
	.string	"m_split"
	.byte	0x1
	.value	0x85a
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x26
	.string	"split"
	.byte	0x1
	.value	0x85a
	.long	0x17b4
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x26
	.string	"ni2dest"
	.byte	0x1
	.value	0x85b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2b
	.long	0x3c57
	.long	.LBB20
	.long	.LBE20
	.uleb128 0x26
	.string	"i2set"
	.byte	0x1
	.value	0x896
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x26
	.string	"i3set"
	.byte	0x1
	.value	0x896
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x26
	.string	"newi3pat"
	.byte	0x1
	.value	0x897
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -300
	.uleb128 0x2c
	.long	.LBB21
	.long	.LBE21
	.uleb128 0x26
	.string	"new_i3_dest"
	.byte	0x1
	.value	0x8b7
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x26
	.string	"new_i2_dest"
	.byte	0x1
	.value	0x8b8
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB22
	.long	.LBE22
	.uleb128 0x26
	.string	"newdest"
	.byte	0x1
	.value	0x8df
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x26
	.string	"split_code"
	.byte	0x1
	.value	0x8e0
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x26
	.string	"split_mode"
	.byte	0x1
	.value	0x8e1
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x3cf0
	.long	.LBB23
	.long	.LBE23
	.uleb128 0x26
	.string	"ni2dest"
	.byte	0x1
	.value	0x94b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2c
	.long	.LBB24
	.long	.LBE24
	.uleb128 0x29
	.long	.LASF19
	.byte	0x1
	.value	0x959
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0x95a
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x3d6b
	.long	.LBB25
	.long	.LBE25
	.uleb128 0x26
	.string	"other_pat"
	.byte	0x1
	.value	0x9c0
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -300
	.uleb128 0x26
	.string	"new_other_notes"
	.byte	0x1
	.value	0x9c1
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x26
	.string	"note"
	.byte	0x1
	.value	0x9c2
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF10
	.byte	0x1
	.value	0x9c2
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2c
	.long	.LBB26
	.long	.LBE26
	.uleb128 0x29
	.long	.LASF27
	.byte	0x1
	.value	0x9c4
	.long	0x3f2e
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x3f1d
	.long	.LBB27
	.long	.LBE27
	.uleb128 0x26
	.string	"i3notes"
	.byte	0x1
	.value	0x9fb
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x26
	.string	"i2notes"
	.byte	0x1
	.value	0x9fb
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x26
	.string	"i1notes"
	.byte	0x1
	.value	0x9fb
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x26
	.string	"i3links"
	.byte	0x1
	.value	0x9fc
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x26
	.string	"i2links"
	.byte	0x1
	.value	0x9fc
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x26
	.string	"i1links"
	.byte	0x1
	.value	0x9fc
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x26
	.string	"midnotes"
	.byte	0x1
	.value	0x9fd
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x9fe
	.long	0x463
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"elim_i2"
	.byte	0x1
	.value	0xa02
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"elim_i1"
	.byte	0x1
	.value	0xa05
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2b
	.long	0x3e61
	.long	.LBB28
	.long	.LBE28
	.uleb128 0x26
	.string	"call_usage"
	.byte	0x1
	.value	0xa29
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.byte	0x0
	.uleb128 0x2b
	.long	0x3e7e
	.long	.LBB29
	.long	.LBE29
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0xa56
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.uleb128 0x2b
	.long	0x3ecf
	.long	.LBB30
	.long	.LBE30
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0xae6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"i2_insn"
	.byte	0x1
	.value	0xae7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"i2_val"
	.byte	0x1
	.value	0xae7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0xae7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB31
	.long	.LBE31
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0xb05
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"i1_insn"
	.byte	0x1
	.value	0xb06
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"i1_val"
	.byte	0x1
	.value	0xb06
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0xb06
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x27
	.long	.LASF18
	.long	0x74e5
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.12102
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1d55
	.uleb128 0x24
	.long	0x3f72
	.string	"undo_all"
	.byte	0x1
	.value	0xb51
	.byte	0x1
	.long	.LFB27
	.long	.LFE27
	.long	.LLST12
	.uleb128 0x26
	.string	"undo"
	.byte	0x1
	.value	0xb52
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x29
	.long	.LASF10
	.byte	0x1
	.value	0xb52
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.uleb128 0x24
	.long	0x3fb3
	.string	"undo_commit"
	.byte	0x1
	.value	0xb6c
	.byte	0x1
	.long	.LFB28
	.long	.LFE28
	.long	.LLST13
	.uleb128 0x26
	.string	"undo"
	.byte	0x1
	.value	0xb6d
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x29
	.long	.LASF10
	.byte	0x1
	.value	0xb6d
	.long	0x3082
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.uleb128 0x2d
	.long	0x4187
	.string	"find_split_point"
	.byte	0x1
	.value	0xb84
	.byte	0x1
	.long	0x17b4
	.long	.LFB29
	.long	.LFE29
	.long	.LLST14
	.uleb128 0x25
	.string	"loc"
	.byte	0x1
	.value	0xb82
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0xb83
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"x"
	.byte	0x1
	.value	0xb85
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0xb86
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"split"
	.byte	0x1
	.value	0xb87
	.long	0x17b4
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0xb88
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0xb89
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x29
	.long	.LASF13
	.byte	0x1
	.value	0xb8a
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x29
	.long	.LASF12
	.byte	0x1
	.value	0xb8b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2b
	.long	0x40c0
	.long	.LBB32
	.long	.LBE32
	.uleb128 0x26
	.string	"reg"
	.byte	0x1
	.value	0xbb1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"seq"
	.byte	0x1
	.value	0xbb2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LBB33
	.long	.LBE33
	.uleb128 0x26
	.string	"src1"
	.byte	0x1
	.value	0xbc8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"src2"
	.byte	0x1
	.value	0xbc9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x412c
	.long	.LBB34
	.long	.LBE34
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0xc13
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0xc14
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0xc15
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0xc16
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0xc17
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0xc18
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.uleb128 0x2b
	.long	0x4150
	.long	.LBB35
	.long	.LBE35
	.uleb128 0x26
	.string	"extraction"
	.byte	0x1
	.value	0xc48
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x2b
	.long	0x416d
	.long	.LBB36
	.long	.LBE36
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0xc8e
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB37
	.long	.LBE37
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0xce4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x42b5
	.string	"subst"
	.byte	0x1
	.value	0xd26
	.byte	0x1
	.long	0x9c
	.long	.LFB30
	.long	.LFE30
	.long	.LLST15
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0xd23
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"from"
	.byte	0x1
	.value	0xd23
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"to"
	.byte	0x1
	.value	0xd23
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF29
	.byte	0x1
	.value	0xd24
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x25
	.string	"unique_copy"
	.byte	0x1
	.value	0xd25
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0xd27
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF30
	.byte	0x1
	.value	0xd28
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0xd29
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0xd2a
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0xd2a
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0xd2b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2b
	.long	0x426c
	.long	.LBB38
	.long	.LBE38
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0xd6d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2b
	.long	0x4287
	.long	.LBB39
	.long	.LBE39
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0xd96
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2b
	.long	0x42a4
	.long	.LBB40
	.long	.LBE40
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0xdfc
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x27
	.long	.LASF18
	.long	0x74d0
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.14994
	.byte	0x0
	.uleb128 0x2d
	.long	0x46bd
	.string	"combine_simplify_rtx"
	.byte	0x1
	.value	0xe38
	.byte	0x1
	.long	0x9c
	.long	.LFB31
	.long	.LFE31
	.long	.LLST16
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0xe34
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF30
	.byte	0x1
	.value	0xe35
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"last"
	.byte	0x1
	.value	0xe36
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF29
	.byte	0x1
	.value	0xe37
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0xe39
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0xe3a
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0xe3b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x29
	.long	.LASF31
	.byte	0x1
	.value	0xe3c
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0xe3d
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2b
	.long	0x438a
	.long	.LBB41
	.long	.LBE41
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0xe67
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.byte	0x0
	.uleb128 0x2b
	.long	0x43fa
	.long	.LBB42
	.long	.LBE42
	.uleb128 0x26
	.string	"cond"
	.byte	0x1
	.value	0xe89
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x29
	.long	.LASF32
	.byte	0x1
	.value	0xe89
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x29
	.long	.LASF33
	.byte	0x1
	.value	0xe89
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x2c
	.long	.LBB43
	.long	.LBE43
	.uleb128 0x26
	.string	"cop1"
	.byte	0x1
	.value	0xe93
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x26
	.string	"cond_code"
	.byte	0x1
	.value	0xe94
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x441d
	.long	.LBB44
	.long	.LBE44
	.uleb128 0x26
	.string	"cmp_mode"
	.byte	0x1
	.value	0xed6
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.byte	0x0
	.uleb128 0x2b
	.long	0x4487
	.long	.LBB45
	.long	.LBE45
	.uleb128 0x26
	.string	"other"
	.byte	0x1
	.value	0xf12
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x29
	.long	.LASF34
	.byte	0x1
	.value	0xf13
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x29
	.long	.LASF35
	.byte	0x1
	.value	0xf14
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x29
	.long	.LASF12
	.byte	0x1
	.value	0xf15
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LBB46
	.long	.LBE46
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0xf1b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x44a5
	.long	.LBB47
	.long	.LBE47
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0xf4e
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.uleb128 0x2b
	.long	0x44c3
	.long	.LBB48
	.long	.LBE48
	.uleb128 0x29
	.long	.LASF36
	.byte	0x1
	.value	0xf85
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.byte	0x0
	.uleb128 0x2b
	.long	0x451b
	.long	.LBB49
	.long	.LBE49
	.uleb128 0x26
	.string	"in1"
	.byte	0x1
	.value	0xfa7
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x26
	.string	"in2"
	.byte	0x1
	.value	0xfa7
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x29
	.long	.LASF37
	.byte	0x1
	.value	0xfa8
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2c
	.long	.LBB50
	.long	.LBE50
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0xfb4
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x453b
	.long	.LBB51
	.long	.LBE51
	.uleb128 0x26
	.string	"temp1"
	.byte	0x1
	.value	0x100d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x2b
	.long	0x4569
	.long	.LBB52
	.long	.LBE52
	.uleb128 0x26
	.string	"in1"
	.byte	0x1
	.value	0x10a5
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"in2"
	.byte	0x1
	.value	0x10a5
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.uleb128 0x2b
	.long	0x4587
	.long	.LBB53
	.long	.LBE53
	.uleb128 0x26
	.string	"tor"
	.byte	0x1
	.value	0x10f8
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x2b
	.long	0x45b3
	.long	.LBB54
	.long	.LBE54
	.uleb128 0x26
	.string	"in1"
	.byte	0x1
	.value	0x111c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x26
	.string	"in2"
	.byte	0x1
	.value	0x111c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.uleb128 0x2b
	.long	0x45df
	.long	.LBB55
	.long	.LBE55
	.uleb128 0x26
	.string	"in1"
	.byte	0x1
	.value	0x1129
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"in2"
	.byte	0x1
	.value	0x1129
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x2b
	.long	0x45fc
	.long	.LBB56
	.long	.LBE56
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x1150
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x2b
	.long	0x4639
	.long	.LBB57
	.long	.LBE57
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x1175
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x1176
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x29
	.long	.LASF38
	.byte	0x1
	.value	0x1177
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x2b
	.long	0x46ac
	.long	.LBB58
	.long	.LBE58
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x125a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x125b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x125c
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB59
	.long	.LBE59
	.uleb128 0x29
	.long	.LASF6
	.byte	0x1
	.value	0x1265
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2c
	.long	.LBB60
	.long	.LBE60
	.uleb128 0x26
	.string	"op0_size"
	.byte	0x1
	.value	0x126e
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -184
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x27
	.long	.LASF18
	.long	0x74bb
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.15491
	.byte	0x0
	.uleb128 0x2d
	.long	0x48b3
	.string	"simplify_if_then_else"
	.byte	0x1
	.value	0x128b
	.byte	0x1
	.long	0x9c
	.long	.LFB32
	.long	.LFE32
	.long	.LLST17
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x128a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x128c
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x26
	.string	"cond"
	.byte	0x1
	.value	0x128d
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF32
	.byte	0x1
	.value	0x128e
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x29
	.long	.LASF33
	.byte	0x1
	.value	0x128f
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x26
	.string	"true_code"
	.byte	0x1
	.value	0x1290
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x26
	.string	"comparison_p"
	.byte	0x1
	.value	0x1291
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x1292
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x1293
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x26
	.string	"false_code"
	.byte	0x1
	.value	0x1294
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x29
	.long	.LASF31
	.byte	0x1
	.value	0x1295
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2b
	.long	0x481b
	.long	.LBB61
	.long	.LBE61
	.uleb128 0x26
	.string	"nzb"
	.byte	0x1
	.value	0x12ab
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x26
	.string	"from"
	.byte	0x1
	.value	0x12ac
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"true_val"
	.byte	0x1
	.value	0x12ad
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"false_val"
	.byte	0x1
	.value	0x12ae
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"swapped"
	.byte	0x1
	.value	0x12af
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB62
	.long	.LBE62
	.uleb128 0x26
	.string	"t"
	.byte	0x1
	.value	0x134b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"f"
	.byte	0x1
	.value	0x134c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"cond_op0"
	.byte	0x1
	.value	0x134d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"cond_op1"
	.byte	0x1
	.value	0x134e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"op"
	.byte	0x1
	.value	0x134f
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"extend_op"
	.byte	0x1
	.value	0x134f
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"m"
	.byte	0x1
	.value	0x1350
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"z"
	.byte	0x1
	.value	0x1351
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"c1"
	.byte	0x1
	.value	0x1351
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x4ab6
	.string	"simplify_set"
	.byte	0x1
	.value	0x13d1
	.byte	0x1
	.long	0x9c
	.long	.LFB33
	.long	.LFE33
	.long	.LLST18
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x13d0
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0x13d2
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x13d3
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x13d4
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x29
	.long	.LASF17
	.byte	0x1
	.value	0x13d6
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x26
	.string	"cc_use"
	.byte	0x1
	.value	0x13d7
	.long	0x17b4
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2b
	.long	0x4a5a
	.long	.LBB63
	.long	.LBE63
	.uleb128 0x26
	.string	"old_code"
	.byte	0x1
	.value	0x13f3
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x29
	.long	.LASF38
	.byte	0x1
	.value	0x13f4
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x13f5
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x13f5
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x26
	.string	"tmp"
	.byte	0x1
	.value	0x13f5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"other_changed"
	.byte	0x1
	.value	0x13f6
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"compare_mode"
	.byte	0x1
	.value	0x13f7
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"tmp_mode"
	.byte	0x1
	.value	0x13f8
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2b
	.long	0x4a14
	.long	.LBB64
	.long	.LBE64
	.uleb128 0x26
	.string	"pat"
	.byte	0x1
	.value	0x1409
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2c
	.long	.LBB65
	.long	.LBE65
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0x1410
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB66
	.long	.LBE66
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x1442
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2c
	.long	.LBB67
	.long	.LBE67
	.uleb128 0x26
	.string	"pat"
	.byte	0x1
	.value	0x1453
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x26
	.string	"note"
	.byte	0x1
	.value	0x1453
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB68
	.long	.LBE68
	.uleb128 0x29
	.long	.LASF32
	.byte	0x1
	.value	0x14ee
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF33
	.byte	0x1
	.value	0x14f0
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"term1"
	.byte	0x1
	.value	0x14f2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"term2"
	.byte	0x1
	.value	0x14f2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"term3"
	.byte	0x1
	.value	0x14f2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x4b9b
	.string	"simplify_logical"
	.byte	0x1
	.value	0x1523
	.byte	0x1
	.long	0x9c
	.long	.LFB34
	.long	.LFE34
	.long	.LLST19
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1521
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"last"
	.byte	0x1
	.value	0x1522
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x1524
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x1525
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x1526
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF31
	.byte	0x1
	.value	0x1527
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2b
	.long	0x4b65
	.long	.LBB69
	.long	.LBE69
	.uleb128 0x29
	.long	.LASF8
	.byte	0x1
	.value	0x15e3
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x15e4
	.long	0x4ff
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.uleb128 0x2b
	.long	0x4b8a
	.long	.LBB70
	.long	.LBE70
	.uleb128 0x26
	.string	"num_negated"
	.byte	0x1
	.value	0x15fe
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x27
	.long	.LASF18
	.long	0x74a6
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18230
	.byte	0x0
	.uleb128 0x2d
	.long	0x4c46
	.string	"expand_compound_operation"
	.byte	0x1
	.value	0x165a
	.byte	0x1
	.long	0x9c
	.long	.LFB35
	.long	.LFE35
	.long	.LLST20
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1659
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0x165b
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x165b
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x29
	.long	.LASF13
	.byte	0x1
	.value	0x165c
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"modewidth"
	.byte	0x1
	.value	0x165d
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x165e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB71
	.long	.LBE71
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x16b9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x4cf4
	.string	"expand_field_assignment"
	.byte	0x1
	.value	0x1723
	.byte	0x1
	.long	0x9c
	.long	.LFB36
	.long	.LFE36
	.long	.LLST21
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1722
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF12
	.byte	0x1
	.value	0x1724
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0x1725
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x1726
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x1727
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"compute_mode"
	.byte	0x1
	.value	0x1728
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB72
	.long	.LBE72
	.uleb128 0x26
	.string	"imode"
	.byte	0x1
	.value	0x176f
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x4f5c
	.string	"make_extraction"
	.byte	0x1
	.value	0x17c1
	.byte	0x1
	.long	0x9c
	.long	.LFB37
	.long	.LFE37
	.long	.LLST22
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x17ba
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF12
	.byte	0x1
	.value	0x17bb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"pos"
	.byte	0x1
	.value	0x17bc
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x25
	.string	"pos_rtx"
	.byte	0x1
	.value	0x17bd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x25
	.string	"len"
	.byte	0x1
	.value	0x17be
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2e
	.long	.LASF13
	.byte	0x1
	.value	0x17bf
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x2e
	.long	.LASF29
	.byte	0x1
	.value	0x17c0
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x25
	.string	"in_compare"
	.byte	0x1
	.value	0x17c0
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 36
	.uleb128 0x26
	.string	"is_mode"
	.byte	0x1
	.value	0x17c5
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x29
	.long	.LASF36
	.byte	0x1
	.value	0x17c6
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x26
	.string	"wanted_inner_mode"
	.byte	0x1
	.value	0x17c7
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"wanted_inner_reg_mode"
	.byte	0x1
	.value	0x17c8
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"pos_mode"
	.byte	0x1
	.value	0x17c9
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"extraction_mode"
	.byte	0x1
	.value	0x17ca
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x26
	.string	"tmode"
	.byte	0x1
	.value	0x17cb
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"spans_byte"
	.byte	0x1
	.value	0x17cc
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0x17cd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"orig_pos_rtx"
	.byte	0x1
	.value	0x17ce
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"orig_pos"
	.byte	0x1
	.value	0x17cf
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2b
	.long	0x4eb7
	.long	.LBB73
	.long	.LBE73
	.uleb128 0x29
	.long	.LASF6
	.byte	0x1
	.value	0x181f
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.uleb128 0x2b
	.long	0x4edc
	.long	.LBB74
	.long	.LBE74
	.uleb128 0x26
	.string	"final_word"
	.byte	0x1
	.value	0x182f
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.byte	0x0
	.uleb128 0x2b
	.long	0x4f0a
	.long	.LBB75
	.long	.LBE75
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x1868
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"temp1"
	.byte	0x1
	.value	0x1869
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2b
	.long	0x4f27
	.long	.LBB76
	.long	.LBE76
	.uleb128 0x29
	.long	.LASF6
	.byte	0x1
	.value	0x18d9
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB77
	.long	.LBE77
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x190f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB78
	.long	.LBE78
	.uleb128 0x26
	.string	"temp1"
	.byte	0x1
	.value	0x191d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x4fd2
	.string	"extract_left_shift"
	.byte	0x1
	.value	0x1943
	.byte	0x1
	.long	0x9c
	.long	.LFB38
	.long	.LFE38
	.long	.LLST23
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1941
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF8
	.byte	0x1
	.value	0x1942
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1944
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x1945
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x1946
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2d
	.long	0x50f8
	.string	"make_compound_operation"
	.byte	0x1
	.value	0x1982
	.byte	0x1
	.long	0x9c
	.long	.LFB39
	.long	.LFE39
	.long	.LLST24
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1980
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"in_code"
	.byte	0x1
	.value	0x1981
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1983
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x1984
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF39
	.byte	0x1
	.value	0x1985
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"rhs"
	.byte	0x1
	.value	0x1986
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"lhs"
	.byte	0x1
	.value	0x1986
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"next_code"
	.byte	0x1
	.value	0x1987
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x1988
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0x1989
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x198a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x198b
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2b
	.long	0x50dc
	.long	.LBB79
	.long	.LBE79
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x19ef
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB80
	.long	.LBE80
	.uleb128 0x26
	.string	"newer"
	.byte	0x1
	.value	0x1a4e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x515f
	.string	"get_pos_from_mask"
	.byte	0x1
	.value	0x1a90
	.byte	0x1
	.long	0x214
	.long	.LFB40
	.long	.LFE40
	.long	.LLST25
	.uleb128 0x25
	.string	"m"
	.byte	0x1
	.value	0x1a8e
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x25
	.string	"plen"
	.byte	0x1
	.value	0x1a8f
	.long	0x1ebe
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0x1a92
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x1a93
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2d
	.long	0x5348
	.string	"force_to_mode"
	.byte	0x1
	.value	0x1aba
	.byte	0x1
	.long	0x9c
	.long	.LFB41
	.long	.LFE41
	.long	.LLST26
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1ab5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x1ab6
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF28
	.byte	0x1
	.value	0x1ab7
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x25
	.string	"reg"
	.byte	0x1
	.value	0x1ab8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x25
	.string	"just_select"
	.byte	0x1
	.value	0x1ab9
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1abb
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"next_select"
	.byte	0x1
	.value	0x1abc
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF37
	.byte	0x1
	.value	0x1abd
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"fuller_mask"
	.byte	0x1
	.value	0x1abe
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x29
	.long	.LASF40
	.byte	0x1
	.value	0x1abe
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x1abf
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x1abf
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x1abf
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2a
	.string	"binop"
	.byte	0x1
	.value	0x1bbb
	.long	.L2775
	.uleb128 0x2a
	.string	"shiftrt"
	.byte	0x1
	.value	0x1c60
	.long	.L2839
	.uleb128 0x2a
	.string	"unop"
	.byte	0x1
	.value	0x1caa
	.long	.L2881
	.uleb128 0x2b
	.long	0x52cb
	.long	.LBB81
	.long	.LBE81
	.uleb128 0x26
	.string	"cval"
	.byte	0x1
	.value	0x1b4d
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x26
	.string	"width"
	.byte	0x1
	.value	0x1b4f
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"y"
	.byte	0x1
	.value	0x1b50
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2b
	.long	0x52fc
	.long	.LBB82
	.long	.LBE82
	.uleb128 0x26
	.string	"width"
	.byte	0x1
	.value	0x1b69
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"smask"
	.byte	0x1
	.value	0x1b6a
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.uleb128 0x2b
	.long	0x5330
	.long	.LBB83
	.long	.LBE83
	.uleb128 0x29
	.long	.LASF12
	.byte	0x1
	.value	0x1bf5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"inner_mask"
	.byte	0x1
	.value	0x1bf6
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB84
	.long	.LBE84
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x1c33
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x5460
	.string	"if_then_else_cond"
	.byte	0x1
	.value	0x1cde
	.byte	0x1
	.long	0x9c
	.long	.LFB42
	.long	.LFE42
	.long	.LLST27
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1cdc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"ptrue"
	.byte	0x1
	.value	0x1cdd
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"pfalse"
	.byte	0x1
	.value	0x1cdd
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x1cdf
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1ce0
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"cond0"
	.byte	0x1
	.value	0x1ce1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"cond1"
	.byte	0x1
	.value	0x1ce1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"true0"
	.byte	0x1
	.value	0x1ce1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"true1"
	.byte	0x1
	.value	0x1ce1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"false0"
	.byte	0x1
	.value	0x1ce1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"false1"
	.byte	0x1
	.value	0x1ce1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"nz"
	.byte	0x1
	.value	0x1ce2
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2c
	.long	.LBB85
	.long	.LBE85
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x1d1f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x1d20
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x5592
	.string	"known_cond"
	.byte	0x1
	.value	0x1da7
	.byte	0x1
	.long	0x9c
	.long	.LFB43
	.long	.LFE43
	.long	.LLST28
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1da4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"cond"
	.byte	0x1
	.value	0x1da5
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"reg"
	.byte	0x1
	.value	0x1da6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"val"
	.byte	0x1
	.value	0x1da6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1da8
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x1da9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x1daa
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x1dab
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0x1dab
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2b
	.long	0x5523
	.long	.LBB86
	.long	.LBE86
	.uleb128 0x29
	.long	.LASF13
	.byte	0x1
	.value	0x1de4
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2b
	.long	0x555c
	.long	.LBB87
	.long	.LBE87
	.uleb128 0x29
	.long	.LASF36
	.byte	0x1
	.value	0x1e00
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0x1e01
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"r"
	.byte	0x1
	.value	0x1e01
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB88
	.long	.LBE88
	.uleb128 0x29
	.long	.LASF36
	.byte	0x1
	.value	0x1e19
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0x1e1a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"r"
	.byte	0x1
	.value	0x1e1a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x55e7
	.string	"rtx_equal_for_field_assignment_p"
	.byte	0x1
	.value	0x1e40
	.byte	0x1
	.long	0x214
	.long	.LFB44
	.long	.LFE44
	.long	.LLST29
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1e3e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"y"
	.byte	0x1
	.value	0x1e3f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.byte	0x0
	.uleb128 0x2d
	.long	0x56c0
	.string	"make_field_assignment"
	.byte	0x1
	.value	0x1e66
	.byte	0x1
	.long	0x9c
	.long	.LFB45
	.long	.LFE45
	.long	.LLST30
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1e65
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x1e67
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"src"
	.byte	0x1
	.value	0x1e68
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"assign"
	.byte	0x1
	.value	0x1e69
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"rhs"
	.byte	0x1
	.value	0x1e6a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"lhs"
	.byte	0x1
	.value	0x1e6a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"c1"
	.byte	0x1
	.value	0x1e6b
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0x1e6c
	.long	0x4ff
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x1e6d
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x26
	.string	"other"
	.byte	0x1
	.value	0x1e6e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x1e6f
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x2d
	.long	0x5761
	.string	"apply_distributive_law"
	.byte	0x1
	.value	0x1edb
	.byte	0x1
	.long	0x9c
	.long	.LFB46
	.long	.LFE46
	.long	.LLST31
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1eda
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x1edc
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"lhs"
	.byte	0x1
	.value	0x1edd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"rhs"
	.byte	0x1
	.value	0x1edd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"other"
	.byte	0x1
	.value	0x1edd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x1ede
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"inner_code"
	.byte	0x1
	.value	0x1edf
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2d
	.long	0x5814
	.string	"simplify_and_const_int"
	.byte	0x1
	.value	0x1f5d
	.byte	0x1
	.long	0x9c
	.long	.LFB47
	.long	.LFE47
	.long	.LLST32
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1f59
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x1f5a
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"varop"
	.byte	0x1
	.value	0x1f5b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"constop"
	.byte	0x1
	.value	0x1f5c
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF40
	.byte	0x1
	.value	0x1f5e
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x1f5f
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2c
	.long	.LBB89
	.long	.LBE89
	.uleb128 0x26
	.string	"o0"
	.byte	0x1
	.value	0x1fa1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"o1"
	.byte	0x1
	.value	0x1fa1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x58b1
	.string	"cached_nonzero_bits"
	.byte	0x1
	.value	0x1fde
	.byte	0x1
	.long	0x510
	.long	.LFB48
	.long	.LFE48
	.long	.LLST33
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x1fd9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x1fda
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF41
	.byte	0x1
	.value	0x1fdb
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF42
	.byte	0x1
	.value	0x1fdc
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2e
	.long	.LASF43
	.byte	0x1
	.value	0x1fdd
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LBB90
	.long	.LBE90
	.uleb128 0x26
	.string	"x0"
	.byte	0x1
	.value	0x1fe9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"x1"
	.byte	0x1
	.value	0x1fea
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x5b52
	.string	"nonzero_bits1"
	.byte	0x1
	.value	0x2016
	.byte	0x1
	.long	0x510
	.long	.LFB49
	.long	.LFE49
	.long	.LLST34
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2011
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2012
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF41
	.byte	0x1
	.value	0x2013
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF42
	.byte	0x1
	.value	0x2014
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2e
	.long	.LASF43
	.byte	0x1
	.value	0x2015
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x29
	.long	.LASF40
	.byte	0x1
	.value	0x2017
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x26
	.string	"inner_nz"
	.byte	0x1
	.value	0x2018
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x2019
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x29
	.long	.LASF39
	.byte	0x1
	.value	0x201a
	.long	0x463
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x201b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2b
	.long	0x599a
	.long	.LBB91
	.long	.LBE91
	.uleb128 0x26
	.string	"alignment"
	.byte	0x1
	.value	0x2056
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.byte	0x0
	.uleb128 0x2b
	.long	0x59b8
	.long	.LBB92
	.long	.LBE92
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x2091
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.byte	0x0
	.uleb128 0x2b
	.long	0x59db
	.long	.LBB93
	.long	.LBE93
	.uleb128 0x26
	.string	"nonzero0"
	.byte	0x1
	.value	0x20fc
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.byte	0x0
	.uleb128 0x2b
	.long	0x5ab5
	.long	.LBB94
	.long	.LBE94
	.uleb128 0x26
	.string	"nz0"
	.byte	0x1
	.value	0x2110
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x26
	.string	"nz1"
	.byte	0x1
	.value	0x2112
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x26
	.string	"width0"
	.byte	0x1
	.value	0x2114
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"width1"
	.byte	0x1
	.value	0x2115
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"low0"
	.byte	0x1
	.value	0x2116
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"low1"
	.byte	0x1
	.value	0x2117
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"op0_maybe_minusp"
	.byte	0x1
	.value	0x2118
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x26
	.string	"op1_maybe_minusp"
	.byte	0x1
	.value	0x211a
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x26
	.string	"result_width"
	.byte	0x1
	.value	0x211c
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"result_low"
	.byte	0x1
	.value	0x211d
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2b
	.long	0x5b41
	.long	.LBB95
	.long	.LBE95
	.uleb128 0x29
	.long	.LASF36
	.byte	0x1
	.value	0x2197
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"width"
	.byte	0x1
	.value	0x2198
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF8
	.byte	0x1
	.value	0x2199
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"mode_mask"
	.byte	0x1
	.value	0x219a
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x26
	.string	"op_nonzero"
	.byte	0x1
	.value	0x219b
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF12
	.byte	0x1
	.value	0x219d
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x26
	.string	"outer"
	.byte	0x1
	.value	0x219e
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x27
	.long	.LASF18
	.long	0x74a1
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.22321
	.byte	0x0
	.uleb128 0x2d
	.long	0x5bf6
	.string	"cached_num_sign_bit_copies"
	.byte	0x1
	.value	0x21dc
	.byte	0x1
	.long	0x463
	.long	.LFB50
	.long	.LFE50
	.long	.LLST35
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x21d7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x21d8
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF41
	.byte	0x1
	.value	0x21d9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF42
	.byte	0x1
	.value	0x21da
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2e
	.long	.LASF43
	.byte	0x1
	.value	0x21db
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2c
	.long	.LBB96
	.long	.LBE96
	.uleb128 0x26
	.string	"x0"
	.byte	0x1
	.value	0x21e7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"x1"
	.byte	0x1
	.value	0x21e8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x5cde
	.string	"num_sign_bit_copies1"
	.byte	0x1
	.value	0x220f
	.byte	0x1
	.long	0x463
	.long	.LFB51
	.long	.LFE51
	.long	.LLST36
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x220a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x220b
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF41
	.byte	0x1
	.value	0x220c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2e
	.long	.LASF42
	.byte	0x1
	.value	0x220d
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2e
	.long	.LASF43
	.byte	0x1
	.value	0x220e
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x2210
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"bitwidth"
	.byte	0x1
	.value	0x2211
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"num0"
	.byte	0x1
	.value	0x2212
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"num1"
	.byte	0x1
	.value	0x2212
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF44
	.byte	0x1
	.value	0x2212
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF40
	.byte	0x1
	.value	0x2213
	.long	0x510
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x2214
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x28
	.long	0x5d33
	.byte	0x1
	.string	"extended_count"
	.byte	0x1
	.value	0x2379
	.byte	0x1
	.long	0x463
	.long	.LFB52
	.long	.LFE52
	.long	.LLST37
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2376
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2377
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF13
	.byte	0x1
	.value	0x2378
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.byte	0x0
	.uleb128 0x2d
	.long	0x5de4
	.string	"merge_outer_ops"
	.byte	0x1
	.value	0x23a2
	.byte	0x1
	.long	0x214
	.long	.LFB53
	.long	.LFE53
	.long	.LLST38
	.uleb128 0x25
	.string	"pop0"
	.byte	0x1
	.value	0x239c
	.long	0x5de4
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"pconst0"
	.byte	0x1
	.value	0x239d
	.long	0x5dea
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"op1"
	.byte	0x1
	.value	0x239e
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"const1"
	.byte	0x1
	.value	0x239f
	.long	0x4ff
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x23a0
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x25
	.string	"pcomp_p"
	.byte	0x1
	.value	0x23a1
	.long	0x87e
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x23a3
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"const0"
	.byte	0x1
	.value	0x23a4
	.long	0x4ff
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xb7c
	.uleb128 0x3
	.byte	0x4
	.long	0x4ff
	.uleb128 0x2d
	.long	0x603e
	.string	"simplify_shift_const"
	.byte	0x1
	.value	0x241d
	.byte	0x1
	.long	0x9c
	.long	.LFB54
	.long	.LFE54
	.long	.LLST39
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2418
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x2419
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"result_mode"
	.byte	0x1
	.value	0x241a
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"varop"
	.byte	0x1
	.value	0x241b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x25
	.string	"orig_count"
	.byte	0x1
	.value	0x241c
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x26
	.string	"orig_code"
	.byte	0x1
	.value	0x241e
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x29
	.long	.LASF8
	.byte	0x1
	.value	0x241f
	.long	0x463
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x26
	.string	"signed_count"
	.byte	0x1
	.value	0x2420
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x2421
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"shift_mode"
	.byte	0x1
	.value	0x2422
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"tmode"
	.byte	0x1
	.value	0x2422
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"mode_words"
	.byte	0x1
	.value	0x2423
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x26
	.string	"outer_op"
	.byte	0x1
	.value	0x2426
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x26
	.string	"outer_const"
	.byte	0x1
	.value	0x2427
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x26
	.string	"const_rtx"
	.byte	0x1
	.value	0x2428
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"complement_p"
	.byte	0x1
	.value	0x2429
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x26
	.string	"new"
	.byte	0x1
	.value	0x242a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2b
	.long	0x5f91
	.long	.LBB97
	.long	.LBE97
	.uleb128 0x26
	.string	"bitsize"
	.byte	0x1
	.value	0x2453
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x2b
	.long	0x5ff0
	.long	.LBB98
	.long	.LBE98
	.uleb128 0x26
	.string	"first_code"
	.byte	0x1
	.value	0x2522
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"first_count"
	.byte	0x1
	.value	0x2523
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x2524
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x26
	.string	"mask_rtx"
	.byte	0x1
	.value	0x2525
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2b
	.long	0x601c
	.long	.LBB99
	.long	.LBE99
	.uleb128 0x26
	.string	"lhs"
	.byte	0x1
	.value	0x25f1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"rhs"
	.byte	0x1
	.value	0x25f3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB100
	.long	.LBE100
	.uleb128 0x26
	.string	"varop_inner"
	.byte	0x1
	.value	0x2690
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x6148
	.string	"recog_for_combine"
	.byte	0x1
	.value	0x270c
	.byte	0x1
	.long	0x214
	.long	.LFB55
	.long	.LFE55
	.long	.LLST40
	.uleb128 0x25
	.string	"pnewpat"
	.byte	0x1
	.value	0x2709
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x270a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"pnotes"
	.byte	0x1
	.value	0x270b
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x26
	.string	"pat"
	.byte	0x1
	.value	0x270d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x29
	.long	.LASF25
	.byte	0x1
	.value	0x270e
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"num_clobbers_to_add"
	.byte	0x1
	.value	0x270f
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2710
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"notes"
	.byte	0x1
	.value	0x2711
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"dummy_insn"
	.byte	0x1
	.value	0x2712
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2b
	.long	0x612b
	.long	.LBB101
	.long	.LBE101
	.uleb128 0x26
	.string	"pos"
	.byte	0x1
	.value	0x272d
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB102
	.long	.LBE102
	.uleb128 0x26
	.string	"newpat"
	.byte	0x1
	.value	0x2748
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x61fe
	.string	"gen_lowpart_for_combine"
	.byte	0x1
	.value	0x2777
	.byte	0x1
	.long	0x9c
	.long	.LFB56
	.long	.LFE56
	.long	.LLST41
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2775
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2776
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x29
	.long	.LASF44
	.byte	0x1
	.value	0x2778
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2b
	.long	0x61c1
	.long	.LBB103
	.long	.LBE103
	.uleb128 0x29
	.long	.LASF6
	.byte	0x1
	.value	0x27a1
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB104
	.long	.LBE104
	.uleb128 0x29
	.long	.LASF6
	.byte	0x1
	.value	0x27c7
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"res"
	.byte	0x1
	.value	0x27c8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"sub_mode"
	.byte	0x1
	.value	0x27c9
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x6296
	.string	"gen_binary"
	.byte	0x1
	.value	0x27e0
	.byte	0x1
	.long	0x9c
	.long	.LFB57
	.long	.LFE57
	.long	.LLST42
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x27dd
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x27de
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"op0"
	.byte	0x1
	.value	0x27df
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"op1"
	.byte	0x1
	.value	0x27df
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x29
	.long	.LASF44
	.byte	0x1
	.value	0x27e1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x27e2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB105
	.long	.LBE105
	.uleb128 0x29
	.long	.LASF37
	.byte	0x1
	.value	0x27ef
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x657c
	.string	"simplify_comparison"
	.byte	0x1
	.value	0x2823
	.byte	0x1
	.long	0xb7c
	.long	.LFB58
	.long	.LFE58
	.long	.LLST43
	.uleb128 0x2e
	.long	.LASF0
	.byte	0x1
	.value	0x2820
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"pop0"
	.byte	0x1
	.value	0x2821
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"pop1"
	.byte	0x1
	.value	0x2822
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x26
	.string	"op0"
	.byte	0x1
	.value	0x2824
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x26
	.string	"op1"
	.byte	0x1
	.value	0x2825
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x2826
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x26
	.string	"tem1"
	.byte	0x1
	.value	0x2826
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2827
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x2828
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x26
	.string	"tmode"
	.byte	0x1
	.value	0x2828
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2b
	.long	0x63a9
	.long	.LBB106
	.long	.LBE106
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x285a
	.long	0x884
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x285b
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x26
	.string	"shift_count"
	.byte	0x1
	.value	0x285c
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x2b
	.long	0x6409
	.long	.LBB107
	.long	.LBE107
	.uleb128 0x29
	.long	.LASF34
	.byte	0x1
	.value	0x287b
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x29
	.long	.LASF35
	.byte	0x1
	.value	0x287c
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x26
	.string	"c0"
	.byte	0x1
	.value	0x287d
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x26
	.string	"c1"
	.byte	0x1
	.value	0x287e
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x26
	.string	"changed"
	.byte	0x1
	.value	0x287f
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x2b
	.long	0x6558
	.long	.LBB108
	.long	.LBE108
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x28c4
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF39
	.byte	0x1
	.value	0x28c5
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x29
	.long	.LASF28
	.byte	0x1
	.value	0x28c6
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x26
	.string	"equality_comparison_p"
	.byte	0x1
	.value	0x28c7
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x26
	.string	"sign_bit_comparison_p"
	.byte	0x1
	.value	0x28c8
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"unsigned_comparison_p"
	.byte	0x1
	.value	0x28c9
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"const_op"
	.byte	0x1
	.value	0x28ca
	.long	0x4ff
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2b
	.long	0x64d9
	.long	.LBB109
	.long	.LBE109
	.uleb128 0x29
	.long	.LASF38
	.byte	0x1
	.value	0x2ad9
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x2b
	.long	0x64f6
	.long	.LBB110
	.long	.LBE110
	.uleb128 0x26
	.string	"c1"
	.byte	0x1
	.value	0x2b41
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.byte	0x0
	.uleb128 0x2b
	.long	0x6514
	.long	.LBB111
	.long	.LBE111
	.uleb128 0x29
	.long	.LASF26
	.byte	0x1
	.value	0x2b88
	.long	0x510
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB112
	.long	.LBE112
	.uleb128 0x29
	.long	.LASF12
	.byte	0x1
	.value	0x2bd6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"add_const"
	.byte	0x1
	.value	0x2bd7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"new_const"
	.byte	0x1
	.value	0x2bd8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB113
	.long	.LBE113
	.uleb128 0x26
	.string	"zero_extended"
	.byte	0x1
	.value	0x2c59
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x65e4
	.string	"combine_reversed_comparison_code"
	.byte	0x1
	.value	0x2ca1
	.byte	0x1
	.long	0xb7c
	.long	.LFB59
	.long	.LFE59
	.long	.LLST44
	.uleb128 0x25
	.string	"exp"
	.byte	0x1
	.value	0x2ca0
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x26
	.string	"code1"
	.byte	0x1
	.value	0x2ca2
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"x"
	.byte	0x1
	.value	0x2ca3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2d
	.long	0x6667
	.string	"reversed_comparison"
	.byte	0x1
	.value	0x2cb6
	.byte	0x1
	.long	0x9c
	.long	.LFB60
	.long	.LFE60
	.long	.LLST45
	.uleb128 0x25
	.string	"exp"
	.byte	0x1
	.value	0x2cb4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF1
	.byte	0x1
	.value	0x2cb5
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"op0"
	.byte	0x1
	.value	0x2cb4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"op1"
	.byte	0x1
	.value	0x2cb4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x26
	.string	"reversed_code"
	.byte	0x1
	.value	0x2cb7
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.uleb128 0x24
	.long	0x6726
	.string	"update_table_tick"
	.byte	0x1
	.value	0x2cc5
	.byte	0x1
	.long	.LFB61
	.long	.LFE61
	.long	.LLST46
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2cc4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x2cc6
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x2cc7
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2cc8
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2b
	.long	0x66ff
	.long	.LBB114
	.long	.LBE114
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2ccc
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x2ccd
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"r"
	.byte	0x1
	.value	0x2cd0
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB115
	.long	.LBE115
	.uleb128 0x26
	.string	"x0"
	.byte	0x1
	.value	0x2ce6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"x1"
	.byte	0x1
	.value	0x2ce7
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.long	0x67e1
	.string	"record_value_for_reg"
	.byte	0x1
	.value	0x2d0f
	.byte	0x1
	.long	.LFB62
	.long	.LFE62
	.long	.LLST47
	.uleb128 0x25
	.string	"reg"
	.byte	0x1
	.value	0x2d0c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2d0d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"value"
	.byte	0x1
	.value	0x2d0e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2d10
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x2d11
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2d14
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2b
	.long	0x67c7
	.long	.LBB116
	.long	.LBE116
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x2d1a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB117
	.long	.LBE117
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x2d68
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.long	0x685f
	.string	"record_dead_and_set_regs_1"
	.byte	0x1
	.value	0x2d7c
	.byte	0x1
	.long	.LFB63
	.long	.LFE63
	.long	.LLST48
	.uleb128 0x2e
	.long	.LASF11
	.byte	0x1
	.value	0x2d7a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"setter"
	.byte	0x1
	.value	0x2d7a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"data"
	.byte	0x1
	.value	0x2d7b
	.long	0x566
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x26
	.string	"record_dead_insn"
	.byte	0x1
	.value	0x2d7d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x24
	.long	0x68e1
	.string	"record_dead_and_set_regs"
	.byte	0x1
	.value	0x2da7
	.byte	0x1
	.long	.LFB64
	.long	.LFE64
	.long	.LLST49
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2da6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0x2da8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2da9
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB118
	.long	.LBE118
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2db0
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x2db1
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.long	0x696a
	.string	"record_promoted_value"
	.byte	0x1
	.value	0x2de3
	.byte	0x1
	.long	.LFB65
	.long	.LFE65
	.long	.LLST50
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2de1
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"subreg"
	.byte	0x1
	.value	0x2de2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x29
	.long	.LASF20
	.byte	0x1
	.value	0x2de4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0x2de4
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2de5
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF1
	.byte	0x1
	.value	0x2de6
	.long	0x884
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x24
	.long	0x69e8
	.string	"check_promoted_subreg"
	.byte	0x1
	.value	0x2e0f
	.byte	0x1
	.long	.LFB66
	.long	.LFE66
	.long	.LLST51
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2e0d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2e0e
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2c
	.long	.LBB119
	.long	.LBE119
	.uleb128 0x26
	.string	"format"
	.byte	0x1
	.value	0x2e15
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2e16
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0x2e16
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x6af2
	.string	"get_last_value_validate"
	.byte	0x1
	.value	0x2e38
	.byte	0x1
	.long	0x214
	.long	.LFB67
	.long	.LFE67
	.long	.LLST52
	.uleb128 0x25
	.string	"loc"
	.byte	0x1
	.value	0x2e34
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2e35
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"tick"
	.byte	0x1
	.value	0x2e36
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"replace"
	.byte	0x1
	.value	0x2e37
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x26
	.string	"x"
	.byte	0x1
	.value	0x2e39
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x2e3a
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x2e3b
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2e3c
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2b
	.long	0x6acb
	.long	.LBB120
	.long	.LBE120
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2e40
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x2e41
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0x2e44
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB121
	.long	.LBE121
	.uleb128 0x26
	.string	"x0"
	.byte	0x1
	.value	0x2e6f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"x1"
	.byte	0x1
	.value	0x2e70
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x6b48
	.string	"get_last_value"
	.byte	0x1
	.value	0x2e9d
	.byte	0x1
	.long	0x9c
	.long	.LFB68
	.long	.LFE68
	.long	.LLST53
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2e9c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2e9e
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x26
	.string	"value"
	.byte	0x1
	.value	0x2e9f
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2d
	.long	0x6c01
	.string	"use_crosses_set_p"
	.byte	0x1
	.value	0x2edf
	.byte	0x1
	.long	0x214
	.long	.LFB69
	.long	.LFE69
	.long	.LLST54
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2edd
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF46
	.byte	0x1
	.value	0x2ede
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x2ee0
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2ee1
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x2ee2
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2b
	.long	0x6be9
	.long	.LBB122
	.long	.LBE122
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2ee6
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"endreg"
	.byte	0x1
	.value	0x2ee7
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB123
	.long	.LBE123
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0x2f00
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.long	0x6c71
	.string	"reg_dead_at_p_1"
	.byte	0x1
	.value	0x2f1c
	.byte	0x1
	.long	.LFB70
	.long	.LFE70
	.long	.LLST55
	.uleb128 0x2e
	.long	.LASF11
	.byte	0x1
	.value	0x2f19
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2f1a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"data"
	.byte	0x1
	.value	0x2f1b
	.long	0x566
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2f1d
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x2f1d
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2d
	.long	0x6cd5
	.string	"reg_dead_at_p"
	.byte	0x1
	.value	0x2f36
	.byte	0x1
	.long	0x214
	.long	.LFB71
	.long	.LFE71
	.long	.LLST56
	.uleb128 0x25
	.string	"reg"
	.byte	0x1
	.value	0x2f34
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2f35
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"block"
	.byte	0x1
	.value	0x2f37
	.long	0x220e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2f38
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x24
	.long	0x6db5
	.string	"mark_used_regs_combine"
	.byte	0x1
	.value	0x2f72
	.byte	0x1
	.long	.LFB72
	.long	.LFE72
	.long	.LLST57
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2f71
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x2f73
	.long	0xb7c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x2f74
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2f75
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2b
	.long	0x6d63
	.long	.LBB124
	.long	.LBE124
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x2f97
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"r"
	.byte	0x1
	.value	0x2f97
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2b
	.long	0x6d84
	.long	.LBB125
	.long	.LBE125
	.uleb128 0x26
	.string	"testreg"
	.byte	0x1
	.value	0x2fae
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB126
	.long	.LBE126
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x2fc4
	.long	0x201
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB127
	.long	.LBE127
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0x2fcc
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x28
	.long	0x6e0b
	.byte	0x1
	.string	"remove_death"
	.byte	0x1
	.value	0x2fdd
	.byte	0x1
	.long	0x9c
	.long	.LFB73
	.long	.LFE73
	.long	.LLST58
	.uleb128 0x2e
	.long	.LASF23
	.byte	0x1
	.value	0x2fdb
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x2fdc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"note"
	.byte	0x1
	.value	0x2fde
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x24
	.long	0x7018
	.string	"move_deaths"
	.byte	0x1
	.value	0x2ffa
	.byte	0x1
	.long	.LFB74
	.long	.LFE74
	.long	.LLST59
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x2ff5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"maybe_kill_insn"
	.byte	0x1
	.value	0x2ff6
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2e
	.long	.LASF46
	.byte	0x1
	.value	0x2ff7
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"to_insn"
	.byte	0x1
	.value	0x2ff8
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x25
	.string	"pnotes"
	.byte	0x1
	.value	0x2ff9
	.long	0x17b4
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x26
	.string	"fmt"
	.byte	0x1
	.value	0x2ffb
	.long	0x201
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x26
	.string	"len"
	.byte	0x1
	.value	0x2ffc
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x2ffc
	.long	0x214
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x29
	.long	.LASF0
	.byte	0x1
	.value	0x2ffd
	.long	0xb7c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2b
	.long	0x6fe3
	.long	.LBB128
	.long	.LBE128
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x3001
	.long	0x463
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x26
	.string	"where_dead"
	.byte	0x1
	.value	0x3002
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x26
	.string	"before_dead"
	.byte	0x1
	.value	0x3003
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x26
	.string	"after_dead"
	.byte	0x1
	.value	0x3003
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2c
	.long	.LBB129
	.long	.LBE129
	.uleb128 0x26
	.string	"note"
	.byte	0x1
	.value	0x301a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2b
	.long	0x6f94
	.long	.LBB130
	.long	.LBE130
	.uleb128 0x26
	.string	"deadregno"
	.byte	0x1
	.value	0x3029
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"deadend"
	.byte	0x1
	.value	0x302a
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"ourend"
	.byte	0x1
	.value	0x302d
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x302f
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB131
	.long	.LBE131
	.uleb128 0x26
	.string	"ourend"
	.byte	0x1
	.value	0x3045
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x3047
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x29
	.long	.LASF6
	.byte	0x1
	.value	0x3047
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"oldnotes"
	.byte	0x1
	.value	0x3048
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.long	0x7000
	.long	.LBB132
	.long	.LBE132
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x3064
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB133
	.long	.LBE133
	.uleb128 0x26
	.string	"j"
	.byte	0x1
	.value	0x3093
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x70e2
	.string	"reg_bitfield_target_p"
	.byte	0x1
	.value	0x30a4
	.byte	0x1
	.long	0x214
	.long	.LFB75
	.long	.LFE75
	.long	.LLST60
	.uleb128 0x25
	.string	"x"
	.byte	0x1
	.value	0x30a2
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"body"
	.byte	0x1
	.value	0x30a3
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x30a5
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LBB134
	.long	.LBE134
	.uleb128 0x29
	.long	.LASF11
	.byte	0x1
	.value	0x30a9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"target"
	.byte	0x1
	.value	0x30aa
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x30ab
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"tregno"
	.byte	0x1
	.value	0x30ab
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x30ab
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x26
	.string	"endtregno"
	.byte	0x1
	.value	0x30ab
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.long	0x72e7
	.string	"distribute_notes"
	.byte	0x1
	.value	0x30dd
	.byte	0x1
	.long	.LFB76
	.long	.LFE76
	.long	.LLST61
	.uleb128 0x25
	.string	"notes"
	.byte	0x1
	.value	0x30d9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x25
	.string	"from_insn"
	.byte	0x1
	.value	0x30da
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x25
	.string	"i3"
	.byte	0x1
	.value	0x30db
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x25
	.string	"i2"
	.byte	0x1
	.value	0x30db
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x25
	.string	"elim_i2"
	.byte	0x1
	.value	0x30dc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x25
	.string	"elim_i1"
	.byte	0x1
	.value	0x30dc
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x26
	.string	"note"
	.byte	0x1
	.value	0x30de
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x26
	.string	"next_note"
	.byte	0x1
	.value	0x30de
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x26
	.string	"tem"
	.byte	0x1
	.value	0x30df
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2b
	.long	0x72d6
	.long	.LBB135
	.long	.LBE135
	.uleb128 0x26
	.string	"place"
	.byte	0x1
	.value	0x30e3
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x26
	.string	"place2"
	.byte	0x1
	.value	0x30e3
	.long	0x9c
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2b
	.long	0x723b
	.long	.LBB136
	.long	.LBE136
	.uleb128 0x26
	.string	"bb"
	.byte	0x1
	.value	0x31e9
	.long	0x220e
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2b
	.long	0x7221
	.long	.LBB137
	.long	.LBE137
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0x31f9
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x29
	.long	.LASF24
	.byte	0x1
	.value	0x31fa
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB138
	.long	.LBE138
	.uleb128 0x29
	.long	.LASF20
	.byte	0x1
	.value	0x3265
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.long	.LBB139
	.long	.LBE139
	.uleb128 0x29
	.long	.LASF23
	.byte	0x1
	.value	0x3286
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2c
	.long	.LBB140
	.long	.LBE140
	.uleb128 0x29
	.long	.LASF45
	.byte	0x1
	.value	0x32aa
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x26
	.string	"all_used"
	.byte	0x1
	.value	0x32ad
	.long	0x214
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x26
	.string	"i"
	.byte	0x1
	.value	0x32ae
	.long	0x463
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2c
	.long	.LBB141
	.long	.LBE141
	.uleb128 0x26
	.string	"piece"
	.byte	0x1
	.value	0x32be
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x26
	.string	"bb"
	.byte	0x1
	.value	0x32bf
	.long	0x220e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2c
	.long	.LBB142
	.long	.LBE142
	.uleb128 0x26
	.string	"new_note"
	.byte	0x1
	.value	0x32c5
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x27
	.long	.LASF18
	.long	0x748c
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.28032
	.byte	0x0
	.uleb128 0x24
	.long	0x73a4
	.string	"distribute_links"
	.byte	0x1
	.value	0x3315
	.byte	0x1
	.long	.LFB77
	.long	.LFE77
	.long	.LLST62
	.uleb128 0x2e
	.long	.LASF20
	.byte	0x1
	.value	0x3314
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x29
	.long	.LASF22
	.byte	0x1
	.value	0x3316
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x26
	.string	"next_link"
	.byte	0x1
	.value	0x3316
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2c
	.long	.LBB143
	.long	.LBE143
	.uleb128 0x26
	.string	"place"
	.byte	0x1
	.value	0x331a
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x29
	.long	.LASF19
	.byte	0x1
	.value	0x331b
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x26
	.string	"set"
	.byte	0x1
	.value	0x331c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x26
	.string	"reg"
	.byte	0x1
	.value	0x331c
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2c
	.long	.LBB144
	.long	.LBE144
	.uleb128 0x26
	.string	"link2"
	.byte	0x1
	.value	0x3354
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.long	0x73e7
	.string	"insn_cuid"
	.byte	0x1
	.value	0x336e
	.byte	0x1
	.long	0x214
	.long	.LFB78
	.long	.LFE78
	.long	.LLST63
	.uleb128 0x2e
	.long	.LASF19
	.byte	0x1
	.value	0x336d
	.long	0x9c
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x27
	.long	.LASF18
	.long	0x7477
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.28829
	.byte	0x0
	.uleb128 0x2f
	.long	0x7421
	.byte	0x1
	.string	"dump_combine_stats"
	.byte	0x1
	.value	0x337c
	.byte	0x1
	.long	.LFB79
	.long	.LFE79
	.long	.LLST64
	.uleb128 0x25
	.string	"file"
	.byte	0x1
	.value	0x337b
	.long	0x7421
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x56e
	.uleb128 0x2f
	.long	0x7467
	.byte	0x1
	.string	"dump_combine_total_stats"
	.byte	0x1
	.value	0x3386
	.byte	0x1
	.long	.LFB80
	.long	.LFE80
	.long	.LLST65
	.uleb128 0x25
	.string	"file"
	.byte	0x1
	.value	0x3385
	.long	0x7421
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x10
	.long	0x7477
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x9
	.byte	0x0
	.uleb128 0x9
	.long	0x7467
	.uleb128 0x10
	.long	0x748c
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x10
	.byte	0x0
	.uleb128 0x9
	.long	0x747c
	.uleb128 0x10
	.long	0x74a1
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0xd
	.byte	0x0
	.uleb128 0x9
	.long	0x7491
	.uleb128 0x9
	.long	0x747c
	.uleb128 0x10
	.long	0x74bb
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x14
	.byte	0x0
	.uleb128 0x9
	.long	0x74ab
	.uleb128 0x10
	.long	0x74d0
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x5
	.byte	0x0
	.uleb128 0x9
	.long	0x74c0
	.uleb128 0x10
	.long	0x74e5
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0xb
	.byte	0x0
	.uleb128 0x9
	.long	0x74d5
	.uleb128 0x10
	.long	0x74fa
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0x8
	.byte	0x0
	.uleb128 0x9
	.long	0x74ea
	.uleb128 0x30
	.string	"combine_attempts"
	.byte	0x1
	.byte	0x64
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	combine_attempts
	.uleb128 0x30
	.string	"combine_merges"
	.byte	0x1
	.byte	0x68
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	combine_merges
	.uleb128 0x30
	.string	"combine_extras"
	.byte	0x1
	.byte	0x6c
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	combine_extras
	.uleb128 0x30
	.string	"combine_successes"
	.byte	0x1
	.byte	0x70
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	combine_successes
	.uleb128 0x30
	.string	"total_attempts"
	.byte	0x1
	.byte	0x74
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	total_attempts
	.uleb128 0x30
	.string	"total_merges"
	.byte	0x1
	.byte	0x74
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	total_merges
	.uleb128 0x30
	.string	"total_extras"
	.byte	0x1
	.byte	0x74
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	total_extras
	.uleb128 0x30
	.string	"total_successes"
	.byte	0x1
	.byte	0x74
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	total_successes
	.uleb128 0x30
	.string	"uid_cuid"
	.byte	0x1
	.byte	0x7e
	.long	0x87e
	.byte	0x5
	.byte	0x3
	.long	uid_cuid
	.uleb128 0x30
	.string	"max_uid_cuid"
	.byte	0x1
	.byte	0x7f
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	max_uid_cuid
	.uleb128 0x30
	.string	"combine_max_regno"
	.byte	0x1
	.byte	0x94
	.long	0x463
	.byte	0x5
	.byte	0x3
	.long	combine_max_regno
	.uleb128 0x30
	.string	"reg_last_death"
	.byte	0x1
	.byte	0x98
	.long	0x17b4
	.byte	0x5
	.byte	0x3
	.long	reg_last_death
	.uleb128 0x30
	.string	"reg_last_set"
	.byte	0x1
	.byte	0x9c
	.long	0x17b4
	.byte	0x5
	.byte	0x3
	.long	reg_last_set
	.uleb128 0x30
	.string	"mem_last_set"
	.byte	0x1
	.byte	0xa1
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	mem_last_set
	.uleb128 0x30
	.string	"last_call_cuid"
	.byte	0x1
	.byte	0xa6
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	last_call_cuid
	.uleb128 0x30
	.string	"subst_insn"
	.byte	0x1
	.byte	0xae
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	subst_insn
	.uleb128 0x30
	.string	"subst_prev_insn"
	.byte	0x1
	.byte	0xb3
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	subst_prev_insn
	.uleb128 0x30
	.string	"subst_low_cuid"
	.byte	0x1
	.byte	0xbc
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	subst_low_cuid
	.uleb128 0x30
	.string	"newpat_used_regs"
	.byte	0x1
	.byte	0xc1
	.long	0x1d6e
	.byte	0x5
	.byte	0x3
	.long	newpat_used_regs
	.uleb128 0x30
	.string	"added_links_insn"
	.byte	0x1
	.byte	0xc7
	.long	0x9c
	.byte	0x5
	.byte	0x3
	.long	added_links_insn
	.uleb128 0x30
	.string	"this_basic_block"
	.byte	0x1
	.byte	0xca
	.long	0x220e
	.byte	0x5
	.byte	0x3
	.long	this_basic_block
	.uleb128 0x30
	.string	"refresh_blocks"
	.byte	0x1
	.byte	0xcf
	.long	0x1ea9
	.byte	0x5
	.byte	0x3
	.long	refresh_blocks
	.uleb128 0x30
	.string	"need_refresh"
	.byte	0x1
	.byte	0xd0
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	need_refresh
	.uleb128 0x26
	.string	"reg_last_set_value"
	.byte	0x1
	.value	0x100
	.long	0x17b4
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_value
	.uleb128 0x26
	.string	"reg_last_set_label"
	.byte	0x1
	.value	0x105
	.long	0x87e
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_label
	.uleb128 0x26
	.string	"reg_last_set_table_tick"
	.byte	0x1
	.value	0x10a
	.long	0x87e
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_table_tick
	.uleb128 0x26
	.string	"reg_last_set_invalid"
	.byte	0x1
	.value	0x10f
	.long	0x568
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_invalid
	.uleb128 0x26
	.string	"label_tick"
	.byte	0x1
	.value	0x113
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	label_tick
	.uleb128 0x26
	.string	"reg_nonzero_bits"
	.byte	0x1
	.value	0x11f
	.long	0x1ebe
	.byte	0x5
	.byte	0x3
	.long	reg_nonzero_bits
	.uleb128 0x26
	.string	"nonzero_bits_mode"
	.byte	0x1
	.value	0x124
	.long	0x884
	.byte	0x5
	.byte	0x3
	.long	nonzero_bits_mode
	.uleb128 0x26
	.string	"reg_sign_bit_copies"
	.byte	0x1
	.value	0x129
	.long	0x7f5
	.byte	0x5
	.byte	0x3
	.long	reg_sign_bit_copies
	.uleb128 0x26
	.string	"nonzero_sign_valid"
	.byte	0x1
	.value	0x130
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	nonzero_sign_valid
	.uleb128 0x26
	.string	"reg_last_set_mode"
	.byte	0x1
	.value	0x137
	.long	0x78c3
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_mode
	.uleb128 0x3
	.byte	0x4
	.long	0x884
	.uleb128 0x26
	.string	"reg_last_set_nonzero_bits"
	.byte	0x1
	.value	0x138
	.long	0x1ebe
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_nonzero_bits
	.uleb128 0x26
	.string	"reg_last_set_sign_bit_copies"
	.byte	0x1
	.value	0x139
	.long	0x568
	.byte	0x5
	.byte	0x3
	.long	reg_last_set_sign_bit_copies
	.uleb128 0x26
	.string	"undobuf"
	.byte	0x1
	.value	0x154
	.long	0x3088
	.byte	0x5
	.byte	0x3
	.long	undobuf
	.uleb128 0x26
	.string	"n_occurrences"
	.byte	0x1
	.value	0x159
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	n_occurrences
	.uleb128 0x26
	.string	"reg_dead_regno"
	.byte	0x1
	.value	0x2f0f
	.long	0x463
	.byte	0x5
	.byte	0x3
	.long	reg_dead_regno
	.uleb128 0x26
	.string	"reg_dead_endregno"
	.byte	0x1
	.value	0x2f0f
	.long	0x463
	.byte	0x5
	.byte	0x3
	.long	reg_dead_endregno
	.uleb128 0x26
	.string	"reg_dead_flag"
	.byte	0x1
	.value	0x2f10
	.long	0x214
	.byte	0x5
	.byte	0x3
	.long	reg_dead_flag
	.uleb128 0x31
	.string	"target_flags"
	.byte	0xd
	.byte	0x21
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"mips_abi"
	.byte	0xd
	.value	0x3ca
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x79e1
	.long	0x20c
	.uleb128 0x33
	.uleb128 0x11
	.long	0x47a
	.byte	0xaf
	.byte	0x0
	.uleb128 0x32
	.string	"mips_hard_regno_mode_ok"
	.byte	0xd
	.value	0x778
	.long	0x79d0
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x7a0e
	.long	0x21b
	.uleb128 0x33
	.byte	0x0
	.uleb128 0x32
	.string	"mips_regno_to_class"
	.byte	0xd
	.value	0x85d
	.long	0x7a2c
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7a03
	.uleb128 0x10
	.long	0x7a41
	.long	0xacd
	.uleb128 0x11
	.long	0x47a
	.byte	0x35
	.byte	0x0
	.uleb128 0x34
	.long	.LASF4
	.byte	0x4
	.byte	0x34
	.long	0x7a4e
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7a31
	.uleb128 0x10
	.long	0x7a63
	.long	0x4a7
	.uleb128 0x11
	.long	0x47a
	.byte	0x35
	.byte	0x0
	.uleb128 0x31
	.string	"mode_size"
	.byte	0x4
	.byte	0x59
	.long	0x7a76
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7a53
	.uleb128 0x31
	.string	"mode_unit_size"
	.byte	0x4
	.byte	0x5e
	.long	0x7a93
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7a53
	.uleb128 0x10
	.long	0x7aa8
	.long	0x4b8
	.uleb128 0x11
	.long	0x47a
	.byte	0x35
	.byte	0x0
	.uleb128 0x31
	.string	"mode_bitsize"
	.byte	0x4
	.byte	0x69
	.long	0x7abe
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7a98
	.uleb128 0x10
	.long	0x7ad3
	.long	0x510
	.uleb128 0x11
	.long	0x47a
	.byte	0x35
	.byte	0x0
	.uleb128 0x31
	.string	"mode_mask_array"
	.byte	0x4
	.byte	0x73
	.long	0x7aec
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7ac3
	.uleb128 0x31
	.string	"mode_wider_mode"
	.byte	0x4
	.byte	0x84
	.long	0x7b0a
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7a53
	.uleb128 0x10
	.long	0x7b1f
	.long	0x884
	.uleb128 0x11
	.long	0x47a
	.byte	0x8
	.byte	0x0
	.uleb128 0x31
	.string	"class_narrowest_mode"
	.byte	0x4
	.byte	0xa6
	.long	0x7b3d
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7b0f
	.uleb128 0x31
	.string	"byte_mode"
	.byte	0x4
	.byte	0xac
	.long	0x884
	.byte	0x1
	.byte	0x1
	.uleb128 0x31
	.string	"word_mode"
	.byte	0x4
	.byte	0xad
	.long	0x884
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x7b78
	.long	0x4a7
	.uleb128 0x11
	.long	0x47a
	.byte	0xa2
	.byte	0x0
	.uleb128 0x31
	.string	"rtx_length"
	.byte	0x3
	.byte	0x3c
	.long	0x7b8c
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7b68
	.uleb128 0x10
	.long	0x7ba1
	.long	0x201
	.uleb128 0x11
	.long	0x47a
	.byte	0xa2
	.byte	0x0
	.uleb128 0x31
	.string	"rtx_format"
	.byte	0x3
	.byte	0x42
	.long	0x7bb5
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7b91
	.uleb128 0x10
	.long	0x7bca
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0xa2
	.byte	0x0
	.uleb128 0x31
	.string	"rtx_class"
	.byte	0x3
	.byte	0x45
	.long	0x7bdd
	.byte	0x1
	.byte	0x1
	.uleb128 0x9
	.long	0x7bba
	.uleb128 0x10
	.long	0x7bf2
	.long	0x9c
	.uleb128 0x11
	.long	0x47a
	.byte	0x80
	.byte	0x0
	.uleb128 0x32
	.string	"const_int_rtx"
	.byte	0x3
	.value	0x6a4
	.long	0x7be2
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"const_true_rtx"
	.byte	0x3
	.value	0x6aa
	.long	0x9c
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x7c33
	.long	0x9c
	.uleb128 0x11
	.long	0x47a
	.byte	0xa
	.byte	0x0
	.uleb128 0x32
	.string	"global_rtl"
	.byte	0x3
	.value	0x6e5
	.long	0x7c23
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"flag_expensive_optimizations"
	.byte	0xe
	.value	0x143
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"flag_unsafe_math_optimizations"
	.byte	0xe
	.value	0x173
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"flag_finite_math_only"
	.byte	0xe
	.value	0x177
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"flag_pic"
	.byte	0xe
	.value	0x1df
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"flag_non_call_exceptions"
	.byte	0xe
	.value	0x2ae
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x7cfe
	.long	0x20c
	.uleb128 0x11
	.long	0x47a
	.byte	0xaf
	.byte	0x0
	.uleb128 0x32
	.string	"fixed_regs"
	.byte	0x8
	.value	0x18b
	.long	0x7cee
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"global_regs"
	.byte	0x8
	.value	0x1b4
	.long	0x7cee
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"regs_invalidated_by_call"
	.byte	0x8
	.value	0x1bd
	.long	0x1d6e
	.byte	0x1
	.byte	0x1
	.uleb128 0x31
	.string	"last_basic_block"
	.byte	0x6
	.byte	0xf6
	.long	0x214
	.byte	0x1
	.byte	0x1
	.uleb128 0x31
	.string	"basic_block_info"
	.byte	0x6
	.byte	0xfe
	.long	0x1d3c
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x7d90
	.long	0x15f6
	.uleb128 0x11
	.long	0x47a
	.byte	0x1
	.byte	0x0
	.uleb128 0x32
	.string	"entry_exit_blocks"
	.byte	0x6
	.value	0x139
	.long	0x7d80
	.byte	0x1
	.byte	0x1
	.uleb128 0x31
	.string	"reg_n_info"
	.byte	0x10
	.byte	0x43
	.long	0x1d3c
	.byte	0x1
	.byte	0x1
	.uleb128 0x31
	.string	"subregs_of_mode"
	.byte	0x10
	.byte	0x45
	.long	0x1e2e
	.byte	0x1
	.byte	0x1
	.uleb128 0x10
	.long	0x7de9
	.long	0x884
	.uleb128 0x11
	.long	0x47a
	.byte	0xaf
	.byte	0x0
	.uleb128 0x31
	.string	"reg_raw_mode"
	.byte	0x10
	.byte	0xaa
	.long	0x7dd9
	.byte	0x1
	.byte	0x1
	.uleb128 0x32
	.string	"cfun"
	.byte	0x11
	.value	0x202
	.long	0x2f7c
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.section	.debug_abbrev
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x10
	.uleb128 0x6
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x25
	.uleb128 0x8
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1b
	.uleb128 0x8
	.byte	0x0
	.byte	0x0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0x0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x8
	.uleb128 0x17
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x9
	.uleb128 0x26
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xa
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0xb
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0xc
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0x0
	.byte	0x0
	.uleb128 0xd
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0xe
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0xf
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x11
	.uleb128 0x21
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x12
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.uleb128 0xf
	.byte	0x0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x15
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x16
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x17
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x18
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x19
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x1a
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x1b
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x1d
	.uleb128 0x13
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x1f
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x20
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x21
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x22
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x23
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x25
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x26
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x27
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0xc
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x28
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x29
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x2a
	.uleb128 0xa
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x2e
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x33
	.uleb128 0x21
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.section	.debug_pubnames,"",@progbits
	.long	0x7f
	.value	0x2
	.long	.Ldebug_info0
	.long	0x7e0f
	.long	0x31a3
	.string	"combine_instructions"
	.long	0x5cde
	.string	"extended_count"
	.long	0x6db5
	.string	"remove_death"
	.long	0x73e7
	.string	"dump_combine_stats"
	.long	0x7427
	.string	"dump_combine_total_stats"
	.long	0x0
	.section	.debug_aranges,"",@progbits
	.long	0x1c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x4
	.byte	0x0
	.value	0x0
	.value	0x0
	.long	.Ltext0
	.long	.Letext0-.Ltext0
	.long	0x0
	.long	0x0
	.section	.debug_str,"",@progbits
.LASF34:
	.string	"inner_op0"
.LASF10:
	.string	"next"
.LASF28:
	.string	"mask"
.LASF45:
	.string	"endregno"
.LASF37:
	.string	"op_mode"
.LASF35:
	.string	"inner_op1"
.LASF13:
	.string	"unsignedp"
.LASF1:
	.string	"mode"
.LASF9:
	.string	"basic_block"
.LASF33:
	.string	"false_rtx"
.LASF17:
	.string	"other_insn"
.LASF21:
	.string	"new_direct_jump_p"
.LASF6:
	.string	"offset"
.LASF27:
	.string	"scan_tp_"
.LASF22:
	.string	"link"
.LASF32:
	.string	"true_rtx"
.LASF5:
	.string	"mem_attrs"
.LASF7:
	.string	"first"
.LASF0:
	.string	"code"
.LASF31:
	.string	"reversed"
.LASF24:
	.string	"inner_dest"
.LASF38:
	.string	"new_code"
.LASF44:
	.string	"result"
.LASF30:
	.string	"op0_mode"
.LASF40:
	.string	"nonzero"
.LASF26:
	.string	"temp"
.LASF8:
	.string	"count"
.LASF19:
	.string	"insn"
.LASF36:
	.string	"inner_mode"
.LASF41:
	.string	"known_x"
.LASF14:
	.string	"sequence_stack"
.LASF18:
	.string	"__FUNCTION__"
.LASF12:
	.string	"inner"
.LASF39:
	.string	"mode_width"
.LASF46:
	.string	"from_cuid"
.LASF3:
	.string	"_IO_FILE"
.LASF20:
	.string	"links"
.LASF42:
	.string	"known_mode"
.LASF11:
	.string	"dest"
.LASF43:
	.string	"known_ret"
.LASF4:
	.string	"mode_class"
.LASF25:
	.string	"insn_code_number"
.LASF16:
	.string	"function_frequency"
.LASF15:
	.string	"sequence_rtl_expr"
.LASF29:
	.string	"in_dest"
.LASF2:
	.string	"unsigned int"
.LASF23:
	.string	"regno"
	.ident	"GCC: (GNU) 4.1.2 (Ubuntu 4.1.2-0ubuntu4)"
	.section	.text.__i686.get_pc_thunk.cx,"axG",@progbits,__i686.get_pc_thunk.cx,comdat
.globl __i686.get_pc_thunk.cx
	.hidden	__i686.get_pc_thunk.cx
	.type	__i686.get_pc_thunk.cx, @function
__i686.get_pc_thunk.cx:
	movl	(%esp), %ecx
	ret
	.section	.text.__i686.get_pc_thunk.bx,"axG",@progbits,__i686.get_pc_thunk.bx,comdat
.globl __i686.get_pc_thunk.bx
	.hidden	__i686.get_pc_thunk.bx
	.type	__i686.get_pc_thunk.bx, @function
__i686.get_pc_thunk.bx:
	movl	(%esp), %ebx
	ret
	.section	.note.GNU-stack,"",@progbits
