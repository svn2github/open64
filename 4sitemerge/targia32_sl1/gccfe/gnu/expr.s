	.file	"expr.c"
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.text
.Ltext0:
	.local	placeholder_list
	.comm	placeholder_list,4,4
.globl init_expr_once
	.type	init_expr_once, @function
init_expr_once:
.LFB15:
	.file 1 "../../../kgccfe/gnu/expr.c"
	.loc 1 262 0
	pushl	%ebp
.LCFI0:
	movl	%esp, %ebp
.LCFI1:
	pushl	%ebx
.LCFI2:
	subl	$68, %esp
.LCFI3:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 272 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -28(%ebp)
	.loc 1 273 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	12(%eax), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -24(%ebp)
	.loc 1 277 0
	movl	$-1, 4(%esp)
	movl	$0, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, -20(%ebp)
	.loc 1 279 0
	movl	$42, (%esp)
	call	rtx_alloc@PLT
	movl	%eax, -40(%ebp)
	.loc 1 280 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	$57, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -36(%ebp)
	.loc 1 281 0
	movl	-40(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 44(%edx)
	.loc 1 283 0
	movl	$0, -32(%ebp)
	jmp	.L2
.L3:
.LBB2:
	.loc 1 288 0
	movl	-32(%ebp), %edx
	movl	-32(%ebp), %eax
	movb	$0, direct_store@GOTOFF(%ebx,%eax)
	movzbl	direct_store@GOTOFF(%ebx,%eax), %eax
	movb	%al, direct_load@GOTOFF(%ebx,%edx)
	.loc 1 289 0
	movl	-32(%ebp), %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movb	%dl, 2(%eax)
	.loc 1 290 0
	movl	-32(%ebp), %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movb	%dl, 2(%eax)
	.loc 1 291 0
	movl	-32(%ebp), %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movb	%dl, 2(%eax)
	.loc 1 296 0
	cmpl	$0, -32(%ebp)
	je	.L4
	cmpl	$52, -32(%ebp)
	je	.L4
	.loc 1 297 0
	movl	$0, -16(%ebp)
	jmp	.L7
.L8:
	.loc 1 301 0
	movl	-32(%ebp), %eax
	movl	-16(%ebp), %ecx
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L9
	.loc 1 304 0
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%edx, 4(%eax)
	.loc 1 306 0
	movl	-36(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 307 0
	movl	-36(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 308 0
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	recog@PLT
	testl	%eax, %eax
	js	.L11
	.loc 1 309 0
	movl	-32(%ebp), %eax
	movb	$1, direct_load@GOTOFF(%ebx,%eax)
.L11:
	.loc 1 311 0
	movl	-36(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 312 0
	movl	-36(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 313 0
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	recog@PLT
	testl	%eax, %eax
	js	.L13
	.loc 1 314 0
	movl	-32(%ebp), %eax
	movb	$1, direct_load@GOTOFF(%ebx,%eax)
.L13:
	.loc 1 316 0
	movl	-36(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 317 0
	movl	-36(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 318 0
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	recog@PLT
	testl	%eax, %eax
	js	.L15
	.loc 1 319 0
	movl	-32(%ebp), %eax
	movb	$1, direct_store@GOTOFF(%ebx,%eax)
.L15:
	.loc 1 321 0
	movl	-36(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	.loc 1 322 0
	movl	-36(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 323 0
	leal	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	recog@PLT
	testl	%eax, %eax
	js	.L9
	.loc 1 324 0
	movl	-32(%ebp), %eax
	movb	$1, direct_store@GOTOFF(%ebx,%eax)
.L9:
	.loc 1 299 0
	addl	$1, -16(%ebp)
.L7:
	.loc 1 297 0
	cmpl	$175, -16(%ebp)
	jg	.L4
	movl	-32(%ebp), %eax
	movzbl	direct_load@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	je	.L8
	movl	-32(%ebp), %eax
	movzbl	direct_store@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	je	.L8
.L4:
.LBE2:
	.loc 1 284 0
	movl	-32(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -32(%ebp)
.L2:
	.loc 1 283 0
	movl	-32(%ebp), %eax
	cmpl	$53, %eax
	jle	.L3
	.loc 1 328 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L21
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L21
	movl	$5, -56(%ebp)
	jmp	.L24
.L21:
	movl	$4, -56(%ebp)
.L24:
	movl	$10000, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$71, (%esp)
	call	gen_rtx_fmt_i0@PLT
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -28(%ebp)
	.loc 1 330 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L25
.L26:
.LBB3:
	.loc 1 334 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, -12(%ebp)
	jmp	.L27
.L28:
.LBB4:
	.loc 1 339 0
	movl	$0, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	movl	%eax, -8(%ebp)
	.loc 1 340 0
	cmpl	$529, -8(%ebp)
	je	.L29
	.loc 1 343 0
	movl	-12(%ebp), %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movb	%dl, 2(%eax)
	.loc 1 345 0
	movl	-8(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L29
	.loc 1 346 0
	movl	-32(%ebp), %eax
	movl	-12(%ebp), %ecx
	leal	float_extend_from_mem@GOTOFF(%ebx), %edx
	imull	$54, %eax, %eax
	addl	%edx, %eax
	movb	$1, (%eax,%ecx)
.L29:
.LBE4:
	.loc 1 335 0
	movl	-12(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
.L27:
	.loc 1 334 0
	movl	-12(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jne	.L28
.LBE3:
	.loc 1 331 0
	movl	-32(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
.L25:
	.loc 1 330 0
	cmpl	$0, -32(%ebp)
	jne	.L26
	.loc 1 349 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE15:
	.size	init_expr_once, .-init_expr_once
.globl init_expr
	.type	init_expr, @function
init_expr:
.LFB16:
	.loc 1 355 0
	pushl	%ebp
.LCFI4:
	movl	%esp, %ebp
.LCFI5:
	pushl	%esi
.LCFI6:
	pushl	%ebx
.LCFI7:
	subl	$16, %esp
.LCFI8:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 356 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	$28, (%esp)
	call	ggc_alloc@PLT
	movl	%eax, 8(%esi)
	.loc 1 358 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, 24(%eax)
	.loc 1 359 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, (%eax)
	.loc 1 360 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, 8(%eax)
	.loc 1 361 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, 4(%eax)
	.loc 1 362 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, 12(%eax)
	.loc 1 363 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, 16(%eax)
	.loc 1 364 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, 20(%eax)
	.loc 1 365 0
	addl	$16, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE16:
	.size	init_expr, .-init_expr
	.section	.rodata
	.type	__FUNCTION__.15038, @object
	.size	__FUNCTION__.15038, 25
__FUNCTION__.15038:
	.string	"finish_expr_for_function"
.LC0:
	.string	"../../../kgccfe/gnu/expr.c"
	.text
.globl finish_expr_for_function
	.type	finish_expr_for_function, @function
finish_expr_for_function:
.LFB17:
	.loc 1 371 0
	pushl	%ebp
.LCFI9:
	movl	%esp, %ebp
.LCFI10:
	pushl	%ebx
.LCFI11:
	subl	$20, %esp
.LCFI12:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 372 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	je	.L40
	.loc 1 373 0
	leal	__FUNCTION__.15038@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$373, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L40:
	.loc 1 374 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE17:
	.size	finish_expr_for_function, .-finish_expr_for_function
	.type	enqueue_insn, @function
enqueue_insn:
.LFB18:
	.loc 1 389 0
	pushl	%ebp
.LCFI13:
	movl	%esp, %ebp
.LCFI14:
	pushl	%esi
.LCFI15:
	pushl	%ebx
.LCFI16:
	subl	$32, %esp
.LCFI17:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 390 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %esi
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	24(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$81, (%esp)
	call	gen_rtx_fmt_eeeee@PLT
	movl	%eax, 24(%esi)
	.loc 1 392 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	24(%eax), %eax
	.loc 1 393 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE18:
	.size	enqueue_insn, .-enqueue_insn
.globl protect_from_queue
	.type	protect_from_queue, @function
protect_from_queue:
.LFB19:
	.loc 1 414 0
	pushl	%ebp
.LCFI18:
	movl	%esp, %ebp
.LCFI19:
	pushl	%esi
.LCFI20:
	pushl	%ebx
.LCFI21:
	subl	$48, %esp
.LCFI22:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 415 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -36(%ebp)
	.loc 1 423 0
	cmpl	$81, -36(%ebp)
	je	.L44
	.loc 1 430 0
	cmpl	$76, -36(%ebp)
	jne	.L46
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L46
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$81, %ax
	jne	.L46
	cmpl	$0, 12(%ebp)
	jne	.L46
.LBB5:
	.loc 1 433 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 434 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address_nv@PLT
	movl	%eax, -28(%ebp)
	.loc 1 436 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L51
.LBB6:
	.loc 1 438 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -24(%ebp)
	.loc 1 440 0
	movl	-32(%ebp), %eax
	movl	12(%eax), %esi
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_insn_before@PLT
	.loc 1 442 0
	movl	-24(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L53
.L51:
.LBE6:
	.loc 1 447 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -44(%ebp)
	jmp	.L53
.L46:
.LBE5:
	.loc 1 452 0
	cmpl	$76, -36(%ebp)
	jne	.L54
.LBB7:
	.loc 1 454 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, -20(%ebp)
	.loc 1 455 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-20(%ebp), %eax
	je	.L58
	.loc 1 457 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, 8(%ebp)
	.loc 1 458 0
	movl	8(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%edx)
	jmp	.L58
.L54:
.LBE7:
	.loc 1 461 0
	cmpl	$85, -36(%ebp)
	je	.L59
	cmpl	$88, -36(%ebp)
	jne	.L58
.L59:
.LBB8:
	.loc 1 463 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, -16(%ebp)
	.loc 1 464 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, -12(%ebp)
	.loc 1 465 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	-16(%ebp), %eax
	jne	.L61
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	-12(%ebp), %eax
	je	.L58
.L61:
	.loc 1 467 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, 8(%ebp)
	.loc 1 468 0
	movl	8(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 469 0
	movl	8(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 12(%edx)
.L58:
.LBE8:
	.loc 1 472 0
	movl	8(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L53
.L44:
	.loc 1 477 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L63
	.loc 1 478 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -44(%ebp)
	jmp	.L53
.L63:
	.loc 1 481 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	je	.L65
	.loc 1 482 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L53
.L65:
	.loc 1 485 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 486 0
	movl	8(%ebp), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_insn_before@PLT
	.loc 1 488 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -44(%ebp)
.L53:
	movl	-44(%ebp), %eax
	.loc 1 489 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE19:
	.size	protect_from_queue, .-protect_from_queue
.globl queued_subexp_p
	.type	queued_subexp_p, @function
queued_subexp_p:
.LFB20:
	.loc 1 499 0
	pushl	%ebp
.LCFI23:
	movl	%esp, %ebp
.LCFI24:
	pushl	%ebx
.LCFI25:
	subl	$32, %esp
.LCFI26:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 500 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -8(%ebp)
	.loc 1 501 0
	movl	-8(%ebp), %eax
	subl	$76, %eax
	movl	%eax, -32(%ebp)
	cmpl	$12, -32(%ebp)
	ja	.L69
	movl	-32(%ebp), %eax
	sall	$2, %eax
	movl	.L73@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L73:
	.long	.L70@GOTOFF
	.long	.L69@GOTOFF
	.long	.L69@GOTOFF
	.long	.L69@GOTOFF
	.long	.L69@GOTOFF
	.long	.L71@GOTOFF
	.long	.L69@GOTOFF
	.long	.L69@GOTOFF
	.long	.L69@GOTOFF
	.long	.L72@GOTOFF
	.long	.L72@GOTOFF
	.long	.L69@GOTOFF
	.long	.L72@GOTOFF
	.text
.L71:
	.loc 1 504 0
	movl	$1, -28(%ebp)
	jmp	.L74
.L70:
	.loc 1 506 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	queued_subexp_p@PLT
	movl	%eax, -28(%ebp)
	jmp	.L74
.L72:
	.loc 1 510 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	queued_subexp_p@PLT
	testl	%eax, %eax
	jne	.L75
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	queued_subexp_p@PLT
	testl	%eax, %eax
	je	.L77
.L75:
	movl	$1, -24(%ebp)
	jmp	.L78
.L77:
	movl	$0, -24(%ebp)
.L78:
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L74
.L69:
	.loc 1 513 0
	movl	$0, -28(%ebp)
.L74:
	movl	-28(%ebp), %eax
	.loc 1 515 0
	addl	$32, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE20:
	.size	queued_subexp_p, .-queued_subexp_p
.globl emit_queue
	.type	emit_queue, @function
emit_queue:
.LFB21:
	.loc 1 521 0
	pushl	%ebp
.LCFI27:
	movl	%esp, %ebp
.LCFI28:
	pushl	%ebx
.LCFI29:
	subl	$20, %esp
.LCFI30:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
.LBB9:
	.loc 1 523 0
	jmp	.L81
.L82:
	.loc 1 525 0
	movl	-12(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 527 0
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	subl	$42, %eax
	cmpl	$5, %eax
	ja	.L83
	.loc 1 535 0
	movl	-12(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, 12(%eax)
	.loc 1 536 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 537 0
	jmp	.L85
.L83:
	.loc 1 546 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
.L85:
	.loc 1 550 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movl	36(%eax), %eax
	movl	%eax, 24(%edx)
.L81:
.LBE9:
	.loc 1 523 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, -12(%ebp)
	cmpl	$0, -12(%ebp)
	jne	.L82
	.loc 1 552 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE21:
	.size	emit_queue, .-emit_queue
	.section	.rodata
	.type	__FUNCTION__.15197, @object
	.size	__FUNCTION__.15197, 13
__FUNCTION__.15197:
	.string	"convert_move"
	.text
.globl convert_move
	.type	convert_move, @function
convert_move:
.LFB22:
	.loc 1 563 0
	pushl	%ebp
.LCFI31:
	movl	%esp, %ebp
.LCFI32:
	pushl	%esi
.LCFI33:
	pushl	%ebx
.LCFI34:
	subl	$224, %esp
.LCFI35:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 564 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -96(%ebp)
	.loc 1 565 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -92(%ebp)
	.loc 1 566 0
	movl	-96(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -88(%ebp)
	.loc 1 567 0
	movl	-92(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -84(%ebp)
	.loc 1 573 0
	cmpl	$0, 16(%ebp)
	js	.L89
	cmpl	$0, 16(%ebp)
	je	.L91
	movl	$131, -180(%ebp)
	jmp	.L93
.L91:
	movl	$130, -180(%ebp)
.L93:
	movl	-180(%ebp), %eax
	movl	%eax, -184(%ebp)
	jmp	.L94
.L89:
	movl	$0, -184(%ebp)
.L94:
	movl	-184(%ebp), %edx
	movl	%edx, -72(%ebp)
	.loc 1 575 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 8(%ebp)
	.loc 1 576 0
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 12(%ebp)
	.loc 1 578 0
	movl	-88(%ebp), %eax
	cmpl	-84(%ebp), %eax
	je	.L95
	.loc 1 579 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$579, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L95:
	.loc 1 585 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L97
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L97
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-96(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jb	.L97
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L101
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -176(%ebp)
	jmp	.L103
.L101:
	movl	$-1, -176(%ebp)
.L103:
	movl	-176(%ebp), %ecx
	cmpl	16(%ebp), %ecx
	jne	.L97
	.loc 1 589 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, 12(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -92(%ebp)
.L97:
	.loc 1 591 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L105
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L105
	.loc 1 592 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$592, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L105:
	.loc 1 594 0
	movl	-96(%ebp), %eax
	cmpl	-92(%ebp), %eax
	je	.L108
	cmpl	$0, -92(%ebp)
	jne	.L110
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L108
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L110
.L108:
	.loc 1 597 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 598 0
	jmp	.L325
.L110:
	.loc 1 601 0
	movl	-96(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$7, %eax
	je	.L120
	movl	-96(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	je	.L120
	movl	-92(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$7, %eax
	je	.L120
	movl	-92(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L124
.L120:
	.loc 1 603 0
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	je	.L125
	.loc 1 604 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$604, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L125:
	.loc 1 606 0
	movl	-96(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$7, %eax
	je	.L127
	movl	-96(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L129
.L127:
	.loc 1 607 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, 12(%ebp)
	.loc 1 606 0
	jmp	.L130
.L129:
	.loc 1 609 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, 8(%ebp)
.L130:
	.loc 1 611 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 612 0
	jmp	.L325
.L124:
	.loc 1 615 0
	movl	-88(%ebp), %eax
	cmpl	-84(%ebp), %eax
	je	.L131
	.loc 1 616 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$616, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L131:
	.loc 1 618 0
	cmpl	$0, -88(%ebp)
	je	.L133
.LBB10:
	.loc 1 622 0
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jae	.L135
	.loc 1 625 0
	movl	$0, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	movl	%eax, -80(%ebp)
	cmpl	$529, -80(%ebp)
	je	.L135
	.loc 1 628 0
	movl	-80(%ebp), %eax
	movl	$0, 12(%esp)
	movl	12(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	8(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 629 0
	jmp	.L325
.L135:
	.loc 1 742 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L138
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$131072, %eax
	testl	%eax, %eax
	jne	.L138
	cmpl	$16, -92(%ebp)
	jne	.L138
	cmpl	$15, -96(%ebp)
	jne	.L138
	.loc 1 744 0
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$115, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 745 0
	jmp	.L325
.L138:
	.loc 1 777 0
	movl	$0, -76(%ebp)
	.loc 1 778 0
	movl	-92(%ebp), %eax
	movl	%eax, -188(%ebp)
	cmpl	$16, -188(%ebp)
	je	.L145
	cmpl	$16, -188(%ebp)
	ja	.L148
	cmpl	$15, -188(%ebp)
	je	.L144
	jmp	.L143
.L148:
	cmpl	$17, -188(%ebp)
	je	.L146
	cmpl	$18, -188(%ebp)
	je	.L147
	jmp	.L143
.L144:
	.loc 1 781 0
	movl	-96(%ebp), %edx
	movl	%edx, -192(%ebp)
	cmpl	$17, -192(%ebp)
	je	.L151
	cmpl	$18, -192(%ebp)
	je	.L152
	cmpl	$16, -192(%ebp)
	je	.L150
	jmp	.L143
.L150:
	.loc 1 784 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 785 0
	jmp	.L143
.L151:
	.loc 1 788 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 789 0
	jmp	.L143
.L152:
	.loc 1 792 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 798 0
	jmp	.L143
.L145:
	.loc 1 801 0
	movl	-96(%ebp), %ecx
	movl	%ecx, -196(%ebp)
	cmpl	$17, -196(%ebp)
	je	.L155
	cmpl	$18, -196(%ebp)
	je	.L156
	cmpl	$15, -196(%ebp)
	je	.L154
	jmp	.L143
.L154:
	.loc 1 804 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	20(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 805 0
	jmp	.L143
.L155:
	.loc 1 808 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	12(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 809 0
	jmp	.L143
.L156:
	.loc 1 812 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	16(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 818 0
	jmp	.L143
.L146:
	.loc 1 821 0
	movl	-96(%ebp), %eax
	movl	%eax, -200(%ebp)
	cmpl	$15, -200(%ebp)
	je	.L158
	cmpl	$16, -200(%ebp)
	je	.L159
	jmp	.L143
.L158:
	.loc 1 824 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	24(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 825 0
	jmp	.L143
.L159:
	.loc 1 828 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	32(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 834 0
	jmp	.L143
.L147:
	.loc 1 837 0
	movl	-96(%ebp), %edx
	movl	%edx, -204(%ebp)
	cmpl	$15, -204(%ebp)
	je	.L160
	cmpl	$16, -204(%ebp)
	je	.L161
	jmp	.L143
.L160:
	.loc 1 840 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	28(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 841 0
	jmp	.L143
.L161:
	.loc 1 844 0
	movl	libfunc_table@GOT(%ebx), %eax
	movl	36(%eax), %eax
	movl	%eax, -76(%ebp)
.L143:
	.loc 1 856 0
	cmpl	$0, -76(%ebp)
	jne	.L162
	.loc 1 858 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$858, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L162:
	.loc 1 860 0
	call	start_sequence@PLT
	.loc 1 861 0
	movl	-92(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$1, 16(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_library_call_value@PLT
	movl	%eax, -68(%ebp)
	.loc 1 863 0
	call	get_insns@PLT
	movl	%eax, -64(%ebp)
	.loc 1 864 0
	call	end_sequence@PLT
	.loc 1 865 0
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$134, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_libcall_block@PLT
	.loc 1 867 0
	jmp	.L325
.L133:
.LBE10:
	.loc 1 873 0
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jae	.L164
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -172(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L166
	movl	$64, -168(%ebp)
	jmp	.L168
.L166:
	movl	$32, -168(%ebp)
.L168:
	movl	-168(%ebp), %ecx
	cmpl	%ecx, -172(%ebp)
	jle	.L164
.LBB11:
	.loc 1 882 0
	movl	-96(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -164(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L170
	movl	$8, -160(%ebp)
	jmp	.L172
.L170:
	movl	$4, -160(%ebp)
.L172:
	movl	-164(%ebp), %eax
	addl	-160(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -156(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L173
	movl	$8, -152(%ebp)
	jmp	.L175
.L173:
	movl	$4, -152(%ebp)
.L175:
	movl	-156(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-152(%ebp)
	movl	%eax, -36(%ebp)
	.loc 1 885 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	movl	%eax, -80(%ebp)
	cmpl	$529, -80(%ebp)
	je	.L176
	.loc 1 892 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jle	.L178
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L178
	.loc 1 893 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, 12(%ebp)
.L178:
	.loc 1 894 0
	movl	-80(%ebp), %edx
	movl	-72(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 895 0
	jmp	.L325
.L176:
	.loc 1 898 0
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -148(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L181
	movl	$64, -144(%ebp)
	jmp	.L183
.L181:
	movl	$32, -144(%ebp)
.L183:
	movl	-144(%ebp), %eax
	cmpl	%eax, -148(%ebp)
	jge	.L184
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	movl	%eax, -80(%ebp)
	cmpl	$529, -80(%ebp)
	je	.L184
	.loc 1 902 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L187
	.loc 1 903 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L187:
	.loc 1 904 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_move@PLT
	.loc 1 905 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, %edx
	movl	-80(%ebp), %ecx
	movl	-72(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 907 0
	jmp	.L325
.L184:
	.loc 1 911 0
	call	start_sequence@PLT
	.loc 1 916 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_overlap_mentioned_p@PLT
	testl	%eax, %eax
	je	.L189
	.loc 1 917 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, 12(%ebp)
.L189:
	.loc 1 920 0
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -140(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L191
	movl	$64, -136(%ebp)
	jmp	.L193
.L191:
	movl	$32, -136(%ebp)
.L193:
	movl	-136(%ebp), %edx
	cmpl	%edx, -140(%ebp)
	jge	.L194
	.loc 1 921 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L196
.L194:
	.loc 1 923 0
	movl	-92(%ebp), %eax
	movl	%eax, -40(%ebp)
.L196:
	.loc 1 925 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -48(%ebp)
	.loc 1 927 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, -56(%ebp)
	.loc 1 928 0
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 931 0
	cmpl	$0, 16(%ebp)
	je	.L197
	.loc 1 932 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L199
.L197:
	.loc 1 948 0
	movl	-40(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	subl	$1, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	size_int_wide@PLT
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -52(%ebp)
	.loc 1 952 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	$1, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -52(%ebp)
.L199:
	.loc 1 957 0
	movl	-40(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -132(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L200
	movl	$8, -128(%ebp)
	jmp	.L202
.L200:
	movl	$4, -128(%ebp)
.L202:
	movl	-132(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-128(%ebp)
	movl	%eax, -44(%ebp)
	jmp	.L203
.L204:
.LBB12:
	.loc 1 959 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L205
	movl	-44(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	subl	$1, %eax
	movl	%eax, -124(%ebp)
	jmp	.L207
.L205:
	movl	-44(%ebp), %eax
	movl	%eax, -124(%ebp)
.L207:
	movl	-124(%ebp), %edx
	movl	%edx, -32(%ebp)
	.loc 1 960 0
	movl	-32(%ebp), %edx
	movl	-96(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$1, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -28(%ebp)
	.loc 1 962 0
	cmpl	$0, -28(%ebp)
	jne	.L208
	.loc 1 963 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$963, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L208:
	.loc 1 965 0
	movl	-52(%ebp), %eax
	cmpl	-28(%ebp), %eax
	je	.L210
	.loc 1 966 0
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L210:
.LBE12:
	.loc 1 957 0
	addl	$1, -44(%ebp)
.L203:
	movl	-44(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jl	.L204
	.loc 1 969 0
	call	get_insns@PLT
	movl	%eax, -60(%ebp)
	.loc 1 970 0
	call	end_sequence@PLT
	.loc 1 972 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_no_conflict_block@PLT
	.loc 1 974 0
	jmp	.L325
.L164:
.LBE11:
	.loc 1 978 0
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -120(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L213
	movl	$64, -116(%ebp)
	jmp	.L215
.L213:
	movl	$32, -116(%ebp)
.L215:
	movl	-116(%ebp), %ecx
	cmpl	%ecx, -120(%ebp)
	jle	.L216
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -112(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L218
	movl	$64, -108(%ebp)
	jmp	.L220
.L218:
	movl	$32, -108(%ebp)
.L220:
	movl	-108(%ebp), %eax
	cmpl	%eax, -112(%ebp)
	jg	.L216
	.loc 1 981 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L222
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L222
	movl	-96(%ebp), %eax
	movzbl	direct_load@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	je	.L222
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	je	.L226
.L222:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L226
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L226
	.loc 1 987 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, 12(%ebp)
.L226:
	.loc 1 988 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart@PLT
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 989 0
	jmp	.L325
.L216:
	.loc 1 993 0
	cmpl	$8, -96(%ebp)
	jne	.L229
	.loc 1 995 0
	cmpl	$2, -92(%ebp)
	je	.L231
	.loc 1 996 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
.L231:
	.loc 1 1005 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1005, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L229:
	.loc 1 1008 0
	cmpl	$8, -92(%ebp)
	jne	.L233
	.loc 1 1010 0
	cmpl	$2, -96(%ebp)
	je	.L235
	.loc 1 1012 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
	.loc 1 1013 0
	movl	$2, -92(%ebp)
	jmp	.L233
.L235:
	.loc 1 1024 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1024, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L233:
	.loc 1 1028 0
	cmpl	$10, -96(%ebp)
	jne	.L237
	.loc 1 1030 0
	cmpl	$4, -92(%ebp)
	je	.L239
	.loc 1 1031 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$4, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
.L239:
	.loc 1 1040 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1040, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L237:
	.loc 1 1043 0
	cmpl	$10, -92(%ebp)
	jne	.L241
	.loc 1 1045 0
	cmpl	$4, -96(%ebp)
	je	.L243
	.loc 1 1047 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$4, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
	.loc 1 1048 0
	movl	$4, -92(%ebp)
	jmp	.L241
.L243:
	.loc 1 1066 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1066, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L241:
	.loc 1 1070 0
	cmpl	$11, -96(%ebp)
	jne	.L245
	.loc 1 1072 0
	cmpl	$5, -92(%ebp)
	je	.L247
	.loc 1 1073 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$5, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
.L247:
	.loc 1 1082 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1082, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L245:
	.loc 1 1085 0
	cmpl	$11, -92(%ebp)
	jne	.L249
	.loc 1 1087 0
	cmpl	$5, -96(%ebp)
	je	.L251
	.loc 1 1089 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$5, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
	.loc 1 1090 0
	movl	$5, -92(%ebp)
	jmp	.L249
.L251:
	.loc 1 1101 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1101, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L249:
	.loc 1 1109 0
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jae	.L253
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L255
	movl	-92(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L255
	movl	-96(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L253
.L255:
	.loc 1 1113 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L258
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L258
	movl	-96(%ebp), %eax
	movzbl	direct_load@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	je	.L258
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	mode_dependent_address_p@PLT
	testl	%eax, %eax
	je	.L262
.L258:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L262
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L262
	.loc 1 1119 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, 12(%ebp)
.L262:
	.loc 1 1120 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L265
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L265
	movl	-96(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	4(%eax), %esi
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %ecx, %eax
	addl	%edx, %eax
	movzbl	(%eax,%esi), %eax
	testb	%al, %al
	jne	.L265
	.loc 1 1122 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, 12(%ebp)
.L265:
	.loc 1 1123 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 1124 0
	jmp	.L325
.L253:
	.loc 1 1128 0
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jbe	.L269
	.loc 1 1131 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	movl	%eax, -80(%ebp)
	cmpl	$529, -80(%ebp)
	je	.L271
	.loc 1 1134 0
	movl	flag_force_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L273
	.loc 1 1135 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	force_not_mem@PLT
	movl	%eax, 12(%ebp)
.L273:
	.loc 1 1137 0
	movl	-80(%ebp), %edx
	movl	-72(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 1138 0
	jmp	.L325
.L271:
.LBB13:
	.loc 1 1147 0
	movl	-92(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L275
.L276:
	.loc 1 1149 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	cmpl	$529, %eax
	jne	.L277
	movl	-96(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-24(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jae	.L279
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L277
	movl	-24(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L277
	movl	-96(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L279
.L277:
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	cmpl	$529, %eax
	je	.L279
	.loc 1 1157 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1159 0
	jmp	.L325
.L279:
	.loc 1 1148 0
	movl	-24(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
.L275:
	.loc 1 1147 0
	cmpl	$0, -24(%ebp)
	jne	.L276
	.loc 1 1164 0
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %ecx
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	build_int_2_wide@PLT
	movl	%eax, -16(%ebp)
	.loc 1 1166 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, 12(%ebp)
	.loc 1 1167 0
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	expand_shift@PLT
	movl	%eax, -20(%ebp)
	.loc 1 1169 0
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -20(%ebp)
	.loc 1 1171 0
	movl	-20(%ebp), %eax
	cmpl	8(%ebp), %eax
	je	.L325
	.loc 1 1172 0
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 1173 0
	jmp	.L325
.L269:
.LBE13:
	.loc 1 1179 0
	cmpl	$5, -92(%ebp)
	jne	.L287
	cmpl	$4, -96(%ebp)
	jne	.L287
	.loc 1 1182 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L290
	.loc 1 1184 0
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$116, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 1185 0
	jmp	.L325
.L290:
	.loc 1 1188 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1189 0
	jmp	.L325
.L287:
	.loc 1 1192 0
	cmpl	$5, -92(%ebp)
	jne	.L292
	cmpl	$3, -96(%ebp)
	jne	.L292
	.loc 1 1195 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L295
	.loc 1 1197 0
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$117, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 1198 0
	jmp	.L325
.L295:
	.loc 1 1201 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1202 0
	jmp	.L325
.L292:
	.loc 1 1205 0
	cmpl	$5, -92(%ebp)
	jne	.L297
	cmpl	$2, -96(%ebp)
	jne	.L297
	.loc 1 1208 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L300
	.loc 1 1210 0
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$118, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 1211 0
	jmp	.L325
.L300:
	.loc 1 1214 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1215 0
	jmp	.L325
.L297:
	.loc 1 1218 0
	cmpl	$4, -92(%ebp)
	jne	.L302
	cmpl	$3, -96(%ebp)
	jne	.L302
	.loc 1 1227 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1228 0
	jmp	.L325
.L302:
	.loc 1 1231 0
	cmpl	$4, -92(%ebp)
	jne	.L305
	cmpl	$2, -96(%ebp)
	jne	.L305
	.loc 1 1240 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1241 0
	jmp	.L325
.L305:
	.loc 1 1244 0
	cmpl	$3, -92(%ebp)
	jne	.L308
	cmpl	$2, -96(%ebp)
	jne	.L308
	.loc 1 1253 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1254 0
	jmp	.L325
.L308:
	.loc 1 1257 0
	cmpl	$6, -92(%ebp)
	jne	.L311
	cmpl	$5, -96(%ebp)
	jne	.L311
	.loc 1 1266 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1267 0
	jmp	.L325
.L311:
	.loc 1 1270 0
	cmpl	$6, -92(%ebp)
	jne	.L314
	cmpl	$4, -96(%ebp)
	jne	.L314
	.loc 1 1279 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1280 0
	jmp	.L325
.L314:
	.loc 1 1283 0
	cmpl	$6, -92(%ebp)
	jne	.L317
	cmpl	$3, -96(%ebp)
	jne	.L317
	.loc 1 1292 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1293 0
	jmp	.L325
.L317:
	.loc 1 1296 0
	cmpl	$6, -92(%ebp)
	jne	.L320
	cmpl	$2, -96(%ebp)
	jne	.L320
	.loc 1 1305 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1306 0
	jmp	.L325
.L320:
	.loc 1 1312 0
	movl	-96(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-92(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jae	.L323
.LBB14:
	.loc 1 1314 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -12(%ebp)
	.loc 1 1315 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 1316 0
	jmp	.L325
.L323:
.LBE14:
	.loc 1 1320 0
	leal	__FUNCTION__.15197@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1320, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L325:
	.loc 1 1321 0
	addl	$224, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE22:
	.size	convert_move, .-convert_move
.globl convert_to_mode
	.type	convert_to_mode, @function
convert_to_mode:
.LFB23:
	.loc 1 1338 0
	pushl	%ebp
.LCFI36:
	movl	%esp, %ebp
.LCFI37:
	pushl	%ebx
.LCFI38:
	subl	$20, %esp
.LCFI39:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1339 0
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	.loc 1 1340 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE23:
	.size	convert_to_mode, .-convert_to_mode
	.section	.rodata
	.type	__FUNCTION__.15771, @object
	.size	__FUNCTION__.15771, 14
__FUNCTION__.15771:
	.string	"convert_modes"
	.text
.globl convert_modes
	.type	convert_modes, @function
convert_modes:
.LFB24:
	.loc 1 1360 0
	pushl	%ebp
.LCFI40:
	movl	%esp, %ebp
.LCFI41:
	pushl	%edi
.LCFI42:
	pushl	%esi
.LCFI43:
	pushl	%ebx
.LCFI44:
	subl	$76, %esp
.LCFI45:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1366 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L329
	movl	16(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L329
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jb	.L329
	movl	16(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L333
	movl	16(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	jmp	.L335
.L333:
	movl	$-1, -56(%ebp)
.L335:
	movl	-56(%ebp), %eax
	cmpl	20(%ebp), %eax
	jne	.L329
	.loc 1 1369 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, 16(%ebp)
.L329:
	.loc 1 1371 0
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L337
	.loc 1 1372 0
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 12(%ebp)
.L337:
	.loc 1 1374 0
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	jne	.L339
	.loc 1 1375 0
	movl	16(%ebp), %eax
	movl	%eax, -52(%ebp)
	jmp	.L341
.L339:
	.loc 1 1383 0
	cmpl	$0, 20(%ebp)
	je	.L342
	movl	8(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L342
	movl	8(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$128, %ax
	jne	.L342
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L342
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	testl	%edx, %edx
	jns	.L342
.LBB15:
	.loc 1 1387 0
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 1389 0
	cmpl	$0, 12(%ebp)
	je	.L348
	movl	12(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$63, %ax
	ja	.L348
.LBB16:
	.loc 1 1392 0
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -24(%ebp)
	.loc 1 1395 0
	movl	-24(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L384
	movl	%eax, %edx
	xorl	%eax, %eax
.L384:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	-48(%ebp), %eax
	andl	%esi, %eax
	movl	-44(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
.L348:
.LBE16:
	.loc 1 1398 0
	movl	8(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	immed_double_const@PLT
	movl	%eax, -52(%ebp)
	jmp	.L341
.L342:
.LBE15:
	.loc 1 1406 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L351
	movl	8(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	jbe	.L353
.L351:
	movl	8(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L354
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L354
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L353
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	ja	.L354
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L359
	movl	16(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L359
	movl	8(%ebp), %eax
	movzbl	direct_load@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	jne	.L353
.L359:
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L354
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L363
	movl	8(%ebp), %ecx
	movl	16(%ebp), %eax
	movl	4(%eax), %esi
	movl	mips_hard_regno_mode_ok@GOT(%ebx), %edx
	imull	$176, %ecx, %eax
	addl	%edx, %eax
	movzbl	(%eax,%esi), %eax
	testb	%al, %al
	je	.L354
.L363:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L353
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$32, %ax
	jbe	.L353
	movl	8(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	jbe	.L354
.L353:
	.loc 1 1423 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L367
	cmpl	$0, 12(%ebp)
	je	.L367
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L367
.LBB17:
	.loc 1 1426 0
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 1427 0
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -20(%ebp)
	.loc 1 1431 0
	movl	-20(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L383
	movl	%eax, %edx
	xorl	%eax, %eax
.L383:
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$-1, %esi
	adcl	$-1, %edi
	movl	-40(%ebp), %eax
	andl	%esi, %eax
	movl	-36(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 1432 0
	cmpl	$0, 20(%ebp)
	jne	.L371
	movl	-20(%ebp), %ecx
	subl	$1, %ecx
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	shrdl	%edx, %eax
	sarl	%cl, %edx
	testb	$32, %cl
	je	.L382
	movl	%edx, %eax
	sarl	$31, %edx
.L382:
	andl	$1, %eax
	testb	%al, %al
	je	.L371
	.loc 1 1434 0
	movl	-20(%ebp), %ecx
	movl	$-1, %eax
	movl	$-1, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	%esi, %edi
	sall	%cl, %esi
	testb	$32, %cl
	je	.L381
	movl	%esi, %edi
	xorl	%esi, %esi
.L381:
	movl	-40(%ebp), %eax
	orl	%esi, %eax
	movl	-36(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
.L371:
	.loc 1 1436 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -52(%ebp)
	jmp	.L341
.L367:
.LBE17:
	.loc 1 1439 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, -52(%ebp)
	jmp	.L341
.L354:
	.loc 1 1444 0
	movl	8(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$7, %eax
	je	.L374
	movl	8(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	jne	.L376
.L374:
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L376
	.loc 1 1446 0
	movl	8(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	je	.L378
	.loc 1 1447 0
	leal	__FUNCTION__.15771@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1447, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L378:
	.loc 1 1448 0
	movl	$0, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, -52(%ebp)
	jmp	.L341
.L376:
	.loc 1 1451 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -28(%ebp)
	.loc 1 1452 0
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 1453 0
	movl	-28(%ebp), %eax
	movl	%eax, -52(%ebp)
.L341:
	movl	-52(%ebp), %eax
	.loc 1 1454 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE24:
	.size	convert_modes, .-convert_modes
.globl can_move_by_pieces
	.type	can_move_by_pieces, @function
can_move_by_pieces:
.LFB25:
	.loc 1 1482 0
	pushl	%ebp
.LCFI46:
	movl	%esp, %ebp
.LCFI47:
	subl	$40, %esp
.LCFI48:
	movl	8(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -4(%ebp)
	.loc 1 1483 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -16(%ebp)
	movl	%edx, -12(%ebp)
	movl	$1, -20(%ebp)
	cmpl	$0, -12(%ebp)
	jb	.L386
	cmpl	$0, -12(%ebp)
	ja	.L387
	cmpl	$1, -16(%ebp)
	jbe	.L386
.L387:
	movl	$0, -20(%ebp)
.L386:
	movl	-20(%ebp), %eax
	.loc 1 1484 0
	leave
	ret
.LFE25:
	.size	can_move_by_pieces, .-can_move_by_pieces
	.section	.rodata
	.type	__FUNCTION__.15952, @object
	.size	__FUNCTION__.15952, 15
__FUNCTION__.15952:
	.string	"move_by_pieces"
	.text
.globl move_by_pieces
	.type	move_by_pieces, @function
move_by_pieces:
.LFB26:
	.loc 1 1505 0
	pushl	%ebp
.LCFI49:
	movl	%esp, %ebp
.LCFI50:
	pushl	%esi
.LCFI51:
	pushl	%ebx
.LCFI52:
	subl	$160, %esp
.LCFI53:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	16(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -92(%ebp)
	.loc 1 1507 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 1508 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L390
	movl	$9, -136(%ebp)
	jmp	.L392
.L390:
	movl	$5, -136(%ebp)
.L392:
	movl	-136(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 1509 0
	movl	$0, -24(%ebp)
	.loc 1 1512 0
	movl	$0, -48(%ebp)
	movl	$0, -44(%ebp)
	.loc 1 1513 0
	movl	-32(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 1514 0
	cmpl	$0, 8(%ebp)
	je	.L393
	.loc 1 1516 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 1517 0
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	.loc 1 1518 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$107, %ax
	je	.L395
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L395
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$109, %ax
	je	.L395
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L399
.L395:
	movl	$1, -132(%ebp)
	jmp	.L400
.L399:
	movl	$0, -132(%ebp)
.L400:
	movl	-132(%ebp), %eax
	movl	%eax, -80(%ebp)
	.loc 1 1521 0
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L401
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L403
.L401:
	movl	$1, -128(%ebp)
	jmp	.L404
.L403:
	movl	$0, -128(%ebp)
.L404:
	movl	-128(%ebp), %eax
	movl	%eax, -40(%ebp)
	jmp	.L405
.L393:
	.loc 1 1526 0
	movl	$0, -36(%ebp)
	.loc 1 1527 0
	movl	$0, -88(%ebp)
	.loc 1 1528 0
	movl	$1, -80(%ebp)
	.loc 1 1530 0
	movl	$1, -40(%ebp)
.L405:
	.loc 1 1535 0
	movl	-36(%ebp), %eax
	movl	%eax, -84(%ebp)
	.loc 1 1536 0
	movl	12(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 1537 0
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$107, %ax
	je	.L406
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L406
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$109, %ax
	je	.L406
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L410
.L406:
	movl	$1, -124(%ebp)
	jmp	.L411
.L410:
	movl	$0, -124(%ebp)
.L411:
	movl	-124(%ebp), %eax
	movl	%eax, -64(%ebp)
	.loc 1 1542 0
	movl	$0, -60(%ebp)
	.loc 1 1543 0
	movl	$0, -76(%ebp)
	.loc 1 1544 0
	movl	-40(%ebp), %eax
	testl	%eax, %eax
	je	.L412
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
.L412:
	.loc 1 1545 0
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	.loc 1 1550 0
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	je	.L414
	movl	-80(%ebp), %eax
	testl	%eax, %eax
	jne	.L416
.L414:
	movl	24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	cmpl	$0, -116(%ebp)
	jb	.L416
	cmpl	$0, -116(%ebp)
	ja	.L418
	cmpl	$2, -120(%ebp)
	jbe	.L416
.L418:
	.loc 1 1554 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 1555 0
	jmp	.L419
.L420:
	.loc 1 1556 0
	movl	-20(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-28(%ebp), %eax
	jae	.L421
	.loc 1 1557 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
.L421:
	.loc 1 1555 0
	movl	-20(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
.L419:
	cmpl	$0, -20(%ebp)
	jne	.L420
	.loc 1 1571 0
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jne	.L424
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L426
	movl	-32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L424
.L426:
	.loc 1 1572 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_addr_to_reg@PLT
	movl	%eax, -68(%ebp)
.L424:
	.loc 1 1585 0
	movl	-80(%ebp), %eax
	testl	%eax, %eax
	jne	.L416
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L435
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L416
.L435:
	.loc 1 1586 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_addr_to_reg@PLT
	movl	%eax, -84(%ebp)
.L416:
	.loc 1 1589 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L443
	movl	$64, -112(%ebp)
	jmp	.L445
.L443:
	movl	$32, -112(%ebp)
.L445:
	movl	-112(%ebp), %eax
	cmpl	24(%ebp), %eax
	jb	.L446
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L448
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L450
.L448:
	movl	$128, -108(%ebp)
	jmp	.L451
.L450:
	movl	$64, -108(%ebp)
.L451:
	movl	-108(%ebp), %eax
	cmpl	24(%ebp), %eax
	ja	.L456
.L446:
	.loc 1 1591 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L453
	movl	$64, -104(%ebp)
	jmp	.L455
.L453:
	movl	$32, -104(%ebp)
.L455:
	movl	-104(%ebp), %eax
	movl	%eax, 24(%ebp)
	.loc 1 1596 0
	jmp	.L456
.L457:
	.loc 1 1598 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 1599 0
	jmp	.L458
.L459:
	.loc 1 1600 0
	movl	-20(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-28(%ebp), %eax
	jae	.L460
	.loc 1 1601 0
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
.L460:
	.loc 1 1599 0
	movl	-20(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
.L458:
	cmpl	$0, -20(%ebp)
	jne	.L459
	.loc 1 1603 0
	cmpl	$0, -24(%ebp)
	je	.L463
	.loc 1 1606 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1607 0
	cmpl	$529, -16(%ebp)
	je	.L465
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	24(%ebp), %eax
	ja	.L465
	.loc 1 1608 0
	movl	-16(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	leal	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_by_pieces_1
.L465:
	.loc 1 1610 0
	movl	-24(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
.L456:
	.loc 1 1596 0
	cmpl	$1, -28(%ebp)
	ja	.L457
.L463:
	.loc 1 1614 0
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L468
	.loc 1 1615 0
	leal	__FUNCTION__.15952@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1615, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L468:
	.loc 1 1617 0
	cmpl	$0, 28(%ebp)
	je	.L470
.LBB18:
	.loc 1 1621 0
	movl	-40(%ebp), %eax
	testl	%eax, %eax
	je	.L472
	.loc 1 1622 0
	leal	__FUNCTION__.15952@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1622, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L472:
	.loc 1 1623 0
	movl	-80(%ebp), %eax
	testl	%eax, %eax
	je	.L474
	.loc 1 1625 0
	cmpl	$2, 28(%ebp)
	jne	.L476
	.loc 1 1630 0
	movl	-84(%ebp), %eax
	movl	$-1, 4(%esp)
	movl	$-1, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, (%esp)
	call	copy_addr_to_reg@PLT
	movl	%eax, -84(%ebp)
.L476:
	.loc 1 1633 0
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	-84(%ebp), %ecx
	movl	-88(%ebp), %esi
	movl	$1, 20(%esp)
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 8(%esp)
	movl	$2, 4(%esp)
	movl	%esi, (%esp)
	call	adjust_automodify_address_1@PLT
	movl	%eax, -12(%ebp)
	jmp	.L478
.L474:
	.loc 1 1638 0
	cmpl	$2, 28(%ebp)
	jne	.L479
	.loc 1 1639 0
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
.L479:
	.loc 1 1640 0
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	-88(%ebp), %ecx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	$2, 4(%esp)
	movl	%ecx, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -12(%ebp)
.L478:
	.loc 1 1642 0
	movl	-12(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L481
.L470:
.LBE18:
	.loc 1 1645 0
	movl	-88(%ebp), %eax
	movl	%eax, -100(%ebp)
.L481:
	movl	-100(%ebp), %eax
	.loc 1 1646 0
	addl	$160, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE26:
	.size	move_by_pieces, .-move_by_pieces
	.section	.rodata
	.type	__FUNCTION__.16150, @object
	.size	__FUNCTION__.16150, 22
__FUNCTION__.16150:
	.string	"move_by_pieces_ninsns"
.globl __udivdi3
.globl __umoddi3
	.text
	.type	move_by_pieces_ninsns, @function
move_by_pieces_ninsns:
.LFB27:
	.loc 1 1655 0
	pushl	%ebp
.LCFI54:
	movl	%esp, %ebp
.LCFI55:
	pushl	%edi
.LCFI56:
	pushl	%esi
.LCFI57:
	pushl	%ebx
.LCFI58:
	subl	$92, %esp
.LCFI59:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 1656 0
	movl	$0, -48(%ebp)
	movl	$0, -44(%ebp)
	.loc 1 1657 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L484
	movl	$9, -88(%ebp)
	movl	$0, -84(%ebp)
	jmp	.L486
.L484:
	movl	$5, -88(%ebp)
	movl	$0, -84(%ebp)
.L486:
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 1659 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L487
	movl	$64, -76(%ebp)
	jmp	.L489
.L487:
	movl	$32, -76(%ebp)
.L489:
	movl	-76(%ebp), %edx
	cmpl	16(%ebp), %edx
	jb	.L490
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L492
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L494
.L492:
	movl	$128, -72(%ebp)
	jmp	.L495
.L494:
	movl	$64, -72(%ebp)
.L495:
	movl	-72(%ebp), %eax
	cmpl	16(%ebp), %eax
	ja	.L500
.L490:
	.loc 1 1661 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L497
	movl	$64, -68(%ebp)
	jmp	.L499
.L497:
	movl	$32, -68(%ebp)
.L499:
	movl	-68(%ebp), %edx
	movl	%edx, 16(%ebp)
	.loc 1 1663 0
	jmp	.L500
.L501:
.LBB19:
	.loc 1 1665 0
	movl	$0, -28(%ebp)
	.loc 1 1668 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 1669 0
	jmp	.L502
.L503:
	.loc 1 1670 0
	movl	-24(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	$0, -60(%ebp)
	movl	-60(%ebp), %edx
	cmpl	-36(%ebp), %edx
	ja	.L504
	movl	-60(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jb	.L506
	movl	-64(%ebp), %edx
	cmpl	-40(%ebp), %edx
	jae	.L504
.L506:
	.loc 1 1671 0
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
.L504:
	.loc 1 1669 0
	movl	-24(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
.L502:
	cmpl	$0, -24(%ebp)
	jne	.L503
	.loc 1 1673 0
	cmpl	$0, -28(%ebp)
	je	.L508
	.loc 1 1676 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -20(%ebp)
	.loc 1 1677 0
	cmpl	$529, -20(%ebp)
	je	.L510
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	16(%ebp), %eax
	ja	.L510
	.loc 1 1678 0
	movl	-28(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__udivdi3@PLT
	addl	%eax, -48(%ebp)
	adcl	%edx, -44(%ebp)
	movl	-28(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-56(%ebp), %esi
	movl	-52(%ebp), %edi
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__umoddi3@PLT
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
.L510:
	.loc 1 1680 0
	movl	-28(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
.L500:
.LBE19:
	.loc 1 1663 0
	cmpl	$0, -36(%ebp)
	ja	.L501
	cmpl	$0, -36(%ebp)
	jb	.L508
	cmpl	$1, -40(%ebp)
	ja	.L501
.L508:
	.loc 1 1683 0
	movl	-56(%ebp), %eax
	orl	-52(%ebp), %eax
	testl	%eax, %eax
	je	.L514
	.loc 1 1684 0
	leal	__FUNCTION__.16150@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1684, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L514:
	.loc 1 1685 0
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	.loc 1 1686 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE27:
	.size	move_by_pieces_ninsns, .-move_by_pieces_ninsns
	.section	.rodata
	.type	__FUNCTION__.16216, @object
	.size	__FUNCTION__.16216, 17
__FUNCTION__.16216:
	.string	"move_by_pieces_1"
	.text
	.type	move_by_pieces_1, @function
move_by_pieces_1:
.LFB28:
	.loc 1 1697 0
	pushl	%ebp
.LCFI60:
	movl	%esp, %ebp
.LCFI61:
	pushl	%edi
.LCFI62:
	pushl	%esi
.LCFI63:
	pushl	%ebx
.LCFI64:
	subl	$76, %esp
.LCFI65:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1698 0
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 1699 0
	movl	$0, -24(%ebp)
	.loc 1 1701 0
	jmp	.L518
.L519:
	.loc 1 1703 0
	movl	16(%ebp), %eax
	movl	48(%eax), %eax
	testl	%eax, %eax
	je	.L520
	.loc 1 1704 0
	movl	16(%ebp), %eax
	movl	40(%eax), %edx
	movl	44(%eax), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	-56(%ebp), %esi
	movl	-52(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	16(%ebp), %ecx
	movl	%eax, 40(%ecx)
	movl	%edx, 44(%ecx)
.L520:
	.loc 1 1706 0
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L522
	.loc 1 1708 0
	movl	16(%ebp), %eax
	movl	8(%eax), %eax
	testl	%eax, %eax
	je	.L524
	.loc 1 1709 0
	movl	16(%ebp), %eax
	movl	40(%eax), %edx
	movl	44(%eax), %ecx
	movl	16(%ebp), %eax
	movl	4(%eax), %esi
	movl	16(%ebp), %eax
	movl	(%eax), %edi
	movl	$1, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edi, (%esp)
	call	adjust_automodify_address_1@PLT
	movl	%eax, -24(%ebp)
	jmp	.L522
.L524:
	.loc 1 1712 0
	movl	16(%ebp), %eax
	movl	40(%eax), %edx
	movl	44(%eax), %ecx
	movl	16(%ebp), %eax
	movl	(%eax), %esi
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%esi, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -24(%ebp)
.L522:
	.loc 1 1715 0
	movl	16(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	je	.L526
	.loc 1 1716 0
	movl	16(%ebp), %eax
	movl	40(%eax), %edx
	movl	44(%eax), %ecx
	movl	16(%ebp), %eax
	movl	20(%eax), %esi
	movl	16(%ebp), %eax
	movl	16(%eax), %edi
	movl	$1, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edi, (%esp)
	call	adjust_automodify_address_1@PLT
	movl	%eax, -20(%ebp)
	jmp	.L528
.L526:
	.loc 1 1719 0
	movl	16(%ebp), %eax
	movl	40(%eax), %edx
	movl	44(%eax), %ecx
	movl	16(%ebp), %eax
	movl	16(%eax), %esi
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%esi, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -20(%ebp)
.L528:
	.loc 1 1728 0
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L529
	.loc 1 1729 0
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	movl	8(%ebp), %eax
	call	*%eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 1744 0
	movl	16(%ebp), %eax
	movl	48(%eax), %eax
	testl	%eax, %eax
	je	.L531
	jmp	.L532
.L529:
	.loc 1 1735 0
	leal	__FUNCTION__.16216@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1735, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L531:
	.loc 1 1745 0
	movl	16(%ebp), %eax
	movl	40(%eax), %esi
	movl	44(%eax), %edi
	movl	-28(%ebp), %eax
	movl	$0, %edx
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	16(%ebp), %ecx
	movl	%eax, 40(%ecx)
	movl	%edx, 44(%ecx)
.L532:
	.loc 1 1747 0
	movl	16(%ebp), %eax
	movl	32(%eax), %edx
	movl	36(%eax), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	-56(%ebp), %esi
	movl	-52(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	16(%ebp), %ecx
	movl	%eax, 32(%ecx)
	movl	%edx, 36(%ecx)
.L518:
	.loc 1 1701 0
	movl	16(%ebp), %eax
	movl	32(%eax), %edx
	movl	36(%eax), %ecx
	movl	%edx, -48(%ebp)
	movl	%ecx, -44(%ebp)
	movl	-28(%ebp), %esi
	movl	$0, %edi
	movl	%esi, -40(%ebp)
	movl	%edi, -36(%ebp)
	movl	-36(%ebp), %edi
	cmpl	%edi, -44(%ebp)
	ja	.L519
	movl	-36(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	jb	.L535
	movl	-40(%ebp), %edx
	cmpl	%edx, -48(%ebp)
	jae	.L519
.L535:
	.loc 1 1749 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE28:
	.size	move_by_pieces_1, .-move_by_pieces_1
	.section	.rodata
	.type	__FUNCTION__.16301, @object
	.size	__FUNCTION__.16301, 16
__FUNCTION__.16301:
	.string	"emit_block_move"
	.text
.globl emit_block_move
	.type	emit_block_move, @function
emit_block_move:
.LFB29:
	.loc 1 1767 0
	pushl	%ebp
.LCFI66:
	movl	%esp, %ebp
.LCFI67:
	pushl	%ebx
.LCFI68:
	subl	$100, %esp
.LCFI69:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1769 0
	movl	$0, -20(%ebp)
	.loc 1 1772 0
	movl	20(%ebp), %eax
	movl	%eax, -72(%ebp)
	cmpl	$1, -72(%ebp)
	je	.L539
	cmpl	$1, -72(%ebp)
	jb	.L538
	cmpl	$2, -72(%ebp)
	je	.L540
	jmp	.L537
.L538:
	.loc 1 1775 0
	movb	$1, -9(%ebp)
	.loc 1 1776 0
	jmp	.L541
.L540:
	.loc 1 1779 0
	call	block_move_libcall_safe_for_call_parm
	movb	%al, -9(%ebp)
	.loc 1 1783 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	addl	$1, %eax
	movl	%eax, 4(%edx)
	.loc 1 1784 0
	jmp	.L541
.L539:
	.loc 1 1787 0
	movb	$0, -9(%ebp)
	.loc 1 1788 0
	jmp	.L541
.L537:
	.loc 1 1791 0
	leal	__FUNCTION__.16301@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1791, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L541:
	.loc 1 1794 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L542
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
	jmp	.L544
.L542:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L545
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -60(%ebp)
	jmp	.L547
.L545:
	movl	$8, -60(%ebp)
.L547:
	movl	-60(%ebp), %eax
	movl	%eax, -64(%ebp)
.L544:
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L548
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L550
.L548:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L551
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -52(%ebp)
	jmp	.L553
.L551:
	movl	$8, -52(%ebp)
.L553:
	movl	-52(%ebp), %eax
	movl	%eax, -56(%ebp)
.L550:
	movl	-56(%ebp), %eax
	cmpl	%eax, -64(%ebp)
	jae	.L554
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L556
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L558
.L556:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L559
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -44(%ebp)
	jmp	.L561
.L559:
	movl	$8, -44(%ebp)
.L561:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
.L558:
	movl	-48(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L562
.L554:
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L563
	movl	12(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L565
.L563:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L566
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -36(%ebp)
	jmp	.L568
.L566:
	movl	$8, -36(%ebp)
.L568:
	movl	-36(%ebp), %eax
	movl	%eax, -40(%ebp)
.L565:
	movl	-40(%ebp), %eax
	movl	%eax, -68(%ebp)
.L562:
	movl	-68(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1796 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L569
	.loc 1 1797 0
	leal	__FUNCTION__.16301@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1797, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L569:
	.loc 1 1798 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L571
	.loc 1 1799 0
	leal	__FUNCTION__.16301@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1799, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L571:
	.loc 1 1801 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 8(%ebp)
	.loc 1 1802 0
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 12(%ebp)
	.loc 1 1803 0
	movl	$0, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 16(%ebp)
	.loc 1 1805 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L573
	.loc 1 1806 0
	leal	__FUNCTION__.16301@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1806, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L573:
	.loc 1 1807 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L575
	.loc 1 1808 0
	leal	__FUNCTION__.16301@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1808, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L575:
	.loc 1 1809 0
	cmpl	$0, 16(%ebp)
	jne	.L577
	.loc 1 1810 0
	leal	__FUNCTION__.16301@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1810, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L577:
	.loc 1 1814 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L579
	.loc 1 1816 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	shallow_copy_rtx@PLT
	movl	%eax, 8(%ebp)
	.loc 1 1817 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	shallow_copy_rtx@PLT
	movl	%eax, 12(%ebp)
	.loc 1 1818 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_size@PLT
	.loc 1 1819 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_size@PLT
.L579:
	.loc 1 1822 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	16(%ebp), %eax
	je	.L581
	.loc 1 1824 0
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L583
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	cmpl	$0, -28(%ebp)
	ja	.L583
	cmpl	$0, -28(%ebp)
	jb	.L586
	cmpl	$1, -32(%ebp)
	ja	.L583
.L586:
	.loc 1 1826 0
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	$0, 20(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	move_by_pieces@PLT
	.loc 1 1824 0
	jmp	.L581
.L583:
	.loc 1 1827 0
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move_via_movstr
	xorl	$1, %eax
	testb	%al, %al
	je	.L581
	.loc 1 1829 0
	cmpb	$0, -9(%ebp)
	je	.L588
	.loc 1 1830 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move_via_libcall
	movl	%eax, -20(%ebp)
	jmp	.L581
.L588:
	.loc 1 1832 0
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move_via_loop
.L581:
	.loc 1 1834 0
	cmpl	$2, 20(%ebp)
	jne	.L590
	.loc 1 1835 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	subl	$1, %eax
	movl	%eax, 4(%edx)
.L590:
	.loc 1 1837 0
	movl	-20(%ebp), %eax
	.loc 1 1838 0
	addl	$100, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE29:
	.size	emit_block_move, .-emit_block_move
	.local	takes_regs.16428
	.comm	takes_regs.16428,4,4
	.section	.rodata
	.align 32
	.type	__FUNCTION__.16442, @object
	.size	__FUNCTION__.16442, 38
__FUNCTION__.16442:
	.string	"block_move_libcall_safe_for_call_parm"
	.text
	.type	block_move_libcall_safe_for_call_parm, @function
block_move_libcall_safe_for_call_parm:
.LFB30:
	.loc 1 1846 0
	pushl	%ebp
.LCFI70:
	movl	%esp, %ebp
.LCFI71:
	pushl	%ebx
.LCFI72:
	subl	$116, %esp
.LCFI73:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
.LBB20:
	.loc 1 1856 0
	movl	takes_regs.16428@GOTOFF(%ebx), %eax
	movl	%eax, -88(%ebp)
	cmpl	$1, -88(%ebp)
	je	.L596
	cmpl	$1, -88(%ebp)
	jb	.L595
	cmpl	$2, -88(%ebp)
	je	.L597
	jmp	.L594
.L595:
.LBB21:
	.loc 1 1863 0
	movl	$0, (%esp)
	call	emit_block_move_libcall_fn
	movl	%eax, -20(%ebp)
	.loc 1 1864 0
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	init_cumulative_args@PLT
	.loc 1 1866 0
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 1867 0
	jmp	.L598
.L599:
.LBB22:
	.loc 1 1869 0
	movl	-16(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 1870 0
	movl	$1, 12(%esp)
	movl	$0, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	function_arg@PLT
	movl	%eax, -8(%ebp)
	.loc 1 1871 0
	cmpl	$0, -8(%ebp)
	je	.L600
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L600
	.loc 1 1874 0
	movl	$1, 12(%esp)
	movl	$0, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	function_arg_partial_nregs@PLT
	testl	%eax, %eax
	jne	.L600
	.loc 1 1878 0
	movl	$1, 12(%esp)
	movl	$0, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	function_arg_advance@PLT
.LBE22:
	.loc 1 1867 0
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
.L598:
	movl	global_trees@GOT(%ebx), %eax
	movl	132(%eax), %eax
	cmpl	-16(%ebp), %eax
	jne	.L599
.LBE21:
	.loc 1 1881 0
	movl	$2, takes_regs.16428@GOTOFF(%ebx)
.L597:
	.loc 1 1885 0
	movl	$1, -92(%ebp)
	jmp	.L605
.L600:
	.loc 1 1888 0
	movl	$1, takes_regs.16428@GOTOFF(%ebx)
.L596:
	.loc 1 1891 0
	movl	$0, -92(%ebp)
	jmp	.L605
.L594:
	.loc 1 1894 0
	leal	__FUNCTION__.16442@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$1894, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L605:
	movl	-92(%ebp), %eax
.LBE20:
	.loc 1 1897 0
	addl	$116, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE30:
	.size	block_move_libcall_safe_for_call_parm, .-block_move_libcall_safe_for_call_parm
	.type	emit_block_move_via_movstr, @function
emit_block_move_via_movstr:
.LFB31:
	.loc 1 1906 0
	pushl	%ebp
.LCFI74:
	movl	%esp, %ebp
.LCFI75:
	pushl	%edi
.LCFI76:
	pushl	%esi
.LCFI77:
	pushl	%ebx
.LCFI78:
	subl	$92, %esp
.LCFI79:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 1911 0
	movl	20(%ebp), %eax
	shrl	$3, %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -44(%ebp)
	.loc 1 1915 0
	movl	volatile_ok@GOT(%ebx), %eax
	movl	$1, (%eax)
	.loc 1 1917 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L608
.L609:
.LBB23:
	.loc 1 1920 0
	movl	-40(%ebp), %eax
	movl	movstr_optab@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -36(%ebp)
	.loc 1 1923 0
	cmpl	$529, -36(%ebp)
	je	.L610
	movl	16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L612
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	movl	-40(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	$1, %edi, %esi
	shrl	%edi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-68(%ebp), %edi
	cmpl	%edi, -76(%ebp)
	jb	.L614
	movl	-68(%ebp), %eax
	cmpl	%eax, -76(%ebp)
	ja	.L612
	movl	-72(%ebp), %esi
	cmpl	%esi, -80(%ebp)
	jbe	.L614
.L612:
	movl	-40(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L616
	movl	$64, -56(%ebp)
	jmp	.L618
.L616:
	movl	$32, -56(%ebp)
.L618:
	movl	-56(%ebp), %edi
	cmpl	%edi, -60(%ebp)
	jl	.L610
.L614:
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L619
	movl	$52, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	je	.L610
.L619:
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L621
	movl	$52, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	je	.L610
.L621:
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$36, %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L623
	movl	$0, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	je	.L610
.L623:
.LBB24:
	.loc 1 1940 0
	call	get_last_insn@PLT
	movl	%eax, -24(%ebp)
	.loc 1 1943 0
	movl	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -28(%ebp)
	.loc 1 1944 0
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 1945 0
	cmpl	$0, -32(%ebp)
	je	.L625
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	jne	.L625
	.loc 1 1946 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -28(%ebp)
.L625:
	.loc 1 1953 0
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, -20(%ebp)
	.loc 1 1954 0
	cmpl	$0, -20(%ebp)
	je	.L628
	.loc 1 1956 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 1957 0
	movl	volatile_ok@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 1958 0
	movl	$1, -52(%ebp)
	jmp	.L630
.L628:
	.loc 1 1961 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insns_since@PLT
.L610:
.LBE24:
.LBE23:
	.loc 1 1918 0
	movl	-40(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
.L608:
	.loc 1 1917 0
	cmpl	$0, -40(%ebp)
	jne	.L609
	.loc 1 1965 0
	movl	volatile_ok@GOT(%ebx), %eax
	movl	$0, (%eax)
	.loc 1 1966 0
	movl	$0, -52(%ebp)
.L630:
	movl	-52(%ebp), %eax
	.loc 1 1967 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE31:
	.size	emit_block_move_via_movstr, .-emit_block_move_via_movstr
	.type	emit_block_move_via_libcall, @function
emit_block_move_via_libcall:
.LFB32:
	.loc 1 1975 0
	pushl	%ebp
.LCFI80:
	movl	%esp, %ebp
.LCFI81:
	pushl	%ebx
.LCFI82:
	subl	$68, %esp
.LCFI83:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2001 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L634
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L634
	movl	$5, -48(%ebp)
	jmp	.L637
.L634:
	movl	$4, -48(%ebp)
.L637:
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, 8(%ebp)
	.loc 1 2002 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L638
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L638
	movl	$5, -40(%ebp)
	jmp	.L641
.L638:
	movl	$4, -40(%ebp)
.L641:
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, 12(%ebp)
	.loc 1 2005 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 2008 0
	movl	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 16(%ebp)
	.loc 1 2009 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, 16(%ebp)
	.loc 1 2019 0
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, -20(%ebp)
	.loc 1 2020 0
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, -24(%ebp)
	.loc 1 2022 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, -16(%ebp)
	.loc 1 2026 0
	movl	$1, (%esp)
	call	emit_block_move_libcall_fn
	movl	%eax, -28(%ebp)
	.loc 1 2027 0
	movl	$0, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	tree_cons@PLT
	movl	%eax, -32(%ebp)
	.loc 1 2030 0
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	tree_cons@PLT
	movl	%eax, -32(%ebp)
	.loc 1 2031 0
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	tree_cons@PLT
	movl	%eax, -32(%ebp)
	.loc 1 2040 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	build_pointer_type@PLT
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$123, (%esp)
	call	build1@PLT
	movl	%eax, -36(%ebp)
	.loc 1 2041 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$54, (%esp)
	call	build@PLT
	movl	%eax, -36(%ebp)
	.loc 1 2043 0
	movl	-36(%ebp), %edx
	movzbl	9(%edx), %eax
	orl	$1, %eax
	movb	%al, 9(%edx)
	.loc 1 2045 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -8(%ebp)
	.loc 1 2050 0
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L642
	.loc 1 2051 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L642:
	.loc 1 2053 0
	movl	-8(%ebp), %eax
	.loc 1 2054 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE32:
	.size	emit_block_move_via_libcall, .-emit_block_move_via_libcall
	.section	.rodata
.LC1:
	.string	"memcpy"
	.text
.globl init_block_move_fn
	.type	init_block_move_fn, @function
init_block_move_fn:
.LFB33:
	.loc 1 2065 0
	pushl	%ebp
.LCFI84:
	movl	%esp, %ebp
.LCFI85:
	pushl	%esi
.LCFI86:
	pushl	%ebx
.LCFI87:
	subl	$48, %esp
.LCFI88:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2066 0
	movl	block_move_fn@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L646
.LBB25:
	.loc 1 2072 0
	movl	$6, 4(%esp)
	leal	.LC1@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	get_identifier_with_length@PLT
	movl	%eax, -12(%ebp)
	.loc 1 2073 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	116(%eax), %ecx
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %esi
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %eax
	movl	$0, 16(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	build_function_type_list@PLT
	movl	%eax, -16(%ebp)
	.loc 1 2085 0
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$31, (%esp)
	call	build_decl@PLT
	movl	%eax, -12(%ebp)
	.loc 1 2086 0
	movl	-12(%ebp), %edx
	movzbl	33(%edx), %eax
	orl	$1, %eax
	movb	%al, 33(%edx)
	.loc 1 2087 0
	movl	-12(%ebp), %edx
	movzbl	10(%edx), %eax
	orl	$8, %eax
	movb	%al, 10(%edx)
	.loc 1 2088 0
	movl	-12(%ebp), %edx
	movzbl	35(%edx), %eax
	orl	$8, %eax
	movb	%al, 35(%edx)
	.loc 1 2089 0
	movl	-12(%ebp), %edx
	movzbl	10(%edx), %eax
	orl	$2, %eax
	movb	%al, 10(%edx)
	.loc 1 2091 0
	movl	-12(%ebp), %eax
	movl	%eax, block_move_fn@GOTOFF(%ebx)
.L646:
.LBE25:
	.loc 1 2094 0
	cmpl	$0, 8(%ebp)
	je	.L650
	.loc 1 2096 0
	movl	block_move_fn@GOTOFF(%ebx), %eax
	movl	$0, 88(%eax)
	.loc 1 2097 0
	movl	block_move_fn@GOTOFF(%ebx), %esi
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_identifier@PLT
	movl	%eax, 76(%esi)
.L650:
	.loc 1 2099 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE33:
	.size	init_block_move_fn, .-init_block_move_fn
	.local	emitted_extern.16635
	.comm	emitted_extern.16635,1,1
	.type	emit_block_move_libcall_fn, @function
emit_block_move_libcall_fn:
.LFB34:
	.loc 1 2104 0
	pushl	%ebp
.LCFI89:
	movl	%esp, %ebp
.LCFI90:
	pushl	%ebx
.LCFI91:
	subl	$20, %esp
.LCFI92:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2107 0
	movl	block_move_fn@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L652
	.loc 1 2108 0
	movl	$0, (%esp)
	call	init_block_move_fn@PLT
.L652:
	.loc 1 2110 0
	cmpl	$0, 8(%ebp)
	je	.L654
	movzbl	emitted_extern.16635@GOTOFF(%ebx), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L654
	.loc 1 2112 0
	movb	$1, emitted_extern.16635@GOTOFF(%ebx)
	.loc 1 2113 0
	movl	block_move_fn@GOTOFF(%ebx), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	.loc 1 2114 0
	movl	block_move_fn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	assemble_external@PLT
.L654:
	.loc 1 2117 0
	movl	block_move_fn@GOTOFF(%ebx), %eax
	.loc 1 2118 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE34:
	.size	emit_block_move_libcall_fn, .-emit_block_move_libcall_fn
	.type	emit_block_move_via_loop, @function
emit_block_move_via_loop:
.LFB35:
	.loc 1 2128 0
	pushl	%ebp
.LCFI93:
	movl	%esp, %ebp
.LCFI94:
	pushl	%ebx
.LCFI95:
	subl	$84, %esp
.LCFI96:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2132 0
	movl	16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -8(%ebp)
	.loc 1 2133 0
	cmpl	$0, -8(%ebp)
	jne	.L659
	.loc 1 2134 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
.L659:
	.loc 1 2136 0
	call	gen_label_rtx@PLT
	movl	%eax, -28(%ebp)
	.loc 1 2137 0
	call	gen_label_rtx@PLT
	movl	%eax, -32(%ebp)
	.loc 1 2138 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -24(%ebp)
	.loc 1 2140 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2142 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -20(%ebp)
	.loc 1 2143 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -16(%ebp)
	.loc 1 2144 0
	call	do_pending_stack_adjust@PLT
	.loc 1 2146 0
	movl	$-96, 4(%esp)
	movl	$0, (%esp)
	call	emit_note@PLT
	.loc 1 2148 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 2149 0
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 2151 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L661
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L661
	movl	$5, -48(%ebp)
	jmp	.L664
.L661:
	movl	$4, -48(%ebp)
.L664:
	movl	$1, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, -12(%ebp)
	.loc 1 2152 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L665
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L665
	movl	$5, -44(%ebp)
	jmp	.L668
.L665:
	movl	$4, -44(%ebp)
.L668:
	movl	-12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -20(%ebp)
	.loc 1 2153 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L669
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L669
	movl	$5, -40(%ebp)
	jmp	.L672
.L669:
	movl	$4, -40(%ebp)
.L672:
	movl	-12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -16(%ebp)
	.loc 1 2154 0
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$2, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	change_address@PLT
	movl	%eax, 8(%ebp)
	.loc 1 2155 0
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$2, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	change_address@PLT
	movl	%eax, 12(%ebp)
	.loc 1 2157 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2159 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	$3, 24(%esp)
	movl	$1, 20(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$85, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_simple_binop@PLT
	movl	%eax, -12(%ebp)
	.loc 1 2161 0
	movl	-12(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L673
	.loc 1 2162 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L673:
	.loc 1 2164 0
	movl	$-94, 4(%esp)
	movl	$0, (%esp)
	call	emit_note@PLT
	.loc 1 2165 0
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 2167 0
	movl	-28(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$1, 20(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	$117, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
	.loc 1 2170 0
	movl	$-95, 4(%esp)
	movl	$0, (%esp)
	call	emit_note@PLT
	.loc 1 2171 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE35:
	.size	emit_block_move_via_loop, .-emit_block_move_via_loop
.globl move_block_to_reg
	.type	move_block_to_reg, @function
move_block_to_reg:
.LFB36:
	.loc 1 2182 0
	pushl	%ebp
.LCFI97:
	movl	%esp, %ebp
.LCFI98:
	pushl	%esi
.LCFI99:
	pushl	%ebx
.LCFI100:
	subl	$32, %esp
.LCFI101:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2189 0
	cmpl	$0, 16(%ebp)
	je	.L698
	.loc 1 2192 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L679
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L687
.L679:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L688
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L690
.L688:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L691
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L691
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L690
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L690
.L691:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L687
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	jne	.L687
.L690:
	.loc 1 2193 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	force_const_mem@PLT
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, 12(%ebp)
.L687:
	.loc 1 2212 0
	movl	$0, -12(%ebp)
	jmp	.L696
.L697:
	.loc 1 2213 0
	movl	-12(%ebp), %edx
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, %esi
	movl	-12(%ebp), %eax
	addl	8(%ebp), %eax
	movl	%eax, %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2212 0
	addl	$1, -12(%ebp)
.L696:
	movl	-12(%ebp), %eax
	cmpl	16(%ebp), %eax
	jl	.L697
.L698:
	.loc 1 2215 0
	addl	$32, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE36:
	.size	move_block_to_reg, .-move_block_to_reg
	.section	.rodata
	.type	__FUNCTION__.16778, @object
	.size	__FUNCTION__.16778, 20
__FUNCTION__.16778:
	.string	"move_block_from_reg"
	.text
.globl move_block_from_reg
	.type	move_block_from_reg, @function
move_block_from_reg:
.LFB37:
	.loc 1 2227 0
	pushl	%ebp
.LCFI102:
	movl	%esp, %ebp
.LCFI103:
	pushl	%esi
.LCFI104:
	pushl	%ebx
.LCFI105:
	subl	$80, %esp
.LCFI106:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2235 0
	cmpl	$0, 16(%ebp)
	je	.L723
	.loc 1 2240 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L702
	movl	$8, -52(%ebp)
	jmp	.L704
.L702:
	movl	$4, -52(%ebp)
.L704:
	movl	-52(%ebp), %eax
	cmpl	20(%ebp), %eax
	jl	.L705
	movl	20(%ebp), %eax
	sall	$3, %eax
	movl	$0, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -24(%ebp)
	cmpl	$52, -24(%ebp)
	je	.L705
	.loc 1 2243 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, %esi
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2244 0
	jmp	.L723
.L705:
	.loc 1 2250 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L708
	movl	$8, -48(%ebp)
	jmp	.L710
.L708:
	movl	$4, -48(%ebp)
.L710:
	movl	-48(%ebp), %eax
	cmpl	20(%ebp), %eax
	jle	.L711
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L711
.LBB26:
	.loc 1 2252 0
	movl	$52, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -20(%ebp)
	.loc 1 2255 0
	cmpl	$0, -20(%ebp)
	jne	.L714
	.loc 1 2256 0
	leal	__FUNCTION__.16778@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2256, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L714:
	.loc 1 2258 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L716
	movl	$8, -44(%ebp)
	jmp	.L718
.L716:
	movl	$4, -44(%ebp)
.L718:
	movl	-44(%ebp), %eax
	subl	20(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	build_int_2_wide@PLT
	movl	%eax, %esi
	movl	8(%ebp), %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	expand_shift@PLT
	movl	%eax, -16(%ebp)
	.loc 1 2262 0
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2263 0
	jmp	.L723
.L711:
.LBE26:
	.loc 1 2283 0
	movl	$0, -28(%ebp)
	jmp	.L719
.L720:
.LBB27:
	.loc 1 2285 0
	movl	-28(%ebp), %eax
	movl	$52, 12(%esp)
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -12(%ebp)
	.loc 1 2287 0
	cmpl	$0, -12(%ebp)
	jne	.L721
	.loc 1 2288 0
	leal	__FUNCTION__.16778@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2288, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L721:
	.loc 1 2290 0
	movl	-28(%ebp), %eax
	addl	8(%ebp), %eax
	movl	%eax, %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	gen_rtx_REG@PLT
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.LBE27:
	.loc 1 2283 0
	addl	$1, -28(%ebp)
.L719:
	movl	-28(%ebp), %eax
	cmpl	16(%ebp), %eax
	jl	.L720
.L723:
	.loc 1 2292 0
	addl	$80, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE37:
	.size	move_block_from_reg, .-move_block_from_reg
	.section	.rodata
	.type	__FUNCTION__.16845, @object
	.size	__FUNCTION__.16845, 14
__FUNCTION__.16845:
	.string	"gen_group_rtx"
	.text
.globl gen_group_rtx
	.type	gen_group_rtx, @function
gen_group_rtx:
.LFB38:
	.loc 1 2303 0
	pushl	%ebp
.LCFI107:
	movl	%esp, %ebp
.LCFI108:
	pushl	%esi
.LCFI109:
	pushl	%ebx
.LCFI110:
	subl	$64, %esp
.LCFI111:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -44(%ebp)
	.loc 1 2303 0
	movl	%gs:20, %eax
	movl	%eax, -12(%ebp)
	xorl	%eax, %eax
	.loc 1 2307 0
	movl	-44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	je	.L725
	.loc 1 2308 0
	leal	__FUNCTION__.16845@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2308, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L725:
	.loc 1 2310 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 2311 0
	movl	-28(%ebp), %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %edx
	movl	%edx, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 2314 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 2316 0
	cmpl	$0, -32(%ebp)
	je	.L729
	.loc 1 2317 0
	movl	-24(%ebp), %eax
	movl	$0, (%eax)
	.loc 1 2319 0
	jmp	.L729
.L730:
.LBB28:
	.loc 1 2321 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
	.loc 1 2322 0
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 2324 0
	movl	-32(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %esi
	addl	-24(%ebp), %esi
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, (%esi)
.LBE28:
	.loc 1 2319 0
	addl	$1, -32(%ebp)
.L729:
	movl	-32(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jl	.L730
	.loc 1 2327 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtvec_v@PLT
	movl	%eax, %edx
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$49, (%esp)
	call	gen_rtx_fmt_E@PLT
	.loc 1 2328 0
	movl	-12(%ebp), %edx
	xorl	%gs:20, %edx
	je	.L733
	call	__stack_chk_fail_local
.L733:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE38:
	.size	gen_group_rtx, .-gen_group_rtx
	.section	.rodata
	.type	__FUNCTION__.16895, @object
	.size	__FUNCTION__.16895, 16
__FUNCTION__.16895:
	.string	"emit_group_load"
.globl __moddi3
.globl __divdi3
	.text
.globl emit_group_load
	.type	emit_group_load, @function
emit_group_load:
.LFB39:
	.loc 1 2344 0
	pushl	%ebp
.LCFI112:
	movl	%esp, %ebp
.LCFI113:
	pushl	%edi
.LCFI114:
	pushl	%esi
.LCFI115:
	pushl	%ebx
.LCFI116:
	subl	$220, %esp
.LCFI117:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	.loc 1 2344 0
	movl	%gs:20, %eax
	movl	%eax, -20(%ebp)
	xorl	%eax, %eax
	.loc 1 2348 0
	movl	-84(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	je	.L735
	.loc 1 2349 0
	leal	__FUNCTION__.16895@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2349, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L735:
	.loc 1 2353 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L737
	.loc 1 2354 0
	movl	$0, -52(%ebp)
	jmp	.L739
.L737:
	.loc 1 2356 0
	movl	$1, -52(%ebp)
.L739:
	.loc 1 2358 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	44(%esp), %edx
	movl	%edx, -164(%ebp)
	movl	-164(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -164(%ebp)
	movl	-164(%ebp), %ecx
	movl	%ecx, -60(%ebp)
	.loc 1 2361 0
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L740
.L741:
.LBB29:
	.loc 1 2363 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -44(%ebp)
	.loc 1 2364 0
	movl	-84(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 2365 0
	movl	-44(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
	.loc 1 2366 0
	movl	$0, -36(%ebp)
	.loc 1 2369 0
	cmpl	$0, 16(%ebp)
	js	.L742
	movl	-40(%ebp), %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-72(%ebp), %esi
	adcl	-68(%ebp), %edi
	movl	%esi, -160(%ebp)
	movl	%edi, -156(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -148(%ebp)
	movl	-148(%ebp), %eax
	cmpl	%eax, -156(%ebp)
	jl	.L742
	movl	-148(%ebp), %edx
	cmpl	%edx, -156(%ebp)
	jg	.L745
	movl	-152(%ebp), %ecx
	cmpl	%ecx, -160(%ebp)
	jbe	.L742
.L745:
	.loc 1 2371 0
	movl	-40(%ebp), %esi
	movl	$0, %edi
	movl	%esi, -184(%ebp)
	movl	%edi, -180(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	subl	-72(%ebp), %eax
	sbbl	-68(%ebp), %edx
	movl	-184(%ebp), %esi
	movl	-180(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	shldl	$3, %eax, %edx
	sall	$3, %eax
	movl	%eax, -36(%ebp)
	.loc 1 2372 0
	movl	16(%ebp), %edx
	movl	-72(%ebp), %eax
	movl	%edx, %edi
	subl	%eax, %edi
	movl	%edi, %eax
	movl	%eax, -40(%ebp)
	.loc 1 2373 0
	cmpl	$0, -40(%ebp)
	jne	.L742
	.loc 1 2374 0
	leal	__FUNCTION__.16895@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2374, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L742:
	.loc 1 2380 0
	movl	-88(%ebp), %eax
	movl	%eax, -56(%ebp)
	.loc 1 2381 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L747
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L749
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L757
.L749:
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-44(%ebp), %eax
	je	.L747
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L747
.L757:
	.loc 1 2386 0
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L759
	.loc 1 2387 0
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -56(%ebp)
	jmp	.L761
.L759:
	.loc 1 2389 0
	movl	-88(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -56(%ebp)
.L761:
	.loc 1 2391 0
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L747:
	.loc 1 2395 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L762
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L764
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -144(%ebp)
	jmp	.L766
.L764:
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L767
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -140(%ebp)
	jmp	.L769
.L767:
	movl	$8, -140(%ebp)
.L769:
	movl	-140(%ebp), %eax
	movl	%eax, -144(%ebp)
.L766:
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, -144(%ebp)
	jb	.L762
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$3, %esi, %edi
	sall	$3, %esi
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L762
	movl	-44(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-40(%ebp), %eax
	jne	.L762
	.loc 1 2400 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %esi
	addl	-60(%ebp), %esi
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, (%esi)
	.loc 1 2401 0
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, %edx
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2395 0
	jmp	.L773
.L762:
	.loc 1 2403 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	jne	.L774
.LBB30:
	.loc 1 2405 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 2406 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 2408 0
	movl	-72(%ebp), %eax
	orl	-68(%ebp), %eax
	testl	%eax, %eax
	jne	.L776
	movl	-40(%ebp), %eax
	cmpl	-28(%ebp), %eax
	je	.L778
.L776:
	movl	-72(%ebp), %eax
	orl	-68(%ebp), %eax
	testl	%eax, %eax
	je	.L779
	movl	-40(%ebp), %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-72(%ebp), %esi
	adcl	-68(%ebp), %edi
	movl	%esi, -136(%ebp)
	movl	%edi, -132(%ebp)
	movl	-32(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -128(%ebp)
	movl	%edx, -124(%ebp)
	movl	-124(%ebp), %edx
	cmpl	%edx, -132(%ebp)
	jg	.L779
	movl	-124(%ebp), %ecx
	cmpl	%ecx, -132(%ebp)
	jl	.L778
	movl	-128(%ebp), %esi
	cmpl	%esi, -136(%ebp)
	ja	.L779
.L778:
	.loc 1 2415 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %esi
	addl	-60(%ebp), %esi
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__divdi3@PLT
	movl	-56(%ebp), %ecx
	movl	4(%ecx,%eax,8), %eax
	movl	%eax, (%esi)
	.loc 1 2416 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L773
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L791
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-44(%ebp), %eax
	je	.L773
.L791:
	.loc 1 2418 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	-60(%ebp), %edi
	addl	%eax, %edi
	movl	%edi, -116(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -108(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	-72(%ebp), %esi
	movl	-68(%ebp), %edi
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	shldl	$3, %eax, %edx
	sall	$3, %eax
	movl	%eax, -176(%ebp)
	movl	%edx, -172(%ebp)
	movl	-40(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %esi
	movl	$0, %edi
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	-112(%ebp), %eax
	movl	-108(%ebp), %edx
	movl	%eax, 36(%esp)
	movl	%edx, 40(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	$1, 20(%esp)
	movl	-176(%ebp), %edx
	movl	-172(%ebp), %ecx
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-104(%ebp), %ecx
	movl	%ecx, (%esp)
	call	extract_bit_field@PLT
	movl	-116(%ebp), %esi
	movl	%eax, (%esi)
	.loc 1 2408 0
	jmp	.L773
.L779:
	.loc 1 2422 0
	movl	-72(%ebp), %eax
	orl	-68(%ebp), %eax
	testl	%eax, %eax
	jne	.L794
.LBB31:
	.loc 1 2424 0
	movl	-32(%ebp), %edx
	movl	$0, %ecx
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	assign_stack_temp@PLT
	movl	%eax, -24(%ebp)
	.loc 1 2425 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2426 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %esi
	addl	-60(%ebp), %esi
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, (%esi)
	jmp	.L773
.L794:
.LBE31:
	.loc 1 2429 0
	leal	__FUNCTION__.16895@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2429, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L774:
.LBE30:
	.loc 1 2431 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L796
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L805
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-44(%ebp), %eax
	jne	.L805
.L796:
	.loc 1 2433 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	addl	-60(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 2431 0
	jmp	.L773
.L805:
	.loc 1 2435 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	-60(%ebp), %edi
	addl	%eax, %edi
	movl	%edi, -100(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	shldl	$3, %eax, %edx
	sall	$3, %eax
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	movl	-40(%ebp), %eax
	sall	$3, %eax
	movl	%eax, %edx
	movl	$0, %ecx
	movl	%esi, 36(%esp)
	movl	%edi, 40(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	$1, 20(%esp)
	movl	-96(%ebp), %esi
	movl	-92(%ebp), %edi
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_bit_field@PLT
	movl	-100(%ebp), %edi
	movl	%eax, (%edi)
.L773:
	.loc 1 2439 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L807
	cmpl	$0, -36(%ebp)
	je	.L807
	.loc 1 2440 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %esi
	movl	-36(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	84(%eax), %eax
	movl	$2, 24(%esp)
	movl	$0, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
.L807:
.LBE29:
	.loc 1 2361 0
	addl	$1, -48(%ebp)
.L740:
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-48(%ebp), %eax
	jg	.L741
	.loc 1 2444 0
	call	emit_queue@PLT
	.loc 1 2447 0
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L811
.L812:
	.loc 1 2448 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %ecx
	movl	-84(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2447 0
	addl	$1, -48(%ebp)
.L811:
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-48(%ebp), %eax
	jg	.L812
	.loc 1 2449 0
	movl	-20(%ebp), %eax
	xorl	%gs:20, %eax
	je	.L815
	call	__stack_chk_fail_local
.L815:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE39:
	.size	emit_group_load, .-emit_group_load
	.section	.rodata
	.type	__FUNCTION__.17234, @object
	.size	__FUNCTION__.17234, 16
__FUNCTION__.17234:
	.string	"emit_group_move"
	.text
.globl emit_group_move
	.type	emit_group_move, @function
emit_group_move:
.LFB40:
	.loc 1 2457 0
	pushl	%ebp
.LCFI118:
	movl	%esp, %ebp
.LCFI119:
	pushl	%ebx
.LCFI120:
	subl	$36, %esp
.LCFI121:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2460 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L817
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L817
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L820
.L817:
	.loc 1 2463 0
	leal	__FUNCTION__.17234@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2463, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L820:
	.loc 1 2466 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -8(%ebp)
	jmp	.L821
.L822:
	.loc 1 2467 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2466 0
	addl	$1, -8(%ebp)
.L821:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-8(%ebp), %eax
	jg	.L822
	.loc 1 2469 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE40:
	.size	emit_group_move, .-emit_group_move
	.section	.rodata
	.type	__FUNCTION__.17270, @object
	.size	__FUNCTION__.17270, 17
__FUNCTION__.17270:
	.string	"emit_group_store"
	.text
.globl emit_group_store
	.type	emit_group_store, @function
emit_group_store:
.LFB41:
	.loc 1 2479 0
	pushl	%ebp
.LCFI122:
	movl	%esp, %ebp
.LCFI123:
	pushl	%edi
.LCFI124:
	pushl	%esi
.LCFI125:
	pushl	%ebx
.LCFI126:
	subl	$204, %esp
.LCFI127:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	.loc 1 2479 0
	movl	%gs:20, %eax
	movl	%eax, -20(%ebp)
	xorl	%eax, %eax
	.loc 1 2483 0
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	je	.L826
	.loc 1 2484 0
	leal	__FUNCTION__.17270@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2484, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L826:
	.loc 1 2488 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L828
	.loc 1 2489 0
	movl	$0, -52(%ebp)
	jmp	.L830
.L828:
	.loc 1 2491 0
	movl	$1, -52(%ebp)
.L830:
	.loc 1 2493 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	sall	$2, %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	36(%esp), %edx
	movl	%edx, -156(%ebp)
	movl	-156(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %esi
	movl	%esi, -60(%ebp)
	.loc 1 2496 0
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L831
.L832:
.LBB32:
	.loc 1 2498 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 2499 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	movl	%eax, %esi
	addl	-60(%ebp), %esi
	movl	-44(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, (%esi)
	.loc 1 2500 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_move_insn@PLT
.LBE32:
	.loc 1 2496 0
	addl	$1, -48(%ebp)
.L831:
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-48(%ebp), %eax
	jg	.L832
	.loc 1 2502 0
	call	emit_queue@PLT
	.loc 1 2506 0
	movl	-84(%ebp), %eax
	movl	%eax, -56(%ebp)
	.loc 1 2507 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L834
.LBB33:
	.loc 1 2514 0
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L874
	.loc 1 2521 0
	movl	16(%ebp), %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	assign_stack_temp@PLT
	movl	%eax, -40(%ebp)
	.loc 1 2522 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_store@PLT
	.loc 1 2523 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_load@PLT
	.loc 1 2524 0
	jmp	.L874
.L834:
.LBE33:
	.loc 1 2526 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L838
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	je	.L838
	.loc 1 2528 0
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -56(%ebp)
	.loc 1 2530 0
	movl	-84(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L838:
	.loc 1 2534 0
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L841
.L842:
.LBB34:
	.loc 1 2536 0
	movl	-88(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	12(%eax), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	.loc 1 2537 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -36(%ebp)
	.loc 1 2538 0
	movl	-36(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	.loc 1 2539 0
	movl	-56(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 2542 0
	cmpl	$0, 16(%ebp)
	js	.L843
	movl	-32(%ebp), %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-72(%ebp), %esi
	adcl	-68(%ebp), %edi
	movl	%esi, -152(%ebp)
	movl	%edi, -148(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -140(%ebp)
	movl	-140(%ebp), %eax
	cmpl	%eax, -148(%ebp)
	jl	.L843
	movl	-140(%ebp), %edx
	cmpl	%edx, -148(%ebp)
	jg	.L846
	movl	-144(%ebp), %esi
	cmpl	%esi, -152(%ebp)
	jbe	.L843
.L846:
	.loc 1 2544 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L847
.LBB35:
	.loc 1 2546 0
	movl	-32(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -176(%ebp)
	movl	%edx, -172(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	subl	-72(%ebp), %eax
	sbbl	-68(%ebp), %edx
	movl	-176(%ebp), %esi
	movl	-172(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	shldl	$3, %eax, %edx
	sall	$3, %eax
	movl	%eax, -24(%ebp)
	.loc 1 2547 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %esi
	movl	-24(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %ecx
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	92(%eax), %eax
	movl	$2, 24(%esp)
	movl	$0, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
.L847:
.LBE35:
	.loc 1 2550 0
	movl	16(%ebp), %eax
	movl	-72(%ebp), %edx
	subl	%edx, %eax
	movl	%eax, -32(%ebp)
.L843:
	.loc 1 2553 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	jne	.L849
	.loc 1 2555 0
	movl	-32(%ebp), %eax
	movl	$0, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	-72(%ebp), %esi
	adcl	-68(%ebp), %edi
	movl	%esi, -136(%ebp)
	movl	%edi, -132(%ebp)
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -128(%ebp)
	movl	-128(%ebp), %edi
	movl	%edi, -128(%ebp)
	movl	$0, -124(%ebp)
	movl	-124(%ebp), %eax
	cmpl	%eax, -132(%ebp)
	jg	.L851
	movl	-124(%ebp), %edx
	cmpl	%edx, -132(%ebp)
	jl	.L853
	movl	-128(%ebp), %esi
	cmpl	%esi, -136(%ebp)
	ja	.L851
.L853:
	.loc 1 2556 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L849
.L851:
	.loc 1 2557 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %edi
	movl	%edi, -120(%ebp)
	movl	$0, -116(%ebp)
	movl	-116(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jg	.L854
	movl	-116(%ebp), %edx
	cmpl	-68(%ebp), %edx
	jl	.L856
	movl	-120(%ebp), %esi
	cmpl	-72(%ebp), %esi
	ja	.L854
.L856:
	.loc 1 2559 0
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	subl	%eax, -72(%ebp)
	sbbl	%edx, -68(%ebp)
	.loc 1 2560 0
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L849
.L854:
	.loc 1 2562 0
	movl	-72(%ebp), %eax
	orl	-68(%ebp), %eax
	testl	%eax, %eax
	jne	.L857
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L857
	.loc 1 2564 0
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-28(%ebp), %ecx
	movzbl	2(%ecx), %ecx
	movzbl	%cl, %ecx
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, (%esp)
	call	assign_stack_temp@PLT
	movl	%eax, -28(%ebp)
	.loc 1 2566 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %esi
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2568 0
	movl	-28(%ebp), %eax
	movl	%eax, -56(%ebp)
	.loc 1 2569 0
	jmp	.L860
.L857:
	.loc 1 2572 0
	leal	__FUNCTION__.17270@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2572, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L849:
	.loc 1 2576 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L861
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L863
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -112(%ebp)
	jmp	.L865
.L863:
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L866
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -108(%ebp)
	jmp	.L868
.L866:
	movl	$8, -108(%ebp)
.L868:
	movl	-108(%ebp), %edi
	movl	%edi, -112(%ebp)
.L865:
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, -112(%ebp)
	jb	.L861
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$3, %esi, %edi
	sall	$3, %esi
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L861
	movl	-36(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-32(%ebp), %eax
	jne	.L861
	.loc 1 2580 0
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %esi
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 2576 0
	jmp	.L872
.L861:
	.loc 1 2582 0
	movl	16(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%edx, -100(%ebp)
	movl	-48(%ebp), %eax
	sall	$2, %eax
	addl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	shldl	$3, %eax, %edx
	sall	$3, %eax
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-32(%ebp), %eax
	sall	$3, %eax
	movl	%eax, -168(%ebp)
	movl	$0, -164(%ebp)
	movl	-104(%ebp), %eax
	movl	-100(%ebp), %edx
	movl	%eax, 28(%esp)
	movl	%edx, 32(%esp)
	movl	-92(%ebp), %edx
	movl	%edx, 24(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	-168(%ebp), %esi
	movl	-164(%ebp), %edi
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	store_bit_field@PLT
.L872:
.LBE34:
	.loc 1 2534 0
	addl	$1, -48(%ebp)
.L841:
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-48(%ebp), %eax
	jg	.L842
.L860:
	.loc 1 2586 0
	call	emit_queue@PLT
	.loc 1 2589 0
	movl	-84(%ebp), %eax
	cmpl	-56(%ebp), %eax
	je	.L874
	.loc 1 2590 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L874:
	.loc 1 2591 0
	movl	-20(%ebp), %edi
	xorl	%gs:20, %edi
	je	.L875
	call	__stack_chk_fail_local
.L875:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE41:
	.size	emit_group_store, .-emit_group_store
.globl copy_blkmode_from_reg
	.type	copy_blkmode_from_reg, @function
copy_blkmode_from_reg:
.LFB42:
	.loc 1 2607 0
	pushl	%ebp
.LCFI128:
	movl	%esp, %ebp
.LCFI129:
	pushl	%edi
.LCFI130:
	pushl	%esi
.LCFI131:
	pushl	%ebx
.LCFI132:
	subl	$268, %esp
.LCFI133:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2608 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	.loc 1 2609 0
	movl	$0, -24(%ebp)
	movl	$0, -20(%ebp)
	.loc 1 2610 0
	movl	16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -216(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L877
	movl	$64, -212(%ebp)
	jmp	.L879
.L877:
	movl	$32, -212(%ebp)
.L879:
	movl	-212(%ebp), %eax
	cmpl	%eax, -216(%ebp)
	jae	.L880
	movl	16(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -224(%ebp)
	movl	$0, -220(%ebp)
	jmp	.L882
.L880:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L883
	movl	$64, -208(%ebp)
	movl	$0, -204(%ebp)
	jmp	.L885
.L883:
	movl	$32, -208(%ebp)
	movl	$0, -204(%ebp)
.L885:
	movl	-208(%ebp), %edx
	movl	-204(%ebp), %ecx
	movl	%edx, -224(%ebp)
	movl	%ecx, -220(%ebp)
.L882:
	movl	-224(%ebp), %esi
	movl	-220(%ebp), %edi
	movl	%esi, -56(%ebp)
	movl	%edi, -52(%ebp)
	.loc 1 2611 0
	movl	$0, -32(%ebp)
	movl	$0, -28(%ebp)
	.loc 1 2613 0
	cmpl	$0, 8(%ebp)
	jne	.L886
	.loc 1 2615 0
	movl	16(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	16(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movzbl	%al, %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movl	16(%ebp), %eax
	movzbl	38(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	sall	$2, %eax
	movl	%edx, %edi
	orl	%eax, %edi
	movl	%edi, -200(%ebp)
	movl	16(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L888
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L888
	movl	$1, -196(%ebp)
	jmp	.L891
.L888:
	movl	$0, -196(%ebp)
.L891:
	movl	-196(%ebp), %eax
	sall	$3, %eax
	orl	-200(%ebp), %eax
	orl	$1, %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, 8(%ebp)
	.loc 1 2619 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
.L886:
	.loc 1 2625 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L892
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -192(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L894
	movl	$8, -188(%ebp)
	jmp	.L896
.L894:
	movl	$4, -188(%ebp)
.L896:
	movl	-188(%ebp), %eax
	cmpl	%eax, -192(%ebp)
	jge	.L892
	.loc 1 2627 0
	movl	16(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	%edx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
.L892:
	.loc 1 2633 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L898
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L900
	movl	$8, -184(%ebp)
	movl	$0, -180(%ebp)
	jmp	.L902
.L900:
	movl	$4, -184(%ebp)
	movl	$0, -180(%ebp)
.L902:
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	-184(%ebp), %esi
	movl	-180(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L898
	.loc 1 2635 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L904
	movl	$64, -176(%ebp)
	movl	$0, -172(%ebp)
	jmp	.L906
.L904:
	movl	$32, -176(%ebp)
	movl	$0, -172(%ebp)
.L906:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L907
	movl	$8, -168(%ebp)
	movl	$0, -164(%ebp)
	jmp	.L909
.L907:
	movl	$4, -168(%ebp)
	movl	$0, -164(%ebp)
.L909:
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	-168(%ebp), %esi
	movl	-164(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3@PLT
	shldl	$3, %eax, %edx
	sall	$3, %eax
	movl	-176(%ebp), %esi
	movl	-172(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
.L898:
	.loc 1 2643 0
	movl	$0, -48(%ebp)
	movl	$0, -44(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 2644 0
	jmp	.L910
.L911:
	.loc 1 2650 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L912
	movl	$64, -160(%ebp)
	movl	$0, -156(%ebp)
	jmp	.L914
.L912:
	movl	$32, -160(%ebp)
	movl	$0, -156(%ebp)
.L914:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	-160(%ebp), %esi
	movl	-156(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L915
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	xorl	-28(%ebp), %ecx
	xorl	-32(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L917
.L915:
	.loc 1 2652 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -148(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L918
	movl	$64, -144(%ebp)
	movl	$0, -140(%ebp)
	jmp	.L920
.L918:
	movl	$32, -144(%ebp)
	movl	$0, -140(%ebp)
.L920:
	movl	-144(%ebp), %eax
	movl	-140(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__udivdi3@PLT
	movl	-148(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -24(%ebp)
.L917:
	.loc 1 2657 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L921
	movl	$64, -136(%ebp)
	movl	$0, -132(%ebp)
	jmp	.L923
.L921:
	movl	$32, -136(%ebp)
	movl	$0, -132(%ebp)
.L923:
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	-136(%ebp), %esi
	movl	-132(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L924
	.loc 1 2658 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L926
	movl	$64, -128(%ebp)
	movl	$0, -124(%ebp)
	jmp	.L928
.L926:
	movl	$32, -128(%ebp)
	movl	$0, -124(%ebp)
.L928:
	movl	-128(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__udivdi3@PLT
	movl	$52, 12(%esp)
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -20(%ebp)
.L924:
	.loc 1 2662 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L929
	movl	$64, -120(%ebp)
	movl	$0, -116(%ebp)
	jmp	.L931
.L929:
	movl	$32, -120(%ebp)
	movl	$0, -116(%ebp)
.L931:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L932
	movl	$64, -112(%ebp)
	movl	$0, -108(%ebp)
	jmp	.L934
.L932:
	movl	$32, -112(%ebp)
	movl	$0, -108(%ebp)
.L934:
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L935
	movl	$64, -96(%ebp)
	movl	$0, -92(%ebp)
	jmp	.L937
.L935:
	movl	$32, -96(%ebp)
	movl	$0, -92(%ebp)
.L937:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	-96(%ebp), %esi
	movl	-92(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3@PLT
	movl	-112(%ebp), %esi
	movl	-108(%ebp), %edi
	movl	%esi, 36(%esp)
	movl	%edi, 40(%esp)
	movl	-104(%ebp), %edi
	movl	%edi, 32(%esp)
	movl	-100(%ebp), %ecx
	movl	%ecx, 28(%esp)
	movl	$0, 24(%esp)
	movl	$1, 20(%esp)
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_bit_field@PLT
	movl	%eax, -88(%ebp)
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L938
	movl	$64, -80(%ebp)
	movl	$0, -76(%ebp)
	jmp	.L940
.L938:
	movl	$32, -80(%ebp)
	movl	$0, -76(%ebp)
.L940:
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	-80(%ebp), %esi
	movl	-76(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3@PLT
	movl	-120(%ebp), %esi
	movl	-116(%ebp), %edi
	movl	%esi, 28(%esp)
	movl	%edi, 32(%esp)
	movl	-88(%ebp), %edi
	movl	%edi, 24(%esp)
	movl	-84(%ebp), %ecx
	movl	%ecx, 20(%esp)
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	store_bit_field@PLT
	.loc 1 2645 0
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	addl	%eax, -48(%ebp)
	adcl	%edx, -44(%ebp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	addl	%eax, -40(%ebp)
	adcl	%edx, -36(%ebp)
.L910:
	.loc 1 2644 0
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$3, %esi, %edi
	sall	$3, %esi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-68(%ebp), %edi
	cmpl	-44(%ebp), %edi
	ja	.L911
	movl	-68(%ebp), %eax
	cmpl	-44(%ebp), %eax
	jb	.L942
	movl	-72(%ebp), %edx
	cmpl	-48(%ebp), %edx
	ja	.L911
.L942:
	.loc 1 2670 0
	movl	8(%ebp), %eax
	.loc 1 2671 0
	addl	$268, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE42:
	.size	copy_blkmode_from_reg, .-copy_blkmode_from_reg
	.section	.rodata
	.type	__FUNCTION__.17661, @object
	.size	__FUNCTION__.17661, 8
__FUNCTION__.17661:
	.string	"use_reg"
	.text
.globl use_reg
	.type	use_reg, @function
use_reg:
.LFB43:
	.loc 1 2679 0
	pushl	%ebp
.LCFI134:
	movl	%esp, %ebp
.LCFI135:
	pushl	%esi
.LCFI136:
	pushl	%ebx
.LCFI137:
	subl	$16, %esp
.LCFI138:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2680 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L945
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L947
.L945:
	.loc 1 2682 0
	leal	__FUNCTION__.17661@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2682, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L947:
	.loc 1 2684 0
	movl	8(%ebp), %eax
	movl	(%eax), %esi
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$58, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 2687 0
	addl	$16, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE43:
	.size	use_reg, .-use_reg
	.section	.rodata
	.type	__FUNCTION__.17676, @object
	.size	__FUNCTION__.17676, 9
__FUNCTION__.17676:
	.string	"use_regs"
	.text
.globl use_regs
	.type	use_regs, @function
use_regs:
.LFB44:
	.loc 1 2697 0
	pushl	%ebp
.LCFI139:
	movl	%esp, %ebp
.LCFI140:
	pushl	%ebx
.LCFI141:
	subl	$36, %esp
.LCFI142:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2700 0
	movl	16(%ebp), %eax
	addl	12(%ebp), %eax
	cmpl	$176, %eax
	jle	.L950
	.loc 1 2701 0
	leal	__FUNCTION__.17676@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2701, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L950:
	.loc 1 2703 0
	movl	$0, -8(%ebp)
	jmp	.L952
.L953:
	.loc 1 2704 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	12(%eax), %eax
	movl	48(%eax), %edx
	movl	-8(%ebp), %eax
	addl	12(%ebp), %eax
	sall	$2, %eax
	leal	(%edx,%eax), %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	use_reg@PLT
	.loc 1 2703 0
	addl	$1, -8(%ebp)
.L952:
	movl	-8(%ebp), %eax
	cmpl	16(%ebp), %eax
	jl	.L953
	.loc 1 2705 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE44:
	.size	use_regs, .-use_regs
.globl use_group_regs
	.type	use_group_regs, @function
use_group_regs:
.LFB45:
	.loc 1 2715 0
	pushl	%ebp
.LCFI143:
	movl	%esp, %ebp
.LCFI144:
	pushl	%ebx
.LCFI145:
	subl	$36, %esp
.LCFI146:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2718 0
	movl	$0, -12(%ebp)
	jmp	.L957
.L958:
.LBB36:
	.loc 1 2720 0
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	4(%edx,%eax,4), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 2725 0
	cmpl	$0, -8(%ebp)
	je	.L959
	movl	-8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L959
	.loc 1 2726 0
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	use_reg@PLT
.L959:
.LBE36:
	.loc 1 2718 0
	addl	$1, -12(%ebp)
.L957:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %eax
	cmpl	-12(%ebp), %eax
	jg	.L958
	.loc 1 2728 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE45:
	.size	use_group_regs, .-use_group_regs
	.section	.rodata
	.type	__FUNCTION__.17738, @object
	.size	__FUNCTION__.17738, 20
__FUNCTION__.17738:
	.string	"can_store_by_pieces"
	.text
.globl can_store_by_pieces
	.type	can_store_by_pieces, @function
can_store_by_pieces:
.LFB46:
	.loc 1 2743 0
	pushl	%ebp
.LCFI147:
	movl	%esp, %ebp
.LCFI148:
	pushl	%ebx
.LCFI149:
	subl	$132, %esp
.LCFI150:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 2745 0
	movl	$0, -40(%ebp)
	movl	$0, -36(%ebp)
	.loc 1 2751 0
	movl	-64(%ebp), %eax
	orl	-60(%ebp), %eax
	testl	%eax, %eax
	jne	.L965
	.loc 1 2752 0
	movl	$1, -116(%ebp)
	jmp	.L967
.L965:
	.loc 1 2754 0
	movl	24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -112(%ebp)
	movl	%edx, -108(%ebp)
	cmpl	$0, -108(%ebp)
	jb	.L968
	cmpl	$0, -108(%ebp)
	ja	.L970
	cmpl	$1, -112(%ebp)
	jbe	.L968
.L970:
	.loc 1 2755 0
	movl	$0, -116(%ebp)
	jmp	.L967
.L968:
	.loc 1 2757 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L971
	movl	$64, -100(%ebp)
	jmp	.L973
.L971:
	movl	$32, -100(%ebp)
.L973:
	movl	-100(%ebp), %eax
	cmpl	24(%ebp), %eax
	jb	.L974
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L976
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L978
.L976:
	movl	$128, -96(%ebp)
	jmp	.L979
.L978:
	movl	$64, -96(%ebp)
.L979:
	movl	-96(%ebp), %edx
	cmpl	24(%ebp), %edx
	ja	.L980
.L974:
	.loc 1 2759 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L981
	movl	$64, -92(%ebp)
	jmp	.L983
.L981:
	movl	$32, -92(%ebp)
.L983:
	movl	-92(%ebp), %eax
	movl	%eax, 24(%ebp)
.L980:
	.loc 1 2764 0
	movl	$0, -20(%ebp)
	.loc 1 2765 0
	jmp	.L984
.L985:
	.loc 1 2768 0
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	.loc 1 2769 0
	movl	$0, -32(%ebp)
	.loc 1 2770 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L986
	movl	$9, -88(%ebp)
	movl	$0, -84(%ebp)
	jmp	.L988
.L986:
	movl	$5, -88(%ebp)
	movl	$0, -84(%ebp)
.L988:
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	.loc 1 2771 0
	jmp	.L989
.L990:
	.loc 1 2773 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 2774 0
	jmp	.L991
.L992:
	.loc 1 2775 0
	movl	-28(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %edx
	movl	%edx, -80(%ebp)
	movl	$0, -76(%ebp)
	movl	-76(%ebp), %eax
	cmpl	-52(%ebp), %eax
	ja	.L993
	movl	-76(%ebp), %edx
	cmpl	-52(%ebp), %edx
	jb	.L995
	movl	-80(%ebp), %eax
	cmpl	-56(%ebp), %eax
	jae	.L993
.L995:
	.loc 1 2776 0
	movl	-28(%ebp), %eax
	movl	%eax, -32(%ebp)
.L993:
	.loc 1 2774 0
	movl	-28(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
.L991:
	cmpl	$0, -28(%ebp)
	jne	.L992
	.loc 1 2778 0
	cmpl	$0, -32(%ebp)
	je	.L997
	.loc 1 2781 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -24(%ebp)
	.loc 1 2782 0
	cmpl	$529, -24(%ebp)
	je	.L999
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	24(%ebp), %eax
	ja	.L999
.LBB37:
	.loc 1 2785 0
	movl	-32(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 2787 0
	jmp	.L1002
.L1003:
	.loc 1 2789 0
	cmpl	$0, -20(%ebp)
	je	.L1004
	.loc 1 2790 0
	movl	-12(%ebp), %eax
	movl	$0, %edx
	subl	%eax, -40(%ebp)
	sbbl	%edx, -36(%ebp)
.L1004:
	.loc 1 2792 0
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	movl	16(%ebp), %eax
	call	*%eax
	movl	%eax, -16(%ebp)
	.loc 1 2793 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L1006
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L1008
.L1006:
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1009
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1009
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1008
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1008
.L1009:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1013
	movl	-16(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	jne	.L1013
.L1008:
	.loc 1 2794 0
	movl	$0, -116(%ebp)
	jmp	.L967
.L1013:
	.loc 1 2796 0
	cmpl	$0, -20(%ebp)
	jne	.L1015
	.loc 1 2797 0
	movl	-12(%ebp), %eax
	movl	$0, %edx
	addl	%eax, -40(%ebp)
	adcl	%edx, -36(%ebp)
.L1015:
	.loc 1 2799 0
	movl	-12(%ebp), %eax
	movl	$0, %edx
	subl	%eax, -48(%ebp)
	sbbl	%edx, -44(%ebp)
.L1002:
	.loc 1 2787 0
	movl	-12(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	movl	-68(%ebp), %edx
	cmpl	-44(%ebp), %edx
	jb	.L1003
	movl	-68(%ebp), %eax
	cmpl	-44(%ebp), %eax
	ja	.L999
	movl	-72(%ebp), %edx
	cmpl	-48(%ebp), %edx
	jbe	.L1003
.L999:
.LBE37:
	.loc 1 2803 0
	movl	-32(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
.L989:
	.loc 1 2771 0
	cmpl	$0, -52(%ebp)
	ja	.L990
	cmpl	$0, -52(%ebp)
	jb	.L997
	cmpl	$1, -56(%ebp)
	ja	.L990
.L997:
	.loc 1 2807 0
	movl	-48(%ebp), %eax
	orl	-44(%ebp), %eax
	testl	%eax, %eax
	je	.L1019
	.loc 1 2808 0
	leal	__FUNCTION__.17738@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2808, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1019:
	.loc 1 2766 0
	addl	$1, -20(%ebp)
.L984:
	.loc 1 2765 0
	cmpl	$0, -20(%ebp)
	jle	.L985
	.loc 1 2811 0
	movl	$1, -116(%ebp)
.L967:
	movl	-116(%ebp), %eax
	.loc 1 2812 0
	addl	$132, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE46:
	.size	can_store_by_pieces, .-can_store_by_pieces
	.section	.rodata
	.type	__FUNCTION__.17842, @object
	.size	__FUNCTION__.17842, 16
__FUNCTION__.17842:
	.string	"store_by_pieces"
	.text
.globl store_by_pieces
	.type	store_by_pieces, @function
store_by_pieces:
.LFB47:
	.loc 1 2830 0
	pushl	%ebp
.LCFI151:
	movl	%esp, %ebp
.LCFI152:
	pushl	%esi
.LCFI153:
	pushl	%ebx
.LCFI154:
	subl	$96, %esp
.LCFI155:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	12(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 2833 0
	movl	-64(%ebp), %eax
	orl	-60(%ebp), %eax
	testl	%eax, %eax
	jne	.L1024
	.loc 1 2835 0
	cmpl	$2, 32(%ebp)
	jne	.L1026
	.loc 1 2836 0
	leal	__FUNCTION__.17842@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2836, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1026:
	.loc 1 2837 0
	movl	8(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L1028
.L1024:
	.loc 1 2840 0
	movl	28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -72(%ebp)
	movl	%edx, -68(%ebp)
	cmpl	$0, -68(%ebp)
	jb	.L1029
	cmpl	$0, -68(%ebp)
	ja	.L1031
	cmpl	$1, -72(%ebp)
	jbe	.L1029
.L1031:
	.loc 1 2841 0
	leal	__FUNCTION__.17842@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2841, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1029:
	.loc 1 2842 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 8(%ebp)
	.loc 1 2843 0
	movl	20(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 2844 0
	movl	24(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 2845 0
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, -40(%ebp)
	movl	%edx, -36(%ebp)
	.loc 1 2846 0
	movl	8(%ebp), %eax
	movl	%eax, -56(%ebp)
	.loc 1 2847 0
	movl	28(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	store_by_pieces_1
	.loc 1 2848 0
	cmpl	$0, 32(%ebp)
	je	.L1032
.LBB38:
	.loc 1 2852 0
	movl	-16(%ebp), %eax
	testl	%eax, %eax
	je	.L1034
	.loc 1 2853 0
	leal	__FUNCTION__.17842@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2853, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1034:
	.loc 1 2854 0
	movl	-48(%ebp), %eax
	testl	%eax, %eax
	je	.L1036
	.loc 1 2856 0
	cmpl	$2, 32(%ebp)
	jne	.L1038
	.loc 1 2861 0
	movl	-52(%ebp), %eax
	movl	$-1, 4(%esp)
	movl	$-1, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, (%esp)
	call	copy_addr_to_reg@PLT
	movl	%eax, -52(%ebp)
.L1038:
	.loc 1 2864 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %esi
	movl	$1, 20(%esp)
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%ecx, 8(%esp)
	movl	$2, 4(%esp)
	movl	%esi, (%esp)
	call	adjust_automodify_address_1@PLT
	movl	%eax, -12(%ebp)
	jmp	.L1040
.L1036:
	.loc 1 2869 0
	cmpl	$2, 32(%ebp)
	jne	.L1041
	.loc 1 2870 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
.L1041:
	.loc 1 2871 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	-56(%ebp), %ecx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	$2, 4(%esp)
	movl	%ecx, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -12(%ebp)
.L1040:
	.loc 1 2873 0
	movl	-12(%ebp), %eax
	movl	%eax, -76(%ebp)
	jmp	.L1028
.L1032:
.LBE38:
	.loc 1 2876 0
	movl	-56(%ebp), %eax
	movl	%eax, -76(%ebp)
.L1028:
	movl	-76(%ebp), %eax
	.loc 1 2877 0
	addl	$96, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE47:
	.size	store_by_pieces, .-store_by_pieces
	.type	clear_by_pieces, @function
clear_by_pieces:
.LFB48:
	.loc 1 2888 0
	pushl	%ebp
.LCFI156:
	movl	%esp, %ebp
.LCFI157:
	pushl	%ebx
.LCFI158:
	subl	$68, %esp
.LCFI159:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	12(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -60(%ebp)
	.loc 1 2891 0
	movl	-64(%ebp), %eax
	orl	-60(%ebp), %eax
	testl	%eax, %eax
	je	.L1047
	.loc 1 2894 0
	leal	clear_by_pieces_1@GOTOFF(%ebx), %eax
	movl	%eax, -20(%ebp)
	.loc 1 2895 0
	movl	$0, -16(%ebp)
	.loc 1 2896 0
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, -36(%ebp)
	movl	%edx, -32(%ebp)
	.loc 1 2897 0
	movl	8(%ebp), %eax
	movl	%eax, -52(%ebp)
	.loc 1 2898 0
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	store_by_pieces_1
.L1047:
	.loc 1 2899 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE48:
	.size	clear_by_pieces, .-clear_by_pieces
	.type	clear_by_pieces_1, @function
clear_by_pieces_1:
.LFB49:
	.loc 1 2909 0
	pushl	%ebp
.LCFI160:
	movl	%esp, %ebp
.LCFI161:
	subl	$8, %esp
.LCFI162:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	movl	12(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -4(%ebp)
	.loc 1 2910 0
	movl	const_int_rtx@GOT(%ecx), %eax
	movl	256(%eax), %eax
	.loc 1 2911 0
	leave
	ret
.LFE49:
	.size	clear_by_pieces_1, .-clear_by_pieces_1
	.section	.rodata
	.type	__FUNCTION__.17915, @object
	.size	__FUNCTION__.17915, 18
__FUNCTION__.17915:
	.string	"store_by_pieces_1"
	.text
	.type	store_by_pieces_1, @function
store_by_pieces_1:
.LFB50:
	.loc 1 2922 0
	pushl	%ebp
.LCFI163:
	movl	%esp, %ebp
.LCFI164:
	pushl	%ebx
.LCFI165:
	subl	$116, %esp
.LCFI166:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 2923 0
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 2924 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1051
	movl	$9, -96(%ebp)
	movl	$0, -92(%ebp)
	jmp	.L1053
.L1051:
	movl	$5, -96(%ebp)
	movl	$0, -92(%ebp)
.L1053:
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 2925 0
	movl	$0, -20(%ebp)
	.loc 1 2928 0
	movl	8(%ebp), %eax
	movl	$0, 24(%eax)
	movl	$0, 28(%eax)
	.loc 1 2929 0
	movl	8(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%edx)
	.loc 1 2930 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$107, %ax
	je	.L1054
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L1054
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$109, %ax
	je	.L1054
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L1058
.L1054:
	movl	$1, -88(%ebp)
	jmp	.L1059
.L1058:
	movl	$0, -88(%ebp)
.L1059:
	movl	8(%ebp), %eax
	movl	-88(%ebp), %edx
	movl	%edx, 8(%eax)
	.loc 1 2934 0
	movl	8(%ebp), %eax
	movl	$0, 12(%eax)
	.loc 1 2935 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$106, %ax
	je	.L1060
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$108, %ax
	jne	.L1062
.L1060:
	movl	$1, -84(%ebp)
	jmp	.L1063
.L1062:
	movl	$0, -84(%ebp)
.L1063:
	movl	8(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%edx, 40(%eax)
	.loc 1 2937 0
	movl	8(%ebp), %eax
	movl	40(%eax), %eax
	testl	%eax, %eax
	je	.L1064
	.loc 1 2938 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%eax), %eax
	movl	8(%ebp), %ecx
	movl	%eax, 24(%ecx)
	movl	%edx, 28(%ecx)
.L1064:
	.loc 1 2943 0
	movl	8(%ebp), %eax
	movl	8(%eax), %eax
	testl	%eax, %eax
	jne	.L1066
	movl	8(%ebp), %eax
	movl	16(%eax), %edx
	movl	20(%eax), %ecx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	cmpl	$0, -76(%ebp)
	jb	.L1066
	cmpl	$0, -76(%ebp)
	ja	.L1069
	cmpl	$2, -80(%ebp)
	jbe	.L1066
.L1069:
	.loc 1 2947 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 2948 0
	jmp	.L1070
.L1071:
	.loc 1 2949 0
	movl	-16(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
	movl	-68(%ebp), %edx
	cmpl	-28(%ebp), %edx
	ja	.L1072
	movl	-68(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jb	.L1074
	movl	-72(%ebp), %edx
	cmpl	-32(%ebp), %edx
	jae	.L1072
.L1074:
	.loc 1 2950 0
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1072:
	.loc 1 2948 0
	movl	-16(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
.L1070:
	cmpl	$0, -16(%ebp)
	jne	.L1071
	.loc 1 2967 0
	movl	8(%ebp), %eax
	movl	8(%eax), %eax
	testl	%eax, %eax
	jne	.L1066
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1077
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1066
.L1077:
	.loc 1 2968 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_addr_to_reg@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
.L1066:
	.loc 1 2971 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1085
	movl	$64, -60(%ebp)
	jmp	.L1087
.L1085:
	movl	$32, -60(%ebp)
.L1087:
	movl	-60(%ebp), %eax
	cmpl	12(%ebp), %eax
	jb	.L1088
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1090
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L1092
.L1090:
	movl	$128, -56(%ebp)
	jmp	.L1093
.L1092:
	movl	$64, -56(%ebp)
.L1093:
	movl	-56(%ebp), %edx
	cmpl	12(%ebp), %edx
	ja	.L1098
.L1088:
	.loc 1 2973 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1095
	movl	$64, -52(%ebp)
	jmp	.L1097
.L1095:
	movl	$32, -52(%ebp)
.L1097:
	movl	-52(%ebp), %eax
	movl	%eax, 12(%ebp)
	.loc 1 2978 0
	jmp	.L1098
.L1099:
	.loc 1 2980 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 2981 0
	jmp	.L1100
.L1101:
	.loc 1 2982 0
	movl	-16(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %edx
	movl	%edx, -48(%ebp)
	movl	$0, -44(%ebp)
	movl	-44(%ebp), %eax
	cmpl	-28(%ebp), %eax
	ja	.L1102
	movl	-44(%ebp), %edx
	cmpl	-28(%ebp), %edx
	jb	.L1104
	movl	-48(%ebp), %eax
	cmpl	-32(%ebp), %eax
	jae	.L1102
.L1104:
	.loc 1 2983 0
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1102:
	.loc 1 2981 0
	movl	-16(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
.L1100:
	cmpl	$0, -16(%ebp)
	jne	.L1101
	.loc 1 2985 0
	cmpl	$0, -20(%ebp)
	je	.L1106
	.loc 1 2988 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -12(%ebp)
	.loc 1 2989 0
	cmpl	$529, -12(%ebp)
	je	.L1108
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	12(%ebp), %eax
	ja	.L1108
	.loc 1 2990 0
	movl	-12(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_by_pieces_2
.L1108:
	.loc 1 2992 0
	movl	-20(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
.L1098:
	.loc 1 2978 0
	cmpl	$0, -28(%ebp)
	ja	.L1099
	cmpl	$0, -28(%ebp)
	jb	.L1106
	cmpl	$1, -32(%ebp)
	ja	.L1099
.L1106:
	.loc 1 2996 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L1114
	.loc 1 2997 0
	leal	__FUNCTION__.17915@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$2997, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1114:
	.loc 1 2998 0
	addl	$116, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE50:
	.size	store_by_pieces_1, .-store_by_pieces_1
	.type	store_by_pieces_2, @function
store_by_pieces_2:
.LFB51:
	.loc 1 3009 0
	pushl	%ebp
.LCFI167:
	movl	%esp, %ebp
.LCFI168:
	pushl	%edi
.LCFI169:
	pushl	%esi
.LCFI170:
	pushl	%ebx
.LCFI171:
	subl	$76, %esp
.LCFI172:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3010 0
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 3013 0
	jmp	.L1116
.L1117:
	.loc 1 3015 0
	movl	16(%ebp), %eax
	movl	40(%eax), %eax
	testl	%eax, %eax
	je	.L1118
	.loc 1 3016 0
	movl	16(%ebp), %eax
	movl	24(%eax), %edx
	movl	28(%eax), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	-56(%ebp), %esi
	movl	-52(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	16(%ebp), %ecx
	movl	%eax, 24(%ecx)
	movl	%edx, 28(%ecx)
.L1118:
	.loc 1 3018 0
	movl	16(%ebp), %eax
	movl	8(%eax), %eax
	testl	%eax, %eax
	je	.L1120
	.loc 1 3019 0
	movl	16(%ebp), %eax
	movl	24(%eax), %edx
	movl	28(%eax), %ecx
	movl	16(%ebp), %eax
	movl	4(%eax), %esi
	movl	16(%ebp), %eax
	movl	(%eax), %edi
	movl	$1, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edi, (%esp)
	call	adjust_automodify_address_1@PLT
	movl	%eax, -24(%ebp)
	jmp	.L1122
.L1120:
	.loc 1 3022 0
	movl	16(%ebp), %eax
	movl	24(%eax), %edx
	movl	28(%eax), %ecx
	movl	16(%ebp), %eax
	movl	(%eax), %esi
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%esi, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -24(%ebp)
.L1122:
	.loc 1 3028 0
	movl	16(%ebp), %eax
	movl	32(%eax), %edi
	movl	16(%ebp), %eax
	movl	24(%eax), %edx
	movl	28(%eax), %ecx
	movl	16(%ebp), %eax
	movl	36(%eax), %esi
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, (%esp)
	call	*%edi
	movl	%eax, -20(%ebp)
	.loc 1 3029 0
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	movl	8(%ebp), %eax
	call	*%eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 3034 0
	movl	16(%ebp), %eax
	movl	40(%eax), %eax
	testl	%eax, %eax
	jne	.L1123
	.loc 1 3035 0
	movl	16(%ebp), %eax
	movl	24(%eax), %esi
	movl	28(%eax), %edi
	movl	-28(%ebp), %eax
	movl	$0, %edx
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	16(%ebp), %ecx
	movl	%eax, 24(%ecx)
	movl	%edx, 28(%ecx)
.L1123:
	.loc 1 3037 0
	movl	16(%ebp), %eax
	movl	16(%eax), %edx
	movl	20(%eax), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	movl	-28(%ebp), %eax
	movl	$0, %edx
	movl	-56(%ebp), %esi
	movl	-52(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	16(%ebp), %ecx
	movl	%eax, 16(%ecx)
	movl	%edx, 20(%ecx)
.L1116:
	.loc 1 3013 0
	movl	16(%ebp), %eax
	movl	16(%eax), %edx
	movl	20(%eax), %ecx
	movl	%edx, -48(%ebp)
	movl	%ecx, -44(%ebp)
	movl	-28(%ebp), %esi
	movl	$0, %edi
	movl	%esi, -40(%ebp)
	movl	%edi, -36(%ebp)
	movl	-36(%ebp), %edi
	cmpl	%edi, -44(%ebp)
	ja	.L1117
	movl	-36(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	jb	.L1127
	movl	-40(%ebp), %edx
	cmpl	%edx, -48(%ebp)
	jae	.L1117
.L1127:
	.loc 1 3039 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE51:
	.size	store_by_pieces_2, .-store_by_pieces_2
.globl clear_storage
	.type	clear_storage, @function
clear_storage:
.LFB52:
	.loc 1 3048 0
	pushl	%ebp
.LCFI173:
	movl	%esp, %ebp
.LCFI174:
	pushl	%edi
.LCFI175:
	pushl	%esi
.LCFI176:
	pushl	%ebx
.LCFI177:
	subl	$76, %esp
.LCFI178:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3049 0
	movl	$0, -24(%ebp)
	.loc 1 3051 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1129
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1131
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L1133
.L1131:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1134
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -52(%ebp)
	jmp	.L1136
.L1134:
	movl	$8, -52(%ebp)
.L1136:
	movl	-52(%ebp), %eax
	movl	%eax, -56(%ebp)
.L1133:
	movl	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1137
.L1129:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -60(%ebp)
.L1137:
	movl	-60(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 3055 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1138
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1138
	movl	12(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1138
	.loc 1 3058 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 3055 0
	jmp	.L1142
.L1138:
	.loc 1 3061 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3062 0
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 12(%ebp)
	.loc 1 3064 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	12(%ebp), %eax
	je	.L1142
	.loc 1 3066 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1144
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	movl	optimize_size@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1146
	movl	$3, -40(%ebp)
	movl	$0, -36(%ebp)
	jmp	.L1148
.L1146:
	movl	$15, -40(%ebp)
	movl	$0, -36(%ebp)
.L1148:
	movl	-36(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	ja	.L1144
	movl	-36(%ebp), %eax
	cmpl	%eax, -44(%ebp)
	jb	.L1150
	movl	-40(%ebp), %eax
	cmpl	%eax, -48(%ebp)
	jae	.L1144
.L1150:
	.loc 1 3068 0
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_by_pieces
	.loc 1 3066 0
	jmp	.L1142
.L1144:
	.loc 1 3069 0
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage_via_clrstr
	xorl	$1, %eax
	testb	%al, %al
	je	.L1142
	.loc 1 3072 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage_via_libcall
	movl	%eax, -24(%ebp)
.L1142:
	.loc 1 3075 0
	movl	-24(%ebp), %eax
	.loc 1 3076 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE52:
	.size	clear_storage, .-clear_storage
	.type	clear_storage_via_clrstr, @function
clear_storage_via_clrstr:
.LFB53:
	.loc 1 3085 0
	pushl	%ebp
.LCFI179:
	movl	%esp, %ebp
.LCFI180:
	pushl	%edi
.LCFI181:
	pushl	%esi
.LCFI182:
	pushl	%ebx
.LCFI183:
	subl	$92, %esp
.LCFI184:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3090 0
	movl	16(%ebp), %eax
	shrl	$3, %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -44(%ebp)
	.loc 1 3093 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L1154
.L1155:
.LBB39:
	.loc 1 3096 0
	movl	-40(%ebp), %eax
	movl	clrstr_optab@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -36(%ebp)
	.loc 1 3099 0
	cmpl	$529, -36(%ebp)
	je	.L1156
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1158
	movl	12(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	movl	-40(%ebp), %edx
	movl	mode_mask_array@GOT(%ebx), %eax
	leal	(%eax,%edx,8), %edx
	movl	(%edx), %eax
	movl	4(%edx), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shrdl	$1, %edi, %esi
	shrl	%edi
	movl	%esi, -72(%ebp)
	movl	%edi, -68(%ebp)
	movl	-68(%ebp), %edi
	cmpl	%edi, -76(%ebp)
	jb	.L1160
	movl	-68(%ebp), %eax
	cmpl	%eax, -76(%ebp)
	ja	.L1158
	movl	-72(%ebp), %esi
	cmpl	%esi, -80(%ebp)
	jbe	.L1160
.L1158:
	movl	-40(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -60(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1162
	movl	$64, -56(%ebp)
	jmp	.L1164
.L1162:
	movl	$32, -56(%ebp)
.L1164:
	movl	-56(%ebp), %edi
	cmpl	%edi, -60(%ebp)
	jl	.L1156
.L1160:
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L1165
	movl	$52, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	je	.L1156
.L1165:
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	je	.L1167
	movl	$0, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	je	.L1156
.L1167:
.LBB40:
	.loc 1 3114 0
	call	get_last_insn@PLT
	movl	%eax, -24(%ebp)
	.loc 1 3117 0
	movl	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -28(%ebp)
	.loc 1 3118 0
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 3119 0
	cmpl	$0, -32(%ebp)
	je	.L1169
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	movl	-32(%ebp), %eax
	call	*%eax
	testl	%eax, %eax
	jne	.L1169
	.loc 1 3120 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -28(%ebp)
.L1169:
	.loc 1 3122 0
	movl	-36(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, -20(%ebp)
	.loc 1 3123 0
	cmpl	$0, -20(%ebp)
	je	.L1172
	.loc 1 3125 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 3126 0
	movl	$1, -52(%ebp)
	jmp	.L1174
.L1172:
	.loc 1 3129 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	delete_insns_since@PLT
.L1156:
.LBE40:
.LBE39:
	.loc 1 3094 0
	movl	-40(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -40(%ebp)
.L1154:
	.loc 1 3093 0
	cmpl	$0, -40(%ebp)
	jne	.L1155
	.loc 1 3133 0
	movl	$0, -52(%ebp)
.L1174:
	movl	-52(%ebp), %eax
	.loc 1 3134 0
	addl	$92, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE53:
	.size	clear_storage_via_clrstr, .-clear_storage_via_clrstr
	.type	clear_storage_via_libcall, @function
clear_storage_via_libcall:
.LFB54:
	.loc 1 3142 0
	pushl	%ebp
.LCFI185:
	movl	%esp, %ebp
.LCFI186:
	pushl	%ebx
.LCFI187:
	subl	$68, %esp
.LCFI188:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3168 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1178
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1178
	movl	$5, -40(%ebp)
	jmp	.L1181
.L1178:
	movl	$4, -40(%ebp)
.L1181:
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3171 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 3174 0
	movl	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 12(%ebp)
	.loc 1 3175 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, 12(%ebp)
	.loc 1 3185 0
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, -20(%ebp)
	.loc 1 3187 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3191 0
	movl	$1, (%esp)
	call	clear_storage_libcall_fn
	movl	%eax, -24(%ebp)
	.loc 1 3192 0
	movl	$0, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	tree_cons@PLT
	movl	%eax, -28(%ebp)
	.loc 1 3194 0
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$0, (%esp)
	call	tree_cons@PLT
	movl	%eax, -28(%ebp)
	.loc 1 3195 0
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	tree_cons@PLT
	movl	%eax, -28(%ebp)
	.loc 1 3198 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	build_pointer_type@PLT
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$123, (%esp)
	call	build1@PLT
	movl	%eax, -32(%ebp)
	.loc 1 3199 0
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	$0, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$54, (%esp)
	call	build@PLT
	movl	%eax, -32(%ebp)
	.loc 1 3201 0
	movl	-32(%ebp), %edx
	movzbl	9(%edx), %eax
	orl	$1, %eax
	movb	%al, 9(%edx)
	.loc 1 3203 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -8(%ebp)
	.loc 1 3208 0
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L1182
	.loc 1 3209 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L1182:
	.loc 1 3211 0
	movl	-8(%ebp), %eax
	.loc 1 3212 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE54:
	.size	clear_storage_via_libcall, .-clear_storage_via_libcall
	.section	.rodata
.LC2:
	.string	"memset"
	.text
.globl init_block_clear_fn
	.type	init_block_clear_fn, @function
init_block_clear_fn:
.LFB55:
	.loc 1 3223 0
	pushl	%ebp
.LCFI189:
	movl	%esp, %ebp
.LCFI190:
	pushl	%esi
.LCFI191:
	pushl	%ebx
.LCFI192:
	subl	$48, %esp
.LCFI193:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3224 0
	movl	block_clear_fn@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L1186
.LBB41:
	.loc 1 3230 0
	movl	$6, 4(%esp)
	leal	.LC2@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	get_identifier_with_length@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3231 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	integer_types@GOT(%ebx), %eax
	movl	20(%eax), %ecx
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %esi
	movl	global_trees@GOT(%ebx), %eax
	movl	112(%eax), %eax
	movl	$0, 16(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	build_function_type_list@PLT
	movl	%eax, -12(%ebp)
	.loc 1 3242 0
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$31, (%esp)
	call	build_decl@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3243 0
	movl	-16(%ebp), %edx
	movzbl	33(%edx), %eax
	orl	$1, %eax
	movb	%al, 33(%edx)
	.loc 1 3244 0
	movl	-16(%ebp), %edx
	movzbl	10(%edx), %eax
	orl	$8, %eax
	movb	%al, 10(%edx)
	.loc 1 3245 0
	movl	-16(%ebp), %edx
	movzbl	35(%edx), %eax
	orl	$8, %eax
	movb	%al, 35(%edx)
	.loc 1 3246 0
	movl	-16(%ebp), %edx
	movzbl	10(%edx), %eax
	orl	$2, %eax
	movb	%al, 10(%edx)
	.loc 1 3248 0
	movl	-16(%ebp), %eax
	movl	%eax, block_clear_fn@GOTOFF(%ebx)
.L1186:
.LBE41:
	.loc 1 3251 0
	cmpl	$0, 8(%ebp)
	je	.L1190
	.loc 1 3253 0
	movl	block_clear_fn@GOTOFF(%ebx), %eax
	movl	$0, 88(%eax)
	.loc 1 3254 0
	movl	block_clear_fn@GOTOFF(%ebx), %esi
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_identifier@PLT
	movl	%eax, 76(%esi)
.L1190:
	.loc 1 3256 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE55:
	.size	init_block_clear_fn, .-init_block_clear_fn
	.local	emitted_extern.18309
	.comm	emitted_extern.18309,1,1
	.type	clear_storage_libcall_fn, @function
clear_storage_libcall_fn:
.LFB56:
	.loc 1 3261 0
	pushl	%ebp
.LCFI194:
	movl	%esp, %ebp
.LCFI195:
	pushl	%ebx
.LCFI196:
	subl	$20, %esp
.LCFI197:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3264 0
	movl	block_clear_fn@GOTOFF(%ebx), %eax
	testl	%eax, %eax
	jne	.L1192
	.loc 1 3265 0
	movl	$0, (%esp)
	call	init_block_clear_fn@PLT
.L1192:
	.loc 1 3267 0
	cmpl	$0, 8(%ebp)
	je	.L1194
	movzbl	emitted_extern.18309@GOTOFF(%ebx), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1194
	.loc 1 3269 0
	movb	$1, emitted_extern.18309@GOTOFF(%ebx)
	.loc 1 3270 0
	movl	block_clear_fn@GOTOFF(%ebx), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	.loc 1 3271 0
	movl	block_clear_fn@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	assemble_external@PLT
.L1194:
	.loc 1 3274 0
	movl	block_clear_fn@GOTOFF(%ebx), %eax
	.loc 1 3275 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE56:
	.size	clear_storage_libcall_fn, .-clear_storage_libcall_fn
	.section	.rodata
	.type	__FUNCTION__.18330, @object
	.size	__FUNCTION__.18330, 15
__FUNCTION__.18330:
	.string	"emit_move_insn"
	.text
.globl emit_move_insn
	.type	emit_move_insn, @function
emit_move_insn:
.LFB57:
	.loc 1 3287 0
	pushl	%ebp
.LCFI198:
	movl	%esp, %ebp
.LCFI199:
	pushl	%ebx
.LCFI200:
	subl	$36, %esp
.LCFI201:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3288 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
	.loc 1 3289 0
	movl	$0, -12(%ebp)
	.loc 1 3292 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3293 0
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 12(%ebp)
	.loc 1 3301 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L1199
	.loc 1 3303 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1201
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1199
.L1201:
	.loc 1 3305 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1209
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	jne	.L1209
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	compress_float_constant
	movl	%eax, -8(%ebp)
	cmpl	$0, -8(%ebp)
	je	.L1209
	.loc 1 3308 0
	movl	-8(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L1213
.L1209:
	.loc 1 3310 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L1214
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L1216
.L1214:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1217
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1217
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1216
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1216
.L1217:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1199
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	jne	.L1199
.L1216:
	.loc 1 3312 0
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 3313 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	force_const_mem@PLT
	movl	%eax, 12(%ebp)
	.loc 1 3318 0
	cmpl	$0, 12(%ebp)
	jne	.L1199
	.loc 1 3319 0
	movl	-12(%ebp), %eax
	movl	%eax, 12(%ebp)
.L1199:
	.loc 1 3325 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1223
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	jne	.L1225
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	push_operand@PLT
	testl	%eax, %eax
	je	.L1227
.L1225:
	movl	flag_force_addr@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1223
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1227
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1227
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1227
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1227
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1223
	movl	flag_pic@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1234
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	pic_address_needs_scratch@PLT
	testl	%eax, %eax
	jne	.L1223
.L1234:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1227
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1223
.L1227:
	.loc 1 3330 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, 8(%ebp)
.L1223:
	.loc 1 3332 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1237
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	je	.L1239
	movl	flag_force_addr@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1237
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1239
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1239
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1239
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1239
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1237
	movl	flag_pic@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1247
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	pic_address_needs_scratch@PLT
	testl	%eax, %eax
	jne	.L1237
.L1247:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1239
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1237
.L1239:
	.loc 1 3336 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, 12(%ebp)
.L1237:
	.loc 1 3338 0
	cmpl	$52, -16(%ebp)
	jne	.L1250
	.loc 1 3339 0
	leal	__FUNCTION__.18330@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3339, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1250:
	.loc 1 3341 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn_1@PLT
	movl	%eax, -8(%ebp)
	.loc 1 3343 0
	cmpl	$0, -12(%ebp)
	je	.L1252
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1252
	.loc 1 3344 0
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$4, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	set_unique_reg_note@PLT
.L1252:
	.loc 1 3346 0
	movl	-8(%ebp), %eax
	movl	%eax, -24(%ebp)
.L1213:
	movl	-24(%ebp), %eax
	.loc 1 3347 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE57:
	.size	emit_move_insn, .-emit_move_insn
	.section	.rodata
	.type	__FUNCTION__.18486, @object
	.size	__FUNCTION__.18486, 17
__FUNCTION__.18486:
	.string	"emit_move_insn_1"
	.align 4
.LC3:
	.string	"function using short complex types cannot be inline"
	.text
.globl emit_move_insn_1
	.type	emit_move_insn_1, @function
emit_move_insn_1:
.LFB58:
	.loc 1 3356 0
	pushl	%ebp
.LCFI202:
	movl	%esp, %ebp
.LCFI203:
	pushl	%edi
.LCFI204:
	pushl	%esi
.LCFI205:
	pushl	%ebx
.LCFI206:
	subl	$172, %esp
.LCFI207:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3357 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 3359 0
	movl	-104(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -96(%ebp)
	.loc 1 3361 0
	cmpl	$53, -104(%ebp)
	jbe	.L1257
	.loc 1 3362 0
	leal	__FUNCTION__.18486@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3362, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1257:
	.loc 1 3364 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	je	.L1259
	.loc 1 3365 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
	movl	%eax, -156(%ebp)
	jmp	.L1261
.L1259:
	.loc 1 3369 0
	cmpl	$6, -96(%ebp)
	je	.L1262
	cmpl	$5, -96(%ebp)
	jne	.L1264
.L1262:
	movl	-104(%ebp), %eax
	movl	inner_mode_array@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -100(%ebp)
	cmpl	$52, -100(%ebp)
	je	.L1264
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-100(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	je	.L1264
.LBB42:
	.loc 1 3375 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	push_operand@PLT
	movl	%eax, -92(%ebp)
	.loc 1 3431 0
	cmpl	$0, -92(%ebp)
	je	.L1267
	.loc 1 3436 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-100(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edi
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	*%edi
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 3439 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-100(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edi
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%eax, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	*%edi
	movl	%eax, (%esp)
	call	emit_insn@PLT
	jmp	.L1269
.L1267:
.LBB43:
	.loc 1 3465 0
	movl	-104(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -152(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1270
	movl	$128, -148(%ebp)
	jmp	.L1272
.L1270:
	movl	$64, -148(%ebp)
.L1272:
	movl	-148(%ebp), %eax
	cmpl	%eax, -152(%ebp)
	jge	.L1273
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	reload_completed@GOT(%ebx), %eax
	movl	(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1273
.LBB44:
	.loc 1 3469 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1276
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1276
	movl	$1, -144(%ebp)
	jmp	.L1279
.L1276:
	movl	$0, -144(%ebp)
.L1279:
	movl	-144(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 3471 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1280
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1280
	movl	$1, -140(%ebp)
	jmp	.L1283
.L1280:
	movl	$0, -140(%ebp)
.L1283:
	movl	-140(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 3473 0
	cmpl	$0, -72(%ebp)
	jne	.L1284
	cmpl	$0, -68(%ebp)
	je	.L1273
.L1284:
.LBB45:
	.loc 1 3476 0
	cmpl	$6, -96(%ebp)
	jne	.L1286
	movl	$2, -136(%ebp)
	jmp	.L1288
.L1286:
	movl	$1, -136(%ebp)
.L1288:
	movl	-136(%ebp), %eax
	movl	%eax, -64(%ebp)
	.loc 1 3479 0
	movl	-104(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %edx
	movl	$1, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -60(%ebp)
	.loc 1 3481 0
	cmpl	$52, -60(%ebp)
	je	.L1273
.LBB46:
	.loc 1 3484 0
	movl	-104(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_stack_temp@PLT
	movl	%eax, -56(%ebp)
	.loc 1 3485 0
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -52(%ebp)
	.loc 1 3487 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %edx
	leal	.LC3@GOTOFF(%ebx), %eax
	movl	%eax, 124(%edx)
	.loc 1 3490 0
	cmpl	$0, -72(%ebp)
	je	.L1290
.LBB47:
	.loc 1 3492 0
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_SUBREG@PLT
	movl	%eax, -48(%ebp)
	.loc 1 3494 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn_1@PLT
	.loc 1 3495 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn_1@PLT
	movl	%eax, -156(%ebp)
	jmp	.L1261
.L1290:
.LBE47:
.LBB48:
	.loc 1 3499 0
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_SUBREG@PLT
	movl	%eax, -44(%ebp)
	.loc 1 3501 0
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn_1@PLT
	.loc 1 3502 0
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn_1@PLT
	movl	%eax, -156(%ebp)
	jmp	.L1261
.L1273:
.LBE48:
.LBE46:
.LBE45:
.LBE44:
	.loc 1 3508 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%eax, -88(%ebp)
	.loc 1 3509 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%eax, -84(%ebp)
	.loc 1 3510 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, -80(%ebp)
	.loc 1 3511 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, -76(%ebp)
	.loc 1 3517 0
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L1292
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1292
	movl	reload_completed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1292
	movl	-88(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L1296
	movl	-80(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1292
.L1296:
	.loc 1 3521 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L1292:
	.loc 1 3523 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-100(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 3525 0
	movl	optab_table@GOT(%ebx), %eax
	movl	120(%eax), %edx
	movl	-100(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	movl	%eax, %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L1269:
.LBE43:
	.loc 1 3529 0
	call	get_last_insn@PLT
	movl	%eax, -156(%ebp)
	jmp	.L1261
.L1264:
.LBE42:
	.loc 1 3535 0
	movl	-104(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -132(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1298
	movl	$8, -128(%ebp)
	jmp	.L1300
.L1298:
	movl	$4, -128(%ebp)
.L1300:
	movl	-128(%ebp), %eax
	cmpl	%eax, -132(%ebp)
	jl	.L1301
.LBB49:
	.loc 1 3537 0
	movl	$0, -40(%ebp)
	.loc 1 3587 0
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1303
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1303
	movl	8(%ebp), %eax
	addl	$4, %eax
	movl	%eax, (%esp)
	call	find_replacement@PLT
	movl	%eax, -32(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -32(%ebp)
	je	.L1303
	.loc 1 3589 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address_nv@PLT
	movl	%eax, 8(%ebp)
.L1303:
	.loc 1 3590 0
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1307
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1307
	movl	12(%ebp), %eax
	addl	$4, %eax
	movl	%eax, (%esp)
	call	find_replacement@PLT
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -32(%ebp)
	je	.L1307
	.loc 1 3592 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address_nv@PLT
	movl	%eax, 12(%ebp)
.L1307:
	.loc 1 3594 0
	call	start_sequence@PLT
	.loc 1 3596 0
	movl	$0, -28(%ebp)
	.loc 1 3597 0
	movl	$0, -24(%ebp)
	.loc 1 3598 0
	jmp	.L1311
.L1312:
.LBB50:
	.loc 1 3601 0
	movl	-24(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$1, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -20(%ebp)
	.loc 1 3602 0
	movl	-24(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$1, 8(%esp)
	movl	%edx, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3607 0
	cmpl	$0, -16(%ebp)
	jne	.L1313
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1315
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1313
.L1315:
	.loc 1 3609 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	force_const_mem@PLT
	movl	%eax, 12(%ebp)
	.loc 1 3610 0
	movl	-24(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$1, 8(%esp)
	movl	%edx, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3607 0
	jmp	.L1323
.L1313:
	.loc 1 3612 0
	cmpl	$0, -16(%ebp)
	jne	.L1323
	.loc 1 3613 0
	movl	-24(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -16(%ebp)
.L1323:
	.loc 1 3615 0
	cmpl	$0, -20(%ebp)
	je	.L1325
	cmpl	$0, -16(%ebp)
	jne	.L1327
.L1325:
	.loc 1 3616 0
	leal	__FUNCTION__.18486@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3616, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1327:
	.loc 1 3618 0
	movl	-20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	sete	%al
	movzbl	%al, %eax
	orl	%eax, -28(%ebp)
	.loc 1 3620 0
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	movl	%eax, -40(%ebp)
.LBE50:
	.loc 1 3599 0
	addl	$1, -24(%ebp)
.L1311:
	.loc 1 3598 0
	movl	-104(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -124(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1328
	movl	$7, -120(%ebp)
	jmp	.L1330
.L1328:
	movl	$3, -120(%ebp)
.L1330:
	movl	-124(%ebp), %eax
	addl	-120(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1331
	movl	$8, -112(%ebp)
	jmp	.L1333
.L1331:
	movl	$4, -112(%ebp)
.L1333:
	movl	-116(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-112(%ebp)
	cmpl	-24(%ebp), %eax
	jg	.L1312
	.loc 1 3623 0
	call	get_insns@PLT
	movl	%eax, -36(%ebp)
	.loc 1 3624 0
	call	end_sequence@PLT
	.loc 1 3630 0
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L1335
	movl	reload_in_progress@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1335
	movl	reload_completed@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L1335
	cmpl	$0, -28(%ebp)
	je	.L1335
	.loc 1 3633 0
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L1335:
	.loc 1 3635 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 3637 0
	movl	-40(%ebp), %eax
	movl	%eax, -156(%ebp)
	jmp	.L1261
.L1301:
.LBE49:
	.loc 1 3640 0
	leal	__FUNCTION__.18486@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3640, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1261:
	movl	-156(%ebp), %eax
	.loc 1 3641 0
	addl	$172, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE58:
	.size	emit_move_insn_1, .-emit_move_insn_1
	.type	compress_float_constant, @function
compress_float_constant:
.LFB59:
	.loc 1 3650 0
	pushl	%ebp
.LCFI208:
	movl	%esp, %ebp
.LCFI209:
	pushl	%ebx
.LCFI210:
	subl	$84, %esp
.LCFI211:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3651 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 3652 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -24(%ebp)
	.loc 1 3656 0
	movl	12(%ebp), %edx
	addl	$4, %edx
	leal	-52(%ebp), %ecx
	movl	(%edx), %eax
	movl	%eax, (%ecx)
	movl	4(%edx), %eax
	movl	%eax, 4(%ecx)
	movl	8(%edx), %eax
	movl	%eax, 8(%ecx)
	movl	12(%edx), %eax
	movl	%eax, 12(%ecx)
	movl	16(%edx), %eax
	movl	%eax, 16(%ecx)
	movl	20(%edx), %eax
	movl	%eax, 20(%ecx)
	.loc 1 3658 0
	movl	-24(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, %edx
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -20(%ebp)
	.loc 1 3659 0
	jmp	.L1342
.L1343:
.LBB51:
	.loc 1 3666 0
	movl	$0, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	can_extend_p@PLT
	movl	%eax, -16(%ebp)
	.loc 1 3667 0
	cmpl	$529, -16(%ebp)
	je	.L1344
	.loc 1 3671 0
	leal	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	exact_real_truncate@PLT
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1344
	.loc 1 3674 0
	movl	-20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 20(%esp)
	call	const_double_from_real_value@PLT
	movl	%eax, -12(%ebp)
	.loc 1 3676 0
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L1347
	movl	-12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L1349
.L1347:
	movl	-12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1350
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1350
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1349
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1349
.L1350:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1354
	movl	-12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	je	.L1349
.L1354:
	.loc 1 3680 0
	movl	-16(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L1344
	.loc 1 3676 0
	jmp	.L1357
.L1349:
	.loc 1 3683 0
	movl	-28(%ebp), %eax
	movl	-20(%ebp), %ecx
	leal	float_extend_from_mem@GOTOFF(%ebx), %edx
	imull	$54, %eax, %eax
	addl	%edx, %eax
	movzbl	(%eax,%ecx), %eax
	testb	%al, %al
	je	.L1344
	.loc 1 3684 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	force_const_mem@PLT
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, -12(%ebp)
.L1357:
	.loc 1 3688 0
	movl	-16(%ebp), %edx
	movl	$0, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_unop_insn@PLT
	.loc 1 3689 0
	call	get_last_insn@PLT
	movl	%eax, -8(%ebp)
	.loc 1 3691 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1359
	.loc 1 3692 0
	movl	-8(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$4, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-8(%ebp), %eax
	movl	%edx, 68(%eax)
.L1359:
	.loc 1 3695 0
	movl	-8(%ebp), %eax
	movl	%eax, -56(%ebp)
	jmp	.L1361
.L1344:
.LBE51:
	.loc 1 3660 0
	movl	-20(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
.L1342:
	.loc 1 3659 0
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jne	.L1343
	.loc 1 3698 0
	movl	$0, -56(%ebp)
.L1361:
	movl	-56(%ebp), %eax
	.loc 1 3699 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE59:
	.size	compress_float_constant, .-compress_float_constant
.globl push_block
	.type	push_block, @function
push_block:
.LFB60:
	.loc 1 3716 0
	pushl	%ebp
.LCFI212:
	movl	%esp, %ebp
.LCFI213:
	pushl	%ebx
.LCFI214:
	subl	$68, %esp
.LCFI215:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3719 0
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1365
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1365
	movl	$5, -40(%ebp)
	jmp	.L1368
.L1365:
	movl	$4, -40(%ebp)
.L1368:
	movl	$1, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, 8(%ebp)
	.loc 1 3720 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1369
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1377
.L1369:
	.loc 1 3721 0
	movl	12(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
	.loc 1 3720 0
	jmp	.L1378
.L1377:
	.loc 1 3722 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1379
	cmpl	$0, 12(%ebp)
	jne	.L1379
	.loc 1 3723 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
	.loc 1 3722 0
	jmp	.L1378
.L1379:
	.loc 1 3726 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1382
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1382
	movl	$5, -36(%ebp)
	jmp	.L1385
.L1382:
	movl	$4, -36(%ebp)
.L1385:
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -8(%ebp)
	.loc 1 3727 0
	cmpl	$0, 12(%ebp)
	je	.L1386
	.loc 1 3728 0
	movl	12(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -32(%ebp)
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1388
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1388
	movl	$5, -24(%ebp)
	jmp	.L1391
.L1388:
	movl	$4, -24(%ebp)
.L1391:
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -8(%ebp)
.L1386:
	.loc 1 3730 0
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
.L1378:
	.loc 1 3739 0
	movl	global_rtl@GOT(%ebx), %eax
	movl	36(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 3740 0
	cmpl	$0, 12(%ebp)
	je	.L1392
	cmpl	$0, 16(%ebp)
	je	.L1392
	.loc 1 3741 0
	movl	12(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -8(%ebp)
.L1392:
	.loc 1 3756 0
	movl	class_narrowest_mode@GOT(%ebx), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	memory_address@PLT
	.loc 1 3757 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE60:
	.size	push_block, .-push_block
	.section	.rodata
	.type	__FUNCTION__.18984, @object
	.size	__FUNCTION__.18984, 15
__FUNCTION__.18984:
	.string	"emit_push_insn"
	.text
.globl emit_push_insn
	.type	emit_push_insn, @function
emit_push_insn:
.LFB61:
	.loc 1 3866 0
	pushl	%ebp
.LCFI216:
	movl	%esp, %ebp
.LCFI217:
	pushl	%edi
.LCFI218:
	pushl	%esi
.LCFI219:
	pushl	%ebx
.LCFI220:
	subl	$252, %esp
.LCFI221:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 3870 0
	movl	$2, -80(%ebp)
	.loc 1 3878 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L1397
	cmpl	$52, 12(%ebp)
	jne	.L1399
	cmpl	$0, 16(%ebp)
	je	.L1401
	movl	16(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L1401
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -184(%ebp)
	movl	%edx, -180(%ebp)
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L1404
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1404
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1404
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L1408
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1408
.L1404:
	movl	$8, -176(%ebp)
	movl	$0, -172(%ebp)
	jmp	.L1410
.L1408:
	movl	$4, -176(%ebp)
	movl	$0, -172(%ebp)
.L1410:
	movl	-172(%ebp), %eax
	cmpl	%eax, -180(%ebp)
	jg	.L1401
	movl	-172(%ebp), %edx
	cmpl	%edx, -180(%ebp)
	jl	.L1412
	movl	-176(%ebp), %ecx
	cmpl	%ecx, -184(%ebp)
	jae	.L1401
.L1412:
	movl	$1, -188(%ebp)
	jmp	.L1413
.L1401:
	movl	$0, -188(%ebp)
.L1413:
	movzbl	-188(%ebp), %eax
	movb	%al, -189(%ebp)
	jmp	.L1414
.L1399:
	movl	12(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -164(%ebp)
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L1415
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1415
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1415
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L1419
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1419
.L1415:
	movl	$64, -160(%ebp)
	jmp	.L1421
.L1419:
	movl	$32, -160(%ebp)
.L1421:
	movl	-160(%ebp), %edx
	cmpl	%edx, -164(%ebp)
	jge	.L1422
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L1424
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L1424
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	je	.L1424
	movl	12(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1422
.L1424:
	movl	$1, -168(%ebp)
	jmp	.L1428
.L1422:
	movl	$0, -168(%ebp)
.L1428:
	movzbl	-168(%ebp), %ecx
	movb	%cl, -189(%ebp)
.L1414:
	cmpb	$0, -189(%ebp)
	je	.L1429
	movl	$2, -196(%ebp)
	jmp	.L1431
.L1429:
	movl	$1, -196(%ebp)
.L1431:
	movl	-196(%ebp), %esi
	movl	%esi, -200(%ebp)
	jmp	.L1432
.L1397:
	movl	$1, -200(%ebp)
.L1432:
	movl	-200(%ebp), %edi
	movl	%edi, -76(%ebp)
	.loc 1 3886 0
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -84(%ebp)
	.loc 1 3888 0
	cmpl	$52, 12(%ebp)
	jne	.L1433
.LBB52:
	.loc 1 3893 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1435
	movl	$8, -156(%ebp)
	jmp	.L1437
.L1435:
	movl	$4, -156(%ebp)
.L1437:
	movl	-156(%ebp), %eax
	imull	28(%ebp), %eax
	movl	%eax, -68(%ebp)
	.loc 1 3894 0
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L1438
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1438
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1438
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L1442
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1442
.L1438:
	movl	$8, -152(%ebp)
	jmp	.L1444
.L1442:
	movl	$4, -152(%ebp)
.L1444:
	movl	-68(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-152(%ebp)
	movl	%edx, -64(%ebp)
	.loc 1 3897 0
	cmpl	$0, 20(%ebp)
	jne	.L1445
	.loc 1 3898 0
	leal	__FUNCTION__.18984@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$3898, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1445:
	.loc 1 3900 0
	movl	-64(%ebp), %eax
	subl	%eax, -68(%ebp)
	.loc 1 3905 0
	cmpl	$0, 28(%ebp)
	je	.L1447
	.loc 1 3906 0
	movl	-68(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	$52, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -84(%ebp)
.L1447:
	.loc 1 3912 0
	cmpl	$0, 48(%ebp)
	je	.L1449
	movl	-68(%ebp), %eax
	movl	%eax, -148(%ebp)
	jmp	.L1451
.L1449:
	movl	$0, -148(%ebp)
.L1451:
	movl	-148(%ebp), %edx
	movl	%edx, -60(%ebp)
.LBB53:
	.loc 1 3950 0
	cmpl	$0, 28(%ebp)
	je	.L1452
	.loc 1 3952 0
	movl	20(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1454
	.loc 1 3953 0
	movl	20(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, -208(%ebp)
	movl	%edi, -204(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	-208(%ebp), %esi
	movl	-204(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 20(%ebp)
	jmp	.L1452
.L1454:
	.loc 1 3955 0
	movl	-68(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %ecx
	movl	20(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %esi
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	%edx, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%esi, (%esp)
	call	expand_binop@PLT
	movl	%eax, 20(%ebp)
.L1452:
	.loc 1 3963 0
	cmpl	$0, 40(%ebp)
	jne	.L1456
	.loc 1 3965 0
	cmpl	$2, -76(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	push_block@PLT
	movl	%eax, -72(%ebp)
	.loc 1 3966 0
	movl	$0, 36(%ebp)
	jmp	.L1458
.L1456:
	.loc 1 3968 0
	movl	44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1459
	.loc 1 3969 0
	movl	-60(%ebp), %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	44(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	40(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, 4(%esp)
	movl	$52, (%esp)
	call	memory_address@PLT
	movl	%eax, -72(%ebp)
	jmp	.L1458
.L1459:
	.loc 1 3973 0
	movl	-60(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -140(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1461
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1461
	movl	$5, -132(%ebp)
	jmp	.L1464
.L1461:
	movl	$4, -132(%ebp)
.L1464:
	movl	44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	-144(%ebp), %edx
	movl	-140(%ebp), %ecx
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, 4(%esp)
	movl	$52, (%esp)
	call	memory_address@PLT
	movl	%eax, -72(%ebp)
.L1458:
	.loc 1 3990 0
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$52, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -56(%ebp)
	.loc 1 3992 0
	cmpl	$0, 16(%ebp)
	je	.L1465
	.loc 1 3994 0
	movl	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes@PLT
	.loc 1 3999 0
	movl	$0, 4(%esp)
	movl	$0, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
.L1465:
	.loc 1 4004 0
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_align@PLT
	.loc 1 4006 0
	movl	$2, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	jmp	.L1467
.L1433:
.LBE53:
.LBE52:
	.loc 1 4009 0
	cmpl	$0, 28(%ebp)
	jle	.L1468
.LBB54:
	.loc 1 4013 0
	movl	12(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -128(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1470
	movl	$8, -124(%ebp)
	jmp	.L1472
.L1470:
	movl	$4, -124(%ebp)
.L1472:
	movl	-128(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-124(%ebp)
	movl	%eax, -52(%ebp)
	.loc 1 4018 0
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L1473
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1473
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1473
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	jne	.L1477
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1477
.L1473:
	movl	$64, -120(%ebp)
	jmp	.L1479
.L1477:
	movl	$32, -120(%ebp)
.L1479:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1480
	movl	$64, -116(%ebp)
	jmp	.L1482
.L1480:
	movl	$32, -116(%ebp)
.L1482:
	movl	-120(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-116(%ebp)
	movl	28(%ebp), %edx
	movl	%eax, %ecx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	%ecx
	movl	%edx, -40(%ebp)
	.loc 1 4019 0
	movl	44(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 4025 0
	cmpl	$0, 36(%ebp)
	je	.L1483
	cmpl	$0, 40(%ebp)
	jne	.L1483
	cmpl	$0, -76(%ebp)
	je	.L1483
	movl	-76(%ebp), %eax
	cmpl	-80(%ebp), %eax
	je	.L1483
	.loc 1 4027 0
	movl	36(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
.L1483:
	.loc 1 4032 0
	cmpl	$0, 40(%ebp)
	jne	.L1488
	.loc 1 4033 0
	movl	$0, -40(%ebp)
.L1488:
	.loc 1 4037 0
	movl	-40(%ebp), %eax
	movl	28(%ebp), %edx
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	movl	%eax, -44(%ebp)
	.loc 1 4043 0
	cmpl	$0, 48(%ebp)
	je	.L1490
	movl	-44(%ebp), %edi
	movl	%edi, -112(%ebp)
	jmp	.L1492
.L1490:
	movl	$0, -112(%ebp)
.L1492:
	movl	-112(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 4045 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1493
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1501
.L1493:
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L1502
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L1504
.L1502:
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L1505
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L1505
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L1504
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L1504
.L1505:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L1501
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	jne	.L1501
.L1504:
	.loc 1 4046 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	force_const_mem@PLT
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, 8(%ebp)
.L1501:
	.loc 1 4050 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1510
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L1510
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L1510
	.loc 1 4052 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, 8(%ebp)
.L1510:
	.loc 1 4058 0
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L1514
.L1515:
	.loc 1 4062 0
	movl	-40(%ebp), %eax
	addl	-44(%ebp), %eax
	cmpl	-48(%ebp), %eax
	jg	.L1516
	.loc 1 4063 0
	movl	-44(%ebp), %edx
	movl	-48(%ebp), %eax
	subl	%edx, %eax
	movl	-32(%ebp), %edx
	addl	%eax, %edx
	movl	%edx, -108(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1518
	movl	$8, -104(%ebp)
	jmp	.L1520
.L1518:
	movl	$4, -104(%ebp)
.L1520:
	movl	-108(%ebp), %eax
	imull	-104(%ebp), %eax
	addl	-36(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %esi
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edi
	movl	-48(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, %edx
	movl	52(%ebp), %eax
	movl	%eax, 44(%esp)
	movl	48(%ebp), %eax
	movl	%eax, 40(%esp)
	movl	%esi, 36(%esp)
	movl	40(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	$0, 28(%esp)
	movl	$0, 24(%esp)
	movl	$0, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edi, 4(%esp)
	movl	%edx, (%esp)
	call	emit_push_insn@PLT
.L1516:
	.loc 1 4058 0
	addl	$1, -48(%ebp)
.L1514:
	movl	-48(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jl	.L1515
	jmp	.L1467
.L1468:
.LBE54:
.LBB55:
	.loc 1 4073 0
	movl	$0, -24(%ebp)
	.loc 1 4079 0
	cmpl	$0, 36(%ebp)
	je	.L1522
	cmpl	$0, 40(%ebp)
	jne	.L1522
	cmpl	$0, -76(%ebp)
	je	.L1522
	movl	-76(%ebp), %eax
	cmpl	-80(%ebp), %eax
	je	.L1522
	.loc 1 4081 0
	movl	36(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
.L1522:
	.loc 1 4089 0
	movl	44(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1527
	.loc 1 4090 0
	movl	44(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	40(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_address@PLT
	movl	%eax, -28(%ebp)
	jmp	.L1529
.L1527:
	.loc 1 4095 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1530
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1530
	movl	$5, -100(%ebp)
	jmp	.L1533
.L1530:
	movl	$4, -100(%ebp)
.L1533:
	movl	44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-100(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_address@PLT
	movl	%eax, -28(%ebp)
.L1529:
	.loc 1 4097 0
	movl	-28(%ebp), %eax
	movl	%eax, -24(%ebp)
	.loc 1 4098 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -20(%ebp)
	.loc 1 4099 0
	cmpl	$0, 16(%ebp)
	je	.L1534
	.loc 1 4101 0
	movl	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes@PLT
	.loc 1 4106 0
	movl	$0, 4(%esp)
	movl	$0, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
.L1534:
	.loc 1 4109 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L1467:
.LBE55:
	.loc 1 4116 0
	cmpl	$0, 28(%ebp)
	jle	.L1536
	cmpl	$0, 32(%ebp)
	je	.L1536
	.loc 1 4120 0
	movl	32(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L1539
	.loc 1 4121 0
	movl	$-1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_load@PLT
	jmp	.L1536
.L1539:
	.loc 1 4123 0
	movl	32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	move_block_to_reg@PLT
.L1536:
	.loc 1 4126 0
	cmpl	$0, 36(%ebp)
	je	.L1541
	cmpl	$0, 40(%ebp)
	jne	.L1541
	movl	-76(%ebp), %eax
	cmpl	-80(%ebp), %eax
	jne	.L1541
	.loc 1 4127 0
	movl	36(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
.L1541:
	.loc 1 4129 0
	cmpl	$0, 52(%ebp)
	je	.L1548
	cmpl	$0, 40(%ebp)
	jne	.L1548
	.loc 1 4130 0
	movl	52(%ebp), %eax
	movl	%eax, (%esp)
	call	anti_adjust_stack@PLT
.L1548:
	.loc 1 4131 0
	addl	$252, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE61:
	.size	emit_push_insn, .-emit_push_insn
	.type	get_subtarget, @function
get_subtarget:
.LFB62:
	.loc 1 4139 0
	pushl	%ebp
.LCFI222:
	movl	%esp, %ebp
.LCFI223:
	pushl	%ebx
.LCFI224:
	subl	$4, %esp
.LCFI225:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4140 0
	cmpl	$0, 8(%ebp)
	je	.L1550
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1550
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L1550
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L1550
	call	preserve_subexpressions_p@PLT
	testl	%eax, %eax
	jne	.L1550
	movl	8(%ebp), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1556
.L1550:
	movl	$0, -8(%ebp)
.L1556:
	movl	-8(%ebp), %eax
	.loc 1 4151 0
	addl	$4, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE62:
	.size	get_subtarget, .-get_subtarget
	.section	.rodata
	.type	__FUNCTION__.19365, @object
	.size	__FUNCTION__.19365, 18
__FUNCTION__.19365:
	.string	"expand_assignment"
	.text
.globl expand_assignment
	.type	expand_assignment, @function
expand_assignment:
.LFB63:
	.loc 1 4169 0
	pushl	%ebp
.LCFI226:
	movl	%esp, %ebp
.LCFI227:
	pushl	%edi
.LCFI228:
	pushl	%esi
.LCFI229:
	pushl	%ebx
.LCFI230:
	subl	$236, %esp
.LCFI231:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4170 0
	movl	$0, -52(%ebp)
	.loc 1 4175 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1559
	.loc 1 4177 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -48(%ebp)
	.loc 1 4178 0
	cmpl	$0, 16(%ebp)
	je	.L1561
	movl	-48(%ebp), %eax
	movl	%eax, -188(%ebp)
	jmp	.L1563
.L1561:
	movl	$0, -188(%ebp)
.L1563:
	movl	-188(%ebp), %edx
	movl	%edx, -192(%ebp)
	jmp	.L1564
.L1559:
	.loc 1 4187 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	je	.L1565
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$41, %al
	je	.L1565
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$44, %al
	je	.L1565
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$45, %al
	je	.L1565
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	jne	.L1570
.L1565:
.LBB56:
	.loc 1 4196 0
	movl	$0, -68(%ebp)
	.loc 1 4199 0
	call	push_temp_slots@PLT
	.loc 1 4200 0
	leal	-68(%ebp), %eax
	movl	%eax, 24(%esp)
	leal	-64(%ebp), %eax
	movl	%eax, 20(%esp)
	leal	-56(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-60(%ebp), %eax
	movl	%eax, 12(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_inner_reference@PLT
	movl	%eax, -40(%ebp)
	.loc 1 4206 0
	movl	-56(%ebp), %eax
	testl	%eax, %eax
	jne	.L1571
	cmpl	$0, 16(%ebp)
	je	.L1571
	.loc 1 4207 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	stabilize_reference@PLT
	movl	%eax, -40(%ebp)
.L1571:
	.loc 1 4209 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -44(%ebp)
	.loc 1 4211 0
	movl	-60(%ebp), %eax
	testl	%eax, %eax
	je	.L1574
.LBB57:
	.loc 1 4213 0
	movl	-60(%ebp), %eax
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -36(%ebp)
	.loc 1 4215 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L1576
	.loc 1 4216 0
	leal	__FUNCTION__.19365@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4216, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1576:
	.loc 1 4222 0
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L1578
	.loc 1 4223 0
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	$0, 8(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -36(%ebp)
.L1578:
	.loc 1 4228 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1580
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L1580
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1580
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, -184(%ebp)
	movl	%edx, -180(%ebp)
	cmpl	$0, -180(%ebp)
	js	.L1580
	cmpl	$0, -180(%ebp)
	jg	.L1585
	cmpl	$0, -184(%ebp)
	jbe	.L1580
.L1585:
	movl	-88(%ebp), %esi
	movl	-84(%ebp), %edi
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1580
	movl	-80(%ebp), %esi
	movl	-76(%ebp), %edi
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1580
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1588
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -176(%ebp)
	jmp	.L1590
.L1588:
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1591
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -172(%ebp)
	jmp	.L1593
.L1591:
	movl	$8, -172(%ebp)
.L1593:
	movl	-172(%ebp), %edx
	movl	%edx, -176(%ebp)
.L1590:
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, -176(%ebp)
	jne	.L1580
	.loc 1 4236 0
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	movl	-164(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -200(%ebp)
	movl	%edx, -196(%ebp)
	movl	-200(%ebp), %esi
	movl	-196(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-168(%ebp), %eax
	adcl	-164(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	-56(%ebp), %ecx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -52(%ebp)
	.loc 1 4237 0
	movl	$0, -88(%ebp)
	movl	$0, -84(%ebp)
.L1580:
	.loc 1 4240 0
	movl	-60(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	highest_pow2_factor_for_type
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	offset_address@PLT
	movl	%eax, -52(%ebp)
.L1574:
.LBE57:
	.loc 1 4245 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1595
	.loc 1 4249 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	shallow_copy_rtx@PLT
	movl	%eax, -52(%ebp)
	.loc 1 4251 0
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes_minus_bitpos@PLT
.L1595:
	.loc 1 4256 0
	movl	-68(%ebp), %eax
	testl	%eax, %eax
	je	.L1597
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1597
	.loc 1 4258 0
	movl	-52(%ebp), %eax
	cmpl	-44(%ebp), %eax
	jne	.L1600
	.loc 1 4259 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -52(%ebp)
.L1600:
	.loc 1 4260 0
	movl	-52(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$8, %edx
	movb	%dl, 3(%eax)
.L1597:
	.loc 1 4263 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	jne	.L1602
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L1602
	.loc 1 4266 0
	movl	-52(%ebp), %eax
	cmpl	-44(%ebp), %eax
	jne	.L1605
	.loc 1 4267 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -52(%ebp)
.L1605:
	.loc 1 4268 0
	movl	-52(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$4, %edx
	movb	%dl, 3(%eax)
.L1602:
	.loc 1 4271 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1607
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	can_address_p@PLT
	testl	%eax, %eax
	jne	.L1607
	.loc 1 4273 0
	movl	-52(%ebp), %eax
	cmpl	-44(%ebp), %eax
	jne	.L1610
	.loc 1 4274 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -52(%ebp)
.L1610:
	.loc 1 4275 0
	movl	-52(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$1, %edx
	movb	%dl, 3(%eax)
.L1607:
	.loc 1 4278 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_alias_set@PLT
	movl	%eax, -160(%ebp)
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -156(%ebp)
	movl	-64(%ebp), %edx
	movl	%edx, -152(%ebp)
	cmpl	$0, 16(%ebp)
	je	.L1612
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -148(%ebp)
	jmp	.L1614
.L1612:
	movl	$0, -148(%ebp)
.L1614:
	movl	-56(%ebp), %ecx
	movl	%ecx, -144(%ebp)
	movl	-88(%ebp), %edx
	movl	-84(%ebp), %ecx
	movl	-80(%ebp), %esi
	movl	-76(%ebp), %edi
	movl	-160(%ebp), %eax
	movl	%eax, 40(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, 36(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	store_field
	movl	%eax, -48(%ebp)
	.loc 1 4286 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 4287 0
	call	free_temp_slots@PLT
	.loc 1 4288 0
	call	pop_temp_slots@PLT
	.loc 1 4292 0
	cmpl	$0, 16(%ebp)
	je	.L1615
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %esi
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	%esi, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	convert_modes@PLT
	movl	%eax, -140(%ebp)
	jmp	.L1617
.L1615:
	movl	$0, -140(%ebp)
.L1617:
	movl	-140(%ebp), %edx
	movl	%edx, -192(%ebp)
	jmp	.L1564
.L1570:
.LBE56:
	.loc 1 4309 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$54, %al
	jne	.L1618
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	aggregate_value_p@PLT
	testl	%eax, %eax
	jne	.L1618
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L1618
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$35, %al
	je	.L1622
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$36, %al
	jne	.L1624
.L1622:
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L1625
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -136(%ebp)
	jmp	.L1627
.L1625:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -136(%ebp)
.L1627:
	movl	-136(%ebp), %ecx
	movzwl	(%ecx), %eax
	cmpw	$71, %ax
	je	.L1618
.L1624:
.LBB58:
	.loc 1 4316 0
	call	push_temp_slots@PLT
	.loc 1 4317 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -32(%ebp)
	.loc 1 4318 0
	cmpl	$0, -52(%ebp)
	jne	.L1628
	.loc 1 4319 0
	movl	$6, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -52(%ebp)
.L1628:
	.loc 1 4323 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L1630
	.loc 1 4324 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_load@PLT
	jmp	.L1632
.L1630:
	.loc 1 4325 0
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L1633
	.loc 1 4326 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	jmp	.L1632
.L1633:
	.loc 1 4334 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L1632:
	.loc 1 4336 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 4337 0
	call	free_temp_slots@PLT
	.loc 1 4338 0
	call	pop_temp_slots@PLT
	.loc 1 4339 0
	cmpl	$0, 16(%ebp)
	je	.L1635
	movl	-52(%ebp), %eax
	movl	%eax, -132(%ebp)
	jmp	.L1637
.L1635:
	movl	$0, -132(%ebp)
.L1637:
	movl	-132(%ebp), %edx
	movl	%edx, -192(%ebp)
	jmp	.L1564
.L1618:
.LBE58:
	.loc 1 4345 0
	cmpl	$0, -52(%ebp)
	jne	.L1638
	.loc 1 4346 0
	movl	$6, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -52(%ebp)
.L1638:
	.loc 1 4349 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$37, %al
	jne	.L1640
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L1642
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L1640
.L1642:
.LBB59:
	.loc 1 4354 0
	call	push_temp_slots@PLT
	.loc 1 4355 0
	movl	-52(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -28(%ebp)
	.loc 1 4357 0
	movl	-52(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L1644
	.loc 1 4358 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_load@PLT
	jmp	.L1646
.L1644:
	.loc 1 4360 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L1646:
	.loc 1 4362 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 4363 0
	call	free_temp_slots@PLT
	.loc 1 4364 0
	call	pop_temp_slots@PLT
	.loc 1 4365 0
	cmpl	$0, 16(%ebp)
	je	.L1647
	movl	-52(%ebp), %ecx
	movl	%ecx, -128(%ebp)
	jmp	.L1649
.L1647:
	movl	$0, -128(%ebp)
.L1649:
	movl	-128(%ebp), %eax
	movl	%eax, -192(%ebp)
	jmp	.L1564
.L1640:
.LBE59:
	.loc 1 4371 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$37, %al
	jne	.L1650
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$42, %al
	jne	.L1650
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	296(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1650
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	296(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	jne	.L1650
.LBB60:
	.loc 1 4377 0
	call	push_temp_slots@PLT
	.loc 1 4378 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%eax, -20(%ebp)
	.loc 1 4379 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4382 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -124(%ebp)
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %ecx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	%ecx, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -120(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1655
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1655
	movl	$5, -116(%ebp)
	jmp	.L1658
.L1655:
	movl	$4, -116(%ebp)
.L1658:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -112(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1659
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1659
	movl	$5, -108(%ebp)
	jmp	.L1662
.L1659:
	movl	$4, -108(%ebp)
.L1662:
	movl	-52(%ebp), %eax
	movl	4(%eax), %edx
	movl	libfunc_table@GOT(%ebx), %eax
	movl	48(%eax), %eax
	movl	-124(%ebp), %ecx
	movl	%ecx, 36(%esp)
	movl	-120(%ebp), %ecx
	movl	%ecx, 32(%esp)
	movl	-116(%ebp), %ecx
	movl	%ecx, 28(%esp)
	movl	-112(%ebp), %ecx
	movl	%ecx, 24(%esp)
	movl	-108(%ebp), %ecx
	movl	%ecx, 20(%esp)
	movl	%edx, 16(%esp)
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	emit_library_call@PLT
	.loc 1 4397 0
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 4398 0
	call	free_temp_slots@PLT
	.loc 1 4399 0
	call	pop_temp_slots@PLT
	.loc 1 4400 0
	cmpl	$0, 16(%ebp)
	je	.L1663
	movl	-52(%ebp), %eax
	movl	%eax, -104(%ebp)
	jmp	.L1665
.L1663:
	movl	$0, -104(%ebp)
.L1665:
	movl	-104(%ebp), %edx
	movl	%edx, -192(%ebp)
	jmp	.L1564
.L1650:
.LBE60:
	.loc 1 4405 0
	call	push_temp_slots@PLT
	.loc 1 4406 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	movl	%eax, -48(%ebp)
	.loc 1 4407 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 4408 0
	call	free_temp_slots@PLT
	.loc 1 4409 0
	call	pop_temp_slots@PLT
	.loc 1 4410 0
	cmpl	$0, 16(%ebp)
	je	.L1666
	movl	-48(%ebp), %ecx
	movl	%ecx, -100(%ebp)
	jmp	.L1668
.L1666:
	movl	$0, -100(%ebp)
.L1668:
	movl	-100(%ebp), %eax
	movl	%eax, -192(%ebp)
.L1564:
	movl	-192(%ebp), %eax
	.loc 1 4411 0
	addl	$236, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE63:
	.size	expand_assignment, .-expand_assignment
	.section	.rodata
	.type	__FUNCTION__.19696, @object
	.size	__FUNCTION__.19696, 11
__FUNCTION__.19696:
	.string	"store_expr"
	.text
.globl store_expr
	.type	store_expr, @function
store_expr:
.LFB64:
	.loc 1 4444 0
	pushl	%ebp
.LCFI232:
	movl	%esp, %ebp
.LCFI233:
	pushl	%esi
.LCFI234:
	pushl	%ebx
.LCFI235:
	subl	$176, %esp
.LCFI236:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4446 0
	movl	$0, -52(%ebp)
	.loc 1 4447 0
	movl	$0, -48(%ebp)
	.loc 1 4449 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$6, %al
	jne	.L1671
	.loc 1 4454 0
	cmpl	$0, 16(%ebp)
	je	.L1673
	.loc 1 4455 0
	leal	__FUNCTION__.19696@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$4455, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1673:
	.loc 1 4456 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 4457 0
	movl	$0, -140(%ebp)
	jmp	.L1675
.L1671:
	.loc 1 4459 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$48, %al
	jne	.L1676
	.loc 1 4463 0
	movl	16(%ebp), %eax
	movl	%eax, %edx
	andl	$2, %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%edx, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 4465 0
	call	emit_queue@PLT
	.loc 1 4466 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	movl	%eax, -140(%ebp)
	jmp	.L1675
.L1676:
	.loc 1 4468 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$52, %al
	jne	.L1678
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L1678
.LBB61:
	.loc 1 4475 0
	call	gen_label_rtx@PLT
	movl	%eax, -44(%ebp)
	call	gen_label_rtx@PLT
	movl	%eax, -40(%ebp)
	.loc 1 4477 0
	call	emit_queue@PLT
	.loc 1 4478 0
	movl	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 12(%ebp)
	.loc 1 4480 0
	call	do_pending_stack_adjust@PLT
	.loc 1 4481 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	addl	$1, %eax
	movl	%eax, 4(%edx)
	.loc 1 4482 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	jumpifnot@PLT
	.loc 1 4483 0
	call	start_cleanup_deferral@PLT
	.loc 1 4484 0
	movl	16(%ebp), %edx
	andl	$2, %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %ecx
	movl	%edx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	store_expr@PLT
	.loc 1 4485 0
	call	end_cleanup_deferral@PLT
	.loc 1 4486 0
	call	emit_queue@PLT
	.loc 1 4487 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_jump@PLT
	movl	%eax, (%esp)
	call	emit_jump_insn@PLT
	.loc 1 4488 0
	call	emit_barrier@PLT
	.loc 1 4489 0
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 4490 0
	call	start_cleanup_deferral@PLT
	.loc 1 4491 0
	movl	16(%ebp), %edx
	andl	$2, %edx
	movl	8(%ebp), %eax
	movl	28(%eax), %ecx
	movl	%edx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	store_expr@PLT
	.loc 1 4492 0
	call	end_cleanup_deferral@PLT
	.loc 1 4493 0
	call	emit_queue@PLT
	.loc 1 4494 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 4495 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	subl	$1, %eax
	movl	%eax, 4(%edx)
	.loc 1 4497 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1681
	movl	12(%ebp), %eax
	movl	%eax, -136(%ebp)
	jmp	.L1683
.L1681:
	movl	$0, -136(%ebp)
.L1683:
	movl	-136(%ebp), %edx
	movl	%edx, -140(%ebp)
	jmp	.L1675
.L1678:
.LBE61:
	.loc 1 4499 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	queued_subexp_p@PLT
	testl	%eax, %eax
	je	.L1684
	.loc 1 4503 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1686
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1686
	.loc 1 4506 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4507 0
	movl	16(%ebp), %eax
	movl	%eax, %edx
	andl	$2, %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4503 0
	jmp	.L1689
.L1686:
	.loc 1 4512 0
	movl	16(%ebp), %eax
	movl	%eax, %edx
	andl	$2, %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -56(%ebp)
.L1689:
	.loc 1 4519 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1693
	movl	16(%ebp), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1693
	.loc 1 4520 0
	movl	$1, -52(%ebp)
	jmp	.L1693
.L1684:
	.loc 1 4522 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1694
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1694
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1694
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1694
	.loc 1 4533 0
	movl	16(%ebp), %eax
	movl	%eax, %edx
	andl	$2, %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4535 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1699
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1699
	.loc 1 4539 0
	movl	-56(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L1702
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1704
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1704
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1704
.L1702:
	.loc 1 4542 0
	movl	$1, -48(%ebp)
.L1704:
	.loc 1 4543 0
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -56(%ebp)
.L1699:
	.loc 1 4545 0
	movl	$1, -52(%ebp)
	.loc 1 4522 0
	jmp	.L1693
.L1694:
	.loc 1 4547 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L1707
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L1707
.LBB62:
	.loc 1 4553 0
	movl	$0, -36(%ebp)
	.loc 1 4561 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1710
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$7, %al
	je	.L1712
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$11, %al
	je	.L1712
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$12, %al
	je	.L1712
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$13, %al
	jne	.L1710
.L1712:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	jne	.L1710
	.loc 1 4565 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -132(%ebp)
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1717
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -128(%ebp)
	jmp	.L1719
.L1717:
	movl	$-1, -128(%ebp)
.L1719:
	movl	-128(%ebp), %ecx
	cmpl	%ecx, -132(%ebp)
	je	.L1720
	.loc 1 4567 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	276(%eax), %eax
	movl	%eax, -124(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -120(%ebp)
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1722
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -116(%ebp)
	jmp	.L1724
.L1722:
	movl	$-1, -116(%ebp)
.L1724:
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %edx
	movl	%edx, (%esp)
	call	*-124(%ebp)
	movl	8(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, 8(%ebp)
.L1720:
	.loc 1 4571 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, -112(%ebp)
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1725
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -108(%ebp)
	jmp	.L1727
.L1725:
	movl	$-1, -108(%ebp)
.L1727:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-108(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	*-112(%ebp)
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, 8(%ebp)
	.loc 1 4576 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
.L1710:
	.loc 1 4579 0
	movl	16(%ebp), %eax
	andl	$2, %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4585 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1728
	movl	16(%ebp), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1728
	movl	-56(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1731
	movl	-56(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L1728
.L1731:
	.loc 1 4588 0
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -56(%ebp)
.L1728:
	.loc 1 4592 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1733
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1741
.L1733:
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L1741
	.loc 1 4594 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1743
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	jmp	.L1745
.L1743:
	movl	$-1, -104(%ebp)
.L1745:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	convert_modes@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4596 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1746
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -100(%ebp)
	jmp	.L1748
.L1746:
	movl	$-1, -100(%ebp)
.L1748:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	convert_modes@PLT
	movl	%eax, -56(%ebp)
.L1741:
	.loc 1 4601 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1749
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -96(%ebp)
	jmp	.L1751
.L1749:
	movl	$-1, -96(%ebp)
.L1751:
	movl	12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-96(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_move@PLT
	.loc 1 4608 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1752
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	je	.L1752
	.loc 1 4610 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1755
	.loc 1 4612 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart_SUBREG@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4613 0
	movl	-56(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$16, %eax
	movb	%al, 3(%edx)
.LBB63:
	.loc 1 4614 0
	movl	-56(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1757
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	jns	.L1759
.L1757:
	movl	-32(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$8, %edx
	movb	%dl, 3(%eax)
	jmp	.L1752
.L1759:
	movl	-32(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$-9, %eax
	movb	%al, 3(%edx)
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1761
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	movl	%eax, %edx
	shrb	$2, %dl
	movb	%dl, -89(%ebp)
	andb	$1, -89(%ebp)
	jmp	.L1763
.L1761:
	movb	$1, -89(%ebp)
.L1763:
	movl	-32(%ebp), %ecx
	movzbl	-89(%ebp), %eax
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	jmp	.L1752
.L1755:
.LBE63:
	.loc 1 4618 0
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1764
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -88(%ebp)
	jmp	.L1766
.L1764:
	movl	$-1, -88(%ebp)
.L1766:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-88(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	convert_modes@PLT
	movl	%eax, -56(%ebp)
.L1752:
	.loc 1 4623 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1767
	movl	-56(%ebp), %edx
	movl	%edx, -84(%ebp)
	jmp	.L1769
.L1767:
	movl	$0, -84(%ebp)
.L1769:
	movl	-84(%ebp), %ecx
	movl	%ecx, -140(%ebp)
	jmp	.L1675
.L1707:
.LBE62:
	.loc 1 4627 0
	movl	16(%ebp), %eax
	movl	%eax, %edx
	andl	$2, %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4636 0
	cmpl	$0, 12(%ebp)
	je	.L1770
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1770
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L1693
.L1770:
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1773
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L1693
.L1773:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L1693
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1776
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L1776
	movl	16(%ebp), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L1693
.L1776:
	.loc 1 4641 0
	movl	$1, -52(%ebp)
.L1693:
	.loc 1 4648 0
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L1785
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L1793
.L1785:
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L1793
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1793
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	cmpl	%eax, %edx
	je	.L1793
	.loc 1 4651 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %esi
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	%ecx, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, (%esp)
	call	convert_modes@PLT
	movl	%eax, -56(%ebp)
.L1793:
	.loc 1 4668 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	je	.L1797
	movl	-56(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L1799
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	jne	.L1797
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	side_effects_p@PLT
	testl	%eax, %eax
	je	.L1799
.L1797:
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1799
	cmpl	$0, -48(%ebp)
	jne	.L1799
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$100, %al
	jne	.L1804
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L1806
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L1808
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L1810
.L1808:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -76(%ebp)
.L1810:
	movl	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	jmp	.L1811
.L1806:
	movl	$0, -80(%ebp)
.L1811:
	movl	-80(%ebp), %edx
	cmpl	12(%ebp), %edx
	je	.L1799
.L1804:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%eax, %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	je	.L1799
	.loc 1 4684 0
	movl	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, 12(%ebp)
	.loc 1 4685 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %edx
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	%al, %dl
	je	.L1813
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L1813
.LBB64:
	.loc 1 4688 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 4689 0
	cmpl	$0, -52(%ebp)
	je	.L1816
	.loc 1 4694 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -56(%ebp)
	.loc 1 4695 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	jmp	.L1799
.L1816:
	.loc 1 4698 0
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 4685 0
	jmp	.L1799
.L1813:
.LBE64:
	.loc 1 4701 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L1819
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L1819
.LBB65:
	.loc 1 4707 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4709 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1822
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -72(%ebp)
	movl	%ecx, -68(%ebp)
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -60(%ebp)
	movl	-60(%ebp), %eax
	cmpl	%eax, -68(%ebp)
	jg	.L1822
	movl	-60(%ebp), %edx
	cmpl	%edx, -68(%ebp)
	jl	.L1825
	movl	-64(%ebp), %ecx
	cmpl	%ecx, -72(%ebp)
	jae	.L1822
.L1825:
	.loc 1 4711 0
	movl	16(%ebp), %eax
	andl	$2, %eax
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	.loc 1 4709 0
	jmp	.L1799
.L1822:
.LBB66:
	.loc 1 4720 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	size_int_wide@PLT
	movl	%eax, %esi
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%esi, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$80, (%esp)
	call	size_binop@PLT
	movl	%eax, -20(%ebp)
	.loc 1 4724 0
	movl	16(%ebp), %eax
	andl	$2, %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -16(%ebp)
	.loc 1 4725 0
	movl	$0, -12(%ebp)
	.loc 1 4728 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	%edx, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -16(%ebp)
	.loc 1 4730 0
	movl	16(%ebp), %eax
	andl	$2, %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	.loc 1 4736 0
	movl	-16(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L1827
	.loc 1 4738 0
	movl	-16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4739 0
	movl	-16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	$52, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, 12(%ebp)
	jmp	.L1829
.L1827:
	.loc 1 4744 0
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %ecx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_binop@PLT
	movl	%eax, -24(%ebp)
	.loc 1 4754 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	offset_address@PLT
	movl	%eax, 12(%ebp)
	.loc 1 4756 0
	call	gen_label_rtx@PLT
	movl	%eax, -12(%ebp)
	.loc 1 4757 0
	movl	-24(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	-12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%edx, 16(%esp)
	movl	$0, 12(%esp)
	movl	$117, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
.L1829:
	.loc 1 4761 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-24(%ebp), %eax
	je	.L1830
	.loc 1 4762 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage@PLT
.L1830:
	.loc 1 4764 0
	cmpl	$0, -12(%ebp)
	je	.L1799
	.loc 1 4765 0
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 4701 0
	jmp	.L1799
.L1819:
.LBE66:
.LBE65:
	.loc 1 4770 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L1833
	.loc 1 4771 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_load@PLT
	jmp	.L1799
.L1833:
	.loc 1 4772 0
	movl	-56(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L1835
	.loc 1 4773 0
	movl	16(%ebp), %eax
	movl	%eax, %esi
	andl	$2, %esi
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	jmp	.L1799
.L1835:
	.loc 1 4777 0
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L1799:
	.loc 1 4781 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L1837
	.loc 1 4782 0
	movl	$0, -140(%ebp)
	jmp	.L1675
.L1837:
	.loc 1 4786 0
	cmpl	$0, -52(%ebp)
	je	.L1839
	movl	-56(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L1839
	.loc 1 4787 0
	movl	-56(%ebp), %eax
	movl	%eax, -140(%ebp)
	jmp	.L1675
.L1839:
	.loc 1 4790 0
	movl	16(%ebp), %eax
	andl	$1, %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1842
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1842
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1845
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L1842
.L1845:
	.loc 1 4794 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -140(%ebp)
	jmp	.L1675
.L1842:
	.loc 1 4797 0
	movl	12(%ebp), %edx
	movl	%edx, -140(%ebp)
.L1675:
	movl	-140(%ebp), %eax
	.loc 1 4798 0
	addl	$176, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE64:
	.size	store_expr, .-store_expr
	.type	is_zeros_p, @function
is_zeros_p:
.LFB65:
	.loc 1 4805 0
	pushl	%ebp
.LCFI237:
	movl	%esp, %ebp
.LCFI238:
	pushl	%ebx
.LCFI239:
	subl	$36, %esp
.LCFI240:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 4808 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -32(%ebp)
	cmpl	$29, -32(%ebp)
	je	.L1853
	cmpl	$29, -32(%ebp)
	ja	.L1856
	cmpl	$27, -32(%ebp)
	je	.L1851
	cmpl	$27, -32(%ebp)
	ja	.L1852
	cmpl	$26, -32(%ebp)
	je	.L1850
	jmp	.L1849
.L1856:
	cmpl	$47, -32(%ebp)
	je	.L1854
	cmpl	$47, -32(%ebp)
	jb	.L1849
	movl	-32(%ebp), %eax
	subl	$116, %eax
	cmpl	$3, %eax
	ja	.L1849
	.loc 1 4814 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	movl	%eax, -28(%ebp)
	jmp	.L1857
.L1850:
	.loc 1 4817 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	movl	%eax, -28(%ebp)
	jmp	.L1857
.L1852:
	.loc 1 4820 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	je	.L1858
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	je	.L1858
	movl	$1, -24(%ebp)
	jmp	.L1861
.L1858:
	movl	$0, -24(%ebp)
.L1861:
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L1857
.L1851:
	.loc 1 4824 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	dconst0@GOT(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	real_identical@PLT
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	jmp	.L1857
.L1853:
	.loc 1 4827 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1862
.L1863:
	.loc 1 4829 0
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	jne	.L1864
	.loc 1 4830 0
	movl	$0, -28(%ebp)
	jmp	.L1857
.L1864:
	.loc 1 4828 0
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
.L1862:
	.loc 1 4827 0
	cmpl	$0, -8(%ebp)
	jne	.L1863
	.loc 1 4832 0
	movl	$1, -28(%ebp)
	jmp	.L1857
.L1854:
	.loc 1 4835 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L1867
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$20, %al
	jne	.L1867
	.loc 1 4836 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	jmp	.L1857
.L1867:
	.loc 1 4837 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1870
.L1871:
	.loc 1 4838 0
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	jne	.L1872
	.loc 1 4839 0
	movl	$0, -28(%ebp)
	jmp	.L1857
.L1872:
	.loc 1 4837 0
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
.L1870:
	cmpl	$0, -8(%ebp)
	jne	.L1871
	.loc 1 4841 0
	movl	$1, -28(%ebp)
	jmp	.L1857
.L1849:
	.loc 1 4844 0
	movl	$0, -28(%ebp)
.L1857:
	movl	-28(%ebp), %eax
	.loc 1 4846 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE65:
	.size	is_zeros_p, .-is_zeros_p
	.type	mostly_zeros_p, @function
mostly_zeros_p:
.LFB66:
	.loc 1 4853 0
	pushl	%ebp
.LCFI241:
	movl	%esp, %ebp
.LCFI242:
	subl	$24, %esp
.LCFI243:
	.loc 1 4854 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	jne	.L1877
.LBB67:
	.loc 1 4856 0
	movl	$0, -12(%ebp)
	movl	$0, -8(%ebp)
	.loc 1 4857 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -4(%ebp)
	.loc 1 4858 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L1883
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$20, %al
	jne	.L1883
	.loc 1 4861 0
	cmpl	$0, -4(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
	jmp	.L1882
.L1884:
	.loc 1 4870 0
	movl	-4(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	mostly_zeros_p
	testl	%eax, %eax
	je	.L1885
	.loc 1 4871 0
	addl	$1, -8(%ebp)
.L1885:
	.loc 1 4872 0
	addl	$1, -12(%ebp)
	.loc 1 4863 0
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
.L1883:
	cmpl	$0, -4(%ebp)
	jne	.L1884
	.loc 1 4875 0
	movl	-8(%ebp), %eax
	leal	0(,%eax,4), %ecx
	movl	-12(%ebp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	cmpl	%eax, %ecx
	setge	%al
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
	jmp	.L1882
.L1877:
.LBE67:
	.loc 1 4878 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	movl	%eax, -20(%ebp)
.L1882:
	movl	-20(%ebp), %eax
	.loc 1 4879 0
	leave
	ret
.LFE66:
	.size	mostly_zeros_p, .-mostly_zeros_p
	.type	store_constructor_field, @function
store_constructor_field:
.LFB67:
	.loc 1 4902 0
	pushl	%ebp
.LCFI244:
	movl	%esp, %ebp
.LCFI245:
	pushl	%edi
.LCFI246:
	pushl	%esi
.LCFI247:
	pushl	%ebx
.LCFI248:
	subl	$108, %esp
.LCFI249:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	12(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 4903 0
	movl	32(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	jne	.L1890
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movl	%edx, %edi
	andl	$0, %edi
	movl	%edi, %eax
	orl	%esi, %eax
	testl	%eax, %eax
	jne	.L1890
	movl	-32(%ebp), %eax
	orl	-28(%ebp), %eax
	testl	%eax, %eax
	je	.L1893
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1890
.L1893:
	.loc 1 4910 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1895
	.loc 1 4911 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-64(%ebp), %esi
	movl	-60(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-56(%ebp), %eax
	adcl	-52(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L1897
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	-32(%ebp), %esi
	movl	-28(%ebp), %edi
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L1899
.L1897:
	movl	$52, -36(%ebp)
	jmp	.L1900
.L1899:
	movl	$0, -36(%ebp)
.L1900:
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-36(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, 8(%ebp)
.L1895:
	.loc 1 4920 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1901
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L1901
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1901
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L1901
	.loc 1 4923 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, 8(%ebp)
	.loc 1 4924 0
	movl	44(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
.L1901:
	.loc 1 4927 0
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	shrdl	$3, %edx, %eax
	shrl	$3, %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	store_constructor
	.loc 1 4903 0
	jmp	.L1907
.L1890:
	.loc 1 4930 0
	movl	-24(%ebp), %esi
	movl	-20(%ebp), %edi
	movl	44(%ebp), %eax
	movl	%eax, 40(%esp)
	movl	36(%ebp), %eax
	movl	%eax, 36(%esp)
	movl	$0, 32(%esp)
	movl	$0, 28(%esp)
	movl	32(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	store_field
.L1907:
	.loc 1 4932 0
	addl	$108, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE67:
	.size	store_constructor_field, .-store_constructor_field
	.section	.rodata
	.type	__FUNCTION__.20378, @object
	.size	__FUNCTION__.20378, 18
__FUNCTION__.20378:
	.string	"store_constructor"
.LC4:
	.string	"__setbits"
	.text
	.type	store_constructor, @function
store_constructor:
.LFB68:
	.loc 1 4948 0
	pushl	%ebp
.LCFI250:
	movl	%esp, %ebp
.LCFI251:
	pushl	%edi
.LCFI252:
	pushl	%esi
.LCFI253:
	pushl	%ebx
.LCFI254:
	subl	$716, %esp
.LCFI255:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -388(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -400(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -396(%ebp)
	.loc 1 4948 0
	movl	%gs:20, %eax
	movl	%eax, -20(%ebp)
	xorl	%eax, %eax
	.loc 1 4949 0
	movl	-388(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -228(%ebp)
	.loc 1 4951 0
	movl	-228(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -376(%ebp)
	movl	%edx, -372(%ebp)
	.loc 1 4954 0
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	je	.L1909
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$22, %al
	je	.L1909
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$23, %al
	jne	.L1912
.L1909:
.LBB68:
	.loc 1 4960 0
	movl	-400(%ebp), %eax
	orl	-396(%ebp), %eax
	testl	%eax, %eax
	je	.L1913
	cmpl	$0, 16(%ebp)
	je	.L1915
.L1913:
	.loc 1 4961 0
	movl	$1, 16(%ebp)
	.loc 1 4960 0
	jmp	.L1916
.L1915:
	.loc 1 4963 0
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$22, %al
	je	.L1917
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$23, %al
	jne	.L1919
.L1917:
	movl	-388(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	jne	.L1919
	.loc 1 4968 0
	movl	-388(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage@PLT
	.loc 1 4969 0
	movl	$1, 16(%ebp)
	.loc 1 4963 0
	jmp	.L1916
.L1919:
	.loc 1 4976 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1921
	movl	-388(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L1921
	movl	-392(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -632(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1924
	movl	$8, -628(%ebp)
	jmp	.L1926
.L1924:
	movl	$4, -628(%ebp)
.L1926:
	movl	-628(%ebp), %edx
	cmpl	%edx, -632(%ebp)
	jg	.L1921
	.loc 1 4979 0
	movl	-392(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 4980 0
	movl	$1, 16(%ebp)
	.loc 1 4976 0
	jmp	.L1916
.L1921:
	.loc 1 4988 0
	movl	-388(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	list_length@PLT
	movl	%eax, %esi
	movl	-228(%ebp), %eax
	movl	%eax, (%esp)
	call	fields_length@PLT
	cmpl	%eax, %esi
	jne	.L1928
	movl	-388(%ebp), %eax
	movl	%eax, (%esp)
	call	mostly_zeros_p
	testl	%eax, %eax
	je	.L1916
.L1928:
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1930
	movl	-392(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%edx, %ecx
	xorl	-396(%ebp), %ecx
	xorl	-400(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L1916
.L1930:
	.loc 1 4994 0
	movl	-400(%ebp), %eax
	movl	-396(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage@PLT
	.loc 1 4995 0
	movl	$1, 16(%ebp)
.L1916:
	.loc 1 4998 0
	cmpl	$0, 16(%ebp)
	jne	.L1932
	.loc 1 4999 0
	movl	-392(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L1932:
	.loc 1 5004 0
	movl	-388(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -224(%ebp)
	jmp	.L1934
.L1935:
.LBB69:
	.loc 1 5006 0
	movl	-224(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -220(%ebp)
	.loc 1 5007 0
	movl	-224(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -216(%ebp)
	.loc 1 5010 0
	movl	$0, -360(%ebp)
	movl	$0, -356(%ebp)
	.loc 1 5013 0
	movl	-392(%ebp), %eax
	movl	%eax, -200(%ebp)
	.loc 1 5018 0
	cmpl	$0, -220(%ebp)
	je	.L1936
	.loc 1 5021 0
	cmpl	$0, 16(%ebp)
	je	.L1938
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	jne	.L1936
.L1938:
	.loc 1 5024 0
	movl	-220(%ebp), %eax
	movl	28(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L1940
	.loc 1 5025 0
	movl	-220(%ebp), %eax
	movl	28(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -368(%ebp)
	movl	%edx, -364(%ebp)
	jmp	.L1942
.L1940:
	.loc 1 5027 0
	movl	$-1, -368(%ebp)
	movl	$-1, -364(%ebp)
.L1942:
	.loc 1 5029 0
	movl	-220(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -208(%ebp)
	.loc 1 5030 0
	movl	-220(%ebp), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -212(%ebp)
	.loc 1 5031 0
	movl	-220(%ebp), %eax
	movzbl	33(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L1943
	.loc 1 5032 0
	movl	$0, -212(%ebp)
.L1943:
	.loc 1 5034 0
	movl	-220(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -204(%ebp)
	.loc 1 5035 0
	movl	$0, 4(%esp)
	movl	-204(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L1945
	movl	-220(%ebp), %eax
	movl	%eax, (%esp)
	call	bit_position@PLT
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L1945
	.loc 1 5038 0
	movl	-220(%ebp), %eax
	movl	%eax, (%esp)
	call	int_bit_position@PLT
	movl	%eax, -360(%ebp)
	movl	%edx, -356(%ebp)
	.loc 1 5039 0
	movl	$0, -204(%ebp)
	.loc 1 5035 0
	jmp	.L1948
.L1945:
	.loc 1 5042 0
	movl	-220(%ebp), %eax
	movl	96(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -360(%ebp)
	movl	%edx, -356(%ebp)
.L1948:
	.loc 1 5044 0
	cmpl	$0, -204(%ebp)
	je	.L1949
.LBB70:
	.loc 1 5048 0
	movl	-204(%ebp), %eax
	movl	%eax, (%esp)
	call	contains_placeholder_p@PLT
	testl	%eax, %eax
	je	.L1951
	.loc 1 5049 0
	movl	-388(%ebp), %eax
	movl	4(%eax), %edx
	movl	-392(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	%edx, 12(%esp)
	movl	-204(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$59, (%esp)
	call	build@PLT
	movl	%eax, -204(%ebp)
.L1951:
	.loc 1 5052 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-204(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -196(%ebp)
	.loc 1 5053 0
	movl	-200(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L1953
	.loc 1 5054 0
	leal	__FUNCTION__.20378@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5054, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L1953:
	.loc 1 5060 0
	movl	-196(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L1955
	.loc 1 5061 0
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	$0, 8(%esp)
	movl	-196(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -196(%ebp)
.L1955:
	.loc 1 5064 0
	movl	-204(%ebp), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-196(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	offset_address@PLT
	movl	%eax, -200(%ebp)
.L1949:
.LBE70:
	.loc 1 5068 0
	movl	-220(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L1957
	.loc 1 5070 0
	movl	-200(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1959
	.loc 1 5071 0
	movl	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -200(%ebp)
.L1959:
	.loc 1 5073 0
	movl	-200(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$4, %edx
	movb	%dl, 3(%eax)
.L1957:
	.loc 1 5081 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L1961
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1963
	movl	$64, -624(%ebp)
	movl	$0, -620(%ebp)
	jmp	.L1965
.L1963:
	movl	$32, -624(%ebp)
	movl	$0, -620(%ebp)
.L1965:
	movl	-620(%ebp), %ecx
	cmpl	-364(%ebp), %ecx
	jl	.L1961
	movl	-620(%ebp), %esi
	cmpl	-364(%ebp), %esi
	jg	.L1967
	movl	-624(%ebp), %edi
	cmpl	-368(%ebp), %edi
	jbe	.L1961
.L1967:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1968
	movl	$64, -616(%ebp)
	movl	$0, -612(%ebp)
	jmp	.L1970
.L1968:
	movl	$32, -616(%ebp)
	movl	$0, -612(%ebp)
.L1970:
	movl	-360(%ebp), %eax
	movl	-356(%ebp), %edx
	movl	-616(%ebp), %esi
	movl	-612(%ebp), %edi
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L1961
	movl	-212(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L1961
	movl	-216(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L1961
	cmpl	$0, -372(%ebp)
	js	.L1961
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1975
	movl	$64, -608(%ebp)
	movl	$0, -604(%ebp)
	jmp	.L1977
.L1975:
	movl	$32, -608(%ebp)
	movl	$0, -604(%ebp)
.L1977:
	movl	-608(%ebp), %eax
	movl	-604(%ebp), %edx
	addl	-360(%ebp), %eax
	adcl	-356(%ebp), %edx
	movl	%eax, -600(%ebp)
	movl	%edx, -596(%ebp)
	movl	-376(%ebp), %eax
	movl	-372(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$3, %esi, %edi
	sall	$3, %esi
	movl	%esi, -592(%ebp)
	movl	%edi, -588(%ebp)
	movl	-588(%ebp), %edi
	cmpl	%edi, -596(%ebp)
	jg	.L1961
	movl	-588(%ebp), %eax
	cmpl	%eax, -596(%ebp)
	jl	.L1979
	movl	-592(%ebp), %edx
	cmpl	%edx, -600(%ebp)
	ja	.L1961
.L1979:
.LBB71:
	.loc 1 5089 0
	movl	-216(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -192(%ebp)
	.loc 1 5091 0
	movl	-192(%ebp), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %eax
	movl	%eax, -580(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1980
	movl	$64, -576(%ebp)
	jmp	.L1982
.L1980:
	movl	$32, -576(%ebp)
.L1982:
	movl	-576(%ebp), %ecx
	cmpl	%ecx, -580(%ebp)
	jge	.L1983
	.loc 1 5093 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	264(%eax), %eax
	movl	%eax, -572(%ebp)
	movl	-192(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -568(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1985
	movl	$64, -564(%ebp)
	jmp	.L1987
.L1985:
	movl	$32, -564(%ebp)
.L1987:
	movl	-568(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	-564(%ebp), %edi
	movl	%edi, (%esp)
	call	*-572(%ebp)
	movl	%eax, -192(%ebp)
	.loc 1 5095 0
	movl	-216(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-192(%ebp), %eax
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, -216(%ebp)
.L1983:
	.loc 1 5098 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L1988
	.loc 1 5099 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1990
	movl	$64, -560(%ebp)
	movl	$0, -556(%ebp)
	jmp	.L1992
.L1990:
	movl	$32, -560(%ebp)
	movl	$0, -556(%ebp)
.L1992:
	movl	-560(%ebp), %eax
	movl	-556(%ebp), %edx
	subl	-368(%ebp), %eax
	sbbl	-364(%ebp), %edx
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	build_int_2_wide@PLT
	movl	%eax, 12(%esp)
	movl	-216(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-192(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, -216(%ebp)
.L1988:
	.loc 1 5102 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1993
	movl	$64, -552(%ebp)
	movl	$0, -548(%ebp)
	jmp	.L1995
.L1993:
	movl	$32, -552(%ebp)
	movl	$0, -548(%ebp)
.L1995:
	movl	-552(%ebp), %eax
	movl	-548(%ebp), %edx
	movl	%eax, -368(%ebp)
	movl	%edx, -364(%ebp)
	.loc 1 5103 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -212(%ebp)
.L1961:
.LBE71:
	.loc 1 5107 0
	movl	-200(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L1996
	movl	-200(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L1996
	movl	-220(%ebp), %eax
	movzbl	36(%eax), %eax
	andl	$-128, %eax
	testb	%al, %al
	je	.L1996
	.loc 1 5110 0
	movl	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -200(%ebp)
	.loc 1 5111 0
	movl	-200(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$1, %eax
	movb	%al, 3(%edx)
.L1996:
	.loc 1 5114 0
	movl	-220(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	get_alias_set@PLT
	movl	-368(%ebp), %esi
	movl	-364(%ebp), %edi
	movl	%eax, 36(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-228(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	-216(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-212(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-360(%ebp), %eax
	movl	-356(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	store_constructor_field
.L1936:
.LBE69:
	.loc 1 5004 0
	movl	-224(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -224(%ebp)
.L1934:
	cmpl	$0, -224(%ebp)
	jne	.L1935
	.loc 1 4954 0
	jmp	.L2187
.L1912:
.LBE68:
	.loc 1 5119 0
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	je	.L2002
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$10, %al
	jne	.L2004
.L2002:
.LBB72:
	.loc 1 5125 0
	movl	-228(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -176(%ebp)
	.loc 1 5126 0
	movl	-228(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -172(%ebp)
	.loc 1 5128 0
	movl	$0, -352(%ebp)
	movl	$0, -348(%ebp)
	.loc 1 5129 0
	movl	$0, -344(%ebp)
	movl	$0, -340(%ebp)
	.loc 1 5133 0
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$10, %al
	jne	.L2005
	.loc 1 5138 0
	movl	-228(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -176(%ebp)
	.loc 1 5139 0
	movl	-176(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %eax
	movl	16(%eax), %eax
	movl	%eax, -176(%ebp)
.L2005:
	.loc 1 5142 0
	movl	-176(%ebp), %eax
	movl	64(%eax), %eax
	testl	%eax, %eax
	je	.L2007
	movl	-176(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L2007
	movl	-176(%ebp), %eax
	movl	64(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2007
	movl	-176(%ebp), %eax
	movl	68(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2007
	movl	$1, -540(%ebp)
	jmp	.L2012
.L2007:
	movl	$0, -540(%ebp)
.L2012:
	movl	-540(%ebp), %edx
	movl	%edx, -168(%ebp)
	.loc 1 5148 0
	cmpl	$0, -168(%ebp)
	je	.L2013
	.loc 1 5150 0
	movl	-176(%ebp), %eax
	movl	64(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -352(%ebp)
	movl	%edx, -348(%ebp)
	.loc 1 5151 0
	movl	-176(%ebp), %eax
	movl	68(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -344(%ebp)
	movl	%edx, -340(%ebp)
.L2013:
	.loc 1 5157 0
	cmpl	$0, 16(%ebp)
	jne	.L2015
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2017
	movl	-388(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L2017
.L2015:
	.loc 1 5158 0
	movl	$1, -180(%ebp)
	.loc 1 5157 0
	jmp	.L2019
.L2017:
.LBB73:
	.loc 1 5161 0
	movl	$0, -336(%ebp)
	movl	$0, -332(%ebp)
	movl	$0, -328(%ebp)
	movl	$0, -324(%ebp)
	.loc 1 5162 0
	cmpl	$0, -168(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -180(%ebp)
	.loc 1 5167 0
	movl	-388(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -188(%ebp)
	.loc 1 5168 0
	jmp	.L2020
.L2021:
.LBB74:
	.loc 1 5171 0
	movl	-188(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -164(%ebp)
	.loc 1 5174 0
	cmpl	$0, -164(%ebp)
	je	.L2022
	movl	-164(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$115, %al
	jne	.L2022
.LBB75:
	.loc 1 5176 0
	movl	-164(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -160(%ebp)
	.loc 1 5177 0
	movl	-164(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -156(%ebp)
	.loc 1 5179 0
	movl	$1, 4(%esp)
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2025
	movl	$1, 4(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	jne	.L2027
.L2025:
	.loc 1 5182 0
	movl	$1, -180(%ebp)
	.loc 1 5183 0
	jmp	.L2028
.L2027:
	.loc 1 5186 0
	movl	$1, 4(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -664(%ebp)
	movl	%edx, -660(%ebp)
	movl	$1, 4(%esp)
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	-664(%ebp), %esi
	movl	-660(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, -320(%ebp)
	movl	%edx, -316(%ebp)
	.loc 1 5174 0
	jmp	.L2029
.L2022:
.LBE75:
	.loc 1 5190 0
	movl	$1, -320(%ebp)
	movl	$0, -316(%ebp)
.L2029:
	.loc 1 5192 0
	movl	-320(%ebp), %eax
	movl	-316(%ebp), %edx
	addl	%eax, -336(%ebp)
	adcl	%edx, -332(%ebp)
	.loc 1 5193 0
	movl	-188(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	mostly_zeros_p
	testl	%eax, %eax
	je	.L2030
	.loc 1 5194 0
	movl	-320(%ebp), %eax
	movl	-316(%ebp), %edx
	addl	%eax, -328(%ebp)
	adcl	%edx, -324(%ebp)
.L2030:
.LBE74:
	.loc 1 5169 0
	movl	-188(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -188(%ebp)
.L2020:
	.loc 1 5168 0
	cmpl	$0, -188(%ebp)
	je	.L2028
	cmpl	$0, -180(%ebp)
	je	.L2021
.L2028:
	.loc 1 5199 0
	cmpl	$0, -180(%ebp)
	jne	.L2019
	movl	-352(%ebp), %eax
	movl	-348(%ebp), %edx
	movl	-344(%ebp), %esi
	movl	-340(%ebp), %edi
	movl	%esi, -664(%ebp)
	movl	%edi, -660(%ebp)
	movl	-664(%ebp), %esi
	movl	-660(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$1, %esi
	adcl	$0, %edi
	movl	%esi, -536(%ebp)
	movl	%edi, -532(%ebp)
	movl	-532(%ebp), %edi
	cmpl	-332(%ebp), %edi
	jg	.L2034
	movl	-532(%ebp), %eax
	cmpl	-332(%ebp), %eax
	jl	.L2036
	movl	-536(%ebp), %edx
	cmpl	-336(%ebp), %edx
	ja	.L2034
.L2036:
	movl	-328(%ebp), %eax
	movl	-324(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$2, %esi, %edi
	sall	$2, %esi
	movl	%esi, -528(%ebp)
	movl	%edi, -524(%ebp)
	movl	-332(%ebp), %eax
	imull	$3, %eax, %eax
	movl	%eax, -676(%ebp)
	movl	-336(%ebp), %eax
	imull	$0, %eax, %eax
	addl	%eax, -676(%ebp)
	movl	$3, -672(%ebp)
	movl	-672(%ebp), %eax
	mull	-336(%ebp)
	movl	%eax, -520(%ebp)
	movl	%edx, -516(%ebp)
	movl	-516(%ebp), %edx
	addl	%edx, -676(%ebp)
	movl	-676(%ebp), %ecx
	movl	%ecx, -516(%ebp)
	movl	-516(%ebp), %esi
	cmpl	%esi, -524(%ebp)
	jl	.L2019
	movl	-516(%ebp), %edi
	cmpl	%edi, -524(%ebp)
	jg	.L2034
	movl	-520(%ebp), %eax
	cmpl	%eax, -528(%ebp)
	jb	.L2019
.L2034:
	.loc 1 5201 0
	movl	$1, -180(%ebp)
.L2019:
.LBE73:
	.loc 1 5204 0
	cmpl	$0, -180(%ebp)
	je	.L2038
	cmpl	$0, -396(%ebp)
	js	.L2038
	cmpl	$0, -396(%ebp)
	jg	.L2041
	cmpl	$0, -400(%ebp)
	jbe	.L2038
.L2041:
	.loc 1 5206 0
	cmpl	$0, 16(%ebp)
	jne	.L2042
	.loc 1 5208 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2044
	.loc 1 5209 0
	movl	-392(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	jmp	.L2042
.L2044:
	.loc 1 5211 0
	movl	-400(%ebp), %eax
	movl	-396(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage@PLT
.L2042:
	.loc 1 5213 0
	movl	$1, 16(%ebp)
	.loc 1 5204 0
	jmp	.L2046
.L2038:
	.loc 1 5215 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2046
	.loc 1 5217 0
	movl	-392(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$59, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L2046:
	.loc 1 5222 0
	movl	-388(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -188(%ebp)
	movl	$0, -184(%ebp)
	.loc 1 5223 0
	jmp	.L2048
.L2049:
.LBB76:
	.loc 1 5230 0
	movl	-188(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -148(%ebp)
	.loc 1 5231 0
	movl	-188(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -144(%ebp)
	.loc 1 5232 0
	movl	-392(%ebp), %eax
	movl	%eax, -140(%ebp)
	.loc 1 5234 0
	cmpl	$0, 16(%ebp)
	je	.L2050
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	jne	.L2052
.L2050:
	.loc 1 5237 0
	movl	-172(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -232(%ebp)
	.loc 1 5238 0
	movl	-172(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -152(%ebp)
	.loc 1 5239 0
	cmpl	$52, -152(%ebp)
	jne	.L2053
	.loc 1 5240 0
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2055
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -512(%ebp)
	movl	%edx, -508(%ebp)
	jmp	.L2057
.L2055:
	movl	$-1, -512(%ebp)
	movl	$-1, -508(%ebp)
.L2057:
	movl	-512(%ebp), %edx
	movl	-508(%ebp), %ecx
	movl	%edx, -312(%ebp)
	movl	%ecx, -308(%ebp)
	jmp	.L2058
.L2053:
	.loc 1 5244 0
	movl	-152(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -312(%ebp)
	movl	-312(%ebp), %eax
	movl	$0, %edx
	movl	%eax, -312(%ebp)
	movl	%edx, -308(%ebp)
.L2058:
	.loc 1 5246 0
	cmpl	$0, -144(%ebp)
	je	.L2059
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$115, %al
	jne	.L2059
.LBB77:
	.loc 1 5248 0
	movl	-144(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -136(%ebp)
	.loc 1 5249 0
	movl	-144(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -132(%ebp)
	.loc 1 5256 0
	cmpl	$0, -168(%ebp)
	je	.L2062
	movl	$0, 4(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2062
	movl	$0, 4(%esp)
	movl	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2062
	movl	$0, 4(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -296(%ebp)
	movl	%edx, -292(%ebp)
	movl	$0, 4(%esp)
	movl	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -288(%ebp)
	movl	%edx, -284(%ebp)
	movl	-296(%ebp), %esi
	movl	-292(%ebp), %edi
	movl	-288(%ebp), %eax
	movl	-284(%ebp), %edx
	subl	%esi, %eax
	sbbl	%edi, %edx
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, -280(%ebp)
	movl	%edx, -276(%ebp)
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2066
	cmpl	$0, -276(%ebp)
	js	.L2066
	cmpl	$0, -276(%ebp)
	jg	.L2069
	cmpl	$2, -280(%ebp)
	jbe	.L2066
.L2069:
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2070
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -672(%ebp)
	movl	%edx, -668(%ebp)
	movl	-668(%ebp), %esi
	imull	-280(%ebp), %esi
	movl	-276(%ebp), %ecx
	imull	-672(%ebp), %ecx
	addl	%ecx, %esi
	movl	-280(%ebp), %ecx
	movl	-672(%ebp), %eax
	mull	%ecx
	movl	%eax, -496(%ebp)
	movl	%edx, -492(%ebp)
	addl	-492(%ebp), %esi
	movl	%esi, -492(%ebp)
	cmpl	$0, -492(%ebp)
	jg	.L2070
	cmpl	$0, -492(%ebp)
	js	.L2066
	cmpl	$320, -496(%ebp)
	ja	.L2070
.L2066:
	movl	$1, -500(%ebp)
	jmp	.L2073
.L2070:
	movl	$0, -500(%ebp)
.L2073:
	cmpl	$0, -500(%ebp)
	je	.L2062
	.loc 1 5268 0
	movl	-352(%ebp), %eax
	movl	-348(%ebp), %edx
	subl	%eax, -296(%ebp)
	sbbl	%edx, -292(%ebp)
	movl	-352(%ebp), %eax
	movl	-348(%ebp), %edx
	subl	%eax, -288(%ebp)
	sbbl	%edx, -284(%ebp)
	.loc 1 5269 0
	jmp	.L2075
.L2076:
	.loc 1 5271 0
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%edx, %esi
	imull	-296(%ebp), %esi
	movl	-292(%ebp), %ecx
	imull	%eax, %ecx
	addl	%ecx, %esi
	movl	-296(%ebp), %ecx
	mull	%ecx
	addl	%edx, %esi
	movl	%esi, %edx
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	.loc 1 5273 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2077
	movl	-392(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2077
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	jne	.L2077
	movl	-228(%ebp), %eax
	movzbl	38(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L2077
	.loc 1 5278 0
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -392(%ebp)
	.loc 1 5279 0
	movl	-392(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$1, %eax
	movb	%al, 3(%edx)
.L2077:
	.loc 1 5282 0
	movl	-172(%ebp), %eax
	movl	%eax, (%esp)
	call	get_alias_set@PLT
	movl	-312(%ebp), %esi
	movl	-308(%ebp), %edi
	movl	%eax, 36(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-228(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-304(%ebp), %eax
	movl	-300(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	store_constructor_field
	.loc 1 5269 0
	addl	$1, -296(%ebp)
	adcl	$0, -292(%ebp)
.L2075:
	movl	-296(%ebp), %edx
	movl	-292(%ebp), %ecx
	movl	%edx, -640(%ebp)
	movl	%ecx, -636(%ebp)
	movl	-636(%ebp), %ecx
	cmpl	-284(%ebp), %ecx
	jl	.L2076
	movl	-636(%ebp), %esi
	cmpl	-284(%ebp), %esi
	jg	.L2052
	movl	-640(%ebp), %edi
	cmpl	-288(%ebp), %edi
	jbe	.L2076
	.loc 1 5256 0
	jmp	.L2052
.L2062:
	.loc 1 5289 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -120(%ebp)
	.loc 1 5290 0
	call	gen_label_rtx@PLT
	movl	%eax, -116(%ebp)
	.loc 1 5291 0
	call	gen_label_rtx@PLT
	movl	%eax, -112(%ebp)
	.loc 1 5293 0
	movl	-176(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -232(%ebp)
	.loc 1 5295 0
	movl	-176(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$35, (%esp)
	call	build_decl@PLT
	movl	%eax, -144(%ebp)
	.loc 1 5297 0
	movl	-144(%ebp), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %edx
	movl	$0, 12(%esp)
	leal	-232(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	promote_mode@PLT
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -128(%ebp)
	.loc 1 5300 0
	movl	-144(%ebp), %edx
	movl	-128(%ebp), %eax
	movl	%eax, 88(%edx)
	.loc 1 5301 0
	movl	-148(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$120, %al
	jne	.L2085
	movl	-148(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2085
	.loc 1 5306 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 5307 0
	call	emit_queue@PLT
.L2085:
	.loc 1 5309 0
	movl	$0, 8(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	.loc 1 5310 0
	movl	$0, (%esp)
	call	expand_start_loop@PLT
	movl	%eax, -108(%ebp)
	.loc 1 5313 0
	movl	-176(%ebp), %eax
	movl	64(%eax), %edx
	movl	-144(%ebp), %eax
	movl	4(%eax), %ecx
	movl	%edx, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$61, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, -104(%ebp)
	.loc 1 5317 0
	movl	-172(%ebp), %eax
	movl	24(%eax), %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$62, (%esp)
	call	size_binop@PLT
	movl	%eax, -104(%ebp)
	.loc 1 5321 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -124(%ebp)
	.loc 1 5322 0
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	offset_address@PLT
	movl	%eax, -140(%ebp)
	.loc 1 5324 0
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -140(%ebp)
	.loc 1 5325 0
	movl	-148(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	jne	.L2088
	.loc 1 5326 0
	movl	-312(%ebp), %eax
	movl	-308(%ebp), %edx
	movl	%eax, -648(%ebp)
	movl	%edx, -644(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -672(%ebp)
	movl	%edx, -668(%ebp)
	movl	-672(%ebp), %esi
	movl	-668(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-648(%ebp), %eax
	adcl	-644(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	store_constructor
	jmp	.L2090
.L2088:
	.loc 1 5329 0
	movl	$0, 8(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
.L2090:
	.loc 1 5331 0
	movl	integer_types@GOT(%ebx), %eax
	movl	20(%eax), %edx
	movl	-132(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$99, (%esp)
	call	build@PLT
	movl	%eax, 4(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_exit_loop_if_false@PLT
	.loc 1 5335 0
	movl	global_trees@GOT(%ebx), %eax
	movl	48(%eax), %edx
	movl	-144(%ebp), %eax
	movl	4(%eax), %ecx
	movl	%edx, 12(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$132, (%esp)
	call	build@PLT
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_increment
	.loc 1 5338 0
	call	expand_end_loop@PLT
	.loc 1 5339 0
	movl	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 5246 0
	jmp	.L2052
.L2059:
.LBE77:
	.loc 1 5342 0
	cmpl	$0, -144(%ebp)
	je	.L2091
	movl	$0, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2093
.L2091:
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	jne	.L2094
.L2093:
.LBB78:
	.loc 1 5347 0
	cmpl	$0, -144(%ebp)
	jne	.L2095
	.loc 1 5348 0
	movl	$1, 8(%esp)
	movl	$1, (%esp)
	movl	$0, 4(%esp)
	call	size_int_wide@PLT
	movl	%eax, -144(%ebp)
.L2095:
	.loc 1 5350 0
	movl	-352(%ebp), %eax
	orl	-348(%ebp), %eax
	testl	%eax, %eax
	je	.L2097
	.loc 1 5351 0
	movl	-176(%ebp), %eax
	movl	64(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$61, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, -144(%ebp)
.L2097:
	.loc 1 5355 0
	movl	-172(%ebp), %eax
	movl	24(%eax), %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, 8(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$62, (%esp)
	call	size_binop@PLT
	movl	%eax, -100(%ebp)
	.loc 1 5358 0
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, %esi
	movl	%edx, %edi
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	offset_address@PLT
	movl	%eax, -140(%ebp)
	.loc 1 5361 0
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -140(%ebp)
	.loc 1 5362 0
	movl	$0, 8(%esp)
	movl	-140(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	.loc 1 5342 0
	jmp	.L2052
.L2094:
.LBE78:
	.loc 1 5366 0
	cmpl	$0, -144(%ebp)
	je	.L2099
	.loc 1 5367 0
	movl	$0, 4(%esp)
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, %esi
	movl	%edx, %edi
	subl	-352(%ebp), %esi
	sbbl	-348(%ebp), %edi
	movl	%esi, -488(%ebp)
	movl	%edi, -484(%ebp)
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	-484(%ebp), %ecx
	imull	%eax, %ecx
	movl	-488(%ebp), %esi
	imull	%edx, %esi
	addl	%esi, %ecx
	mull	-488(%ebp)
	addl	%edx, %ecx
	movl	%ecx, %edx
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	jmp	.L2101
.L2099:
	.loc 1 5370 0
	movl	-184(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	%eax, %edi
	sarl	$31, %edi
	movl	%edi, -476(%ebp)
	movl	-172(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	-476(%ebp), %ecx
	imull	%eax, %ecx
	movl	-480(%ebp), %esi
	imull	%edx, %esi
	addl	%esi, %ecx
	mull	-480(%ebp)
	addl	%edx, %ecx
	movl	%ecx, %edx
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
	movl	%eax, -304(%ebp)
	movl	%edx, -300(%ebp)
.L2101:
	.loc 1 5372 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2102
	movl	-392(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2102
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	jne	.L2102
	movl	-228(%ebp), %eax
	movzbl	38(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L2102
	.loc 1 5376 0
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -392(%ebp)
	.loc 1 5377 0
	movl	-392(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$1, %eax
	movb	%al, 3(%edx)
.L2102:
	.loc 1 5380 0
	movl	-172(%ebp), %eax
	movl	%eax, (%esp)
	call	get_alias_set@PLT
	movl	-312(%ebp), %esi
	movl	-308(%ebp), %edi
	movl	%eax, 36(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-228(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-304(%ebp), %eax
	movl	-300(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	store_constructor_field
.L2052:
.LBE76:
	.loc 1 5224 0
	movl	-188(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -188(%ebp)
	addl	$1, -184(%ebp)
.L2048:
	.loc 1 5223 0
	cmpl	$0, -188(%ebp)
	jne	.L2049
	.loc 1 5119 0
	jmp	.L2187
.L2004:
.LBE72:
	.loc 1 5388 0
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$20, %al
	jne	.L2108
.LBB79:
	.loc 1 5390 0
	movl	-388(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -96(%ebp)
	.loc 1 5391 0
	movl	-228(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -272(%ebp)
	movl	%edx, -268(%ebp)
	.loc 1 5392 0
	movl	-228(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 5406 0
	cmpl	$0, -96(%ebp)
	jne	.L2110
	cmpl	$0, -396(%ebp)
	js	.L2110
	cmpl	$0, -396(%ebp)
	jg	.L2113
	cmpl	$0, -400(%ebp)
	jbe	.L2110
.L2113:
	.loc 1 5408 0
	cmpl	$0, 16(%ebp)
	jne	.L2187
	.loc 1 5409 0
	movl	-400(%ebp), %eax
	movl	-396(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage@PLT
	.loc 1 5410 0
	jmp	.L2187
.L2110:
	.loc 1 5413 0
	movl	-92(%ebp), %eax
	movl	64(%eax), %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, -88(%ebp)
	.loc 1 5414 0
	movl	-92(%ebp), %eax
	movl	68(%eax), %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, -84(%ebp)
	.loc 1 5415 0
	movl	$1, 8(%esp)
	movl	$1, (%esp)
	movl	$0, 4(%esp)
	call	size_int_wide@PLT
	movl	%eax, %esi
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	size_diffop@PLT
	movl	%esi, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$60, (%esp)
	call	size_binop@PLT
	movl	%eax, -80(%ebp)
	.loc 1 5419 0
	movl	$1, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -264(%ebp)
	movl	%edx, -260(%ebp)
	.loc 1 5424 0
	movl	-392(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L2116
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2118
	movl	$128, -472(%ebp)
	movl	$0, -468(%ebp)
	jmp	.L2120
.L2118:
	movl	$64, -472(%ebp)
	movl	$0, -468(%ebp)
.L2120:
	movl	-468(%ebp), %eax
	cmpl	-260(%ebp), %eax
	ja	.L2116
	movl	-468(%ebp), %edx
	cmpl	-260(%ebp), %edx
	jb	.L2122
	movl	-472(%ebp), %ecx
	cmpl	-264(%ebp), %ecx
	jae	.L2116
.L2122:
	cmpl	$0, -268(%ebp)
	ja	.L2123
	cmpl	$0, -268(%ebp)
	jb	.L2125
	cmpl	$32, -272(%ebp)
	ja	.L2123
.L2125:
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2123
.L2116:
.LBB80:
	.loc 1 5427 0
	movl	-388(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -76(%ebp)
	.loc 1 5428 0
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -72(%ebp)
	.loc 1 5429 0
	movl	-264(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	48(%esp), %esi
	movl	%esi, -460(%ebp)
	movl	-460(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -460(%ebp)
	movl	-460(%ebp), %edi
	movl	%edi, -68(%ebp)
	.loc 1 5430 0
	movl	$0, -256(%ebp)
	movl	$0, -252(%ebp)
	.loc 1 5431 0
	movl	$0, -64(%ebp)
	.loc 1 5432 0
	movl	$0, -60(%ebp)
	.loc 1 5433 0
	movl	$0, -56(%ebp)
	.loc 1 5435 0
	movl	-264(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-388(%ebp), %eax
	movl	%eax, (%esp)
	call	get_set_constructor_bits@PLT
	movl	%eax, -96(%ebp)
	jmp	.L2189
.L2126:
.L2189:
	.loc 1 5438 0
	movl	-60(%ebp), %eax
	addl	-68(%ebp), %eax
	movzbl	(%eax), %eax
	testb	%al, %al
	je	.L2127
	.loc 1 5440 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2129
	.loc 1 5441 0
	movl	-64(%ebp), %edx
	movl	-76(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	-256(%ebp), %eax
	orl	%esi, %eax
	movl	-252(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -256(%ebp)
	movl	%edx, -252(%ebp)
	jmp	.L2127
.L2129:
	.loc 1 5443 0
	movl	-64(%ebp), %ecx
	movl	$1, %eax
	sall	%cl, %eax
	movl	%eax, %esi
	movl	%eax, %edi
	sarl	$31, %edi
	movl	-256(%ebp), %eax
	orl	%esi, %eax
	movl	-252(%ebp), %edx
	orl	%edi, %edx
	movl	%eax, -256(%ebp)
	movl	%edx, -252(%ebp)
.L2127:
	.loc 1 5446 0
	addl	$1, -64(%ebp)
	addl	$1, -60(%ebp)
	.loc 1 5447 0
	movl	-64(%ebp), %eax
	cmpl	-76(%ebp), %eax
	jae	.L2131
	movl	-60(%ebp), %eax
	movl	$0, %edx
	movl	%edx, %ecx
	xorl	-260(%ebp), %ecx
	xorl	-264(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	jne	.L2126
.L2131:
	.loc 1 5449 0
	movl	-256(%ebp), %eax
	orl	-252(%ebp), %eax
	testl	%eax, %eax
	jne	.L2134
	cmpl	$0, 16(%ebp)
	jne	.L2136
.L2134:
.LBB81:
	.loc 1 5451 0
	movl	-256(%ebp), %eax
	movl	-252(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -52(%ebp)
	.loc 1 5457 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2137
	.loc 1 5458 0
	movl	-56(%ebp), %eax
	movl	$0, %edx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -48(%ebp)
	jmp	.L2139
.L2137:
	.loc 1 5459 0
	cmpl	$0, -56(%ebp)
	jne	.L2140
	.loc 1 5460 0
	movl	-392(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L2139
.L2140:
	.loc 1 5462 0
	leal	__FUNCTION__.20378@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5462, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2139:
	.loc 1 5463 0
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L2136:
.LBE81:
	.loc 1 5466 0
	movl	-60(%ebp), %eax
	movl	$0, %edx
	movl	%edx, %ecx
	xorl	-260(%ebp), %ecx
	xorl	-264(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L2155
	.loc 1 5468 0
	movl	$0, -256(%ebp)
	movl	$0, -252(%ebp)
	.loc 1 5469 0
	movl	$0, -64(%ebp)
	.loc 1 5470 0
	movl	-76(%ebp), %eax
	shrl	$3, %eax
	addl	%eax, -56(%ebp)
	.loc 1 5472 0
	jmp	.L2126
.L2123:
.LBE80:
	.loc 1 5474 0
	cmpl	$0, 16(%ebp)
	jne	.L2155
	.loc 1 5476 0
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2146
	movl	-96(%ebp), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	jne	.L2148
	movl	-264(%ebp), %eax
	xorl	$1, %eax
	orl	-260(%ebp), %eax
	testl	%eax, %eax
	jne	.L2146
	jmp	.L2155
.L2148:
	movl	-96(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2150
	movl	-96(%ebp), %eax
	movl	16(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2150
	movl	-96(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -664(%ebp)
	movl	%edx, -660(%ebp)
	movl	-96(%ebp), %eax
	movl	16(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	-664(%ebp), %esi
	movl	-660(%ebp), %edi
	subl	%eax, %esi
	sbbl	%edx, %edi
	movl	%esi, %eax
	movl	%edi, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$1, %esi
	adcl	$0, %edi
	movl	-264(%ebp), %eax
	movl	-260(%ebp), %edx
	movl	%edi, %ecx
	xorl	%edx, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L2153
.L2150:
	movl	$1, -456(%ebp)
	jmp	.L2154
.L2153:
	movl	$0, -456(%ebp)
.L2154:
	movzbl	-456(%ebp), %eax
	testb	%al, %al
	je	.L2155
.L2146:
	.loc 1 5484 0
	movl	-388(%ebp), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	clear_storage@PLT
	.loc 1 5486 0
	jmp	.L2155
.L2156:
.LBB82:
	.loc 1 5489 0
	movl	-96(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 5491 0
	movl	-96(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 5495 0
	movl	$4, 12(%esp)
	movl	$76, 8(%esp)
	movl	$0, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -36(%ebp)
	.loc 1 5499 0
	cmpl	$0, -44(%ebp)
	jne	.L2157
	.loc 1 5501 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -44(%ebp)
	.loc 1 5502 0
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
.L2157:
	.loc 1 5505 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, -44(%ebp)
	.loc 1 5506 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, -40(%ebp)
	.loc 1 5507 0
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	jne	.L2159
	.loc 1 5509 0
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$61, (%esp)
	call	size_binop@PLT
	movl	%eax, -44(%ebp)
	.loc 1 5510 0
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$61, (%esp)
	call	size_binop@PLT
	movl	%eax, -40(%ebp)
.L2159:
	.loc 1 5512 0
	movl	$4, 12(%esp)
	movl	$76, 8(%esp)
	movl	$0, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -32(%ebp)
	.loc 1 5514 0
	movl	$4, 12(%esp)
	movl	$76, 8(%esp)
	movl	$0, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -28(%ebp)
	.loc 1 5517 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2161
	.loc 1 5519 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	-392(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	*%edx
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -24(%ebp)
	.loc 1 5525 0
	movl	-392(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	jmp	.L2163
.L2161:
	.loc 1 5528 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2164
	.loc 1 5529 0
	movl	-392(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2163
.L2164:
	.loc 1 5531 0
	leal	__FUNCTION__.20378@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5531, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2163:
	.loc 1 5535 0
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L2166
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L2166
	movl	-44(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%eax, -248(%ebp)
	movl	%edx, -244(%ebp)
	movl	-248(%ebp), %esi
	movl	-244(%ebp), %edi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2166
	movl	-40(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, -240(%ebp)
	movl	%edx, -236(%ebp)
	movl	-240(%ebp), %esi
	movl	-236(%ebp), %edi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2166
	.loc 1 5541 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -452(%ebp)
	movl	-248(%ebp), %esi
	movl	-244(%ebp), %edi
	movl	-240(%ebp), %eax
	movl	-236(%ebp), %edx
	movl	%eax, -672(%ebp)
	movl	%edx, -668(%ebp)
	movl	-672(%ebp), %edx
	movl	-668(%ebp), %ecx
	subl	%esi, %edx
	sbbl	%edi, %ecx
	movl	%edx, -448(%ebp)
	movl	%ecx, -444(%ebp)
	movl	-444(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -672(%ebp)
	movl	%edx, -668(%ebp)
	movl	-672(%ebp), %esi
	movl	-668(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-448(%ebp), %eax
	adcl	-444(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -440(%ebp)
	movl	integer_types@GOT(%ebx), %eax
	movl	20(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -436(%ebp)
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	252(%eax), %eax
	movl	%eax, -432(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L2171
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2171
	movl	$5, -428(%ebp)
	jmp	.L2174
.L2171:
	movl	$4, -428(%ebp)
.L2174:
	movl	-248(%ebp), %edx
	movl	-244(%ebp), %ecx
	movl	%edx, -656(%ebp)
	movl	%ecx, -652(%ebp)
	movl	-652(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -672(%ebp)
	movl	%edx, -668(%ebp)
	movl	-672(%ebp), %esi
	movl	-668(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-656(%ebp), %eax
	adcl	-652(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, %edx
	movl	libfunc_table@GOT(%ebx), %eax
	movl	64(%eax), %eax
	movl	-452(%ebp), %ecx
	movl	%ecx, 36(%esp)
	movl	-440(%ebp), %esi
	movl	%esi, 32(%esp)
	movl	-436(%ebp), %edi
	movl	%edi, 28(%esp)
	movl	-432(%ebp), %ecx
	movl	%ecx, 24(%esp)
	movl	-428(%ebp), %esi
	movl	%esi, 20(%esp)
	movl	%edx, 16(%esp)
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	emit_library_call@PLT
	.loc 1 5535 0
	jmp	.L2175
.L2166:
	.loc 1 5551 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -424(%ebp)
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -420(%ebp)
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -416(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L2176
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2176
	movl	$5, -412(%ebp)
	jmp	.L2179
.L2176:
	movl	$4, -412(%ebp)
.L2179:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -408(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L2180
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2180
	movl	$5, -404(%ebp)
	jmp	.L2183
.L2180:
	movl	$4, -404(%ebp)
.L2183:
	leal	.LC4@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	-404(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	$78, (%esp)
	call	gen_rtx_fmt_s@PLT
	movl	%eax, %edx
	movl	-424(%ebp), %eax
	movl	%eax, 44(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 40(%esp)
	movl	-420(%ebp), %ecx
	movl	%ecx, 36(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-416(%ebp), %esi
	movl	%esi, 28(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-412(%ebp), %edi
	movl	%edi, 20(%esp)
	movl	-408(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$4, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	emit_library_call@PLT
.L2175:
	.loc 1 5557 0
	movl	-392(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2184
	.loc 1 5558 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L2184:
.LBE82:
	.loc 1 5486 0
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -96(%ebp)
.L2155:
	cmpl	$0, -96(%ebp)
	jne	.L2156
	jmp	.L2187
.L2108:
.LBE79:
	.loc 1 5563 0
	leal	__FUNCTION__.20378@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5563, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2187:
	.loc 1 5564 0
	movl	-20(%ebp), %edx
	xorl	%gs:20, %edx
	je	.L2188
	call	__stack_chk_fail_local
.L2188:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE68:
	.size	store_constructor, .-store_constructor
	.section	.rodata
	.type	__FUNCTION__.21146, @object
	.size	__FUNCTION__.21146, 12
__FUNCTION__.21146:
	.string	"store_field"
	.text
	.type	store_field, @function
store_field:
.LFB69:
	.loc 1 5596 0
	pushl	%ebp
.LCFI256:
	movl	%esp, %ebp
.LCFI257:
	pushl	%edi
.LCFI258:
	pushl	%esi
.LCFI259:
	pushl	%ebx
.LCFI260:
	subl	$204, %esp
.LCFI261:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	12(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -76(%ebp)
	.loc 1 5597 0
	movl	$0, -56(%ebp)
	movl	$0, -52(%ebp)
	.loc 1 5599 0
	movl	32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2191
	.loc 1 5600 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2191:
	.loc 1 5604 0
	movl	-72(%ebp), %eax
	orl	-68(%ebp), %eax
	testl	%eax, %eax
	jne	.L2194
	.loc 1 5605 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2194:
	.loc 1 5606 0
	cmpl	$0, -68(%ebp)
	js	.L2196
	cmpl	$0, -68(%ebp)
	jg	.L2196
	cmpl	$0, -68(%ebp)
	js	.L2199
	cmpl	$63, -72(%ebp)
	ja	.L2196
.L2199:
	.loc 1 5607 0
	movl	-72(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L2287
	movl	%eax, %edx
	xorl	%eax, %eax
.L2287:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, -56(%ebp)
	movl	%edx, -52(%ebp)
.L2196:
	.loc 1 5620 0
	cmpl	$52, 28(%ebp)
	jne	.L2200
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2202
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2200
.L2202:
.LBB83:
	.loc 1 5626 0
	movl	44(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	44(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movzbl	%al, %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movl	44(%ebp), %eax
	movzbl	38(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	sall	$2, %eax
	movl	%edx, %ecx
	orl	%eax, %ecx
	movl	%ecx, -136(%ebp)
	movl	44(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L2204
	movl	44(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L2204
	movl	$1, -132(%ebp)
	jmp	.L2207
.L2204:
	movl	$0, -132(%ebp)
.L2207:
	movl	-132(%ebp), %eax
	sall	$3, %eax
	orl	-136(%ebp), %eax
	orl	$1, %eax
	movl	%eax, 4(%esp)
	movl	44(%ebp), %eax
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -44(%ebp)
	.loc 1 5627 0
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	$52, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -40(%ebp)
	.loc 1 5629 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	%edx, %ecx
	xorl	-68(%ebp), %ecx
	xorl	-72(%ebp), %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L2208
	.loc 1 5630 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L2208:
	.loc 1 5632 0
	movl	48(%ebp), %eax
	movl	%eax, 40(%esp)
	movl	44(%ebp), %eax
	movl	%eax, 36(%esp)
	movl	$0, 32(%esp)
	movl	$0, 28(%esp)
	movl	32(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	store_field
	.loc 1 5635 0
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 5638 0
	movl	-40(%ebp), %eax
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2200:
.LBE83:
	.loc 1 5641 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	jne	.L2210
	.loc 1 5645 0
	movl	-80(%ebp), %eax
	orl	-76(%ebp), %eax
	testl	%eax, %eax
	je	.L2212
	.loc 1 5646 0
	leal	__FUNCTION__.21146@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5646, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2212:
	.loc 1 5647 0
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2210:
	.loc 1 5654 0
	cmpl	$0, 28(%ebp)
	je	.L2214
	cmpl	$52, 28(%ebp)
	je	.L2216
	movl	28(%ebp), %eax
	movzbl	direct_store@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	jne	.L2216
	movl	28(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$5, %eax
	je	.L2216
	movl	28(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	jne	.L2214
.L2216:
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2214
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L2214
	cmpl	$52, 28(%ebp)
	je	.L2222
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L2224
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -128(%ebp)
	jmp	.L2226
.L2224:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L2227
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -124(%ebp)
	jmp	.L2229
.L2227:
	movl	$8, -124(%ebp)
.L2229:
	movl	-124(%ebp), %edx
	movl	%edx, -128(%ebp)
.L2226:
	movl	28(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, -128(%ebp)
	jb	.L2214
	movl	28(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	-80(%ebp), %esi
	movl	-76(%ebp), %edi
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L2214
.L2222:
	cmpl	$0, -68(%ebp)
	js	.L2231
	movl	32(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L2231
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %ecx
	movl	32(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	je	.L2231
.L2214:
.LBB84:
	.loc 1 5672 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -36(%ebp)
	.loc 1 5678 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L2234
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L2234
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -120(%ebp)
	movl	$0, -116(%ebp)
	movl	-116(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jl	.L2234
	movl	-116(%ebp), %edx
	cmpl	-68(%ebp), %edx
	jg	.L2238
	movl	-120(%ebp), %ecx
	cmpl	-72(%ebp), %ecx
	jbe	.L2234
.L2238:
	movl	32(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L2234
	.loc 1 5681 0
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	subl	-72(%ebp), %eax
	sbbl	-68(%ebp), %edx
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	size_int_wide@PLT
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	$1, 20(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -36(%ebp)
.L2234:
	.loc 1 5688 0
	cmpl	$0, 28(%ebp)
	je	.L2240
	cmpl	$52, 28(%ebp)
	je	.L2240
	movl	32(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	cmpl	28(%ebp), %eax
	je	.L2240
	.loc 1 5690 0
	movl	32(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	$1, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	28(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, -36(%ebp)
.L2240:
	.loc 1 5695 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L2244
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L2244
	.loc 1 5697 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2247
	movl	-36(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2247
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movl	%edx, %edi
	andl	$0, %edi
	movl	%edi, %eax
	orl	%esi, %eax
	testl	%eax, %eax
	je	.L2250
.L2247:
	.loc 1 5699 0
	leal	__FUNCTION__.21146@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$5699, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2250:
	.loc 1 5701 0
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, -152(%ebp)
	movl	%edx, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	movl	-168(%ebp), %esi
	movl	-164(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-152(%ebp), %eax
	adcl	-148(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, 8(%ebp)
	.loc 1 5702 0
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %ecx
	addl	$7, %edx
	adcl	$0, %ecx
	movl	%edx, -112(%ebp)
	movl	%ecx, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	movl	-168(%ebp), %esi
	movl	-164(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-112(%ebp), %eax
	adcl	-108(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	.loc 1 5707 0
	cmpl	$0, 36(%ebp)
	jne	.L2251
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L2253
.L2251:
	movl	8(%ebp), %edx
	movl	%edx, -100(%ebp)
.L2253:
	movl	-100(%ebp), %ecx
	movl	%ecx, -140(%ebp)
	jmp	.L2193
.L2244:
	.loc 1 5711 0
	movl	44(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	movl	-80(%ebp), %esi
	movl	-76(%ebp), %edi
	movl	-72(%ebp), %eax
	movl	-68(%ebp), %edx
	movl	%eax, -96(%ebp)
	movl	%edx, -92(%ebp)
	movl	-168(%ebp), %edx
	movl	-164(%ebp), %ecx
	movl	%edx, 28(%esp)
	movl	%ecx, 32(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	store_bit_field@PLT
	.loc 1 5714 0
	cmpl	$0, 36(%ebp)
	je	.L2254
	.loc 1 5718 0
	movl	-56(%ebp), %eax
	orl	-52(%ebp), %eax
	testl	%eax, %eax
	je	.L2256
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2258
	movl	8(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L2256
.L2258:
.LBB85:
	.loc 1 5724 0
	movl	-36(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 5725 0
	cmpl	$0, -28(%ebp)
	jne	.L2260
	.loc 1 5726 0
	movl	36(%ebp), %eax
	movl	%eax, -28(%ebp)
.L2260:
	.loc 1 5728 0
	cmpl	$0, 40(%ebp)
	je	.L2262
	.loc 1 5729 0
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	$0, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_and@PLT
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2262:
	.loc 1 5733 0
	movl	-28(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	subl	-72(%ebp), %eax
	sbbl	-68(%ebp), %edx
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	build_int_2_wide@PLT
	movl	%eax, -32(%ebp)
	.loc 1 5734 0
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	expand_shift@PLT
	movl	%eax, -36(%ebp)
	.loc 1 5735 0
	movl	$0, 20(%esp)
	movl	$0, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2256:
.LBE85:
	.loc 1 5738 0
	movl	44(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	movl	-80(%ebp), %esi
	movl	-76(%ebp), %edi
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %ecx
	movl	%edx, -88(%ebp)
	movl	%ecx, -84(%ebp)
	movl	-168(%ebp), %eax
	movl	-164(%ebp), %edx
	movl	%eax, 36(%esp)
	movl	%edx, 40(%esp)
	movl	$0, 32(%esp)
	movl	36(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	40(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	-88(%ebp), %edx
	movl	-84(%ebp), %ecx
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_bit_field@PLT
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2254:
	.loc 1 5742 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -140(%ebp)
	jmp	.L2193
.L2231:
.LBE84:
.LBB86:
	.loc 1 5746 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5747 0
	movl	8(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 5752 0
	cmpl	$0, 36(%ebp)
	je	.L2264
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2264
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2264
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2264
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2264
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2264
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L2271
	movl	flag_pic@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2273
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	pic_address_needs_scratch@PLT
	testl	%eax, %eax
	jne	.L2271
.L2273:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L2264
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2264
.L2271:
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L2276
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2276
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	24(%eax), %eax
	cmpl	%eax, %edx
	je	.L2264
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	28(%eax), %eax
	cmpl	%eax, %edx
	je	.L2264
.L2276:
	.loc 1 5759 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -20(%ebp)
.L2264:
	.loc 1 5763 0
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, -160(%ebp)
	movl	%edx, -156(%ebp)
	movl	-156(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -168(%ebp)
	movl	%edx, -164(%ebp)
	movl	-168(%ebp), %esi
	movl	-164(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-160(%ebp), %eax
	adcl	-156(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -20(%ebp)
	.loc 1 5765 0
	movl	-20(%ebp), %eax
	cmpl	8(%ebp), %eax
	jne	.L2280
	.loc 1 5766 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -20(%ebp)
.L2280:
	.loc 1 5768 0
	movl	-20(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$16, %eax
	movb	%al, 3(%edx)
	movl	-20(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$127, %eax
	movb	%al, 3(%edx)
	.loc 1 5769 0
	movl	-20(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2282
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L2282
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	movl	4(%eax), %edx
	movl	(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L2282
	.loc 1 5770 0
	movl	48(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_alias_set@PLT
.L2282:
	.loc 1 5772 0
	cmpl	$0, 36(%ebp)
	setne	%al
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	movl	%eax, -140(%ebp)
.L2193:
	movl	-140(%ebp), %eax
.LBE86:
	.loc 1 5774 0
	addl	$204, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE69:
	.size	store_field, .-store_field
.globl get_inner_reference
	.type	get_inner_reference, @function
get_inner_reference:
.LFB70:
	.loc 1 5808 0
	pushl	%ebp
.LCFI262:
	movl	%esp, %ebp
.LCFI263:
	pushl	%esi
.LCFI264:
	pushl	%ebx
.LCFI265:
	subl	$96, %esp
.LCFI266:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5809 0
	movl	$0, -60(%ebp)
	.loc 1 5810 0
	movl	$0, -56(%ebp)
	.loc 1 5811 0
	movl	global_trees@GOT(%ebx), %eax
	movl	60(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 5812 0
	movl	global_trees@GOT(%ebx), %eax
	movl	68(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 5813 0
	movl	$0, -64(%ebp)
	.loc 1 5818 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	jne	.L2289
	.loc 1 5820 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	28(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 5821 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	jne	.L2291
	.loc 1 5822 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
.L2291:
	.loc 1 5824 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	28(%ebp), %eax
	movl	%edx, (%eax)
	jmp	.L2293
.L2289:
	.loc 1 5826 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$41, %al
	jne	.L2294
	.loc 1 5828 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 5829 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	28(%ebp), %eax
	movl	%edx, (%eax)
	jmp	.L2293
.L2294:
	.loc 1 5833 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	.loc 1 5834 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	28(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 5836 0
	cmpl	$52, -56(%ebp)
	jne	.L2296
	.loc 1 5837 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L2293
.L2296:
	.loc 1 5839 0
	movl	-56(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	12(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
.L2293:
	.loc 1 5842 0
	cmpl	$0, -60(%ebp)
	je	.L2344
	.loc 1 5844 0
	movl	$1, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	jne	.L2300
	.loc 1 5845 0
	movl	$52, -56(%ebp)
	movl	12(%ebp), %eax
	movl	$-1, (%eax)
	movl	$-1, 4(%eax)
	jmp	.L2344
.L2300:
	.loc 1 5847 0
	movl	$1, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	12(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	jmp	.L2344
.L2298:
.L2344:
	.loc 1 5854 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$41, %al
	jne	.L2302
	.loc 1 5855 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$60, (%esp)
	call	size_binop@PLT
	movl	%eax, -48(%ebp)
	jmp	.L2304
.L2302:
	.loc 1 5856 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	jne	.L2305
.LBB87:
	.loc 1 5858 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -40(%ebp)
	.loc 1 5859 0
	movl	-40(%ebp), %eax
	movl	60(%eax), %eax
	movl	%eax, -36(%ebp)
	.loc 1 5864 0
	cmpl	$0, -36(%ebp)
	je	.L2307
	.loc 1 5866 0
	movl	-36(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	jne	.L2309
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	contains_placeholder_p@PLT
	testl	%eax, %eax
	je	.L2309
	.loc 1 5868 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$59, (%esp)
	call	build@PLT
	movl	%eax, -36(%ebp)
.L2309:
	.loc 1 5870 0
	movl	-36(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$60, (%esp)
	call	size_binop@PLT
	movl	%eax, -52(%ebp)
	.loc 1 5871 0
	movl	-40(%ebp), %eax
	movl	96(%eax), %eax
	movl	%eax, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$60, (%esp)
	call	size_binop@PLT
	movl	%eax, -48(%ebp)
	jmp	.L2304
.L2305:
.LBE87:
	.loc 1 5877 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$44, %al
	je	.L2312
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$45, %al
	jne	.L2314
.L2312:
.LBB88:
	.loc 1 5880 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 5881 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 5882 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 5883 0
	cmpl	$0, -24(%ebp)
	je	.L2315
	movl	-24(%ebp), %eax
	movl	64(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L2317
.L2315:
	movl	$0, -76(%ebp)
.L2317:
	movl	-76(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 5884 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 5890 0
	cmpl	$0, -20(%ebp)
	je	.L2318
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	jne	.L2318
	.loc 1 5891 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$61, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, -32(%ebp)
.L2318:
	.loc 1 5897 0
	movl	-32(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	jne	.L2321
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	contains_placeholder_p@PLT
	testl	%eax, %eax
	je	.L2321
	.loc 1 5899 0
	movl	-32(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$59, (%esp)
	call	build@PLT
	movl	%eax, -32(%ebp)
.L2321:
	.loc 1 5900 0
	movl	-16(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	jne	.L2324
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	contains_placeholder_p@PLT
	testl	%eax, %eax
	je	.L2324
	.loc 1 5902 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$59, (%esp)
	call	build@PLT
	movl	%eax, -16(%ebp)
.L2324:
	.loc 1 5904 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$62, (%esp)
	call	size_binop@PLT
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$60, (%esp)
	call	size_binop@PLT
	movl	%eax, -52(%ebp)
	.loc 1 5877 0
	jmp	.L2304
.L2314:
.LBE88:
	.loc 1 5910 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$58, %al
	jne	.L2327
.LBB89:
	.loc 1 5912 0
	leal	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_placeholder@PLT
	movl	%eax, -12(%ebp)
	.loc 1 5917 0
	cmpl	$0, -12(%ebp)
	je	.L2307
	.loc 1 5920 0
	movl	-12(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 5922 0
	jmp	.L2298
.L2327:
.LBE89:
	.loc 1 5924 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	je	.L2304
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$119, %al
	je	.L2304
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L2333
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	jne	.L2307
.L2333:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	jne	.L2307
.L2304:
	.loc 1 5933 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L2335
	.loc 1 5934 0
	movl	32(%ebp), %eax
	movl	$1, (%eax)
.L2335:
	.loc 1 5936 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
	.loc 1 5937 0
	jmp	.L2298
.L2307:
	.loc 1 5941 0
	movl	$0, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2337
	movl	global_trees@GOT(%ebx), %eax
	movl	76(%eax), %esi
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%esi, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$62, (%esp)
	call	size_binop@PLT
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	je	.L2337
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$60, (%esp)
	call	size_binop@PLT
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	je	.L2337
	movl	$0, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2337
	.loc 1 5946 0
	movl	$0, 4(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	16(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	20(%ebp), %eax
	movl	$0, (%eax)
	.loc 1 5941 0
	jmp	.L2342
.L2337:
	.loc 1 5948 0
	movl	$0, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	16(%ebp), %ecx
	movl	%eax, (%ecx)
	movl	%edx, 4(%ecx)
	movl	20(%ebp), %edx
	movl	-52(%ebp), %eax
	movl	%eax, (%edx)
.L2342:
	.loc 1 5950 0
	movl	24(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 5951 0
	movl	8(%ebp), %eax
	.loc 1 5952 0
	addl	$96, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE70:
	.size	get_inner_reference, .-get_inner_reference
.globl handled_component_p
	.type	handled_component_p, @function
handled_component_p:
.LFB71:
	.loc 1 5959 0
	pushl	%ebp
.LCFI267:
	movl	%esp, %ebp
.LCFI268:
	subl	$8, %esp
.LCFI269:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 5960 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	subl	$40, %eax
	movl	%eax, -8(%ebp)
	cmpl	$79, -8(%ebp)
	ja	.L2346
	movl	-8(%ebp), %eax
	sall	$2, %eax
	movl	.L2349@GOTOFF(%eax,%ecx), %eax
	addl	%ecx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2349:
	.long	.L2347@GOTOFF
	.long	.L2347@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2347@GOTOFF
	.long	.L2347@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2346@GOTOFF
	.long	.L2348@GOTOFF
	.long	.L2348@GOTOFF
	.long	.L2347@GOTOFF
	.long	.L2347@GOTOFF
	.text
.L2347:
	.loc 1 5968 0
	movl	$1, -4(%ebp)
	jmp	.L2350
.L2348:
	.loc 1 5972 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	sete	%al
	movzbl	%al, %eax
	movl	%eax, -4(%ebp)
	jmp	.L2350
.L2346:
	.loc 1 5976 0
	movl	$0, -4(%ebp)
.L2350:
	movl	-4(%ebp), %eax
	.loc 1 5978 0
	leave
	ret
.LFE71:
	.size	handled_component_p, .-handled_component_p
.globl force_operand
	.type	force_operand, @function
force_operand:
.LFB72:
	.loc 1 5990 0
	pushl	%ebp
.LCFI270:
	movl	%esp, %ebp
.LCFI271:
	pushl	%edi
.LCFI272:
	pushl	%esi
.LCFI273:
	pushl	%ebx
.LCFI274:
	subl	$76, %esp
.LCFI275:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 5993 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	get_subtarget
	movl	%eax, -24(%ebp)
	.loc 1 5994 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -20(%ebp)
	.loc 1 5997 0
	cmpl	$85, -20(%ebp)
	je	.L2353
	cmpl	$86, -20(%ebp)
	jne	.L2355
.L2353:
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	pic_offset_table_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2355
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2357
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2357
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L2355
.L2357:
	.loc 1 6003 0
	cmpl	$0, -24(%ebp)
	jne	.L2360
	.loc 1 6004 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -24(%ebp)
.L2360:
	.loc 1 6005 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 6006 0
	movl	-24(%ebp), %eax
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2355:
	.loc 1 6009 0
	cmpl	$131, -20(%ebp)
	je	.L2363
	cmpl	$130, -20(%ebp)
	jne	.L2365
.L2363:
	.loc 1 6011 0
	cmpl	$0, 12(%ebp)
	jne	.L2366
	.loc 1 6012 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L2366:
	.loc 1 6013 0
	cmpl	$131, -20(%ebp)
	sete	%al
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%esi, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 6015 0
	movl	12(%ebp), %eax
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2365:
	.loc 1 6018 0
	movl	-20(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$50, %al
	je	.L2368
	movl	-20(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$99, %al
	jne	.L2370
.L2368:
	.loc 1 6020 0
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6021 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L2371
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2380
	movl	-28(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jne	.L2371
.L2380:
	.loc 1 6022 0
	movl	$0, -24(%ebp)
.L2371:
	.loc 1 6023 0
	cmpl	$86, -20(%ebp)
	jne	.L2382
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2382
	.loc 1 6025 0
	movl	$85, -20(%ebp)
	.loc 1 6026 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	negate_rtx@PLT
	movl	%eax, -28(%ebp)
.L2382:
	.loc 1 6035 0
	cmpl	$85, -20(%ebp)
	jne	.L2385
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L2385
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L2385
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2385
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2385
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	$180, %eax
	ja	.L2385
.LBB90:
	.loc 1 6043 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	expand_simple_binop@PLT
	movl	%eax, -16(%ebp)
	.loc 1 6044 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	expand_simple_binop@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2385:
.LBE90:
	.loc 1 6050 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	force_operand@PLT
	movl	%eax, -32(%ebp)
	.loc 1 6051 0
	movl	$0, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -28(%ebp)
	.loc 1 6052 0
	movl	-20(%ebp), %eax
	subl	$88, %eax
	movl	%eax, -60(%ebp)
	cmpl	$11, -60(%ebp)
	ja	.L2392
	movl	-60(%ebp), %eax
	sall	$2, %eax
	movl	.L2399@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2399:
	.long	.L2393@GOTOFF
	.long	.L2394@GOTOFF
	.long	.L2395@GOTOFF
	.long	.L2396@GOTOFF
	.long	.L2397@GOTOFF
	.long	.L2392@GOTOFF
	.long	.L2392@GOTOFF
	.long	.L2392@GOTOFF
	.long	.L2392@GOTOFF
	.long	.L2392@GOTOFF
	.long	.L2392@GOTOFF
	.long	.L2398@GOTOFF
	.text
.L2393:
	.loc 1 6055 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$1, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_mult@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2394:
	.loc 1 6057 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	je	.L2400
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$3, %eax
	je	.L2400
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$5, %eax
	je	.L2400
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$7, %eax
	je	.L2400
	.loc 1 6058 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$3, 24(%esp)
	movl	$1, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_simple_binop@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2400:
	.loc 1 6061 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$2, %eax
	je	.L2405
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L2405
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$8, %eax
	jne	.L2408
.L2405:
	movl	$71, -48(%ebp)
	jmp	.L2409
.L2408:
	movl	$63, -48(%ebp)
.L2409:
	movl	$0, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2395:
	.loc 1 6067 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$0, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$67, 4(%esp)
	movl	$1, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2396:
	.loc 1 6071 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$1, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$63, 4(%esp)
	movl	$0, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2397:
	.loc 1 6075 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$1, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	$67, 4(%esp)
	movl	$1, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2398:
	.loc 1 6079 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_simple_binop@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2392:
	.loc 1 6083 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$3, 24(%esp)
	movl	$1, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_simple_binop@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2370:
	.loc 1 6087 0
	movl	-20(%ebp), %eax
	movl	rtx_class@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$49, %al
	jne	.L2410
	.loc 1 6089 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -32(%ebp)
	.loc 1 6090 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	$0, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_simple_unop@PLT
	movl	%eax, -56(%ebp)
	jmp	.L2362
.L2410:
	.loc 1 6096 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2412
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2412
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	%al, %cl
	jbe	.L2412
	.loc 1 6099 0
	movl	8(%ebp), %eax
	movl	12(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%esi, 12(%esp)
	movl	%edi, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, 8(%ebp)
.L2412:
	.loc 1 6108 0
	movl	8(%ebp), %eax
	movl	%eax, -56(%ebp)
.L2362:
	movl	-56(%ebp), %eax
	.loc 1 6109 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE72:
	.size	force_operand, .-force_operand
	.section	.rodata
	.type	__FUNCTION__.21871, @object
	.size	__FUNCTION__.21871, 12
__FUNCTION__.21871:
	.string	"safe_from_p"
	.local	save_expr_list.21845
	.comm	save_expr_list.21845,4,4
	.text
.globl safe_from_p
	.type	safe_from_p, @function
safe_from_p:
.LFB73:
	.loc 1 6124 0
	pushl	%ebp
.LCFI276:
	movl	%esp, %ebp
.LCFI277:
	pushl	%ebx
.LCFI278:
	subl	$116, %esp
.LCFI279:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6125 0
	movl	$0, -28(%ebp)
	.loc 1 6129 0
	cmpl	$0, 8(%ebp)
	je	.L2418
	cmpl	$0, 16(%ebp)
	je	.L2420
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L2420
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	je	.L2420
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	je	.L2420
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	jne	.L2425
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L2425
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	68(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	je	.L2420
.L2425:
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L2418
.L2420:
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2428
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	36(%eax), %eax
	cmpl	%eax, %edx
	je	.L2418
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L2428
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	36(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2428
.L2418:
	.loc 1 6148 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2428:
	.loc 1 6152 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2433
	.loc 1 6154 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
	.loc 1 6155 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2433
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2433
	.loc 1 6156 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2433:
	.loc 1 6168 0
	cmpl	$0, 16(%ebp)
	je	.L2437
.LBB91:
	.loc 1 6173 0
	movl	$0, save_expr_list.21845@GOTOFF(%ebx)
	.loc 1 6175 0
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	movl	%eax, -16(%ebp)
	.loc 1 6177 0
	movl	save_expr_list.21845@GOTOFF(%ebx), %eax
	movl	%eax, -12(%ebp)
	jmp	.L2439
.L2440:
	.loc 1 6178 0
	movl	-12(%ebp), %eax
	movl	16(%eax), %edx
	movzbl	10(%edx), %eax
	andl	$-17, %eax
	movb	%al, 10(%edx)
	.loc 1 6177 0
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
.L2439:
	cmpl	$0, -12(%ebp)
	jne	.L2440
	.loc 1 6180 0
	movl	-16(%ebp), %eax
	movl	%eax, -84(%ebp)
	jmp	.L2432
.L2437:
.LBE91:
	.loc 1 6184 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	subl	$49, %eax
	movl	%eax, -88(%ebp)
	cmpl	$71, -88(%ebp)
	ja	.L2442
	movl	-88(%ebp), %eax
	sall	$2, %eax
	movl	.L2449@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2449:
	.long	.L2443@GOTOFF
	.long	.L2444@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2444@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2445@GOTOFF
	.long	.L2446@GOTOFF
	.long	.L2447@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2447@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2442@GOTOFF
	.long	.L2448@GOTOFF
	.text
.L2446:
	.loc 1 6187 0
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2450
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2452
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L2454
.L2452:
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -76(%ebp)
.L2454:
	movl	-76(%ebp), %edx
	movl	%edx, -80(%ebp)
	jmp	.L2455
.L2450:
	movl	$0, -80(%ebp)
.L2455:
	movl	-80(%ebp), %ecx
	movl	%ecx, -28(%ebp)
	.loc 1 6188 0
	jmp	.L2442
.L2445:
	.loc 1 6191 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2448:
	.loc 1 6194 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$3, %al
	jne	.L2456
.L2457:
	.loc 1 6198 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	je	.L2458
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L2458
	.loc 1 6199 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2458:
	.loc 1 6200 0
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, 12(%ebp)
	.loc 1 6201 0
	cmpl	$0, 12(%ebp)
	jne	.L2461
	.loc 1 6202 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2461:
	.loc 1 6203 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$3, %al
	je	.L2457
	.loc 1 6204 0
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	movl	%eax, -84(%ebp)
	jmp	.L2432
.L2456:
	.loc 1 6207 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2465
	.loc 1 6208 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2465:
	.loc 1 6210 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2444:
	.loc 1 6214 0
	movl	12(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L2443
	.loc 1 6215 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2443:
	.loc 1 6219 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	movl	%eax, -84(%ebp)
	jmp	.L2432
.L2447:
	.loc 1 6228 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	subl	$42, %eax
	movl	%eax, -92(%ebp)
	cmpl	$81, -92(%ebp)
	ja	.L2468
	movl	-92(%ebp), %eax
	sall	$2, %eax
	movl	.L2478@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2478:
	.long	.L2469@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2470@GOTOFF
	.long	.L2471@GOTOFF
	.long	.L2472@GOTOFF
	.long	.L2473@GOTOFF
	.long	.L2474@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2475@GOTOFF
	.long	.L2468@GOTOFF
	.long	.L2476@GOTOFF
	.long	.L2477@GOTOFF
	.text
.L2477:
	.loc 1 6233 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	staticp@PLT
	testl	%eax, %eax
	jne	.L2479
	movl	12(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L2479
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L2482
.L2479:
	.loc 1 6236 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2482:
	.loc 1 6241 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 12(%ebp)
	.loc 1 6242 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$100, %al
	jne	.L2468
	.loc 1 6244 0
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2485
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2487
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L2489
.L2487:
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -72(%ebp)
.L2489:
	movl	-72(%ebp), %edx
	movzwl	(%edx), %eax
	cmpw	$76, %ax
	je	.L2490
.L2485:
	.loc 1 6246 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2490:
	.loc 1 6248 0
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2491
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -68(%ebp)
	jmp	.L2493
.L2491:
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	12(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -68(%ebp)
.L2493:
	movl	-68(%ebp), %ecx
	movl	4(%ecx), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6250 0
	jmp	.L2468
.L2469:
	.loc 1 6253 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2468
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	get_alias_set@PLT
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L2496
	movl	8(%ebp), %eax
	movl	12(%eax), %eax
	movl	(%eax), %edx
	movl	4(%eax), %ecx
	movl	%edx, -56(%ebp)
	movl	%ecx, -52(%ebp)
	jmp	.L2498
.L2496:
	movl	$0, -56(%ebp)
	movl	$0, -52(%ebp)
.L2498:
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %ecx
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	alias_sets_conflict_p@PLT
	testl	%eax, %eax
	je	.L2468
	.loc 1 6256 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2471:
	.loc 1 6262 0
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2500
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L2502
.L2500:
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2468
.L2502:
	.loc 1 6264 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2476:
	.loc 1 6271 0
	movl	12(%ebp), %eax
	addl	$20, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2504
	.loc 1 6272 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2504:
	.loc 1 6274 0
	movl	12(%ebp), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6275 0
	jmp	.L2468
.L2473:
	.loc 1 6278 0
	movl	12(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6279 0
	jmp	.L2468
.L2474:
	.loc 1 6282 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	movl	%eax, -84(%ebp)
	jmp	.L2432
.L2475:
	.loc 1 6285 0
	movl	12(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6286 0
	cmpl	$0, -28(%ebp)
	jne	.L2468
	.loc 1 6292 0
	movl	12(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L2507
	.loc 1 6293 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2507:
	.loc 1 6295 0
	movl	12(%ebp), %edx
	movzbl	10(%edx), %eax
	orl	$16, %eax
	movb	%al, 10(%edx)
	.loc 1 6296 0
	movl	12(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L2509
	.loc 1 6298 0
	movl	12(%ebp), %eax
	movzbl	10(%eax), %edx
	andl	$-17, %edx
	movb	%dl, 10(%eax)
	.loc 1 6299 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2509:
	.loc 1 6302 0
	movl	save_expr_list.21845@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_cons@PLT
	movl	%eax, save_expr_list.21845@GOTOFF(%ebx)
	.loc 1 6303 0
	movl	$1, -84(%ebp)
	jmp	.L2432
.L2470:
	.loc 1 6308 0
	movl	12(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	movl	%eax, -84(%ebp)
	jmp	.L2432
.L2472:
	.loc 1 6312 0
	leal	__FUNCTION__.21871@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6312, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2468:
	.loc 1 6319 0
	cmpl	$0, -28(%ebp)
	jne	.L2442
	.loc 1 6322 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	first_rtl_op@PLT
	movl	%eax, -20(%ebp)
	.loc 1 6323 0
	movl	$0, -24(%ebp)
	jmp	.L2512
.L2513:
	.loc 1 6324 0
	movl	-24(%ebp), %eax
	movl	12(%ebp), %edx
	movl	20(%edx,%eax,4), %eax
	testl	%eax, %eax
	je	.L2514
	movl	-24(%ebp), %edx
	movl	12(%ebp), %eax
	movl	20(%eax,%edx,4), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L2514
	.loc 1 6326 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2514:
	.loc 1 6323 0
	addl	$1, -24(%ebp)
.L2512:
	movl	-24(%ebp), %eax
	cmpl	-20(%ebp), %eax
	jl	.L2513
	.loc 1 6330 0
	movl	12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-106, %al
	jbe	.L2442
	movl	lang_hooks@GOT(%ebx), %eax
	movl	56(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L2442
	.loc 1 6333 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2442:
	.loc 1 6338 0
	cmpl	$0, -28(%ebp)
	je	.L2520
	.loc 1 6340 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L2522
	.loc 1 6342 0
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 6343 0
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2522
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2522
	.loc 1 6345 0
	movl	$0, -84(%ebp)
	jmp	.L2432
.L2522:
	.loc 1 6350 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	rtx_equal_p@PLT
	testl	%eax, %eax
	jne	.L2526
	movl	8(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2528
	movl	-28(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2528
	movl	rtx_addr_varies_p@GOT(%ebx), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	true_dependence@PLT
	testl	%eax, %eax
	jne	.L2526
.L2528:
	movl	$1, -44(%ebp)
	jmp	.L2531
.L2526:
	movl	$0, -44(%ebp)
.L2531:
	movl	-44(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	jmp	.L2432
.L2520:
	.loc 1 6357 0
	movl	$1, -84(%ebp)
.L2432:
	movl	-84(%ebp), %eax
	.loc 1 6358 0
	addl	$116, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE73:
	.size	safe_from_p, .-safe_from_p
	.type	var_rtx, @function
var_rtx:
.LFB74:
	.loc 1 6366 0
	pushl	%ebp
.LCFI280:
	movl	%esp, %ebp
.LCFI281:
	pushl	%ebx
.LCFI282:
	subl	$20, %esp
.LCFI283:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6367 0
	jmp	.L2534
.L2535:
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L2534:
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L2536
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L2536
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	jne	.L2539
.L2536:
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L2539
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	je	.L2535
.L2539:
	.loc 1 6368 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	subl	$35, %eax
	cmpl	$1, %eax
	ja	.L2541
	.loc 1 6372 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2543
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L2545
.L2543:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -8(%ebp)
.L2545:
	movl	-8(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L2546
.L2541:
	.loc 1 6374 0
	movl	$0, -12(%ebp)
.L2546:
	movl	-12(%ebp), %eax
	.loc 1 6376 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE74:
	.size	var_rtx, .-var_rtx
	.type	highest_pow2_factor, @function
highest_pow2_factor:
.LFB75:
	.loc 1 6439 0
	pushl	%ebp
.LCFI284:
	movl	%esp, %ebp
.LCFI285:
	pushl	%edi
.LCFI286:
	pushl	%esi
.LCFI287:
	pushl	%ebx
.LCFI288:
	subl	$108, %esp
.LCFI289:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6442 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	subl	$26, %eax
	movl	%eax, -68(%ebp)
	cmpl	$94, -68(%ebp)
	ja	.L2549
	movl	-68(%ebp), %eax
	sall	$2, %eax
	movl	.L2557@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2557:
	.long	.L2550@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2551@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2552@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2553@GOTOFF
	.long	.L2554@GOTOFF
	.long	.L2554@GOTOFF
	.long	.L2555@GOTOFF
	.long	.L2556@GOTOFF
	.long	.L2556@GOTOFF
	.long	.L2556@GOTOFF
	.long	.L2556@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2554@GOTOFF
	.long	.L2554@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2553@GOTOFF
	.long	.L2553@GOTOFF
	.long	.L2553@GOTOFF
	.long	.L2549@GOTOFF
	.long	.L2553@GOTOFF
	.text
.L2550:
	.loc 1 6451 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L2558
	.loc 1 6452 0
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L2560
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L2562
.L2560:
	movl	$128, -56(%ebp)
	movl	$0, -52(%ebp)
	jmp	.L2563
.L2562:
	movl	$64, -56(%ebp)
	movl	$0, -52(%ebp)
.L2563:
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	jmp	.L2564
.L2558:
	.loc 1 6457 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 6458 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	negl	%esi
	adcl	$0, %edi
	negl	%edi
	movl	-32(%ebp), %eax
	andl	%esi, %eax
	movl	-28(%ebp), %edx
	andl	%edi, %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 6459 0
	movl	-32(%ebp), %eax
	orl	-28(%ebp), %eax
	testl	%eax, %eax
	jne	.L2565
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L2567
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L2569
.L2567:
	movl	$128, -40(%ebp)
	movl	$0, -36(%ebp)
	jmp	.L2570
.L2569:
	movl	$64, -40(%ebp)
	movl	$0, -36(%ebp)
.L2570:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
	jmp	.L2571
.L2565:
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -48(%ebp)
	movl	%edx, -44(%ebp)
.L2571:
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	jmp	.L2564
.L2554:
	.loc 1 6464 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 6465 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -24(%ebp)
	movl	%edx, -20(%ebp)
	.loc 1 6466 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -80(%ebp)
	movl	%edx, -76(%ebp)
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-76(%ebp), %edx
	cmpl	%edx, -60(%ebp)
	jl	.L2564
	movl	-76(%ebp), %eax
	cmpl	%eax, -60(%ebp)
	jg	.L2573
	movl	-80(%ebp), %edx
	cmpl	%edx, -64(%ebp)
	jbe	.L2564
.L2573:
	movl	-80(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	jmp	.L2564
.L2555:
	.loc 1 6469 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 6470 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -24(%ebp)
	movl	%edx, -20(%ebp)
	.loc 1 6471 0
	movl	-28(%ebp), %eax
	movl	%eax, %edx
	imull	-24(%ebp), %edx
	movl	%edx, -92(%ebp)
	movl	-20(%ebp), %eax
	imull	-32(%ebp), %eax
	addl	%eax, -92(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	mull	-32(%ebp)
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-60(%ebp), %edx
	addl	%edx, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -60(%ebp)
	jmp	.L2564
.L2556:
	.loc 1 6475 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_pow2p@PLT
	testl	%eax, %eax
	je	.L2549
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2549
	.loc 1 6478 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 6479 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, -24(%ebp)
	movl	%edx, -20(%ebp)
	.loc 1 6480 0
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__divdi3@PLT
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	cmpl	$0, -60(%ebp)
	jg	.L2564
	cmpl	$0, -60(%ebp)
	js	.L2578
	cmpl	$0, -64(%ebp)
	ja	.L2564
.L2578:
	movl	$1, -64(%ebp)
	movl	$0, -60(%ebp)
	jmp	.L2564
.L2553:
	.loc 1 6486 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	jmp	.L2564
.L2551:
	.loc 1 6489 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	jmp	.L2564
.L2552:
	.loc 1 6492 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	.loc 1 6493 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -24(%ebp)
	movl	%edx, -20(%ebp)
	.loc 1 6494 0
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -88(%ebp)
	movl	%edx, -84(%ebp)
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-84(%ebp), %edx
	cmpl	%edx, -60(%ebp)
	jl	.L2564
	movl	-84(%ebp), %eax
	cmpl	%eax, -60(%ebp)
	jg	.L2580
	movl	-88(%ebp), %edx
	cmpl	%edx, -64(%ebp)
	jbe	.L2564
.L2580:
	movl	-88(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	jmp	.L2564
.L2549:
	.loc 1 6500 0
	movl	$1, -64(%ebp)
	movl	$0, -60(%ebp)
.L2564:
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	.loc 1 6501 0
	addl	$108, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE75:
	.size	highest_pow2_factor, .-highest_pow2_factor
	.type	highest_pow2_factor_for_type, @function
highest_pow2_factor_for_type:
.LFB76:
	.loc 1 6510 0
	pushl	%ebp
.LCFI290:
	movl	%esp, %ebp
.LCFI291:
	subl	$40, %esp
.LCFI292:
	.loc 1 6513 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, -8(%ebp)
	movl	%edx, -4(%ebp)
	.loc 1 6514 0
	movl	8(%ebp), %eax
	movl	44(%eax), %eax
	shrl	$3, %eax
	movl	$0, %edx
	movl	%eax, -16(%ebp)
	movl	%edx, -12(%ebp)
	.loc 1 6515 0
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%eax, -24(%ebp)
	movl	%edx, -20(%ebp)
	movl	-28(%ebp), %edx
	cmpl	%edx, -20(%ebp)
	jg	.L2583
	movl	-28(%ebp), %eax
	cmpl	%eax, -20(%ebp)
	jl	.L2584
	movl	-32(%ebp), %edx
	cmpl	%edx, -24(%ebp)
	jae	.L2583
.L2584:
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -24(%ebp)
	movl	%edx, -20(%ebp)
.L2583:
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	.loc 1 6516 0
	leave
	ret
.LFE76:
	.size	highest_pow2_factor_for_type, .-highest_pow2_factor_for_type
.globl find_placeholder
	.type	find_placeholder, @function
find_placeholder:
.LFB77:
	.loc 1 6530 0
	pushl	%ebp
.LCFI293:
	movl	%esp, %ebp
.LCFI294:
	pushl	%ebx
.LCFI295:
	subl	$52, %esp
.LCFI296:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6531 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 6535 0
	cmpl	$0, 12(%ebp)
	je	.L2587
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2587
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L2590
.L2587:
	movl	placeholder_list@GOTOFF(%ebx), %eax
	movl	%eax, -44(%ebp)
.L2590:
	movl	-44(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 6536 0
	jmp	.L2591
.L2592:
.LBB92:
	.loc 1 6539 0
	movl	-20(%ebp), %eax
	movl	76(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 6545 0
	movl	-16(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L2593
.L2594:
	.loc 1 6554 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	76(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L2595
	.loc 1 6556 0
	cmpl	$0, 12(%ebp)
	je	.L2597
	.loc 1 6557 0
	movl	12(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%eax, (%edx)
.L2597:
	.loc 1 6558 0
	movl	-8(%ebp), %eax
	movl	%eax, -40(%ebp)
	jmp	.L2599
.L2595:
	.loc 1 6553 0
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$48, %al
	je	.L2600
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$52, %al
	jne	.L2602
.L2600:
	movl	-8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L2603
.L2602:
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$114, %al
	je	.L2604
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	je	.L2604
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L2604
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$101, %al
	jne	.L2608
.L2604:
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L2609
.L2608:
	movl	$0, -32(%ebp)
.L2609:
	movl	-32(%ebp), %eax
	movl	%eax, -36(%ebp)
.L2603:
	movl	-36(%ebp), %eax
	movl	%eax, -8(%ebp)
.L2593:
	.loc 1 6545 0
	cmpl	$0, -8(%ebp)
	jne	.L2594
	.loc 1 6561 0
	movl	-16(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L2611
.L2612:
	.loc 1 6571 0
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$14, %al
	je	.L2613
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$16, %al
	jne	.L2615
.L2613:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	76(%eax), %eax
	cmpl	-12(%ebp), %eax
	jne	.L2615
	.loc 1 6575 0
	cmpl	$0, 12(%ebp)
	je	.L2617
	.loc 1 6576 0
	movl	12(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	%eax, (%edx)
.L2617:
	.loc 1 6577 0
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$42, (%esp)
	call	build1@PLT
	movl	%eax, -40(%ebp)
	jmp	.L2599
.L2615:
	.loc 1 6570 0
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$48, %al
	je	.L2619
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$52, %al
	jne	.L2621
.L2619:
	movl	-8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2622
.L2621:
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$114, %al
	je	.L2623
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	je	.L2623
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	je	.L2623
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$101, %al
	jne	.L2627
.L2623:
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2628
.L2627:
	movl	$0, -24(%ebp)
.L2628:
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
.L2622:
	movl	-28(%ebp), %eax
	movl	%eax, -8(%ebp)
.L2611:
	.loc 1 6561 0
	cmpl	$0, -8(%ebp)
	jne	.L2612
.LBE92:
	.loc 1 6537 0
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
.L2591:
	.loc 1 6536 0
	cmpl	$0, -16(%ebp)
	jne	.L2592
	.loc 1 6581 0
	movl	$0, -40(%ebp)
.L2599:
	movl	-40(%ebp), %eax
	.loc 1 6582 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE77:
	.size	find_placeholder, .-find_placeholder
	.section	.rodata
	.type	__FUNCTION__.22338, @object
	.size	__FUNCTION__.22338, 12
__FUNCTION__.22338:
	.string	"expand_expr"
	.align 4
.LC5:
	.string	"prior parameter's size depends on `%s'"
	.align 4
.LC6:
	.string	"returned value in block_exit_expr"
	.align 4
.LC7:
	.string	"cannot take the address of an unaligned member"
	.text
.globl expand_expr
	.type	expand_expr, @function
expand_expr:
.LFB78:
	.loc 1 6632 0
	pushl	%ebp
.LCFI297:
	movl	%esp, %ebp
.LCFI298:
	pushl	%edi
.LCFI299:
	pushl	%esi
.LCFI300:
	pushl	%ebx
.LCFI301:
	subl	$1340, %esp
.LCFI302:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 6634 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -504(%ebp)
	.loc 1 6635 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -520(%ebp)
	.loc 1 6637 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -496(%ebp)
	.loc 1 6644 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2633
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2635
.L2633:
	.loc 1 6646 0
	movl	16(%ebp), %eax
	movl	const_tiny_rtx@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -516(%ebp)
	.loc 1 6647 0
	cmpl	$0, -516(%ebp)
	je	.L2636
	.loc 1 6648 0
	movl	-516(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2636:
	.loc 1 6649 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2635:
	.loc 1 6652 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -500(%ebp)
	.loc 1 6654 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	get_subtarget
	movl	%eax, -488(%ebp)
	.loc 1 6655 0
	movl	12(%ebp), %eax
	movl	%eax, -484(%ebp)
	.loc 1 6656 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	12(%ebp), %eax
	je	.L2639
	cmpl	$118, -496(%ebp)
	je	.L2641
	cmpl	$117, -496(%ebp)
	je	.L2641
	cmpl	$116, -496(%ebp)
	je	.L2641
	cmpl	$124, -496(%ebp)
	je	.L2641
	cmpl	$52, -496(%ebp)
	je	.L2641
	cmpl	$119, -496(%ebp)
	jne	.L2647
.L2641:
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$6, %al
	jne	.L2647
.L2639:
	movl	$1, -1280(%ebp)
	jmp	.L2648
.L2647:
	movl	$0, -1280(%ebp)
.L2648:
	movl	-1280(%ebp), %edx
	movl	%edx, -480(%ebp)
	.loc 1 6668 0
	cmpl	$0, -480(%ebp)
	je	.L2649
	.loc 1 6670 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2651
	.loc 1 6671 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2651:
	.loc 1 6675 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L2653
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$31, %al
	je	.L2653
	cmpl	$0, -500(%ebp)
	je	.L2653
	cmpl	$52, -500(%ebp)
	je	.L2653
	cmpl	$4, 20(%ebp)
	je	.L2653
	.loc 1 6680 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -508(%ebp)
	.loc 1 6681 0
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2659
	.loc 1 6682 0
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -508(%ebp)
.L2659:
	.loc 1 6683 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2653:
	.loc 1 6686 0
	movl	-496(%ebp), %eax
	movl	tree_code_type@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$49, %al
	je	.L2661
	cmpl	$40, -496(%ebp)
	je	.L2661
	cmpl	$42, -496(%ebp)
	je	.L2661
	cmpl	$43, -496(%ebp)
	jne	.L2665
.L2661:
	.loc 1 6688 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2665:
	.loc 1 6691 0
	movl	-496(%ebp), %eax
	movl	tree_code_type@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$50, %al
	je	.L2666
	movl	-496(%ebp), %eax
	movl	tree_code_type@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$60, %al
	je	.L2666
	cmpl	$44, -496(%ebp)
	je	.L2666
	cmpl	$45, -496(%ebp)
	jne	.L2670
.L2666:
	.loc 1 6694 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	.loc 1 6695 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	.loc 1 6696 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2670:
	.loc 1 6698 0
	cmpl	$93, -496(%ebp)
	je	.L2671
	cmpl	$94, -496(%ebp)
	jne	.L2673
.L2671:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2673
	.loc 1 6702 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2673:
	.loc 1 6704 0
	cmpl	$41, -496(%ebp)
	jne	.L2675
	.loc 1 6706 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	.loc 1 6707 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	.loc 1 6708 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	28(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	.loc 1 6709 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2675:
	.loc 1 6712 0
	movl	$0, 12(%ebp)
.L2649:
	.loc 1 6764 0
	movl	cse_not_expected@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2677
	cmpl	$52, -500(%ebp)
	je	.L2677
	cmpl	$0, 12(%ebp)
	je	.L2677
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2681
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L2677
.L2681:
	cmpl	$47, -496(%ebp)
	jne	.L2683
	movl	-500(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -1276(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2685
	movl	$8, -1272(%ebp)
	jmp	.L2687
.L2685:
	movl	$4, -1272(%ebp)
.L2687:
	movl	-1272(%ebp), %ecx
	cmpl	%ecx, -1276(%ebp)
	jg	.L2677
.L2683:
	.loc 1 6767 0
	movl	$0, 12(%ebp)
.L2677:
	.loc 1 6769 0
	movl	-496(%ebp), %esi
	subl	$26, %esi
	movl	%esi, -1288(%ebp)
	cmpl	$124, -1288(%ebp)
	ja	.L2688
	movl	-1288(%ebp), %eax
	sall	$2, %eax
	movl	.L2763@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2763:
	.long	.L2689@GOTOFF
	.long	.L2690@GOTOFF
	.long	.L2691@GOTOFF
	.long	.L2692@GOTOFF
	.long	.L2691@GOTOFF
	.long	.L2693@GOTOFF
	.long	.L2694@GOTOFF
	.long	.L2695@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2696@GOTOFF
	.long	.L2697@GOTOFF
	.long	.L2693@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2698@GOTOFF
	.long	.L2698@GOTOFF
	.long	.L2699@GOTOFF
	.long	.L2700@GOTOFF
	.long	.L2701@GOTOFF
	.long	.L2698@GOTOFF
	.long	.L2702@GOTOFF
	.long	.L2703@GOTOFF
	.long	.L2704@GOTOFF
	.long	.L2705@GOTOFF
	.long	.L2706@GOTOFF
	.long	.L2707@GOTOFF
	.long	.L2708@GOTOFF
	.long	.L2709@GOTOFF
	.long	.L2710@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2711@GOTOFF
	.long	.L2712@GOTOFF
	.long	.L2713@GOTOFF
	.long	.L2714@GOTOFF
	.long	.L2715@GOTOFF
	.long	.L2716@GOTOFF
	.long	.L2717@GOTOFF
	.long	.L2718@GOTOFF
	.long	.L2718@GOTOFF
	.long	.L2718@GOTOFF
	.long	.L2718@GOTOFF
	.long	.L2719@GOTOFF
	.long	.L2719@GOTOFF
	.long	.L2719@GOTOFF
	.long	.L2719@GOTOFF
	.long	.L2720@GOTOFF
	.long	.L2718@GOTOFF
	.long	.L2721@GOTOFF
	.long	.L2722@GOTOFF
	.long	.L2722@GOTOFF
	.long	.L2722@GOTOFF
	.long	.L2723@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2724@GOTOFF
	.long	.L2725@GOTOFF
	.long	.L2725@GOTOFF
	.long	.L2726@GOTOFF
	.long	.L2727@GOTOFF
	.long	.L2728@GOTOFF
	.long	.L2728@GOTOFF
	.long	.L2728@GOTOFF
	.long	.L2728@GOTOFF
	.long	.L2729@GOTOFF
	.long	.L2730@GOTOFF
	.long	.L2731@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2732@GOTOFF
	.long	.L2733@GOTOFF
	.long	.L2733@GOTOFF
	.long	.L2731@GOTOFF
	.long	.L2729@GOTOFF
	.long	.L2730@GOTOFF
	.long	.L2734@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2735@GOTOFF
	.long	.L2736@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2737@GOTOFF
	.long	.L2737@GOTOFF
	.long	.L2737@GOTOFF
	.long	.L2738@GOTOFF
	.long	.L2739@GOTOFF
	.long	.L2740@GOTOFF
	.long	.L2741@GOTOFF
	.long	.L2742@GOTOFF
	.long	.L2737@GOTOFF
	.long	.L2743@GOTOFF
	.long	.L2744@GOTOFF
	.long	.L2745@GOTOFF
	.long	.L2746@GOTOFF
	.long	.L2747@GOTOFF
	.long	.L2748@GOTOFF
	.long	.L2749@GOTOFF
	.long	.L2749@GOTOFF
	.long	.L2750@GOTOFF
	.long	.L2750@GOTOFF
	.long	.L2751@GOTOFF
	.long	.L2752@GOTOFF
	.long	.L2753@GOTOFF
	.long	.L2754@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2755@GOTOFF
	.long	.L2756@GOTOFF
	.long	.L2757@GOTOFF
	.long	.L2758@GOTOFF
	.long	.L2759@GOTOFF
	.long	.L2760@GOTOFF
	.long	.L2761@GOTOFF
	.long	.L2688@GOTOFF
	.long	.L2762@GOTOFF
	.text
.L2694:
.LBB93:
	.loc 1 6773 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	decl_function_context@PLT
	movl	%eax, -472(%ebp)
	.loc 1 6775 0
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -472(%ebp)
	je	.L2764
	movl	inline_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -472(%ebp)
	je	.L2764
	cmpl	$0, -472(%ebp)
	je	.L2764
.LBB94:
	.loc 1 6778 0
	movl	-472(%ebp), %eax
	movl	%eax, (%esp)
	call	find_function_data@PLT
	movl	%eax, -468(%ebp)
	.loc 1 6779 0
	movl	-468(%ebp), %eax
	movl	8(%eax), %edi
	movl	-468(%ebp), %eax
	movl	8(%eax), %eax
	movl	20(%eax), %esi
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	label_rtx@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 20(%edi)
	.loc 1 6775 0
	jmp	.L2768
.L2764:
.LBE94:
	.loc 1 6785 0
	cmpl	$5, 20(%ebp)
	jne	.L2768
	.loc 1 6786 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edi
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	20(%eax), %esi
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	label_rtx@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 20(%edi)
.L2768:
	.loc 1 6791 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	label_rtx@PLT
	movl	%eax, -1268(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L2770
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2770
	movl	$5, -1264(%ebp)
	jmp	.L2773
.L2770:
	movl	$4, -1264(%ebp)
.L2773:
	movl	-1268(%ebp), %edi
	movl	%edi, 8(%esp)
	movl	-1264(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$77, (%esp)
	call	gen_rtx_fmt_u00@PLT
	movl	%eax, -1260(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L2774
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2774
	movl	$5, -1256(%ebp)
	jmp	.L2777
.L2774:
	movl	$4, -1256(%ebp)
.L2777:
	movl	-1260(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	-1256(%ebp), %ecx
	movl	%ecx, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -508(%ebp)
	.loc 1 6793 0
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -472(%ebp)
	je	.L2778
	movl	inline_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -472(%ebp)
	je	.L2778
	cmpl	$0, -472(%ebp)
	je	.L2778
	.loc 1 6795 0
	movl	-508(%ebp), %eax
	movl	4(%eax), %edx
	movzbl	3(%edx), %eax
	orl	$8, %eax
	movb	%al, 3(%edx)
.L2778:
	.loc 1 6796 0
	movl	-508(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2697:
.LBE93:
	.loc 1 6800 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	jne	.L2696
	.loc 1 6802 0
	leal	.LC5@GOTOFF(%ebx), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	error_with_decl@PLT
	.loc 1 6803 0
	movl	-500(%ebp), %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2696:
	.loc 1 6811 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	testl	%eax, %eax
	jne	.L2693
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	jne	.L2784
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -1252(%ebp)
	jmp	.L2786
.L2784:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -1252(%ebp)
.L2786:
	movl	-1252(%ebp), %edi
	movl	20(%edi), %eax
	testl	%eax, %eax
	je	.L2693
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L2788
	movl	8(%ebp), %eax
	movzbl	33(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L2693
.L2788:
	.loc 1 6814 0
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	layout_decl@PLT
.L2693:
	.loc 1 6820 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2790
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	sete	-1245(%ebp)
	jmp	.L2792
.L2790:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	sete	-1245(%ebp)
.L2792:
	cmpb	$0, -1245(%ebp)
	je	.L2793
	.loc 1 6821 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6821, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2793:
	.loc 1 6826 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2795
	.loc 1 6828 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	assemble_external@PLT
	.loc 1 6829 0
	movl	8(%ebp), %edx
	movzbl	10(%edx), %eax
	orl	$1, %eax
	movb	%al, 10(%edx)
.L2795:
	.loc 1 6833 0
	movl	$0, -508(%ebp)
	.loc 1 6836 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	decl_function_context@PLT
	movl	%eax, -476(%ebp)
	.loc 1 6843 0
	cmpl	$0, -476(%ebp)
	je	.L2797
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -476(%ebp)
	je	.L2797
	movl	inline_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -476(%ebp)
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2801
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1244(%ebp)
	jmp	.L2803
.L2801:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1244(%ebp)
.L2803:
	movl	-1244(%ebp), %edx
	movzwl	(%edx), %eax
	cmpw	$76, %ax
	jne	.L2804
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2806
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1240(%ebp)
	jmp	.L2808
.L2806:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1240(%ebp)
.L2808:
	movl	-1240(%ebp), %ecx
	movl	4(%ecx), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2810
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1236(%ebp)
	jmp	.L2812
.L2810:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1236(%ebp)
.L2812:
	movl	-1236(%ebp), %esi
	movl	4(%esi), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2814
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1232(%ebp)
	jmp	.L2816
.L2814:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1232(%ebp)
.L2816:
	movl	-1232(%ebp), %edi
	movl	4(%edi), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2818
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1228(%ebp)
	jmp	.L2820
.L2818:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1228(%ebp)
.L2820:
	movl	-1228(%ebp), %edx
	movl	4(%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2822
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1224(%ebp)
	jmp	.L2824
.L2822:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1224(%ebp)
.L2824:
	movl	-1224(%ebp), %ecx
	movl	4(%ecx), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2826
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1220(%ebp)
	jmp	.L2828
.L2826:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1220(%ebp)
.L2828:
	movl	-1220(%ebp), %esi
	movl	4(%esi), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2830
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1216(%ebp)
	jmp	.L2832
.L2830:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1216(%ebp)
.L2832:
	movl	-1216(%ebp), %edi
	movl	4(%edi), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L2797
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2834
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1212(%ebp)
	jmp	.L2836
.L2834:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1212(%ebp)
.L2836:
	movl	-1212(%ebp), %edx
	movl	4(%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L2797
.L2804:
.LBB95:
	.loc 1 6852 0
	movl	8(%ebp), %edx
	movzbl	33(%edx), %eax
	orl	$2, %eax
	movb	%al, 33(%edx)
	.loc 1 6853 0
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L2837
	.loc 1 6854 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6854, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2837:
	.loc 1 6855 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	68(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	.loc 1 6856 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2839
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1208(%ebp)
	jmp	.L2841
.L2839:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1208(%ebp)
.L2841:
	movl	-1208(%ebp), %ecx
	movzwl	(%ecx), %eax
	cmpw	$76, %ax
	je	.L2842
	.loc 1 6857 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6857, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2842:
	.loc 1 6858 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2844
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1204(%ebp)
	jmp	.L2846
.L2844:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1204(%ebp)
.L2846:
	movl	-1204(%ebp), %esi
	movl	4(%esi), %eax
	movl	%eax, -464(%ebp)
	.loc 1 6859 0
	movl	-464(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2847
	.loc 1 6860 0
	movl	-464(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	fix_lexical_addr@PLT
	movl	%eax, 4(%esp)
	movl	-464(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -464(%ebp)
	jmp	.L2849
.L2847:
	.loc 1 6864 0
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-464(%ebp), %eax
	movl	%eax, (%esp)
	call	fix_lexical_addr@PLT
	movl	%eax, -464(%ebp)
.L2849:
	.loc 1 6866 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2850
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1200(%ebp)
	jmp	.L2852
.L2850:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1200(%ebp)
.L2852:
	movl	-464(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-1200(%ebp), %edi
	movl	%edi, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -508(%ebp)
	.loc 1 6843 0
	jmp	.L2853
.L2797:
.LBE95:
	.loc 1 6873 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2854
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1196(%ebp)
	jmp	.L2856
.L2854:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1196(%ebp)
.L2856:
	movl	-1196(%ebp), %edx
	movzwl	(%edx), %eax
	cmpw	$76, %ax
	jne	.L2857
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2859
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1192(%ebp)
	jmp	.L2861
.L2859:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1192(%ebp)
.L2861:
	movl	-1192(%ebp), %ecx
	movl	4(%ecx), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2857
	.loc 1 6875 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2863
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1188(%ebp)
	jmp	.L2865
.L2863:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1188(%ebp)
.L2865:
	movl	-1188(%ebp), %esi
	movl	%esi, (%esp)
	call	validize_mem@PLT
	movl	%eax, -508(%ebp)
	.loc 1 6873 0
	jmp	.L2853
.L2857:
	.loc 1 6881 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2866
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1184(%ebp)
	jmp	.L2868
.L2866:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1184(%ebp)
.L2868:
	movl	-1184(%ebp), %edi
	movzwl	(%edi), %eax
	cmpw	$76, %ax
	jne	.L2853
	cmpl	$4, 20(%ebp)
	je	.L2853
	cmpl	$3, 20(%ebp)
	je	.L2853
	cmpl	$5, 20(%ebp)
	je	.L2853
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2873
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1180(%ebp)
	jmp	.L2875
.L2873:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1180(%ebp)
.L2875:
	movl	-1180(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	je	.L2876
	movl	flag_force_addr@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2853
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2879
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1176(%ebp)
	jmp	.L2881
.L2879:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1176(%ebp)
.L2881:
	movl	-1176(%ebp), %edx
	movl	4(%edx), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2853
.L2876:
	.loc 1 6889 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2882
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1172(%ebp)
	jmp	.L2884
.L2882:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1172(%ebp)
.L2884:
	movl	-1172(%ebp), %ecx
	movl	4(%ecx), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -1168(%ebp)
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2885
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1164(%ebp)
	jmp	.L2887
.L2885:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1164(%ebp)
.L2887:
	movl	-1168(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	-1164(%ebp), %edi
	movl	%edi, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -508(%ebp)
.L2853:
	.loc 1 6894 0
	cmpl	$0, -508(%ebp)
	je	.L2888
	.loc 1 6896 0
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2890
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2890
	.loc 1 6897 0
	movl	8(%ebp), %eax
	movl	40(%eax), %eax
	andl	$16777215, %eax
	movl	%eax, %edx
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	mark_reg_pointer@PLT
.L2890:
	.loc 1 6899 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2888:
	.loc 1 6906 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2893
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1160(%ebp)
	jmp	.L2895
.L2893:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1160(%ebp)
.L2895:
	movl	-1160(%ebp), %edx
	movzwl	(%edx), %eax
	cmpw	$71, %ax
	jne	.L2896
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2898
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1156(%ebp)
	jmp	.L2900
.L2898:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1156(%ebp)
.L2900:
	movl	-1156(%ebp), %ecx
	movzbl	2(%ecx), %eax
	movl	8(%ebp), %edx
	movzbl	32(%edx), %edx
	cmpb	%dl, %al
	je	.L2896
	.loc 1 6911 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2902
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1152(%ebp)
	jmp	.L2904
.L2902:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1152(%ebp)
.L2904:
	movl	-1152(%ebp), %esi
	movzbl	2(%esi), %eax
	movzbl	%al, %esi
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$37, %al
	sete	%al
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 12(%esp)
	leal	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	promote_mode@PLT
	cmpl	%eax, %esi
	je	.L2905
	.loc 1 6914 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$6914, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2905:
	.loc 1 6916 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2907
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1148(%ebp)
	jmp	.L2909
.L2907:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1148(%ebp)
.L2909:
	movl	-1148(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_SUBREG@PLT
	movl	%eax, -508(%ebp)
	.loc 1 6917 0
	movl	-508(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$16, %eax
	movb	%al, 3(%edx)
.LBB96:
	.loc 1 6918 0
	movl	-508(%ebp), %eax
	movl	%eax, -460(%ebp)
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jns	.L2910
	movl	-460(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$8, %edx
	movb	%dl, 3(%eax)
	jmp	.L2912
.L2910:
	movl	-460(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$-9, %eax
	movb	%al, 3(%edx)
	movl	-520(%ebp), %eax
	andl	$1, %eax
	movl	-460(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
.L2912:
.LBE96:
	.loc 1 6919 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2896:
	.loc 1 6922 0
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L2913
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1144(%ebp)
	jmp	.L2915
.L2913:
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -1144(%ebp)
.L2915:
	movl	-1144(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2689:
	.loc 1 6925 0
	movl	8(%ebp), %eax
	movl	28(%eax), %esi
	movl	32(%eax), %edi
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-500(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	immed_double_const@PLT
	movl	%eax, -508(%ebp)
	.loc 1 6933 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L2916
	cmpl	$5, 20(%ebp)
	je	.L2916
	.loc 1 6935 0
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -508(%ebp)
.L2916:
	.loc 1 6937 0
	movl	-508(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2692:
	.loc 1 6940 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	const_vector_from_tree
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2695:
	.loc 1 6943 0
	movl	8(%ebp), %eax
	movl	68(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2690:
	.loc 1 6956 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	%ecx, 24(%esp)
	movl	(%edx), %eax
	movl	%eax, (%esp)
	movl	4(%edx), %eax
	movl	%eax, 4(%esp)
	movl	8(%edx), %eax
	movl	%eax, 8(%esp)
	movl	12(%edx), %eax
	movl	%eax, 12(%esp)
	movl	16(%edx), %eax
	movl	%eax, 16(%esp)
	movl	20(%edx), %eax
	movl	%eax, 20(%esp)
	call	const_double_from_real_value@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2691:
	.loc 1 6961 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	jne	.L2919
	.loc 1 6962 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	output_constant_def@PLT
.L2919:
	.loc 1 6967 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L2921
	cmpl	$4, 20(%ebp)
	je	.L2921
	cmpl	$5, 20(%ebp)
	je	.L2921
	cmpl	$3, 20(%ebp)
	je	.L2921
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_address_p@PLT
	testl	%eax, %eax
	je	.L2926
	movl	flag_force_addr@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2921
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L2921
.L2926:
	.loc 1 6974 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2921:
	.loc 1 6976 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2761:
.LBB97:
	.loc 1 6981 0
	movl	input_filename@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -452(%ebp)
	.loc 1 6982 0
	movl	lineno@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -448(%ebp)
	.loc 1 6983 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	movl	input_filename@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 6984 0
	movl	8(%ebp), %eax
	movl	16(%eax), %eax
	movl	%eax, %edx
	sarl	$12, %edx
	movl	lineno@GOT(%ebx), %eax
	movl	%edx, (%eax)
	.loc 1 6985 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L2929
	.loc 1 6986 0
	movl	lineno@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	input_filename@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	emit_line_note@PLT
.L2929:
	.loc 1 6988 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -456(%ebp)
	.loc 1 6989 0
	movl	input_filename@GOT(%ebx), %edx
	movl	-452(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 6990 0
	movl	lineno@GOT(%ebx), %edx
	movl	-448(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 6991 0
	movl	-456(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2739:
.LBE97:
	.loc 1 6995 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	decl_function_context@PLT
	movl	%eax, -476(%ebp)
	.loc 1 6999 0
	cmpl	$0, -476(%ebp)
	jne	.L2931
	.loc 1 7000 0
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, 24(%eax)
.L2931:
	.loc 1 7006 0
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -476(%ebp)
	je	.L2933
	movl	inline_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -476(%ebp)
	jne	.L2935
.L2933:
	.loc 1 7007 0
	movl	$0, -476(%ebp)
.L2935:
	.loc 1 7010 0
	cmpl	$0, -476(%ebp)
	je	.L2936
	.loc 1 7014 0
	movl	-476(%ebp), %eax
	movl	%eax, (%esp)
	call	find_function_data@PLT
	.loc 1 7016 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -508(%ebp)
	.loc 1 7017 0
	cmpl	$0, -508(%ebp)
	je	.L2938
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2938
	.loc 1 7019 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	put_var_into_stack@PLT
	.loc 1 7020 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -508(%ebp)
.L2938:
	.loc 1 7022 0
	cmpl	$0, -508(%ebp)
	je	.L2941
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L2943
.L2941:
	.loc 1 7023 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7023, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2943:
	.loc 1 7024 0
	movl	-508(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	fix_lexical_addr@PLT
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2936:
	.loc 1 7028 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2944
	.loc 1 7030 0
	cmpl	$0, -500(%ebp)
	jne	.L2946
	.loc 1 7031 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -508(%ebp)
	jmp	.L2948
.L2946:
	.loc 1 7033 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movzbl	%al, %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movl	-504(%ebp), %eax
	movzbl	38(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	sall	$2, %eax
	movl	%edx, %edi
	orl	%eax, %edi
	movl	%edi, -1140(%ebp)
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L2949
	movl	-504(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L2949
	movl	$1, -1136(%ebp)
	jmp	.L2952
.L2949:
	movl	$0, -1136(%ebp)
.L2952:
	movl	-1136(%ebp), %eax
	sall	$3, %eax
	orl	-1140(%ebp), %eax
	orl	$1, %eax
	movl	%eax, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$3, 4(%esp)
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -508(%ebp)
.L2948:
	.loc 1 7038 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	leal	8(%eax), %edx
	movl	-508(%ebp), %eax
	movl	%eax, (%edx)
	.loc 1 7039 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L2953
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2953
	.loc 1 7040 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	168(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 168(%esi)
.L2953:
	.loc 1 7048 0
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2956
	movl	-508(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	je	.L2956
	.loc 1 7050 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_SUBREG@PLT
	movl	%eax, -508(%ebp)
	.loc 1 7051 0
	movl	$0, 12(%esp)
	leal	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	promote_mode@PLT
	.loc 1 7052 0
	movl	-508(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$16, %eax
	movb	%al, 3(%edx)
.LBB98:
	.loc 1 7053 0
	movl	-508(%ebp), %eax
	movl	%eax, -444(%ebp)
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jns	.L2959
	movl	-444(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$8, %edx
	movb	%dl, 3(%eax)
	jmp	.L2956
.L2959:
	movl	-444(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$-9, %eax
	movb	%al, 3(%edx)
	movl	-520(%ebp), %eax
	andl	$1, %eax
	movl	-444(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
.L2956:
.LBE98:
	.loc 1 7056 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-508(%ebp), %eax
	jne	.L2961
	.loc 1 7057 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	jmp	.L2963
.L2961:
	.loc 1 7059 0
	cmpl	$2, 20(%ebp)
	jne	.L2964
	movl	$2, -1132(%ebp)
	jmp	.L2966
.L2964:
	movl	$0, -1132(%ebp)
.L2966:
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-1132(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
.L2963:
	.loc 1 7062 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %edx
	orl	$1, %edx
	movb	%dl, 10(%eax)
.L2944:
	.loc 1 7069 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2967
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	je	.L2967
	.loc 1 7073 0
	movl	$0, 12(%esp)
	leal	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	promote_mode@PLT
	.loc 1 7074 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_lowpart_SUBREG@PLT
	movl	%eax, -508(%ebp)
	.loc 1 7075 0
	movl	-508(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$16, %eax
	movb	%al, 3(%edx)
.LBB99:
	.loc 1 7076 0
	movl	-508(%ebp), %eax
	movl	%eax, -440(%ebp)
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jns	.L2970
	movl	-440(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$8, %edx
	movb	%dl, 3(%eax)
	jmp	.L2972
.L2970:
	movl	-440(%ebp), %edx
	movzbl	3(%edx), %eax
	andl	$-9, %eax
	movb	%al, 3(%edx)
	movl	-520(%ebp), %eax
	andl	$1, %eax
	movl	-440(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,4), %edx
	movzbl	3(%ecx), %eax
	andl	$-5, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
.L2972:
.LBE99:
	.loc 1 7077 0
	movl	-508(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2967:
	.loc 1 7080 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2740:
.LBB100:
	.loc 1 7085 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -436(%ebp)
	.loc 1 7086 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	80(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 7088 0
	movl	-436(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2713:
.LBE100:
.LBB101:
	.loc 1 7093 0
	movl	placeholder_list@GOTOFF(%ebx), %eax
	movl	%eax, -432(%ebp)
	.loc 1 7094 0
	movl	$0, -524(%ebp)
	.loc 1 7096 0
	leal	-524(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	find_placeholder@PLT
	movl	%eax, 8(%ebp)
	.loc 1 7097 0
	cmpl	$0, 8(%ebp)
	jne	.L2973
	.loc 1 7098 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7098, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2973:
	.loc 1 7100 0
	movl	-524(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, placeholder_list@GOTOFF(%ebx)
	.loc 1 7101 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-484(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -508(%ebp)
	.loc 1 7102 0
	movl	-432(%ebp), %eax
	movl	%eax, placeholder_list@GOTOFF(%ebx)
	.loc 1 7103 0
	movl	-508(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2714:
.LBE101:
	.loc 1 7109 0
	movl	placeholder_list@GOTOFF(%ebx), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_cons@PLT
	movl	%eax, placeholder_list@GOTOFF(%ebx)
	.loc 1 7111 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-484(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, 12(%ebp)
	.loc 1 7113 0
	movl	placeholder_list@GOTOFF(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, placeholder_list@GOTOFF(%ebx)
	.loc 1 7114 0
	movl	12(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L2755:
	.loc 1 7117 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$32, %al
	jne	.L2975
	.loc 1 7118 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	expand_goto@PLT
	jmp	.L2977
.L2975:
	.loc 1 7120 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	expand_computed_goto@PLT
.L2977:
	.loc 1 7121 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2757:
	.loc 1 7124 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	invert_truthvalue@PLT
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_exit_loop_if_false@PLT
	.loc 1 7126 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2759:
	.loc 1 7129 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	je	.L2978
	.loc 1 7130 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr_stmt_value@PLT
.L2978:
	.loc 1 7132 0
	call	do_pending_stack_adjust@PLT
	.loc 1 7133 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	label_rtx@PLT
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 7134 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2760:
	.loc 1 7137 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	je	.L2980
	.loc 1 7138 0
	leal	.LC6@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	sorry@PLT
.L2980:
	.loc 1 7139 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	expand_goto@PLT
	.loc 1 7140 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2758:
	.loc 1 7143 0
	call	push_temp_slots@PLT
	.loc 1 7144 0
	movl	$1, (%esp)
	call	expand_start_loop@PLT
	.loc 1 7145 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr_stmt_value@PLT
	.loc 1 7146 0
	call	expand_end_loop@PLT
	.loc 1 7147 0
	call	pop_temp_slots@PLT
	.loc 1 7149 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2709:
.LBB102:
	.loc 1 7153 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -428(%ebp)
	.loc 1 7154 0
	movl	$0, -424(%ebp)
	.loc 1 7158 0
	movl	$0, 4(%esp)
	movl	$2, (%esp)
	call	expand_start_bindings_and_block@PLT
	.loc 1 7161 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	testl	%eax, %eax
	je	.L2985
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movzbl	10(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2985
	.loc 1 7163 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	228(%eax), %edx
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	*%edx
	.loc 1 7166 0
	jmp	.L2985
.L2986:
	.loc 1 7168 0
	movl	-428(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	jne	.L2987
	.loc 1 7170 0
	movl	$1, -424(%ebp)
	.loc 1 7171 0
	movl	-428(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_decl@PLT
.L2987:
	.loc 1 7173 0
	movl	-428(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_decl_init@PLT
	.loc 1 7174 0
	movl	-428(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -428(%ebp)
.L2985:
	.loc 1 7166 0
	cmpl	$0, -428(%ebp)
	jne	.L2986
	.loc 1 7177 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -508(%ebp)
	.loc 1 7179 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_end_bindings@PLT
	.loc 1 7181 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2741:
.LBE102:
	.loc 1 7185 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L2990
	.loc 1 7187 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	%eax, %edx
	jne	.L2992
	.loc 1 7188 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7188, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2992:
	.loc 1 7189 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 7190 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	movl	%eax, %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, (%edx)
.L2990:
	.loc 1 7192 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	preserve_rtl_expr_result@PLT
	.loc 1 7193 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	free_temps_for_rtl_expr@PLT
	.loc 1 7194 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2703:
	.loc 1 7199 0
	cmpl	$0, -480(%ebp)
	je	.L2994
.LBB103:
	.loc 1 7203 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -420(%ebp)
	jmp	.L2996
.L2997:
	.loc 1 7204 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	-420(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 7203 0
	movl	-420(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -420(%ebp)
.L2996:
	cmpl	$0, -420(%ebp)
	jne	.L2997
	.loc 1 7206 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2994:
.LBE103:
	.loc 1 7222 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L2999
	cmpl	$52, -500(%ebp)
	jne	.L3001
	cmpl	$0, 12(%ebp)
	je	.L3003
	movl	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3003
.L3001:
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L3003
	movl	-504(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L2999
	movl	-504(%ebp), %eax
	movl	44(%eax), %esi
	movl	-504(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%esi, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	move_by_pieces_ninsns
	movl	%eax, -1128(%ebp)
	movl	%edx, -1124(%ebp)
	cmpl	$0, -1124(%ebp)
	jb	.L2999
	cmpl	$0, -1124(%ebp)
	ja	.L3008
	cmpl	$1, -1128(%ebp)
	jbe	.L2999
.L3008:
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$10, %al
	jne	.L3009
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	je	.L3003
.L3009:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	mostly_zeros_p
	testl	%eax, %eax
	je	.L3003
.L2999:
	cmpl	$5, 20(%ebp)
	jne	.L3011
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	je	.L3011
.L3003:
.LBB104:
	.loc 1 7235 0
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	output_constant_def@PLT
	movl	%eax, -416(%ebp)
	.loc 1 7237 0
	cmpl	$4, 20(%ebp)
	je	.L3013
	cmpl	$5, 20(%ebp)
	je	.L3013
	cmpl	$3, 20(%ebp)
	je	.L3013
	.loc 1 7240 0
	movl	-416(%ebp), %eax
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, -416(%ebp)
.L3013:
	.loc 1 7242 0
	movl	-416(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L3011:
.LBE104:
	.loc 1 7248 0
	cmpl	$0, 12(%ebp)
	je	.L3017
	movl	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3017
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	je	.L3017
	cmpl	$2, 20(%ebp)
	jne	.L3021
.L3017:
	.loc 1 7251 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -1120(%ebp)
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movzbl	%al, %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movl	-504(%ebp), %eax
	movzbl	38(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	sall	$2, %eax
	movl	%edx, %ecx
	orl	%eax, %ecx
	movl	%ecx, -1116(%ebp)
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L3022
	movl	-504(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L3022
	movl	$1, -1112(%ebp)
	jmp	.L3025
.L3022:
	movl	$0, -1112(%ebp)
.L3025:
	movl	-1112(%ebp), %eax
	sall	$3, %eax
	movl	-1116(%ebp), %edx
	orl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	$1, 12(%esp)
	movl	-1120(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, 12(%ebp)
.L3021:
	.loc 1 7258 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	int_expr_size@PLT
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	store_constructor
	.loc 1 7259 0
	movl	12(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L2699:
.LBB105:
	.loc 1 7264 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -412(%ebp)
	.loc 1 7266 0
	leal	-524(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-412(%ebp), %eax
	movl	%eax, (%esp)
	call	string_constant@PLT
	movl	%eax, -408(%ebp)
	.loc 1 7269 0
	cmpl	$0, -408(%ebp)
	je	.L3026
	movl	-408(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L3026
	movl	-524(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3026
	movl	-408(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	-524(%ebp), %ecx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	jns	.L3026
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3026
	movl	-500(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$1, %al
	jne	.L3026
	cmpl	$6, 20(%ebp)
	je	.L3026
	.loc 1 7276 0
	movl	-408(%ebp), %eax
	movl	24(%eax), %ecx
	movl	-524(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	leal	(%ecx,%eax), %eax
	movzbl	(%eax), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-500(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3026:
	.loc 1 7279 0
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-412(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7280 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	memory_address@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7281 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -508(%ebp)
	.loc 1 7282 0
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes@PLT
	.loc 1 7287 0
	cmpl	$6, 20(%ebp)
	jne	.L3034
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	readonly_fields_p@PLT
	testl	%eax, %eax
	je	.L3034
	.loc 1 7288 0
	movl	-508(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$4, %edx
	movb	%dl, 3(%eax)
.L3034:
	.loc 1 7290 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2701:
.LBE105:
	.loc 1 7294 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$19, %al
	je	.L3037
	.loc 1 7295 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7295, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3037:
.LBB106:
	.loc 1 7298 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -404(%ebp)
	.loc 1 7299 0
	movl	-404(%ebp), %eax
	movl	4(%eax), %eax
	movl	16(%eax), %eax
	movl	%eax, -400(%ebp)
	.loc 1 7300 0
	cmpl	$0, -400(%ebp)
	je	.L3039
	movl	-400(%ebp), %eax
	movl	64(%eax), %eax
	movl	%eax, -1108(%ebp)
	jmp	.L3041
.L3039:
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -1108(%ebp)
.L3041:
	movl	-1108(%ebp), %edx
	movl	%edx, -396(%ebp)
	.loc 1 7301 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, -392(%ebp)
	.loc 1 7312 0
	movl	-396(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	jne	.L3042
	.loc 1 7313 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-396(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, 4(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	size_diffop@PLT
	movl	%eax, -392(%ebp)
.L3042:
	.loc 1 7320 0
	cmpl	$4, 20(%ebp)
	je	.L3044
	cmpl	$5, 20(%ebp)
	je	.L3044
	cmpl	$7, 20(%ebp)
	je	.L3044
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L3044
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3044
	movl	-404(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	jns	.L3044
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3044
	movl	-500(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$1, %al
	jne	.L3044
	.loc 1 7328 0
	movl	-404(%ebp), %eax
	movl	24(%eax), %ecx
	movl	-392(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	leal	(%ecx,%eax), %eax
	movzbl	(%eax), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-500(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3044:
	.loc 1 7336 0
	cmpl	$4, 20(%ebp)
	je	.L3053
	cmpl	$5, 20(%ebp)
	je	.L3053
	cmpl	$7, 20(%ebp)
	je	.L3053
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	jne	.L3053
	movl	-404(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L3053
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3053
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	list_length@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	jns	.L3053
.LBB107:
	.loc 1 7349 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, -388(%ebp)
	movl	-392(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%eax, -560(%ebp)
	movl	%edx, -556(%ebp)
	.loc 1 7350 0
	jmp	.L3061
.L3062:
	addl	$-1, -560(%ebp)
	adcl	$-1, -556(%ebp)
	movl	-388(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -388(%ebp)
.L3061:
	cmpl	$0, -388(%ebp)
	je	.L3063
	movl	-560(%ebp), %eax
	orl	-556(%ebp), %eax
	testl	%eax, %eax
	jne	.L3062
.L3063:
	.loc 1 7353 0
	cmpl	$0, -388(%ebp)
	je	.L2698
	.loc 1 7354 0
	movl	-388(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3053:
.LBE107:
	.loc 1 7358 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jle	.L2698
	cmpl	$4, 20(%ebp)
	je	.L2698
	cmpl	$5, 20(%ebp)
	je	.L2698
	cmpl	$7, 20(%ebp)
	je	.L2698
	movl	-404(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L2698
	movl	-404(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2698
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$35, %al
	jne	.L2698
	movl	-404(%ebp), %eax
	movl	68(%eax), %eax
	testl	%eax, %eax
	je	.L2698
	movl	-404(%ebp), %eax
	movl	68(%eax), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2698
	.loc 1 7366 0
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L2698
.LBB108:
	.loc 1 7368 0
	movl	-404(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, -384(%ebp)
	.loc 1 7370 0
	movl	-384(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	jne	.L3077
.LBB109:
	.loc 1 7374 0
	movl	-384(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -380(%ebp)
	.loc 1 7375 0
	jmp	.L3079
.L3080:
	.loc 1 7377 0
	movl	-380(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -380(%ebp)
.L3079:
	.loc 1 7375 0
	cmpl	$0, -380(%ebp)
	je	.L3081
	movl	-380(%ebp), %eax
	movl	16(%eax), %edx
	movl	-392(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	tree_int_cst_equal@PLT
	testl	%eax, %eax
	je	.L3080
.L3081:
	.loc 1 7380 0
	cmpl	$0, -380(%ebp)
	je	.L2698
	movl	-380(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L2698
	.loc 1 7381 0
	movl	-380(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3077:
.LBE109:
	.loc 1 7384 0
	movl	-384(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L2698
	movl	-384(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	jns	.L2698
.LBB110:
	.loc 1 7388 0
	movl	-384(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -376(%ebp)
	.loc 1 7389 0
	movl	-376(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -372(%ebp)
	.loc 1 7391 0
	movl	-372(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L2698
	movl	-372(%ebp), %eax
	movl	mode_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	cmpb	$1, %al
	jne	.L2698
	.loc 1 7393 0
	movl	-384(%ebp), %eax
	movl	24(%eax), %ecx
	movl	-392(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	leal	(%ecx,%eax), %eax
	movzbl	(%eax), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-372(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2698:
.LBE110:
.LBE108:
.LBE106:
	.loc 1 7408 0
	cmpl	$40, -496(%ebp)
	jne	.L3090
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	jne	.L3090
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	jne	.L3090
.LBB111:
	.loc 1 7414 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, -368(%ebp)
	jmp	.L3094
.L3095:
	.loc 1 7416 0
	movl	-368(%ebp), %eax
	movl	16(%eax), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3096
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L3098
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L3096
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movzbl	32(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L3096
.L3098:
	.loc 1 7430 0
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L3101
	cmpl	$2, 20(%ebp)
	jne	.L3101
	.loc 1 7432 0
	movl	$0, 12(%ebp)
.L3101:
	.loc 1 7433 0
	movl	-368(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7434 0
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L3104
.LBB112:
	.loc 1 7437 0
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movl	28(%eax), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%eax, -552(%ebp)
	movl	%edx, -548(%ebp)
	.loc 1 7439 0
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -364(%ebp)
	.loc 1 7441 0
	movl	-368(%ebp), %eax
	movl	16(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	je	.L3106
	.loc 1 7443 0
	movl	-552(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	.L4106
	movl	%eax, %edx
	xorl	%eax, %eax
.L4106:
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -512(%ebp)
	.loc 1 7444 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-364(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_and@PLT
	movl	%eax, -516(%ebp)
	jmp	.L3104
.L3106:
.LBB113:
	.loc 1 7449 0
	movl	-364(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	subl	-552(%ebp), %eax
	sbbl	-548(%ebp), %edx
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	build_int_2_wide@PLT
	movl	%eax, -360(%ebp)
	.loc 1 7452 0
	movl	$0, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-360(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-364(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	expand_shift@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7454 0
	movl	$0, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-360(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-364(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -516(%ebp)
.L3104:
.LBE113:
.LBE112:
	.loc 1 7459 0
	movl	-516(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L3096:
	.loc 1 7415 0
	movl	-368(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -368(%ebp)
.L3094:
	.loc 1 7414 0
	cmpl	$0, -368(%ebp)
	jne	.L3095
.L3090:
.LBE111:
.LBB114:
	.loc 1 7467 0
	movl	$0, -532(%ebp)
	.loc 1 7469 0
	leal	-532(%ebp), %eax
	movl	%eax, 24(%esp)
	leal	-520(%ebp), %eax
	movl	%eax, 20(%esp)
	leal	-524(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-528(%ebp), %eax
	movl	%eax, 12(%esp)
	leal	-576(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-568(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_inner_reference@PLT
	movl	%eax, -356(%ebp)
	.loc 1 7475 0
	movl	-356(%ebp), %eax
	cmpl	8(%ebp), %eax
	jne	.L3108
	.loc 1 7476 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7476, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3108:
	.loc 1 7482 0
	cmpl	$5, 20(%ebp)
	je	.L3110
	cmpl	$4, 20(%ebp)
	je	.L3110
	cmpl	$2, 20(%ebp)
	jne	.L3113
.L3110:
	movl	20(%ebp), %esi
	movl	%esi, -1104(%ebp)
	jmp	.L3114
.L3113:
	movl	$0, -1104(%ebp)
.L3114:
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$22, %al
	jne	.L3115
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	je	.L3115
	cmpl	$2, 20(%ebp)
	je	.L3115
	movl	12(%ebp), %edi
	movl	%edi, -1100(%ebp)
	jmp	.L3119
.L3115:
	movl	$0, -1100(%ebp)
.L3119:
	movl	-1104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	-1100(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	-356(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	movl	-516(%ebp), %eax
	movl	%eax, -352(%ebp)
	.loc 1 7497 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3120
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3128
.L3120:
.LBB115:
	.loc 1 7499 0
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -348(%ebp)
	.loc 1 7500 0
	cmpl	$52, -348(%ebp)
	je	.L3129
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L3131
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	mips_const_double_ok@PLT
	testl	%eax, %eax
	je	.L3129
.L3131:
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	jne	.L3133
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L3133
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L3129
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	je	.L3129
.L3133:
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	je	.L3137
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	mips16_constant@PLT
	testl	%eax, %eax
	je	.L3129
.L3137:
	movl	-528(%ebp), %eax
	testl	%eax, %eax
	jne	.L3129
	.loc 1 7502 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-348(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7500 0
	jmp	.L3128
.L3129:
	.loc 1 7504 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-348(%ebp), %eax
	movl	%eax, (%esp)
	call	force_const_mem@PLT
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, -516(%ebp)
.L3128:
.LBE115:
	.loc 1 7507 0
	movl	-528(%ebp), %eax
	testl	%eax, %eax
	je	.L3140
.LBB116:
	.loc 1 7510 0
	movl	-528(%ebp), %eax
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -344(%ebp)
	.loc 1 7516 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3142
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3142
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	je	.L3142
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$80, %ax
	jne	.L3146
.L3142:
	.loc 1 7521 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$120, %al
	jne	.L3147
	.loc 1 7523 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	put_var_into_stack@PLT
	.loc 1 7525 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -516(%ebp)
	jmp	.L3146
.L3147:
.LBB117:
	.loc 1 7532 0
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movzbl	%al, %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	38(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	sall	$2, %eax
	movl	%edx, %ecx
	orl	%eax, %ecx
	movl	%ecx, -1096(%ebp)
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L3149
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L3149
	movl	$1, -1092(%ebp)
	jmp	.L3152
.L3149:
	movl	$0, -1092(%ebp)
.L3152:
	movl	-1092(%ebp), %eax
	sall	$3, %eax
	orl	-1096(%ebp), %eax
	movl	%eax, %edx
	orl	$1, %edx
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	%eax, -340(%ebp)
	.loc 1 7533 0
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	-340(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -336(%ebp)
	.loc 1 7535 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-336(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 7536 0
	movl	-336(%ebp), %eax
	movl	%eax, -516(%ebp)
.L3146:
.LBE117:
	.loc 1 7540 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L3153
	.loc 1 7541 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7541, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3153:
	.loc 1 7547 0
	movl	-344(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L3155
	.loc 1 7548 0
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	$0, 8(%esp)
	movl	-344(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -344(%ebp)
.L3155:
	.loc 1 7553 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3157
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L3157
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L3157
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3157
	movl	-576(%ebp), %esi
	movl	-572(%ebp), %edi
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3157
	movl	-568(%ebp), %esi
	movl	-564(%ebp), %edi
	movl	-524(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3157
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3164
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -1088(%ebp)
	jmp	.L3166
.L3164:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3167
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -1084(%ebp)
	jmp	.L3169
.L3167:
	movl	$8, -1084(%ebp)
.L3169:
	movl	-1084(%ebp), %esi
	movl	%esi, -1088(%ebp)
.L3166:
	movl	-524(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, -1088(%ebp)
	jne	.L3157
	.loc 1 7561 0
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	movl	%eax, -1080(%ebp)
	movl	%edx, -1076(%ebp)
	movl	-1076(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -1304(%ebp)
	movl	%edx, -1300(%ebp)
	movl	-1304(%ebp), %esi
	movl	-1300(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-1080(%ebp), %eax
	adcl	-1076(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	-524(%ebp), %ecx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7562 0
	movl	$0, -576(%ebp)
	movl	$0, -572(%ebp)
.L3157:
	.loc 1 7565 0
	movl	-528(%ebp), %eax
	movl	%eax, (%esp)
	call	highest_pow2_factor
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	-344(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	offset_address@PLT
	movl	%eax, -516(%ebp)
.L3140:
.LBE116:
	.loc 1 7571 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3171
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3171
	movl	-528(%ebp), %eax
	testl	%eax, %eax
	je	.L3171
	movl	-528(%ebp), %eax
	movl	-356(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	is_aligning_offset
	testl	%eax, %eax
	je	.L3171
	.loc 1 7573 0
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L3176
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L3178
.L3176:
	movl	$128, -1068(%ebp)
	jmp	.L3179
.L3178:
	movl	$64, -1068(%ebp)
.L3179:
	movl	-1068(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_align@PLT
.L3171:
	.loc 1 7576 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3180
	movl	-532(%ebp), %eax
	testl	%eax, %eax
	je	.L3180
	movl	-516(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L3180
	.loc 1 7578 0
	movl	-516(%ebp), %eax
	cmpl	-352(%ebp), %eax
	jne	.L3184
	.loc 1 7579 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -516(%ebp)
.L3184:
	.loc 1 7581 0
	movl	-516(%ebp), %eax
	movzbl	3(%eax), %edx
	orl	$8, %edx
	movb	%dl, 3(%eax)
.L3180:
	.loc 1 7587 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	jne	.L3186
	.loc 1 7589 0
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3188
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	-568(%ebp), %esi
	movl	-564(%ebp), %edi
	movl	%edx, %ecx
	xorl	%edi, %ecx
	xorl	%esi, %eax
	orl	%ecx, %eax
	testl	%eax, %eax
	je	.L3190
.L3188:
	.loc 1 7590 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7590, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3190:
	.loc 1 7591 0
	movl	-516(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L3186:
	.loc 1 7600 0
	movl	-524(%ebp), %eax
	testl	%eax, %eax
	je	.L3191
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3191
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3191
	movl	-524(%ebp), %eax
	cmpl	$52, %eax
	je	.L3195
	movl	-524(%ebp), %eax
	movzbl	direct_load@GOTOFF(%ebx,%eax), %eax
	testb	%al, %al
	jne	.L3195
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$5, %eax
	je	.L3195
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L3195
	cmpl	$4, 20(%ebp)
	je	.L3195
	cmpl	$5, 20(%ebp)
	jne	.L3191
.L3195:
	movl	-524(%ebp), %eax
	cmpl	$52, %eax
	je	.L3201
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %esi
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, %esi
	jb	.L3191
	movl	-576(%ebp), %esi
	movl	-572(%ebp), %edi
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__moddi3@PLT
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L3191
.L3201:
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	testl	%edx, %edx
	js	.L3204
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3204
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	20(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	je	.L3204
.L3191:
.LBB118:
	.loc 1 7623 0
	movl	-500(%ebp), %eax
	movl	%eax, -332(%ebp)
	.loc 1 7625 0
	cmpl	$52, -332(%ebp)
	jne	.L3207
	cmpl	$0, 12(%ebp)
	je	.L3209
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3209
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3209
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3207
.L3209:
	.loc 1 7629 0
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	mode_for_size@PLT
	movl	%eax, -332(%ebp)
.L3207:
	.loc 1 7631 0
	cmpl	$52, -332(%ebp)
	jne	.L3213
	.loc 1 7635 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3215
	cmpl	$0, 12(%ebp)
	je	.L3217
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3215
.L3217:
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3219
.L3215:
	.loc 1 7638 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7638, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3219:
	.loc 1 7640 0
	movl	-576(%ebp), %esi
	movl	-572(%ebp), %edi
	movl	%esi, -1064(%ebp)
	movl	%edi, -1060(%ebp)
	movl	-1060(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -1304(%ebp)
	movl	%edx, -1300(%ebp)
	movl	-1304(%ebp), %esi
	movl	-1300(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-1064(%ebp), %eax
	adcl	-1060(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	$0, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7641 0
	cmpl	$0, 12(%ebp)
	jne	.L3220
	.loc 1 7642 0
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, 12(%ebp)
.L3220:
	.loc 1 7644 0
	cmpl	$2, 20(%ebp)
	jne	.L3222
	movl	$2, -1052(%ebp)
	jmp	.L3224
.L3222:
	movl	$0, -1052(%ebp)
.L3224:
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	addl	$7, %esi
	adcl	$0, %edi
	movl	%esi, -1048(%ebp)
	movl	%edi, -1044(%ebp)
	movl	-1044(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -1304(%ebp)
	movl	%edx, -1300(%ebp)
	movl	-1304(%ebp), %esi
	movl	-1300(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-1048(%ebp), %eax
	adcl	-1044(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	-1052(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	.loc 1 7650 0
	movl	12(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L3213:
	.loc 1 7653 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	validize_mem@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7655 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3225
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3225
	.loc 1 7656 0
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3228
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -1040(%ebp)
	jmp	.L3230
.L3228:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3231
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -1036(%ebp)
	jmp	.L3233
.L3231:
	movl	$8, -1036(%ebp)
.L3233:
	movl	-1036(%ebp), %esi
	movl	%esi, -1040(%ebp)
.L3230:
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movl	-1040(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	mark_reg_pointer@PLT
.L3225:
	.loc 1 7658 0
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -1032(%ebp)
	movl	%edx, -1028(%ebp)
	cmpl	$2, 20(%ebp)
	je	.L3234
	movl	12(%ebp), %eax
	movl	%eax, -1024(%ebp)
	jmp	.L3236
.L3234:
	movl	$0, -1024(%ebp)
.L3236:
	movl	-520(%ebp), %edx
	movl	%edx, -1020(%ebp)
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	movl	%eax, -1296(%ebp)
	movl	%edx, -1292(%ebp)
	movl	-1032(%ebp), %eax
	movl	-1028(%ebp), %edx
	movl	%eax, 36(%esp)
	movl	%edx, 40(%esp)
	movl	-332(%ebp), %eax
	movl	%eax, 32(%esp)
	movl	-332(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	-1024(%ebp), %edx
	movl	%edx, 24(%esp)
	movl	-1020(%ebp), %ecx
	movl	%ecx, 20(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	-1296(%ebp), %esi
	movl	-1292(%ebp), %edi
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	extract_bit_field@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7667 0
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L3237
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L3237
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L3237
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %edi
	movl	%edi, -1016(%ebp)
	movl	$0, -1012(%ebp)
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	movl	%eax, -1008(%ebp)
	movl	%edx, -1004(%ebp)
	movl	-1004(%ebp), %edx
	cmpl	%edx, -1012(%ebp)
	jl	.L3237
	movl	-1004(%ebp), %ecx
	cmpl	%ecx, -1012(%ebp)
	jg	.L3242
	movl	-1008(%ebp), %esi
	cmpl	%esi, -1016(%ebp)
	jbe	.L3237
.L3242:
	.loc 1 7670 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movzwl	%cx, %eax
	movl	$0, %edx
	movl	-568(%ebp), %esi
	movl	-564(%ebp), %edi
	subl	%esi, %eax
	sbbl	%edi, %edx
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	size_int_wide@PLT
	movl	%eax, %edx
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	$1, 20(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$84, (%esp)
	call	expand_shift@PLT
	movl	%eax, -516(%ebp)
.L3237:
	.loc 1 7675 0
	cmpl	$52, -500(%ebp)
	jne	.L3243
.LBB119:
	.loc 1 7680 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	$0, 4(%esp)
	movl	-332(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -328(%ebp)
	.loc 1 7682 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-328(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 7683 0
	movl	-328(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7684 0
	movl	-516(%ebp), %eax
	movb	$52, 2(%eax)
	.loc 1 7685 0
	movl	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes@PLT
.L3243:
.LBE119:
	.loc 1 7688 0
	movl	-516(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L3204:
.LBE118:
	.loc 1 7693 0
	cmpl	$52, -500(%ebp)
	jne	.L3245
	.loc 1 7694 0
	movl	$52, -524(%ebp)
.L3245:
	.loc 1 7697 0
	cmpl	$4, 20(%ebp)
	je	.L3247
	cmpl	$3, 20(%ebp)
	je	.L3247
	cmpl	$5, 20(%ebp)
	jne	.L3250
.L3247:
	.loc 1 7699 0
	movl	-576(%ebp), %eax
	movl	-572(%ebp), %edx
	movl	%eax, -1000(%ebp)
	movl	%edx, -996(%ebp)
	movl	-996(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -1304(%ebp)
	movl	%edx, -1300(%ebp)
	movl	-1304(%ebp), %esi
	movl	-1300(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-1000(%ebp), %eax
	adcl	-996(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	-524(%ebp), %ecx
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7697 0
	jmp	.L3251
.L3250:
	.loc 1 7701 0
	movl	-576(%ebp), %edx
	movl	-572(%ebp), %ecx
	movl	%edx, -992(%ebp)
	movl	%ecx, -988(%ebp)
	movl	-988(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, -1304(%ebp)
	movl	%edx, -1300(%ebp)
	movl	-1304(%ebp), %esi
	movl	-1300(%ebp), %edi
	movl	%edi, %edi
	sarl	$31, %edi
	movl	%edi, %esi
	movl	%esi, %eax
	andl	$7, %eax
	movl	%edi, %edx
	andl	$0, %edx
	addl	-992(%ebp), %eax
	adcl	-988(%ebp), %edx
	shrdl	$3, %edx, %eax
	sarl	$3, %edx
	movl	-524(%ebp), %ecx
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -516(%ebp)
.L3251:
	.loc 1 7703 0
	movl	-516(%ebp), %eax
	cmpl	-352(%ebp), %eax
	jne	.L3252
	.loc 1 7704 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -516(%ebp)
.L3252:
	.loc 1 7706 0
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes@PLT
	.loc 1 7707 0
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3254
	.loc 1 7708 0
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3256
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -980(%ebp)
	jmp	.L3258
.L3256:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3259
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -976(%ebp)
	jmp	.L3261
.L3259:
	movl	$8, -976(%ebp)
.L3261:
	movl	-976(%ebp), %edx
	movl	%edx, -980(%ebp)
.L3258:
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movl	-980(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	mark_reg_pointer@PLT
.L3254:
	.loc 1 7710 0
	movl	-516(%ebp), %eax
	movzbl	3(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movl	%eax, %edx
	movl	-532(%ebp), %eax
	orl	%edx, %eax
	andl	$1, %eax
	movl	-516(%ebp), %ecx
	andl	$1, %eax
	leal	0(,%eax,8), %edx
	movzbl	3(%ecx), %eax
	andl	$-9, %eax
	orl	%edx, %eax
	movb	%al, 3(%ecx)
	.loc 1 7711 0
	movl	-524(%ebp), %eax
	cmpl	%eax, -500(%ebp)
	je	.L3262
	movl	-524(%ebp), %eax
	cmpl	$52, %eax
	je	.L3262
	movl	-524(%ebp), %eax
	cmpl	16(%ebp), %eax
	je	.L3262
	cmpl	$4, 20(%ebp)
	je	.L3262
	cmpl	$5, 20(%ebp)
	jne	.L3267
.L3262:
	.loc 1 7714 0
	movl	-516(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L3267:
	.loc 1 7715 0
	cmpl	$0, 12(%ebp)
	jne	.L3268
	.loc 1 7716 0
	cmpl	$0, 16(%ebp)
	je	.L3270
	movl	16(%ebp), %edi
	movl	%edi, -972(%ebp)
	jmp	.L3272
.L3270:
	movl	-500(%ebp), %eax
	movl	%eax, -972(%ebp)
.L3272:
	movl	-972(%ebp), %edx
	movl	%edx, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3268:
	.loc 1 7718 0
	movl	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 7719 0
	movl	12(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2702:
.LBE114:
.LBB120:
	.loc 1 7724 0
	call	get_last_insn@PLT
	movl	%eax, -320(%ebp)
	.loc 1 7727 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -488(%ebp)
	.loc 1 7731 0
	movl	-488(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3273
	.loc 1 7733 0
	movl	-488(%ebp), %eax
	movl	%eax, 12(%ebp)
	.loc 1 7734 0
	call	get_last_insn@PLT
	movl	%eax, -324(%ebp)
	.loc 1 7735 0
	movl	-324(%ebp), %eax
	cmpl	-320(%ebp), %eax
	jne	.L3275
	.loc 1 7736 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7736, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3275:
	.loc 1 7737 0
	movl	-324(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %edx
	movl	rtx_class@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$105, %al
	je	.L3279
	.loc 1 7738 0
	movl	-324(%ebp), %eax
	movl	%eax, (%esp)
	call	prev_nonnote_insn@PLT
	movl	%eax, -324(%ebp)
	jmp	.L3279
.L3273:
	.loc 1 7742 0
	movl	-488(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
	.loc 1 7743 0
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	movl	%eax, -324(%ebp)
.L3279:
	.loc 1 7747 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L3280
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	88(%eax), %eax
	movl	%eax, -968(%ebp)
	jmp	.L3282
.L3280:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	88(%eax), %eax
	movl	%eax, -968(%ebp)
.L3282:
	movl	-968(%ebp), %esi
	movl	4(%esi), %eax
	movl	%eax, -316(%ebp)
	.loc 1 7748 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-316(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -316(%ebp)
	.loc 1 7751 0
	movl	-316(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -316(%ebp)
	.loc 1 7753 0
	movl	-324(%ebp), %eax
	movl	68(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-316(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$29, 4(%esp)
	movl	$3, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, %edx
	movl	-324(%ebp), %eax
	movl	%edx, 68(%eax)
	.loc 1 7756 0
	movl	12(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L2700:
.LBE120:
	.loc 1 7763 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7763, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2736:
.LBB121:
	.loc 1 7776 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -312(%ebp)
	.loc 1 7777 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -308(%ebp)
	.loc 1 7778 0
	movl	-308(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -304(%ebp)
	.loc 1 7779 0
	movl	-312(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -300(%ebp)
	.loc 1 7780 0
	movl	-300(%ebp), %eax
	movl	16(%eax), %eax
	movl	64(%eax), %eax
	movl	%eax, -296(%ebp)
	.loc 1 7781 0
	movl	-300(%ebp), %eax
	movl	16(%eax), %eax
	movl	68(%eax), %eax
	movl	%eax, -292(%ebp)
	.loc 1 7782 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-308(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -288(%ebp)
	.loc 1 7783 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-296(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -284(%ebp)
	.loc 1 7784 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -280(%ebp)
	.loc 1 7785 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-312(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -276(%ebp)
	.loc 1 7786 0
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -272(%ebp)
	.loc 1 7787 0
	movl	-308(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -268(%ebp)
	.loc 1 7793 0
	movl	-292(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3283
	movl	-296(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3283
	movl	-296(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_int_cst_lt@PLT
	testl	%eax, %eax
	jne	.L3286
.L3283:
	movl	-308(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3287
	movl	-296(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3287
	movl	-296(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-308(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_int_cst_lt@PLT
	testl	%eax, %eax
	jne	.L3286
.L3287:
	movl	-292(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3290
	movl	-308(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3290
	movl	-308(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_int_cst_lt@PLT
	testl	%eax, %eax
	je	.L3290
.L3286:
	.loc 1 7802 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3290:
	.loc 1 7804 0
	cmpl	$0, 12(%ebp)
	jne	.L3293
	.loc 1 7805 0
	cmpl	$0, 16(%ebp)
	je	.L3295
	movl	16(%ebp), %eax
	movl	%eax, -964(%ebp)
	jmp	.L3297
.L3295:
	movl	-500(%ebp), %edx
	movl	%edx, -964(%ebp)
.L3297:
	movl	-964(%ebp), %ecx
	movl	%ecx, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3293:
	.loc 1 7810 0
	call	gen_label_rtx@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7811 0
	call	gen_label_rtx@PLT
	movl	%eax, -512(%ebp)
	.loc 1 7813 0
	movl	-288(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3298
	movl	-284(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3300
.L3298:
	.loc 1 7815 0
	movl	-288(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-512(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-304(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%edx, 16(%esp)
	movl	$0, 12(%esp)
	movl	$117, 8(%esp)
	movl	-284(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-288(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
.L3300:
	.loc 1 7818 0
	movl	-288(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3301
	movl	-280(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3303
.L3301:
	.loc 1 7820 0
	movl	-288(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-512(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-304(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	%edx, 16(%esp)
	movl	$0, 12(%esp)
	movl	$115, 8(%esp)
	movl	-280(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-288(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
.L3303:
	.loc 1 7825 0
	movl	-284(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3304
	.loc 1 7826 0
	movl	-284(%ebp), %eax
	movl	4(%eax), %esi
	movl	8(%eax), %edi
	movl	%esi, %eax
	andb	$254, %ah
	movl	%edi, %edx
	andb	$255, %dh
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -264(%ebp)
	jmp	.L3306
.L3304:
	.loc 1 7829 0
	movl	$-257, 4(%esp)
	movl	$-1, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	72(%eax), %ecx
	movl	$3, 24(%esp)
	movl	-304(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-284(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -264(%ebp)
.L3306:
	.loc 1 7833 0
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %edx
	movl	$3, 24(%esp)
	movl	-304(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 16(%esp)
	movl	-264(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-288(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -260(%ebp)
	.loc 1 7836 0
	movl	$8, 4(%esp)
	movl	$0, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	-304(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%edx, 16(%esp)
	movl	-260(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$63, 4(%esp)
	movl	$0, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -256(%ebp)
	.loc 1 7838 0
	movl	$8, 4(%esp)
	movl	$0, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, %edx
	movl	-304(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%edx, 16(%esp)
	movl	-288(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$67, 4(%esp)
	movl	$1, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -252(%ebp)
	.loc 1 7841 0
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	$3, 24(%esp)
	movl	-304(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 16(%esp)
	movl	-272(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-260(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, %edx
	movl	byte_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	memory_address@PLT
	movl	%eax, -248(%ebp)
	.loc 1 7847 0
	movl	-308(%ebp), %eax
	movl	4(%eax), %edx
	movl	-252(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	make_tree@PLT
	movl	%eax, %esi
	movl	byte_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-248(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, %edx
	movl	byte_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	$1, 20(%esp)
	movl	$0, 16(%esp)
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -244(%ebp)
	.loc 1 7851 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	byte_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3307
	movl	12(%ebp), %esi
	movl	%esi, -960(%ebp)
	jmp	.L3309
.L3307:
	movl	$0, -960(%ebp)
.L3309:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	72(%eax), %ecx
	movl	byte_mode@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	$3, 24(%esp)
	movl	$1, 20(%esp)
	movl	-960(%ebp), %edi
	movl	%edi, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-244(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%esi, (%esp)
	call	expand_binop@PLT
	movl	%eax, -240(%ebp)
	.loc 1 7855 0
	movl	-240(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L3310
	.loc 1 7856 0
	movl	$1, 8(%esp)
	movl	-240(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
.L3310:
	.loc 1 7859 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 7860 0
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 7861 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 7862 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 7863 0
	movl	12(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2711:
.LBE121:
	.loc 1 7867 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3312
	.loc 1 7869 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	leal	8(%eax), %esi
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, (%esi)
	.loc 1 7871 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_decl_cleanup_eh@PLT
	.loc 1 7875 0
	movl	8(%ebp), %eax
	movl	$0, 24(%eax)
.L3312:
	.loc 1 7877 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2712:
	.loc 1 7883 0
	movl	$0, 4(%esp)
	movl	$2, (%esp)
	call	expand_start_bindings_and_block@PLT
	.loc 1 7885 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	232(%eax), %eax
	movl	%eax, 240(%edx)
	.loc 1 7887 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7889 0
	cmpl	$0, -480(%ebp)
	jne	.L3314
	.loc 1 7890 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	force_not_mem@PLT
	movl	%eax, -516(%ebp)
.L3314:
	.loc 1 7891 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 7892 0
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	$0, (%esp)
	call	expand_end_bindings@PLT
	.loc 1 7894 0
	movl	-516(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2710:
	.loc 1 7898 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$123, %al
	jne	.L3316
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$31, %al
	jne	.L3316
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movzbl	36(%eax), %eax
	andl	$12, %eax
	testb	%al, %al
	je	.L3316
	.loc 1 7903 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movzbl	36(%eax), %eax
	andl	$12, %eax
	cmpb	$4, %al
	jne	.L3320
	.loc 1 7905 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	44(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-484(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3320:
	.loc 1 7908 0
	movl	-480(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_builtin@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3316:
	.loc 1 7911 0
	movl	-480(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_call@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2737:
	.loc 1 7917 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3322
	.loc 1 7918 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3322:
	.loc 1 7920 0
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$22, %al
	jne	.L3324
.LBB122:
	.loc 1 7922 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -236(%ebp)
	.loc 1 7926 0
	cmpl	$52, -500(%ebp)
	jne	.L3326
	movl	-236(%ebp), %eax
	movzbl	37(%eax), %eax
	andl	$-2, %eax
	cmpb	$104, %al
	jne	.L3326
.LBB123:
	.loc 1 7929 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -232(%ebp)
	.loc 1 7931 0
	movl	-232(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -232(%ebp)
	.loc 1 7932 0
	movl	$0, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-232(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_attributes@PLT
	.loc 1 7933 0
	movl	-232(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L3326:
.LBE123:
	.loc 1 7936 0
	cmpl	$0, 12(%ebp)
	jne	.L3329
	.loc 1 7937 0
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$0, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, 12(%ebp)
.L3329:
	.loc 1 7939 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3331
	.loc 1 7941 0
	cmpl	$2, 20(%ebp)
	jne	.L3333
	movl	$2, -956(%ebp)
	jmp	.L3335
.L3333:
	movl	$0, -956(%ebp)
.L3335:
	movl	-236(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	-956(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	store_expr@PLT
	jmp	.L3336
.L3331:
	.loc 1 7945 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3337
	.loc 1 7947 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -952(%ebp)
	movl	-236(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -948(%ebp)
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$3, %esi, %edi
	sall	$3, %esi
	movl	%esi, -936(%ebp)
	movl	%edi, -932(%ebp)
	movl	-500(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -928(%ebp)
	movl	-928(%ebp), %edi
	movl	%edi, -928(%ebp)
	movl	$0, -924(%ebp)
	movl	-924(%ebp), %eax
	cmpl	%eax, -932(%ebp)
	jg	.L3339
	movl	-924(%ebp), %edx
	cmpl	%edx, -932(%ebp)
	jl	.L3341
	movl	-928(%ebp), %ecx
	cmpl	%ecx, -936(%ebp)
	jae	.L3339
.L3341:
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, %esi
	movl	%edx, %edi
	shldl	$3, %esi, %edi
	sall	$3, %esi
	movl	%esi, -944(%ebp)
	movl	%edi, -940(%ebp)
	jmp	.L3342
.L3339:
	movl	-500(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -944(%ebp)
	movl	-944(%ebp), %edi
	movl	%edi, -944(%ebp)
	movl	$0, -940(%ebp)
.L3342:
	movl	$0, 40(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, 36(%esp)
	movl	$0, 32(%esp)
	movl	$0, 28(%esp)
	movl	-952(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-948(%ebp), %edx
	movl	%edx, 20(%esp)
	movl	$0, 12(%esp)
	movl	$0, 16(%esp)
	movl	-944(%ebp), %esi
	movl	-940(%ebp), %edi
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	store_field
	jmp	.L3336
.L3337:
	.loc 1 7955 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$7955, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3336:
	.loc 1 7958 0
	movl	12(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L3324:
.LBE122:
	.loc 1 7961 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	jne	.L3343
	.loc 1 7963 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7969 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-520(%ebp), %eax
	cmpl	%eax, %edx
	je	.L3345
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L3345
	.loc 1 7971 0
	movl	-516(%ebp), %eax
	movzbl	3(%eax), %edx
	andl	$-17, %edx
	movb	%dl, 3(%eax)
.L3345:
	.loc 1 7973 0
	movl	-516(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3343:
	.loc 1 7976 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 7977 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	jne	.L3348
	.loc 1 7978 0
	movl	-516(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L3348:
	.loc 1 7981 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3350
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3358
.L3350:
.LBB124:
	.loc 1 7983 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -228(%ebp)
	.loc 1 7984 0
	movl	-228(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -224(%ebp)
	.loc 1 7986 0
	cmpl	$5, 20(%ebp)
	jne	.L3359
	.loc 1 7987 0
	movl	-224(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	subreg_lowpart_offset@PLT
	movl	%eax, 12(%esp)
	movl	-224(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_gen_subreg@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3359:
	.loc 1 7991 0
	movl	-228(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-224(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3358:
.LBE124:
	.loc 1 7995 0
	cmpl	$5, 20(%ebp)
	jne	.L3361
	.loc 1 7996 0
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	je	.L3363
	movl	$131, -920(%ebp)
	jmp	.L3365
.L3363:
	movl	$130, -920(%ebp)
.L3365:
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-920(%ebp), %ecx
	movl	%ecx, (%esp)
	call	gen_rtx_fmt_e@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3361:
	.loc 1 7998 0
	cmpl	$0, 12(%ebp)
	jne	.L3366
	.loc 1 7999 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3366:
	.loc 1 8003 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 8005 0
	movl	12(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2738:
	.loc 1 8008 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8014 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	%eax, %edx
	je	.L3368
	.loc 1 8016 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	andl	$-2, %eax
	cmpb	$104, %al
	je	.L3370
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3370
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -916(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3373
	movl	$8, -912(%ebp)
	jmp	.L3375
.L3373:
	movl	$4, -912(%ebp)
.L3375:
	movl	-912(%ebp), %edi
	cmpl	%edi, -916(%ebp)
	jg	.L3370
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -908(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L3377
	movl	$8, -904(%ebp)
	jmp	.L3379
.L3377:
	movl	$4, -904(%ebp)
.L3379:
	movl	-904(%ebp), %eax
	cmpl	%eax, -908(%ebp)
	jg	.L3370
	.loc 1 8019 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	gen_lowpart@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8016 0
	jmp	.L3368
.L3370:
	.loc 1 8020 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L3368
.LBB125:
	.loc 1 8026 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -220(%ebp)
	.loc 1 8028 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3382
	.loc 1 8029 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8029, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3382:
	.loc 1 8031 0
	cmpl	$0, 12(%ebp)
	je	.L3384
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-220(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	cmpl	%eax, %edx
	je	.L3386
.L3384:
	.loc 1 8032 0
	movl	-220(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	-220(%ebp), %ecx
	movzbl	37(%ecx), %ecx
	shrb	%cl
	movzbl	%cl, %esi
	movl	-220(%ebp), %ecx
	movl	%ecx, 16(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%esi, (%esp)
	call	assign_stack_temp_for_type@PLT
	movl	%eax, 12(%ebp)
.L3386:
	.loc 1 8037 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 8038 0
	movl	12(%ebp), %eax
	movl	%eax, -516(%ebp)
.L3368:
.LBE125:
	.loc 1 8045 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3387
	.loc 1 8047 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8049 0
	movl	-504(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	je	.L3389
	.loc 1 8050 0
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3391
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -896(%ebp)
	jmp	.L3393
.L3391:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3394
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -892(%ebp)
	jmp	.L3396
.L3394:
	movl	$8, -892(%ebp)
.L3396:
	movl	-892(%ebp), %edx
	movl	%edx, -896(%ebp)
.L3393:
	movl	-504(%ebp), %eax
	movl	44(%eax), %eax
	cmpl	%eax, -896(%ebp)
	jbe	.L3397
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3399
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -888(%ebp)
	jmp	.L3401
.L3399:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3402
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -884(%ebp)
	jmp	.L3404
.L3402:
	movl	$8, -884(%ebp)
.L3404:
	movl	-884(%ebp), %ecx
	movl	%ecx, -888(%ebp)
.L3401:
	movl	-888(%ebp), %esi
	movl	%esi, -900(%ebp)
	jmp	.L3405
.L3397:
	movl	-504(%ebp), %eax
	movl	44(%eax), %eax
	movl	%eax, -900(%ebp)
.L3405:
	movl	-900(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	set_mem_align@PLT
	jmp	.L3406
.L3389:
	.loc 1 8051 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	andl	$-2, %eax
	cmpb	$104, %al
	je	.L3406
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3408
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -880(%ebp)
	jmp	.L3410
.L3408:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L3411
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -876(%ebp)
	jmp	.L3413
.L3411:
	movl	$8, -876(%ebp)
.L3413:
	movl	-876(%ebp), %eax
	movl	%eax, -880(%ebp)
.L3410:
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	cmpl	%eax, -880(%ebp)
	jae	.L3406
.LBB126:
	.loc 1 8054 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -216(%ebp)
	.loc 1 8056 0
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -864(%ebp)
	movl	%edx, -860(%ebp)
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -856(%ebp)
	movl	-856(%ebp), %edx
	movl	%edx, -856(%ebp)
	movl	$0, -852(%ebp)
	movl	-852(%ebp), %ecx
	cmpl	%ecx, -860(%ebp)
	jl	.L3415
	movl	-852(%ebp), %esi
	cmpl	%esi, -860(%ebp)
	jg	.L3417
	movl	-856(%ebp), %edi
	cmpl	%edi, -864(%ebp)
	jbe	.L3415
.L3417:
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -872(%ebp)
	movl	%edx, -868(%ebp)
	jmp	.L3418
.L3415:
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -872(%ebp)
	movl	-872(%ebp), %eax
	movl	%eax, -872(%ebp)
	movl	$0, -868(%ebp)
.L3418:
	movl	-872(%ebp), %edx
	movl	-868(%ebp), %ecx
	movl	%edx, -544(%ebp)
	movl	%ecx, -540(%ebp)
	.loc 1 8059 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	-504(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	-544(%ebp), %eax
	movl	-540(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, (%esp)
	call	assign_stack_temp_for_type@PLT
	movl	%eax, -212(%ebp)
	.loc 1 8060 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-212(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -208(%ebp)
	.loc 1 8062 0
	movl	8(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3419
	.loc 1 8063 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8063, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3419:
	.loc 1 8065 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L3421
	.loc 1 8066 0
	cmpl	$2, 20(%ebp)
	jne	.L3423
	movl	$2, -848(%ebp)
	jmp	.L3425
.L3423:
	movl	$0, -848(%ebp)
.L3425:
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	-848(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-208(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	jmp	.L3426
.L3421:
	.loc 1 8071 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-208(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L3426:
	.loc 1 8073 0
	movl	-212(%ebp), %eax
	movl	%eax, -516(%ebp)
.L3406:
.LBE126:
	.loc 1 8076 0
	movl	-504(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	$1, 20(%esp)
	movl	$1, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	adjust_address_1@PLT
	movl	%eax, -516(%ebp)
.L3387:
	.loc 1 8079 0
	movl	-516(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2715:
	.loc 1 8082 0
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jne	.L3427
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3427
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3427
	movl	optab_table@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -844(%ebp)
	jmp	.L3431
.L3427:
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -844(%ebp)
.L3431:
	movl	-844(%ebp), %edi
	movl	%edi, -492(%ebp)
	.loc 1 8097 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$60, %al
	jne	.L3432
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3432
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$122, %al
	jne	.L3432
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L3436
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	8(%eax), %eax
	cmpl	%eax, %edx
	je	.L3436
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %edx
	movl	global_rtl@GOT(%ebx), %eax
	movl	20(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3432
.L3436:
.LBB127:
	.loc 1 8104 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -204(%ebp)
	.loc 1 8106 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, 24(%eax)
	.loc 1 8107 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%eax, 20(%edx)
.L3432:
.LBE127:
	.loc 1 8118 0
	cmpl	$3, 20(%ebp)
	je	.L3439
	cmpl	$5, 20(%ebp)
	je	.L3439
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -500(%ebp)
	jne	.L3442
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jne	.L3439
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3442
.L3439:
	.loc 1 8121 0
	cmpl	$2, 20(%ebp)
	jne	.L3445
	.loc 1 8122 0
	movl	$0, 12(%ebp)
.L3445:
	.loc 1 8123 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3447
	movl	-500(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$64, %ax
	ja	.L3447
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	je	.L3447
.LBB128:
	.loc 1 8129 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8135 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%ecx, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	immed_double_const@PLT
	movl	%eax, -200(%ebp)
	.loc 1 8139 0
	movl	-200(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8140 0
	cmpl	$3, 20(%ebp)
	je	.L3451
	cmpl	$5, 20(%ebp)
	je	.L3451
	.loc 1 8141 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -512(%ebp)
.L3451:
	.loc 1 8142 0
	movl	-512(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3447:
.LBE128:
	.loc 1 8145 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3442
	movl	-500(%ebp), %eax
	movl	mode_bitsize@GOT(%ebx), %edx
	movzwl	(%edx,%eax,2), %eax
	cmpw	$32, %ax
	ja	.L3442
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	je	.L3442
.LBB129:
	.loc 1 8151 0
	cmpl	$5, 20(%ebp)
	jne	.L3457
	movl	$5, -840(%ebp)
	jmp	.L3459
.L3457:
	movl	$3, -840(%ebp)
.L3459:
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-840(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8154 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3460
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L3460
	.loc 1 8156 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8160 0
	cmpl	$3, 20(%ebp)
	je	.L3472
	cmpl	$5, 20(%ebp)
	jne	.L3471
	.loc 1 8162 0
	jmp	.L3472
.L3460:
	.loc 1 8168 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%ecx, 16(%esp)
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	immed_double_const@PLT
	movl	%eax, -196(%ebp)
	.loc 1 8172 0
	movl	-196(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8173 0
	cmpl	$3, 20(%ebp)
	je	.L3473
	cmpl	$5, 20(%ebp)
	je	.L3473
	.loc 1 8174 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -516(%ebp)
.L3473:
	.loc 1 8175 0
	movl	-516(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L3442:
.LBE129:
	.loc 1 8179 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3476
	.loc 1 8180 0
	movl	$0, -488(%ebp)
.L3476:
	.loc 1 8186 0
	cmpl	$3, 20(%ebp)
	je	.L3478
	cmpl	$5, 20(%ebp)
	jne	.L3480
.L3478:
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -500(%ebp)
	je	.L3481
.L3480:
	.loc 1 8189 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8190 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8191 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-516(%ebp), %eax
	jne	.L3482
	.loc 1 8192 0
	movl	-512(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L3482:
	.loc 1 8193 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-512(%ebp), %eax
	jne	.L3471
	.loc 1 8194 0
	movl	-516(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3481:
	.loc 1 8198 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8199 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
.L3472:
	.loc 1 8205 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3486
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3488
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3486
.L3488:
	.loc 1 8208 0
	movl	-516(%ebp), %eax
	movl	%eax, -508(%ebp)
	.loc 1 8209 0
	movl	-512(%ebp), %eax
	movl	%eax, -516(%ebp)
	.loc 1 8210 0
	movl	-508(%ebp), %eax
	movl	%eax, -512(%ebp)
.L3486:
	.loc 1 8214 0
	movl	-512(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$85, %ax
	jne	.L3496
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3498
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3496
.L3498:
.LBB130:
	.loc 1 8217 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -532(%ebp)
	.loc 1 8219 0
	movl	-512(%ebp), %eax
	movl	4(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8220 0
	cmpl	$0, -508(%ebp)
	je	.L3506
	.loc 1 8221 0
	movl	-508(%ebp), %eax
	movl	%eax, -516(%ebp)
	jmp	.L3508
.L3506:
	.loc 1 8223 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L3509
	.loc 1 8224 0
	movl	-512(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -516(%ebp)
	jmp	.L3508
.L3509:
	.loc 1 8226 0
	movl	-512(%ebp), %eax
	movl	4(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -516(%ebp)
.L3508:
	.loc 1 8229 0
	leal	-532(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	eliminate_constant_term@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8235 0
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movl	-532(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8237 0
	cmpl	$0, -508(%ebp)
	je	.L3511
	.loc 1 8238 0
	movl	-508(%ebp), %eax
	movl	%eax, -512(%ebp)
	jmp	.L3496
.L3511:
	.loc 1 8240 0
	movl	-512(%ebp), %eax
	movl	12(%eax), %eax
	movl	-532(%ebp), %edx
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -512(%ebp)
.L3496:
.LBE130:
	.loc 1 8244 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3513
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	je	.L3513
	movl	-512(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$88, %ax
	jne	.L3522
.L3513:
	.loc 1 8245 0
	movl	-512(%ebp), %eax
	movl	%eax, -508(%ebp)
	movl	-516(%ebp), %eax
	movl	%eax, -512(%ebp)
	movl	-508(%ebp), %eax
	movl	%eax, -516(%ebp)
.L3522:
	.loc 1 8247 0
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	simplify_binary_operation@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8248 0
	cmpl	$0, -508(%ebp)
	jne	.L3523
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -836(%ebp)
	jmp	.L3525
.L3523:
	movl	-508(%ebp), %edx
	movl	%edx, -836(%ebp)
.L3525:
	movl	-836(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2716:
	.loc 1 8256 0
	cmpl	$3, 20(%ebp)
	je	.L3526
	cmpl	$5, 20(%ebp)
	jne	.L3528
.L3526:
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	really_constant_p@PLT
	testl	%eax, %eax
	je	.L3528
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	really_constant_p@PLT
	testl	%eax, %eax
	je	.L3528
.LBB131:
	.loc 1 8261 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -192(%ebp)
	.loc 1 8263 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -188(%ebp)
	.loc 1 8267 0
	movl	-188(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3531
	.loc 1 8268 0
	movl	-188(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-192(%ebp), %eax
	movl	%eax, (%esp)
	call	plus_constant_wide@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3531:
	.loc 1 8270 0
	movl	-188(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-192(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$86, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3528:
.LBE131:
	.loc 1 8273 0
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jne	.L3533
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3533
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3533
	movl	optab_table@GOT(%ebx), %eax
	movl	12(%eax), %eax
	movl	%eax, -832(%ebp)
	jmp	.L3537
.L3533:
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, -832(%ebp)
.L3537:
	movl	-832(%ebp), %esi
	movl	%esi, -492(%ebp)
	.loc 1 8281 0
	cmpl	$3, 20(%ebp)
	je	.L3538
	cmpl	$5, 20(%ebp)
	jne	.L3540
.L3538:
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -500(%ebp)
	jne	.L3540
	.loc 1 8285 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3542
	.loc 1 8286 0
	movl	$0, -488(%ebp)
.L3542:
	.loc 1 8288 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8289 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8292 0
	movl	-512(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3471
	.loc 1 8294 0
	movl	-512(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	negate_rtx@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8295 0
	jmp	.L3472
.L2717:
	.loc 1 8304 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3546
.LBB132:
	.loc 1 8306 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -184(%ebp)
	.loc 1 8307 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 8308 0
	movl	8(%ebp), %edx
	movl	-184(%ebp), %eax
	movl	%eax, 24(%edx)
.L3546:
.LBE132:
	.loc 1 8314 0
	cmpl	$3, 20(%ebp)
	jne	.L3548
	movl	ptr_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -500(%ebp)
	jne	.L3548
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L3548
.LBB133:
	.loc 1 8317 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -180(%ebp)
	.loc 1 8319 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$3, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8332 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3552
	.loc 1 8333 0
	movl	$0, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -516(%ebp)
.L3552:
	.loc 1 8334 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3554
	.loc 1 8335 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -516(%ebp)
.L3554:
	.loc 1 8337 0
	movl	-180(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %esi
	movl	$0, 4(%esp)
	movl	-180(%ebp), %eax
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	movl	%esi, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	gen_int_mode@PLT
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$88, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3548:
.LBE133:
	.loc 1 8342 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3556
	.loc 1 8343 0
	movl	$0, -488(%ebp)
.L3556:
	.loc 1 8345 0
	cmpl	$2, 20(%ebp)
	jne	.L3558
	.loc 1 8346 0
	movl	$0, 12(%ebp)
.L3558:
	.loc 1 8352 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	jne	.L3560
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$7, %al
	jne	.L3560
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %eax
	cmpl	%eax, %edx
	jge	.L3560
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3564
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	int_fits_type_p@PLT
	testl	%eax, %eax
	je	.L3564
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	$64, %ax
	ja	.L3567
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	testl	%eax, %eax
	js	.L3567
.L3564:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	jne	.L3560
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzwl	36(%eax), %edx
	andw	$511, %dx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	cmpw	%ax, %dx
	jne	.L3560
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	movl	%eax, %edx
	shrb	$5, %dl
	andl	$1, %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	cmpb	%al, %dl
	jne	.L3560
.L3567:
.LBB134:
	.loc 1 8375 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -176(%ebp)
	.loc 1 8377 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	je	.L3571
	movl	optab_table@GOT(%ebx), %eax
	movl	32(%eax), %eax
	movl	%eax, -828(%ebp)
	jmp	.L3573
.L3571:
	movl	optab_table@GOT(%ebx), %eax
	movl	36(%eax), %eax
	movl	%eax, -828(%ebp)
.L3573:
	movl	-828(%ebp), %edi
	movl	%edi, -172(%ebp)
	.loc 1 8378 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	je	.L3574
	movl	optab_table@GOT(%ebx), %eax
	movl	36(%eax), %eax
	movl	%eax, -824(%ebp)
	jmp	.L3576
.L3574:
	movl	optab_table@GOT(%ebx), %eax
	movl	32(%eax), %eax
	movl	%eax, -824(%ebp)
.L3576:
	movl	-824(%ebp), %eax
	movl	%eax, -492(%ebp)
	.loc 1 8380 0
	movl	-176(%ebp), %edx
	movl	mode_wider_mode@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	jne	.L3560
	.loc 1 8382 0
	movl	-500(%ebp), %eax
	movl	-492(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	je	.L3578
	.loc 1 8384 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8386 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3580
	.loc 1 8387 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	jmp	.L3471
.L3580:
	.loc 1 8390 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8392 0
	jmp	.L3471
.L3578:
	.loc 1 8394 0
	movl	-500(%ebp), %eax
	movl	-172(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	je	.L3560
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -176(%ebp)
	jne	.L3560
.LBB135:
	.loc 1 8398 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8400 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L3585
	.loc 1 8401 0
	movl	-520(%ebp), %esi
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, -512(%ebp)
	jmp	.L3587
.L3585:
	.loc 1 8406 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
.L3587:
	.loc 1 8408 0
	movl	-520(%ebp), %eax
	movl	$3, 24(%esp)
	movl	%eax, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-172(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8410 0
	movl	-520(%ebp), %edi
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_highpart@PLT
	movl	%eax, %esi
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_highpart@PLT
	movl	%eax, %edx
	movl	%edi, 20(%esp)
	movl	%esi, 16(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_mult_highpart_adjust@PLT
	movl	%eax, -168(%ebp)
	.loc 1 8415 0
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_highpart@PLT
	movl	%eax, %edx
	movl	-168(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_move_insn@PLT
	.loc 1 8416 0
	movl	-508(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L3560:
.LBE135:
.LBE134:
	.loc 1 8420 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8421 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8422 0
	movl	-520(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_mult@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2718:
	.loc 1 8429 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3588
	.loc 1 8430 0
	movl	$0, -488(%ebp)
.L3588:
	.loc 1 8431 0
	cmpl	$2, 20(%ebp)
	jne	.L3590
	.loc 1 8432 0
	movl	$0, 12(%ebp)
.L3590:
	.loc 1 8436 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8437 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8438 0
	movl	-520(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-496(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2720:
	.loc 1 8444 0
	movl	flag_unsafe_math_optimizations@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3592
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3592
	movl	optimize_size@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3592
	movl	-504(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$8, %al
	jne	.L3592
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	real_onep@PLT
	testl	%eax, %eax
	jne	.L3592
	.loc 1 8447 0
	movl	8(%ebp), %eax
	movl	24(%eax), %esi
	movl	dconst1@GOT(%ebx), %edx
	movl	(%edx), %eax
	movl	%eax, 4(%esp)
	movl	4(%edx), %eax
	movl	%eax, 8(%esp)
	movl	8(%edx), %eax
	movl	%eax, 12(%esp)
	movl	12(%edx), %eax
	movl	%eax, 16(%esp)
	movl	16(%edx), %eax
	movl	%eax, 20(%esp)
	movl	20(%edx), %eax
	movl	%eax, 24(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	build_real@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$71, (%esp)
	call	build@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$62, (%esp)
	call	build@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3592:
	.loc 1 8452 0
	movl	optab_table@GOT(%ebx), %eax
	movl	40(%eax), %eax
	movl	%eax, -492(%ebp)
	.loc 1 8453 0
	jmp	.L3540
.L2719:
	.loc 1 8459 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3598
	.loc 1 8460 0
	movl	$0, -488(%ebp)
.L3598:
	.loc 1 8461 0
	cmpl	$2, 20(%ebp)
	jne	.L3600
	.loc 1 8462 0
	movl	$0, 12(%ebp)
.L3600:
	.loc 1 8463 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8464 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8465 0
	movl	-520(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-496(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$1, (%esp)
	call	expand_divmod@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2722:
	.loc 1 8470 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8470, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2721:
	.loc 1 8473 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8474 0
	cmpl	$0, 12(%ebp)
	je	.L3602
	cmpl	$2, 20(%ebp)
	jne	.L3604
.L3602:
	.loc 1 8475 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3604:
	.loc 1 8476 0
	movl	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_fix@PLT
	.loc 1 8477 0
	movl	12(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2723:
	.loc 1 8480 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8481 0
	cmpl	$0, 12(%ebp)
	je	.L3605
	cmpl	$2, 20(%ebp)
	jne	.L3607
.L3605:
	.loc 1 8482 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3607:
	.loc 1 8485 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	jne	.L3608
	.loc 1 8486 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -516(%ebp)
.L3608:
	.loc 1 8488 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_float@PLT
	.loc 1 8490 0
	movl	12(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2724:
	.loc 1 8493 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8494 0
	cmpl	$2, 20(%ebp)
	jne	.L3610
	.loc 1 8495 0
	movl	$0, 12(%ebp)
.L3610:
	.loc 1 8496 0
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jne	.L3612
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3612
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L3612
	movl	optab_table@GOT(%ebx), %eax
	movl	132(%eax), %eax
	movl	%eax, -820(%ebp)
	jmp	.L3616
.L3612:
	movl	optab_table@GOT(%ebx), %eax
	movl	128(%eax), %eax
	movl	%eax, -820(%ebp)
.L3616:
	movl	$0, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-820(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_unop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8500 0
	cmpl	$0, -508(%ebp)
	jne	.L3617
	.loc 1 8501 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8501, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3617:
	.loc 1 8502 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2726:
	.loc 1 8505 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8506 0
	cmpl	$2, 20(%ebp)
	jne	.L3619
	.loc 1 8507 0
	movl	$0, 12(%ebp)
.L3619:
	.loc 1 8510 0
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$5, %eax
	je	.L3621
	movl	-500(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	jne	.L3623
.L3621:
	.loc 1 8512 0
	movl	-520(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_complex_abs@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3623:
	.loc 1 8516 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	je	.L3624
	.loc 1 8517 0
	movl	-516(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L3624:
	.loc 1 8519 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	movl	-520(%ebp), %edx
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_abs@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2725:
	.loc 1 8524 0
	movl	-484(%ebp), %eax
	movl	%eax, 12(%ebp)
	.loc 1 8525 0
	cmpl	$0, 12(%ebp)
	je	.L3626
	cmpl	$2, 20(%ebp)
	je	.L3626
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3626
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3630
	movl	12(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L3626
.L3630:
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	jne	.L3626
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3633
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3633
.L3626:
	.loc 1 8532 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3633:
	.loc 1 8533 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8534 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8539 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	je	.L3635
	cmpl	$80, -496(%ebp)
	jne	.L3637
	movl	optab_table@GOT(%ebx), %eax
	movl	112(%eax), %eax
	movl	%eax, -812(%ebp)
	jmp	.L3639
.L3637:
	movl	optab_table@GOT(%ebx), %eax
	movl	116(%eax), %eax
	movl	%eax, -812(%ebp)
.L3639:
	movl	-812(%ebp), %ecx
	movl	%ecx, -816(%ebp)
	jmp	.L3640
.L3635:
	cmpl	$80, -496(%ebp)
	jne	.L3641
	movl	optab_table@GOT(%ebx), %eax
	movl	104(%eax), %eax
	movl	%eax, -808(%ebp)
	jmp	.L3643
.L3641:
	movl	optab_table@GOT(%ebx), %eax
	movl	108(%eax), %eax
	movl	%eax, -808(%ebp)
.L3643:
	movl	-808(%ebp), %esi
	movl	%esi, -816(%ebp)
.L3640:
	movl	-816(%ebp), %edi
	movl	%edi, -492(%ebp)
	.loc 1 8543 0
	movl	-520(%ebp), %eax
	movl	$2, 24(%esp)
	movl	%eax, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-492(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8545 0
	cmpl	$0, -508(%ebp)
	je	.L3644
	.loc 1 8546 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3644:
	.loc 1 8551 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3646
	.loc 1 8552 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3646:
	.loc 1 8554 0
	movl	12(%ebp), %eax
	cmpl	-516(%ebp), %eax
	je	.L3648
	.loc 1 8555 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L3648:
	.loc 1 8557 0
	call	gen_label_rtx@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8561 0
	movl	-500(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L3650
	movl	$0, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$114, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L3650
	.loc 1 8564 0
	cmpl	$81, -496(%ebp)
	jne	.L3653
	.loc 1 8565 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 16(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater_rtx@PLT
	jmp	.L3656
.L3653:
	.loc 1 8568 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	$0, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater_rtx@PLT
	.loc 1 8561 0
	jmp	.L3656
.L3650:
.LBB136:
	.loc 1 8573 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -164(%ebp)
	.loc 1 8574 0
	cmpl	$81, -496(%ebp)
	jne	.L3657
	movl	$114, -804(%ebp)
	jmp	.L3659
.L3657:
	movl	$116, -804(%ebp)
.L3659:
	movl	-516(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	$0, 20(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-164(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-804(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_rtx_and_jump@PLT
.L3656:
.LBE136:
	.loc 1 8578 0
	movl	-512(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 8579 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 8580 0
	movl	12(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2732:
	.loc 1 8583 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8584 0
	cmpl	$2, 20(%ebp)
	jne	.L3660
	.loc 1 8585 0
	movl	$0, 12(%ebp)
.L3660:
	.loc 1 8586 0
	movl	optab_table@GOT(%ebx), %eax
	movl	144(%eax), %edx
	movl	$1, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_unop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8587 0
	cmpl	$0, -508(%ebp)
	jne	.L3662
	.loc 1 8588 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8588, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3662:
	.loc 1 8589 0
	movl	-508(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2727:
	.loc 1 8592 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8593 0
	cmpl	$2, 20(%ebp)
	jne	.L3664
	.loc 1 8594 0
	movl	$0, 12(%ebp)
.L3664:
	.loc 1 8595 0
	movl	optab_table@GOT(%ebx), %eax
	movl	148(%eax), %edx
	movl	$1, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_unop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8596 0
	cmpl	$0, -508(%ebp)
	jne	.L3666
	.loc 1 8597 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8597, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3666:
	.loc 1 8598 0
	movl	-508(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L2731:
	.loc 1 8615 0
	movl	optab_table@GOT(%ebx), %eax
	movl	72(%eax), %eax
	movl	%eax, -492(%ebp)
	.loc 1 8616 0
	jmp	.L3540
.L2729:
	.loc 1 8620 0
	movl	optab_table@GOT(%ebx), %eax
	movl	76(%eax), %eax
	movl	%eax, -492(%ebp)
	.loc 1 8621 0
	jmp	.L3540
.L2730:
	.loc 1 8625 0
	movl	optab_table@GOT(%ebx), %eax
	movl	80(%eax), %eax
	movl	%eax, -492(%ebp)
	.loc 1 8626 0
	jmp	.L3540
.L2728:
	.loc 1 8632 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3668
	.loc 1 8633 0
	movl	$0, -488(%ebp)
.L3668:
	.loc 1 8634 0
	cmpl	$2, 20(%ebp)
	jne	.L3670
	.loc 1 8635 0
	movl	$0, 12(%ebp)
.L3670:
	.loc 1 8636 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8637 0
	movl	-520(%ebp), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %ecx
	movl	%edx, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%ecx, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-496(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_shift@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2735:
	.loc 1 8655 0
	cmpl	$0, 16(%ebp)
	je	.L3672
	movl	16(%ebp), %eax
	movl	%eax, -800(%ebp)
	jmp	.L3674
.L3672:
	movl	-500(%ebp), %edx
	movl	%edx, -800(%ebp)
.L3674:
	cmpl	$2, 20(%ebp)
	je	.L3675
	movl	12(%ebp), %ecx
	movl	%ecx, -796(%ebp)
	jmp	.L3677
.L3675:
	movl	$0, -796(%ebp)
.L3677:
	movl	$0, 12(%esp)
	movl	-800(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	-796(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_store_flag
	movl	%eax, -508(%ebp)
	.loc 1 8658 0
	cmpl	$0, -508(%ebp)
	je	.L3678
	.loc 1 8659 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3678:
	.loc 1 8662 0
	cmpl	$104, -496(%ebp)
	jne	.L2733
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L2733
	cmpl	$0, -484(%ebp)
	je	.L2733
	movl	-484(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L2733
	movl	-484(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	cmpl	%eax, %edx
	jne	.L2733
	.loc 1 8668 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-484(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8672 0
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L3685
	.loc 1 8674 0
	movl	-508(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	je	.L3687
	.loc 1 8675 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	jmp	.L3689
.L3687:
	.loc 1 8677 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L3689:
	.loc 1 8679 0
	movl	12(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L3685:
	.loc 1 8682 0
	movl	-508(%ebp), %eax
	cmpl	-484(%ebp), %eax
	je	.L3690
.LBB137:
	.loc 1 8684 0
	movl	-508(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -160(%ebp)
	.loc 1 8685 0
	cmpl	$0, -160(%ebp)
	jne	.L3692
	.loc 1 8686 0
	cmpl	$0, 16(%ebp)
	je	.L3694
	movl	16(%ebp), %ecx
	movl	%ecx, -792(%ebp)
	jmp	.L3696
.L3694:
	movl	-500(%ebp), %esi
	movl	%esi, -792(%ebp)
.L3696:
	movl	-792(%ebp), %edi
	movl	%edi, -160(%ebp)
.L3692:
	.loc 1 8688 0
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -508(%ebp)
.L3690:
.LBE137:
	.loc 1 8691 0
	call	gen_label_rtx@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8692 0
	movl	-520(%ebp), %edx
	movl	-508(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %esi
	movl	-512(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	%edx, 20(%esp)
	movl	%ecx, 16(%esp)
	movl	$0, 12(%esp)
	movl	$113, 8(%esp)
	movl	%esi, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
	.loc 1 8694 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 8695 0
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 8696 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2733:
	.loc 1 8705 0
	cmpl	$0, -480(%ebp)
	jne	.L3697
	cmpl	$0, 12(%ebp)
	je	.L3699
	cmpl	$2, 20(%ebp)
	je	.L3699
	movl	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3699
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3697
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3697
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3697
.L3699:
	.loc 1 8713 0
	cmpl	$0, 16(%ebp)
	je	.L3705
	movl	16(%ebp), %edx
	movl	%edx, -788(%ebp)
	jmp	.L3707
.L3705:
	movl	-500(%ebp), %ecx
	movl	%ecx, -788(%ebp)
.L3707:
	movl	-788(%ebp), %esi
	movl	%esi, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3697:
	.loc 1 8715 0
	cmpl	$0, 12(%ebp)
	je	.L3708
	.loc 1 8716 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_clr_insn@PLT
.L3708:
	.loc 1 8718 0
	call	gen_label_rtx@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8719 0
	movl	-512(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	jumpifnot@PLT
	.loc 1 8721 0
	cmpl	$0, 12(%ebp)
	je	.L3710
	.loc 1 8722 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_0_to_1_insn@PLT
.L3710:
	.loc 1 8724 0
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 8725 0
	cmpl	$0, -480(%ebp)
	je	.L3712
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -784(%ebp)
	jmp	.L3714
.L3712:
	movl	12(%ebp), %edi
	movl	%edi, -784(%ebp)
.L3714:
	movl	-784(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2734:
	.loc 1 8728 0
	cmpl	$2, 20(%ebp)
	jne	.L3715
	.loc 1 8729 0
	movl	$0, 12(%ebp)
.L3715:
	.loc 1 8730 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8733 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	80(%eax), %ecx
	movl	$3, 24(%esp)
	movl	$1, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 8735 0
	cmpl	$0, -508(%ebp)
	jne	.L3717
	.loc 1 8736 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8736, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3717:
	.loc 1 8737 0
	movl	-508(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2704:
	.loc 1 8740 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 8741 0
	call	emit_queue@PLT
	.loc 1 8742 0
	cmpl	$0, -480(%ebp)
	je	.L3719
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -780(%ebp)
	jmp	.L3721
.L3719:
	movl	12(%ebp), %ecx
	movl	%ecx, -780(%ebp)
.L3721:
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	-780(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2708:
	.loc 1 8749 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	jne	.L3722
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	jne	.L3722
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L3722
.LBB138:
	.loc 1 8754 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -156(%ebp)
	.loc 1 8755 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -152(%ebp)
	.loc 1 8757 0
	movl	-156(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	jne	.L3726
	movl	-156(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	jne	.L3728
.L3726:
	movl	-152(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	jne	.L3729
	movl	-152(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	jne	.L3728
.L3729:
	movl	-156(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	jne	.L3731
	movl	-156(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	jne	.L3728
.L3731:
	movl	-152(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	jne	.L3722
	movl	-152(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3722
.L3728:
	.loc 1 8765 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-156(%ebp), %eax
	movl	4(%eax), %ecx
	movl	-152(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-156(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	$52, (%esp)
	call	build@PLT
	movl	%eax, 8(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$117, (%esp)
	call	build1@PLT
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3722:
.LBE138:
.LBB139:
	.loc 1 8781 0
	movl	$0, -148(%ebp)
	.loc 1 8782 0
	movl	$0, -144(%ebp)
	movl	$0, -140(%ebp)
	.loc 1 8786 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L3734
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L3734
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L3734
	.loc 1 8790 0
	cmpl	$0, -480(%ebp)
	je	.L3738
	.loc 1 8792 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$0, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	.loc 1 8794 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3738:
	.loc 1 8797 0
	cmpl	$2, 20(%ebp)
	jne	.L3740
	.loc 1 8798 0
	movl	$0, 12(%ebp)
.L3740:
	.loc 1 8799 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8800 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	jne	.L3742
	.loc 1 8801 0
	movl	-516(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L3742:
	.loc 1 8803 0
	cmpl	$0, 12(%ebp)
	jne	.L3744
	.loc 1 8804 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L3744:
	.loc 1 8805 0
	movl	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 8806 0
	movl	12(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3734:
	.loc 1 8815 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	jne	.L3746
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %edx
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3746
	.loc 1 8818 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, -148(%ebp)
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -144(%ebp)
	.loc 1 8815 0
	jmp	.L3749
.L3746:
	.loc 1 8819 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$50, %al
	jne	.L3750
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	20(%eax), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3750
	.loc 1 8822 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -148(%ebp)
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, -144(%ebp)
	.loc 1 8819 0
	jmp	.L3749
.L3750:
	.loc 1 8823 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	jne	.L3753
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	20(%eax), %edx
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3753
	.loc 1 8826 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, -148(%ebp)
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -140(%ebp)
	.loc 1 8823 0
	jmp	.L3749
.L3753:
	.loc 1 8827 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$49, %al
	jne	.L3749
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	20(%eax), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3749
	.loc 1 8830 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -148(%ebp)
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, -140(%ebp)
.L3749:
	.loc 1 8837 0
	cmpl	$0, -480(%ebp)
	je	.L3758
	.loc 1 8838 0
	movl	$0, -508(%ebp)
	jmp	.L3760
.L3758:
	.loc 1 8839 0
	cmpl	$2, 20(%ebp)
	jne	.L3761
	.loc 1 8840 0
	movl	$1, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -508(%ebp)
	jmp	.L3760
.L3761:
	.loc 1 8841 0
	cmpl	$0, -484(%ebp)
	je	.L3763
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-484(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L3765
	cmpl	$0, -148(%ebp)
	je	.L3763
	movl	-484(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3763
	movl	-484(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	jbe	.L3763
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	var_rtx
	cmpl	-484(%ebp), %eax
	jne	.L3763
.L3765:
	movl	-484(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-500(%ebp), %eax
	jne	.L3763
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	can_conditionally_move_p@PLT
	testl	%eax, %eax
	je	.L3771
	movl	-484(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3771
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3763
.L3771:
	movl	-484(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L3774
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3763
.L3774:
	.loc 1 8854 0
	movl	-484(%ebp), %eax
	movl	%eax, -508(%ebp)
	.loc 1 8841 0
	jmp	.L3760
.L3763:
	.loc 1 8855 0
	movl	-504(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3776
	.loc 1 8856 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$8856, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3776:
	.loc 1 8858 0
	movl	$1, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -508(%ebp)
.L3760:
	.loc 1 8864 0
	cmpl	$0, -508(%ebp)
	je	.L3778
	cmpl	$0, -148(%ebp)
	je	.L3778
	cmpl	$0, -144(%ebp)
	je	.L3778
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$60, %al
	je	.L3782
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$61, %al
	je	.L3782
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$88, %al
	je	.L3782
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$89, %al
	jne	.L3778
.L3782:
	movl	-144(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L3778
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L3778
.LBB140:
	.loc 1 8882 0
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$60, %al
	jne	.L3788
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3790
	movl	-144(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	jne	.L3790
	movl	optab_table@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -772(%ebp)
	jmp	.L3793
.L3790:
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -772(%ebp)
.L3793:
	movl	-772(%ebp), %edx
	movl	%edx, -776(%ebp)
	jmp	.L3794
.L3788:
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$61, %al
	jne	.L3795
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L3797
	movl	-144(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	jne	.L3797
	movl	optab_table@GOT(%ebx), %eax
	movl	12(%eax), %eax
	movl	%eax, -764(%ebp)
	jmp	.L3800
.L3797:
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, -764(%ebp)
.L3800:
	movl	-764(%ebp), %ecx
	movl	%ecx, -768(%ebp)
	jmp	.L3801
.L3795:
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$88, %al
	jne	.L3802
	movl	optab_table@GOT(%ebx), %eax
	movl	76(%eax), %eax
	movl	%eax, -760(%ebp)
	jmp	.L3804
.L3802:
	movl	optab_table@GOT(%ebx), %eax
	movl	80(%eax), %eax
	movl	%eax, -760(%ebp)
.L3804:
	movl	-760(%ebp), %esi
	movl	%esi, -768(%ebp)
.L3801:
	movl	-768(%ebp), %edi
	movl	%edi, -776(%ebp)
.L3794:
	movl	-776(%ebp), %eax
	movl	%eax, -128(%ebp)
	.loc 1 8885 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	cmpl	-148(%ebp), %eax
	jne	.L3805
	.loc 1 8886 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	invert_truthvalue@PLT
	movl	%eax, -132(%ebp)
	jmp	.L3807
.L3805:
	.loc 1 8888 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -132(%ebp)
.L3807:
	.loc 1 8890 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L3808
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$4, %eax
	je	.L3810
	movl	mips_tune@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$3, %eax
	je	.L3810
.L3808:
	movl	$1, -756(%ebp)
	jmp	.L3812
.L3810:
	movl	$0, -756(%ebp)
.L3812:
	movl	$1, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3813
	movl	-508(%ebp), %edx
	movl	%edx, -752(%ebp)
	jmp	.L3815
.L3813:
	movl	$0, -752(%ebp)
.L3815:
	movl	-756(%ebp), %ecx
	movl	%ecx, 12(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-752(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	do_store_flag
	movl	%eax, -136(%ebp)
	.loc 1 8894 0
	cmpl	$0, -136(%ebp)
	je	.L3816
	movl	-144(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	jne	.L3816
	.loc 1 8895 0
	movl	$1, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3819
	movl	-508(%ebp), %edi
	movl	%edi, -748(%ebp)
	jmp	.L3821
.L3819:
	movl	$0, -748(%ebp)
.L3821:
	movl	-144(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	tree_log2@PLT
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$0, 8(%esp)
	movl	$0, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	build_int_2_wide@PLT
	movl	$0, 20(%esp)
	movl	-748(%ebp), %edx
	movl	%edx, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$84, (%esp)
	call	expand_shift@PLT
	movl	%eax, -136(%ebp)
.L3816:
	.loc 1 8903 0
	cmpl	$0, -136(%ebp)
	je	.L3778
	.loc 1 8905 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 8906 0
	movl	-520(%ebp), %eax
	movl	$3, 24(%esp)
	movl	%eax, 20(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-136(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3778:
.LBE140:
	.loc 1 8911 0
	call	do_pending_stack_adjust@PLT
	.loc 1 8912 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	addl	$1, %eax
	movl	%eax, 4(%edx)
	.loc 1 8913 0
	call	gen_label_rtx@PLT
	movl	%eax, -516(%ebp)
	.loc 1 8915 0
	cmpl	$0, -148(%ebp)
	je	.L3823
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	jne	.L3823
	.loc 1 8917 0
	cmpl	$0, -508(%ebp)
	je	.L3826
	.loc 1 8923 0
	cmpl	$0, -144(%ebp)
	je	.L3828
	movl	-144(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3830
.L3828:
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3831
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3831
.L3830:
	.loc 1 8927 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -508(%ebp)
.L3831:
	.loc 1 8928 0
	cmpl	$2, 20(%ebp)
	jne	.L3833
	movl	$2, -744(%ebp)
	jmp	.L3835
.L3833:
	movl	$0, -744(%ebp)
.L3835:
	movl	-744(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	jmp	.L3836
.L3826:
	.loc 1 8932 0
	cmpl	$0, -480(%ebp)
	je	.L3837
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -740(%ebp)
	jmp	.L3839
.L3837:
	movl	$0, -740(%ebp)
.L3839:
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-740(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
.L3836:
	.loc 1 8934 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	cmpl	-148(%ebp), %eax
	jne	.L3840
	.loc 1 8935 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	jumpif@PLT
	jmp	.L3842
.L3840:
	.loc 1 8937 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	jumpifnot@PLT
.L3842:
	.loc 1 8939 0
	call	start_cleanup_deferral@PLT
	.loc 1 8940 0
	cmpl	$0, -144(%ebp)
	je	.L3843
	cmpl	$0, -508(%ebp)
	jne	.L3843
	.loc 1 8942 0
	cmpl	$0, -480(%ebp)
	je	.L3846
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -736(%ebp)
	jmp	.L3848
.L3846:
	movl	$0, -736(%ebp)
.L3848:
	movl	-144(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-736(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 8940 0
	jmp	.L3849
.L3843:
	.loc 1 8944 0
	cmpl	$0, -144(%ebp)
	je	.L3850
	.loc 1 8945 0
	cmpl	$2, 20(%ebp)
	jne	.L3852
	movl	$2, -732(%ebp)
	jmp	.L3854
.L3852:
	movl	$0, -732(%ebp)
.L3854:
	movl	-144(%ebp), %eax
	movl	24(%eax), %esi
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	make_tree@PLT
	movl	%eax, %edx
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %ecx
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	build@PLT
	movl	%eax, %edx
	movl	-732(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	jmp	.L3849
.L3850:
	.loc 1 8950 0
	cmpl	$2, 20(%ebp)
	jne	.L3855
	movl	$2, -728(%ebp)
	jmp	.L3857
.L3855:
	movl	$0, -728(%ebp)
.L3857:
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	make_tree@PLT
	movl	%eax, %edx
	movl	-140(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %ecx
	movl	%edx, 8(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	build1@PLT
	movl	%eax, %edx
	movl	-728(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
.L3849:
	.loc 1 8953 0
	movl	-516(%ebp), %eax
	movl	%eax, -512(%ebp)
	.loc 1 8915 0
	jmp	.L3858
.L3823:
	.loc 1 8959 0
	cmpl	$0, -508(%ebp)
	je	.L3859
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L3859
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L3859
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3859
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L3864
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$120, %al
	jne	.L3859
.L3864:
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3859
	.loc 1 8968 0
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3867
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3867
	.loc 1 8970 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -508(%ebp)
.L3867:
	.loc 1 8971 0
	cmpl	$2, 20(%ebp)
	jne	.L3870
	movl	$2, -724(%ebp)
	jmp	.L3872
.L3870:
	movl	$0, -724(%ebp)
.L3872:
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	-724(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	.loc 1 8973 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	jumpif@PLT
	.loc 1 8975 0
	call	start_cleanup_deferral@PLT
	.loc 1 8976 0
	cmpl	$2, 20(%ebp)
	jne	.L3873
	movl	$2, -720(%ebp)
	jmp	.L3875
.L3873:
	movl	$0, -720(%ebp)
.L3875:
	movl	8(%ebp), %eax
	movl	28(%eax), %edx
	movl	-720(%ebp), %edi
	movl	%edi, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	.loc 1 8978 0
	movl	-516(%ebp), %eax
	movl	%eax, -512(%ebp)
	.loc 1 8959 0
	jmp	.L3858
.L3859:
	.loc 1 8980 0
	cmpl	$0, -508(%ebp)
	je	.L3876
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$60, %al
	jne	.L3876
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L3876
	movl	8(%ebp), %eax
	movl	28(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	operand_equal_p@PLT
	testl	%eax, %eax
	je	.L3876
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$1, %eax
	testb	%al, %al
	je	.L3881
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$120, %al
	jne	.L3876
.L3881:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	je	.L3876
	.loc 1 8989 0
	movl	-508(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L3884
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	$175, %eax
	ja	.L3884
	.loc 1 8991 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -508(%ebp)
.L3884:
	.loc 1 8992 0
	cmpl	$2, 20(%ebp)
	jne	.L3887
	movl	$2, -716(%ebp)
	jmp	.L3889
.L3887:
	movl	$0, -716(%ebp)
.L3889:
	movl	8(%ebp), %eax
	movl	28(%eax), %edx
	movl	-716(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	.loc 1 8994 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	jumpifnot@PLT
	.loc 1 8996 0
	call	start_cleanup_deferral@PLT
	.loc 1 8997 0
	cmpl	$2, 20(%ebp)
	jne	.L3890
	movl	$2, -712(%ebp)
	jmp	.L3892
.L3890:
	movl	$0, -712(%ebp)
.L3892:
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	-712(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	.loc 1 8999 0
	movl	-516(%ebp), %eax
	movl	%eax, -512(%ebp)
	.loc 1 8980 0
	jmp	.L3858
.L3876:
	.loc 1 9003 0
	call	gen_label_rtx@PLT
	movl	%eax, -512(%ebp)
	.loc 1 9004 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	jumpifnot@PLT
	.loc 1 9006 0
	call	start_cleanup_deferral@PLT
	.loc 1 9010 0
	cmpl	$0, -508(%ebp)
	je	.L3893
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	4(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	108(%eax), %eax
	cmpl	%eax, %edx
	je	.L3893
	.loc 1 9012 0
	cmpl	$2, 20(%ebp)
	jne	.L3896
	movl	$2, -708(%ebp)
	jmp	.L3898
.L3896:
	movl	$0, -708(%ebp)
.L3898:
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	-708(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	.loc 1 9010 0
	jmp	.L3899
.L3893:
	.loc 1 9015 0
	cmpl	$0, -480(%ebp)
	je	.L3900
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -704(%ebp)
	jmp	.L3902
.L3900:
	movl	$0, -704(%ebp)
.L3902:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-704(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
.L3899:
	.loc 1 9017 0
	call	end_cleanup_deferral@PLT
	.loc 1 9018 0
	call	emit_queue@PLT
	.loc 1 9019 0
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_jump@PLT
	movl	%eax, (%esp)
	call	emit_jump_insn@PLT
	.loc 1 9020 0
	call	emit_barrier@PLT
	.loc 1 9021 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 9022 0
	call	start_cleanup_deferral@PLT
	.loc 1 9023 0
	cmpl	$0, -508(%ebp)
	je	.L3903
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	4(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	108(%eax), %eax
	cmpl	%eax, %edx
	je	.L3903
	.loc 1 9025 0
	cmpl	$2, 20(%ebp)
	jne	.L3906
	movl	$2, -700(%ebp)
	jmp	.L3908
.L3906:
	movl	$0, -700(%ebp)
.L3908:
	movl	8(%ebp), %eax
	movl	28(%eax), %edx
	movl	-700(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	store_expr@PLT
	.loc 1 9023 0
	jmp	.L3858
.L3903:
	.loc 1 9028 0
	cmpl	$0, -480(%ebp)
	je	.L3909
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -696(%ebp)
	jmp	.L3911
.L3909:
	movl	$0, -696(%ebp)
.L3911:
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-696(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
.L3858:
	.loc 1 9032 0
	call	end_cleanup_deferral@PLT
	.loc 1 9034 0
	call	emit_queue@PLT
	.loc 1 9035 0
	movl	-512(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 9036 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	subl	$1, %eax
	movl	%eax, 4(%edx)
	.loc 1 9038 0
	movl	-508(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2707:
.LBE139:
.LBB141:
	.loc 1 9052 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -124(%ebp)
	.loc 1 9053 0
	movl	$0, -120(%ebp)
	.loc 1 9056 0
	movl	-124(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$35, %al
	je	.L3912
	.loc 1 9057 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9057, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L3912:
	.loc 1 9059 0
	cmpl	$0, -480(%ebp)
	jne	.L3914
	.loc 1 9060 0
	movl	-484(%ebp), %eax
	movl	%eax, 12(%ebp)
.L3914:
	.loc 1 9065 0
	movl	-124(%ebp), %eax
	movzbl	10(%eax), %edx
	orl	$1, %edx
	movb	%dl, 10(%eax)
	.loc 1 9067 0
	cmpl	$0, 12(%ebp)
	jne	.L3916
	.loc 1 9069 0
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L3918
	.loc 1 9071 0
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L3920
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -692(%ebp)
	jmp	.L3922
.L3920:
	movl	$0, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -692(%ebp)
.L3922:
	movl	-692(%ebp), %esi
	movl	%esi, 12(%ebp)
	.loc 1 9074 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	jne	.L3930
	.loc 1 9075 0
	movl	12(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L3918:
	.loc 1 9079 0
	movl	$1, 12(%esp)
	movl	$0, 8(%esp)
	movl	$2, 4(%esp)
	movl	-504(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, 12(%ebp)
	.loc 1 9081 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 9082 0
	movl	-124(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, 88(%edx)
	.loc 1 9083 0
	movl	-124(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3926
	.loc 1 9084 0
	movl	$0, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	put_var_into_stack@PLT
.L3926:
	.loc 1 9093 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	testl	%eax, %eax
	jne	.L3928
	.loc 1 9094 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	84(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 28(%eax)
.L3928:
	.loc 1 9096 0
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, -120(%ebp)
	jmp	.L3930
.L3916:
	.loc 1 9109 0
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L3931
	.loc 1 9111 0
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	testl	%eax, %eax
	je	.L3933
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -688(%ebp)
	jmp	.L3935
.L3933:
	movl	$0, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	make_decl_rtl@PLT
	movl	-124(%ebp), %eax
	movl	88(%eax), %eax
	movl	%eax, -688(%ebp)
.L3935:
	movl	-688(%ebp), %eax
	movl	%eax, 12(%ebp)
	.loc 1 9114 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	testl	%eax, %eax
	jne	.L3930
	.loc 1 9115 0
	movl	12(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L3931:
	.loc 1 9119 0
	movl	-124(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, 88(%edx)
	.loc 1 9122 0
	movl	-124(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L3930
	.loc 1 9123 0
	movl	$1, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	put_var_into_stack@PLT
.L3930:
	.loc 1 9127 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, 32(%eax)
	movl	8(%ebp), %eax
	movl	32(%eax), %eax
	movl	%eax, -116(%ebp)
	.loc 1 9129 0
	movl	8(%ebp), %eax
	movl	$0, 24(%eax)
	.loc 1 9131 0
	cmpl	$2, 20(%ebp)
	jne	.L3939
	movl	$2, -684(%ebp)
	jmp	.L3941
.L3939:
	movl	$0, -684(%ebp)
.L3941:
	movl	-684(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	store_expr@PLT
	.loc 1 9133 0
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	shrb	$2, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_decl_cleanup_eh@PLT
	.loc 1 9135 0
	movl	12(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2706:
.LBE141:
.LBB142:
	.loc 1 9140 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -112(%ebp)
	.loc 1 9141 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -108(%ebp)
	.loc 1 9143 0
	cmpl	$0, -484(%ebp)
	setne	%al
	movzbl	%al, %edx
	cmpl	$0, -480(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_assignment@PLT
	movl	%eax, -508(%ebp)
	.loc 1 9144 0
	movl	-508(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L2705:
.LBE142:
.LBB143:
	.loc 1 9157 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -104(%ebp)
	.loc 1 9158 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -100(%ebp)
	.loc 1 9160 0
	movl	$0, -508(%ebp)
	.loc 1 9170 0
	cmpl	$0, -480(%ebp)
	je	.L3942
	movl	-104(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	jne	.L3942
	movl	-100(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$88, %al
	je	.L3945
	movl	-100(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$90, %al
	jne	.L3942
.L3945:
	movl	-100(%ebp), %eax
	movl	20(%eax), %eax
	cmpl	-104(%ebp), %eax
	jne	.L3942
	movl	-100(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	jne	.L3942
	movl	-104(%ebp), %eax
	movl	24(%eax), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L3942
	movl	-100(%ebp), %eax
	movl	24(%eax), %eax
	movl	24(%eax), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L3942
.LBB144:
	.loc 1 9179 0
	call	gen_label_rtx@PLT
	movl	%eax, -96(%ebp)
	.loc 1 9181 0
	movl	-100(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$90, %al
	jne	.L3951
	movl	-96(%ebp), %eax
	movl	%eax, -680(%ebp)
	jmp	.L3953
.L3951:
	movl	$0, -680(%ebp)
.L3953:
	movl	-100(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$88, %al
	jne	.L3954
	movl	-96(%ebp), %edx
	movl	%edx, -676(%ebp)
	jmp	.L3956
.L3954:
	movl	$0, -676(%ebp)
.L3956:
	movl	-100(%ebp), %eax
	movl	24(%eax), %eax
	movl	-680(%ebp), %ecx
	movl	%ecx, 8(%esp)
	movl	-676(%ebp), %esi
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	do_jump@PLT
	.loc 1 9184 0
	movl	-100(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$88, %al
	jne	.L3957
	movl	global_trees@GOT(%ebx), %eax
	movl	48(%eax), %eax
	movl	%eax, -672(%ebp)
	jmp	.L3959
.L3957:
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -672(%ebp)
.L3959:
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	-672(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	%eax, (%esp)
	call	convert@PLT
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_assignment@PLT
	.loc 1 9189 0
	call	do_pending_stack_adjust@PLT
	.loc 1 9190 0
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 9191 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3942:
.LBE144:
	.loc 1 9194 0
	cmpl	$0, -484(%ebp)
	setne	%al
	movzbl	%al, %edx
	cmpl	$0, -480(%ebp)
	sete	%al
	movzbl	%al, %eax
	movl	%edx, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_assignment@PLT
	movl	%eax, -508(%ebp)
	.loc 1 9196 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2756:
.LBE143:
	.loc 1 9200 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	testl	%eax, %eax
	jne	.L3960
	.loc 1 9201 0
	call	expand_null_return@PLT
	jmp	.L3962
.L3960:
	.loc 1 9203 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	expand_return@PLT
.L3962:
	.loc 1 9204 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2749:
	.loc 1 9208 0
	movl	-480(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_increment
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2750:
	.loc 1 9213 0
	cmpl	$0, -480(%ebp)
	sete	%al
	movzbl	%al, %edx
	movl	-480(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_increment
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2742:
	.loc 1 9216 0
	cmpl	$2, 20(%ebp)
	jne	.L3963
	.loc 1 9217 0
	movl	$0, 12(%ebp)
.L3963:
	.loc 1 9219 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$31, %al
	jne	.L3965
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	decl_function_context@PLT
	testl	%eax, %eax
	je	.L3965
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L3965
	movl	8(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	jne	.L3965
	.loc 1 9224 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	trampoline_address@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9225 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	force_operand@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9219 0
	jmp	.L3970
.L3965:
	.loc 1 9229 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3971
	.loc 1 9230 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3971:
	.loc 1 9234 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L3973
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$47, %al
	je	.L3975
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %edx
	movl	tree_code_type@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$99, %al
	jne	.L3973
.L3975:
	.loc 1 9238 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	output_constant_def@PLT
	movl	4(%eax), %eax
	movl	%eax, -516(%ebp)
	.loc 1 9234 0
	jmp	.L3970
.L3973:
	.loc 1 9243 0
	cmpl	$5, 20(%ebp)
	jne	.L3977
	movl	$5, -668(%ebp)
	jmp	.L3979
.L3977:
	movl	$4, -668(%ebp)
.L3979:
	cmpl	$0, -480(%ebp)
	je	.L3980
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -664(%ebp)
	jmp	.L3982
.L3980:
	movl	$0, -664(%ebp)
.L3982:
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	-668(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	$0, 8(%esp)
	movl	-664(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9251 0
	cmpl	$0, -480(%ebp)
	je	.L3983
	.loc 1 9252 0
	movl	-516(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L3983:
	.loc 1 9256 0
	movl	$1, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9262 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$78, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$68, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$144, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$66, %ax
	je	.L3985
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$150, %ax
	jne	.L3993
.L3985:
	.loc 1 9263 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	force_const_mem@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9262 0
	jmp	.L3994
.L3993:
	.loc 1 9265 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L3995
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L3995
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	je	.L3995
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$80, %ax
	je	.L3995
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L3994
.L3995:
	.loc 1 9271 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$120, %al
	jne	.L4000
	.loc 1 9273 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	put_var_into_stack@PLT
	.loc 1 9275 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	addl	$20, %eax
	addl	$8, %eax
	movl	(%eax), %eax
	movl	%eax, -516(%ebp)
	jmp	.L3994
.L4000:
.LBB145:
	.loc 1 9280 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 9281 0
	movl	$1, 12(%esp)
	movl	$1, 8(%esp)
	movl	$1, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	assign_temp@PLT
	movl	%eax, -88(%ebp)
	.loc 1 9283 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$49, %ax
	jne	.L4002
	.loc 1 9287 0
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_group_store@PLT
	jmp	.L4004
.L4002:
	.loc 1 9290 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L4004:
	.loc 1 9292 0
	movl	-88(%ebp), %eax
	movl	%eax, -516(%ebp)
.L3994:
.LBE145:
	.loc 1 9296 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	je	.L4005
	.loc 1 9297 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9297, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4005:
	.loc 1 9299 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	mark_temp_addr_taken@PLT
	.loc 1 9300 0
	cmpl	$3, 20(%ebp)
	je	.L4007
	cmpl	$5, 20(%ebp)
	jne	.L4009
.L4007:
	.loc 1 9302 0
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -516(%ebp)
	.loc 1 9308 0
	movl	-516(%ebp), %edi
	movl	%edi, -1284(%ebp)
	jmp	.L2638
.L4009:
	.loc 1 9321 0
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	jne	.L4010
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, -660(%ebp)
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L4012
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -656(%ebp)
	jmp	.L4014
.L4012:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L4015
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -652(%ebp)
	jmp	.L4017
.L4015:
	movl	$8, -652(%ebp)
.L4017:
	movl	-652(%ebp), %eax
	movl	%eax, -656(%ebp)
.L4014:
	movl	-656(%ebp), %edx
	cmpl	%edx, -660(%ebp)
	jbe	.L4010
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L4019
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -648(%ebp)
	jmp	.L4021
.L4019:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L4022
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	get_mode_alignment@PLT
	movl	%eax, -644(%ebp)
	jmp	.L4024
.L4022:
	movl	$8, -644(%ebp)
.L4024:
	movl	-644(%ebp), %ecx
	movl	%ecx, -648(%ebp)
.L4021:
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L4025
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L4027
.L4025:
	movl	$128, -640(%ebp)
	jmp	.L4028
.L4027:
	movl	$64, -640(%ebp)
.L4028:
	movl	-640(%ebp), %esi
	cmpl	%esi, -648(%ebp)
	jae	.L4010
.LBB146:
	.loc 1 9326 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
	.loc 1 9329 0
	movl	-84(%ebp), %eax
	movzbl	10(%eax), %eax
	andl	$2, %eax
	testb	%al, %al
	je	.L4030
	.loc 1 9330 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9330, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4030:
	.loc 1 9332 0
	movl	-84(%ebp), %eax
	movzbl	9(%eax), %eax
	andl	$4, %eax
	testb	%al, %al
	je	.L4032
	.loc 1 9335 0
	leal	.LC7@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	error@PLT
	.loc 1 9336 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L4032:
	.loc 1 9339 0
	movl	-84(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$4, %al
	andl	$1, %eax
	movzbl	%al, %edx
	movl	-84(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$3, %al
	andl	$1, %eax
	movzbl	%al, %eax
	addl	%eax, %eax
	orl	%eax, %edx
	movl	-84(%ebp), %eax
	movzbl	38(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	sall	$2, %eax
	movl	%edx, %edi
	orl	%eax, %edi
	movl	%edi, -636(%ebp)
	movl	-84(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$21, %al
	jne	.L4034
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L4034
	movl	$1, -632(%ebp)
	jmp	.L4037
.L4034:
	movl	$0, -632(%ebp)
.L4037:
	movl	-632(%ebp), %eax
	sall	$3, %eax
	orl	-636(%ebp), %eax
	orl	$1, %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	build_qualified_type@PLT
	movl	%eax, -628(%ebp)
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L4038
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	16(%eax), %eax
	testl	%eax, %eax
	setne	-613(%ebp)
	jmp	.L4040
.L4038:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L4041
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	testl	%eax, %eax
	je	.L4041
	movl	$1, -612(%ebp)
	jmp	.L4044
.L4041:
	movl	$0, -612(%ebp)
.L4044:
	movzbl	-612(%ebp), %eax
	movb	%al, -613(%ebp)
.L4040:
	cmpb	$0, -613(%ebp)
	je	.L4045
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L4047
	movl	-516(%ebp), %eax
	movl	12(%eax), %eax
	movl	16(%eax), %eax
	movl	%eax, -608(%ebp)
	jmp	.L4049
.L4047:
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	cmpb	$52, %al
	je	.L4050
	movl	-516(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -604(%ebp)
	jmp	.L4052
.L4050:
	movl	$0, -604(%ebp)
.L4052:
	movl	-604(%ebp), %edx
	movl	%edx, -608(%ebp)
.L4049:
	movl	-608(%ebp), %edi
	movl	4(%edi), %esi
	movl	8(%edi), %edi
	movl	%esi, -624(%ebp)
	movl	%edi, -620(%ebp)
	jmp	.L4053
.L4045:
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	int_size_in_bytes@PLT
	movl	%eax, -624(%ebp)
	movl	%edx, -620(%ebp)
.L4053:
	movl	-84(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	-628(%ebp), %edx
	movl	%edx, 16(%esp)
	movl	$1, 12(%esp)
	movl	-624(%ebp), %esi
	movl	-620(%ebp), %edi
	movl	%esi, 4(%esp)
	movl	%edi, 8(%esp)
	movl	%eax, (%esp)
	call	assign_stack_temp_for_type@PLT
	movl	%eax, -80(%ebp)
	.loc 1 9347 0
	cmpl	$2, 20(%ebp)
	jne	.L4054
	movl	$2, -600(%ebp)
	jmp	.L4056
.L4054:
	movl	$0, -600(%ebp)
.L4056:
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	-600(%ebp), %edi
	movl	%edi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_block_move@PLT
	.loc 1 9351 0
	movl	-80(%ebp), %eax
	movl	%eax, -516(%ebp)
.L4010:
.LBE146:
	.loc 1 9354 0
	movl	-516(%ebp), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	force_operand@PLT
	movl	%eax, -516(%ebp)
.L3970:
	.loc 1 9357 0
	movl	flag_force_addr@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4057
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	je	.L4057
	cmpl	$4, 20(%ebp)
	je	.L4057
	cmpl	$5, 20(%ebp)
	je	.L4057
	cmpl	$3, 20(%ebp)
	je	.L4057
	.loc 1 9362 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4063
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4063
	movl	$5, -596(%ebp)
	jmp	.L4066
.L4063:
	movl	$4, -596(%ebp)
.L4066:
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-596(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -516(%ebp)
.L4057:
	.loc 1 9364 0
	movl	-516(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4067
	movl	-516(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	jne	.L4067
	.loc 1 9366 0
	movl	-504(%ebp), %eax
	movl	4(%eax), %eax
	movl	44(%eax), %eax
	movl	%eax, 4(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	mark_reg_pointer@PLT
.L4067:
	.loc 1 9374 0
	movl	-516(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2743:
	.loc 1 9377 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9377, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2745:
.LBB147:
	.loc 1 9382 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -76(%ebp)
	.loc 1 9386 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9387 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
	.loc 1 9389 0
	cmpl	$0, 12(%ebp)
	jne	.L4070
	.loc 1 9390 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L4070:
	.loc 1 9392 0
	call	start_sequence@PLT
	.loc 1 9395 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%eax, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_move_insn@PLT
	.loc 1 9396 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, %edx
	movl	-512(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	emit_move_insn@PLT
	.loc 1 9398 0
	call	get_insns@PLT
	movl	%eax, -72(%ebp)
	.loc 1 9399 0
	call	end_sequence@PLT
	.loc 1 9405 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	je	.L4072
	.loc 1 9406 0
	movl	$0, 16(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_no_conflict_block@PLT
	jmp	.L4074
.L4072:
	.loc 1 9408 0
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L4074:
	.loc 1 9410 0
	movl	12(%ebp), %ecx
	movl	%ecx, -1284(%ebp)
	jmp	.L2638
.L2747:
.LBE147:
	.loc 1 9414 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9415 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2748:
	.loc 1 9418 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9419 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2746:
.LBB148:
	.loc 1 9423 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -68(%ebp)
	.loc 1 9427 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9429 0
	cmpl	$0, 12(%ebp)
	jne	.L4075
	.loc 1 9430 0
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L4075:
	.loc 1 9432 0
	call	start_sequence@PLT
	.loc 1 9435 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%eax, %esi
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_realpart@PLT
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 9438 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, -64(%ebp)
	.loc 1 9439 0
	movl	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_imagpart@PLT
	movl	%eax, -592(%ebp)
	movl	-520(%ebp), %eax
	testl	%eax, %eax
	jne	.L4077
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4077
	movl	-68(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$1, %eax
	jne	.L4077
	movl	optab_table@GOT(%ebx), %eax
	movl	132(%eax), %eax
	movl	%eax, -588(%ebp)
	jmp	.L4081
.L4077:
	movl	optab_table@GOT(%ebx), %eax
	movl	128(%eax), %eax
	movl	%eax, -588(%ebp)
.L4081:
	movl	$0, 16(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-592(%ebp), %esi
	movl	%esi, 8(%esp)
	movl	-588(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_unop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 9444 0
	movl	-508(%ebp), %eax
	cmpl	-64(%ebp), %eax
	je	.L4082
	.loc 1 9445 0
	movl	-508(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L4082:
	.loc 1 9447 0
	call	get_insns@PLT
	movl	%eax, -60(%ebp)
	.loc 1 9448 0
	call	end_sequence@PLT
	.loc 1 9454 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$75, %ax
	je	.L4084
	.loc 1 9455 0
	movl	$0, 16(%esp)
	movl	$0, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_no_conflict_block@PLT
	jmp	.L4086
.L4084:
	.loc 1 9457 0
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
.L4086:
	.loc 1 9459 0
	movl	12(%ebp), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2752:
.LBE148:
.LBB149:
	.loc 1 9464 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -56(%ebp)
	.loc 1 9466 0
	call	expand_eh_region_start@PLT
	.loc 1 9468 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9470 0
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_eh_region_end_cleanup@PLT
	.loc 1 9472 0
	movl	-516(%ebp), %edx
	movl	%edx, -1284(%ebp)
	jmp	.L2638
.L2753:
.LBE149:
.LBB150:
	.loc 1 9477 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -52(%ebp)
	.loc 1 9478 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 9480 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4087
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	unsafe_for_reeval@PLT
	cmpl	$1, %eax
	jle	.L4089
.L4087:
.LBB151:
	.loc 1 9493 0
	call	gen_label_rtx@PLT
	movl	%eax, -44(%ebp)
	.loc 1 9494 0
	call	gen_label_rtx@PLT
	movl	%eax, -40(%ebp)
	.loc 1 9495 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4090
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4090
	movl	$5, -584(%ebp)
	jmp	.L4093
.L4090:
	movl	$4, -584(%ebp)
.L4093:
	movl	-584(%ebp), %ecx
	movl	%ecx, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -36(%ebp)
	.loc 1 9497 0
	movl	-36(%ebp), %edx
	movl	-44(%ebp), %ecx
	movl	global_trees@GOT(%ebx), %eax
	movl	108(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$138, (%esp)
	call	build@PLT
	movl	%eax, -32(%ebp)
	.loc 1 9498 0
	movl	-32(%ebp), %edx
	movzbl	9(%edx), %eax
	orl	$1, %eax
	movb	%al, 9(%edx)
	.loc 1 9502 0
	movl	$0, 4(%esp)
	movl	$2, (%esp)
	call	expand_start_bindings_and_block@PLT
	.loc 1 9503 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	232(%eax), %eax
	movl	%eax, 240(%edx)
	.loc 1 9505 0
	movl	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_decl_cleanup@PLT
	.loc 1 9506 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9508 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 9509 0
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	$0, (%esp)
	call	expand_end_bindings@PLT
	.loc 1 9510 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 9511 0
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 9512 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 9513 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_indirect_jump@PLT
	.loc 1 9514 0
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 9480 0
	jmp	.L4094
.L4089:
.LBE151:
	.loc 1 9518 0
	movl	$0, 4(%esp)
	movl	$2, (%esp)
	call	expand_start_bindings_and_block@PLT
	.loc 1 9519 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	232(%eax), %eax
	movl	%eax, 240(%edx)
	.loc 1 9521 0
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$0, (%esp)
	call	expand_decl_cleanup@PLT
	.loc 1 9522 0
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9524 0
	movl	-516(%ebp), %eax
	movl	%eax, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 9525 0
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	$0, (%esp)
	call	expand_end_bindings@PLT
.L4094:
	.loc 1 9528 0
	movl	-516(%ebp), %esi
	movl	%esi, -1284(%ebp)
	jmp	.L2638
.L2754:
.LBE150:
.LBB152:
	.loc 1 9533 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 9534 0
	movl	8(%ebp), %eax
	addl	$20, %eax
	addl	$4, %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 9535 0
	call	gen_label_rtx@PLT
	movl	%eax, -20(%ebp)
	.loc 1 9536 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4095
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4095
	movl	$5, -580(%ebp)
	jmp	.L4098
.L4095:
	movl	$4, -580(%ebp)
.L4098:
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-580(%ebp), %edi
	movl	%edi, 4(%esp)
	movl	$77, (%esp)
	call	gen_rtx_fmt_u00@PLT
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 9538 0
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 9539 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 9540 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2751:
.LBE152:
	.loc 1 9544 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_builtin_va_arg@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2762:
	.loc 1 9547 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	get_exception_pointer@PLT
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L2744:
	.loc 1 9552 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9552, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L2688:
	.loc 1 9555 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	44(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-484(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, -1284(%ebp)
	jmp	.L2638
.L3540:
	.loc 1 9561 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L4099
	.loc 1 9562 0
	movl	$0, -488(%ebp)
.L4099:
	.loc 1 9563 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-488(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	expand_expr@PLT
	movl	%eax, -516(%ebp)
	.loc 1 9564 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -512(%ebp)
.L3471:
	.loc 1 9566 0
	cmpl	$2, 20(%ebp)
	jne	.L4101
	.loc 1 9567 0
	movl	$0, 12(%ebp)
.L4101:
	.loc 1 9568 0
	movl	-520(%ebp), %eax
	movl	$3, 24(%esp)
	movl	%eax, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-512(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-492(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -508(%ebp)
	.loc 1 9570 0
	cmpl	$0, -508(%ebp)
	jne	.L4103
	.loc 1 9571 0
	leal	__FUNCTION__.22338@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$9571, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4103:
	.loc 1 9572 0
	movl	-508(%ebp), %eax
	movl	%eax, -1284(%ebp)
.L2638:
	movl	-1284(%ebp), %eax
	.loc 1 9573 0
	addl	$1340, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE78:
	.size	expand_expr, .-expand_expr
	.type	is_aligning_offset, @function
is_aligning_offset:
.LFB79:
	.loc 1 9583 0
	pushl	%ebp
.LCFI303:
	movl	%esp, %ebp
.LCFI304:
	pushl	%ebx
.LCFI305:
	subl	$36, %esp
.LCFI306:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9585 0
	jmp	.L4108
.L4109:
	.loc 1 9589 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L4108:
	.loc 1 9585 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	je	.L4109
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4109
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4109
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$59, %al
	je	.L4109
	.loc 1 9593 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$90, %al
	jne	.L4114
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	host_integerp@PLT
	testl	%eax, %eax
	je	.L4114
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$1, %eax
	je	.L4117
	movl	mips_abi@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	$2, %eax
	jne	.L4119
.L4117:
	movl	$128, -24(%ebp)
	movl	$0, -20(%ebp)
	jmp	.L4120
.L4119:
	movl	$64, -24(%ebp)
	movl	$0, -20(%ebp)
.L4120:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	-24(%ebp), %edx
	movl	-20(%ebp), %ecx
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	jle	.L4114
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$1, 4(%esp)
	movl	%eax, (%esp)
	call	tree_low_cst@PLT
	addl	$1, %eax
	adcl	$0, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	exact_log2_wide@PLT
	.loc 1 9601 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
	.loc 1 9602 0
	jmp	.L4122
.L4114:
	.loc 1 9597 0
	movl	$0, -16(%ebp)
	jmp	.L4123
.L4124:
	.loc 1 9605 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L4122:
	.loc 1 9602 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	je	.L4124
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4124
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4124
	.loc 1 9607 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$79, %al
	je	.L4128
	.loc 1 9608 0
	movl	$0, -16(%ebp)
	jmp	.L4123
.L4128:
	.loc 1 9610 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
	.loc 1 9611 0
	jmp	.L4130
.L4131:
	.loc 1 9614 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L4130:
	.loc 1 9611 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	je	.L4131
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4131
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4131
	.loc 1 9618 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$123, %al
	jne	.L4135
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	cmpl	12(%ebp), %eax
	je	.L4137
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$58, %al
	jne	.L4135
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	jne	.L4135
.L4137:
	movl	$1, -12(%ebp)
	jmp	.L4140
.L4135:
	movl	$0, -12(%ebp)
.L4140:
	movl	-12(%ebp), %ecx
	movl	%ecx, -16(%ebp)
.L4123:
	movl	-16(%ebp), %eax
	.loc 1 9623 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE79:
	.size	is_aligning_offset, .-is_aligning_offset
.globl string_constant
	.type	string_constant, @function
string_constant:
.LFB80:
	.loc 1 9634 0
	pushl	%ebp
.LCFI307:
	movl	%esp, %ebp
.LCFI308:
	pushl	%ebx
.LCFI309:
	subl	$36, %esp
.LCFI310:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9635 0
	jmp	.L4143
.L4144:
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L4143:
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4145
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4145
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	jne	.L4148
.L4145:
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L4148
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	je	.L4144
.L4148:
	.loc 1 9637 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$123, %al
	jne	.L4150
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L4150
	.loc 1 9640 0
	movl	global_trees@GOT(%ebx), %eax
	movl	60(%eax), %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 9641 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L4153
.L4150:
	.loc 1 9643 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$60, %al
	jne	.L4154
.LBB153:
	.loc 1 9645 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 9646 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -8(%ebp)
	.loc 1 9648 0
	jmp	.L4156
.L4157:
	movl	-12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -12(%ebp)
.L4156:
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4158
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4158
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	jne	.L4163
.L4158:
	movl	-12(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L4163
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	-12(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	je	.L4157
	.loc 1 9649 0
	jmp	.L4163
.L4164:
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -8(%ebp)
.L4163:
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4165
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4165
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	jne	.L4168
.L4165:
	movl	-8(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L4168
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	je	.L4164
.L4168:
	.loc 1 9651 0
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$123, %al
	jne	.L4170
	movl	-12(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L4170
	.loc 1 9654 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 9655 0
	movl	-12(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L4153
.L4170:
	.loc 1 9657 0
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$123, %al
	jne	.L4154
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$30, %al
	jne	.L4154
	.loc 1 9660 0
	movl	sizetype_tab@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%edx, (%eax)
	.loc 1 9661 0
	movl	-8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L4153
.L4154:
.LBE153:
	.loc 1 9665 0
	movl	$0, -24(%ebp)
.L4153:
	movl	-24(%ebp), %eax
	.loc 1 9666 0
	addl	$36, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE80:
	.size	string_constant, .-string_constant
	.type	expand_increment, @function
expand_increment:
.LFB81:
	.loc 1 9676 0
	pushl	%ebp
.LCFI311:
	movl	%esp, %ebp
.LCFI312:
	pushl	%ebx
.LCFI313:
	subl	$148, %esp
.LCFI314:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9679 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -48(%ebp)
	.loc 1 9680 0
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	.loc 1 9682 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -36(%ebp)
	.loc 1 9683 0
	movl	$0, -32(%ebp)
	.loc 1 9684 0
	movl	$0, -28(%ebp)
	.loc 1 9688 0
	movl	$0, -24(%ebp)
	.loc 1 9692 0
	cmpl	$0, 12(%ebp)
	je	.L4177
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$41, %al
	je	.L4177
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	jne	.L4180
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$42, %al
	jne	.L4177
	movl	-48(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L4180
.L4177:
	.loc 1 9697 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	stabilize_reference@PLT
	movl	%eax, -48(%ebp)
.L4180:
	.loc 1 9701 0
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-124, %al
	je	.L4183
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-125, %al
	jne	.L4185
.L4183:
	.loc 1 9703 0
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -48(%ebp)
.L4185:
	.loc 1 9710 0
	call	get_last_insn@PLT
	movl	%eax, -56(%ebp)
	.loc 1 9711 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -64(%ebp)
	.loc 1 9721 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4186
	movl	-64(%ebp), %eax
	movzbl	3(%eax), %eax
	andl	$16, %eax
	testb	%al, %al
	je	.L4186
	.loc 1 9723 0
	cmpl	$0, 12(%ebp)
	je	.L4189
	.loc 1 9724 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	jmp	.L4192
.L4189:
	.loc 1 9726 0
	movl	$1, -24(%ebp)
	.loc 1 9721 0
	jmp	.L4192
.L4186:
	.loc 1 9728 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	jne	.L4192
	movl	-64(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -120(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4194
	movl	$64, -116(%ebp)
	jmp	.L4196
.L4194:
	movl	$32, -116(%ebp)
.L4196:
	movl	-116(%ebp), %eax
	cmpl	%eax, -120(%ebp)
	jge	.L4192
	.loc 1 9734 0
	cmpl	$0, 12(%ebp)
	je	.L4198
	.loc 1 9735 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -64(%ebp)
	jmp	.L4192
.L4198:
	.loc 1 9737 0
	movl	$1, -24(%ebp)
.L4192:
	.loc 1 9740 0
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$73, %ax
	je	.L4200
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4202
.L4200:
	call	get_last_insn@PLT
	cmpl	-56(%ebp), %eax
	je	.L4202
	movl	$1, -112(%ebp)
	jmp	.L4204
.L4202:
	movl	$0, -112(%ebp)
.L4204:
	movl	-112(%ebp), %eax
	movl	%eax, -32(%ebp)
	.loc 1 9742 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -60(%ebp)
	.loc 1 9745 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-123, %al
	je	.L4205
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-125, %al
	jne	.L4207
.L4205:
	.loc 1 9747 0
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %eax
	movl	%eax, -44(%ebp)
.L4207:
	.loc 1 9750 0
	movl	optab_table@GOT(%ebx), %eax
	movl	8(%eax), %eax
	cmpl	-44(%ebp), %eax
	jne	.L4208
	movl	-60(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4208
	.loc 1 9753 0
	movl	-60(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	negl	%eax
	adcl	$0, %edx
	negl	%edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -60(%ebp)
	.loc 1 9754 0
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
.L4208:
	.loc 1 9757 0
	movl	flag_trapv@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4211
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	andl	$32, %eax
	testb	%al, %al
	jne	.L4211
	.loc 1 9758 0
	movl	optab_table@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	-44(%ebp), %eax
	jne	.L4214
	movl	optab_table@GOT(%ebx), %eax
	movl	4(%eax), %eax
	movl	%eax, -108(%ebp)
	jmp	.L4216
.L4214:
	movl	optab_table@GOT(%ebx), %eax
	movl	12(%eax), %eax
	movl	%eax, -108(%ebp)
.L4216:
	movl	-108(%ebp), %eax
	movl	%eax, -44(%ebp)
.L4211:
	.loc 1 9761 0
	cmpl	$0, 12(%ebp)
	jne	.L4217
	.loc 1 9763 0
	movl	-36(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -40(%ebp)
	.loc 1 9764 0
	cmpl	$529, -40(%ebp)
	je	.L4217
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L4217
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L4217
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L4217
	.loc 1 9770 0
	movl	$1, -28(%ebp)
.L4217:
	.loc 1 9781 0
	cmpl	$0, -32(%ebp)
	jne	.L4223
	cmpl	$0, 12(%ebp)
	jne	.L4225
	cmpl	$0, -28(%ebp)
	je	.L4223
.L4225:
	cmpl	$0, -24(%ebp)
	je	.L4227
.L4223:
.LBB154:
	.loc 1 9794 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-123, %al
	je	.L4228
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$-125, %al
	jne	.L4230
.L4228:
	movl	$61, -96(%ebp)
	jmp	.L4231
.L4230:
	movl	$60, -96(%ebp)
.L4231:
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	build@PLT
	movl	%eax, -20(%ebp)
	.loc 1 9796 0
	jmp	.L4232
.L4233:
	.loc 1 9799 0
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, -20(%ebp)
	.loc 1 9800 0
	movl	-48(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -48(%ebp)
.L4232:
	.loc 1 9796 0
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4233
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4233
	.loc 1 9803 0
	cmpl	$0, 12(%ebp)
	jne	.L4236
	cmpl	$0, 16(%ebp)
	jne	.L4236
	movl	$1, -92(%ebp)
	jmp	.L4239
.L4236:
	movl	$0, -92(%ebp)
.L4239:
	movl	$0, 12(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_assignment@PLT
	movl	%eax, -56(%ebp)
	.loc 1 9804 0
	cmpl	$0, 12(%ebp)
	je	.L4240
	movl	-64(%ebp), %eax
	movl	%eax, -84(%ebp)
	jmp	.L4242
.L4240:
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
.L4242:
	movl	-84(%ebp), %eax
	movl	%eax, -88(%ebp)
	jmp	.L4243
.L4227:
.LBE154:
	.loc 1 9807 0
	cmpl	$0, 12(%ebp)
	je	.L4244
	.loc 1 9819 0
	movl	-36(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	4(%edx,%eax,8), %eax
	movl	%eax, -40(%ebp)
	.loc 1 9820 0
	cmpl	$529, -40(%ebp)
	je	.L4246
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L4246
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	je	.L4246
	.loc 1 9826 0
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L4250
	.loc 1 9827 0
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -60(%ebp)
.L4250:
	.loc 1 9829 0
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	enqueue_insn
	movl	%eax, -88(%ebp)
	jmp	.L4243
.L4246:
	.loc 1 9831 0
	cmpl	$529, -40(%ebp)
	je	.L4244
	movl	-64(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$76, %ax
	jne	.L4244
.LBB155:
	.loc 1 9835 0
	movl	-64(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	general_operand@PLT
	testl	%eax, %eax
	je	.L4254
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4256
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4256
	movl	$5, -72(%ebp)
	jmp	.L4259
.L4256:
	movl	$4, -72(%ebp)
.L4259:
	movl	-76(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -80(%ebp)
	jmp	.L4260
.L4254:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -80(%ebp)
.L4260:
	movl	-80(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 9838 0
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	replace_equiv_address@PLT
	movl	%eax, -64(%ebp)
	.loc 1 9839 0
	movl	-64(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	force_reg@PLT
	movl	%eax, -12(%ebp)
	.loc 1 9840 0
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L4261
	.loc 1 9841 0
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	force_reg@PLT
	movl	%eax, -60(%ebp)
.L4261:
	.loc 1 9845 0
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_move_insn@PLT
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	enqueue_insn
	.loc 1 9846 0
	movl	-40(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$8, %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	enqueue_insn
	movl	%eax, -8(%ebp)
	.loc 1 9847 0
	movl	-8(%ebp), %eax
	movl	%eax, -88(%ebp)
	jmp	.L4243
.L4244:
.LBE155:
	.loc 1 9852 0
	cmpl	$0, 12(%ebp)
	je	.L4263
	.loc 1 9854 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_reg@PLT
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -56(%ebp)
	jmp	.L4265
.L4263:
	.loc 1 9860 0
	movl	-64(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -56(%ebp)
.L4265:
	.loc 1 9863 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$3, 24(%esp)
	movl	%eax, 20(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-60(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -60(%ebp)
	.loc 1 9867 0
	movl	-60(%ebp), %eax
	cmpl	-64(%ebp), %eax
	je	.L4266
	.loc 1 9868 0
	movl	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
.L4266:
	.loc 1 9870 0
	movl	-56(%ebp), %eax
	movl	%eax, -88(%ebp)
.L4243:
	movl	-88(%ebp), %eax
	.loc 1 9871 0
	addl	$148, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE81:
	.size	expand_increment, .-expand_increment
.globl init_pending_stack_adjust
	.type	init_pending_stack_adjust, @function
init_pending_stack_adjust:
.LFB82:
	.loc 1 9878 0
	pushl	%ebp
.LCFI315:
	movl	%esp, %ebp
.LCFI316:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 9879 0
	movl	cfun@GOT(%ecx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, (%eax)
	.loc 1 9880 0
	popl	%ebp
	ret
.LFE82:
	.size	init_pending_stack_adjust, .-init_pending_stack_adjust
.globl clear_pending_stack_adjust
	.type	clear_pending_stack_adjust, @function
clear_pending_stack_adjust:
.LFB83:
	.loc 1 9890 0
	pushl	%ebp
.LCFI317:
	movl	%esp, %ebp
.LCFI318:
	pushl	%esi
.LCFI319:
	pushl	%ebx
.LCFI320:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9892 0
	movl	optimize@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jle	.L4279
	movl	flag_omit_frame_pointer@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4274
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	296(%eax), %eax
	andl	$64, %eax
	testb	%al, %al
	je	.L4279
.L4274:
	movl	current_function_decl@GOT(%ebx), %eax
	movl	(%eax), %eax
	movzbl	33(%eax), %eax
	andl	$8, %eax
	testb	%al, %al
	je	.L4276
	movl	flag_no_inline@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4279
.L4276:
	movl	flag_inline_functions@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L4279
	.loc 1 9898 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %ecx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	8(%eax), %edx
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	(%eax), %eax
	movl	%edx, %esi
	subl	%eax, %esi
	movl	%esi, %eax
	movl	%eax, 8(%ecx)
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, (%eax)
.L4279:
	.loc 1 9902 0
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE83:
	.size	clear_pending_stack_adjust, .-clear_pending_stack_adjust
.globl do_pending_stack_adjust
	.type	do_pending_stack_adjust, @function
do_pending_stack_adjust:
.LFB84:
	.loc 1 9908 0
	pushl	%ebp
.LCFI321:
	movl	%esp, %ebp
.LCFI322:
	pushl	%ebx
.LCFI323:
	subl	$20, %esp
.LCFI324:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9909 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	4(%eax), %eax
	testl	%eax, %eax
	jne	.L4285
	.loc 1 9911 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4283
	.loc 1 9912 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, (%esp)
	call	adjust_stack@PLT
.L4283:
	.loc 1 9913 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	8(%eax), %eax
	movl	$0, (%eax)
.L4285:
	.loc 1 9915 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE84:
	.size	do_pending_stack_adjust, .-do_pending_stack_adjust
.globl jumpifnot
	.type	jumpifnot, @function
jumpifnot:
.LFB85:
	.loc 1 9927 0
	pushl	%ebp
.LCFI325:
	movl	%esp, %ebp
.LCFI326:
	pushl	%ebx
.LCFI327:
	subl	$20, %esp
.LCFI328:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9928 0
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump@PLT
	.loc 1 9929 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE85:
	.size	jumpifnot, .-jumpifnot
.globl jumpif
	.type	jumpif, @function
jumpif:
.LFB86:
	.loc 1 9937 0
	pushl	%ebp
.LCFI329:
	movl	%esp, %ebp
.LCFI330:
	pushl	%ebx
.LCFI331:
	subl	$20, %esp
.LCFI332:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9938 0
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump@PLT
	.loc 1 9939 0
	addl	$20, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE86:
	.size	jumpif, .-jumpif
	.section	.rodata
	.type	__FUNCTION__.26905, @object
	.size	__FUNCTION__.26905, 8
__FUNCTION__.26905:
	.string	"do_jump"
	.text
.globl do_jump
	.type	do_jump, @function
do_jump:
.LFB87:
	.loc 1 9957 0
	pushl	%ebp
.LCFI333:
	movl	%esp, %ebp
.LCFI334:
	pushl	%edi
.LCFI335:
	pushl	%esi
.LCFI336:
	pushl	%ebx
.LCFI337:
	subl	$204, %esp
.LCFI338:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 9958 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, -124(%ebp)
	.loc 1 9962 0
	movl	$0, -120(%ebp)
	.loc 1 9972 0
	call	emit_queue@PLT
	.loc 1 9974 0
	cmpl	$124, -124(%ebp)
	ja	.L4291
	movl	-124(%ebp), %eax
	sall	$2, %eax
	movl	.L4320@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L4320:
	.long	.L4321@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4293@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4294@GOTOFF
	.long	.L4294@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4294@GOTOFF
	.long	.L4294@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4295@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4296@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4297@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4298@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4299@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4300@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4300@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4300@GOTOFF
	.long	.L4300@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4302@GOTOFF
	.long	.L4303@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4304@GOTOFF
	.long	.L4305@GOTOFF
	.long	.L4306@GOTOFF
	.long	.L4307@GOTOFF
	.long	.L4308@GOTOFF
	.long	.L4309@GOTOFF
	.long	.L4310@GOTOFF
	.long	.L4311@GOTOFF
	.long	.L4311@GOTOFF
	.long	.L4312@GOTOFF
	.long	.L4313@GOTOFF
	.long	.L4314@GOTOFF
	.long	.L4315@GOTOFF
	.long	.L4316@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4317@GOTOFF
	.long	.L4318@GOTOFF
	.long	.L4300@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4319@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4291@GOTOFF
	.long	.L4300@GOTOFF
	.text
.L4293:
	.loc 1 9980 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4322
	movl	12(%ebp), %eax
	movl	%eax, -184(%ebp)
	jmp	.L4324
.L4322:
	movl	16(%ebp), %edx
	movl	%edx, -184(%ebp)
.L4324:
	movl	-184(%ebp), %eax
	movl	%eax, -116(%ebp)
	.loc 1 9981 0
	cmpl	$0, -116(%ebp)
	je	.L4321
	.loc 1 9982 0
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 9983 0
	jmp	.L4321
.L4319:
	.loc 1 9995 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 9996 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	80(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 20(%eax)
	.loc 1 9998 0
	jmp	.L4321
.L4318:
	.loc 1 10001 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$40, %al
	je	.L4291
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$41, %al
	je	.L4291
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$44, %al
	je	.L4291
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$45, %al
	je	.L4291
.L4317:
	.loc 1 10009 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %eax
	cmpl	%eax, %edx
	jl	.L4291
.L4300:
	.loc 1 10019 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10020 0
	jmp	.L4321
.L4298:
	.loc 1 10025 0
	movl	placeholder_list@GOTOFF(%ebx), %edx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	tree_cons@PLT
	movl	%eax, placeholder_list@GOTOFF(%ebx)
	.loc 1 10027 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10028 0
	movl	placeholder_list@GOTOFF(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, placeholder_list@GOTOFF(%ebx)
	.loc 1 10029 0
	jmp	.L4321
.L4299:
	.loc 1 10045 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$104, (%esp)
	call	build@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$112, 8(%esp)
	movl	$112, 4(%esp)
	movl	%edx, (%esp)
	call	do_compare_and_jump
	.loc 1 10049 0
	jmp	.L4321
.L4304:
	.loc 1 10075 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10076 0
	jmp	.L4321
.L4302:
	.loc 1 10079 0
	cmpl	$0, 12(%ebp)
	jne	.L4330
	.loc 1 10080 0
	call	gen_label_rtx@PLT
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	%eax, 12(%ebp)
.L4330:
	.loc 1 10081 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10082 0
	call	start_cleanup_deferral@PLT
	.loc 1 10083 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10084 0
	call	end_cleanup_deferral@PLT
	.loc 1 10085 0
	jmp	.L4321
.L4303:
	.loc 1 10088 0
	cmpl	$0, 16(%ebp)
	jne	.L4332
	.loc 1 10089 0
	call	gen_label_rtx@PLT
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	%eax, 16(%ebp)
.L4332:
	.loc 1 10090 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10091 0
	call	start_cleanup_deferral@PLT
	.loc 1 10092 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10093 0
	call	end_cleanup_deferral@PLT
	.loc 1 10094 0
	jmp	.L4321
.L4295:
	.loc 1 10097 0
	call	push_temp_slots@PLT
	.loc 1 10098 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edx
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	.loc 1 10099 0
	movl	$0, (%esp)
	call	preserve_temp_slots@PLT
	.loc 1 10100 0
	call	free_temp_slots@PLT
	.loc 1 10101 0
	call	pop_temp_slots@PLT
	.loc 1 10102 0
	call	emit_queue@PLT
	.loc 1 10103 0
	call	do_pending_stack_adjust@PLT
	.loc 1 10104 0
	movl	8(%ebp), %eax
	movl	24(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10105 0
	jmp	.L4321
.L4294:
.LBB156:
	.loc 1 10117 0
	movl	$0, -140(%ebp)
	.loc 1 10121 0
	leal	-140(%ebp), %eax
	movl	%eax, 24(%esp)
	leal	-128(%ebp), %eax
	movl	%eax, 20(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-136(%ebp), %eax
	movl	%eax, 12(%esp)
	leal	-160(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-152(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	get_inner_reference@PLT
	.loc 1 10124 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	264(%eax), %esi
	movl	-128(%ebp), %ecx
	movl	-152(%ebp), %eax
	movl	-148(%ebp), %edx
	movl	%ecx, 4(%esp)
	movl	%eax, (%esp)
	call	*%esi
	movl	%eax, -100(%ebp)
	.loc 1 10134 0
	jmp	.L4291
.L4296:
.LBE156:
	.loc 1 10139 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L4334
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4334
	.loc 1 10141 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10139 0
	jmp	.L4321
.L4334:
	.loc 1 10143 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4338
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L4338
	.loc 1 10145 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10143 0
	jmp	.L4321
.L4338:
.LBB157:
	.loc 1 10149 0
	call	gen_label_rtx@PLT
	movl	%eax, -96(%ebp)
	.loc 1 10150 0
	call	gen_label_rtx@PLT
	movl	%eax, -120(%ebp)
	.loc 1 10152 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	$0, 8(%esp)
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10154 0
	call	start_cleanup_deferral@PLT
	.loc 1 10156 0
	cmpl	$0, 16(%ebp)
	je	.L4341
	movl	16(%ebp), %edx
	movl	%edx, -180(%ebp)
	jmp	.L4343
.L4341:
	movl	-120(%ebp), %eax
	movl	%eax, -180(%ebp)
.L4343:
	cmpl	$0, 12(%ebp)
	je	.L4344
	movl	12(%ebp), %edx
	movl	%edx, -176(%ebp)
	jmp	.L4346
.L4344:
	movl	-120(%ebp), %eax
	movl	%eax, -176(%ebp)
.L4346:
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	-180(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	-176(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_jump@PLT
	.loc 1 10160 0
	call	do_pending_stack_adjust@PLT
	.loc 1 10161 0
	movl	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 10164 0
	cmpl	$0, 16(%ebp)
	je	.L4347
	movl	16(%ebp), %eax
	movl	%eax, -172(%ebp)
	jmp	.L4349
.L4347:
	movl	-120(%ebp), %edx
	movl	%edx, -172(%ebp)
.L4349:
	cmpl	$0, 12(%ebp)
	je	.L4350
	movl	12(%ebp), %eax
	movl	%eax, -168(%ebp)
	jmp	.L4352
.L4350:
	movl	-120(%ebp), %edx
	movl	%edx, -168(%ebp)
.L4352:
	movl	8(%ebp), %eax
	movl	28(%eax), %eax
	movl	-172(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	-168(%ebp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	do_jump@PLT
	.loc 1 10167 0
	call	end_cleanup_deferral@PLT
	.loc 1 10169 0
	jmp	.L4321
.L4309:
.LBE157:
.LBB158:
	.loc 1 10173 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	.loc 1 10175 0
	movl	-92(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L4353
	movl	-92(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$5, %eax
	jne	.L4355
.L4353:
.LBB159:
	.loc 1 10178 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -88(%ebp)
	.loc 1 10179 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -84(%ebp)
	.loc 1 10180 0
	movl	-92(%ebp), %eax
	movl	4(%eax), %edx
	movl	-84(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$130, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %esi
	movl	-92(%ebp), %eax
	movl	4(%eax), %edx
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$130, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$103, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %esi
	movl	-92(%ebp), %eax
	movl	4(%eax), %edx
	movl	-84(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$129, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edi
	movl	-92(%ebp), %eax
	movl	4(%eax), %edx
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$129, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$103, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$93, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10175 0
	jmp	.L4321
.L4355:
.LBE159:
	.loc 1 10200 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4357
	.loc 1 10201 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	jmp	.L4321
.L4357:
	.loc 1 10203 0
	movl	-92(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4359
	movl	-92(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$113, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4359
	.loc 1 10205 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_equality
	.loc 1 10203 0
	jmp	.L4321
.L4359:
	.loc 1 10207 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$113, 8(%esp)
	movl	$113, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10208 0
	jmp	.L4321
.L4310:
.LBE158:
.LBB160:
	.loc 1 10213 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	.loc 1 10215 0
	movl	-80(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$6, %eax
	je	.L4362
	movl	-80(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$5, %eax
	jne	.L4364
.L4362:
.LBB161:
	.loc 1 10218 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -76(%ebp)
	.loc 1 10219 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -72(%ebp)
	.loc 1 10220 0
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$130, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %esi
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$130, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$104, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %esi
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$129, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edi
	movl	-80(%ebp), %eax
	movl	4(%eax), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$129, (%esp)
	call	build1@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$104, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%esi, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$94, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	.loc 1 10215 0
	jmp	.L4321
.L4364:
.LBE161:
	.loc 1 10240 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4366
	.loc 1 10241 0
	movl	8(%ebp), %eax
	movl	20(%eax), %edx
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_jump@PLT
	jmp	.L4321
.L4366:
	.loc 1 10243 0
	movl	-80(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4368
	movl	-80(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$112, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4368
	.loc 1 10245 0
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_equality
	.loc 1 10243 0
	jmp	.L4321
.L4368:
	.loc 1 10247 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$112, 8(%esp)
	movl	$112, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10248 0
	jmp	.L4321
.L4305:
.LBE160:
	.loc 1 10252 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 10253 0
	movl	-104(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4371
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$117, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4371
	.loc 1 10255 0
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater
	.loc 1 10253 0
	jmp	.L4321
.L4371:
	.loc 1 10257 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$121, 8(%esp)
	movl	$117, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10258 0
	jmp	.L4321
.L4306:
	.loc 1 10261 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 10262 0
	movl	-104(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4375
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$116, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4375
	.loc 1 10264 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater
	.loc 1 10262 0
	jmp	.L4321
.L4375:
	.loc 1 10266 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$120, 8(%esp)
	movl	$116, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10267 0
	jmp	.L4321
.L4307:
	.loc 1 10270 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 10271 0
	movl	-104(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4379
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$115, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4379
	.loc 1 10273 0
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater
	.loc 1 10271 0
	jmp	.L4321
.L4379:
	.loc 1 10275 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$119, 8(%esp)
	movl	$115, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10276 0
	jmp	.L4321
.L4308:
	.loc 1 10279 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 10280 0
	movl	-104(%ebp), %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4383
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$114, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4383
	.loc 1 10282 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater
	.loc 1 10280 0
	jmp	.L4321
.L4383:
	.loc 1 10284 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$118, 8(%esp)
	movl	$114, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10285 0
	jmp	.L4321
.L4311:
.LBB162:
	.loc 1 10293 0
	cmpl	$105, -124(%ebp)
	jne	.L4387
	.loc 1 10294 0
	movl	$122, -68(%ebp)
	movl	$123, -64(%ebp)
	jmp	.L4389
.L4387:
	.loc 1 10296 0
	movl	$123, -68(%ebp)
	movl	$122, -64(%ebp)
.L4389:
	.loc 1 10297 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 10299 0
	movl	$0, -60(%ebp)
	.loc 1 10300 0
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4390
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4392
	cmpl	$122, -64(%ebp)
	jne	.L4390
.L4392:
	.loc 1 10305 0
	movl	$1, -60(%ebp)
.L4390:
	.loc 1 10307 0
	cmpl	$0, -60(%ebp)
	jne	.L4394
	.loc 1 10308 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	jmp	.L4321
.L4394:
	.loc 1 10310 0
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	.loc 1 10312 0
	jmp	.L4321
.L4312:
.LBE162:
.LBB163:
	.loc 1 10319 0
	movl	$128, -56(%ebp)
	.loc 1 10320 0
	movl	$99, -52(%ebp)
	.loc 1 10321 0
	jmp	.L4397
.L4313:
	.loc 1 10323 0
	movl	$127, -56(%ebp)
	.loc 1 10324 0
	movl	$100, -52(%ebp)
	.loc 1 10325 0
	jmp	.L4397
.L4314:
	.loc 1 10327 0
	movl	$126, -56(%ebp)
	.loc 1 10328 0
	movl	$101, -52(%ebp)
	.loc 1 10329 0
	jmp	.L4397
.L4315:
	.loc 1 10331 0
	movl	$125, -56(%ebp)
	.loc 1 10332 0
	movl	$102, -52(%ebp)
	.loc 1 10333 0
	jmp	.L4397
.L4316:
	.loc 1 10335 0
	movl	$124, -56(%ebp)
	.loc 1 10336 0
	movl	$103, -52(%ebp)
.L4397:
	.loc 1 10340 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -104(%ebp)
	.loc 1 10341 0
	movl	$0, 8(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	je	.L4398
	.loc 1 10342 0
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-56(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_and_jump
	jmp	.L4321
.L4398:
.LBB164:
	.loc 1 10346 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -48(%ebp)
	.loc 1 10347 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	save_expr@PLT
	movl	%eax, -44(%ebp)
	.loc 1 10352 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$105, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, -40(%ebp)
	.loc 1 10353 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, -36(%ebp)
	.loc 1 10354 0
	movl	8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	$94, (%esp)
	call	build@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10355 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump@PLT
	.loc 1 10358 0
	jmp	.L4321
.L4297:
.LBE164:
.LBE163:
	.loc 1 10370 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$123, %al
	jne	.L4291
.LBB165:
	.loc 1 10372 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	20(%eax), %eax
	movl	%eax, -32(%ebp)
	.loc 1 10373 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 10375 0
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$31, %al
	jne	.L4291
	movl	-32(%ebp), %eax
	movzbl	36(%eax), %eax
	andl	$12, %eax
	testb	%al, %al
	je	.L4291
	movl	-32(%ebp), %eax
	movl	40(%eax), %eax
	cmpl	$287, %eax
	jne	.L4291
	cmpl	$0, -28(%ebp)
	je	.L4291
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4291
.LBB166:
	.loc 1 10382 0
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_builtin_expect_jump@PLT
	movl	%eax, -24(%ebp)
	.loc 1 10384 0
	cmpl	$0, -24(%ebp)
	je	.L4291
	.loc 1 10386 0
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_insn@PLT
	.loc 1 10387 0
	jmp	.L4425
.L4291:
.LBE166:
.LBE165:
	.loc 1 10395 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -116(%ebp)
	.loc 1 10405 0
	call	do_pending_stack_adjust@PLT
	.loc 1 10407 0
	call	emit_queue@PLT
	.loc 1 10409 0
	movl	-116(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	je	.L4409
	movl	-116(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$65, %ax
	jne	.L4411
	movl	-116(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L4409
.L4411:
	movl	-116(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$77, %ax
	jne	.L4413
.L4409:
.LBB167:
	.loc 1 10413 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-116(%ebp), %eax
	jne	.L4414
	movl	12(%ebp), %eax
	movl	%eax, -164(%ebp)
	jmp	.L4416
.L4414:
	movl	16(%ebp), %edx
	movl	%edx, -164(%ebp)
.L4416:
	movl	-164(%ebp), %eax
	movl	%eax, -20(%ebp)
	.loc 1 10414 0
	cmpl	$0, -20(%ebp)
	je	.L4321
	.loc 1 10415 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 10409 0
	jmp	.L4321
.L4413:
.LBE167:
	.loc 1 10417 0
	movl	-116(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_class@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	cmpl	$1, %eax
	jne	.L4419
	movl	-116(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	$0, 8(%esp)
	movl	%eax, 4(%esp)
	movl	$112, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4419
	.loc 1 10420 0
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_equality_rtx@PLT
	.loc 1 10417 0
	jmp	.L4321
.L4419:
	.loc 1 10421 0
	movl	-116(%ebp), %eax
	movzbl	2(%eax), %eax
	testb	%al, %al
	je	.L4422
	.loc 1 10422 0
	movl	-116(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %ecx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %esi
	movl	-116(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	16(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%ecx, 16(%esp)
	movl	%esi, 12(%esp)
	movl	$112, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_rtx_and_jump@PLT
	jmp	.L4321
.L4422:
	.loc 1 10427 0
	leal	__FUNCTION__.26905@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$10427, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4321:
	.loc 1 10430 0
	cmpl	$0, -120(%ebp)
	je	.L4425
	.loc 1 10435 0
	call	do_pending_stack_adjust@PLT
	.loc 1 10436 0
	movl	-120(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
.L4425:
	.loc 1 10438 0
	addl	$204, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE87:
	.size	do_jump, .-do_jump
	.type	do_jump_by_parts_greater, @function
do_jump_by_parts_greater:
.LFB88:
	.loc 1 10450 0
	pushl	%ebp
.LCFI339:
	movl	%esp, %ebp
.LCFI340:
	pushl	%ebx
.LCFI341:
	subl	$52, %esp
.LCFI342:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10451 0
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	20(%eax,%edx,4), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -20(%ebp)
	.loc 1 10452 0
	cmpl	$0, 12(%ebp)
	sete	%al
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movl	20(%eax,%edx,4), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -16(%ebp)
	.loc 1 10453 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 10454 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -8(%ebp)
	.loc 1 10456 0
	movl	20(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	do_jump_by_parts_greater_rtx@PLT
	.loc 1 10457 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE88:
	.size	do_jump_by_parts_greater, .-do_jump_by_parts_greater
.globl do_jump_by_parts_greater_rtx
	.type	do_jump_by_parts_greater_rtx, @function
do_jump_by_parts_greater_rtx:
.LFB89:
	.loc 1 10469 0
	pushl	%ebp
.LCFI343:
	movl	%esp, %ebp
.LCFI344:
	pushl	%ebx
.LCFI345:
	subl	$84, %esp
.LCFI346:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10470 0
	movl	8(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4429
	movl	$8, -48(%ebp)
	jmp	.L4431
.L4429:
	movl	$4, -48(%ebp)
.L4431:
	movl	-52(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-48(%ebp)
	movl	%eax, -24(%ebp)
	.loc 1 10471 0
	movl	$0, -20(%ebp)
	.loc 1 10474 0
	cmpl	$0, 28(%ebp)
	je	.L4432
	cmpl	$0, 24(%ebp)
	jne	.L4434
.L4432:
	.loc 1 10475 0
	call	gen_label_rtx@PLT
	movl	%eax, -20(%ebp)
.L4434:
	.loc 1 10476 0
	cmpl	$0, 28(%ebp)
	jne	.L4435
	.loc 1 10477 0
	movl	-20(%ebp), %eax
	movl	%eax, 28(%ebp)
.L4435:
	.loc 1 10478 0
	cmpl	$0, 24(%ebp)
	jne	.L4437
	.loc 1 10479 0
	movl	-20(%ebp), %eax
	movl	%eax, 24(%ebp)
.L4437:
	.loc 1 10482 0
	movl	$0, -16(%ebp)
	jmp	.L4439
.L4440:
.LBB168:
	.loc 1 10486 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L4441
	.loc 1 10488 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -12(%ebp)
	.loc 1 10489 0
	movl	-16(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -8(%ebp)
	jmp	.L4443
.L4441:
	.loc 1 10493 0
	movl	-16(%ebp), %edx
	movl	-24(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -12(%ebp)
	.loc 1 10494 0
	movl	-16(%ebp), %edx
	movl	-24(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -8(%ebp)
.L4443:
	.loc 1 10498 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, 12(%ebp)
	jne	.L4444
	cmpl	$0, -16(%ebp)
	jle	.L4446
.L4444:
	movl	$1, -40(%ebp)
	jmp	.L4447
.L4446:
	movl	$0, -40(%ebp)
.L4447:
	movl	28(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	$0, 20(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$115, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_rtx_and_jump@PLT
	.loc 1 10503 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	24(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	$0, 20(%esp)
	movl	%edx, 16(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	$112, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_rtx_and_jump@PLT
.LBE168:
	.loc 1 10482 0
	addl	$1, -16(%ebp)
.L4439:
	movl	-16(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jl	.L4440
	.loc 1 10507 0
	cmpl	$0, 24(%ebp)
	je	.L4449
	.loc 1 10508 0
	movl	24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
.L4449:
	.loc 1 10509 0
	cmpl	$0, -20(%ebp)
	je	.L4453
	.loc 1 10510 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
.L4453:
	.loc 1 10511 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE89:
	.size	do_jump_by_parts_greater_rtx, .-do_jump_by_parts_greater_rtx
	.type	do_jump_by_parts_equality, @function
do_jump_by_parts_equality:
.LFB90:
	.loc 1 10520 0
	pushl	%ebp
.LCFI347:
	movl	%esp, %ebp
.LCFI348:
	pushl	%edi
.LCFI349:
	pushl	%esi
.LCFI350:
	pushl	%ebx
.LCFI351:
	subl	$76, %esp
.LCFI352:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10521 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -36(%ebp)
	.loc 1 10522 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -32(%ebp)
	.loc 1 10523 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -28(%ebp)
	.loc 1 10524 0
	movl	-28(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -56(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4455
	movl	$8, -52(%ebp)
	jmp	.L4457
.L4455:
	movl	$4, -52(%ebp)
.L4457:
	movl	-56(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-52(%ebp)
	movl	%eax, -24(%ebp)
	.loc 1 10526 0
	movl	$0, -16(%ebp)
	.loc 1 10528 0
	cmpl	$0, 12(%ebp)
	jne	.L4458
	.loc 1 10529 0
	call	gen_label_rtx@PLT
	movl	%eax, 12(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -16(%ebp)
.L4458:
	.loc 1 10531 0
	movl	$0, -20(%ebp)
	jmp	.L4460
.L4461:
	.loc 1 10532 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %edi
	movl	-20(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, -48(%ebp)
	movl	-20(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, %edx
	movl	$0, 28(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 12(%esp)
	movl	$113, 8(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	do_compare_rtx_and_jump@PLT
	.loc 1 10531 0
	addl	$1, -20(%ebp)
.L4460:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	jl	.L4461
	.loc 1 10537 0
	cmpl	$0, 16(%ebp)
	je	.L4463
	.loc 1 10538 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
.L4463:
	.loc 1 10539 0
	cmpl	$0, -16(%ebp)
	je	.L4467
	.loc 1 10540 0
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
.L4467:
	.loc 1 10541 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE90:
	.size	do_jump_by_parts_equality, .-do_jump_by_parts_equality
.globl do_jump_by_parts_equality_rtx
	.type	do_jump_by_parts_equality_rtx, @function
do_jump_by_parts_equality_rtx:
.LFB91:
	.loc 1 10551 0
	pushl	%ebp
.LCFI353:
	movl	%esp, %ebp
.LCFI354:
	pushl	%edi
.LCFI355:
	pushl	%esi
.LCFI356:
	pushl	%ebx
.LCFI357:
	subl	$60, %esp
.LCFI358:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10552 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %eax
	movzbl	%al, %eax
	movl	%eax, -36(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4469
	movl	$8, -32(%ebp)
	jmp	.L4471
.L4469:
	movl	$4, -32(%ebp)
.L4471:
	movl	-36(%ebp), %edx
	movl	%edx, %eax
	sarl	$31, %edx
	idivl	-32(%ebp)
	movl	%eax, -28(%ebp)
	.loc 1 10555 0
	movl	$0, -16(%ebp)
	.loc 1 10562 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -24(%ebp)
	.loc 1 10563 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 10564 0
	movl	$1, -20(%ebp)
	jmp	.L4472
.L4473:
	.loc 1 10565 0
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-20(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	76(%eax), %ecx
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	$2, 24(%esp)
	movl	$1, 20(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%esi, (%esp)
	call	expand_binop@PLT
	movl	%eax, -24(%ebp)
	.loc 1 10564 0
	addl	$1, -20(%ebp)
.L4472:
	movl	-20(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jge	.L4474
	cmpl	$0, -24(%ebp)
	jne	.L4473
.L4474:
	.loc 1 10569 0
	cmpl	$0, -24(%ebp)
	je	.L4476
	.loc 1 10571 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %edx
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %ecx
	movl	16(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%edx, 16(%esp)
	movl	$1, 12(%esp)
	movl	$113, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_rtx_and_jump@PLT
	.loc 1 10574 0
	jmp	.L4487
.L4476:
	.loc 1 10578 0
	cmpl	$0, 12(%ebp)
	jne	.L4479
	.loc 1 10579 0
	call	gen_label_rtx@PLT
	movl	%eax, 12(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -16(%ebp)
.L4479:
	.loc 1 10581 0
	movl	$0, -20(%ebp)
	jmp	.L4481
.L4482:
	.loc 1 10582 0
	movl	word_mode@GOT(%ebx), %eax
	movl	(%eax), %esi
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %edi
	movl	8(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	-20(%ebp), %edx
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	operand_subword_force@PLT
	movl	%eax, %edx
	movl	$0, 28(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$0, 20(%esp)
	movl	%esi, 16(%esp)
	movl	$1, 12(%esp)
	movl	$113, 8(%esp)
	movl	%edi, 4(%esp)
	movl	%edx, (%esp)
	call	do_compare_rtx_and_jump@PLT
	.loc 1 10581 0
	addl	$1, -20(%ebp)
.L4481:
	movl	-20(%ebp), %eax
	cmpl	-28(%ebp), %eax
	jl	.L4482
	.loc 1 10586 0
	cmpl	$0, 16(%ebp)
	je	.L4484
	.loc 1 10587 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
.L4484:
	.loc 1 10589 0
	cmpl	$0, -16(%ebp)
	je	.L4487
	.loc 1 10590 0
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
.L4487:
	.loc 1 10591 0
	addl	$60, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE91:
	.size	do_jump_by_parts_equality_rtx, .-do_jump_by_parts_equality_rtx
.globl compare_from_rtx
	.type	compare_from_rtx, @function
compare_from_rtx:
.LFB92:
	.loc 1 10611 0
	pushl	%ebp
.LCFI359:
	movl	%esp, %ebp
.LCFI360:
	pushl	%ebx
.LCFI361:
	subl	$52, %esp
.LCFI362:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10618 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_commutative_operands_p@PLT
	testl	%eax, %eax
	je	.L4489
	.loc 1 10620 0
	movl	8(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 10621 0
	movl	12(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 10622 0
	movl	-8(%ebp), %eax
	movl	%eax, 12(%ebp)
	.loc 1 10623 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, 16(%ebp)
.L4489:
	.loc 1 10626 0
	movl	flag_force_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4491
	.loc 1 10628 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_not_mem@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10629 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	force_not_mem@PLT
	movl	%eax, 12(%ebp)
.L4491:
	.loc 1 10632 0
	call	do_pending_stack_adjust@PLT
	.loc 1 10634 0
	cmpl	$0, 20(%ebp)
	je	.L4493
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	unsigned_condition@PLT
	movl	%eax, -28(%ebp)
	jmp	.L4495
.L4493:
	movl	16(%ebp), %eax
	movl	%eax, -28(%ebp)
.L4495:
	movl	-28(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 10635 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_relational_operation@PLT
	movl	%eax, -8(%ebp)
	cmpl	$0, -8(%ebp)
	je	.L4496
	.loc 1 10636 0
	movl	-8(%ebp), %eax
	movl	%eax, -24(%ebp)
	jmp	.L4498
.L4496:
	.loc 1 10660 0
	movl	20(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_insn@PLT
	.loc 1 10665 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -24(%ebp)
.L4498:
	movl	-24(%ebp), %eax
	.loc 1 10667 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE92:
	.size	compare_from_rtx, .-compare_from_rtx
.globl do_compare_rtx_and_jump
	.type	do_compare_rtx_and_jump, @function
do_compare_rtx_and_jump:
.LFB93:
	.loc 1 10684 0
	pushl	%ebp
.LCFI363:
	movl	%esp, %ebp
.LCFI364:
	pushl	%ebx
.LCFI365:
	subl	$52, %esp
.LCFI366:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10687 0
	movl	$0, -8(%ebp)
	.loc 1 10691 0
	cmpl	$0, 36(%ebp)
	jne	.L4501
	movl	24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$2, %eax
	je	.L4501
	movl	24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$6, %eax
	je	.L4501
	movl	24(%ebp), %eax
	movl	mode_class@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	cmpl	$8, %eax
	je	.L4501
	.loc 1 10693 0
	movl	32(%ebp), %eax
	movl	%eax, 36(%ebp)
	.loc 1 10694 0
	movl	$0, 32(%ebp)
	.loc 1 10695 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	reverse_condition@PLT
	movl	%eax, 16(%ebp)
.L4501:
	.loc 1 10701 0
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_commutative_operands_p@PLT
	testl	%eax, %eax
	je	.L4506
	.loc 1 10703 0
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	.loc 1 10704 0
	movl	12(%ebp), %eax
	movl	%eax, 8(%ebp)
	.loc 1 10705 0
	movl	-12(%ebp), %eax
	movl	%eax, 12(%ebp)
	.loc 1 10706 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, 16(%ebp)
.L4506:
	.loc 1 10709 0
	movl	flag_force_mem@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	je	.L4508
	.loc 1 10711 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	force_not_mem@PLT
	movl	%eax, 8(%ebp)
	.loc 1 10712 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	force_not_mem@PLT
	movl	%eax, 12(%ebp)
.L4508:
	.loc 1 10715 0
	call	do_pending_stack_adjust@PLT
	.loc 1 10717 0
	cmpl	$0, 20(%ebp)
	je	.L4510
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	unsigned_condition@PLT
	movl	%eax, -24(%ebp)
	jmp	.L4512
.L4510:
	movl	16(%ebp), %eax
	movl	%eax, -24(%ebp)
.L4512:
	movl	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	.loc 1 10718 0
	movl	12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	simplify_relational_operation@PLT
	movl	%eax, -12(%ebp)
	cmpl	$0, -12(%ebp)
	je	.L4513
	.loc 1 10720 0
	movl	const_true_rtx@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, -12(%ebp)
	jne	.L4515
	.loc 1 10722 0
	cmpl	$0, 36(%ebp)
	je	.L4527
	.loc 1 10723 0
	movl	36(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	jmp	.L4527
.L4515:
	.loc 1 10727 0
	cmpl	$0, 32(%ebp)
	je	.L4527
	.loc 1 10728 0
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
	.loc 1 10730 0
	jmp	.L4527
.L4513:
	.loc 1 10755 0
	cmpl	$0, 36(%ebp)
	jne	.L4522
	.loc 1 10757 0
	movl	$1, -8(%ebp)
	.loc 1 10758 0
	call	gen_label_rtx@PLT
	movl	%eax, 36(%ebp)
.L4522:
	.loc 1 10761 0
	movl	36(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
	.loc 1 10764 0
	cmpl	$0, 32(%ebp)
	je	.L4524
	.loc 1 10765 0
	movl	32(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_jump@PLT
.L4524:
	.loc 1 10766 0
	cmpl	$0, -8(%ebp)
	je	.L4527
	.loc 1 10767 0
	movl	36(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
.L4527:
	.loc 1 10768 0
	addl	$52, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE93:
	.size	do_compare_rtx_and_jump, .-do_compare_rtx_and_jump
	.type	do_compare_and_jump, @function
do_compare_and_jump:
.LFB94:
	.loc 1 10786 0
	pushl	%ebp
.LCFI367:
	movl	%esp, %ebp
.LCFI368:
	pushl	%ebx
.LCFI369:
	subl	$84, %esp
.LCFI370:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10794 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -28(%ebp)
	.loc 1 10795 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L4542
	.loc 1 10798 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -24(%ebp)
	.loc 1 10799 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L4542
	.loc 1 10802 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 10803 0
	movl	-20(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
	.loc 1 10804 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L4532
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L4534
	movl	-16(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jbe	.L4532
.L4534:
	.loc 1 10812 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	.loc 1 10813 0
	movl	-20(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
.L4532:
	.loc 1 10815 0
	movl	-20(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 10816 0
	cmpl	$0, -12(%ebp)
	je	.L4536
	movl	16(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L4538
.L4536:
	movl	12(%ebp), %eax
	movl	%eax, -44(%ebp)
.L4538:
	movl	-44(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 10845 0
	call	emit_queue@PLT
	.loc 1 10847 0
	cmpl	$52, -16(%ebp)
	jne	.L4539
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, (%esp)
	call	expr_size@PLT
	movl	%eax, -40(%ebp)
	jmp	.L4541
.L4539:
	movl	$0, -40(%ebp)
.L4541:
	movl	24(%ebp), %eax
	movl	%eax, 28(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	do_compare_rtx_and_jump@PLT
.L4542:
	.loc 1 10851 0
	addl	$84, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE94:
	.size	do_compare_and_jump, .-do_compare_and_jump
	.section	.rodata
	.type	__FUNCTION__.27625, @object
	.size	__FUNCTION__.27625, 14
__FUNCTION__.27625:
	.string	"do_store_flag"
	.text
	.type	do_store_flag, @function
do_store_flag:
.LFB95:
	.loc 1 10879 0
	pushl	%ebp
.LCFI371:
	movl	%esp, %ebp
.LCFI372:
	pushl	%ebx
.LCFI373:
	subl	$164, %esp
.LCFI374:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 10884 0
	movl	$0, -48(%ebp)
	.loc 1 10888 0
	movl	12(%ebp), %eax
	movl	%eax, -28(%ebp)
	.loc 1 10896 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$98, %al
	jne	.L4544
	.loc 1 10897 0
	movl	$1, -48(%ebp)
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, 8(%ebp)
.L4544:
	.loc 1 10899 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -68(%ebp)
	.loc 1 10900 0
	movl	8(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, -64(%ebp)
	.loc 1 10903 0
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	-68(%ebp), %eax
	je	.L4546
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	-64(%ebp), %eax
	jne	.L4548
.L4546:
	.loc 1 10904 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -136(%ebp)
	jmp	.L4549
.L4548:
	.loc 1 10906 0
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
	.loc 1 10907 0
	movl	-60(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
	.loc 1 10908 0
	movl	-60(%ebp), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %eax
	movl	%eax, -44(%ebp)
	.loc 1 10912 0
	cmpl	$52, -52(%ebp)
	jne	.L4552
	.loc 1 10913 0
	movl	$0, -136(%ebp)
	jmp	.L4549
.L4553:
	.loc 1 10928 0
	movl	-68(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -68(%ebp)
.L4552:
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4554
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4554
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	jne	.L4559
.L4554:
	movl	-68(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L4559
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	-68(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	je	.L4553
	.loc 1 10929 0
	jmp	.L4559
.L4560:
	movl	-64(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -64(%ebp)
.L4559:
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$117, %al
	je	.L4561
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$116, %al
	je	.L4561
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$118, %al
	jne	.L4564
.L4561:
	movl	-64(%ebp), %eax
	movl	20(%eax), %edx
	movl	global_trees@GOT(%ebx), %eax
	movl	(%eax), %eax
	cmpl	%eax, %edx
	je	.L4564
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	movl	%eax, %edx
	shrb	%dl
	movl	-64(%ebp), %eax
	movl	20(%eax), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	cmpb	%al, %dl
	je	.L4560
.L4564:
	.loc 1 10938 0
	movl	8(%ebp), %eax
	movzbl	8(%eax), %eax
	movzbl	%al, %eax
	subl	$99, %eax
	movl	%eax, -140(%ebp)
	cmpl	$12, -140(%ebp)
	ja	.L4566
	movl	-140(%ebp), %eax
	sall	$2, %eax
	movl	.L4580@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L4580:
	.long	.L4567@GOTOFF
	.long	.L4568@GOTOFF
	.long	.L4569@GOTOFF
	.long	.L4570@GOTOFF
	.long	.L4571@GOTOFF
	.long	.L4572@GOTOFF
	.long	.L4573@GOTOFF
	.long	.L4574@GOTOFF
	.long	.L4575@GOTOFF
	.long	.L4576@GOTOFF
	.long	.L4577@GOTOFF
	.long	.L4578@GOTOFF
	.long	.L4579@GOTOFF
	.text
.L4571:
	.loc 1 10941 0
	movl	$113, -72(%ebp)
	.loc 1 10942 0
	jmp	.L4581
.L4572:
	.loc 1 10944 0
	movl	$112, -72(%ebp)
	.loc 1 10945 0
	jmp	.L4581
.L4567:
	.loc 1 10947 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L4582
	.loc 1 10948 0
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -44(%ebp)
	je	.L4584
	movl	$120, -132(%ebp)
	jmp	.L4586
.L4584:
	movl	$116, -132(%ebp)
.L4586:
	movl	-132(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L4581
.L4582:
	.loc 1 10950 0
	cmpl	$0, -44(%ebp)
	je	.L4588
	movl	$121, -128(%ebp)
	jmp	.L4590
.L4588:
	movl	$117, -128(%ebp)
.L4590:
	movl	-128(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 10951 0
	jmp	.L4581
.L4568:
	.loc 1 10953 0
	cmpl	$0, -44(%ebp)
	jne	.L4591
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_all_onesp@PLT
	testl	%eax, %eax
	je	.L4591
	.loc 1 10954 0
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	$117, -72(%ebp)
	.loc 1 10953 0
	jmp	.L4581
.L4591:
	.loc 1 10956 0
	cmpl	$0, -44(%ebp)
	je	.L4595
	movl	$120, -124(%ebp)
	jmp	.L4597
.L4595:
	movl	$116, -124(%ebp)
.L4597:
	movl	-124(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 10957 0
	jmp	.L4581
.L4569:
	.loc 1 10959 0
	cmpl	$0, -44(%ebp)
	jne	.L4598
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_all_onesp@PLT
	testl	%eax, %eax
	je	.L4598
	.loc 1 10960 0
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	$114, -72(%ebp)
	.loc 1 10959 0
	jmp	.L4581
.L4598:
	.loc 1 10962 0
	cmpl	$0, -44(%ebp)
	je	.L4602
	movl	$119, -120(%ebp)
	jmp	.L4604
.L4602:
	movl	$115, -120(%ebp)
.L4604:
	movl	-120(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 10963 0
	jmp	.L4581
.L4570:
	.loc 1 10965 0
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_onep@PLT
	testl	%eax, %eax
	je	.L4605
	.loc 1 10966 0
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -44(%ebp)
	je	.L4607
	movl	$119, -116(%ebp)
	jmp	.L4609
.L4607:
	movl	$115, -116(%ebp)
.L4609:
	movl	-116(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L4581
.L4605:
	.loc 1 10968 0
	cmpl	$0, -44(%ebp)
	je	.L4611
	movl	$118, -112(%ebp)
	jmp	.L4613
.L4611:
	movl	$114, -112(%ebp)
.L4613:
	movl	-112(%ebp), %eax
	movl	%eax, -72(%ebp)
	.loc 1 10969 0
	jmp	.L4581
.L4573:
	.loc 1 10972 0
	movl	$122, -72(%ebp)
	.loc 1 10973 0
	jmp	.L4581
.L4574:
	.loc 1 10975 0
	movl	$123, -72(%ebp)
	.loc 1 10976 0
	jmp	.L4581
.L4575:
	.loc 1 10978 0
	movl	$128, -72(%ebp)
	.loc 1 10979 0
	jmp	.L4581
.L4576:
	.loc 1 10981 0
	movl	$127, -72(%ebp)
	.loc 1 10982 0
	jmp	.L4581
.L4577:
	.loc 1 10984 0
	movl	$126, -72(%ebp)
	.loc 1 10985 0
	jmp	.L4581
.L4578:
	.loc 1 10987 0
	movl	$125, -72(%ebp)
	.loc 1 10988 0
	jmp	.L4581
.L4579:
	.loc 1 10990 0
	movl	$124, -72(%ebp)
	.loc 1 10991 0
	jmp	.L4581
.L4566:
	.loc 1 10994 0
	leal	__FUNCTION__.27625@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$10994, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4581:
	.loc 1 10998 0
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$27, %al
	je	.L4614
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L4616
.L4614:
	.loc 1 11000 0
	movl	-68(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -64(%ebp)
	.loc 1 11001 0
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	swap_condition@PLT
	movl	%eax, -72(%ebp)
.L4616:
	.loc 1 11010 0
	cmpl	$112, -72(%ebp)
	je	.L4617
	cmpl	$113, -72(%ebp)
	jne	.L4619
.L4617:
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$90, %al
	jne	.L4619
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4619
	movl	-68(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	integer_pow2p@PLT
	testl	%eax, %eax
	je	.L4619
.LBB169:
	.loc 1 11014 0
	movl	-68(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -16(%ebp)
	.loc 1 11015 0
	movl	-68(%ebp), %eax
	movl	24(%eax), %eax
	movl	%eax, (%esp)
	call	tree_log2@PLT
	movl	%eax, -12(%ebp)
	.loc 1 11021 0
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$85, %al
	jne	.L4623
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	movzbl	8(%eax), %eax
	cmpb	$26, %al
	jne	.L4623
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	movl	32(%eax), %edx
	movl	28(%eax), %eax
	orl	%edx, %eax
	testl	%eax, %eax
	jne	.L4623
	movl	-60(%ebp), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %eax
	cmpl	-12(%ebp), %eax
	jle	.L4623
	movl	-60(%ebp), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %edx
	movl	-12(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	call	compare_tree_int@PLT
	testl	%eax, %eax
	jns	.L4623
	.loc 1 11028 0
	movl	-16(%ebp), %eax
	movl	24(%eax), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%eax, %edx
	movl	-12(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -12(%ebp)
	.loc 1 11029 0
	movl	-16(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -16(%ebp)
.L4623:
	.loc 1 11035 0
	movl	-60(%ebp), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-12(%ebp), %eax
	je	.L4629
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4629
	cmpl	$4, -52(%ebp)
	je	.L4632
	cmpl	$53, -52(%ebp)
	je	.L4632
.L4629:
	movl	$1, -108(%ebp)
	jmp	.L4634
.L4632:
	movl	$0, -108(%ebp)
.L4634:
	movl	-108(%ebp), %eax
	movl	%eax, -8(%ebp)
	.loc 1 11043 0
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	get_subtarget
	testl	%eax, %eax
	je	.L4635
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-52(%ebp), %eax
	jne	.L4635
	movl	$1, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L4638
.L4635:
	.loc 1 11046 0
	movl	$0, -28(%ebp)
.L4638:
	.loc 1 11048 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -40(%ebp)
	.loc 1 11050 0
	cmpl	$0, -12(%ebp)
	je	.L4639
	.loc 1 11051 0
	movl	-12(%ebp), %eax
	movl	%eax, %edx
	sarl	$31, %edx
	movl	$0, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	size_int_wide@PLT
	movl	%eax, %edx
	movl	-8(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$85, (%esp)
	call	expand_shift@PLT
	movl	%eax, -40(%ebp)
.L4639:
	.loc 1 11054 0
	movl	-40(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	16(%ebp), %eax
	je	.L4641
	.loc 1 11055 0
	movl	-8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -40(%ebp)
.L4641:
	.loc 1 11057 0
	cmpl	$113, -72(%ebp)
	jne	.L4643
	cmpl	$0, -48(%ebp)
	je	.L4645
.L4643:
	cmpl	$112, -72(%ebp)
	jne	.L4646
	cmpl	$0, -48(%ebp)
	je	.L4646
.L4645:
	.loc 1 11058 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	80(%eax), %ecx
	movl	$3, 24(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -40(%ebp)
.L4646:
	.loc 1 11062 0
	movl	-60(%ebp), %eax
	movzwl	36(%eax), %eax
	andw	$511, %ax
	movzwl	%ax, %eax
	subl	$1, %eax
	cmpl	-12(%ebp), %eax
	je	.L4648
	.loc 1 11063 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_and@PLT
	movl	%eax, -40(%ebp)
.L4648:
	.loc 1 11065 0
	movl	-40(%ebp), %eax
	movl	%eax, -136(%ebp)
	jmp	.L4549
.L4619:
.LBE169:
	.loc 1 11069 0
	movl	$2, 8(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	can_compare_p@PLT
	testl	%eax, %eax
	jne	.L4650
	.loc 1 11070 0
	movl	$0, -136(%ebp)
	jmp	.L4549
.L4650:
	.loc 1 11072 0
	movl	-72(%ebp), %eax
	movl	setcc_gen_code@GOT(%ebx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -32(%ebp)
	.loc 1 11073 0
	cmpl	$529, -32(%ebp)
	je	.L4652
	cmpl	$0, 20(%ebp)
	je	.L4654
	movl	-32(%ebp), %edx
	movl	insn_data@GOT(%ebx), %ecx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$2, %eax
	addl	%ecx, %eax
	addl	$12, %eax
	movl	(%eax), %eax
	movzwl	8(%eax), %eax
	movzwl	%ax, %eax
	cmpl	16(%ebp), %eax
	je	.L4654
.L4652:
	.loc 1 11078 0
	cmpl	$117, -72(%ebp)
	jne	.L4656
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4656
	jmp	.L4654
.L4656:
	cmpl	$0, 20(%ebp)
	jne	.L4659
	cmpl	$114, -72(%ebp)
	jne	.L4659
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	integer_zerop@PLT
	testl	%eax, %eax
	je	.L4659
	jmp	.L4654
.L4659:
	.loc 1 11081 0
	cmpl	$0, 20(%ebp)
	jne	.L4663
	cmpl	$112, -72(%ebp)
	je	.L4665
	cmpl	$113, -72(%ebp)
	jne	.L4663
.L4665:
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$8, %al
	je	.L4663
	movl	optab_table@GOT(%ebx), %eax
	movl	136(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	jne	.L4654
	movl	optab_table@GOT(%ebx), %eax
	movl	148(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	je	.L4663
	jmp	.L4654
.L4663:
	.loc 1 11090 0
	movl	$0, -136(%ebp)
	jmp	.L4549
.L4654:
	.loc 1 11093 0
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	get_subtarget
	testl	%eax, %eax
	je	.L4670
	movl	-28(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	cmpl	-52(%ebp), %eax
	jne	.L4670
	movl	$1, 8(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	safe_from_p@PLT
	testl	%eax, %eax
	jne	.L4673
.L4670:
	.loc 1 11096 0
	movl	$0, -28(%ebp)
.L4673:
	.loc 1 11098 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -40(%ebp)
	.loc 1 11099 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -36(%ebp)
	.loc 1 11101 0
	cmpl	$0, 12(%ebp)
	jne	.L4674
	.loc 1 11102 0
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L4674:
	.loc 1 11108 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	queued_subexp_p@PLT
	testl	%eax, %eax
	je	.L4676
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -104(%ebp)
	jmp	.L4678
.L4676:
	movl	-36(%ebp), %eax
	movl	%eax, -104(%ebp)
.L4678:
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	queued_subexp_p@PLT
	testl	%eax, %eax
	je	.L4679
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_rtx@PLT
	movl	%eax, -100(%ebp)
	jmp	.L4681
.L4679:
	movl	-40(%ebp), %eax
	movl	%eax, -100(%ebp)
.L4681:
	movl	$1, 24(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 20(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_store_flag@PLT
	movl	%eax, -24(%ebp)
	.loc 1 11113 0
	cmpl	$0, -24(%ebp)
	je	.L4682
	.loc 1 11115 0
	cmpl	$0, -48(%ebp)
	je	.L4684
	.loc 1 11116 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %edx
	movl	optab_table@GOT(%ebx), %eax
	movl	80(%eax), %ecx
	movl	$3, 24(%esp)
	movl	$0, 20(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_binop@PLT
	movl	%eax, -24(%ebp)
.L4684:
	.loc 1 11118 0
	movl	-24(%ebp), %eax
	movl	%eax, -136(%ebp)
	jmp	.L4549
.L4682:
	.loc 1 11122 0
	movl	12(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$71, %ax
	jne	.L4686
	movl	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	jne	.L4686
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	reg_mentioned_p@PLT
	testl	%eax, %eax
	je	.L4689
.L4686:
	.loc 1 11124 0
	movl	12(%ebp), %eax
	movzbl	2(%eax), %eax
	movzbl	%al, %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, 12(%ebp)
.L4689:
	.loc 1 11126 0
	cmpl	$0, -48(%ebp)
	je	.L4690
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -96(%ebp)
	jmp	.L4692
.L4690:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, -96(%ebp)
.L4692:
	movl	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 11127 0
	movl	$0, 20(%esp)
	movl	-52(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	-44(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-72(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	compare_from_rtx@PLT
	movl	%eax, -24(%ebp)
	.loc 1 11129 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	cmpw	$64, %ax
	jne	.L4693
	.loc 1 11130 0
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-24(%ebp), %eax
	jne	.L4695
	cmpl	$0, -48(%ebp)
	je	.L4697
.L4695:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	cmpl	-24(%ebp), %eax
	je	.L4698
	cmpl	$0, -48(%ebp)
	je	.L4698
.L4697:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -92(%ebp)
	jmp	.L4700
.L4698:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, -92(%ebp)
.L4700:
	movl	-92(%ebp), %eax
	movl	%eax, -136(%ebp)
	jmp	.L4549
.L4693:
	.loc 1 11140 0
	movl	-24(%ebp), %eax
	movzwl	(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -72(%ebp)
	.loc 1 11142 0
	call	gen_label_rtx@PLT
	movl	%eax, -20(%ebp)
	.loc 1 11143 0
	movl	-72(%ebp), %edx
	movl	bcc_gen_fctn@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	testl	%eax, %eax
	jne	.L4701
	.loc 1 11144 0
	leal	__FUNCTION__.27625@GOTOFF(%ebx), %eax
	movl	%eax, 8(%esp)
	movl	$11144, 4(%esp)
	leal	.LC0@GOTOFF(%ebx), %eax
	movl	%eax, (%esp)
	call	fancy_abort@PLT
.L4701:
	.loc 1 11146 0
	movl	-72(%ebp), %edx
	movl	bcc_gen_fctn@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, (%esp)
	call	emit_jump_insn@PLT
	.loc 1 11147 0
	cmpl	$0, -48(%ebp)
	je	.L4703
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	260(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L4705
.L4703:
	movl	const_int_rtx@GOT(%ebx), %eax
	movl	256(%eax), %eax
	movl	%eax, -88(%ebp)
.L4705:
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_move_insn@PLT
	.loc 1 11148 0
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_label@PLT
	.loc 1 11150 0
	movl	12(%ebp), %eax
	movl	%eax, -136(%ebp)
.L4549:
	movl	-136(%ebp), %eax
	.loc 1 11151 0
	addl	$164, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE95:
	.size	do_store_flag, .-do_store_flag
.globl case_values_threshold
	.type	case_values_threshold, @function
case_values_threshold:
.LFB96:
	.loc 1 11170 0
	pushl	%ebp
.LCFI375:
	movl	%esp, %ebp
.LCFI376:
	subl	$4, %esp
.LCFI377:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 11171 0
	movl	target_flags@GOT(%ecx), %eax
	movl	(%eax), %eax
	andl	$16384, %eax
	testl	%eax, %eax
	je	.L4708
	movl	$4, -4(%ebp)
	jmp	.L4710
.L4708:
	movl	$5, -4(%ebp)
.L4710:
	movl	-4(%ebp), %eax
	.loc 1 11172 0
	leave
	ret
.LFE96:
	.size	case_values_threshold, .-case_values_threshold
.globl try_casesi
	.type	try_casesi, @function
try_casesi:
.LFB97:
	.loc 1 11182 0
	pushl	%ebp
.LCFI378:
	movl	%esp, %ebp
.LCFI379:
	pushl	%ebx
.LCFI380:
	subl	$68, %esp
.LCFI381:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11183 0
	movl	$4, -36(%ebp)
	.loc 1 11184 0
	movl	-36(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	movzwl	%ax, %eax
	movl	%eax, -32(%ebp)
	.loc 1 11188 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$16384, %eax
	testl	%eax, %eax
	jne	.L4713
	.loc 1 11189 0
	movl	$0, -40(%ebp)
	jmp	.L4715
.L4713:
	.loc 1 11192 0
	movl	8(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %ecx
	movl	-36(%ebp), %edx
	movl	mode_bitsize@GOT(%ebx), %eax
	movzwl	(%eax,%edx,2), %eax
	cmpw	%ax, %cx
	jbe	.L4716
.LBB170:
	.loc 1 11194 0
	movl	8(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -12(%ebp)
	.loc 1 11195 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -8(%ebp)
	.loc 1 11198 0
	movl	16(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$61, (%esp)
	call	build@PLT
	movl	%eax, 12(%ebp)
	.loc 1 11200 0
	movl	global_trees@GOT(%ebx), %eax
	movl	44(%eax), %eax
	movl	%eax, 16(%ebp)
	.loc 1 11201 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -20(%ebp)
	.loc 1 11202 0
	movl	28(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$1, 20(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	$121, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
	.loc 1 11205 0
	movl	$0, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, -20(%ebp)
	jmp	.L4718
.L4716:
.LBE170:
	.loc 1 11209 0
	movl	8(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	cmpl	-36(%ebp), %eax
	je	.L4719
	.loc 1 11211 0
	movl	lang_hooks@GOT(%ebx), %eax
	movl	264(%eax), %edx
	movl	-32(%ebp), %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	*%edx
	movl	%eax, %edx
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	convert@PLT
	movl	%eax, 12(%ebp)
	.loc 1 11213 0
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, 8(%ebp)
.L4719:
	.loc 1 11216 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -20(%ebp)
.L4718:
	.loc 1 11218 0
	call	emit_queue@PLT
	.loc 1 11219 0
	movl	$0, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, -20(%ebp)
	.loc 1 11220 0
	call	do_pending_stack_adjust@PLT
	.loc 1 11222 0
	movl	insn_data@GOT(%ebx), %eax
	movl	10192(%eax), %eax
	movzwl	8(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -16(%ebp)
	.loc 1 11223 0
	movl	insn_data@GOT(%ebx), %eax
	movl	10192(%eax), %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L4721
	.loc 1 11225 0
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -20(%ebp)
.L4721:
	.loc 1 11227 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -28(%ebp)
	.loc 1 11229 0
	movl	insn_data@GOT(%ebx), %eax
	movl	10192(%eax), %eax
	addl	$12, %eax
	movzwl	8(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -16(%ebp)
	.loc 1 11230 0
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %ecx
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	%ecx, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, -28(%ebp)
	.loc 1 11232 0
	movl	insn_data@GOT(%ebx), %eax
	movl	10192(%eax), %eax
	addl	$12, %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L4723
	.loc 1 11234 0
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -28(%ebp)
.L4723:
	.loc 1 11236 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -24(%ebp)
	.loc 1 11238 0
	movl	insn_data@GOT(%ebx), %eax
	movl	10192(%eax), %eax
	addl	$24, %eax
	movzwl	8(%eax), %eax
	movzwl	%ax, %eax
	movl	%eax, -16(%ebp)
	.loc 1 11239 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %ecx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	%ecx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, -24(%ebp)
	.loc 1 11241 0
	movl	insn_data@GOT(%ebx), %eax
	movl	10192(%eax), %eax
	addl	$24, %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	*%edx
	testl	%eax, %eax
	jne	.L4725
	.loc 1 11243 0
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	copy_to_mode_reg@PLT
	movl	%eax, -24(%ebp)
.L4725:
	.loc 1 11245 0
	movl	28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_casesi@PLT
	movl	%eax, (%esp)
	call	emit_jump_insn@PLT
	.loc 1 11247 0
	movl	$1, -40(%ebp)
.L4715:
	movl	-40(%ebp), %eax
	.loc 1 11248 0
	addl	$68, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE97:
	.size	try_casesi, .-try_casesi
	.type	do_tablejump, @function
do_tablejump:
.LFB98:
	.loc 1 11271 0
	pushl	%ebp
.LCFI382:
	movl	%esp, %ebp
.LCFI383:
	pushl	%ebx
.LCFI384:
	subl	$132, %esp
.LCFI385:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11274 0
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%eax), %ecx
	movl	%edx, -104(%ebp)
	movl	%ecx, -100(%ebp)
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %eax
	movl	304(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	%eax, %ecx
	sarl	$31, %ecx
	movl	%ecx, -92(%ebp)
	movl	-92(%ebp), %eax
	cmpl	%eax, -100(%ebp)
	jl	.L4729
	movl	-92(%ebp), %edx
	cmpl	%edx, -100(%ebp)
	jg	.L4731
	movl	-96(%ebp), %ecx
	cmpl	%ecx, -104(%ebp)
	jbe	.L4729
.L4731:
	.loc 1 11275 0
	movl	cfun@GOT(%ebx), %eax
	movl	(%eax), %ecx
	movl	16(%ebp), %eax
	movl	8(%eax), %edx
	movl	4(%eax), %eax
	movl	%eax, 304(%ecx)
.L4729:
	.loc 1 11285 0
	movl	24(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	$1, 20(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	$0, 12(%esp)
	movl	$119, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	emit_cmp_and_jump_insns@PLT
	.loc 1 11290 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4732
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4732
	movl	$5, -88(%ebp)
	jmp	.L4735
.L4732:
	movl	$4, -88(%ebp)
.L4735:
	movl	-88(%ebp), %eax
	cmpl	12(%ebp), %eax
	je	.L4736
	.loc 1 11291 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4738
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4738
	movl	$5, -84(%ebp)
	jmp	.L4741
.L4738:
	movl	$4, -84(%ebp)
.L4741:
	movl	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-84(%ebp), %edx
	movl	%edx, (%esp)
	call	convert_to_mode@PLT
	movl	%eax, 8(%ebp)
.L4736:
	.loc 1 11309 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4742
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4742
	movl	$5, -80(%ebp)
	jmp	.L4745
.L4742:
	movl	$4, -80(%ebp)
.L4745:
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-80(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	$77, (%esp)
	call	gen_rtx_fmt_u00@PLT
	movl	%eax, -76(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L4746
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4748
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4748
	movl	$5, -68(%ebp)
	jmp	.L4751
.L4748:
	movl	$4, -68(%ebp)
.L4751:
	movl	-68(%ebp), %eax
	movl	%eax, -72(%ebp)
	jmp	.L4752
.L4746:
	movl	$3, -72(%ebp)
.L4752:
	movl	-72(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movzbl	%cl, %eax
	movl	$0, %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$0, (%esp)
	call	gen_rtx_CONST_INT@PLT
	movl	%eax, -64(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4753
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4753
	movl	$5, -60(%ebp)
	jmp	.L4756
.L4753:
	movl	$4, -60(%ebp)
.L4756:
	movl	-64(%ebp), %edx
	movl	%edx, 12(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-60(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	$88, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, -56(%ebp)
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4757
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4757
	movl	$5, -52(%ebp)
	jmp	.L4760
.L4757:
	movl	$4, -52(%ebp)
.L4760:
	movl	-76(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-56(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	-52(%ebp), %ecx
	movl	%ecx, 4(%esp)
	movl	$85, (%esp)
	call	gen_rtx_fmt_ee@PLT
	movl	%eax, 8(%ebp)
	.loc 1 11318 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L4761
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4763
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4763
	movl	$5, -44(%ebp)
	jmp	.L4766
.L4763:
	movl	$4, -44(%ebp)
.L4766:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	jmp	.L4767
.L4761:
	movl	$3, -48(%ebp)
.L4767:
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %edx
	movl	%edx, (%esp)
	call	memory_address_noforce@PLT
	movl	%eax, 8(%ebp)
	.loc 1 11319 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L4768
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4770
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4770
	movl	$5, -36(%ebp)
	jmp	.L4773
.L4770:
	movl	$4, -36(%ebp)
.L4773:
	movl	-36(%ebp), %ecx
	movl	%ecx, -40(%ebp)
	jmp	.L4774
.L4768:
	movl	$3, -40(%ebp)
.L4774:
	movl	-40(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_reg_rtx@PLT
	movl	%eax, -16(%ebp)
	.loc 1 11320 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L4775
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4777
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L4777
	movl	$5, -28(%ebp)
	jmp	.L4780
.L4777:
	movl	$4, -28(%ebp)
.L4780:
	movl	-28(%ebp), %edx
	movl	%edx, -32(%ebp)
	jmp	.L4781
.L4775:
	movl	$3, -32(%ebp)
.L4781:
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-32(%ebp), %ecx
	movl	%ecx, (%esp)
	call	gen_rtx_MEM@PLT
	movl	%eax, -12(%ebp)
	.loc 1 11321 0
	movl	-12(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$4, %eax
	movb	%al, 3(%edx)
	.loc 1 11322 0
	movl	-12(%ebp), %edx
	movzbl	3(%edx), %eax
	orl	$2, %eax
	movb	%al, 3(%edx)
	.loc 1 11323 0
	movl	$0, 8(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	convert_move@PLT
	.loc 1 11325 0
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	gen_tablejump@PLT
	movl	%eax, (%esp)
	call	emit_jump_insn@PLT
	.loc 1 11329 0
	movl	target_flags@GOT(%ebx), %eax
	movl	(%eax), %eax
	andl	$1048576, %eax
	testl	%eax, %eax
	jne	.L4785
	movl	flag_pic@GOT(%ebx), %eax
	movl	(%eax), %eax
	testl	%eax, %eax
	jne	.L4785
	.loc 1 11330 0
	call	emit_barrier@PLT
.L4785:
	.loc 1 11331 0
	addl	$132, %esp
	popl	%ebx
	popl	%ebp
	ret
.LFE98:
	.size	do_tablejump, .-do_tablejump
.globl try_tablejump
	.type	try_tablejump, @function
try_tablejump:
.LFB99:
	.loc 1 11338 0
	pushl	%ebp
.LCFI386:
	movl	%esp, %ebp
.LCFI387:
	pushl	%esi
.LCFI388:
	pushl	%ebx
.LCFI389:
	subl	$48, %esp
.LCFI390:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11344 0
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%eax, %esi
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	convert@PLT
	movl	%esi, 12(%esp)
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$61, (%esp)
	call	build@PLT
	movl	%eax, (%esp)
	call	fold@PLT
	movl	%eax, 12(%ebp)
	.loc 1 11347 0
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, -12(%ebp)
	.loc 1 11348 0
	call	emit_queue@PLT
	.loc 1 11349 0
	movl	$0, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	protect_from_queue@PLT
	movl	%eax, -12(%ebp)
	.loc 1 11350 0
	call	do_pending_stack_adjust@PLT
	.loc 1 11352 0
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	9(%eax), %eax
	shrb	$5, %al
	andl	$1, %eax
	movzbl	%al, %esi
	movl	$0, 12(%esp)
	movl	$0, 8(%esp)
	movl	$0, 4(%esp)
	movl	20(%ebp), %eax
	movl	%eax, (%esp)
	call	expand_expr@PLT
	movl	%eax, %ecx
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %edx
	movl	8(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%esi, 12(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	convert_modes@PLT
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %ecx
	movl	28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	do_tablejump
	.loc 1 11359 0
	movl	$1, %eax
	.loc 1 11360 0
	addl	$48, %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
.LFE99:
	.size	try_tablejump, .-try_tablejump
.globl vector_mode_valid_p
	.type	vector_mode_valid_p, @function
vector_mode_valid_p:
.LFB100:
	.loc 1 11369 0
	pushl	%ebp
.LCFI391:
	movl	%esp, %ebp
.LCFI392:
	subl	$20, %esp
.LCFI393:
	call	__i686.get_pc_thunk.cx
	addl	$_GLOBAL_OFFSET_TABLE_, %ecx
	.loc 1 11370 0
	movl	8(%ebp), %eax
	movl	mode_class@GOT(%ecx), %edx
	movl	(%edx,%eax,4), %eax
	movl	%eax, -8(%ebp)
	.loc 1 11374 0
	cmpl	$7, -8(%ebp)
	je	.L4789
	cmpl	$8, -8(%ebp)
	je	.L4789
	.loc 1 11376 0
	movl	$0, -20(%ebp)
	jmp	.L4792
.L4789:
	.loc 1 11382 0
	movl	8(%ebp), %edx
	movl	inner_mode_array@GOT(%ecx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -4(%ebp)
	.loc 1 11389 0
	movl	optab_table@GOT(%ecx), %eax
	movl	120(%eax), %edx
	movl	-4(%ebp), %eax
	movl	4(%edx,%eax,8), %eax
	cmpl	$529, %eax
	setne	%al
	movzbl	%al, %eax
	movl	%eax, -20(%ebp)
.L4792:
	movl	-20(%ebp), %eax
	.loc 1 11390 0
	leave
	ret
.LFE100:
	.size	vector_mode_valid_p, .-vector_mode_valid_p
	.type	const_vector_from_tree, @function
const_vector_from_tree:
.LFB101:
	.loc 1 11396 0
	pushl	%ebp
.LCFI394:
	movl	%esp, %ebp
.LCFI395:
	pushl	%edi
.LCFI396:
	pushl	%esi
.LCFI397:
	pushl	%ebx
.LCFI398:
	subl	$76, %esp
.LCFI399:
	call	__i686.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	.loc 1 11402 0
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movzbl	37(%eax), %eax
	shrb	%al
	movzbl	%al, %eax
	movl	%eax, -16(%ebp)
	.loc 1 11404 0
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	is_zeros_p
	testl	%eax, %eax
	je	.L4795
	.loc 1 11405 0
	movl	-16(%ebp), %edx
	movl	const_tiny_rtx@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %edx
	movl	%edx, -56(%ebp)
	jmp	.L4797
.L4795:
	.loc 1 11407 0
	movl	-16(%ebp), %eax
	movl	mode_unit_size@GOT(%ebx), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L4798
	movl	-16(%ebp), %edx
	movl	mode_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-16(%ebp), %edx
	movl	mode_unit_size@GOT(%ebx), %eax
	movzbl	(%eax,%edx), %edx
	movzbw	%cl, %ax
	divb	%dl
	movzbl	%al, %eax
	movl	%eax, -52(%ebp)
	jmp	.L4800
.L4798:
	movl	$0, -52(%ebp)
.L4800:
	movl	-52(%ebp), %eax
	movl	%eax, -36(%ebp)
	.loc 1 11408 0
	movl	-16(%ebp), %edx
	movl	inner_mode_array@GOT(%ebx), %eax
	movl	(%eax,%edx,4), %eax
	movl	%eax, -20(%ebp)
	.loc 1 11410 0
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	rtvec_alloc@PLT
	movl	%eax, -40(%ebp)
	.loc 1 11412 0
	movl	8(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -28(%ebp)
	.loc 1 11413 0
	movl	$0, -32(%ebp)
	jmp	.L4801
.L4802:
	.loc 1 11415 0
	movl	-28(%ebp), %eax
	movl	20(%eax), %eax
	movl	%eax, -24(%ebp)
	.loc 1 11417 0
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	$27, %al
	jne	.L4803
	.loc 1 11418 0
	movl	-32(%ebp), %esi
	movl	-24(%ebp), %eax
	movl	20(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	(%edx), %eax
	movl	%eax, (%esp)
	movl	4(%edx), %eax
	movl	%eax, 4(%esp)
	movl	8(%edx), %eax
	movl	%eax, 8(%esp)
	movl	12(%edx), %eax
	movl	%eax, 12(%esp)
	movl	16(%edx), %eax
	movl	%eax, 16(%esp)
	movl	20(%edx), %eax
	movl	%eax, 20(%esp)
	call	const_double_from_real_value@PLT
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax,%esi,4)
	jmp	.L4805
.L4803:
	.loc 1 11421 0
	movl	-32(%ebp), %ecx
	movl	%ecx, -48(%ebp)
	movl	-24(%ebp), %eax
	movl	28(%eax), %esi
	movl	32(%eax), %edi
	movl	-24(%ebp), %eax
	movl	24(%eax), %edx
	movl	20(%eax), %eax
	movl	%edx, %ecx
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%edx, (%esp)
	movl	%ecx, 4(%esp)
	call	immed_double_const@PLT
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	-48(%ebp), %ecx
	movl	%edx, 4(%eax,%ecx,4)
.L4805:
	.loc 1 11413 0
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	addl	$1, -32(%ebp)
.L4801:
	cmpl	$0, -28(%ebp)
	jne	.L4802
	.loc 1 11426 0
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-16(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$66, (%esp)
	call	gen_rtx_fmt_E@PLT
	movl	%eax, -56(%ebp)
.L4797:
	movl	-56(%ebp), %eax
	.loc 1 11427 0
	addl	$76, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
.LFE101:
	.size	const_vector_from_tree, .-const_vector_from_tree
.globl gt_ggc_r_gt_expr_h
	.section	.data.rel.ro,"aw",@progbits
	.align 32
	.type	gt_ggc_r_gt_expr_h, @object
	.size	gt_ggc_r_gt_expr_h, 48
gt_ggc_r_gt_expr_h:
	.long	block_clear_fn
	.long	1
	.long	4
	.long	gt_ggc_mx_lang_tree_node
	.long	block_move_fn
	.long	1
	.long	4
	.long	gt_ggc_mx_lang_tree_node
	.long	0
	.long	0
	.long	0
	.long	0
	.local	direct_load
	.comm	direct_load,54,32
	.local	direct_store
	.comm	direct_store,54,32
	.local	float_extend_from_mem
	.comm	float_extend_from_mem,2916,32
	.local	block_move_fn
	.comm	block_move_fn,4,4
	.local	block_clear_fn
	.comm	block_clear_fn,4,4
	.comm	cse_not_expected,4,4
	.comm	movstr_optab,216,32
	.comm	clrstr_optab,216,32
	.section	.debug_frame,"",@progbits
.Lframe0:
	.long	.LECIE0-.LSCIE0
.LSCIE0:
	.long	0xffffffff
	.byte	0x1
	.string	""
	.uleb128 0x1
	.sleb128 -4
	.byte	0x8
	.byte	0xc
	.uleb128 0x4
	.uleb128 0x4
	.byte	0x88
	.uleb128 0x1
	.align 4
.LECIE0:
.LSFDE0:
	.long	.LEFDE0-.LASFDE0
.LASFDE0:
	.long	.Lframe0
	.long	.LFB15
	.long	.LFE15-.LFB15
	.byte	0x4
	.long	.LCFI0-.LFB15
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI3-.LCFI1
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE0:
.LSFDE2:
	.long	.LEFDE2-.LASFDE2
.LASFDE2:
	.long	.Lframe0
	.long	.LFB16
	.long	.LFE16-.LFB16
	.byte	0x4
	.long	.LCFI4-.LFB16
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI5-.LCFI4
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI8-.LCFI5
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE2:
.LSFDE4:
	.long	.LEFDE4-.LASFDE4
.LASFDE4:
	.long	.Lframe0
	.long	.LFB17
	.long	.LFE17-.LFB17
	.byte	0x4
	.long	.LCFI9-.LFB17
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI10-.LCFI9
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI12-.LCFI10
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE4:
.LSFDE6:
	.long	.LEFDE6-.LASFDE6
.LASFDE6:
	.long	.Lframe0
	.long	.LFB18
	.long	.LFE18-.LFB18
	.byte	0x4
	.long	.LCFI13-.LFB18
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI14-.LCFI13
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI17-.LCFI14
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE6:
.LSFDE8:
	.long	.LEFDE8-.LASFDE8
.LASFDE8:
	.long	.Lframe0
	.long	.LFB19
	.long	.LFE19-.LFB19
	.byte	0x4
	.long	.LCFI18-.LFB19
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI19-.LCFI18
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI22-.LCFI19
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE8:
.LSFDE10:
	.long	.LEFDE10-.LASFDE10
.LASFDE10:
	.long	.Lframe0
	.long	.LFB20
	.long	.LFE20-.LFB20
	.byte	0x4
	.long	.LCFI23-.LFB20
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI24-.LCFI23
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI26-.LCFI24
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE10:
.LSFDE12:
	.long	.LEFDE12-.LASFDE12
.LASFDE12:
	.long	.Lframe0
	.long	.LFB21
	.long	.LFE21-.LFB21
	.byte	0x4
	.long	.LCFI27-.LFB21
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI28-.LCFI27
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI30-.LCFI28
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE12:
.LSFDE14:
	.long	.LEFDE14-.LASFDE14
.LASFDE14:
	.long	.Lframe0
	.long	.LFB22
	.long	.LFE22-.LFB22
	.byte	0x4
	.long	.LCFI31-.LFB22
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI32-.LCFI31
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI35-.LCFI32
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE14:
.LSFDE16:
	.long	.LEFDE16-.LASFDE16
.LASFDE16:
	.long	.Lframe0
	.long	.LFB23
	.long	.LFE23-.LFB23
	.byte	0x4
	.long	.LCFI36-.LFB23
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI37-.LCFI36
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI39-.LCFI37
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE16:
.LSFDE18:
	.long	.LEFDE18-.LASFDE18
.LASFDE18:
	.long	.Lframe0
	.long	.LFB24
	.long	.LFE24-.LFB24
	.byte	0x4
	.long	.LCFI40-.LFB24
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI41-.LCFI40
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI45-.LCFI41
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE18:
.LSFDE20:
	.long	.LEFDE20-.LASFDE20
.LASFDE20:
	.long	.Lframe0
	.long	.LFB25
	.long	.LFE25-.LFB25
	.byte	0x4
	.long	.LCFI46-.LFB25
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI47-.LCFI46
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE20:
.LSFDE22:
	.long	.LEFDE22-.LASFDE22
.LASFDE22:
	.long	.Lframe0
	.long	.LFB26
	.long	.LFE26-.LFB26
	.byte	0x4
	.long	.LCFI49-.LFB26
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI50-.LCFI49
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI53-.LCFI50
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE22:
.LSFDE24:
	.long	.LEFDE24-.LASFDE24
.LASFDE24:
	.long	.Lframe0
	.long	.LFB27
	.long	.LFE27-.LFB27
	.byte	0x4
	.long	.LCFI54-.LFB27
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI55-.LCFI54
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI59-.LCFI55
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE24:
.LSFDE26:
	.long	.LEFDE26-.LASFDE26
.LASFDE26:
	.long	.Lframe0
	.long	.LFB28
	.long	.LFE28-.LFB28
	.byte	0x4
	.long	.LCFI60-.LFB28
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI61-.LCFI60
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI65-.LCFI61
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE26:
.LSFDE28:
	.long	.LEFDE28-.LASFDE28
.LASFDE28:
	.long	.Lframe0
	.long	.LFB29
	.long	.LFE29-.LFB29
	.byte	0x4
	.long	.LCFI66-.LFB29
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI67-.LCFI66
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI69-.LCFI67
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE28:
.LSFDE30:
	.long	.LEFDE30-.LASFDE30
.LASFDE30:
	.long	.Lframe0
	.long	.LFB30
	.long	.LFE30-.LFB30
	.byte	0x4
	.long	.LCFI70-.LFB30
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI71-.LCFI70
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI73-.LCFI71
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE30:
.LSFDE32:
	.long	.LEFDE32-.LASFDE32
.LASFDE32:
	.long	.Lframe0
	.long	.LFB31
	.long	.LFE31-.LFB31
	.byte	0x4
	.long	.LCFI74-.LFB31
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI75-.LCFI74
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI79-.LCFI75
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE32:
.LSFDE34:
	.long	.LEFDE34-.LASFDE34
.LASFDE34:
	.long	.Lframe0
	.long	.LFB32
	.long	.LFE32-.LFB32
	.byte	0x4
	.long	.LCFI80-.LFB32
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI81-.LCFI80
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI83-.LCFI81
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE34:
.LSFDE36:
	.long	.LEFDE36-.LASFDE36
.LASFDE36:
	.long	.Lframe0
	.long	.LFB33
	.long	.LFE33-.LFB33
	.byte	0x4
	.long	.LCFI84-.LFB33
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI85-.LCFI84
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI88-.LCFI85
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE36:
.LSFDE38:
	.long	.LEFDE38-.LASFDE38
.LASFDE38:
	.long	.Lframe0
	.long	.LFB34
	.long	.LFE34-.LFB34
	.byte	0x4
	.long	.LCFI89-.LFB34
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI90-.LCFI89
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI92-.LCFI90
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE38:
.LSFDE40:
	.long	.LEFDE40-.LASFDE40
.LASFDE40:
	.long	.Lframe0
	.long	.LFB35
	.long	.LFE35-.LFB35
	.byte	0x4
	.long	.LCFI93-.LFB35
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI94-.LCFI93
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI96-.LCFI94
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE40:
.LSFDE42:
	.long	.LEFDE42-.LASFDE42
.LASFDE42:
	.long	.Lframe0
	.long	.LFB36
	.long	.LFE36-.LFB36
	.byte	0x4
	.long	.LCFI97-.LFB36
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI98-.LCFI97
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI101-.LCFI98
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE42:
.LSFDE44:
	.long	.LEFDE44-.LASFDE44
.LASFDE44:
	.long	.Lframe0
	.long	.LFB37
	.long	.LFE37-.LFB37
	.byte	0x4
	.long	.LCFI102-.LFB37
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI103-.LCFI102
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI106-.LCFI103
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE44:
.LSFDE46:
	.long	.LEFDE46-.LASFDE46
.LASFDE46:
	.long	.Lframe0
	.long	.LFB38
	.long	.LFE38-.LFB38
	.byte	0x4
	.long	.LCFI107-.LFB38
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI108-.LCFI107
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI111-.LCFI108
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE46:
.LSFDE48:
	.long	.LEFDE48-.LASFDE48
.LASFDE48:
	.long	.Lframe0
	.long	.LFB39
	.long	.LFE39-.LFB39
	.byte	0x4
	.long	.LCFI112-.LFB39
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI113-.LCFI112
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI117-.LCFI113
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE48:
.LSFDE50:
	.long	.LEFDE50-.LASFDE50
.LASFDE50:
	.long	.Lframe0
	.long	.LFB40
	.long	.LFE40-.LFB40
	.byte	0x4
	.long	.LCFI118-.LFB40
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI119-.LCFI118
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI121-.LCFI119
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE50:
.LSFDE52:
	.long	.LEFDE52-.LASFDE52
.LASFDE52:
	.long	.Lframe0
	.long	.LFB41
	.long	.LFE41-.LFB41
	.byte	0x4
	.long	.LCFI122-.LFB41
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI123-.LCFI122
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI127-.LCFI123
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE52:
.LSFDE54:
	.long	.LEFDE54-.LASFDE54
.LASFDE54:
	.long	.Lframe0
	.long	.LFB42
	.long	.LFE42-.LFB42
	.byte	0x4
	.long	.LCFI128-.LFB42
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI129-.LCFI128
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI133-.LCFI129
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE54:
.LSFDE56:
	.long	.LEFDE56-.LASFDE56
.LASFDE56:
	.long	.Lframe0
	.long	.LFB43
	.long	.LFE43-.LFB43
	.byte	0x4
	.long	.LCFI134-.LFB43
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI135-.LCFI134
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI138-.LCFI135
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE56:
.LSFDE58:
	.long	.LEFDE58-.LASFDE58
.LASFDE58:
	.long	.Lframe0
	.long	.LFB44
	.long	.LFE44-.LFB44
	.byte	0x4
	.long	.LCFI139-.LFB44
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI140-.LCFI139
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI142-.LCFI140
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE58:
.LSFDE60:
	.long	.LEFDE60-.LASFDE60
.LASFDE60:
	.long	.Lframe0
	.long	.LFB45
	.long	.LFE45-.LFB45
	.byte	0x4
	.long	.LCFI143-.LFB45
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI144-.LCFI143
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI146-.LCFI144
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE60:
.LSFDE62:
	.long	.LEFDE62-.LASFDE62
.LASFDE62:
	.long	.Lframe0
	.long	.LFB46
	.long	.LFE46-.LFB46
	.byte	0x4
	.long	.LCFI147-.LFB46
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI148-.LCFI147
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI150-.LCFI148
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE62:
.LSFDE64:
	.long	.LEFDE64-.LASFDE64
.LASFDE64:
	.long	.Lframe0
	.long	.LFB47
	.long	.LFE47-.LFB47
	.byte	0x4
	.long	.LCFI151-.LFB47
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI152-.LCFI151
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI155-.LCFI152
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE64:
.LSFDE66:
	.long	.LEFDE66-.LASFDE66
.LASFDE66:
	.long	.Lframe0
	.long	.LFB48
	.long	.LFE48-.LFB48
	.byte	0x4
	.long	.LCFI156-.LFB48
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI157-.LCFI156
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI159-.LCFI157
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE66:
.LSFDE68:
	.long	.LEFDE68-.LASFDE68
.LASFDE68:
	.long	.Lframe0
	.long	.LFB49
	.long	.LFE49-.LFB49
	.byte	0x4
	.long	.LCFI160-.LFB49
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI161-.LCFI160
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE68:
.LSFDE70:
	.long	.LEFDE70-.LASFDE70
.LASFDE70:
	.long	.Lframe0
	.long	.LFB50
	.long	.LFE50-.LFB50
	.byte	0x4
	.long	.LCFI163-.LFB50
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI164-.LCFI163
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI166-.LCFI164
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE70:
.LSFDE72:
	.long	.LEFDE72-.LASFDE72
.LASFDE72:
	.long	.Lframe0
	.long	.LFB51
	.long	.LFE51-.LFB51
	.byte	0x4
	.long	.LCFI167-.LFB51
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI168-.LCFI167
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI172-.LCFI168
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE72:
.LSFDE74:
	.long	.LEFDE74-.LASFDE74
.LASFDE74:
	.long	.Lframe0
	.long	.LFB52
	.long	.LFE52-.LFB52
	.byte	0x4
	.long	.LCFI173-.LFB52
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI174-.LCFI173
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI178-.LCFI174
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE74:
.LSFDE76:
	.long	.LEFDE76-.LASFDE76
.LASFDE76:
	.long	.Lframe0
	.long	.LFB53
	.long	.LFE53-.LFB53
	.byte	0x4
	.long	.LCFI179-.LFB53
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI180-.LCFI179
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI184-.LCFI180
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE76:
.LSFDE78:
	.long	.LEFDE78-.LASFDE78
.LASFDE78:
	.long	.Lframe0
	.long	.LFB54
	.long	.LFE54-.LFB54
	.byte	0x4
	.long	.LCFI185-.LFB54
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI186-.LCFI185
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI188-.LCFI186
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE78:
.LSFDE80:
	.long	.LEFDE80-.LASFDE80
.LASFDE80:
	.long	.Lframe0
	.long	.LFB55
	.long	.LFE55-.LFB55
	.byte	0x4
	.long	.LCFI189-.LFB55
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI190-.LCFI189
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI193-.LCFI190
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE80:
.LSFDE82:
	.long	.LEFDE82-.LASFDE82
.LASFDE82:
	.long	.Lframe0
	.long	.LFB56
	.long	.LFE56-.LFB56
	.byte	0x4
	.long	.LCFI194-.LFB56
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI195-.LCFI194
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI197-.LCFI195
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE82:
.LSFDE84:
	.long	.LEFDE84-.LASFDE84
.LASFDE84:
	.long	.Lframe0
	.long	.LFB57
	.long	.LFE57-.LFB57
	.byte	0x4
	.long	.LCFI198-.LFB57
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI199-.LCFI198
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI201-.LCFI199
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE84:
.LSFDE86:
	.long	.LEFDE86-.LASFDE86
.LASFDE86:
	.long	.Lframe0
	.long	.LFB58
	.long	.LFE58-.LFB58
	.byte	0x4
	.long	.LCFI202-.LFB58
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI203-.LCFI202
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI207-.LCFI203
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE86:
.LSFDE88:
	.long	.LEFDE88-.LASFDE88
.LASFDE88:
	.long	.Lframe0
	.long	.LFB59
	.long	.LFE59-.LFB59
	.byte	0x4
	.long	.LCFI208-.LFB59
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI209-.LCFI208
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI211-.LCFI209
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE88:
.LSFDE90:
	.long	.LEFDE90-.LASFDE90
.LASFDE90:
	.long	.Lframe0
	.long	.LFB60
	.long	.LFE60-.LFB60
	.byte	0x4
	.long	.LCFI212-.LFB60
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI213-.LCFI212
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI215-.LCFI213
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE90:
.LSFDE92:
	.long	.LEFDE92-.LASFDE92
.LASFDE92:
	.long	.Lframe0
	.long	.LFB61
	.long	.LFE61-.LFB61
	.byte	0x4
	.long	.LCFI216-.LFB61
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI217-.LCFI216
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI221-.LCFI217
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE92:
.LSFDE94:
	.long	.LEFDE94-.LASFDE94
.LASFDE94:
	.long	.Lframe0
	.long	.LFB62
	.long	.LFE62-.LFB62
	.byte	0x4
	.long	.LCFI222-.LFB62
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI223-.LCFI222
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI225-.LCFI223
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE94:
.LSFDE96:
	.long	.LEFDE96-.LASFDE96
.LASFDE96:
	.long	.Lframe0
	.long	.LFB63
	.long	.LFE63-.LFB63
	.byte	0x4
	.long	.LCFI226-.LFB63
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI227-.LCFI226
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI231-.LCFI227
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE96:
.LSFDE98:
	.long	.LEFDE98-.LASFDE98
.LASFDE98:
	.long	.Lframe0
	.long	.LFB64
	.long	.LFE64-.LFB64
	.byte	0x4
	.long	.LCFI232-.LFB64
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI233-.LCFI232
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI236-.LCFI233
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE98:
.LSFDE100:
	.long	.LEFDE100-.LASFDE100
.LASFDE100:
	.long	.Lframe0
	.long	.LFB65
	.long	.LFE65-.LFB65
	.byte	0x4
	.long	.LCFI237-.LFB65
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI238-.LCFI237
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI240-.LCFI238
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE100:
.LSFDE102:
	.long	.LEFDE102-.LASFDE102
.LASFDE102:
	.long	.Lframe0
	.long	.LFB66
	.long	.LFE66-.LFB66
	.byte	0x4
	.long	.LCFI241-.LFB66
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI242-.LCFI241
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE102:
.LSFDE104:
	.long	.LEFDE104-.LASFDE104
.LASFDE104:
	.long	.Lframe0
	.long	.LFB67
	.long	.LFE67-.LFB67
	.byte	0x4
	.long	.LCFI244-.LFB67
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI245-.LCFI244
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI249-.LCFI245
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE104:
.LSFDE106:
	.long	.LEFDE106-.LASFDE106
.LASFDE106:
	.long	.Lframe0
	.long	.LFB68
	.long	.LFE68-.LFB68
	.byte	0x4
	.long	.LCFI250-.LFB68
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI251-.LCFI250
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI255-.LCFI251
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE106:
.LSFDE108:
	.long	.LEFDE108-.LASFDE108
.LASFDE108:
	.long	.Lframe0
	.long	.LFB69
	.long	.LFE69-.LFB69
	.byte	0x4
	.long	.LCFI256-.LFB69
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI257-.LCFI256
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI261-.LCFI257
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE108:
.LSFDE110:
	.long	.LEFDE110-.LASFDE110
.LASFDE110:
	.long	.Lframe0
	.long	.LFB70
	.long	.LFE70-.LFB70
	.byte	0x4
	.long	.LCFI262-.LFB70
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI263-.LCFI262
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI266-.LCFI263
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE110:
.LSFDE112:
	.long	.LEFDE112-.LASFDE112
.LASFDE112:
	.long	.Lframe0
	.long	.LFB71
	.long	.LFE71-.LFB71
	.byte	0x4
	.long	.LCFI267-.LFB71
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI268-.LCFI267
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE112:
.LSFDE114:
	.long	.LEFDE114-.LASFDE114
.LASFDE114:
	.long	.Lframe0
	.long	.LFB72
	.long	.LFE72-.LFB72
	.byte	0x4
	.long	.LCFI270-.LFB72
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI271-.LCFI270
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI275-.LCFI271
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE114:
.LSFDE116:
	.long	.LEFDE116-.LASFDE116
.LASFDE116:
	.long	.Lframe0
	.long	.LFB73
	.long	.LFE73-.LFB73
	.byte	0x4
	.long	.LCFI276-.LFB73
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI277-.LCFI276
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI279-.LCFI277
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE116:
.LSFDE118:
	.long	.LEFDE118-.LASFDE118
.LASFDE118:
	.long	.Lframe0
	.long	.LFB74
	.long	.LFE74-.LFB74
	.byte	0x4
	.long	.LCFI280-.LFB74
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI281-.LCFI280
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI283-.LCFI281
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE118:
.LSFDE120:
	.long	.LEFDE120-.LASFDE120
.LASFDE120:
	.long	.Lframe0
	.long	.LFB75
	.long	.LFE75-.LFB75
	.byte	0x4
	.long	.LCFI284-.LFB75
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI285-.LCFI284
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI289-.LCFI285
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE120:
.LSFDE122:
	.long	.LEFDE122-.LASFDE122
.LASFDE122:
	.long	.Lframe0
	.long	.LFB76
	.long	.LFE76-.LFB76
	.byte	0x4
	.long	.LCFI290-.LFB76
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI291-.LCFI290
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE122:
.LSFDE124:
	.long	.LEFDE124-.LASFDE124
.LASFDE124:
	.long	.Lframe0
	.long	.LFB77
	.long	.LFE77-.LFB77
	.byte	0x4
	.long	.LCFI293-.LFB77
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI294-.LCFI293
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI296-.LCFI294
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE124:
.LSFDE126:
	.long	.LEFDE126-.LASFDE126
.LASFDE126:
	.long	.Lframe0
	.long	.LFB78
	.long	.LFE78-.LFB78
	.byte	0x4
	.long	.LCFI297-.LFB78
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI298-.LCFI297
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI302-.LCFI298
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE126:
.LSFDE128:
	.long	.LEFDE128-.LASFDE128
.LASFDE128:
	.long	.Lframe0
	.long	.LFB79
	.long	.LFE79-.LFB79
	.byte	0x4
	.long	.LCFI303-.LFB79
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI304-.LCFI303
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI306-.LCFI304
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE128:
.LSFDE130:
	.long	.LEFDE130-.LASFDE130
.LASFDE130:
	.long	.Lframe0
	.long	.LFB80
	.long	.LFE80-.LFB80
	.byte	0x4
	.long	.LCFI307-.LFB80
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI308-.LCFI307
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI310-.LCFI308
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE130:
.LSFDE132:
	.long	.LEFDE132-.LASFDE132
.LASFDE132:
	.long	.Lframe0
	.long	.LFB81
	.long	.LFE81-.LFB81
	.byte	0x4
	.long	.LCFI311-.LFB81
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI312-.LCFI311
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI314-.LCFI312
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE132:
.LSFDE134:
	.long	.LEFDE134-.LASFDE134
.LASFDE134:
	.long	.Lframe0
	.long	.LFB82
	.long	.LFE82-.LFB82
	.byte	0x4
	.long	.LCFI315-.LFB82
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI316-.LCFI315
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE134:
.LSFDE136:
	.long	.LEFDE136-.LASFDE136
.LASFDE136:
	.long	.Lframe0
	.long	.LFB83
	.long	.LFE83-.LFB83
	.byte	0x4
	.long	.LCFI317-.LFB83
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI318-.LCFI317
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI320-.LCFI318
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE136:
.LSFDE138:
	.long	.LEFDE138-.LASFDE138
.LASFDE138:
	.long	.Lframe0
	.long	.LFB84
	.long	.LFE84-.LFB84
	.byte	0x4
	.long	.LCFI321-.LFB84
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI322-.LCFI321
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI324-.LCFI322
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE138:
.LSFDE140:
	.long	.LEFDE140-.LASFDE140
.LASFDE140:
	.long	.Lframe0
	.long	.LFB85
	.long	.LFE85-.LFB85
	.byte	0x4
	.long	.LCFI325-.LFB85
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI326-.LCFI325
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI328-.LCFI326
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE140:
.LSFDE142:
	.long	.LEFDE142-.LASFDE142
.LASFDE142:
	.long	.Lframe0
	.long	.LFB86
	.long	.LFE86-.LFB86
	.byte	0x4
	.long	.LCFI329-.LFB86
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI330-.LCFI329
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI332-.LCFI330
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE142:
.LSFDE144:
	.long	.LEFDE144-.LASFDE144
.LASFDE144:
	.long	.Lframe0
	.long	.LFB87
	.long	.LFE87-.LFB87
	.byte	0x4
	.long	.LCFI333-.LFB87
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI334-.LCFI333
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI338-.LCFI334
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE144:
.LSFDE146:
	.long	.LEFDE146-.LASFDE146
.LASFDE146:
	.long	.Lframe0
	.long	.LFB88
	.long	.LFE88-.LFB88
	.byte	0x4
	.long	.LCFI339-.LFB88
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI340-.LCFI339
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI342-.LCFI340
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE146:
.LSFDE148:
	.long	.LEFDE148-.LASFDE148
.LASFDE148:
	.long	.Lframe0
	.long	.LFB89
	.long	.LFE89-.LFB89
	.byte	0x4
	.long	.LCFI343-.LFB89
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI344-.LCFI343
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI346-.LCFI344
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE148:
.LSFDE150:
	.long	.LEFDE150-.LASFDE150
.LASFDE150:
	.long	.Lframe0
	.long	.LFB90
	.long	.LFE90-.LFB90
	.byte	0x4
	.long	.LCFI347-.LFB90
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI348-.LCFI347
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI352-.LCFI348
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE150:
.LSFDE152:
	.long	.LEFDE152-.LASFDE152
.LASFDE152:
	.long	.Lframe0
	.long	.LFB91
	.long	.LFE91-.LFB91
	.byte	0x4
	.long	.LCFI353-.LFB91
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI354-.LCFI353
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI358-.LCFI354
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE152:
.LSFDE154:
	.long	.LEFDE154-.LASFDE154
.LASFDE154:
	.long	.Lframe0
	.long	.LFB92
	.long	.LFE92-.LFB92
	.byte	0x4
	.long	.LCFI359-.LFB92
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI360-.LCFI359
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI362-.LCFI360
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE154:
.LSFDE156:
	.long	.LEFDE156-.LASFDE156
.LASFDE156:
	.long	.Lframe0
	.long	.LFB93
	.long	.LFE93-.LFB93
	.byte	0x4
	.long	.LCFI363-.LFB93
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI364-.LCFI363
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI366-.LCFI364
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE156:
.LSFDE158:
	.long	.LEFDE158-.LASFDE158
.LASFDE158:
	.long	.Lframe0
	.long	.LFB94
	.long	.LFE94-.LFB94
	.byte	0x4
	.long	.LCFI367-.LFB94
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI368-.LCFI367
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI370-.LCFI368
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE158:
.LSFDE160:
	.long	.LEFDE160-.LASFDE160
.LASFDE160:
	.long	.Lframe0
	.long	.LFB95
	.long	.LFE95-.LFB95
	.byte	0x4
	.long	.LCFI371-.LFB95
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI372-.LCFI371
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI374-.LCFI372
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE160:
.LSFDE162:
	.long	.LEFDE162-.LASFDE162
.LASFDE162:
	.long	.Lframe0
	.long	.LFB96
	.long	.LFE96-.LFB96
	.byte	0x4
	.long	.LCFI375-.LFB96
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI376-.LCFI375
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE162:
.LSFDE164:
	.long	.LEFDE164-.LASFDE164
.LASFDE164:
	.long	.Lframe0
	.long	.LFB97
	.long	.LFE97-.LFB97
	.byte	0x4
	.long	.LCFI378-.LFB97
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI379-.LCFI378
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI381-.LCFI379
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE164:
.LSFDE166:
	.long	.LEFDE166-.LASFDE166
.LASFDE166:
	.long	.Lframe0
	.long	.LFB98
	.long	.LFE98-.LFB98
	.byte	0x4
	.long	.LCFI382-.LFB98
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI383-.LCFI382
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI385-.LCFI383
	.byte	0x83
	.uleb128 0x3
	.align 4
.LEFDE166:
.LSFDE168:
	.long	.LEFDE168-.LASFDE168
.LASFDE168:
	.long	.Lframe0
	.long	.LFB99
	.long	.LFE99-.LFB99
	.byte	0x4
	.long	.LCFI386-.LFB99
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI387-.LCFI386
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI390-.LCFI387
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 4
.LEFDE168:
.LSFDE170:
	.long	.LEFDE170-.LASFDE170
.LASFDE170:
	.long	.Lframe0
	.long	.LFB100
	.long	.LFE100-.LFB100
	.byte	0x4
	.long	.LCFI391-.LFB100
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI392-.LCFI391
	.byte	0xd
	.uleb128 0x5
	.align 4
.LEFDE170:
.LSFDE172:
	.long	.LEFDE172-.LASFDE172
.LASFDE172:
	.long	.Lframe0
	.long	.LFB101
	.long	.LFE101-.LFB101
	.byte	0x4
	.long	.LCFI394-.LFB101
	.byte	0xe
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI395-.LCFI394
	.byte	0xd
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI399-.LCFI395
	.byte	0x83
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.align 4
.LEFDE172:
	.file 2 "../../../kgccfe/gnu/MIPS/config.h"
	.file 3 "../../../kgccfe/gnu/rtl.h"
	.file 4 "../../../kgccfe/gnu/machmode.h"
	.file 5 "../../../kgccfe/gnu/bitmap.h"
	.file 6 "../../../kgccfe/gnu/tree.h"
	.file 7 "../../../kgccfe/gnu/real.h"
	.file 8 "../../../kgccfe/gnu/hashtable.h"
	.file 9 "../../../kgccfe/gnu/location.h"
	.file 10 "../../../kgccfe/gnu/function.h"
	.file 11 "../../../kgccfe/gnu/MIPS/mips.h"
	.file 12 "../../../kgccfe/omp_types.h"
	.file 13 "../../../kgccfe/gnu/basic-block.h"
	.file 14 "../../../kgccfe/gnu/sbitmap.h"
	.file 15 "../../../kgccfe/gnu/MIPS/insn-codes.h"
	.file 16 "../../../kgccfe/gnu/expr.h"
	.file 17 "../../../kgccfe/gnu/recog.h"
	.file 18 "../../../kgccfe/gnu/optabs.h"
	.file 19 "../../../kgccfe/gnu/flags.h"
	.file 20 "../../../kgccfe/gnu/libfuncs.h"
	.file 21 "../../../kgccfe/gnu/langhooks.h"
	.file 22 "/usr/lib/gcc/i486-linux-gnu/4.1.2/include/stddef.h"
	.file 23 "/usr/include/stdio.h"
	.file 24 "/usr/include/libio.h"
	.file 25 "/usr/include/bits/types.h"
	.file 26 "../../../kgccfe/gnu/MIPS/gt-expr.h"
	.file 27 "../../../kgccfe/gnu/ggc.h"
	.text
.Letext0:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
.LLST0:
	.long	.LFB15-.Ltext0
	.long	.LCFI0-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI0-.Ltext0
	.long	.LCFI1-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI1-.Ltext0
	.long	.LFE15-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST1:
	.long	.LFB16-.Ltext0
	.long	.LCFI4-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI4-.Ltext0
	.long	.LCFI5-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI5-.Ltext0
	.long	.LFE16-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST2:
	.long	.LFB17-.Ltext0
	.long	.LCFI9-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI9-.Ltext0
	.long	.LCFI10-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI10-.Ltext0
	.long	.LFE17-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST3:
	.long	.LFB18-.Ltext0
	.long	.LCFI13-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI13-.Ltext0
	.long	.LCFI14-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI14-.Ltext0
	.long	.LFE18-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST4:
	.long	.LFB19-.Ltext0
	.long	.LCFI18-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI18-.Ltext0
	.long	.LCFI19-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI19-.Ltext0
	.long	.LFE19-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST5:
	.long	.LFB20-.Ltext0
	.long	.LCFI23-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI23-.Ltext0
	.long	.LCFI24-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI24-.Ltext0
	.long	.LFE20-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST6:
	.long	.LFB21-.Ltext0
	.long	.LCFI27-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI27-.Ltext0
	.long	.LCFI28-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI28-.Ltext0
	.long	.LFE21-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST7:
	.long	.LFB22-.Ltext0
	.long	.LCFI31-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI31-.Ltext0
	.long	.LCFI32-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI32-.Ltext0
	.long	.LFE22-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST8:
	.long	.LFB23-.Ltext0
	.long	.LCFI36-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI36-.Ltext0
	.long	.LCFI37-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI37-.Ltext0
	.long	.LFE23-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST9:
	.long	.LFB24-.Ltext0
	.long	.LCFI40-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI40-.Ltext0
	.long	.LCFI41-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI41-.Ltext0
	.long	.LFE24-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST10:
	.long	.LFB25-.Ltext0
	.long	.LCFI46-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI46-.Ltext0
	.long	.LCFI47-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI47-.Ltext0
	.long	.LFE25-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST11:
	.long	.LFB26-.Ltext0
	.long	.LCFI49-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI49-.Ltext0
	.long	.LCFI50-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI50-.Ltext0
	.long	.LFE26-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST12:
	.long	.LFB27-.Ltext0
	.long	.LCFI54-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI54-.Ltext0
	.long	.LCFI55-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI55-.Ltext0
	.long	.LFE27-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST13:
	.long	.LFB28-.Ltext0
	.long	.LCFI60-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI60-.Ltext0
	.long	.LCFI61-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI61-.Ltext0
	.long	.LFE28-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST14:
	.long	.LFB29-.Ltext0
	.long	.LCFI66-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI66-.Ltext0
	.long	.LCFI67-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI67-.Ltext0
	.long	.LFE29-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST15:
	.long	.LFB30-.Ltext0
	.long	.LCFI70-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI70-.Ltext0
	.long	.LCFI71-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI71-.Ltext0
	.long	.LFE30-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST16:
	.long	.LFB31-.Ltext0
	.long	.LCFI74-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI74-.Ltext0
	.long	.LCFI75-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI75-.Ltext0
	.long	.LFE31-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST17:
	.long	.LFB32-.Ltext0
	.long	.LCFI80-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI80-.Ltext0
	.long	.LCFI81-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI81-.Ltext0
	.long	.LFE32-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST18:
	.long	.LFB33-.Ltext0
	.long	.LCFI84-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI84-.Ltext0
	.long	.LCFI85-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI85-.Ltext0
	.long	.LFE33-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST19:
	.long	.LFB34-.Ltext0
	.long	.LCFI89-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI89-.Ltext0
	.long	.LCFI90-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI90-.Ltext0
	.long	.LFE34-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST20:
	.long	.LFB35-.Ltext0
	.long	.LCFI93-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI93-.Ltext0
	.long	.LCFI94-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI94-.Ltext0
	.long	.LFE35-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST21:
	.long	.LFB36-.Ltext0
	.long	.LCFI97-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI97-.Ltext0
	.long	.LCFI98-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI98-.Ltext0
	.long	.LFE36-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST22:
	.long	.LFB37-.Ltext0
	.long	.LCFI102-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI102-.Ltext0
	.long	.LCFI103-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI103-.Ltext0
	.long	.LFE37-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST23:
	.long	.LFB38-.Ltext0
	.long	.LCFI107-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI107-.Ltext0
	.long	.LCFI108-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI108-.Ltext0
	.long	.LFE38-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST24:
	.long	.LFB39-.Ltext0
	.long	.LCFI112-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI112-.Ltext0
	.long	.LCFI113-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI113-.Ltext0
	.long	.LFE39-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST25:
	.long	.LFB40-.Ltext0
	.long	.LCFI118-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI118-.Ltext0
	.long	.LCFI119-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI119-.Ltext0
	.long	.LFE40-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST26:
	.long	.LFB41-.Ltext0
	.long	.LCFI122-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI122-.Ltext0
	.long	.LCFI123-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI123-.Ltext0
	.long	.LFE41-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST27:
	.long	.LFB42-.Ltext0
	.long	.LCFI128-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI128-.Ltext0
	.long	.LCFI129-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI129-.Ltext0
	.long	.LFE42-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST28:
	.long	.LFB43-.Ltext0
	.long	.LCFI134-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI134-.Ltext0
	.long	.LCFI135-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI135-.Ltext0
	.long	.LFE43-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST29:
	.long	.LFB44-.Ltext0
	.long	.LCFI139-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI139-.Ltext0
	.long	.LCFI140-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI140-.Ltext0
	.long	.LFE44-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST30:
	.long	.LFB45-.Ltext0
	.long	.LCFI143-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI143-.Ltext0
	.long	.LCFI144-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI144-.Ltext0
	.long	.LFE45-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST31:
	.long	.LFB46-.Ltext0
	.long	.LCFI147-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI147-.Ltext0
	.long	.LCFI148-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI148-.Ltext0
	.long	.LFE46-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST32:
	.long	.LFB47-.Ltext0
	.long	.LCFI151-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI151-.Ltext0
	.long	.LCFI152-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI152-.Ltext0
	.long	.LFE47-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST33:
	.long	.LFB48-.Ltext0
	.long	.LCFI156-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI156-.Ltext0
	.long	.LCFI157-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI157-.Ltext0
	.long	.LFE48-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST34:
	.long	.LFB49-.Ltext0
	.long	.LCFI160-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI160-.Ltext0
	.long	.LCFI161-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI161-.Ltext0
	.long	.LFE49-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST35:
	.long	.LFB50-.Ltext0
	.long	.LCFI163-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI163-.Ltext0
	.long	.LCFI164-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI164-.Ltext0
	.long	.LFE50-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST36:
	.long	.LFB51-.Ltext0
	.long	.LCFI167-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI167-.Ltext0
	.long	.LCFI168-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI168-.Ltext0
	.long	.LFE51-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST37:
	.long	.LFB52-.Ltext0
	.long	.LCFI173-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI173-.Ltext0
	.long	.LCFI174-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI174-.Ltext0
	.long	.LFE52-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST38:
	.long	.LFB53-.Ltext0
	.long	.LCFI179-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI179-.Ltext0
	.long	.LCFI180-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI180-.Ltext0
	.long	.LFE53-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST39:
	.long	.LFB54-.Ltext0
	.long	.LCFI185-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI185-.Ltext0
	.long	.LCFI186-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI186-.Ltext0
	.long	.LFE54-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST40:
	.long	.LFB55-.Ltext0
	.long	.LCFI189-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI189-.Ltext0
	.long	.LCFI190-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI190-.Ltext0
	.long	.LFE55-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST41:
	.long	.LFB56-.Ltext0
	.long	.LCFI194-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI194-.Ltext0
	.long	.LCFI195-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI195-.Ltext0
	.long	.LFE56-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST42:
	.long	.LFB57-.Ltext0
	.long	.LCFI198-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI198-.Ltext0
	.long	.LCFI199-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI199-.Ltext0
	.long	.LFE57-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST43:
	.long	.LFB58-.Ltext0
	.long	.LCFI202-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI202-.Ltext0
	.long	.LCFI203-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI203-.Ltext0
	.long	.LFE58-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST44:
	.long	.LFB59-.Ltext0
	.long	.LCFI208-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI208-.Ltext0
	.long	.LCFI209-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI209-.Ltext0
	.long	.LFE59-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST45:
	.long	.LFB60-.Ltext0
	.long	.LCFI212-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI212-.Ltext0
	.long	.LCFI213-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI213-.Ltext0
	.long	.LFE60-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST46:
	.long	.LFB61-.Ltext0
	.long	.LCFI216-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI216-.Ltext0
	.long	.LCFI217-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI217-.Ltext0
	.long	.LFE61-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST47:
	.long	.LFB62-.Ltext0
	.long	.LCFI222-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI222-.Ltext0
	.long	.LCFI223-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI223-.Ltext0
	.long	.LFE62-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST48:
	.long	.LFB63-.Ltext0
	.long	.LCFI226-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI226-.Ltext0
	.long	.LCFI227-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI227-.Ltext0
	.long	.LFE63-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST49:
	.long	.LFB64-.Ltext0
	.long	.LCFI232-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI232-.Ltext0
	.long	.LCFI233-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI233-.Ltext0
	.long	.LFE64-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST50:
	.long	.LFB65-.Ltext0
	.long	.LCFI237-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI237-.Ltext0
	.long	.LCFI238-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI238-.Ltext0
	.long	.LFE65-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST51:
	.long	.LFB66-.Ltext0
	.long	.LCFI241-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI241-.Ltext0
	.long	.LCFI242-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI242-.Ltext0
	.long	.LFE66-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST52:
	.long	.LFB67-.Ltext0
	.long	.LCFI244-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI244-.Ltext0
	.long	.LCFI245-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI245-.Ltext0
	.long	.LFE67-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST53:
	.long	.LFB68-.Ltext0
	.long	.LCFI250-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI250-.Ltext0
	.long	.LCFI251-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI251-.Ltext0
	.long	.LFE68-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST54:
	.long	.LFB69-.Ltext0
	.long	.LCFI256-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI256-.Ltext0
	.long	.LCFI257-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI257-.Ltext0
	.long	.LFE69-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST55:
	.long	.LFB70-.Ltext0
	.long	.LCFI262-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI262-.Ltext0
	.long	.LCFI263-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI263-.Ltext0
	.long	.LFE70-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST56:
	.long	.LFB71-.Ltext0
	.long	.LCFI267-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI267-.Ltext0
	.long	.LCFI268-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI268-.Ltext0
	.long	.LFE71-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST57:
	.long	.LFB72-.Ltext0
	.long	.LCFI270-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI270-.Ltext0
	.long	.LCFI271-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI271-.Ltext0
	.long	.LFE72-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST58:
	.long	.LFB73-.Ltext0
	.long	.LCFI276-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI276-.Ltext0
	.long	.LCFI277-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI277-.Ltext0
	.long	.LFE73-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST59:
	.long	.LFB74-.Ltext0
	.long	.LCFI280-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI280-.Ltext0
	.long	.LCFI281-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI281-.Ltext0
	.long	.LFE74-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST60:
	.long	.LFB75-.Ltext0
	.long	.LCFI284-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI284-.Ltext0
	.long	.LCFI285-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI285-.Ltext0
	.long	.LFE75-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST61:
	.long	.LFB76-.Ltext0
	.long	.LCFI290-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI290-.Ltext0
	.long	.LCFI291-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI291-.Ltext0
	.long	.LFE76-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST62:
	.long	.LFB77-.Ltext0
	.long	.LCFI293-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI293-.Ltext0
	.long	.LCFI294-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI294-.Ltext0
	.long	.LFE77-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST63:
	.long	.LFB78-.Ltext0
	.long	.LCFI297-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI297-.Ltext0
	.long	.LCFI298-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI298-.Ltext0
	.long	.LFE78-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST64:
	.long	.LFB79-.Ltext0
	.long	.LCFI303-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI303-.Ltext0
	.long	.LCFI304-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI304-.Ltext0
	.long	.LFE79-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST65:
	.long	.LFB80-.Ltext0
	.long	.LCFI307-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI307-.Ltext0
	.long	.LCFI308-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI308-.Ltext0
	.long	.LFE80-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST66:
	.long	.LFB81-.Ltext0
	.long	.LCFI311-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI311-.Ltext0
	.long	.LCFI312-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI312-.Ltext0
	.long	.LFE81-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST67:
	.long	.LFB82-.Ltext0
	.long	.LCFI315-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI315-.Ltext0
	.long	.LCFI316-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI316-.Ltext0
	.long	.LFE82-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST68:
	.long	.LFB83-.Ltext0
	.long	.LCFI317-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI317-.Ltext0
	.long	.LCFI318-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI318-.Ltext0
	.long	.LFE83-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST69:
	.long	.LFB84-.Ltext0
	.long	.LCFI321-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI321-.Ltext0
	.long	.LCFI322-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI322-.Ltext0
	.long	.LFE84-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST70:
	.long	.LFB85-.Ltext0
	.long	.LCFI325-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI325-.Ltext0
	.long	.LCFI326-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI326-.Ltext0
	.long	.LFE85-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST71:
	.long	.LFB86-.Ltext0
	.long	.LCFI329-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI329-.Ltext0
	.long	.LCFI330-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI330-.Ltext0
	.long	.LFE86-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST72:
	.long	.LFB87-.Ltext0
	.long	.LCFI333-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI333-.Ltext0
	.long	.LCFI334-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI334-.Ltext0
	.long	.LFE87-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST73:
	.long	.LFB88-.Ltext0
	.long	.LCFI339-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI339-.Ltext0
	.long	.LCFI340-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI340-.Ltext0
	.long	.LFE88-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST74:
	.long	.LFB89-.Ltext0
	.long	.LCFI343-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI343-.Ltext0
	.long	.LCFI344-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI344-.Ltext0
	.long	.LFE89-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST75:
	.long	.LFB90-.Ltext0
	.long	.LCFI347-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI347-.Ltext0
	.long	.LCFI348-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI348-.Ltext0
	.long	.LFE90-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST76:
	.long	.LFB91-.Ltext0
	.long	.LCFI353-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI353-.Ltext0
	.long	.LCFI354-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI354-.Ltext0
	.long	.LFE91-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST77:
	.long	.LFB92-.Ltext0
	.long	.LCFI359-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI359-.Ltext0
	.long	.LCFI360-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI360-.Ltext0
	.long	.LFE92-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST78:
	.long	.LFB93-.Ltext0
	.long	.LCFI363-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI363-.Ltext0
	.long	.LCFI364-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI364-.Ltext0
	.long	.LFE93-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST79:
	.long	.LFB94-.Ltext0
	.long	.LCFI367-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI367-.Ltext0
	.long	.LCFI368-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI368-.Ltext0
	.long	.LFE94-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST80:
	.long	.LFB95-.Ltext0
	.long	.LCFI371-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI371-.Ltext0
	.long	.LCFI372-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI372-.Ltext0
	.long	.LFE95-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST81:
	.long	.LFB96-.Ltext0
	.long	.LCFI375-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI375-.Ltext0
	.long	.LCFI376-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI376-.Ltext0
	.long	.LFE96-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST82:
	.long	.LFB97-.Ltext0
	.long	.LCFI378-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI378-.Ltext0
	.long	.LCFI379-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI379-.Ltext0
	.long	.LFE97-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST83:
	.long	.LFB98-.Ltext0
	.long	.LCFI382-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI382-.Ltext0
	.long	.LCFI383-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI383-.Ltext0
	.long	.LFE98-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST84:
	.long	.LFB99-.Ltext0
	.long	.LCFI386-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI386-.Ltext0
	.long	.LCFI387-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI387-.Ltext0
	.long	.LFE99-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST85:
	.long	.LFB100-.Ltext0
	.long	.LCFI391-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI391-.Ltext0
	.long	.LCFI392-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI392-.Ltext0
	.long	.LFE100-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
.LLST86:
	.long	.LFB101-.Ltext0
	.long	.LCFI394-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 4
	.long	.LCFI394-.Ltext0
	.long	.LCFI395-.Ltext0
	.value	0x2
	.byte	0x74
	.sleb128 8
	.long	.LCFI395-.Ltext0
	.long	.LFE101-.Ltext0
	.value	0x2
	.byte	0x75
	.sleb128 8
	.long	0x0
	.long	0x0
	.section	.debug_info
	.long	0xf2d6
	.value	0x2
	.long	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.long	.Ldebug_line0
	.long	.Letext0
	.long	.Ltext0
	.string	"GNU C 4.1.2 (Ubuntu 4.1.2-0ubuntu4)"
	.byte	0x1
	.string	"../../../kgccfe/gnu/expr.c"
	.string	"/usa/handong/simplnano/cmplr-open64-merge/targia32_sl1/gccfe/gnu"
	.uleb128 0x2
	.string	"rtx"
	.byte	0x2
	.byte	0xc
	.long	0xa4
	.uleb128 0x3
	.byte	0x4
	.long	0xaa
	.uleb128 0x4
	.long	0x198
	.string	"rtx_def"
	.byte	0xc
	.byte	0x2
	.byte	0xb
	.uleb128 0x5
	.long	.LASF0
	.byte	0x3
	.byte	0x8a
	.long	0xd70
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x5
	.long	.LASF1
	.byte	0x3
	.byte	0x8d
	.long	0x9bb
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"jump"
	.byte	0x3
	.byte	0x94
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"call"
	.byte	0x3
	.byte	0x97
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"unchanging"
	.byte	0x3
	.byte	0x9f
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"volatil"
	.byte	0x3
	.byte	0xa8
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"in_struct"
	.byte	0x3
	.byte	0xba
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"used"
	.byte	0x3
	.byte	0xc1
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"integrated"
	.byte	0x3
	.byte	0xc6
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"frame_related"
	.byte	0x3
	.byte	0xcf
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"fld"
	.byte	0x3
	.byte	0xd4
	.long	0x1985
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"rtvec"
	.byte	0x2
	.byte	0xe
	.long	0x1a5
	.uleb128 0x3
	.byte	0x4
	.long	0x1ab
	.uleb128 0x4
	.long	0x1e0
	.string	"rtvec_def"
	.byte	0x8
	.byte	0x2
	.byte	0xd
	.uleb128 0x7
	.string	"num_elem"
	.byte	0x3
	.byte	0xf8
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"elem"
	.byte	0x3
	.byte	0xf9
	.long	0x1995
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"tree"
	.byte	0x2
	.byte	0x10
	.long	0x1ec
	.uleb128 0x3
	.byte	0x4
	.long	0x1f2
	.uleb128 0x8
	.long	0x2cb
	.string	"tree_node"
	.byte	0x94
	.byte	0x2
	.byte	0xf
	.uleb128 0x9
	.long	.LASF2
	.byte	0x6
	.value	0x855
	.long	0x3c1b
	.uleb128 0xa
	.string	"int_cst"
	.byte	0x6
	.value	0x856
	.long	0x3f33
	.uleb128 0xa
	.string	"real_cst"
	.byte	0x6
	.value	0x857
	.long	0x3f7b
	.uleb128 0xa
	.string	"vector"
	.byte	0x6
	.value	0x858
	.long	0x4088
	.uleb128 0xa
	.string	"string"
	.byte	0x6
	.value	0x859
	.long	0x3fc9
	.uleb128 0xa
	.string	"complex"
	.byte	0x6
	.value	0x85a
	.long	0x4033
	.uleb128 0xa
	.string	"identifier"
	.byte	0x6
	.value	0x85b
	.long	0x410e
	.uleb128 0xa
	.string	"decl"
	.byte	0x6
	.value	0x85c
	.long	0x517f
	.uleb128 0x9
	.long	.LASF3
	.byte	0x6
	.value	0x85d
	.long	0x436e
	.uleb128 0xa
	.string	"list"
	.byte	0x6
	.value	0x85e
	.long	0x4145
	.uleb128 0xa
	.string	"vec"
	.byte	0x6
	.value	0x85f
	.long	0x418a
	.uleb128 0xa
	.string	"exp"
	.byte	0x6
	.value	0x860
	.long	0x41d8
	.uleb128 0xa
	.string	"block"
	.byte	0x6
	.value	0x861
	.long	0x4224
	.uleb128 0xa
	.string	"omp"
	.byte	0x6
	.value	0x863
	.long	0x5b15
	.byte	0x0
	.uleb128 0xb
	.long	0x44b
	.string	"processor_type"
	.byte	0x4
	.byte	0xb
	.byte	0x3b
	.uleb128 0xc
	.string	"PROCESSOR_DEFAULT"
	.sleb128 0
	.uleb128 0xc
	.string	"PROCESSOR_R3000"
	.sleb128 1
	.uleb128 0xc
	.string	"PROCESSOR_R3900"
	.sleb128 2
	.uleb128 0xc
	.string	"PROCESSOR_R6000"
	.sleb128 3
	.uleb128 0xc
	.string	"PROCESSOR_R4000"
	.sleb128 4
	.uleb128 0xc
	.string	"PROCESSOR_R4100"
	.sleb128 5
	.uleb128 0xc
	.string	"PROCESSOR_R4111"
	.sleb128 6
	.uleb128 0xc
	.string	"PROCESSOR_R4120"
	.sleb128 7
	.uleb128 0xc
	.string	"PROCESSOR_R4300"
	.sleb128 8
	.uleb128 0xc
	.string	"PROCESSOR_R4600"
	.sleb128 9
	.uleb128 0xc
	.string	"PROCESSOR_R4650"
	.sleb128 10
	.uleb128 0xc
	.string	"PROCESSOR_R5000"
	.sleb128 11
	.uleb128 0xc
	.string	"PROCESSOR_R5400"
	.sleb128 12
	.uleb128 0xc
	.string	"PROCESSOR_R5500"
	.sleb128 13
	.uleb128 0xc
	.string	"PROCESSOR_R8000"
	.sleb128 14
	.uleb128 0xc
	.string	"PROCESSOR_R4KC"
	.sleb128 15
	.uleb128 0xc
	.string	"PROCESSOR_R5KC"
	.sleb128 16
	.uleb128 0xc
	.string	"PROCESSOR_R20KC"
	.sleb128 17
	.uleb128 0xc
	.string	"PROCESSOR_SR71000"
	.sleb128 18
	.uleb128 0xc
	.string	"PROCESSOR_SB1"
	.sleb128 19
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x451
	.uleb128 0xd
	.long	0x456
	.uleb128 0xe
	.string	"char"
	.byte	0x1
	.byte	0x8
	.uleb128 0xe
	.string	"int"
	.byte	0x4
	.byte	0x5
	.uleb128 0xf
	.long	0x537
	.string	"mips_args"
	.byte	0x40
	.byte	0xb
	.value	0xaaa
	.uleb128 0x10
	.string	"gp_reg_found"
	.byte	0xb
	.value	0xaad
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"arg_number"
	.byte	0xb
	.value	0xab0
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x10
	.string	"num_gprs"
	.byte	0xb
	.value	0xab5
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x10
	.string	"num_fprs"
	.byte	0xb
	.value	0xab8
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x10
	.string	"stack_words"
	.byte	0xb
	.value	0xabb
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"fp_code"
	.byte	0xb
	.value	0xac8
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x10
	.string	"prototype"
	.byte	0xb
	.value	0xacb
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x10
	.string	"num_adjusts"
	.byte	0xb
	.value	0xad3
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x10
	.string	"adjust"
	.byte	0xb
	.value	0xad4
	.long	0x53e
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.byte	0x0
	.uleb128 0x11
	.long	.LASF4
	.byte	0x4
	.byte	0x7
	.uleb128 0x12
	.long	0x54e
	.long	0x99
	.uleb128 0x13
	.long	0x54e
	.byte	0x7
	.byte	0x0
	.uleb128 0x11
	.long	.LASF4
	.byte	0x4
	.byte	0x7
	.uleb128 0x14
	.string	"CUMULATIVE_ARGS"
	.byte	0xb
	.value	0xad5
	.long	0x465
	.uleb128 0x2
	.string	"size_t"
	.byte	0x16
	.byte	0xd6
	.long	0x537
	.uleb128 0xe
	.string	"unsigned char"
	.byte	0x1
	.byte	0x8
	.uleb128 0xe
	.string	"short unsigned int"
	.byte	0x2
	.byte	0x7
	.uleb128 0xe
	.string	"long unsigned int"
	.byte	0x4
	.byte	0x7
	.uleb128 0xe
	.string	"signed char"
	.byte	0x1
	.byte	0x6
	.uleb128 0xe
	.string	"short int"
	.byte	0x2
	.byte	0x5
	.uleb128 0xe
	.string	"long long int"
	.byte	0x8
	.byte	0x5
	.uleb128 0xe
	.string	"long long unsigned int"
	.byte	0x8
	.byte	0x7
	.uleb128 0x2
	.string	"__quad_t"
	.byte	0x19
	.byte	0x3b
	.long	0x5d3
	.uleb128 0x2
	.string	"__off_t"
	.byte	0x19
	.byte	0x90
	.long	0x61d
	.uleb128 0xe
	.string	"long int"
	.byte	0x4
	.byte	0x5
	.uleb128 0x2
	.string	"__off64_t"
	.byte	0x19
	.byte	0x91
	.long	0x5fe
	.uleb128 0x15
	.byte	0x4
	.uleb128 0x3
	.byte	0x4
	.long	0x456
	.uleb128 0x2
	.string	"FILE"
	.byte	0x17
	.byte	0x2e
	.long	0x64e
	.uleb128 0x16
	.long	0x8c9
	.long	.LASF5
	.byte	0x94
	.byte	0x17
	.byte	0x2e
	.uleb128 0x10
	.string	"_flags"
	.byte	0x18
	.value	0x10c
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"_IO_read_ptr"
	.byte	0x18
	.value	0x111
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x10
	.string	"_IO_read_end"
	.byte	0x18
	.value	0x112
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x10
	.string	"_IO_read_base"
	.byte	0x18
	.value	0x113
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x10
	.string	"_IO_write_base"
	.byte	0x18
	.value	0x114
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"_IO_write_ptr"
	.byte	0x18
	.value	0x115
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x10
	.string	"_IO_write_end"
	.byte	0x18
	.value	0x116
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x10
	.string	"_IO_buf_base"
	.byte	0x18
	.value	0x117
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x10
	.string	"_IO_buf_end"
	.byte	0x18
	.value	0x118
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x10
	.string	"_IO_save_base"
	.byte	0x18
	.value	0x11a
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x10
	.string	"_IO_backup_base"
	.byte	0x18
	.value	0x11b
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x10
	.string	"_IO_save_end"
	.byte	0x18
	.value	0x11c
	.long	0x63c
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x10
	.string	"_markers"
	.byte	0x18
	.value	0x11e
	.long	0x93d
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x10
	.string	"_chain"
	.byte	0x18
	.value	0x120
	.long	0x943
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x10
	.string	"_fileno"
	.byte	0x18
	.value	0x122
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x10
	.string	"_flags2"
	.byte	0x18
	.value	0x126
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x10
	.string	"_old_offset"
	.byte	0x18
	.value	0x128
	.long	0x60e
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x10
	.string	"_cur_column"
	.byte	0x18
	.value	0x12c
	.long	0x58c
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x10
	.string	"_vtable_offset"
	.byte	0x18
	.value	0x12d
	.long	0x5b7
	.byte	0x2
	.byte	0x23
	.uleb128 0x46
	.uleb128 0x10
	.string	"_shortbuf"
	.byte	0x18
	.value	0x12e
	.long	0x949
	.byte	0x2
	.byte	0x23
	.uleb128 0x47
	.uleb128 0x10
	.string	"_lock"
	.byte	0x18
	.value	0x132
	.long	0x959
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x10
	.string	"_offset"
	.byte	0x18
	.value	0x13b
	.long	0x629
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x10
	.string	"__pad1"
	.byte	0x18
	.value	0x144
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x10
	.string	"__pad2"
	.byte	0x18
	.value	0x145
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x10
	.string	"__pad3"
	.byte	0x18
	.value	0x146
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x10
	.string	"__pad4"
	.byte	0x18
	.value	0x147
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x10
	.string	"__pad5"
	.byte	0x18
	.value	0x148
	.long	0x56d
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x10
	.string	"_mode"
	.byte	0x18
	.value	0x14a
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x10
	.string	"_unused2"
	.byte	0x18
	.value	0x14c
	.long	0x95f
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8cf
	.uleb128 0xd
	.long	0x57b
	.uleb128 0x3
	.byte	0x4
	.long	0x57b
	.uleb128 0x3
	.byte	0x4
	.long	0x8e0
	.uleb128 0x17
	.long	0x8ec
	.byte	0x1
	.uleb128 0x18
	.long	0x63a
	.byte	0x0
	.uleb128 0x19
	.string	"_IO_lock_t"
	.byte	0x18
	.byte	0xb0
	.uleb128 0x4
	.long	0x93d
	.string	"_IO_marker"
	.byte	0xc
	.byte	0x18
	.byte	0xb6
	.uleb128 0x7
	.string	"_next"
	.byte	0x18
	.byte	0xb7
	.long	0x93d
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"_sbuf"
	.byte	0x18
	.byte	0xb8
	.long	0x943
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"_pos"
	.byte	0x18
	.byte	0xbc
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8fa
	.uleb128 0x3
	.byte	0x4
	.long	0x64e
	.uleb128 0x12
	.long	0x959
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8ec
	.uleb128 0x12
	.long	0x96f
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x27
	.byte	0x0
	.uleb128 0x12
	.long	0x97f
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x7
	.byte	0x0
	.uleb128 0x12
	.long	0x98f
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x13
	.byte	0x0
	.uleb128 0xd
	.long	0x45e
	.uleb128 0x3
	.byte	0x4
	.long	0x45e
	.uleb128 0x3
	.byte	0x4
	.long	0x9a0
	.uleb128 0x1a
	.uleb128 0x3
	.byte	0x4
	.long	0x9a7
	.uleb128 0x17
	.long	0x9b3
	.byte	0x1
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x1b
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x9b3
	.uleb128 0xb
	.long	0xc04
	.string	"machine_mode"
	.byte	0x4
	.byte	0x4
	.byte	0x1d
	.uleb128 0xc
	.string	"VOIDmode"
	.sleb128 0
	.uleb128 0xc
	.string	"BImode"
	.sleb128 1
	.uleb128 0xc
	.string	"QImode"
	.sleb128 2
	.uleb128 0xc
	.string	"HImode"
	.sleb128 3
	.uleb128 0xc
	.string	"SImode"
	.sleb128 4
	.uleb128 0xc
	.string	"DImode"
	.sleb128 5
	.uleb128 0xc
	.string	"TImode"
	.sleb128 6
	.uleb128 0xc
	.string	"OImode"
	.sleb128 7
	.uleb128 0xc
	.string	"PQImode"
	.sleb128 8
	.uleb128 0xc
	.string	"PHImode"
	.sleb128 9
	.uleb128 0xc
	.string	"PSImode"
	.sleb128 10
	.uleb128 0xc
	.string	"PDImode"
	.sleb128 11
	.uleb128 0xc
	.string	"QFmode"
	.sleb128 12
	.uleb128 0xc
	.string	"HFmode"
	.sleb128 13
	.uleb128 0xc
	.string	"TQFmode"
	.sleb128 14
	.uleb128 0xc
	.string	"SFmode"
	.sleb128 15
	.uleb128 0xc
	.string	"DFmode"
	.sleb128 16
	.uleb128 0xc
	.string	"XFmode"
	.sleb128 17
	.uleb128 0xc
	.string	"TFmode"
	.sleb128 18
	.uleb128 0xc
	.string	"QCmode"
	.sleb128 19
	.uleb128 0xc
	.string	"HCmode"
	.sleb128 20
	.uleb128 0xc
	.string	"SCmode"
	.sleb128 21
	.uleb128 0xc
	.string	"DCmode"
	.sleb128 22
	.uleb128 0xc
	.string	"XCmode"
	.sleb128 23
	.uleb128 0xc
	.string	"TCmode"
	.sleb128 24
	.uleb128 0xc
	.string	"CQImode"
	.sleb128 25
	.uleb128 0xc
	.string	"CHImode"
	.sleb128 26
	.uleb128 0xc
	.string	"CSImode"
	.sleb128 27
	.uleb128 0xc
	.string	"CDImode"
	.sleb128 28
	.uleb128 0xc
	.string	"CTImode"
	.sleb128 29
	.uleb128 0xc
	.string	"COImode"
	.sleb128 30
	.uleb128 0xc
	.string	"V1DImode"
	.sleb128 31
	.uleb128 0xc
	.string	"V2QImode"
	.sleb128 32
	.uleb128 0xc
	.string	"V2HImode"
	.sleb128 33
	.uleb128 0xc
	.string	"V2SImode"
	.sleb128 34
	.uleb128 0xc
	.string	"V2DImode"
	.sleb128 35
	.uleb128 0xc
	.string	"V4QImode"
	.sleb128 36
	.uleb128 0xc
	.string	"V4HImode"
	.sleb128 37
	.uleb128 0xc
	.string	"V4SImode"
	.sleb128 38
	.uleb128 0xc
	.string	"V4DImode"
	.sleb128 39
	.uleb128 0xc
	.string	"V8QImode"
	.sleb128 40
	.uleb128 0xc
	.string	"V8HImode"
	.sleb128 41
	.uleb128 0xc
	.string	"V8SImode"
	.sleb128 42
	.uleb128 0xc
	.string	"V8DImode"
	.sleb128 43
	.uleb128 0xc
	.string	"V16QImode"
	.sleb128 44
	.uleb128 0xc
	.string	"V2SFmode"
	.sleb128 45
	.uleb128 0xc
	.string	"V2DFmode"
	.sleb128 46
	.uleb128 0xc
	.string	"V4SFmode"
	.sleb128 47
	.uleb128 0xc
	.string	"V4DFmode"
	.sleb128 48
	.uleb128 0xc
	.string	"V8SFmode"
	.sleb128 49
	.uleb128 0xc
	.string	"V8DFmode"
	.sleb128 50
	.uleb128 0xc
	.string	"V16SFmode"
	.sleb128 51
	.uleb128 0xc
	.string	"BLKmode"
	.sleb128 52
	.uleb128 0xc
	.string	"CCmode"
	.sleb128 53
	.uleb128 0xc
	.string	"MAX_MACHINE_MODE"
	.sleb128 54
	.byte	0x0
	.uleb128 0x1c
	.long	0xcb3
	.long	.LASF6
	.byte	0x4
	.byte	0x4
	.byte	0x2c
	.uleb128 0xc
	.string	"MODE_RANDOM"
	.sleb128 0
	.uleb128 0xc
	.string	"MODE_INT"
	.sleb128 1
	.uleb128 0xc
	.string	"MODE_FLOAT"
	.sleb128 2
	.uleb128 0xc
	.string	"MODE_PARTIAL_INT"
	.sleb128 3
	.uleb128 0xc
	.string	"MODE_CC"
	.sleb128 4
	.uleb128 0xc
	.string	"MODE_COMPLEX_INT"
	.sleb128 5
	.uleb128 0xc
	.string	"MODE_COMPLEX_FLOAT"
	.sleb128 6
	.uleb128 0xc
	.string	"MODE_VECTOR_INT"
	.sleb128 7
	.uleb128 0xc
	.string	"MODE_VECTOR_FLOAT"
	.sleb128 8
	.uleb128 0xc
	.string	"MAX_MODE_CLASS"
	.sleb128 9
	.byte	0x0
	.uleb128 0xb
	.long	0xcf9
	.string	"real_value_class"
	.byte	0x4
	.byte	0x7
	.byte	0x24
	.uleb128 0xc
	.string	"rvc_zero"
	.sleb128 0
	.uleb128 0xc
	.string	"rvc_normal"
	.sleb128 1
	.uleb128 0xc
	.string	"rvc_inf"
	.sleb128 2
	.uleb128 0xc
	.string	"rvc_nan"
	.sleb128 3
	.byte	0x0
	.uleb128 0x4
	.long	0xd51
	.string	"real_value"
	.byte	0x18
	.byte	0x7
	.byte	0x32
	.uleb128 0x6
	.string	"class"
	.byte	0x7
	.byte	0x37
	.long	0xcb3
	.byte	0x4
	.byte	0x2
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"sign"
	.byte	0x7
	.byte	0x39
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"exp"
	.byte	0x7
	.byte	0x3a
	.long	0x45e
	.byte	0x4
	.byte	0x1d
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"sig"
	.byte	0x7
	.byte	0x3b
	.long	0xd51
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x12
	.long	0xd61
	.long	0x5a2
	.uleb128 0x13
	.long	0x54e
	.byte	0x4
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0xcf9
	.uleb128 0xe
	.string	"_Bool"
	.byte	0x1
	.byte	0x2
	.uleb128 0xb
	.long	0x153f
	.string	"rtx_code"
	.byte	0x4
	.byte	0x3
	.byte	0x2f
	.uleb128 0xc
	.string	"UNKNOWN"
	.sleb128 0
	.uleb128 0xc
	.string	"NIL"
	.sleb128 1
	.uleb128 0xc
	.string	"INCLUDE"
	.sleb128 2
	.uleb128 0xc
	.string	"EXPR_LIST"
	.sleb128 3
	.uleb128 0xc
	.string	"INSN_LIST"
	.sleb128 4
	.uleb128 0xc
	.string	"MATCH_OPERAND"
	.sleb128 5
	.uleb128 0xc
	.string	"MATCH_SCRATCH"
	.sleb128 6
	.uleb128 0xc
	.string	"MATCH_DUP"
	.sleb128 7
	.uleb128 0xc
	.string	"MATCH_OPERATOR"
	.sleb128 8
	.uleb128 0xc
	.string	"MATCH_PARALLEL"
	.sleb128 9
	.uleb128 0xc
	.string	"MATCH_OP_DUP"
	.sleb128 10
	.uleb128 0xc
	.string	"MATCH_PAR_DUP"
	.sleb128 11
	.uleb128 0xc
	.string	"MATCH_INSN"
	.sleb128 12
	.uleb128 0xc
	.string	"DEFINE_INSN"
	.sleb128 13
	.uleb128 0xc
	.string	"DEFINE_PEEPHOLE"
	.sleb128 14
	.uleb128 0xc
	.string	"DEFINE_SPLIT"
	.sleb128 15
	.uleb128 0xc
	.string	"DEFINE_INSN_AND_SPLIT"
	.sleb128 16
	.uleb128 0xc
	.string	"DEFINE_PEEPHOLE2"
	.sleb128 17
	.uleb128 0xc
	.string	"DEFINE_COMBINE"
	.sleb128 18
	.uleb128 0xc
	.string	"DEFINE_EXPAND"
	.sleb128 19
	.uleb128 0xc
	.string	"DEFINE_DELAY"
	.sleb128 20
	.uleb128 0xc
	.string	"DEFINE_FUNCTION_UNIT"
	.sleb128 21
	.uleb128 0xc
	.string	"DEFINE_ASM_ATTRIBUTES"
	.sleb128 22
	.uleb128 0xc
	.string	"DEFINE_COND_EXEC"
	.sleb128 23
	.uleb128 0xc
	.string	"SEQUENCE"
	.sleb128 24
	.uleb128 0xc
	.string	"ADDRESS"
	.sleb128 25
	.uleb128 0xc
	.string	"DEFINE_CPU_UNIT"
	.sleb128 26
	.uleb128 0xc
	.string	"DEFINE_QUERY_CPU_UNIT"
	.sleb128 27
	.uleb128 0xc
	.string	"EXCLUSION_SET"
	.sleb128 28
	.uleb128 0xc
	.string	"PRESENCE_SET"
	.sleb128 29
	.uleb128 0xc
	.string	"ABSENCE_SET"
	.sleb128 30
	.uleb128 0xc
	.string	"DEFINE_BYPASS"
	.sleb128 31
	.uleb128 0xc
	.string	"DEFINE_AUTOMATON"
	.sleb128 32
	.uleb128 0xc
	.string	"AUTOMATA_OPTION"
	.sleb128 33
	.uleb128 0xc
	.string	"DEFINE_RESERVATION"
	.sleb128 34
	.uleb128 0xc
	.string	"DEFINE_INSN_RESERVATION"
	.sleb128 35
	.uleb128 0xc
	.string	"DEFINE_ATTR"
	.sleb128 36
	.uleb128 0xc
	.string	"ATTR"
	.sleb128 37
	.uleb128 0xc
	.string	"SET_ATTR"
	.sleb128 38
	.uleb128 0xc
	.string	"SET_ATTR_ALTERNATIVE"
	.sleb128 39
	.uleb128 0xc
	.string	"EQ_ATTR"
	.sleb128 40
	.uleb128 0xc
	.string	"ATTR_FLAG"
	.sleb128 41
	.uleb128 0xc
	.string	"INSN"
	.sleb128 42
	.uleb128 0xc
	.string	"JUMP_INSN"
	.sleb128 43
	.uleb128 0xc
	.string	"CALL_INSN"
	.sleb128 44
	.uleb128 0xc
	.string	"BARRIER"
	.sleb128 45
	.uleb128 0xc
	.string	"CODE_LABEL"
	.sleb128 46
	.uleb128 0xc
	.string	"NOTE"
	.sleb128 47
	.uleb128 0xc
	.string	"COND_EXEC"
	.sleb128 48
	.uleb128 0xc
	.string	"PARALLEL"
	.sleb128 49
	.uleb128 0xc
	.string	"ASM_INPUT"
	.sleb128 50
	.uleb128 0xc
	.string	"ASM_OPERANDS"
	.sleb128 51
	.uleb128 0xc
	.string	"UNSPEC"
	.sleb128 52
	.uleb128 0xc
	.string	"UNSPEC_VOLATILE"
	.sleb128 53
	.uleb128 0xc
	.string	"ADDR_VEC"
	.sleb128 54
	.uleb128 0xc
	.string	"ADDR_DIFF_VEC"
	.sleb128 55
	.uleb128 0xc
	.string	"PREFETCH"
	.sleb128 56
	.uleb128 0xc
	.string	"SET"
	.sleb128 57
	.uleb128 0xc
	.string	"USE"
	.sleb128 58
	.uleb128 0xc
	.string	"CLOBBER"
	.sleb128 59
	.uleb128 0xc
	.string	"CALL"
	.sleb128 60
	.uleb128 0xc
	.string	"RETURN"
	.sleb128 61
	.uleb128 0xc
	.string	"TRAP_IF"
	.sleb128 62
	.uleb128 0xc
	.string	"RESX"
	.sleb128 63
	.uleb128 0xc
	.string	"CONST_INT"
	.sleb128 64
	.uleb128 0xc
	.string	"CONST_DOUBLE"
	.sleb128 65
	.uleb128 0xc
	.string	"CONST_VECTOR"
	.sleb128 66
	.uleb128 0xc
	.string	"CONST_STRING"
	.sleb128 67
	.uleb128 0xc
	.string	"CONST"
	.sleb128 68
	.uleb128 0xc
	.string	"PC"
	.sleb128 69
	.uleb128 0xc
	.string	"VALUE"
	.sleb128 70
	.uleb128 0xc
	.string	"REG"
	.sleb128 71
	.uleb128 0xc
	.string	"SCRATCH"
	.sleb128 72
	.uleb128 0xc
	.string	"SUBREG"
	.sleb128 73
	.uleb128 0xc
	.string	"STRICT_LOW_PART"
	.sleb128 74
	.uleb128 0xc
	.string	"CONCAT"
	.sleb128 75
	.uleb128 0xc
	.string	"MEM"
	.sleb128 76
	.uleb128 0xc
	.string	"LABEL_REF"
	.sleb128 77
	.uleb128 0xc
	.string	"SYMBOL_REF"
	.sleb128 78
	.uleb128 0xc
	.string	"CC0"
	.sleb128 79
	.uleb128 0xc
	.string	"ADDRESSOF"
	.sleb128 80
	.uleb128 0xc
	.string	"QUEUED"
	.sleb128 81
	.uleb128 0xc
	.string	"IF_THEN_ELSE"
	.sleb128 82
	.uleb128 0xc
	.string	"COND"
	.sleb128 83
	.uleb128 0xc
	.string	"COMPARE"
	.sleb128 84
	.uleb128 0xc
	.string	"PLUS"
	.sleb128 85
	.uleb128 0xc
	.string	"MINUS"
	.sleb128 86
	.uleb128 0xc
	.string	"NEG"
	.sleb128 87
	.uleb128 0xc
	.string	"MULT"
	.sleb128 88
	.uleb128 0xc
	.string	"DIV"
	.sleb128 89
	.uleb128 0xc
	.string	"MOD"
	.sleb128 90
	.uleb128 0xc
	.string	"UDIV"
	.sleb128 91
	.uleb128 0xc
	.string	"UMOD"
	.sleb128 92
	.uleb128 0xc
	.string	"AND"
	.sleb128 93
	.uleb128 0xc
	.string	"IOR"
	.sleb128 94
	.uleb128 0xc
	.string	"XOR"
	.sleb128 95
	.uleb128 0xc
	.string	"NOT"
	.sleb128 96
	.uleb128 0xc
	.string	"ASHIFT"
	.sleb128 97
	.uleb128 0xc
	.string	"ROTATE"
	.sleb128 98
	.uleb128 0xc
	.string	"ASHIFTRT"
	.sleb128 99
	.uleb128 0xc
	.string	"LSHIFTRT"
	.sleb128 100
	.uleb128 0xc
	.string	"ROTATERT"
	.sleb128 101
	.uleb128 0xc
	.string	"SMIN"
	.sleb128 102
	.uleb128 0xc
	.string	"SMAX"
	.sleb128 103
	.uleb128 0xc
	.string	"UMIN"
	.sleb128 104
	.uleb128 0xc
	.string	"UMAX"
	.sleb128 105
	.uleb128 0xc
	.string	"PRE_DEC"
	.sleb128 106
	.uleb128 0xc
	.string	"PRE_INC"
	.sleb128 107
	.uleb128 0xc
	.string	"POST_DEC"
	.sleb128 108
	.uleb128 0xc
	.string	"POST_INC"
	.sleb128 109
	.uleb128 0xc
	.string	"PRE_MODIFY"
	.sleb128 110
	.uleb128 0xc
	.string	"POST_MODIFY"
	.sleb128 111
	.uleb128 0xc
	.string	"NE"
	.sleb128 112
	.uleb128 0xc
	.string	"EQ"
	.sleb128 113
	.uleb128 0xc
	.string	"GE"
	.sleb128 114
	.uleb128 0xc
	.string	"GT"
	.sleb128 115
	.uleb128 0xc
	.string	"LE"
	.sleb128 116
	.uleb128 0xc
	.string	"LT"
	.sleb128 117
	.uleb128 0xc
	.string	"GEU"
	.sleb128 118
	.uleb128 0xc
	.string	"GTU"
	.sleb128 119
	.uleb128 0xc
	.string	"LEU"
	.sleb128 120
	.uleb128 0xc
	.string	"LTU"
	.sleb128 121
	.uleb128 0xc
	.string	"UNORDERED"
	.sleb128 122
	.uleb128 0xc
	.string	"ORDERED"
	.sleb128 123
	.uleb128 0xc
	.string	"UNEQ"
	.sleb128 124
	.uleb128 0xc
	.string	"UNGE"
	.sleb128 125
	.uleb128 0xc
	.string	"UNGT"
	.sleb128 126
	.uleb128 0xc
	.string	"UNLE"
	.sleb128 127
	.uleb128 0xc
	.string	"UNLT"
	.sleb128 128
	.uleb128 0xc
	.string	"LTGT"
	.sleb128 129
	.uleb128 0xc
	.string	"SIGN_EXTEND"
	.sleb128 130
	.uleb128 0xc
	.string	"ZERO_EXTEND"
	.sleb128 131
	.uleb128 0xc
	.string	"TRUNCATE"
	.sleb128 132
	.uleb128 0xc
	.string	"FLOAT_EXTEND"
	.sleb128 133
	.uleb128 0xc
	.string	"FLOAT_TRUNCATE"
	.sleb128 134
	.uleb128 0xc
	.string	"FLOAT"
	.sleb128 135
	.uleb128 0xc
	.string	"FIX"
	.sleb128 136
	.uleb128 0xc
	.string	"UNSIGNED_FLOAT"
	.sleb128 137
	.uleb128 0xc
	.string	"UNSIGNED_FIX"
	.sleb128 138
	.uleb128 0xc
	.string	"ABS"
	.sleb128 139
	.uleb128 0xc
	.string	"SQRT"
	.sleb128 140
	.uleb128 0xc
	.string	"FFS"
	.sleb128 141
	.uleb128 0xc
	.string	"SIGN_EXTRACT"
	.sleb128 142
	.uleb128 0xc
	.string	"ZERO_EXTRACT"
	.sleb128 143
	.uleb128 0xc
	.string	"HIGH"
	.sleb128 144
	.uleb128 0xc
	.string	"LO_SUM"
	.sleb128 145
	.uleb128 0xc
	.string	"RANGE_INFO"
	.sleb128 146
	.uleb128 0xc
	.string	"RANGE_REG"
	.sleb128 147
	.uleb128 0xc
	.string	"RANGE_VAR"
	.sleb128 148
	.uleb128 0xc
	.string	"RANGE_LIVE"
	.sleb128 149
	.uleb128 0xc
	.string	"CONSTANT_P_RTX"
	.sleb128 150
	.uleb128 0xc
	.string	"CALL_PLACEHOLDER"
	.sleb128 151
	.uleb128 0xc
	.string	"VEC_MERGE"
	.sleb128 152
	.uleb128 0xc
	.string	"VEC_SELECT"
	.sleb128 153
	.uleb128 0xc
	.string	"VEC_CONCAT"
	.sleb128 154
	.uleb128 0xc
	.string	"VEC_DUPLICATE"
	.sleb128 155
	.uleb128 0xc
	.string	"SS_PLUS"
	.sleb128 156
	.uleb128 0xc
	.string	"US_PLUS"
	.sleb128 157
	.uleb128 0xc
	.string	"SS_MINUS"
	.sleb128 158
	.uleb128 0xc
	.string	"US_MINUS"
	.sleb128 159
	.uleb128 0xc
	.string	"SS_TRUNCATE"
	.sleb128 160
	.uleb128 0xc
	.string	"US_TRUNCATE"
	.sleb128 161
	.uleb128 0xc
	.string	"PHI"
	.sleb128 162
	.uleb128 0xc
	.string	"LAST_AND_UNUSED_RTX_CODE"
	.sleb128 163
	.byte	0x0
	.uleb128 0x1d
	.long	0x1619
	.byte	0x4
	.byte	0x3
	.byte	0x4d
	.uleb128 0x6
	.string	"min_align"
	.byte	0x3
	.byte	0x4f
	.long	0x537
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"base_after_vec"
	.byte	0x3
	.byte	0x51
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"min_after_vec"
	.byte	0x3
	.byte	0x52
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"max_after_vec"
	.byte	0x3
	.byte	0x54
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"min_after_base"
	.byte	0x3
	.byte	0x56
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"max_after_base"
	.byte	0x3
	.byte	0x58
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"offset_unsigned"
	.byte	0x3
	.byte	0x5b
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x6
	.string	"scale"
	.byte	0x3
	.byte	0x5d
	.long	0x537
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.byte	0x0
	.uleb128 0x2
	.string	"addr_diff_vec_flags"
	.byte	0x3
	.byte	0x5e
	.long	0x153f
	.uleb128 0x16
	.long	0x168a
	.long	.LASF7
	.byte	0x18
	.byte	0x3
	.byte	0x68
	.uleb128 0x7
	.string	"alias"
	.byte	0x3
	.byte	0x69
	.long	0x5d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"expr"
	.byte	0x3
	.byte	0x6a
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1e
	.long	.LASF8
	.byte	0x3
	.byte	0x6b
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1e
	.long	.LASF9
	.byte	0x3
	.byte	0x6c
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1e
	.long	.LASF10
	.byte	0x3
	.byte	0x6d
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x1f
	.long	.LASF7
	.byte	0x3
	.byte	0x6e
	.long	0x1634
	.uleb128 0x8
	.long	0x1767
	.string	"rtunion_def"
	.byte	0x8
	.byte	0x3
	.byte	0x73
	.uleb128 0x20
	.string	"rtwint"
	.byte	0x3
	.byte	0x74
	.long	0x5d3
	.uleb128 0x20
	.string	"rtint"
	.byte	0x3
	.byte	0x75
	.long	0x45e
	.uleb128 0x20
	.string	"rtuint"
	.byte	0x3
	.byte	0x76
	.long	0x537
	.uleb128 0x20
	.string	"rtstr"
	.byte	0x3
	.byte	0x77
	.long	0x44b
	.uleb128 0x20
	.string	"rtx"
	.byte	0x3
	.byte	0x78
	.long	0x99
	.uleb128 0x20
	.string	"rtvec"
	.byte	0x3
	.byte	0x79
	.long	0x198
	.uleb128 0x20
	.string	"rttype"
	.byte	0x3
	.byte	0x7a
	.long	0x9bb
	.uleb128 0x20
	.string	"rt_addr_diff_vec_flags"
	.byte	0x3
	.byte	0x7b
	.long	0x1619
	.uleb128 0x20
	.string	"rt_cselib"
	.byte	0x3
	.byte	0x7c
	.long	0x177b
	.uleb128 0x20
	.string	"rtbit"
	.byte	0x3
	.byte	0x7d
	.long	0x17e3
	.uleb128 0x20
	.string	"rttree"
	.byte	0x3
	.byte	0x7e
	.long	0x1e0
	.uleb128 0x20
	.string	"bb"
	.byte	0x3
	.byte	0x7f
	.long	0x196a
	.uleb128 0x20
	.string	"rtmem"
	.byte	0x3
	.byte	0x80
	.long	0x1970
	.byte	0x0
	.uleb128 0x21
	.string	"cselib_val_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x1767
	.uleb128 0x4
	.long	0x17e3
	.string	"bitmap_head_def"
	.byte	0x10
	.byte	0x3
	.byte	0x7d
	.uleb128 0x7
	.string	"first"
	.byte	0x5
	.byte	0x3d
	.long	0x5d0b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"current"
	.byte	0x5
	.byte	0x3e
	.long	0x5d0b
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"indx"
	.byte	0x5
	.byte	0x3f
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"using_obstack"
	.byte	0x5
	.byte	0x40
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1781
	.uleb128 0x4
	.long	0x196a
	.string	"basic_block_def"
	.byte	0x50
	.byte	0x3
	.byte	0x7f
	.uleb128 0x7
	.string	"head"
	.byte	0xd
	.byte	0xb5
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"end"
	.byte	0xd
	.byte	0xb5
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"head_tree"
	.byte	0xd
	.byte	0xb8
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"end_tree"
	.byte	0xd
	.byte	0xb9
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"pred"
	.byte	0xd
	.byte	0xbc
	.long	0x5e59
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"succ"
	.byte	0xd
	.byte	0xbc
	.long	0x5e59
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"local_set"
	.byte	0xd
	.byte	0xc1
	.long	0x5d8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"cond_local_set"
	.byte	0xd
	.byte	0xc5
	.long	0x5d8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"global_live_at_start"
	.byte	0xd
	.byte	0xcb
	.long	0x5d8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"global_live_at_end"
	.byte	0xd
	.byte	0xcd
	.long	0x5d8d
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"aux"
	.byte	0xd
	.byte	0xd0
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x1e
	.long	.LASF11
	.byte	0xd
	.byte	0xd3
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"prev_bb"
	.byte	0xd
	.byte	0xd6
	.long	0x196a
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"next_bb"
	.byte	0xd
	.byte	0xd6
	.long	0x196a
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"loop_depth"
	.byte	0xd
	.byte	0xd9
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x7
	.string	"loop_father"
	.byte	0xd
	.byte	0xdc
	.long	0x60d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x1e
	.long	.LASF12
	.byte	0xd
	.byte	0xdf
	.long	0x5d9b
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x7
	.string	"frequency"
	.byte	0xd
	.byte	0xe2
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x7
	.string	"flags"
	.byte	0xd
	.byte	0xe5
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x17e9
	.uleb128 0x3
	.byte	0x4
	.long	0x168a
	.uleb128 0x2
	.string	"rtunion"
	.byte	0x3
	.byte	0x82
	.long	0x1695
	.uleb128 0x12
	.long	0x1995
	.long	0x1976
	.uleb128 0x13
	.long	0x54e
	.byte	0x0
	.byte	0x0
	.uleb128 0x12
	.long	0x19a5
	.long	0x99
	.uleb128 0x13
	.long	0x54e
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x99
	.uleb128 0x4
	.long	0x19dd
	.string	"location_s"
	.byte	0x8
	.byte	0x9
	.byte	0x1c
	.uleb128 0x7
	.string	"file"
	.byte	0x9
	.byte	0x1e
	.long	0x44b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"line"
	.byte	0x9
	.byte	0x21
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"location_t"
	.byte	0x9
	.byte	0x23
	.long	0x19ab
	.uleb128 0xb
	.long	0x2311
	.string	"tree_code"
	.byte	0x4
	.byte	0x6
	.byte	0x27
	.uleb128 0xc
	.string	"ERROR_MARK"
	.sleb128 0
	.uleb128 0xc
	.string	"IDENTIFIER_NODE"
	.sleb128 1
	.uleb128 0xc
	.string	"OP_IDENTIFIER"
	.sleb128 2
	.uleb128 0xc
	.string	"TREE_LIST"
	.sleb128 3
	.uleb128 0xc
	.string	"TREE_VEC"
	.sleb128 4
	.uleb128 0xc
	.string	"BLOCK"
	.sleb128 5
	.uleb128 0xc
	.string	"VOID_TYPE"
	.sleb128 6
	.uleb128 0xc
	.string	"INTEGER_TYPE"
	.sleb128 7
	.uleb128 0xc
	.string	"REAL_TYPE"
	.sleb128 8
	.uleb128 0xc
	.string	"COMPLEX_TYPE"
	.sleb128 9
	.uleb128 0xc
	.string	"VECTOR_TYPE"
	.sleb128 10
	.uleb128 0xc
	.string	"ENUMERAL_TYPE"
	.sleb128 11
	.uleb128 0xc
	.string	"BOOLEAN_TYPE"
	.sleb128 12
	.uleb128 0xc
	.string	"CHAR_TYPE"
	.sleb128 13
	.uleb128 0xc
	.string	"POINTER_TYPE"
	.sleb128 14
	.uleb128 0xc
	.string	"OFFSET_TYPE"
	.sleb128 15
	.uleb128 0xc
	.string	"REFERENCE_TYPE"
	.sleb128 16
	.uleb128 0xc
	.string	"METHOD_TYPE"
	.sleb128 17
	.uleb128 0xc
	.string	"FILE_TYPE"
	.sleb128 18
	.uleb128 0xc
	.string	"ARRAY_TYPE"
	.sleb128 19
	.uleb128 0xc
	.string	"SET_TYPE"
	.sleb128 20
	.uleb128 0xc
	.string	"RECORD_TYPE"
	.sleb128 21
	.uleb128 0xc
	.string	"UNION_TYPE"
	.sleb128 22
	.uleb128 0xc
	.string	"QUAL_UNION_TYPE"
	.sleb128 23
	.uleb128 0xc
	.string	"FUNCTION_TYPE"
	.sleb128 24
	.uleb128 0xc
	.string	"LANG_TYPE"
	.sleb128 25
	.uleb128 0xc
	.string	"INTEGER_CST"
	.sleb128 26
	.uleb128 0xc
	.string	"REAL_CST"
	.sleb128 27
	.uleb128 0xc
	.string	"COMPLEX_CST"
	.sleb128 28
	.uleb128 0xc
	.string	"VECTOR_CST"
	.sleb128 29
	.uleb128 0xc
	.string	"STRING_CST"
	.sleb128 30
	.uleb128 0xc
	.string	"FUNCTION_DECL"
	.sleb128 31
	.uleb128 0xc
	.string	"LABEL_DECL"
	.sleb128 32
	.uleb128 0xc
	.string	"CONST_DECL"
	.sleb128 33
	.uleb128 0xc
	.string	"TYPE_DECL"
	.sleb128 34
	.uleb128 0xc
	.string	"VAR_DECL"
	.sleb128 35
	.uleb128 0xc
	.string	"PARM_DECL"
	.sleb128 36
	.uleb128 0xc
	.string	"RESULT_DECL"
	.sleb128 37
	.uleb128 0xc
	.string	"FIELD_DECL"
	.sleb128 38
	.uleb128 0xc
	.string	"NAMESPACE_DECL"
	.sleb128 39
	.uleb128 0xc
	.string	"COMPONENT_REF"
	.sleb128 40
	.uleb128 0xc
	.string	"BIT_FIELD_REF"
	.sleb128 41
	.uleb128 0xc
	.string	"INDIRECT_REF"
	.sleb128 42
	.uleb128 0xc
	.string	"BUFFER_REF"
	.sleb128 43
	.uleb128 0xc
	.string	"ARRAY_REF"
	.sleb128 44
	.uleb128 0xc
	.string	"ARRAY_RANGE_REF"
	.sleb128 45
	.uleb128 0xc
	.string	"VTABLE_REF"
	.sleb128 46
	.uleb128 0xc
	.string	"CONSTRUCTOR"
	.sleb128 47
	.uleb128 0xc
	.string	"COMPOUND_EXPR"
	.sleb128 48
	.uleb128 0xc
	.string	"MODIFY_EXPR"
	.sleb128 49
	.uleb128 0xc
	.string	"INIT_EXPR"
	.sleb128 50
	.uleb128 0xc
	.string	"TARGET_EXPR"
	.sleb128 51
	.uleb128 0xc
	.string	"COND_EXPR"
	.sleb128 52
	.uleb128 0xc
	.string	"BIND_EXPR"
	.sleb128 53
	.uleb128 0xc
	.string	"CALL_EXPR"
	.sleb128 54
	.uleb128 0xc
	.string	"METHOD_CALL_EXPR"
	.sleb128 55
	.uleb128 0xc
	.string	"WITH_CLEANUP_EXPR"
	.sleb128 56
	.uleb128 0xc
	.string	"CLEANUP_POINT_EXPR"
	.sleb128 57
	.uleb128 0xc
	.string	"PLACEHOLDER_EXPR"
	.sleb128 58
	.uleb128 0xc
	.string	"WITH_RECORD_EXPR"
	.sleb128 59
	.uleb128 0xc
	.string	"PLUS_EXPR"
	.sleb128 60
	.uleb128 0xc
	.string	"MINUS_EXPR"
	.sleb128 61
	.uleb128 0xc
	.string	"MULT_EXPR"
	.sleb128 62
	.uleb128 0xc
	.string	"TRUNC_DIV_EXPR"
	.sleb128 63
	.uleb128 0xc
	.string	"CEIL_DIV_EXPR"
	.sleb128 64
	.uleb128 0xc
	.string	"FLOOR_DIV_EXPR"
	.sleb128 65
	.uleb128 0xc
	.string	"ROUND_DIV_EXPR"
	.sleb128 66
	.uleb128 0xc
	.string	"TRUNC_MOD_EXPR"
	.sleb128 67
	.uleb128 0xc
	.string	"CEIL_MOD_EXPR"
	.sleb128 68
	.uleb128 0xc
	.string	"FLOOR_MOD_EXPR"
	.sleb128 69
	.uleb128 0xc
	.string	"ROUND_MOD_EXPR"
	.sleb128 70
	.uleb128 0xc
	.string	"RDIV_EXPR"
	.sleb128 71
	.uleb128 0xc
	.string	"EXACT_DIV_EXPR"
	.sleb128 72
	.uleb128 0xc
	.string	"FIX_TRUNC_EXPR"
	.sleb128 73
	.uleb128 0xc
	.string	"FIX_CEIL_EXPR"
	.sleb128 74
	.uleb128 0xc
	.string	"FIX_FLOOR_EXPR"
	.sleb128 75
	.uleb128 0xc
	.string	"FIX_ROUND_EXPR"
	.sleb128 76
	.uleb128 0xc
	.string	"FLOAT_EXPR"
	.sleb128 77
	.uleb128 0xc
	.string	"EXPON_EXPR"
	.sleb128 78
	.uleb128 0xc
	.string	"NEGATE_EXPR"
	.sleb128 79
	.uleb128 0xc
	.string	"MIN_EXPR"
	.sleb128 80
	.uleb128 0xc
	.string	"MAX_EXPR"
	.sleb128 81
	.uleb128 0xc
	.string	"ABS_EXPR"
	.sleb128 82
	.uleb128 0xc
	.string	"FFS_EXPR"
	.sleb128 83
	.uleb128 0xc
	.string	"LSHIFT_EXPR"
	.sleb128 84
	.uleb128 0xc
	.string	"RSHIFT_EXPR"
	.sleb128 85
	.uleb128 0xc
	.string	"LROTATE_EXPR"
	.sleb128 86
	.uleb128 0xc
	.string	"RROTATE_EXPR"
	.sleb128 87
	.uleb128 0xc
	.string	"BIT_IOR_EXPR"
	.sleb128 88
	.uleb128 0xc
	.string	"BIT_XOR_EXPR"
	.sleb128 89
	.uleb128 0xc
	.string	"BIT_AND_EXPR"
	.sleb128 90
	.uleb128 0xc
	.string	"BIT_ANDTC_EXPR"
	.sleb128 91
	.uleb128 0xc
	.string	"BIT_NOT_EXPR"
	.sleb128 92
	.uleb128 0xc
	.string	"TRUTH_ANDIF_EXPR"
	.sleb128 93
	.uleb128 0xc
	.string	"TRUTH_ORIF_EXPR"
	.sleb128 94
	.uleb128 0xc
	.string	"TRUTH_AND_EXPR"
	.sleb128 95
	.uleb128 0xc
	.string	"TRUTH_OR_EXPR"
	.sleb128 96
	.uleb128 0xc
	.string	"TRUTH_XOR_EXPR"
	.sleb128 97
	.uleb128 0xc
	.string	"TRUTH_NOT_EXPR"
	.sleb128 98
	.uleb128 0xc
	.string	"LT_EXPR"
	.sleb128 99
	.uleb128 0xc
	.string	"LE_EXPR"
	.sleb128 100
	.uleb128 0xc
	.string	"GT_EXPR"
	.sleb128 101
	.uleb128 0xc
	.string	"GE_EXPR"
	.sleb128 102
	.uleb128 0xc
	.string	"EQ_EXPR"
	.sleb128 103
	.uleb128 0xc
	.string	"NE_EXPR"
	.sleb128 104
	.uleb128 0xc
	.string	"UNORDERED_EXPR"
	.sleb128 105
	.uleb128 0xc
	.string	"ORDERED_EXPR"
	.sleb128 106
	.uleb128 0xc
	.string	"UNLT_EXPR"
	.sleb128 107
	.uleb128 0xc
	.string	"UNLE_EXPR"
	.sleb128 108
	.uleb128 0xc
	.string	"UNGT_EXPR"
	.sleb128 109
	.uleb128 0xc
	.string	"UNGE_EXPR"
	.sleb128 110
	.uleb128 0xc
	.string	"UNEQ_EXPR"
	.sleb128 111
	.uleb128 0xc
	.string	"IN_EXPR"
	.sleb128 112
	.uleb128 0xc
	.string	"SET_LE_EXPR"
	.sleb128 113
	.uleb128 0xc
	.string	"CARD_EXPR"
	.sleb128 114
	.uleb128 0xc
	.string	"RANGE_EXPR"
	.sleb128 115
	.uleb128 0xc
	.string	"CONVERT_EXPR"
	.sleb128 116
	.uleb128 0xc
	.string	"NOP_EXPR"
	.sleb128 117
	.uleb128 0xc
	.string	"NON_LVALUE_EXPR"
	.sleb128 118
	.uleb128 0xc
	.string	"VIEW_CONVERT_EXPR"
	.sleb128 119
	.uleb128 0xc
	.string	"SAVE_EXPR"
	.sleb128 120
	.uleb128 0xc
	.string	"UNSAVE_EXPR"
	.sleb128 121
	.uleb128 0xc
	.string	"RTL_EXPR"
	.sleb128 122
	.uleb128 0xc
	.string	"ADDR_EXPR"
	.sleb128 123
	.uleb128 0xc
	.string	"REFERENCE_EXPR"
	.sleb128 124
	.uleb128 0xc
	.string	"ENTRY_VALUE_EXPR"
	.sleb128 125
	.uleb128 0xc
	.string	"FDESC_EXPR"
	.sleb128 126
	.uleb128 0xc
	.string	"COMPLEX_EXPR"
	.sleb128 127
	.uleb128 0xc
	.string	"CONJ_EXPR"
	.sleb128 128
	.uleb128 0xc
	.string	"REALPART_EXPR"
	.sleb128 129
	.uleb128 0xc
	.string	"IMAGPART_EXPR"
	.sleb128 130
	.uleb128 0xc
	.string	"PREDECREMENT_EXPR"
	.sleb128 131
	.uleb128 0xc
	.string	"PREINCREMENT_EXPR"
	.sleb128 132
	.uleb128 0xc
	.string	"POSTDECREMENT_EXPR"
	.sleb128 133
	.uleb128 0xc
	.string	"POSTINCREMENT_EXPR"
	.sleb128 134
	.uleb128 0xc
	.string	"VA_ARG_EXPR"
	.sleb128 135
	.uleb128 0xc
	.string	"TRY_CATCH_EXPR"
	.sleb128 136
	.uleb128 0xc
	.string	"TRY_FINALLY_EXPR"
	.sleb128 137
	.uleb128 0xc
	.string	"GOTO_SUBROUTINE_EXPR"
	.sleb128 138
	.uleb128 0xc
	.string	"POPDHC_EXPR"
	.sleb128 139
	.uleb128 0xc
	.string	"POPDCC_EXPR"
	.sleb128 140
	.uleb128 0xc
	.string	"LABEL_EXPR"
	.sleb128 141
	.uleb128 0xc
	.string	"GOTO_EXPR"
	.sleb128 142
	.uleb128 0xc
	.string	"RETURN_EXPR"
	.sleb128 143
	.uleb128 0xc
	.string	"EXIT_EXPR"
	.sleb128 144
	.uleb128 0xc
	.string	"LOOP_EXPR"
	.sleb128 145
	.uleb128 0xc
	.string	"LABELED_BLOCK_EXPR"
	.sleb128 146
	.uleb128 0xc
	.string	"EXIT_BLOCK_EXPR"
	.sleb128 147
	.uleb128 0xc
	.string	"EXPR_WITH_FILE_LOCATION"
	.sleb128 148
	.uleb128 0xc
	.string	"SWITCH_EXPR"
	.sleb128 149
	.uleb128 0xc
	.string	"EXC_PTR_EXPR"
	.sleb128 150
	.uleb128 0xc
	.string	"LAST_AND_UNUSED_TREE_CODE"
	.sleb128 151
	.byte	0x0
	.uleb128 0x2
	.string	"LABEL_IDX"
	.byte	0x6
	.byte	0x31
	.long	0x537
	.uleb128 0x4
	.long	0x235e
	.string	"mongoose_gcc_DST_IDX"
	.byte	0x8
	.byte	0x6
	.byte	0x32
	.uleb128 0x7
	.string	"block"
	.byte	0x6
	.byte	0x32
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1e
	.long	.LASF8
	.byte	0x6
	.byte	0x32
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2
	.string	"ST"
	.byte	0x6
	.byte	0x36
	.long	0x2368
	.uleb128 0x21
	.string	"st"
	.byte	0x1
	.uleb128 0x1c
	.long	0x23bd
	.long	.LASF13
	.byte	0x4
	.byte	0x6
	.byte	0x5a
	.uleb128 0xc
	.string	"NOT_BUILT_IN"
	.sleb128 0
	.uleb128 0xc
	.string	"BUILT_IN_FRONTEND"
	.sleb128 1
	.uleb128 0xc
	.string	"BUILT_IN_MD"
	.sleb128 2
	.uleb128 0xc
	.string	"BUILT_IN_NORMAL"
	.sleb128 3
	.byte	0x0
	.uleb128 0xb
	.long	0x3c1b
	.string	"built_in_function"
	.byte	0x4
	.byte	0x6
	.byte	0x69
	.uleb128 0xc
	.string	"BUILT_IN_ALLOCA"
	.sleb128 0
	.uleb128 0xc
	.string	"BUILT_IN_ABS"
	.sleb128 1
	.uleb128 0xc
	.string	"BUILT_IN_LABS"
	.sleb128 2
	.uleb128 0xc
	.string	"BUILT_IN_FABS"
	.sleb128 3
	.uleb128 0xc
	.string	"BUILT_IN_FABSF"
	.sleb128 4
	.uleb128 0xc
	.string	"BUILT_IN_FABSL"
	.sleb128 5
	.uleb128 0xc
	.string	"BUILT_IN_LLABS"
	.sleb128 6
	.uleb128 0xc
	.string	"BUILT_IN_IMAXABS"
	.sleb128 7
	.uleb128 0xc
	.string	"BUILT_IN_CONJ"
	.sleb128 8
	.uleb128 0xc
	.string	"BUILT_IN_CONJF"
	.sleb128 9
	.uleb128 0xc
	.string	"BUILT_IN_CONJL"
	.sleb128 10
	.uleb128 0xc
	.string	"BUILT_IN_CREAL"
	.sleb128 11
	.uleb128 0xc
	.string	"BUILT_IN_CREALF"
	.sleb128 12
	.uleb128 0xc
	.string	"BUILT_IN_CREALL"
	.sleb128 13
	.uleb128 0xc
	.string	"BUILT_IN_CIMAG"
	.sleb128 14
	.uleb128 0xc
	.string	"BUILT_IN_CIMAGF"
	.sleb128 15
	.uleb128 0xc
	.string	"BUILT_IN_CIMAGL"
	.sleb128 16
	.uleb128 0xc
	.string	"BUILT_IN_DIV"
	.sleb128 17
	.uleb128 0xc
	.string	"BUILT_IN_LDIV"
	.sleb128 18
	.uleb128 0xc
	.string	"BUILT_IN_FFLOOR"
	.sleb128 19
	.uleb128 0xc
	.string	"BUILT_IN_FCEIL"
	.sleb128 20
	.uleb128 0xc
	.string	"BUILT_IN_FMOD"
	.sleb128 21
	.uleb128 0xc
	.string	"BUILT_IN_FREM"
	.sleb128 22
	.uleb128 0xc
	.string	"BUILT_IN_BZERO"
	.sleb128 23
	.uleb128 0xc
	.string	"BUILT_IN_BCOPY"
	.sleb128 24
	.uleb128 0xc
	.string	"BUILT_IN_BCMP"
	.sleb128 25
	.uleb128 0xc
	.string	"BUILT_IN_FFS"
	.sleb128 26
	.uleb128 0xc
	.string	"BUILT_IN_INDEX"
	.sleb128 27
	.uleb128 0xc
	.string	"BUILT_IN_RINDEX"
	.sleb128 28
	.uleb128 0xc
	.string	"BUILT_IN_MEMCPY"
	.sleb128 29
	.uleb128 0xc
	.string	"BUILT_IN_MEMMOVE"
	.sleb128 30
	.uleb128 0xc
	.string	"BUILT_IN_MEMCMP"
	.sleb128 31
	.uleb128 0xc
	.string	"BUILT_IN_MEMSET"
	.sleb128 32
	.uleb128 0xc
	.string	"BUILT_IN_MEMPCPY"
	.sleb128 33
	.uleb128 0xc
	.string	"BUILT_IN_STRCAT"
	.sleb128 34
	.uleb128 0xc
	.string	"BUILT_IN_STRNCAT"
	.sleb128 35
	.uleb128 0xc
	.string	"BUILT_IN_STPCPY"
	.sleb128 36
	.uleb128 0xc
	.string	"BUILT_IN_STRCPY"
	.sleb128 37
	.uleb128 0xc
	.string	"BUILT_IN_STRNCPY"
	.sleb128 38
	.uleb128 0xc
	.string	"BUILT_IN_STRCMP"
	.sleb128 39
	.uleb128 0xc
	.string	"BUILT_IN_STRNCMP"
	.sleb128 40
	.uleb128 0xc
	.string	"BUILT_IN_STRLEN"
	.sleb128 41
	.uleb128 0xc
	.string	"BUILT_IN_STRSTR"
	.sleb128 42
	.uleb128 0xc
	.string	"BUILT_IN_STRPBRK"
	.sleb128 43
	.uleb128 0xc
	.string	"BUILT_IN_STRSPN"
	.sleb128 44
	.uleb128 0xc
	.string	"BUILT_IN_STRCSPN"
	.sleb128 45
	.uleb128 0xc
	.string	"BUILT_IN_STRCHR"
	.sleb128 46
	.uleb128 0xc
	.string	"BUILT_IN_STRRCHR"
	.sleb128 47
	.uleb128 0xc
	.string	"BUILT_IN_FLOOR"
	.sleb128 48
	.uleb128 0xc
	.string	"BUILT_IN_FLOORF"
	.sleb128 49
	.uleb128 0xc
	.string	"BUILT_IN_FLOORL"
	.sleb128 50
	.uleb128 0xc
	.string	"BUILT_IN_POW"
	.sleb128 51
	.uleb128 0xc
	.string	"BUILT_IN_TAN"
	.sleb128 52
	.uleb128 0xc
	.string	"BUILT_IN_PERIPHERAL_RW_BEGIN"
	.sleb128 53
	.uleb128 0xc
	.string	"BUILT_IN_PERIPHERAL_RW_END"
	.sleb128 54
	.uleb128 0xc
	.string	"BUILT_IN_VBUF_OFFSET"
	.sleb128 55
	.uleb128 0xc
	.string	"BUILT_IN_SBUF_OFFSET"
	.sleb128 56
	.uleb128 0xc
	.string	"BUILD_IN_MUL_SHIFT_HI"
	.sleb128 57
	.uleb128 0xc
	.string	"BUILD_IN_MUL_SHIFT"
	.sleb128 58
	.uleb128 0xc
	.string	"BUILD_IN_C3_LEAD"
	.sleb128 59
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC"
	.sleb128 60
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN"
	.sleb128 61
	.uleb128 0xc
	.string	"BUILD_IN_C3_ROUND"
	.sleb128 62
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDS"
	.sleb128 63
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUBS"
	.sleb128 64
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA"
	.sleb128 65
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_ACC"
	.sleb128 66
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAVE_ACC"
	.sleb128 67
	.uleb128 0xc
	.string	"BUILD_IN_MPY_32_16"
	.sleb128 68
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACD"
	.sleb128 69
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULAD"
	.sleb128 70
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDSH"
	.sleb128 71
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUBSH"
	.sleb128 72
	.uleb128 0xc
	.string	"BUILD_IN_C3_MVFS"
	.sleb128 73
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_ADDR"
	.sleb128 74
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAVE_ADDR"
	.sleb128 75
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC_A"
	.sleb128 76
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN_A"
	.sleb128 77
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMAC_A"
	.sleb128 78
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMACN_A"
	.sleb128 79
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_DACC"
	.sleb128 80
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAVE_DACC"
	.sleb128 81
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDH_A"
	.sleb128 82
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUBH_A"
	.sleb128 83
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAMULSH"
	.sleb128 84
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA_A"
	.sleb128 85
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAMULH_A"
	.sleb128 86
	.uleb128 0xc
	.string	"BUILD_IN_C3_PTR"
	.sleb128 87
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC_AR"
	.sleb128 88
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN_AR"
	.sleb128 89
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA_AR"
	.sleb128 90
	.uleb128 0xc
	.string	"BUILD_IN_C3_INIT_PTR"
	.sleb128 91
	.uleb128 0xc
	.string	"BUILD_IN_C3_TRBACK"
	.sleb128 92
	.uleb128 0xc
	.string	"BUILD_IN_C3_VITERBI"
	.sleb128 93
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULT"
	.sleb128 94
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULT_A"
	.sleb128 95
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULTN"
	.sleb128 96
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMULTN_A"
	.sleb128 97
	.uleb128 0xc
	.string	"BUILD_IN_SET_CIRCBUF"
	.sleb128 98
	.uleb128 0xc
	.string	"BUILD_IN_RESET_CIRCBUF"
	.sleb128 99
	.uleb128 0xc
	.string	"BUILD_IN_C3_DADD"
	.sleb128 100
	.uleb128 0xc
	.string	"BUILD_IN_C3_DSUB"
	.sleb128 101
	.uleb128 0xc
	.string	"BUILD_IN_C3_FFT"
	.sleb128 102
	.uleb128 0xc
	.string	"BUILD_IN_C3_FFTLD"
	.sleb128 103
	.uleb128 0xc
	.string	"BUILD_IN_C3_FFTST"
	.sleb128 104
	.uleb128 0xc
	.string	"BUILD_IN_DEPOSIT"
	.sleb128 105
	.uleb128 0xc
	.string	"BUILD_IN_EXTRACT"
	.sleb128 106
	.uleb128 0xc
	.string	"BUILD_IN_C3_BITR"
	.sleb128 107
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMAC"
	.sleb128 108
	.uleb128 0xc
	.string	"BUILD_IN_C3_DMACN"
	.sleb128 109
	.uleb128 0xc
	.string	"BUILD_IN_C3_LOAD"
	.sleb128 110
	.uleb128 0xc
	.string	"BUILD_IN_C3_STORE"
	.sleb128 111
	.uleb128 0xc
	.string	"BUILD_IN_C3_REVB"
	.sleb128 112
	.uleb128 0xc
	.string	"BUILD_IN_C3_DSHL_I"
	.sleb128 113
	.uleb128 0xc
	.string	"BUILD_IN_C3_DSHR_I"
	.sleb128 114
	.uleb128 0xc
	.string	"BUILD_IN_C3_MAC_I"
	.sleb128 115
	.uleb128 0xc
	.string	"BUILD_IN_C3_MACN_I"
	.sleb128 116
	.uleb128 0xc
	.string	"BUILD_IN_C3_MULA_I"
	.sleb128 117
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADD_A"
	.sleb128 118
	.uleb128 0xc
	.string	"BUILD_IN_C3_SADDHA"
	.sleb128 119
	.uleb128 0xc
	.string	"BUILD_IN_C3_SAADDHA_A"
	.sleb128 120
	.uleb128 0xc
	.string	"BUILD_IN_C3_SASUB_A"
	.sleb128 121
	.uleb128 0xc
	.string	"BUILD_IN_COPY_ADDR"
	.sleb128 122
	.uleb128 0xc
	.string	"BUILD_IN_SET_ADDR"
	.sleb128 123
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_G2R"
	.sleb128 124
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_R2G"
	.sleb128 125
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_G2S"
	.sleb128 126
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_S2G"
	.sleb128 127
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGC_C2G"
	.sleb128 128
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGC_G2C"
	.sleb128 129
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V"
	.sleb128 130
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_G"
	.sleb128 131
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_S"
	.sleb128 132
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_V"
	.sleb128 133
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G"
	.sleb128 134
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_G_IMM"
	.sleb128 135
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_C_IMM"
	.sleb128 136
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V_IMM"
	.sleb128 137
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_V_IMM"
	.sleb128 138
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_C_IMM"
	.sleb128 139
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G_IMM"
	.sleb128 140
	.uleb128 0xc
	.string	"BUILT_IN_C2_VADDS"
	.sleb128 141
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSUBS"
	.sleb128 142
	.uleb128 0xc
	.string	"BUILT_IN_C2_VMUL"
	.sleb128 143
	.uleb128 0xc
	.string	"BUILT_IN_C2_VNEG"
	.sleb128 144
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSHFT"
	.sleb128 145
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCLP"
	.sleb128 146
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCLG"
	.sleb128 147
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCMOV"
	.sleb128 148
	.uleb128 0xc
	.string	"BUILT_IN_C2_LCZERO"
	.sleb128 149
	.uleb128 0xc
	.string	"BUILT_IN_C2_VRND"
	.sleb128 150
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSPAS"
	.sleb128 151
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSPEL"
	.sleb128 152
	.uleb128 0xc
	.string	"BUILT_IN_C2_VSPEL_MAC"
	.sleb128 153
	.uleb128 0xc
	.string	"BUILT_IN_C2_MMUL"
	.sleb128 154
	.uleb128 0xc
	.string	"BUILT_IN_C2_VMOV"
	.sleb128 155
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCOPY"
	.sleb128 156
	.uleb128 0xc
	.string	"BUILT_IN_C2_VCMPR"
	.sleb128 157
	.uleb128 0xc
	.string	"BUILT_IN_C2_SAD"
	.sleb128 158
	.uleb128 0xc
	.string	"BUILT_IN_C2_SAD_TMP"
	.sleb128 159
	.uleb128 0xc
	.string	"BUILT_IN_C2_SATD"
	.sleb128 160
	.uleb128 0xc
	.string	"BUILT_IN_C2_INTRA"
	.sleb128 161
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVSEL"
	.sleb128 162
	.uleb128 0xc
	.string	"BUILT_IN_C2_BCST"
	.sleb128 163
	.uleb128 0xc
	.string	"BUILT_IN_C2_VLCS_R"
	.sleb128 164
	.uleb128 0xc
	.string	"BUILT_IN_C2_VLCS"
	.sleb128 165
	.uleb128 0xc
	.string	"BUILT_IN_C2_ADDS"
	.sleb128 166
	.uleb128 0xc
	.string	"BUILT_IN_C2_ADDS_R"
	.sleb128 167
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUBS"
	.sleb128 168
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUBS_R"
	.sleb128 169
	.uleb128 0xc
	.string	"BUILT_IN_C2_MULS"
	.sleb128 170
	.uleb128 0xc
	.string	"BUILT_IN_C2_MADS"
	.sleb128 171
	.uleb128 0xc
	.string	"BUILT_IN_C2_SMADS"
	.sleb128 172
	.uleb128 0xc
	.string	"BUILT_IN_C2_CMOV"
	.sleb128 173
	.uleb128 0xc
	.string	"BUILT_IN_C2_MOV"
	.sleb128 174
	.uleb128 0xc
	.string	"BUILT_IN_C2_MOV_R"
	.sleb128 175
	.uleb128 0xc
	.string	"BUILT_IN_C2_CLP"
	.sleb128 176
	.uleb128 0xc
	.string	"BUILT_IN_C2_CHKRNG"
	.sleb128 177
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND"
	.sleb128 178
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_R_WB"
	.sleb128 179
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_R"
	.sleb128 180
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_BR"
	.sleb128 181
	.uleb128 0xc
	.string	"BUILT_IN_C2_SCOND_BR_R"
	.sleb128 182
	.uleb128 0xc
	.string	"BUILT_IN_C2_BOP"
	.sleb128 183
	.uleb128 0xc
	.string	"BUILT_IN_C2_BDEP"
	.sleb128 184
	.uleb128 0xc
	.string	"BUILT_IN_C2_WRAP"
	.sleb128 185
	.uleb128 0xc
	.string	"BUILT_IN_C2_BXTR"
	.sleb128 186
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUM4"
	.sleb128 187
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUM3_SADDR"
	.sleb128 188
	.uleb128 0xc
	.string	"BUILT_IN_C2_SUM4_R"
	.sleb128 189
	.uleb128 0xc
	.string	"BUILT_IN_C2_MED"
	.sleb128 190
	.uleb128 0xc
	.string	"BUILT_IN_C2_GSUMS"
	.sleb128 191
	.uleb128 0xc
	.string	"BUILT_IN_C2_CLZOB"
	.sleb128 192
	.uleb128 0xc
	.string	"BUILT_IN_C2_THCTRL"
	.sleb128 193
	.uleb128 0xc
	.string	"BUILT_IN_C2_BR_F"
	.sleb128 194
	.uleb128 0xc
	.string	"BUILT_IN_C2_BR_T"
	.sleb128 195
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V2G"
	.sleb128 196
	.uleb128 0xc
	.string	"BUILT_IN_C2_LD_V2G_IMM"
	.sleb128 197
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G2V"
	.sleb128 198
	.uleb128 0xc
	.string	"BUILT_IN_C2_ST_G2V_IMM"
	.sleb128 199
	.uleb128 0xc
	.string	"BUILT_IN_C2_MVGR_R2S"
	.sleb128 200
	.uleb128 0xc
	.string	"BUILT_IN_C2_FORK"
	.sleb128 201
	.uleb128 0xc
	.string	"BUILT_IN_C2_JOINT"
	.sleb128 202
	.uleb128 0xc
	.string	"BUILT_IN_C2_THREAD_MAJOR"
	.sleb128 203
	.uleb128 0xc
	.string	"BUILT_IN_C2_THREAD_MINOR"
	.sleb128 204
	.uleb128 0xc
	.string	"BUILT_IN_SQRT"
	.sleb128 205
	.uleb128 0xc
	.string	"BUILT_IN_SIN"
	.sleb128 206
	.uleb128 0xc
	.string	"BUILT_IN_COS"
	.sleb128 207
	.uleb128 0xc
	.string	"BUILT_IN_EXP"
	.sleb128 208
	.uleb128 0xc
	.string	"BUILT_IN_LOG"
	.sleb128 209
	.uleb128 0xc
	.string	"BUILT_IN_SQRTF"
	.sleb128 210
	.uleb128 0xc
	.string	"BUILT_IN_SINF"
	.sleb128 211
	.uleb128 0xc
	.string	"BUILT_IN_COSF"
	.sleb128 212
	.uleb128 0xc
	.string	"BUILT_IN_EXPF"
	.sleb128 213
	.uleb128 0xc
	.string	"BUILT_IN_LOGF"
	.sleb128 214
	.uleb128 0xc
	.string	"BUILT_IN_SQRTL"
	.sleb128 215
	.uleb128 0xc
	.string	"BUILT_IN_SINL"
	.sleb128 216
	.uleb128 0xc
	.string	"BUILT_IN_COSL"
	.sleb128 217
	.uleb128 0xc
	.string	"BUILT_IN_EXPL"
	.sleb128 218
	.uleb128 0xc
	.string	"BUILT_IN_LOGL"
	.sleb128 219
	.uleb128 0xc
	.string	"BUILT_IN_INF"
	.sleb128 220
	.uleb128 0xc
	.string	"BUILT_IN_INFF"
	.sleb128 221
	.uleb128 0xc
	.string	"BUILT_IN_INFL"
	.sleb128 222
	.uleb128 0xc
	.string	"BUILT_IN_HUGE_VAL"
	.sleb128 223
	.uleb128 0xc
	.string	"BUILT_IN_HUGE_VALF"
	.sleb128 224
	.uleb128 0xc
	.string	"BUILT_IN_HUGE_VALL"
	.sleb128 225
	.uleb128 0xc
	.string	"BUILT_IN_NAN"
	.sleb128 226
	.uleb128 0xc
	.string	"BUILT_IN_NANF"
	.sleb128 227
	.uleb128 0xc
	.string	"BUILT_IN_NANL"
	.sleb128 228
	.uleb128 0xc
	.string	"BUILT_IN_NANS"
	.sleb128 229
	.uleb128 0xc
	.string	"BUILT_IN_NANSF"
	.sleb128 230
	.uleb128 0xc
	.string	"BUILT_IN_NANSL"
	.sleb128 231
	.uleb128 0xc
	.string	"BUILT_IN_SAVEREGS"
	.sleb128 232
	.uleb128 0xc
	.string	"BUILT_IN_CLASSIFY_TYPE"
	.sleb128 233
	.uleb128 0xc
	.string	"BUILT_IN_NEXT_ARG"
	.sleb128 234
	.uleb128 0xc
	.string	"BUILT_IN_ARGS_INFO"
	.sleb128 235
	.uleb128 0xc
	.string	"BUILT_IN_CONSTANT_P"
	.sleb128 236
	.uleb128 0xc
	.string	"BUILT_IN_FRAME_ADDRESS"
	.sleb128 237
	.uleb128 0xc
	.string	"BUILT_IN_RETURN_ADDRESS"
	.sleb128 238
	.uleb128 0xc
	.string	"BUILT_IN_AGGREGATE_INCOMING_ADDRESS"
	.sleb128 239
	.uleb128 0xc
	.string	"BUILT_IN_APPLY_ARGS"
	.sleb128 240
	.uleb128 0xc
	.string	"BUILT_IN_APPLY"
	.sleb128 241
	.uleb128 0xc
	.string	"BUILT_IN_RETURN"
	.sleb128 242
	.uleb128 0xc
	.string	"BUILT_IN_SETJMP"
	.sleb128 243
	.uleb128 0xc
	.string	"BUILT_IN_LONGJMP"
	.sleb128 244
	.uleb128 0xc
	.string	"BUILT_IN_TRAP"
	.sleb128 245
	.uleb128 0xc
	.string	"BUILT_IN_PREFETCH"
	.sleb128 246
	.uleb128 0xc
	.string	"BUILT_IN_PRINTF"
	.sleb128 247
	.uleb128 0xc
	.string	"BUILT_IN_PUTCHAR"
	.sleb128 248
	.uleb128 0xc
	.string	"BUILT_IN_PUTS"
	.sleb128 249
	.uleb128 0xc
	.string	"BUILT_IN_SNPRINTF"
	.sleb128 250
	.uleb128 0xc
	.string	"BUILT_IN_SPRINTF"
	.sleb128 251
	.uleb128 0xc
	.string	"BUILT_IN_SCANF"
	.sleb128 252
	.uleb128 0xc
	.string	"BUILT_IN_SSCANF"
	.sleb128 253
	.uleb128 0xc
	.string	"BUILT_IN_VPRINTF"
	.sleb128 254
	.uleb128 0xc
	.string	"BUILT_IN_VSCANF"
	.sleb128 255
	.uleb128 0xc
	.string	"BUILT_IN_VSSCANF"
	.sleb128 256
	.uleb128 0xc
	.string	"BUILT_IN_VSNPRINTF"
	.sleb128 257
	.uleb128 0xc
	.string	"BUILT_IN_VSPRINTF"
	.sleb128 258
	.uleb128 0xc
	.string	"BUILT_IN_FPUTC"
	.sleb128 259
	.uleb128 0xc
	.string	"BUILT_IN_FPUTS"
	.sleb128 260
	.uleb128 0xc
	.string	"BUILT_IN_FWRITE"
	.sleb128 261
	.uleb128 0xc
	.string	"BUILT_IN_FPRINTF"
	.sleb128 262
	.uleb128 0xc
	.string	"BUILT_IN_PUTCHAR_UNLOCKED"
	.sleb128 263
	.uleb128 0xc
	.string	"BUILT_IN_PUTS_UNLOCKED"
	.sleb128 264
	.uleb128 0xc
	.string	"BUILT_IN_PRINTF_UNLOCKED"
	.sleb128 265
	.uleb128 0xc
	.string	"BUILT_IN_FPUTC_UNLOCKED"
	.sleb128 266
	.uleb128 0xc
	.string	"BUILT_IN_FPUTS_UNLOCKED"
	.sleb128 267
	.uleb128 0xc
	.string	"BUILT_IN_FWRITE_UNLOCKED"
	.sleb128 268
	.uleb128 0xc
	.string	"BUILT_IN_ISGREATER"
	.sleb128 269
	.uleb128 0xc
	.string	"BUILT_IN_ISGREATEREQUAL"
	.sleb128 270
	.uleb128 0xc
	.string	"BUILT_IN_ISLESS"
	.sleb128 271
	.uleb128 0xc
	.string	"BUILT_IN_ISLESSEQUAL"
	.sleb128 272
	.uleb128 0xc
	.string	"BUILT_IN_ISLESSGREATER"
	.sleb128 273
	.uleb128 0xc
	.string	"BUILT_IN_ISUNORDERED"
	.sleb128 274
	.uleb128 0xc
	.string	"BUILT_IN_UNWIND_INIT"
	.sleb128 275
	.uleb128 0xc
	.string	"BUILT_IN_DWARF_CFA"
	.sleb128 276
	.uleb128 0xc
	.string	"BUILT_IN_DWARF_SP_COLUMN"
	.sleb128 277
	.uleb128 0xc
	.string	"BUILT_IN_INIT_DWARF_REG_SIZES"
	.sleb128 278
	.uleb128 0xc
	.string	"BUILT_IN_FROB_RETURN_ADDR"
	.sleb128 279
	.uleb128 0xc
	.string	"BUILT_IN_EXTRACT_RETURN_ADDR"
	.sleb128 280
	.uleb128 0xc
	.string	"BUILT_IN_EH_RETURN"
	.sleb128 281
	.uleb128 0xc
	.string	"BUILT_IN_EH_RETURN_DATA_REGNO"
	.sleb128 282
	.uleb128 0xc
	.string	"BUILT_IN_VA_START"
	.sleb128 283
	.uleb128 0xc
	.string	"BUILT_IN_STDARG_START"
	.sleb128 284
	.uleb128 0xc
	.string	"BUILT_IN_VA_END"
	.sleb128 285
	.uleb128 0xc
	.string	"BUILT_IN_VA_COPY"
	.sleb128 286
	.uleb128 0xc
	.string	"BUILT_IN_EXPECT"
	.sleb128 287
	.uleb128 0xc
	.string	"BUILT_IN_EXTEND_POINTER"
	.sleb128 288
	.uleb128 0xc
	.string	"BUILT_IN_NEW"
	.sleb128 289
	.uleb128 0xc
	.string	"BUILT_IN_VEC_NEW"
	.sleb128 290
	.uleb128 0xc
	.string	"BUILT_IN_DELETE"
	.sleb128 291
	.uleb128 0xc
	.string	"BUILT_IN_VEC_DELETE"
	.sleb128 292
	.uleb128 0xc
	.string	"BUILT_IN_ABORT"
	.sleb128 293
	.uleb128 0xc
	.string	"BUILT_IN_EXIT"
	.sleb128 294
	.uleb128 0xc
	.string	"BUILT_IN__EXIT"
	.sleb128 295
	.uleb128 0xc
	.string	"BUILT_IN__EXIT2"
	.sleb128 296
	.uleb128 0xc
	.string	"END_BUILTINS"
	.sleb128 297
	.byte	0x0
	.uleb128 0x4
	.long	0x3ef7
	.string	"tree_common"
	.byte	0x10
	.byte	0x6
	.byte	0x8e
	.uleb128 0x7
	.string	"chain"
	.byte	0x6
	.byte	0x8f
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1e
	.long	.LASF3
	.byte	0x6
	.byte	0x90
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x5
	.long	.LASF0
	.byte	0x6
	.byte	0x92
	.long	0x19ef
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"side_effects_flag"
	.byte	0x6
	.byte	0x94
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"constant_flag"
	.byte	0x6
	.byte	0x95
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"addressable_flag"
	.byte	0x6
	.byte	0x96
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"volatile_flag"
	.byte	0x6
	.byte	0x97
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"readonly_flag"
	.byte	0x6
	.byte	0x98
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"unsigned_flag"
	.byte	0x6
	.byte	0x99
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"asm_written_flag"
	.byte	0x6
	.byte	0x9a
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"unused_0"
	.byte	0x6
	.byte	0x9b
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"used_flag"
	.byte	0x6
	.byte	0x9d
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"nothrow_flag"
	.byte	0x6
	.byte	0x9e
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"static_flag"
	.byte	0x6
	.byte	0x9f
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"public_flag"
	.byte	0x6
	.byte	0xa0
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"private_flag"
	.byte	0x6
	.byte	0xa1
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"protected_flag"
	.byte	0x6
	.byte	0xa2
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"bounded_flag"
	.byte	0x6
	.byte	0xa3
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"deprecated_flag"
	.byte	0x6
	.byte	0xa4
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF14
	.byte	0x6
	.byte	0xa6
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF15
	.byte	0x6
	.byte	0xa7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF16
	.byte	0x6
	.byte	0xa8
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF17
	.byte	0x6
	.byte	0xa9
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF18
	.byte	0x6
	.byte	0xaa
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF19
	.byte	0x6
	.byte	0xab
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x5
	.long	.LASF20
	.byte	0x6
	.byte	0xac
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"unused_1"
	.byte	0x6
	.byte	0xad
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x6
	.string	"sbuf"
	.byte	0x6
	.byte	0xaf
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"sdram"
	.byte	0x6
	.byte	0xb0
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"v1buf"
	.byte	0x6
	.byte	0xb1
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"v2buf"
	.byte	0x6
	.byte	0xb2
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x6
	.string	"v4buf"
	.byte	0x6
	.byte	0xb3
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0xf
	.long	0x3f33
	.string	"tree_int_cst_lowhi"
	.byte	0x10
	.byte	0x6
	.value	0x2f6
	.uleb128 0x10
	.string	"low"
	.byte	0x6
	.value	0x2f7
	.long	0x5e4
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"high"
	.byte	0x6
	.value	0x2f8
	.long	0x5d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0xf
	.long	0x3f7b
	.string	"tree_int_cst"
	.byte	0x24
	.byte	0x6
	.value	0x2ef
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x2f0
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"rtl"
	.byte	0x6
	.value	0x2f1
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"int_cst"
	.byte	0x6
	.value	0x2f9
	.long	0x3ef7
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0xf
	.long	0x3fc9
	.string	"tree_real_cst"
	.byte	0x18
	.byte	0x6
	.value	0x30b
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x30c
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"rtl"
	.byte	0x6
	.value	0x30d
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"real_cst_ptr"
	.byte	0x6
	.value	0x30e
	.long	0xd61
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0xf
	.long	0x402d
	.string	"tree_string"
	.byte	0x20
	.byte	0x6
	.value	0x31f
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x320
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"rtl"
	.byte	0x6
	.value	0x321
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x22
	.long	.LASF21
	.byte	0x6
	.value	0x322
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x10
	.string	"pointer"
	.byte	0x6
	.value	0x323
	.long	0x44b
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x10
	.string	"st"
	.byte	0x6
	.value	0x325
	.long	0x402d
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x235e
	.uleb128 0xf
	.long	0x4088
	.string	"tree_complex"
	.byte	0x1c
	.byte	0x6
	.value	0x32e
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x32f
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"rtl"
	.byte	0x6
	.value	0x330
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"real"
	.byte	0x6
	.value	0x331
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x10
	.string	"imag"
	.byte	0x6
	.value	0x332
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.byte	0x0
	.uleb128 0xf
	.long	0x40d0
	.string	"tree_vector"
	.byte	0x18
	.byte	0x6
	.value	0x340
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x341
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"rtl"
	.byte	0x6
	.value	0x342
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"elements"
	.byte	0x6
	.value	0x343
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x16
	.long	0x410e
	.long	.LASF22
	.byte	0xc
	.byte	0x8
	.byte	0x19
	.uleb128 0x7
	.string	"str"
	.byte	0x8
	.byte	0x1c
	.long	0x8c9
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"len"
	.byte	0x8
	.byte	0x1d
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"hash_value"
	.byte	0x8
	.byte	0x1e
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.byte	0x0
	.uleb128 0xf
	.long	0x4145
	.string	"tree_identifier"
	.byte	0x1c
	.byte	0x6
	.value	0x35f
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x360
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"id"
	.byte	0x6
	.value	0x361
	.long	0x40d0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.byte	0x0
	.uleb128 0xf
	.long	0x418a
	.string	"tree_list"
	.byte	0x18
	.byte	0x6
	.value	0x369
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x36a
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"purpose"
	.byte	0x6
	.value	0x36b
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x22
	.long	.LASF23
	.byte	0x6
	.value	0x36c
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0xf
	.long	0x41c8
	.string	"tree_vec"
	.byte	0x18
	.byte	0x6
	.value	0x377
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x378
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x22
	.long	.LASF21
	.byte	0x6
	.value	0x379
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"a"
	.byte	0x6
	.value	0x37a
	.long	0x41c8
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0x12
	.long	0x41d8
	.long	0x1e0
	.uleb128 0x13
	.long	0x54e
	.byte	0x0
	.byte	0x0
	.uleb128 0xf
	.long	0x4224
	.string	"tree_exp"
	.byte	0x18
	.byte	0x6
	.value	0x3bd
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x3be
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"complexity"
	.byte	0x6
	.value	0x3bf
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"operands"
	.byte	0x6
	.value	0x3c2
	.long	0x41c8
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0xf
	.long	0x4314
	.string	"tree_block"
	.byte	0x2c
	.byte	0x6
	.value	0x3f3
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x3f4
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x23
	.string	"handler_block_flag"
	.byte	0x6
	.value	0x3f6
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x24
	.long	.LASF24
	.byte	0x6
	.value	0x3f7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x23
	.string	"block_num"
	.byte	0x6
	.value	0x3f8
	.long	0x537
	.byte	0x4
	.byte	0x1e
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"vars"
	.byte	0x6
	.value	0x3fa
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x10
	.string	"subblocks"
	.byte	0x6
	.value	0x3fb
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x10
	.string	"supercontext"
	.byte	0x6
	.value	0x3fc
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x22
	.long	.LASF25
	.byte	0x6
	.value	0x3fd
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x10
	.string	"fragment_origin"
	.byte	0x6
	.value	0x3fe
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x10
	.string	"fragment_chain"
	.byte	0x6
	.value	0x3ff
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x25
	.long	0x435b
	.string	"tree_type_symtab"
	.byte	0x4
	.byte	0x6
	.value	0x562
	.uleb128 0xa
	.string	"address"
	.byte	0x6
	.value	0x563
	.long	0x45e
	.uleb128 0xa
	.string	"pointer"
	.byte	0x6
	.value	0x564
	.long	0x63c
	.uleb128 0xa
	.string	"die"
	.byte	0x6
	.value	0x565
	.long	0x4368
	.byte	0x0
	.uleb128 0x21
	.string	"die_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x435b
	.uleb128 0xf
	.long	0x46af
	.string	"tree_type"
	.byte	0x74
	.byte	0x6
	.value	0x53f
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x540
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"values"
	.byte	0x6
	.value	0x541
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x22
	.long	.LASF9
	.byte	0x6
	.value	0x542
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x22
	.long	.LASF26
	.byte	0x6
	.value	0x543
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x22
	.long	.LASF27
	.byte	0x6
	.value	0x544
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x10
	.string	"uid"
	.byte	0x6
	.value	0x545
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"precision"
	.byte	0x6
	.value	0x547
	.long	0x537
	.byte	0x4
	.byte	0x9
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF1
	.byte	0x6
	.value	0x548
	.long	0x9bb
	.byte	0x4
	.byte	0x7
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"string_flag"
	.byte	0x6
	.value	0x54a
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"no_force_blk_flag"
	.byte	0x6
	.value	0x54b
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"needs_constructing_flag"
	.byte	0x6
	.value	0x54c
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"transparent_union_flag"
	.byte	0x6
	.value	0x54d
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"packed_flag"
	.byte	0x6
	.value	0x54e
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"restrict_flag"
	.byte	0x6
	.value	0x54f
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF28
	.byte	0x6
	.value	0x550
	.long	0x537
	.byte	0x4
	.byte	0x2
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF14
	.byte	0x6
	.value	0x552
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF15
	.byte	0x6
	.value	0x553
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF16
	.byte	0x6
	.value	0x554
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF17
	.byte	0x6
	.value	0x555
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF18
	.byte	0x6
	.value	0x556
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF19
	.byte	0x6
	.value	0x557
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF20
	.byte	0x6
	.value	0x558
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF29
	.byte	0x6
	.value	0x559
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"defer_expansion"
	.byte	0x6
	.value	0x55c
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x22
	.long	.LASF10
	.byte	0x6
	.value	0x55f
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x10
	.string	"pointer_to"
	.byte	0x6
	.value	0x560
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x10
	.string	"reference_to"
	.byte	0x6
	.value	0x561
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x10
	.string	"symtab"
	.byte	0x6
	.value	0x566
	.long	0x4314
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x22
	.long	.LASF30
	.byte	0x6
	.value	0x568
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x22
	.long	.LASF31
	.byte	0x6
	.value	0x569
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x10
	.string	"maxval"
	.byte	0x6
	.value	0x56a
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x10
	.string	"next_variant"
	.byte	0x6
	.value	0x56b
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x10
	.string	"main_variant"
	.byte	0x6
	.value	0x56c
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x10
	.string	"binfo"
	.byte	0x6
	.value	0x56d
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x22
	.long	.LASF32
	.byte	0x6
	.value	0x56e
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x22
	.long	.LASF33
	.byte	0x6
	.value	0x56f
	.long	0x5d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x22
	.long	.LASF34
	.byte	0x6
	.value	0x571
	.long	0x46bb
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x10
	.string	"ty_idx"
	.byte	0x6
	.value	0x573
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x10
	.string	"field_ids_used"
	.byte	0x6
	.value	0x574
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x10
	.string	"dst_id"
	.byte	0x6
	.value	0x575
	.long	0x2322
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.byte	0x0
	.uleb128 0x21
	.string	"lang_type"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x46af
	.uleb128 0xf
	.long	0x4704
	.string	"tree_decl_u1_a"
	.byte	0x4
	.byte	0x6
	.value	0x7f0
	.uleb128 0x24
	.long	.LASF10
	.byte	0x6
	.value	0x7f1
	.long	0x537
	.byte	0x4
	.byte	0x18
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x23
	.string	"off_align"
	.byte	0x6
	.value	0x7f2
	.long	0x537
	.byte	0x4
	.byte	0x8
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.byte	0x0
	.uleb128 0x25
	.long	0x4739
	.string	"tree_decl_u1"
	.byte	0x8
	.byte	0x6
	.value	0x7e7
	.uleb128 0xa
	.string	"f"
	.byte	0x6
	.value	0x7ea
	.long	0x23bd
	.uleb128 0xa
	.string	"i"
	.byte	0x6
	.value	0x7ed
	.long	0x5d3
	.uleb128 0xa
	.string	"a"
	.byte	0x6
	.value	0x7f3
	.long	0x46c1
	.byte	0x0
	.uleb128 0x25
	.long	0x4778
	.string	"tree_decl_u2"
	.byte	0x4
	.byte	0x6
	.value	0x808
	.uleb128 0xa
	.string	"f"
	.byte	0x6
	.value	0x809
	.long	0x512b
	.uleb128 0xa
	.string	"r"
	.byte	0x6
	.value	0x80a
	.long	0x99
	.uleb128 0xa
	.string	"t"
	.byte	0x6
	.value	0x80b
	.long	0x1e0
	.uleb128 0xa
	.string	"i"
	.byte	0x6
	.value	0x80c
	.long	0x45e
	.byte	0x0
	.uleb128 0x26
	.long	0x512b
	.long	.LASF35
	.value	0x134
	.byte	0x3
	.byte	0x1f
	.uleb128 0x7
	.string	"eh"
	.byte	0xa
	.byte	0xb5
	.long	0x6452
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"stmt"
	.byte	0xa
	.byte	0xb6
	.long	0x6466
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"expr"
	.byte	0xa
	.byte	0xb7
	.long	0x646c
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"emit"
	.byte	0xa
	.byte	0xb8
	.long	0x6472
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"varasm"
	.byte	0xa
	.byte	0xb9
	.long	0x6488
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1e
	.long	.LASF30
	.byte	0xa
	.byte	0xbe
	.long	0x44b
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"decl"
	.byte	0xa
	.byte	0xc1
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"outer"
	.byte	0xa
	.byte	0xc4
	.long	0x512b
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"pops_args"
	.byte	0xa
	.byte	0xc9
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x1e
	.long	.LASF36
	.byte	0xa
	.byte	0xce
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"pretend_args_size"
	.byte	0xa
	.byte	0xd3
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"outgoing_args_size"
	.byte	0xa
	.byte	0xd7
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"arg_offset_rtx"
	.byte	0xa
	.byte	0xdb
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x7
	.string	"args_info"
	.byte	0xa
	.byte	0xdf
	.long	0x555
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x7
	.string	"return_rtx"
	.byte	0xa
	.byte	0xe5
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x7
	.string	"internal_arg_pointer"
	.byte	0xa
	.byte	0xe8
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x7
	.string	"cannot_inline"
	.byte	0xa
	.byte	0xec
	.long	0x44b
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x7
	.string	"hard_reg_initial_vals"
	.byte	0xa
	.byte	0xf0
	.long	0x64a5
	.byte	0x3
	.byte	0x23
	.uleb128 0x80
	.uleb128 0x7
	.string	"x_function_call_count"
	.byte	0xa
	.byte	0xf3
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0x84
	.uleb128 0x7
	.string	"x_nonlocal_labels"
	.byte	0xa
	.byte	0xf8
	.long	0x1e0
	.byte	0x3
	.byte	0x23
	.uleb128 0x88
	.uleb128 0x7
	.string	"x_nonlocal_goto_handler_slots"
	.byte	0xa
	.byte	0xfe
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x8c
	.uleb128 0x10
	.string	"x_nonlocal_goto_handler_labels"
	.byte	0xa
	.value	0x102
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x90
	.uleb128 0x10
	.string	"x_nonlocal_goto_stack_level"
	.byte	0xa
	.value	0x107
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x94
	.uleb128 0x10
	.string	"x_cleanup_label"
	.byte	0xa
	.value	0x10d
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x98
	.uleb128 0x10
	.string	"x_return_label"
	.byte	0xa
	.value	0x112
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x9c
	.uleb128 0x10
	.string	"computed_goto_common_label"
	.byte	0xa
	.value	0x115
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xa0
	.uleb128 0x10
	.string	"computed_goto_common_reg"
	.byte	0xa
	.value	0x116
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xa4
	.uleb128 0x10
	.string	"x_save_expr_regs"
	.byte	0xa
	.value	0x11a
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xa8
	.uleb128 0x10
	.string	"x_stack_slot_list"
	.byte	0xa
	.value	0x11e
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xac
	.uleb128 0x10
	.string	"x_rtl_expr_chain"
	.byte	0xa
	.value	0x121
	.long	0x1e0
	.byte	0x3
	.byte	0x23
	.uleb128 0xb0
	.uleb128 0x10
	.string	"x_tail_recursion_label"
	.byte	0xa
	.value	0x125
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xb4
	.uleb128 0x10
	.string	"x_tail_recursion_reentry"
	.byte	0xa
	.value	0x128
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xb8
	.uleb128 0x10
	.string	"x_arg_pointer_save_area"
	.byte	0xa
	.value	0x12e
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xbc
	.uleb128 0x10
	.string	"x_clobber_return_insn"
	.byte	0xa
	.value	0x133
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xc0
	.uleb128 0x10
	.string	"x_frame_offset"
	.byte	0xa
	.value	0x138
	.long	0x5d3
	.byte	0x3
	.byte	0x23
	.uleb128 0xc4
	.uleb128 0x10
	.string	"x_context_display"
	.byte	0xa
	.value	0x13d
	.long	0x1e0
	.byte	0x3
	.byte	0x23
	.uleb128 0xcc
	.uleb128 0x10
	.string	"x_trampoline_list"
	.byte	0xa
	.value	0x146
	.long	0x1e0
	.byte	0x3
	.byte	0x23
	.uleb128 0xd0
	.uleb128 0x10
	.string	"x_parm_birth_insn"
	.byte	0xa
	.value	0x149
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xd4
	.uleb128 0x10
	.string	"x_last_parm_insn"
	.byte	0xa
	.value	0x14d
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0xd8
	.uleb128 0x10
	.string	"x_max_parm_reg"
	.byte	0xa
	.value	0x151
	.long	0x537
	.byte	0x3
	.byte	0x23
	.uleb128 0xdc
	.uleb128 0x10
	.string	"x_parm_reg_stack_loc"
	.byte	0xa
	.value	0x157
	.long	0x19a5
	.byte	0x3
	.byte	0x23
	.uleb128 0xe0
	.uleb128 0x10
	.string	"x_temp_slots"
	.byte	0xa
	.value	0x15a
	.long	0x64b7
	.byte	0x3
	.byte	0x23
	.uleb128 0xe4
	.uleb128 0x10
	.string	"x_temp_slot_level"
	.byte	0xa
	.value	0x15d
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0xe8
	.uleb128 0x10
	.string	"x_var_temp_slot_level"
	.byte	0xa
	.value	0x160
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0xec
	.uleb128 0x10
	.string	"x_target_temp_slot_level"
	.byte	0xa
	.value	0x166
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0xf0
	.uleb128 0x10
	.string	"fixup_var_refs_queue"
	.byte	0xa
	.value	0x16a
	.long	0x6158
	.byte	0x3
	.byte	0x23
	.uleb128 0xf4
	.uleb128 0x10
	.string	"inlinable"
	.byte	0xa
	.value	0x16d
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0xf8
	.uleb128 0x10
	.string	"no_debugging_symbols"
	.byte	0xa
	.value	0x16e
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0xfc
	.uleb128 0x10
	.string	"original_arg_vector"
	.byte	0xa
	.value	0x16f
	.long	0x198
	.byte	0x3
	.byte	0x23
	.uleb128 0x100
	.uleb128 0x10
	.string	"original_decl_initial"
	.byte	0xa
	.value	0x170
	.long	0x1e0
	.byte	0x3
	.byte	0x23
	.uleb128 0x104
	.uleb128 0x10
	.string	"inl_last_parm_insn"
	.byte	0xa
	.value	0x173
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x108
	.uleb128 0x10
	.string	"inl_max_label_num"
	.byte	0xa
	.value	0x175
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0x10c
	.uleb128 0x10
	.string	"funcdef_no"
	.byte	0xa
	.value	0x178
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0x110
	.uleb128 0x10
	.string	"machine"
	.byte	0xa
	.value	0x17d
	.long	0x64d0
	.byte	0x3
	.byte	0x23
	.uleb128 0x114
	.uleb128 0x10
	.string	"stack_alignment_needed"
	.byte	0xa
	.value	0x17f
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0x118
	.uleb128 0x10
	.string	"preferred_stack_boundary"
	.byte	0xa
	.value	0x181
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0x11c
	.uleb128 0x10
	.string	"language"
	.byte	0xa
	.value	0x184
	.long	0x64ea
	.byte	0x3
	.byte	0x23
	.uleb128 0x120
	.uleb128 0x10
	.string	"epilogue_delay_list"
	.byte	0xa
	.value	0x18a
	.long	0x99
	.byte	0x3
	.byte	0x23
	.uleb128 0x124
	.uleb128 0x23
	.string	"returns_struct"
	.byte	0xa
	.value	0x190
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"returns_pcc_struct"
	.byte	0xa
	.value	0x194
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"returns_pointer"
	.byte	0xa
	.value	0x197
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"needs_context"
	.byte	0xa
	.value	0x19a
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1c
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"calls_setjmp"
	.byte	0xa
	.value	0x19d
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"calls_longjmp"
	.byte	0xa
	.value	0x1a0
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"calls_alloca"
	.byte	0xa
	.value	0x1a4
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x19
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"calls_eh_return"
	.byte	0xa
	.value	0x1a7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"has_nonlocal_label"
	.byte	0xa
	.value	0x1ab
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"has_nonlocal_goto"
	.byte	0xa
	.value	0x1af
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"contains_functions"
	.byte	0xa
	.value	0x1b2
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"has_computed_jump"
	.byte	0xa
	.value	0x1b5
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"is_thunk"
	.byte	0xa
	.value	0x1ba
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"all_throwers_are_sibcalls"
	.byte	0xa
	.value	0x1c1
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"instrument_entry_exit"
	.byte	0xa
	.value	0x1c5
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"arc_profile"
	.byte	0xa
	.value	0x1c8
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"profile"
	.byte	0xa
	.value	0x1cb
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"limit_stack"
	.byte	0xa
	.value	0x1cf
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"stdarg"
	.byte	0xa
	.value	0x1d2
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"x_whole_function_mode_p"
	.byte	0xa
	.value	0x1d8
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"x_dont_save_pending_sizes_p"
	.byte	0xa
	.value	0x1e1
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"uses_const_pool"
	.byte	0xa
	.value	0x1e4
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"uses_pic_offset_table"
	.byte	0xa
	.value	0x1e7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"uses_eh_lsda"
	.byte	0xa
	.value	0x1ea
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x23
	.string	"arg_pointer_save_area_init"
	.byte	0xa
	.value	0x1ed
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x3
	.byte	0x23
	.uleb128 0x128
	.uleb128 0x22
	.long	.LASF37
	.byte	0xa
	.value	0x1fa
	.long	0x63dc
	.byte	0x3
	.byte	0x23
	.uleb128 0x12c
	.uleb128 0x10
	.string	"max_jumptable_ents"
	.byte	0xa
	.value	0x1fe
	.long	0x45e
	.byte	0x3
	.byte	0x23
	.uleb128 0x130
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x4778
	.uleb128 0x27
	.long	0x5169
	.byte	0x4
	.byte	0x6
	.value	0x81e
	.uleb128 0xa
	.string	"st"
	.byte	0x6
	.value	0x81f
	.long	0x402d
	.uleb128 0xa
	.string	"label_idx"
	.byte	0x6
	.value	0x820
	.long	0x2311
	.uleb128 0xa
	.string	"field_id"
	.byte	0x6
	.value	0x821
	.long	0x537
	.byte	0x0
	.uleb128 0x27
	.long	0x517f
	.byte	0x4
	.byte	0x6
	.value	0x823
	.uleb128 0xa
	.string	"st2"
	.byte	0x6
	.value	0x824
	.long	0x402d
	.byte	0x0
	.uleb128 0xf
	.long	0x58b2
	.string	"tree_decl"
	.byte	0x94
	.byte	0x6
	.value	0x7a0
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x7a1
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"locus"
	.byte	0x6
	.value	0x7a2
	.long	0x19dd
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"uid"
	.byte	0x6
	.value	0x7a3
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x22
	.long	.LASF9
	.byte	0x6
	.value	0x7a4
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x24
	.long	.LASF1
	.byte	0x6
	.value	0x7a5
	.long	0x9bb
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"external_flag"
	.byte	0x6
	.value	0x7a7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"nonlocal_flag"
	.byte	0x6
	.value	0x7a8
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"regdecl_flag"
	.byte	0x6
	.value	0x7a9
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"inline_flag"
	.byte	0x6
	.value	0x7aa
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"bit_field_flag"
	.byte	0x6
	.value	0x7ab
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"virtual_flag"
	.byte	0x6
	.value	0x7ac
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"ignored_flag"
	.byte	0x6
	.value	0x7ad
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x24
	.long	.LASF24
	.byte	0x6
	.value	0x7ae
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"sbuf_flag"
	.byte	0x6
	.value	0x7b2
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"sdram_flag"
	.byte	0x6
	.value	0x7b3
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"v1buf_flag"
	.byte	0x6
	.value	0x7b4
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"v2buf_flag"
	.byte	0x6
	.value	0x7b5
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"v4buf_flag"
	.byte	0x6
	.value	0x7b6
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"in_system_header_flag"
	.byte	0x6
	.value	0x7ba
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"common_flag"
	.byte	0x6
	.value	0x7bb
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"defer_output"
	.byte	0x6
	.value	0x7bc
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"transparent_union"
	.byte	0x6
	.value	0x7bd
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"static_ctor_flag"
	.byte	0x6
	.value	0x7be
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"static_dtor_flag"
	.byte	0x6
	.value	0x7bf
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"artificial_flag"
	.byte	0x6
	.value	0x7c0
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"weak_flag"
	.byte	0x6
	.value	0x7c1
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"non_addr_const_p"
	.byte	0x6
	.value	0x7c3
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"no_instrument_function_entry_exit"
	.byte	0x6
	.value	0x7c4
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"comdat_flag"
	.byte	0x6
	.value	0x7c5
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x23
	.string	"malloc_flag"
	.byte	0x6
	.value	0x7c6
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"no_limit_stack"
	.byte	0x6
	.value	0x7c7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1e
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF13
	.byte	0x6
	.value	0x7c8
	.long	0x236d
	.byte	0x4
	.byte	0x2
	.byte	0x1c
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"pure_flag"
	.byte	0x6
	.value	0x7c9
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF28
	.byte	0x6
	.value	0x7cb
	.long	0x537
	.byte	0x4
	.byte	0x2
	.byte	0x19
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"non_addressable"
	.byte	0x6
	.value	0x7cc
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF29
	.byte	0x6
	.value	0x7cd
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"uninlinable"
	.byte	0x6
	.value	0x7ce
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x16
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"thread_local_flag"
	.byte	0x6
	.value	0x7cf
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x15
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"inlined_function_flag"
	.byte	0x6
	.value	0x7d0
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"noinline_attrib"
	.byte	0x6
	.value	0x7d2
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF14
	.byte	0x6
	.value	0x7d5
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x12
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF15
	.byte	0x6
	.value	0x7d6
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x11
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF16
	.byte	0x6
	.value	0x7d7
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF17
	.byte	0x6
	.value	0x7d8
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xf
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF18
	.byte	0x6
	.value	0x7d9
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF19
	.byte	0x6
	.value	0x7da
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xd
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x24
	.long	.LASF20
	.byte	0x6
	.value	0x7db
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"lang_flag_7"
	.byte	0x6
	.value	0x7dc
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xb
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"syscall_linkage_flag"
	.byte	0x6
	.value	0x7df
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"widen_retval_flag"
	.byte	0x6
	.value	0x7e0
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"promote_static"
	.byte	0x6
	.value	0x7e3
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x23
	.string	"always_inline_attrib"
	.byte	0x6
	.value	0x7e4
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x7
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x10
	.string	"u1"
	.byte	0x6
	.value	0x7f4
	.long	0x4704
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x22
	.long	.LASF26
	.byte	0x6
	.value	0x7f6
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x22
	.long	.LASF30
	.byte	0x6
	.value	0x7f7
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x22
	.long	.LASF32
	.byte	0x6
	.value	0x7f8
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x10
	.string	"arguments"
	.byte	0x6
	.value	0x7f9
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x22
	.long	.LASF38
	.byte	0x6
	.value	0x7fa
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x10
	.string	"initial"
	.byte	0x6
	.value	0x7fb
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x22
	.long	.LASF25
	.byte	0x6
	.value	0x7fc
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x10
	.string	"assembler_name"
	.byte	0x6
	.value	0x7fd
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x10
	.string	"section_name"
	.byte	0x6
	.value	0x7fe
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x22
	.long	.LASF27
	.byte	0x6
	.value	0x7ff
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x10
	.string	"rtl"
	.byte	0x6
	.value	0x800
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x10
	.string	"live_range_rtl"
	.byte	0x6
	.value	0x801
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x10
	.string	"u2"
	.byte	0x6
	.value	0x80d
	.long	0x4739
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x10
	.string	"saved_tree"
	.byte	0x6
	.value	0x810
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x10
	.string	"inlined_fns"
	.byte	0x6
	.value	0x814
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x10
	.string	"vindex"
	.byte	0x6
	.value	0x816
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.uleb128 0x10
	.string	"pointer_alias_set"
	.byte	0x6
	.value	0x817
	.long	0x5d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.uleb128 0x22
	.long	.LASF34
	.byte	0x6
	.value	0x819
	.long	0x58be
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x23
	.string	"symtab_idx"
	.byte	0x6
	.value	0x81b
	.long	0x537
	.byte	0x4
	.byte	0x8
	.byte	0x18
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x23
	.string	"label_defined"
	.byte	0x6
	.value	0x81c
	.long	0x537
	.byte	0x4
	.byte	0x1
	.byte	0x17
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x10
	.string	"sgi_u1"
	.byte	0x6
	.value	0x822
	.long	0x5131
	.byte	0x3
	.byte	0x23
	.uleb128 0x80
	.uleb128 0x10
	.string	"sgi_u2"
	.byte	0x6
	.value	0x825
	.long	0x5169
	.byte	0x3
	.byte	0x23
	.uleb128 0x84
	.uleb128 0x10
	.string	"decl_dst_id"
	.byte	0x6
	.value	0x826
	.long	0x2322
	.byte	0x3
	.byte	0x23
	.uleb128 0x88
	.uleb128 0x10
	.string	"sl_model_name"
	.byte	0x6
	.value	0x82a
	.long	0x1e0
	.byte	0x3
	.byte	0x23
	.uleb128 0x90
	.byte	0x0
	.uleb128 0x21
	.string	"lang_decl"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x58b2
	.uleb128 0xb
	.long	0x5b15
	.string	"omp_tree_type"
	.byte	0x4
	.byte	0xc
	.byte	0x1e
	.uleb128 0xc
	.string	"parallel_dir_b"
	.sleb128 0
	.uleb128 0xc
	.string	"parallel_dir_e"
	.sleb128 1
	.uleb128 0xc
	.string	"for_dir_b"
	.sleb128 2
	.uleb128 0xc
	.string	"for_dir_e"
	.sleb128 3
	.uleb128 0xc
	.string	"sections_cons_b"
	.sleb128 4
	.uleb128 0xc
	.string	"sections_cons_e"
	.sleb128 5
	.uleb128 0xc
	.string	"section_cons_b"
	.sleb128 6
	.uleb128 0xc
	.string	"section_cons_e"
	.sleb128 7
	.uleb128 0xc
	.string	"single_cons_b"
	.sleb128 8
	.uleb128 0xc
	.string	"single_cons_e"
	.sleb128 9
	.uleb128 0xc
	.string	"par_for_cons_b"
	.sleb128 10
	.uleb128 0xc
	.string	"par_for_cons_e"
	.sleb128 11
	.uleb128 0xc
	.string	"par_sctn_cons_b"
	.sleb128 12
	.uleb128 0xc
	.string	"par_sctn_cons_e"
	.sleb128 13
	.uleb128 0xc
	.string	"master_cons_b"
	.sleb128 14
	.uleb128 0xc
	.string	"master_cons_e"
	.sleb128 15
	.uleb128 0xc
	.string	"critical_cons_b"
	.sleb128 16
	.uleb128 0xc
	.string	"critical_cons_e"
	.sleb128 17
	.uleb128 0xc
	.string	"barrier_dir"
	.sleb128 18
	.uleb128 0xc
	.string	"flush_dir"
	.sleb128 19
	.uleb128 0xc
	.string	"atomic_cons"
	.sleb128 20
	.uleb128 0xc
	.string	"ordered_cons_b"
	.sleb128 21
	.uleb128 0xc
	.string	"ordered_cons_e"
	.sleb128 22
	.uleb128 0xc
	.string	"options_dir"
	.sleb128 23
	.uleb128 0xc
	.string	"exec_freq_dir"
	.sleb128 24
	.uleb128 0xc
	.string	"sl2_sections_cons_b"
	.sleb128 25
	.uleb128 0xc
	.string	"sl2_minor_sections_cons_b"
	.sleb128 26
	.uleb128 0xc
	.string	"sl2_sections_cons_e"
	.sleb128 27
	.uleb128 0xc
	.string	"sl2_section_cons_b"
	.sleb128 28
	.uleb128 0xc
	.string	"sl2_section_cons_e"
	.sleb128 29
	.uleb128 0xc
	.string	"sl2_minor_section_cons_b"
	.sleb128 30
	.uleb128 0xc
	.string	"sl2_minor_section_cons_e"
	.sleb128 31
	.byte	0x0
	.uleb128 0xf
	.long	0x5b64
	.string	"tree_omp"
	.byte	0x18
	.byte	0x6
	.value	0x832
	.uleb128 0x22
	.long	.LASF2
	.byte	0x6
	.value	0x833
	.long	0x3c1b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"choice"
	.byte	0x6
	.value	0x834
	.long	0x58c4
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"omp_clause_list"
	.byte	0x6
	.value	0x835
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.byte	0x0
	.uleb128 0xf
	.long	0x5c1f
	.string	"attribute_spec"
	.byte	0x14
	.byte	0x6
	.value	0x9db
	.uleb128 0x22
	.long	.LASF30
	.byte	0x6
	.value	0x9de
	.long	0x5c1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"min_length"
	.byte	0x6
	.value	0x9e0
	.long	0x98f
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x10
	.string	"max_length"
	.byte	0x6
	.value	0x9e3
	.long	0x98f
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x10
	.string	"decl_required"
	.byte	0x6
	.value	0x9eb
	.long	0x5c24
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x10
	.string	"type_required"
	.byte	0x6
	.value	0x9ee
	.long	0x5c24
	.byte	0x2
	.byte	0x23
	.uleb128 0xd
	.uleb128 0x10
	.string	"function_type_required"
	.byte	0x6
	.value	0x9f3
	.long	0x5c24
	.byte	0x2
	.byte	0x23
	.uleb128 0xe
	.uleb128 0x10
	.string	"handler"
	.byte	0x6
	.value	0xa02
	.long	0x5c59
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.byte	0x0
	.uleb128 0xd
	.long	0x44b
	.uleb128 0xd
	.long	0xd67
	.uleb128 0x28
	.long	0x5c4d
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x5c4d
	.uleb128 0x18
	.long	0x1e0
	.uleb128 0x18
	.long	0x1e0
	.uleb128 0x18
	.long	0x45e
	.uleb128 0x18
	.long	0x5c53
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1e0
	.uleb128 0x3
	.byte	0x4
	.long	0xd67
	.uleb128 0xd
	.long	0x5c5e
	.uleb128 0x3
	.byte	0x4
	.long	0x5c29
	.uleb128 0x12
	.long	0x5c74
	.long	0x5e4
	.uleb128 0x13
	.long	0x54e
	.byte	0x0
	.byte	0x0
	.uleb128 0x2
	.string	"BITMAP_WORD"
	.byte	0x5
	.byte	0x1d
	.long	0x5a2
	.uleb128 0x4
	.long	0x5cdf
	.string	"bitmap_element_def"
	.byte	0x1c
	.byte	0x5
	.byte	0x34
	.uleb128 0x7
	.string	"next"
	.byte	0x5
	.byte	0x35
	.long	0x5cdf
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"prev"
	.byte	0x5
	.byte	0x36
	.long	0x5cdf
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"indx"
	.byte	0x5
	.byte	0x37
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"bits"
	.byte	0x5
	.byte	0x38
	.long	0x5ce5
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5c87
	.uleb128 0x12
	.long	0x5cf5
	.long	0x5c74
	.uleb128 0x13
	.long	0x54e
	.byte	0x3
	.byte	0x0
	.uleb128 0x2
	.string	"bitmap_element"
	.byte	0x5
	.byte	0x39
	.long	0x5c87
	.uleb128 0x3
	.byte	0x4
	.long	0x5cf5
	.uleb128 0x2
	.string	"bitmap"
	.byte	0x5
	.byte	0x43
	.long	0x17e3
	.uleb128 0x4
	.long	0x5d78
	.string	"simple_bitmap_def"
	.byte	0x14
	.byte	0xe
	.byte	0x20
	.uleb128 0x7
	.string	"n_bits"
	.byte	0xe
	.byte	0x21
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1e
	.long	.LASF9
	.byte	0xe
	.byte	0x22
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"bytes"
	.byte	0xe
	.byte	0x23
	.long	0x537
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"elms"
	.byte	0xe
	.byte	0x24
	.long	0x5c64
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x2
	.string	"sbitmap"
	.byte	0xe
	.byte	0x25
	.long	0x5d87
	.uleb128 0x3
	.byte	0x4
	.long	0x5d1f
	.uleb128 0x2
	.string	"regset"
	.byte	0xd
	.byte	0x22
	.long	0x5d11
	.uleb128 0x2
	.string	"gcov_type"
	.byte	0xd
	.byte	0x75
	.long	0x5d3
	.uleb128 0x4
	.long	0x5e53
	.string	"edge_def"
	.byte	0x28
	.byte	0xd
	.byte	0x78
	.uleb128 0x7
	.string	"pred_next"
	.byte	0xd
	.byte	0x7a
	.long	0x5e53
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"succ_next"
	.byte	0xd
	.byte	0x7a
	.long	0x5e53
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"src"
	.byte	0xd
	.byte	0x7d
	.long	0x196a
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"dest"
	.byte	0xd
	.byte	0x7d
	.long	0x196a
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1e
	.long	.LASF39
	.byte	0xd
	.byte	0x80
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"aux"
	.byte	0xd
	.byte	0x83
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"flags"
	.byte	0xd
	.byte	0x85
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"probability"
	.byte	0xd
	.byte	0x86
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x1e
	.long	.LASF12
	.byte	0xd
	.byte	0x87
	.long	0x5d9b
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5dac
	.uleb128 0x2
	.string	"edge"
	.byte	0xd
	.byte	0x89
	.long	0x5e53
	.uleb128 0x4
	.long	0x60d3
	.string	"loop"
	.byte	0x80
	.byte	0xd
	.byte	0xdc
	.uleb128 0x10
	.string	"num"
	.byte	0xd
	.value	0x176
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x10
	.string	"header"
	.byte	0xd
	.value	0x179
	.long	0x60d9
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x10
	.string	"latch"
	.byte	0xd
	.value	0x17c
	.long	0x60d9
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x10
	.string	"pre_header"
	.byte	0xd
	.value	0x17f
	.long	0x60d9
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x10
	.string	"pre_header_edges"
	.byte	0xd
	.value	0x184
	.long	0x60ec
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x10
	.string	"num_pre_header_edges"
	.byte	0xd
	.value	0x187
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x10
	.string	"first"
	.byte	0xd
	.value	0x18b
	.long	0x60d9
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x10
	.string	"last"
	.byte	0xd
	.value	0x18f
	.long	0x60d9
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x10
	.string	"nodes"
	.byte	0xd
	.value	0x192
	.long	0x5d78
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x10
	.string	"num_nodes"
	.byte	0xd
	.value	0x195
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x10
	.string	"entry_edges"
	.byte	0xd
	.value	0x198
	.long	0x60ec
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x10
	.string	"num_entries"
	.byte	0xd
	.value	0x19b
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x10
	.string	"exit_edges"
	.byte	0xd
	.value	0x19e
	.long	0x60ec
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x10
	.string	"num_exits"
	.byte	0xd
	.value	0x1a1
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x10
	.string	"exits_doms"
	.byte	0xd
	.value	0x1a4
	.long	0x5d78
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x10
	.string	"depth"
	.byte	0xd
	.value	0x1a7
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x10
	.string	"pred"
	.byte	0xd
	.value	0x1aa
	.long	0x60f2
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x10
	.string	"level"
	.byte	0xd
	.value	0x1ae
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x10
	.string	"outer"
	.byte	0xd
	.value	0x1b1
	.long	0x60d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x22
	.long	.LASF40
	.byte	0xd
	.value	0x1b4
	.long	0x60d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x10
	.string	"next"
	.byte	0xd
	.value	0x1b7
	.long	0x60d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x10
	.string	"invalid"
	.byte	0xd
	.value	0x1ba
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x10
	.string	"aux"
	.byte	0xd
	.value	0x1bd
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x10
	.string	"vtop"
	.byte	0xd
	.value	0x1c3
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x10
	.string	"cont"
	.byte	0xd
	.value	0x1c7
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x10
	.string	"start"
	.byte	0xd
	.value	0x1ca
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x10
	.string	"end"
	.byte	0xd
	.value	0x1cd
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x10
	.string	"top"
	.byte	0xd
	.value	0x1d1
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.uleb128 0x10
	.string	"scan_start"
	.byte	0xd
	.value	0x1d4
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.uleb128 0x10
	.string	"sink"
	.byte	0xd
	.value	0x1d7
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x10
	.string	"exit_labels"
	.byte	0xd
	.value	0x1e2
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x10
	.string	"exit_count"
	.byte	0xd
	.value	0x1e6
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5e65
	.uleb128 0x2
	.string	"basic_block"
	.byte	0xd
	.byte	0xe6
	.long	0x196a
	.uleb128 0x3
	.byte	0x4
	.long	0x5e59
	.uleb128 0x3
	.byte	0x4
	.long	0x60d3
	.uleb128 0x4
	.long	0x6158
	.string	"var_refs_queue"
	.byte	0x10
	.byte	0xa
	.byte	0x17
	.uleb128 0x7
	.string	"modified"
	.byte	0xa
	.byte	0x18
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"promoted_mode"
	.byte	0xa
	.byte	0x19
	.long	0x9bb
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1e
	.long	.LASF41
	.byte	0xa
	.byte	0x1a
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"next"
	.byte	0xa
	.byte	0x1b
	.long	0x6158
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x60f8
	.uleb128 0x16
	.long	0x61a7
	.long	.LASF42
	.byte	0x10
	.byte	0xa
	.byte	0x24
	.uleb128 0x7
	.string	"first"
	.byte	0xa
	.byte	0x26
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"last"
	.byte	0xa
	.byte	0x27
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1e
	.long	.LASF43
	.byte	0xa
	.byte	0x28
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"next"
	.byte	0xa
	.byte	0x29
	.long	0x61a7
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x615e
	.uleb128 0x4
	.long	0x62fc
	.string	"emit_status"
	.byte	0x34
	.byte	0xa
	.byte	0x37
	.uleb128 0x7
	.string	"x_reg_rtx_no"
	.byte	0xa
	.byte	0x3a
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"x_first_label_num"
	.byte	0xa
	.byte	0x3d
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"x_first_insn"
	.byte	0xa
	.byte	0x44
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"x_last_insn"
	.byte	0xa
	.byte	0x45
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x1e
	.long	.LASF43
	.byte	0xa
	.byte	0x4a
	.long	0x1e0
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1e
	.long	.LASF42
	.byte	0xa
	.byte	0x50
	.long	0x61a7
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"x_cur_insn_uid"
	.byte	0xa
	.byte	0x54
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"x_last_linenum"
	.byte	0xa
	.byte	0x58
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"x_last_filename"
	.byte	0xa
	.byte	0x59
	.long	0x44b
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"regno_pointer_align_length"
	.byte	0xa
	.byte	0x5f
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"regno_pointer_align"
	.byte	0xa
	.byte	0x65
	.long	0x8d4
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"regno_decl"
	.byte	0xa
	.byte	0x69
	.long	0x5c4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x7
	.string	"x_regno_reg_rtx"
	.byte	0xa
	.byte	0x70
	.long	0x19a5
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.byte	0x0
	.uleb128 0x4
	.long	0x63dc
	.string	"expr_status"
	.byte	0x1c
	.byte	0xa
	.byte	0x7d
	.uleb128 0x7
	.string	"x_pending_stack_adjust"
	.byte	0xa
	.byte	0x80
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"x_inhibit_defer_pop"
	.byte	0xa
	.byte	0x91
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"x_stack_pointer_delta"
	.byte	0xa
	.byte	0x97
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"x_saveregs_value"
	.byte	0xa
	.byte	0x9c
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"x_apply_args_value"
	.byte	0xa
	.byte	0x9f
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"x_forced_labels"
	.byte	0xa
	.byte	0xa2
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"x_pending_chain"
	.byte	0xa
	.byte	0xa5
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.byte	0x0
	.uleb128 0x29
	.long	0x6446
	.long	.LASF37
	.byte	0x4
	.byte	0xa
	.value	0x1f1
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_UNLIKELY_EXECUTED"
	.sleb128 0
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_NORMAL"
	.sleb128 1
	.uleb128 0xc
	.string	"FUNCTION_FREQUENCY_HOT"
	.sleb128 2
	.byte	0x0
	.uleb128 0x21
	.string	"eh_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x6446
	.uleb128 0x21
	.string	"stmt_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x6458
	.uleb128 0x3
	.byte	0x4
	.long	0x62fc
	.uleb128 0x3
	.byte	0x4
	.long	0x61ad
	.uleb128 0x21
	.string	"varasm_status"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x6478
	.uleb128 0x21
	.string	"initial_value_struct"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x648e
	.uleb128 0x21
	.string	"temp_slot"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x64ab
	.uleb128 0x21
	.string	"machine_function"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x64bd
	.uleb128 0x21
	.string	"language_function"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x64d6
	.uleb128 0xb
	.long	0x6585
	.string	"expand_modifier"
	.byte	0x4
	.byte	0x10
	.byte	0x39
	.uleb128 0xc
	.string	"EXPAND_NORMAL"
	.sleb128 0
	.uleb128 0xc
	.string	"EXPAND_STACK_PARM"
	.sleb128 2
	.uleb128 0xc
	.string	"EXPAND_SUM"
	.sleb128 3
	.uleb128 0xc
	.string	"EXPAND_CONST_ADDRESS"
	.sleb128 4
	.uleb128 0xc
	.string	"EXPAND_INITIALIZER"
	.sleb128 5
	.uleb128 0xc
	.string	"EXPAND_WRITE"
	.sleb128 6
	.uleb128 0xc
	.string	"EXPAND_MEMORY"
	.sleb128 7
	.byte	0x0
	.uleb128 0xb
	.long	0x65b3
	.string	"direction"
	.byte	0x4
	.byte	0x10
	.byte	0x7d
	.uleb128 0xc
	.string	"none"
	.sleb128 0
	.uleb128 0xc
	.string	"upward"
	.sleb128 1
	.uleb128 0xc
	.string	"downward"
	.sleb128 2
	.byte	0x0
	.uleb128 0x2a
	.long	0x660b
	.string	"block_op_methods"
	.byte	0x4
	.byte	0x10
	.value	0x195
	.uleb128 0xc
	.string	"BLOCK_OP_NORMAL"
	.sleb128 0
	.uleb128 0xc
	.string	"BLOCK_OP_NO_LIBCALL"
	.sleb128 1
	.uleb128 0xc
	.string	"BLOCK_OP_CALL_PARM"
	.sleb128 2
	.byte	0x0
	.uleb128 0x1c
	.long	0x876a
	.long	.LASF44
	.byte	0x4
	.byte	0xf
	.byte	0x7
	.uleb128 0xc
	.string	"CODE_FOR_trap"
	.sleb128 0
	.uleb128 0xc
	.string	"CODE_FOR_adddf3"
	.sleb128 2
	.uleb128 0xc
	.string	"CODE_FOR_addsf3"
	.sleb128 3
	.uleb128 0xc
	.string	"CODE_FOR_addsi3_internal"
	.sleb128 4
	.uleb128 0xc
	.string	"CODE_FOR_adddi3_internal_1"
	.sleb128 8
	.uleb128 0xc
	.string	"CODE_FOR_adddi3_internal_2"
	.sleb128 9
	.uleb128 0xc
	.string	"CODE_FOR_adddi3_internal_3"
	.sleb128 10
	.uleb128 0xc
	.string	"CODE_FOR_addsi3_internal_2"
	.sleb128 14
	.uleb128 0xc
	.string	"CODE_FOR_subdf3"
	.sleb128 16
	.uleb128 0xc
	.string	"CODE_FOR_subsf3"
	.sleb128 17
	.uleb128 0xc
	.string	"CODE_FOR_subsi3_internal"
	.sleb128 18
	.uleb128 0xc
	.string	"CODE_FOR_subdi3_internal"
	.sleb128 22
	.uleb128 0xc
	.string	"CODE_FOR_subdi3_internal_2"
	.sleb128 23
	.uleb128 0xc
	.string	"CODE_FOR_subdi3_internal_3"
	.sleb128 24
	.uleb128 0xc
	.string	"CODE_FOR_subsi3_internal_2"
	.sleb128 28
	.uleb128 0xc
	.string	"CODE_FOR_muldf3_internal"
	.sleb128 30
	.uleb128 0xc
	.string	"CODE_FOR_muldf3_r4300"
	.sleb128 31
	.uleb128 0xc
	.string	"CODE_FOR_mulsf3_internal"
	.sleb128 32
	.uleb128 0xc
	.string	"CODE_FOR_mulsf3_r4300"
	.sleb128 33
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3_mult3"
	.sleb128 34
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3_internal"
	.sleb128 35
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3_r4000"
	.sleb128 36
	.uleb128 0xc
	.string	"CODE_FOR_muldi3_internal"
	.sleb128 41
	.uleb128 0xc
	.string	"CODE_FOR_muldi3_internal2"
	.sleb128 42
	.uleb128 0xc
	.string	"CODE_FOR_mulsidi3_internal"
	.sleb128 43
	.uleb128 0xc
	.string	"CODE_FOR_mulsidi3_64bit"
	.sleb128 44
	.uleb128 0xc
	.string	"CODE_FOR_xmulsi3_highpart_internal"
	.sleb128 47
	.uleb128 0xc
	.string	"CODE_FOR_xmulsi3_highpart_mulhi"
	.sleb128 48
	.uleb128 0xc
	.string	"CODE_FOR_smuldi3_highpart"
	.sleb128 50
	.uleb128 0xc
	.string	"CODE_FOR_umuldi3_highpart"
	.sleb128 51
	.uleb128 0xc
	.string	"CODE_FOR_madsi"
	.sleb128 52
	.uleb128 0xc
	.string	"CODE_FOR_divdf3"
	.sleb128 63
	.uleb128 0xc
	.string	"CODE_FOR_divsf3"
	.sleb128 64
	.uleb128 0xc
	.string	"CODE_FOR_divmodsi4_internal"
	.sleb128 67
	.uleb128 0xc
	.string	"CODE_FOR_divmoddi4_internal"
	.sleb128 68
	.uleb128 0xc
	.string	"CODE_FOR_udivmodsi4_internal"
	.sleb128 69
	.uleb128 0xc
	.string	"CODE_FOR_udivmoddi4_internal"
	.sleb128 70
	.uleb128 0xc
	.string	"CODE_FOR_div_trap_normal"
	.sleb128 71
	.uleb128 0xc
	.string	"CODE_FOR_div_trap_mips16"
	.sleb128 72
	.uleb128 0xc
	.string	"CODE_FOR_divsi3_internal"
	.sleb128 73
	.uleb128 0xc
	.string	"CODE_FOR_divdi3_internal"
	.sleb128 74
	.uleb128 0xc
	.string	"CODE_FOR_modsi3_internal"
	.sleb128 75
	.uleb128 0xc
	.string	"CODE_FOR_moddi3_internal"
	.sleb128 76
	.uleb128 0xc
	.string	"CODE_FOR_udivsi3_internal"
	.sleb128 77
	.uleb128 0xc
	.string	"CODE_FOR_udivdi3_internal"
	.sleb128 78
	.uleb128 0xc
	.string	"CODE_FOR_umodsi3_internal"
	.sleb128 79
	.uleb128 0xc
	.string	"CODE_FOR_umoddi3_internal"
	.sleb128 80
	.uleb128 0xc
	.string	"CODE_FOR_sqrtdf2"
	.sleb128 81
	.uleb128 0xc
	.string	"CODE_FOR_sqrtsf2"
	.sleb128 82
	.uleb128 0xc
	.string	"CODE_FOR_abssi2"
	.sleb128 85
	.uleb128 0xc
	.string	"CODE_FOR_absdi2"
	.sleb128 86
	.uleb128 0xc
	.string	"CODE_FOR_absdf2"
	.sleb128 87
	.uleb128 0xc
	.string	"CODE_FOR_abssf2"
	.sleb128 88
	.uleb128 0xc
	.string	"CODE_FOR_ffssi2"
	.sleb128 89
	.uleb128 0xc
	.string	"CODE_FOR_ffsdi2"
	.sleb128 90
	.uleb128 0xc
	.string	"CODE_FOR_negsi2"
	.sleb128 91
	.uleb128 0xc
	.string	"CODE_FOR_negdi2_internal"
	.sleb128 92
	.uleb128 0xc
	.string	"CODE_FOR_negdi2_internal_2"
	.sleb128 93
	.uleb128 0xc
	.string	"CODE_FOR_negdf2"
	.sleb128 94
	.uleb128 0xc
	.string	"CODE_FOR_negsf2"
	.sleb128 95
	.uleb128 0xc
	.string	"CODE_FOR_one_cmplsi2"
	.sleb128 96
	.uleb128 0xc
	.string	"CODE_FOR_one_cmpldi2"
	.sleb128 97
	.uleb128 0xc
	.string	"CODE_FOR_anddi3_internal1"
	.sleb128 102
	.uleb128 0xc
	.string	"CODE_FOR_xordi3_immed"
	.sleb128 112
	.uleb128 0xc
	.string	"CODE_FOR_truncdfsf2"
	.sleb128 115
	.uleb128 0xc
	.string	"CODE_FOR_truncdisi2"
	.sleb128 116
	.uleb128 0xc
	.string	"CODE_FOR_truncdihi2"
	.sleb128 117
	.uleb128 0xc
	.string	"CODE_FOR_truncdiqi2"
	.sleb128 118
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendsidi2_internal"
	.sleb128 125
	.uleb128 0xc
	.string	"CODE_FOR_extendhidi2_internal"
	.sleb128 137
	.uleb128 0xc
	.string	"CODE_FOR_extendhisi2_internal"
	.sleb128 138
	.uleb128 0xc
	.string	"CODE_FOR_extendqihi2_internal"
	.sleb128 139
	.uleb128 0xc
	.string	"CODE_FOR_extendqisi2_insn"
	.sleb128 140
	.uleb128 0xc
	.string	"CODE_FOR_extendqidi2_insn"
	.sleb128 141
	.uleb128 0xc
	.string	"CODE_FOR_extendsfdf2"
	.sleb128 142
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfsi2_insn"
	.sleb128 143
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfsi2_macro"
	.sleb128 144
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfsi2_insn"
	.sleb128 145
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfsi2_macro"
	.sleb128 146
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfdi2"
	.sleb128 147
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfdi2"
	.sleb128 148
	.uleb128 0xc
	.string	"CODE_FOR_floatsidf2"
	.sleb128 149
	.uleb128 0xc
	.string	"CODE_FOR_floatdidf2"
	.sleb128 150
	.uleb128 0xc
	.string	"CODE_FOR_floatsisf2"
	.sleb128 151
	.uleb128 0xc
	.string	"CODE_FOR_floatdisf2"
	.sleb128 152
	.uleb128 0xc
	.string	"CODE_FOR_movsi_ulw"
	.sleb128 153
	.uleb128 0xc
	.string	"CODE_FOR_movsi_usw"
	.sleb128 154
	.uleb128 0xc
	.string	"CODE_FOR_movdi_uld"
	.sleb128 155
	.uleb128 0xc
	.string	"CODE_FOR_movdi_usd"
	.sleb128 156
	.uleb128 0xc
	.string	"CODE_FOR_high"
	.sleb128 157
	.uleb128 0xc
	.string	"CODE_FOR_low"
	.sleb128 158
	.uleb128 0xc
	.string	"CODE_FOR_movdi_internal"
	.sleb128 160
	.uleb128 0xc
	.string	"CODE_FOR_movdi_internal2"
	.sleb128 162
	.uleb128 0xc
	.string	"CODE_FOR_movsi_internal"
	.sleb128 166
	.uleb128 0xc
	.string	"CODE_FOR_hilo_delay"
	.sleb128 168
	.uleb128 0xc
	.string	"CODE_FOR_movcc"
	.sleb128 169
	.uleb128 0xc
	.string	"CODE_FOR_movhi_internal"
	.sleb128 178
	.uleb128 0xc
	.string	"CODE_FOR_movqi_internal"
	.sleb128 180
	.uleb128 0xc
	.string	"CODE_FOR_movsf_internal1"
	.sleb128 182
	.uleb128 0xc
	.string	"CODE_FOR_movsf_internal2"
	.sleb128 183
	.uleb128 0xc
	.string	"CODE_FOR_movdf_internal1"
	.sleb128 185
	.uleb128 0xc
	.string	"CODE_FOR_movdf_internal1a"
	.sleb128 186
	.uleb128 0xc
	.string	"CODE_FOR_movdf_internal2"
	.sleb128 187
	.uleb128 0xc
	.string	"CODE_FOR_loadgp"
	.sleb128 189
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi_internal"
	.sleb128 190
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi_internal2"
	.sleb128 192
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi_internal3"
	.sleb128 194
	.uleb128 0xc
	.string	"CODE_FOR_ashlsi3_internal1"
	.sleb128 195
	.uleb128 0xc
	.string	"CODE_FOR_ashlsi3_internal2"
	.sleb128 196
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal"
	.sleb128 197
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal2"
	.sleb128 198
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal3"
	.sleb128 199
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3_internal4"
	.sleb128 200
	.uleb128 0xc
	.string	"CODE_FOR_ashrsi3_internal1"
	.sleb128 202
	.uleb128 0xc
	.string	"CODE_FOR_ashrsi3_internal2"
	.sleb128 203
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal"
	.sleb128 204
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal2"
	.sleb128 205
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal3"
	.sleb128 206
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3_internal4"
	.sleb128 207
	.uleb128 0xc
	.string	"CODE_FOR_lshrsi3_internal1"
	.sleb128 209
	.uleb128 0xc
	.string	"CODE_FOR_lshrsi3_internal2"
	.sleb128 210
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal"
	.sleb128 212
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal2"
	.sleb128 213
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal3"
	.sleb128 214
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3_internal4"
	.sleb128 215
	.uleb128 0xc
	.string	"CODE_FOR_rotrsi3"
	.sleb128 217
	.uleb128 0xc
	.string	"CODE_FOR_rotrdi3"
	.sleb128 218
	.uleb128 0xc
	.string	"CODE_FOR_branch_fp"
	.sleb128 219
	.uleb128 0xc
	.string	"CODE_FOR_branch_fp_inverted"
	.sleb128 220
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero"
	.sleb128 221
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero_inverted"
	.sleb128 222
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero_di"
	.sleb128 223
	.uleb128 0xc
	.string	"CODE_FOR_branch_zero_di_inverted"
	.sleb128 224
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality"
	.sleb128 225
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality_di"
	.sleb128 226
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality_inverted"
	.sleb128 227
	.uleb128 0xc
	.string	"CODE_FOR_branch_equality_di_inverted"
	.sleb128 228
	.uleb128 0xc
	.string	"CODE_FOR_seq_si_zero"
	.sleb128 231
	.uleb128 0xc
	.string	"CODE_FOR_seq_di_zero"
	.sleb128 233
	.uleb128 0xc
	.string	"CODE_FOR_sne_si_zero"
	.sleb128 235
	.uleb128 0xc
	.string	"CODE_FOR_sne_di_zero"
	.sleb128 236
	.uleb128 0xc
	.string	"CODE_FOR_sgt_si"
	.sleb128 237
	.uleb128 0xc
	.string	"CODE_FOR_sgt_di"
	.sleb128 239
	.uleb128 0xc
	.string	"CODE_FOR_slt_si"
	.sleb128 241
	.uleb128 0xc
	.string	"CODE_FOR_slt_di"
	.sleb128 243
	.uleb128 0xc
	.string	"CODE_FOR_sle_si_const"
	.sleb128 245
	.uleb128 0xc
	.string	"CODE_FOR_sle_di_const"
	.sleb128 247
	.uleb128 0xc
	.string	"CODE_FOR_sgtu_si"
	.sleb128 249
	.uleb128 0xc
	.string	"CODE_FOR_sgtu_di"
	.sleb128 251
	.uleb128 0xc
	.string	"CODE_FOR_sltu_si"
	.sleb128 253
	.uleb128 0xc
	.string	"CODE_FOR_sltu_di"
	.sleb128 255
	.uleb128 0xc
	.string	"CODE_FOR_sleu_si_const"
	.sleb128 257
	.uleb128 0xc
	.string	"CODE_FOR_sleu_di_const"
	.sleb128 259
	.uleb128 0xc
	.string	"CODE_FOR_sunordered_df"
	.sleb128 261
	.uleb128 0xc
	.string	"CODE_FOR_sunlt_df"
	.sleb128 262
	.uleb128 0xc
	.string	"CODE_FOR_suneq_df"
	.sleb128 263
	.uleb128 0xc
	.string	"CODE_FOR_sunle_df"
	.sleb128 264
	.uleb128 0xc
	.string	"CODE_FOR_seq_df"
	.sleb128 265
	.uleb128 0xc
	.string	"CODE_FOR_slt_df"
	.sleb128 266
	.uleb128 0xc
	.string	"CODE_FOR_sle_df"
	.sleb128 267
	.uleb128 0xc
	.string	"CODE_FOR_sgt_df"
	.sleb128 268
	.uleb128 0xc
	.string	"CODE_FOR_sge_df"
	.sleb128 269
	.uleb128 0xc
	.string	"CODE_FOR_sunordered_sf"
	.sleb128 270
	.uleb128 0xc
	.string	"CODE_FOR_sunlt_sf"
	.sleb128 271
	.uleb128 0xc
	.string	"CODE_FOR_suneq_sf"
	.sleb128 272
	.uleb128 0xc
	.string	"CODE_FOR_sunle_sf"
	.sleb128 273
	.uleb128 0xc
	.string	"CODE_FOR_seq_sf"
	.sleb128 274
	.uleb128 0xc
	.string	"CODE_FOR_slt_sf"
	.sleb128 275
	.uleb128 0xc
	.string	"CODE_FOR_sle_sf"
	.sleb128 276
	.uleb128 0xc
	.string	"CODE_FOR_sgt_sf"
	.sleb128 277
	.uleb128 0xc
	.string	"CODE_FOR_sge_sf"
	.sleb128 278
	.uleb128 0xc
	.string	"CODE_FOR_jump"
	.sleb128 279
	.uleb128 0xc
	.string	"CODE_FOR_indirect_jump_internal1"
	.sleb128 281
	.uleb128 0xc
	.string	"CODE_FOR_indirect_jump_internal2"
	.sleb128 282
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal1"
	.sleb128 283
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal2"
	.sleb128 284
	.uleb128 0xc
	.string	"CODE_FOR_casesi_internal"
	.sleb128 287
	.uleb128 0xc
	.string	"CODE_FOR_casesi_internal_di"
	.sleb128 288
	.uleb128 0xc
	.string	"CODE_FOR_blockage"
	.sleb128 289
	.uleb128 0xc
	.string	"CODE_FOR_return"
	.sleb128 290
	.uleb128 0xc
	.string	"CODE_FOR_return_internal"
	.sleb128 291
	.uleb128 0xc
	.string	"CODE_FOR_get_fnaddr"
	.sleb128 292
	.uleb128 0xc
	.string	"CODE_FOR_eh_set_lr_si"
	.sleb128 293
	.uleb128 0xc
	.string	"CODE_FOR_eh_set_lr_di"
	.sleb128 294
	.uleb128 0xc
	.string	"CODE_FOR_exception_receiver"
	.sleb128 295
	.uleb128 0xc
	.string	"CODE_FOR_call_internal1"
	.sleb128 297
	.uleb128 0xc
	.string	"CODE_FOR_call_internal2"
	.sleb128 298
	.uleb128 0xc
	.string	"CODE_FOR_call_internal3a"
	.sleb128 299
	.uleb128 0xc
	.string	"CODE_FOR_call_internal3b"
	.sleb128 300
	.uleb128 0xc
	.string	"CODE_FOR_call_internal3c"
	.sleb128 301
	.uleb128 0xc
	.string	"CODE_FOR_call_internal4a"
	.sleb128 302
	.uleb128 0xc
	.string	"CODE_FOR_call_internal4b"
	.sleb128 303
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal1"
	.sleb128 305
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal2"
	.sleb128 306
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal3a"
	.sleb128 307
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal3b"
	.sleb128 308
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal3c"
	.sleb128 309
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal4a"
	.sleb128 310
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal4b"
	.sleb128 311
	.uleb128 0xc
	.string	"CODE_FOR_call_value_multiple_internal1"
	.sleb128 312
	.uleb128 0xc
	.string	"CODE_FOR_call_value_multiple_internal2"
	.sleb128 313
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_si_address"
	.sleb128 314
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_si"
	.sleb128 315
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_di_address"
	.sleb128 316
	.uleb128 0xc
	.string	"CODE_FOR_prefetch_di"
	.sleb128 317
	.uleb128 0xc
	.string	"CODE_FOR_nop"
	.sleb128 318
	.uleb128 0xc
	.string	"CODE_FOR_consttable_qi"
	.sleb128 331
	.uleb128 0xc
	.string	"CODE_FOR_consttable_hi"
	.sleb128 332
	.uleb128 0xc
	.string	"CODE_FOR_consttable_si"
	.sleb128 333
	.uleb128 0xc
	.string	"CODE_FOR_consttable_di"
	.sleb128 334
	.uleb128 0xc
	.string	"CODE_FOR_consttable_sf"
	.sleb128 335
	.uleb128 0xc
	.string	"CODE_FOR_consttable_df"
	.sleb128 336
	.uleb128 0xc
	.string	"CODE_FOR_align_2"
	.sleb128 337
	.uleb128 0xc
	.string	"CODE_FOR_align_4"
	.sleb128 338
	.uleb128 0xc
	.string	"CODE_FOR_align_8"
	.sleb128 339
	.uleb128 0xc
	.string	"CODE_FOR_leasi"
	.sleb128 340
	.uleb128 0xc
	.string	"CODE_FOR_leadi"
	.sleb128 341
	.uleb128 0xc
	.string	"CODE_FOR_conditional_trap"
	.sleb128 342
	.uleb128 0xc
	.string	"CODE_FOR_addsi3"
	.sleb128 343
	.uleb128 0xc
	.string	"CODE_FOR_adddi3"
	.sleb128 346
	.uleb128 0xc
	.string	"CODE_FOR_subsi3"
	.sleb128 353
	.uleb128 0xc
	.string	"CODE_FOR_subdi3"
	.sleb128 356
	.uleb128 0xc
	.string	"CODE_FOR_muldf3"
	.sleb128 363
	.uleb128 0xc
	.string	"CODE_FOR_mulsf3"
	.sleb128 364
	.uleb128 0xc
	.string	"CODE_FOR_mulsi3"
	.sleb128 365
	.uleb128 0xc
	.string	"CODE_FOR_muldi3"
	.sleb128 371
	.uleb128 0xc
	.string	"CODE_FOR_mulsidi3"
	.sleb128 372
	.uleb128 0xc
	.string	"CODE_FOR_umulsidi3"
	.sleb128 373
	.uleb128 0xc
	.string	"CODE_FOR_smulsi3_highpart"
	.sleb128 374
	.uleb128 0xc
	.string	"CODE_FOR_umulsi3_highpart"
	.sleb128 375
	.uleb128 0xc
	.string	"CODE_FOR_divmodsi4"
	.sleb128 376
	.uleb128 0xc
	.string	"CODE_FOR_divmoddi4"
	.sleb128 377
	.uleb128 0xc
	.string	"CODE_FOR_udivmodsi4"
	.sleb128 378
	.uleb128 0xc
	.string	"CODE_FOR_udivmoddi4"
	.sleb128 379
	.uleb128 0xc
	.string	"CODE_FOR_div_trap"
	.sleb128 380
	.uleb128 0xc
	.string	"CODE_FOR_divsi3"
	.sleb128 381
	.uleb128 0xc
	.string	"CODE_FOR_divdi3"
	.sleb128 382
	.uleb128 0xc
	.string	"CODE_FOR_modsi3"
	.sleb128 383
	.uleb128 0xc
	.string	"CODE_FOR_moddi3"
	.sleb128 384
	.uleb128 0xc
	.string	"CODE_FOR_udivsi3"
	.sleb128 385
	.uleb128 0xc
	.string	"CODE_FOR_udivdi3"
	.sleb128 386
	.uleb128 0xc
	.string	"CODE_FOR_umodsi3"
	.sleb128 387
	.uleb128 0xc
	.string	"CODE_FOR_umoddi3"
	.sleb128 388
	.uleb128 0xc
	.string	"CODE_FOR_negdi2"
	.sleb128 389
	.uleb128 0xc
	.string	"CODE_FOR_andsi3"
	.sleb128 391
	.uleb128 0xc
	.string	"CODE_FOR_anddi3"
	.sleb128 392
	.uleb128 0xc
	.string	"CODE_FOR_iorsi3"
	.sleb128 394
	.uleb128 0xc
	.string	"CODE_FOR_iordi3"
	.sleb128 395
	.uleb128 0xc
	.string	"CODE_FOR_xorsi3"
	.sleb128 397
	.uleb128 0xc
	.string	"CODE_FOR_xordi3"
	.sleb128 398
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendsidi2"
	.sleb128 401
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendhisi2"
	.sleb128 402
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendhidi2"
	.sleb128 403
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendqihi2"
	.sleb128 404
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendqisi2"
	.sleb128 405
	.uleb128 0xc
	.string	"CODE_FOR_zero_extendqidi2"
	.sleb128 406
	.uleb128 0xc
	.string	"CODE_FOR_extendsidi2"
	.sleb128 407
	.uleb128 0xc
	.string	"CODE_FOR_extendhidi2"
	.sleb128 408
	.uleb128 0xc
	.string	"CODE_FOR_extendhisi2"
	.sleb128 409
	.uleb128 0xc
	.string	"CODE_FOR_extendqihi2"
	.sleb128 410
	.uleb128 0xc
	.string	"CODE_FOR_extendqisi2"
	.sleb128 411
	.uleb128 0xc
	.string	"CODE_FOR_extendqidi2"
	.sleb128 412
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncdfsi2"
	.sleb128 413
	.uleb128 0xc
	.string	"CODE_FOR_fix_truncsfsi2"
	.sleb128 414
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncdfsi2"
	.sleb128 415
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncdfdi2"
	.sleb128 416
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncsfsi2"
	.sleb128 417
	.uleb128 0xc
	.string	"CODE_FOR_fixuns_truncsfdi2"
	.sleb128 418
	.uleb128 0xc
	.string	"CODE_FOR_extv"
	.sleb128 419
	.uleb128 0xc
	.string	"CODE_FOR_extzv"
	.sleb128 420
	.uleb128 0xc
	.string	"CODE_FOR_insv"
	.sleb128 421
	.uleb128 0xc
	.string	"CODE_FOR_movdi"
	.sleb128 422
	.uleb128 0xc
	.string	"CODE_FOR_reload_indi"
	.sleb128 425
	.uleb128 0xc
	.string	"CODE_FOR_reload_outdi"
	.sleb128 426
	.uleb128 0xc
	.string	"CODE_FOR_movsi"
	.sleb128 428
	.uleb128 0xc
	.string	"CODE_FOR_reload_outsi"
	.sleb128 432
	.uleb128 0xc
	.string	"CODE_FOR_reload_insi"
	.sleb128 433
	.uleb128 0xc
	.string	"CODE_FOR_reload_incc"
	.sleb128 434
	.uleb128 0xc
	.string	"CODE_FOR_reload_outcc"
	.sleb128 435
	.uleb128 0xc
	.string	"CODE_FOR_movhi"
	.sleb128 436
	.uleb128 0xc
	.string	"CODE_FOR_movqi"
	.sleb128 438
	.uleb128 0xc
	.string	"CODE_FOR_movsf"
	.sleb128 440
	.uleb128 0xc
	.string	"CODE_FOR_movdf"
	.sleb128 441
	.uleb128 0xc
	.string	"CODE_FOR_movstrsi"
	.sleb128 443
	.uleb128 0xc
	.string	"CODE_FOR_ashlsi3"
	.sleb128 444
	.uleb128 0xc
	.string	"CODE_FOR_ashldi3"
	.sleb128 446
	.uleb128 0xc
	.string	"CODE_FOR_ashrsi3"
	.sleb128 452
	.uleb128 0xc
	.string	"CODE_FOR_ashrdi3"
	.sleb128 454
	.uleb128 0xc
	.string	"CODE_FOR_lshrsi3"
	.sleb128 460
	.uleb128 0xc
	.string	"CODE_FOR_lshrdi3"
	.sleb128 463
	.uleb128 0xc
	.string	"CODE_FOR_cmpsi"
	.sleb128 469
	.uleb128 0xc
	.string	"CODE_FOR_tstsi"
	.sleb128 470
	.uleb128 0xc
	.string	"CODE_FOR_cmpdi"
	.sleb128 471
	.uleb128 0xc
	.string	"CODE_FOR_tstdi"
	.sleb128 472
	.uleb128 0xc
	.string	"CODE_FOR_cmpdf"
	.sleb128 473
	.uleb128 0xc
	.string	"CODE_FOR_cmpsf"
	.sleb128 474
	.uleb128 0xc
	.string	"CODE_FOR_bunordered"
	.sleb128 475
	.uleb128 0xc
	.string	"CODE_FOR_bordered"
	.sleb128 476
	.uleb128 0xc
	.string	"CODE_FOR_bunlt"
	.sleb128 477
	.uleb128 0xc
	.string	"CODE_FOR_bunge"
	.sleb128 478
	.uleb128 0xc
	.string	"CODE_FOR_buneq"
	.sleb128 479
	.uleb128 0xc
	.string	"CODE_FOR_bltgt"
	.sleb128 480
	.uleb128 0xc
	.string	"CODE_FOR_bunle"
	.sleb128 481
	.uleb128 0xc
	.string	"CODE_FOR_bungt"
	.sleb128 482
	.uleb128 0xc
	.string	"CODE_FOR_beq"
	.sleb128 483
	.uleb128 0xc
	.string	"CODE_FOR_bne"
	.sleb128 484
	.uleb128 0xc
	.string	"CODE_FOR_bgt"
	.sleb128 485
	.uleb128 0xc
	.string	"CODE_FOR_bge"
	.sleb128 486
	.uleb128 0xc
	.string	"CODE_FOR_blt"
	.sleb128 487
	.uleb128 0xc
	.string	"CODE_FOR_ble"
	.sleb128 488
	.uleb128 0xc
	.string	"CODE_FOR_bgtu"
	.sleb128 489
	.uleb128 0xc
	.string	"CODE_FOR_bgeu"
	.sleb128 490
	.uleb128 0xc
	.string	"CODE_FOR_bltu"
	.sleb128 491
	.uleb128 0xc
	.string	"CODE_FOR_bleu"
	.sleb128 492
	.uleb128 0xc
	.string	"CODE_FOR_seq"
	.sleb128 493
	.uleb128 0xc
	.string	"CODE_FOR_sne"
	.sleb128 494
	.uleb128 0xc
	.string	"CODE_FOR_sgt"
	.sleb128 495
	.uleb128 0xc
	.string	"CODE_FOR_sge"
	.sleb128 496
	.uleb128 0xc
	.string	"CODE_FOR_slt"
	.sleb128 497
	.uleb128 0xc
	.string	"CODE_FOR_sle"
	.sleb128 498
	.uleb128 0xc
	.string	"CODE_FOR_sgtu"
	.sleb128 499
	.uleb128 0xc
	.string	"CODE_FOR_sgeu"
	.sleb128 500
	.uleb128 0xc
	.string	"CODE_FOR_sltu"
	.sleb128 501
	.uleb128 0xc
	.string	"CODE_FOR_sleu"
	.sleb128 502
	.uleb128 0xc
	.string	"CODE_FOR_indirect_jump"
	.sleb128 503
	.uleb128 0xc
	.string	"CODE_FOR_tablejump"
	.sleb128 504
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal3"
	.sleb128 505
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_mips161"
	.sleb128 506
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_mips162"
	.sleb128 507
	.uleb128 0xc
	.string	"CODE_FOR_tablejump_internal4"
	.sleb128 508
	.uleb128 0xc
	.string	"CODE_FOR_casesi"
	.sleb128 509
	.uleb128 0xc
	.string	"CODE_FOR_builtin_setjmp_setup"
	.sleb128 510
	.uleb128 0xc
	.string	"CODE_FOR_builtin_setjmp_setup_32"
	.sleb128 511
	.uleb128 0xc
	.string	"CODE_FOR_builtin_setjmp_setup_64"
	.sleb128 512
	.uleb128 0xc
	.string	"CODE_FOR_builtin_longjmp"
	.sleb128 513
	.uleb128 0xc
	.string	"CODE_FOR_prologue"
	.sleb128 514
	.uleb128 0xc
	.string	"CODE_FOR_epilogue"
	.sleb128 515
	.uleb128 0xc
	.string	"CODE_FOR_eh_return"
	.sleb128 516
	.uleb128 0xc
	.string	"CODE_FOR_call"
	.sleb128 518
	.uleb128 0xc
	.string	"CODE_FOR_call_internal0"
	.sleb128 519
	.uleb128 0xc
	.string	"CODE_FOR_call_value"
	.sleb128 520
	.uleb128 0xc
	.string	"CODE_FOR_call_value_internal0"
	.sleb128 521
	.uleb128 0xc
	.string	"CODE_FOR_call_value_multiple_internal0"
	.sleb128 522
	.uleb128 0xc
	.string	"CODE_FOR_untyped_call"
	.sleb128 523
	.uleb128 0xc
	.string	"CODE_FOR_prefetch"
	.sleb128 524
	.uleb128 0xc
	.string	"CODE_FOR_movsicc"
	.sleb128 525
	.uleb128 0xc
	.string	"CODE_FOR_movdicc"
	.sleb128 526
	.uleb128 0xc
	.string	"CODE_FOR_movsfcc"
	.sleb128 527
	.uleb128 0xc
	.string	"CODE_FOR_movdfcc"
	.sleb128 528
	.uleb128 0xc
	.string	"CODE_FOR_nothing"
	.sleb128 529
	.byte	0x0
	.uleb128 0x4
	.long	0x87a2
	.string	"optab_handlers"
	.byte	0x8
	.byte	0x12
	.byte	0x2c
	.uleb128 0x1e
	.long	.LASF44
	.byte	0x12
	.byte	0x2d
	.long	0x660b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"libfunc"
	.byte	0x12
	.byte	0x2e
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x2b
	.long	0x87d3
	.string	"optab"
	.value	0x1b4
	.byte	0x12
	.byte	0x2a
	.uleb128 0x1e
	.long	.LASF0
	.byte	0x12
	.byte	0x2b
	.long	0xd70
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"handlers"
	.byte	0x12
	.byte	0x2f
	.long	0x87d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x12
	.long	0x87e3
	.long	0x876a
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x2
	.string	"optab"
	.byte	0x12
	.byte	0x31
	.long	0x87f0
	.uleb128 0x3
	.byte	0x4
	.long	0x87a2
	.uleb128 0x2
	.string	"rtxfun"
	.byte	0x12
	.byte	0xed
	.long	0x8804
	.uleb128 0x3
	.byte	0x4
	.long	0x880a
	.uleb128 0x28
	.long	0x881a
	.byte	0x1
	.long	0x99
	.uleb128 0x18
	.long	0x99
	.byte	0x0
	.uleb128 0x2
	.string	"insn_operand_predicate_fn"
	.byte	0x11
	.byte	0xd9
	.long	0x883b
	.uleb128 0x3
	.byte	0x4
	.long	0x8841
	.uleb128 0x28
	.long	0x8856
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x99
	.uleb128 0x18
	.long	0x9bb
	.byte	0x0
	.uleb128 0x2
	.string	"insn_gen_fn"
	.byte	0x11
	.byte	0xdb
	.long	0x8869
	.uleb128 0x3
	.byte	0x4
	.long	0x886f
	.uleb128 0x28
	.long	0x8880
	.byte	0x1
	.long	0x99
	.uleb128 0x18
	.long	0x99
	.uleb128 0x2c
	.byte	0x0
	.uleb128 0x4
	.long	0x88ff
	.string	"insn_operand_data"
	.byte	0xc
	.byte	0x11
	.byte	0xde
	.uleb128 0x7
	.string	"predicate"
	.byte	0x11
	.byte	0xdf
	.long	0x88ff
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"constraint"
	.byte	0x11
	.byte	0xe1
	.long	0x5c1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x5
	.long	.LASF1
	.byte	0x11
	.byte	0xe3
	.long	0x8904
	.byte	0x4
	.byte	0x10
	.byte	0x10
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"strict_low"
	.byte	0x11
	.byte	0xe5
	.long	0x451
	.byte	0x2
	.byte	0x23
	.uleb128 0xa
	.uleb128 0x7
	.string	"eliminable"
	.byte	0x11
	.byte	0xe7
	.long	0x451
	.byte	0x2
	.byte	0x23
	.uleb128 0xb
	.byte	0x0
	.uleb128 0xd
	.long	0x881a
	.uleb128 0xd
	.long	0x9bb
	.uleb128 0x16
	.long	0x89ac
	.long	.LASF45
	.byte	0x14
	.byte	0x11
	.byte	0xf2
	.uleb128 0x1e
	.long	.LASF30
	.byte	0x11
	.byte	0xf3
	.long	0x5c1f
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"output"
	.byte	0x11
	.byte	0xf4
	.long	0x99a
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1e
	.long	.LASF46
	.byte	0x11
	.byte	0xf5
	.long	0x89ac
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"operand"
	.byte	0x11
	.byte	0xf6
	.long	0x89b1
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"n_operands"
	.byte	0x11
	.byte	0xf8
	.long	0x451
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"n_dups"
	.byte	0x11
	.byte	0xf9
	.long	0x451
	.byte	0x2
	.byte	0x23
	.uleb128 0x11
	.uleb128 0x7
	.string	"n_alternatives"
	.byte	0x11
	.byte	0xfa
	.long	0x451
	.byte	0x2
	.byte	0x23
	.uleb128 0x12
	.uleb128 0x7
	.string	"output_format"
	.byte	0x11
	.byte	0xfb
	.long	0x451
	.byte	0x2
	.byte	0x23
	.uleb128 0x13
	.byte	0x0
	.uleb128 0xd
	.long	0x8856
	.uleb128 0xd
	.long	0x89b6
	.uleb128 0x3
	.byte	0x4
	.long	0x89bc
	.uleb128 0xd
	.long	0x8880
	.uleb128 0x4
	.long	0x8a13
	.string	"ggc_root_tab"
	.byte	0x10
	.byte	0x1b
	.byte	0x34
	.uleb128 0x7
	.string	"base"
	.byte	0x1b
	.byte	0x35
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"nelt"
	.byte	0x1b
	.byte	0x36
	.long	0x56d
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"stride"
	.byte	0x1b
	.byte	0x37
	.long	0x56d
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"cb"
	.byte	0x1b
	.byte	0x38
	.long	0x8da
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x2
	.string	"lang_print_tree_hook"
	.byte	0x15
	.byte	0x1d
	.long	0x8a2f
	.uleb128 0x3
	.byte	0x4
	.long	0x8a35
	.uleb128 0x17
	.long	0x8a4b
	.byte	0x1
	.uleb128 0x18
	.long	0x8a4b
	.uleb128 0x18
	.long	0x1e0
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x642
	.uleb128 0x4
	.long	0x8bd7
	.string	"lang_hooks_for_tree_inlining"
	.byte	0x30
	.byte	0x15
	.byte	0x23
	.uleb128 0x7
	.string	"walk_subtrees"
	.byte	0x15
	.byte	0x24
	.long	0x8c21
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"cannot_inline_tree_fn"
	.byte	0x15
	.byte	0x29
	.long	0x8c37
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"disregard_inline_limits"
	.byte	0x15
	.byte	0x2a
	.long	0x8c4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"add_pending_fn_decls"
	.byte	0x15
	.byte	0x2b
	.long	0x8c68
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"tree_chain_matters_p"
	.byte	0x15
	.byte	0x2d
	.long	0x8c4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"auto_var_in_fn_p"
	.byte	0x15
	.byte	0x2e
	.long	0x8c83
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"copy_res_decl_for_inlining"
	.byte	0x15
	.byte	0x2f
	.long	0x8cb2
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"anon_aggr_type_p"
	.byte	0x15
	.byte	0x34
	.long	0x8c4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"var_mod_type_p"
	.byte	0x15
	.byte	0x35
	.long	0x8cc8
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"start_inlining"
	.byte	0x15
	.byte	0x36
	.long	0x8c4d
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"end_inlining"
	.byte	0x15
	.byte	0x37
	.long	0x8cda
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x7
	.string	"convert_parm_for_inlining"
	.byte	0x15
	.byte	0x38
	.long	0x8cfa
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.byte	0x0
	.uleb128 0x28
	.long	0x8bfb
	.byte	0x1
	.long	0x1ec
	.uleb128 0x18
	.long	0x8bfb
	.uleb128 0x18
	.long	0x994
	.uleb128 0x18
	.long	0x8c01
	.uleb128 0x18
	.long	0x63a
	.uleb128 0x18
	.long	0x63a
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x1ec
	.uleb128 0x3
	.byte	0x4
	.long	0x8c07
	.uleb128 0x28
	.long	0x8c21
	.byte	0x1
	.long	0x1ec
	.uleb128 0x18
	.long	0x8bfb
	.uleb128 0x18
	.long	0x994
	.uleb128 0x18
	.long	0x63a
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8bd7
	.uleb128 0x28
	.long	0x8c37
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x8bfb
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8c27
	.uleb128 0x28
	.long	0x8c4d
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x1ec
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8c3d
	.uleb128 0x28
	.long	0x8c68
	.byte	0x1
	.long	0x1ec
	.uleb128 0x18
	.long	0x63a
	.uleb128 0x18
	.long	0x1ec
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8c53
	.uleb128 0x28
	.long	0x8c83
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8c6e
	.uleb128 0x28
	.long	0x8cb2
	.byte	0x1
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.uleb128 0x18
	.long	0x63a
	.uleb128 0x18
	.long	0x994
	.uleb128 0x18
	.long	0x63a
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8c89
	.uleb128 0x28
	.long	0x8cc8
	.byte	0x1
	.long	0xd67
	.uleb128 0x18
	.long	0x1ec
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8cb8
	.uleb128 0x17
	.long	0x8cda
	.byte	0x1
	.uleb128 0x18
	.long	0x1ec
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8cce
	.uleb128 0x28
	.long	0x8cfa
	.byte	0x1
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.uleb128 0x18
	.long	0x1ec
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8ce0
	.uleb128 0x4
	.long	0x8d6f
	.string	"lang_hooks_for_functions"
	.byte	0x10
	.byte	0x15
	.byte	0x40
	.uleb128 0x7
	.string	"init"
	.byte	0x15
	.byte	0x42
	.long	0x8d7b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"final"
	.byte	0x15
	.byte	0x45
	.long	0x8d7b
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"enter_nested"
	.byte	0x15
	.byte	0x48
	.long	0x8d7b
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"leave_nested"
	.byte	0x15
	.byte	0x4b
	.long	0x8d7b
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.byte	0x0
	.uleb128 0x17
	.long	0x8d7b
	.byte	0x1
	.uleb128 0x18
	.long	0x512b
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8d6f
	.uleb128 0x4
	.long	0x8dcc
	.string	"lang_hooks_for_tree_dump"
	.byte	0x8
	.byte	0x15
	.byte	0x51
	.uleb128 0x7
	.string	"dump_tree"
	.byte	0x15
	.byte	0x54
	.long	0x8de1
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"type_quals"
	.byte	0x15
	.byte	0x57
	.long	0x8df7
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.byte	0x0
	.uleb128 0x28
	.long	0x8de1
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x63a
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8dcc
	.uleb128 0x28
	.long	0x8df7
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8de7
	.uleb128 0x4
	.long	0x8eea
	.string	"lang_hooks_for_types"
	.byte	0x20
	.byte	0x15
	.byte	0x5d
	.uleb128 0x7
	.string	"make_type"
	.byte	0x15
	.byte	0x60
	.long	0x8efa
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"type_for_mode"
	.byte	0x15
	.byte	0x64
	.long	0x8f15
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"type_for_size"
	.byte	0x15
	.byte	0x68
	.long	0x8f30
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"unsigned_type"
	.byte	0x15
	.byte	0x6c
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"signed_type"
	.byte	0x15
	.byte	0x70
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"signed_or_unsigned_type"
	.byte	0x15
	.byte	0x74
	.long	0x8f61
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"type_promotes_to"
	.byte	0x15
	.byte	0x7a
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"incomplete_type_error"
	.byte	0x15
	.byte	0x80
	.long	0x8f78
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.byte	0x0
	.uleb128 0x28
	.long	0x8efa
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x19ef
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8eea
	.uleb128 0x28
	.long	0x8f15
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x9bb
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8f00
	.uleb128 0x28
	.long	0x8f30
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x537
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8f1b
	.uleb128 0x28
	.long	0x8f46
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8f36
	.uleb128 0x28
	.long	0x8f61
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x45e
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8f4c
	.uleb128 0x17
	.long	0x8f78
	.byte	0x1
	.uleb128 0x18
	.long	0x1e0
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x8f67
	.uleb128 0x4
	.long	0x9084
	.string	"lang_hooks_for_decls"
	.byte	0x28
	.byte	0x15
	.byte	0x86
	.uleb128 0x7
	.string	"pushlevel"
	.byte	0x15
	.byte	0x89
	.long	0x9a1
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"poplevel"
	.byte	0x15
	.byte	0x90
	.long	0x909e
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"global_bindings_p"
	.byte	0x15
	.byte	0x94
	.long	0x90aa
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"insert_block"
	.byte	0x15
	.byte	0x99
	.long	0x90bc
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"set_block"
	.byte	0x15
	.byte	0x9c
	.long	0x90bc
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"pushdecl"
	.byte	0x15
	.byte	0xa2
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"getdecls"
	.byte	0x15
	.byte	0xa5
	.long	0x90c8
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"warn_unused_global"
	.byte	0x15
	.byte	0xa9
	.long	0x90de
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"final_write_globals"
	.byte	0x15
	.byte	0xad
	.long	0x9b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"ok_for_sibcall"
	.byte	0x15
	.byte	0xb0
	.long	0x90de
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x28
	.long	0x909e
	.byte	0x1
	.long	0x1e0
	.uleb128 0x18
	.long	0x45e
	.uleb128 0x18
	.long	0x45e
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9084
	.uleb128 0x2d
	.byte	0x1
	.long	0x45e
	.uleb128 0x3
	.byte	0x4
	.long	0x90a4
	.uleb128 0x17
	.long	0x90bc
	.byte	0x1
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x90b0
	.uleb128 0x2d
	.byte	0x1
	.long	0x1e0
	.uleb128 0x3
	.byte	0x4
	.long	0x90c2
	.uleb128 0x28
	.long	0x90de
	.byte	0x1
	.long	0xd67
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x90ce
	.uleb128 0x26
	.long	0x9505
	.long	.LASF47
	.value	0x120
	.byte	0x15
	.byte	0xb6
	.uleb128 0x1e
	.long	.LASF30
	.byte	0x15
	.byte	0xb8
	.long	0x44b
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x7
	.string	"identifier_size"
	.byte	0x15
	.byte	0xbc
	.long	0x56d
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x7
	.string	"init_options"
	.byte	0x15
	.byte	0xc0
	.long	0x9b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x7
	.string	"decode_option"
	.byte	0x15
	.byte	0xca
	.long	0x9520
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"post_options"
	.byte	0x15
	.byte	0xd6
	.long	0x952c
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x7
	.string	"init"
	.byte	0x15
	.byte	0xde
	.long	0x9542
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"finish"
	.byte	0x15
	.byte	0xe1
	.long	0x9b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"parse_file"
	.byte	0x15
	.byte	0xe5
	.long	0x9a1
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"clear_binding_stack"
	.byte	0x15
	.byte	0xe8
	.long	0x9b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x7
	.string	"get_alias_set"
	.byte	0x15
	.byte	0xec
	.long	0x9558
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x7
	.string	"expand_constant"
	.byte	0x15
	.byte	0xf1
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x1e
	.long	.LASF48
	.byte	0x15
	.byte	0xf5
	.long	0x957d
	.byte	0x2
	.byte	0x23
	.uleb128 0x2c
	.uleb128 0x10
	.string	"truthvalue_conversion"
	.byte	0x15
	.value	0x102
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.uleb128 0x10
	.string	"insert_default_attributes"
	.byte	0x15
	.value	0x106
	.long	0x90bc
	.byte	0x2
	.byte	0x23
	.uleb128 0x34
	.uleb128 0x22
	.long	.LASF49
	.byte	0x15
	.value	0x10f
	.long	0x9598
	.byte	0x2
	.byte	0x23
	.uleb128 0x38
	.uleb128 0x10
	.string	"finish_incomplete_decl"
	.byte	0x15
	.value	0x113
	.long	0x90bc
	.byte	0x2
	.byte	0x23
	.uleb128 0x3c
	.uleb128 0x10
	.string	"unsafe_for_reeval"
	.byte	0x15
	.value	0x118
	.long	0x8df7
	.byte	0x2
	.byte	0x23
	.uleb128 0x40
	.uleb128 0x10
	.string	"mark_addressable"
	.byte	0x15
	.value	0x11d
	.long	0x90de
	.byte	0x2
	.byte	0x23
	.uleb128 0x44
	.uleb128 0x10
	.string	"staticp"
	.byte	0x15
	.value	0x120
	.long	0x8df7
	.byte	0x2
	.byte	0x23
	.uleb128 0x48
	.uleb128 0x10
	.string	"dup_lang_specific_decl"
	.byte	0x15
	.value	0x124
	.long	0x90bc
	.byte	0x2
	.byte	0x23
	.uleb128 0x4c
	.uleb128 0x10
	.string	"unsave_expr_now"
	.byte	0x15
	.value	0x129
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x50
	.uleb128 0x10
	.string	"maybe_build_cleanup"
	.byte	0x15
	.value	0x12d
	.long	0x8f46
	.byte	0x2
	.byte	0x23
	.uleb128 0x54
	.uleb128 0x10
	.string	"set_decl_assembler_name"
	.byte	0x15
	.value	0x134
	.long	0x90bc
	.byte	0x2
	.byte	0x23
	.uleb128 0x58
	.uleb128 0x10
	.string	"can_use_bit_fields_p"
	.byte	0x15
	.value	0x138
	.long	0x952c
	.byte	0x2
	.byte	0x23
	.uleb128 0x5c
	.uleb128 0x10
	.string	"honor_readonly"
	.byte	0x15
	.value	0x13b
	.long	0xd67
	.byte	0x2
	.byte	0x23
	.uleb128 0x60
	.uleb128 0x10
	.string	"print_statistics"
	.byte	0x15
	.value	0x13f
	.long	0x9b5
	.byte	0x2
	.byte	0x23
	.uleb128 0x64
	.uleb128 0x10
	.string	"print_xnode"
	.byte	0x15
	.value	0x143
	.long	0x8a13
	.byte	0x2
	.byte	0x23
	.uleb128 0x68
	.uleb128 0x10
	.string	"print_decl"
	.byte	0x15
	.value	0x147
	.long	0x8a13
	.byte	0x2
	.byte	0x23
	.uleb128 0x6c
	.uleb128 0x10
	.string	"print_type"
	.byte	0x15
	.value	0x148
	.long	0x8a13
	.byte	0x2
	.byte	0x23
	.uleb128 0x70
	.uleb128 0x10
	.string	"print_identifier"
	.byte	0x15
	.value	0x149
	.long	0x8a13
	.byte	0x2
	.byte	0x23
	.uleb128 0x74
	.uleb128 0x10
	.string	"decl_printable_name"
	.byte	0x15
	.value	0x151
	.long	0x95b3
	.byte	0x2
	.byte	0x23
	.uleb128 0x78
	.uleb128 0x10
	.string	"print_error_function"
	.byte	0x15
	.value	0x154
	.long	0x95e5
	.byte	0x2
	.byte	0x23
	.uleb128 0x7c
	.uleb128 0x10
	.string	"expr_size"
	.byte	0x15
	.value	0x15b
	.long	0x8f46
	.byte	0x3
	.byte	0x23
	.uleb128 0x80
	.uleb128 0x10
	.string	"attribute_table"
	.byte	0x15
	.value	0x162
	.long	0x95eb
	.byte	0x3
	.byte	0x23
	.uleb128 0x84
	.uleb128 0x10
	.string	"common_attribute_table"
	.byte	0x15
	.value	0x163
	.long	0x95eb
	.byte	0x3
	.byte	0x23
	.uleb128 0x88
	.uleb128 0x10
	.string	"format_attribute_table"
	.byte	0x15
	.value	0x164
	.long	0x95eb
	.byte	0x3
	.byte	0x23
	.uleb128 0x8c
	.uleb128 0x22
	.long	.LASF35
	.byte	0x15
	.value	0x167
	.long	0x8d00
	.byte	0x3
	.byte	0x23
	.uleb128 0x90
	.uleb128 0x10
	.string	"tree_inlining"
	.byte	0x15
	.value	0x169
	.long	0x8a51
	.byte	0x3
	.byte	0x23
	.uleb128 0xa0
	.uleb128 0x10
	.string	"tree_dump"
	.byte	0x15
	.value	0x16b
	.long	0x8d81
	.byte	0x3
	.byte	0x23
	.uleb128 0xd0
	.uleb128 0x10
	.string	"decls"
	.byte	0x15
	.value	0x16d
	.long	0x8f7e
	.byte	0x3
	.byte	0x23
	.uleb128 0xd8
	.uleb128 0x10
	.string	"types"
	.byte	0x15
	.value	0x16f
	.long	0x8dfd
	.byte	0x3
	.byte	0x23
	.uleb128 0x100
	.byte	0x0
	.uleb128 0x28
	.long	0x951a
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x45e
	.uleb128 0x18
	.long	0x951a
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x63c
	.uleb128 0x3
	.byte	0x4
	.long	0x9505
	.uleb128 0x2d
	.byte	0x1
	.long	0xd67
	.uleb128 0x3
	.byte	0x4
	.long	0x9526
	.uleb128 0x28
	.long	0x9542
	.byte	0x1
	.long	0x44b
	.uleb128 0x18
	.long	0x44b
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9532
	.uleb128 0x28
	.long	0x9558
	.byte	0x1
	.long	0x5d3
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9548
	.uleb128 0x28
	.long	0x957d
	.byte	0x1
	.long	0x99
	.uleb128 0x18
	.long	0x1e0
	.uleb128 0x18
	.long	0x99
	.uleb128 0x18
	.long	0x9bb
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x955e
	.uleb128 0x28
	.long	0x9598
	.byte	0x1
	.long	0x45e
	.uleb128 0x18
	.long	0x99
	.uleb128 0x18
	.long	0x1e0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x9583
	.uleb128 0x28
	.long	0x95b3
	.byte	0x1
	.long	0x44b
	.uleb128 0x18
	.long	0x1e0
	.uleb128 0x18
	.long	0x45e
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x959e
	.uleb128 0x17
	.long	0x95ca
	.byte	0x1
	.uleb128 0x18
	.long	0x95ca
	.uleb128 0x18
	.long	0x44b
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x95d0
	.uleb128 0x21
	.string	"diagnostic_context"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0x95b9
	.uleb128 0x3
	.byte	0x4
	.long	0x95f1
	.uleb128 0xd
	.long	0x5b64
	.uleb128 0x16
	.long	0x96b3
	.long	.LASF50
	.byte	0x34
	.byte	0x1
	.byte	0x73
	.uleb128 0x7
	.string	"to"
	.byte	0x1
	.byte	0x74
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1e
	.long	.LASF51
	.byte	0x1
	.byte	0x75
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1e
	.long	.LASF52
	.byte	0x1
	.byte	0x76
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1e
	.long	.LASF53
	.byte	0x1
	.byte	0x77
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"from"
	.byte	0x1
	.byte	0x78
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1e
	.long	.LASF54
	.byte	0x1
	.byte	0x79
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x14
	.uleb128 0x7
	.string	"autinc_from"
	.byte	0x1
	.byte	0x7a
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x7
	.string	"explicit_inc_from"
	.byte	0x1
	.byte	0x7b
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x1c
	.uleb128 0x7
	.string	"len"
	.byte	0x1
	.byte	0x7c
	.long	0x5e4
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x1e
	.long	.LASF8
	.byte	0x1
	.byte	0x7d
	.long	0x5d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.uleb128 0x1e
	.long	.LASF55
	.byte	0x1
	.byte	0x7e
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x30
	.byte	0x0
	.uleb128 0x16
	.long	0x973d
	.long	.LASF56
	.byte	0x2c
	.byte	0x1
	.byte	0x85
	.uleb128 0x7
	.string	"to"
	.byte	0x1
	.byte	0x86
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x0
	.uleb128 0x1e
	.long	.LASF51
	.byte	0x1
	.byte	0x87
	.long	0x99
	.byte	0x2
	.byte	0x23
	.uleb128 0x4
	.uleb128 0x1e
	.long	.LASF52
	.byte	0x1
	.byte	0x88
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x8
	.uleb128 0x1e
	.long	.LASF53
	.byte	0x1
	.byte	0x89
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0xc
	.uleb128 0x7
	.string	"len"
	.byte	0x1
	.byte	0x8a
	.long	0x5e4
	.byte	0x2
	.byte	0x23
	.uleb128 0x10
	.uleb128 0x1e
	.long	.LASF8
	.byte	0x1
	.byte	0x8b
	.long	0x5d3
	.byte	0x2
	.byte	0x23
	.uleb128 0x18
	.uleb128 0x1e
	.long	.LASF57
	.byte	0x1
	.byte	0x8c
	.long	0x9757
	.byte	0x2
	.byte	0x23
	.uleb128 0x20
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x8d
	.long	0x63a
	.byte	0x2
	.byte	0x23
	.uleb128 0x24
	.uleb128 0x1e
	.long	.LASF55
	.byte	0x1
	.byte	0x8e
	.long	0x45e
	.byte	0x2
	.byte	0x23
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x28
	.long	0x9757
	.byte	0x1
	.long	0x99
	.uleb128 0x18
	.long	0x63a
	.uleb128 0x18
	.long	0x5d3
	.uleb128 0x18
	.long	0x9bb
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x973d
	.uleb128 0x2e
	.long	0x9849
	.byte	0x1
	.string	"init_expr_once"
	.byte	0x1
	.value	0x106
	.byte	0x1
	.long	.LFB15
	.long	.LFE15
	.long	.LLST0
	.uleb128 0x2f
	.string	"insn"
	.byte	0x1
	.value	0x107
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"pat"
	.byte	0x1
	.value	0x107
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x108
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"num_clobbers"
	.byte	0x1
	.value	0x109
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"mem"
	.byte	0x1
	.value	0x10a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"mem1"
	.byte	0x1
	.value	0x10a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x10b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	0x9813
	.long	.LBB2
	.long	.LBE2
	.uleb128 0x30
	.long	.LASF59
	.byte	0x1
	.value	0x11e
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x32
	.long	.LBB3
	.long	.LBE3
	.uleb128 0x2f
	.string	"srcmode"
	.byte	0x1
	.value	0x14d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.long	.LBB4
	.long	.LBE4
	.uleb128 0x2f
	.string	"ic"
	.byte	0x1
	.value	0x151
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x33
	.byte	0x1
	.string	"init_expr"
	.byte	0x1
	.value	0x163
	.byte	0x1
	.long	.LFB16
	.long	.LFE16
	.long	.LLST1
	.uleb128 0x2e
	.long	0x98a5
	.byte	0x1
	.string	"finish_expr_for_function"
	.byte	0x1
	.value	0x173
	.byte	0x1
	.long	.LFB17
	.long	.LFE17
	.long	.LLST2
	.uleb128 0x34
	.long	.LASF60
	.long	0xeb4a
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.15038
	.byte	0x0
	.uleb128 0x35
	.long	0x98eb
	.string	"enqueue_insn"
	.byte	0x1
	.value	0x185
	.byte	0x1
	.long	0x99
	.long	.LFB18
	.long	.LFE18
	.long	.LLST3
	.uleb128 0x36
	.string	"var"
	.byte	0x1
	.value	0x184
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"body"
	.byte	0x1
	.value	0x184
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.byte	0x0
	.uleb128 0x37
	.long	0x99d1
	.byte	0x1
	.string	"protect_from_queue"
	.byte	0x1
	.value	0x19e
	.byte	0x1
	.long	0x99
	.long	.LFB19
	.long	.LFE19
	.long	.LLST4
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x19c
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"modify"
	.byte	0x1
	.value	0x19d
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x19f
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x31
	.long	0x9989
	.long	.LBB5
	.long	.LBE5
	.uleb128 0x2f
	.string	"y"
	.byte	0x1
	.value	0x1b1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"new"
	.byte	0x1
	.value	0x1b2
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LBB6
	.long	.LBE6
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x1b6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0x99a6
	.long	.LBB7
	.long	.LBE7
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1c6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x32
	.long	.LBB8
	.long	.LBE8
	.uleb128 0x2f
	.string	"new0"
	.byte	0x1
	.value	0x1cf
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"new1"
	.byte	0x1
	.value	0x1d0
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x37
	.long	0x9a18
	.byte	0x1
	.string	"queued_subexp_p"
	.byte	0x1
	.value	0x1f3
	.byte	0x1
	.long	0x45e
	.long	.LFB20
	.long	.LFE20
	.long	.LLST5
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x1f2
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x1f4
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0x9a61
	.byte	0x1
	.string	"emit_queue"
	.byte	0x1
	.value	0x209
	.byte	0x1
	.long	.LFB21
	.long	.LFE21
	.long	.LLST6
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0x20a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.long	.LBB9
	.long	.LBE9
	.uleb128 0x2f
	.string	"body"
	.byte	0x1
	.value	0x20d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x2e
	.long	0x9ca3
	.byte	0x1
	.string	"convert_move"
	.byte	0x1
	.value	0x233
	.byte	0x1
	.long	.LFB22
	.long	.LFE22
	.long	.LLST7
	.uleb128 0x36
	.string	"to"
	.byte	0x1
	.value	0x231
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"from"
	.byte	0x1
	.value	0x231
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x232
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"to_mode"
	.byte	0x1
	.value	0x234
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2f
	.string	"from_mode"
	.byte	0x1
	.value	0x235
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2f
	.string	"to_real"
	.byte	0x1
	.value	0x236
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"from_real"
	.byte	0x1
	.value	0x237
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x238
	.long	0x660b
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.string	"libcall"
	.byte	0x1
	.value	0x239
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2f
	.string	"equiv_code"
	.byte	0x1
	.value	0x23c
	.long	0xd70
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x31
	.long	0x9b6e
	.long	.LBB10
	.long	.LBE10
	.uleb128 0x30
	.long	.LASF23
	.byte	0x1
	.value	0x26c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.long	.LASF39
	.byte	0x1
	.value	0x26c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.byte	0x0
	.uleb128 0x31
	.long	0x9c28
	.long	.LBB11
	.long	.LBE11
	.uleb128 0x30
	.long	.LASF39
	.byte	0x1
	.value	0x36c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.string	"lowpart"
	.byte	0x1
	.value	0x36d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"fill_value"
	.byte	0x1
	.value	0x36e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"lowfrom"
	.byte	0x1
	.value	0x36f
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x370
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"lowpart_mode"
	.byte	0x1
	.value	0x371
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.long	.LASF62
	.byte	0x1
	.value	0x372
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LBB12
	.long	.LBE12
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x3bf
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"subword"
	.byte	0x1
	.value	0x3c0
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0x9c75
	.long	.LBB13
	.long	.LBE13
	.uleb128 0x2f
	.string	"intermediate"
	.byte	0x1
	.value	0x476
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"tmp"
	.byte	0x1
	.value	0x477
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"shift_amount"
	.byte	0x1
	.value	0x478
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x31
	.long	0x9c92
	.long	.LBB14
	.long	.LBE14
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x522
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeb35
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.15197
	.byte	0x0
	.uleb128 0x37
	.long	0x9cf9
	.byte	0x1
	.string	"convert_to_mode"
	.byte	0x1
	.value	0x53a
	.byte	0x1
	.long	0x99
	.long	.LFB23
	.long	.LFE23
	.long	.LLST8
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x537
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x538
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x539
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.byte	0x0
	.uleb128 0x37
	.long	0x9de5
	.byte	0x1
	.string	"convert_modes"
	.byte	0x1
	.value	0x550
	.byte	0x1
	.long	0x99
	.long	.LFB24
	.long	.LFE24
	.long	.LLST9
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x54d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"oldmode"
	.byte	0x1
	.value	0x54d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x54e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x54f
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x551
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x31
	.long	0x9da6
	.long	.LBB15
	.long	.LBE15
	.uleb128 0x2f
	.string	"val"
	.byte	0x1
	.value	0x56b
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LBB16
	.long	.LBE16
	.uleb128 0x2f
	.string	"width"
	.byte	0x1
	.value	0x570
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0x9dd4
	.long	.LBB17
	.long	.LBE17
	.uleb128 0x2f
	.string	"val"
	.byte	0x1
	.value	0x592
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"width"
	.byte	0x1
	.value	0x593
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeb20
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.15771
	.byte	0x0
	.uleb128 0x37
	.long	0x9e31
	.byte	0x1
	.string	"can_move_by_pieces"
	.byte	0x1
	.value	0x5ca
	.byte	0x1
	.long	0x45e
	.long	.LFB25
	.long	.LFE25
	.long	.LLST10
	.uleb128 0x36
	.string	"len"
	.byte	0x1
	.value	0x5c8
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0x5c9
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.byte	0x0
	.uleb128 0x39
	.long	0x9f34
	.byte	0x1
	.long	.LASF50
	.byte	0x1
	.value	0x5e1
	.byte	0x1
	.long	0x99
	.long	.LFB26
	.long	.LFE26
	.long	.LLST11
	.uleb128 0x36
	.string	"to"
	.byte	0x1
	.value	0x5dd
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"from"
	.byte	0x1
	.value	0x5dd
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"len"
	.byte	0x1
	.value	0x5de
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0x5df
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x36
	.string	"endp"
	.byte	0x1
	.value	0x5e0
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x30
	.long	.LASF63
	.byte	0x1
	.value	0x5e2
	.long	0x95f6
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x30
	.long	.LASF51
	.byte	0x1
	.value	0x5e3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	.LASF54
	.byte	0x1
	.value	0x5e3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF64
	.byte	0x1
	.value	0x5e4
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x5e5
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF65
	.byte	0x1
	.value	0x5e5
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF66
	.byte	0x1
	.value	0x5e6
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	0x9f23
	.long	.LBB18
	.long	.LBE18
	.uleb128 0x2f
	.string	"to1"
	.byte	0x1
	.value	0x653
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeb1b
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.15952
	.byte	0x0
	.uleb128 0x35
	.long	0x9fed
	.string	"move_by_pieces_ninsns"
	.byte	0x1
	.value	0x677
	.byte	0x1
	.long	0x5e4
	.long	.LFB27
	.long	.LFE27
	.long	.LLST12
	.uleb128 0x36
	.string	"l"
	.byte	0x1
	.value	0x675
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0x676
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"n_insns"
	.byte	0x1
	.value	0x678
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.long	.LASF64
	.byte	0x1
	.value	0x679
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x31
	.long	0x9fdc
	.long	.LBB19
	.long	.LBE19
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x681
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF65
	.byte	0x1
	.value	0x681
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF66
	.byte	0x1
	.value	0x682
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeb16
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16150
	.byte	0x0
	.uleb128 0x3a
	.long	0xa080
	.string	"move_by_pieces_1"
	.byte	0x1
	.value	0x6a1
	.byte	0x1
	.long	.LFB28
	.long	.LFE28
	.long	.LLST13
	.uleb128 0x38
	.long	.LASF46
	.byte	0x1
	.value	0x69e
	.long	0x8869
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x69f
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF63
	.byte	0x1
	.value	0x6a0
	.long	0xa080
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF9
	.byte	0x1
	.value	0x6a2
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"to1"
	.byte	0x1
	.value	0x6a3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"from1"
	.byte	0x1
	.value	0x6a3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x34
	.long	.LASF60
	.long	0xeb01
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16216
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x95f6
	.uleb128 0x37
	.long	0xa132
	.byte	0x1
	.string	"emit_block_move"
	.byte	0x1
	.value	0x6e7
	.byte	0x1
	.long	0x99
	.long	.LFB29
	.long	.LFE29
	.long	.LLST14
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x6e5
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"y"
	.byte	0x1
	.value	0x6e5
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x6e5
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"method"
	.byte	0x1
	.value	0x6e6
	.long	0x65b3
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"may_use_call"
	.byte	0x1
	.value	0x6e8
	.long	0xd67
	.byte	0x2
	.byte	0x91
	.sleb128 -17
	.uleb128 0x30
	.long	.LASF67
	.byte	0x1
	.value	0x6e9
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF10
	.byte	0x1
	.value	0x6ea
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x34
	.long	.LASF60
	.long	0xeafc
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16301
	.byte	0x0
	.uleb128 0x35
	.long	0xa25f
	.string	"block_move_libcall_safe_for_call_parm"
	.byte	0x1
	.value	0x736
	.byte	0x1
	.long	0xd67
	.long	.LFB30
	.long	.LFE30
	.long	.LLST15
	.uleb128 0x3b
	.string	"fail_takes_regs"
	.byte	0x1
	.value	0x75f
	.long	.L600
	.uleb128 0x31
	.long	0xa235
	.long	.LBB20
	.long	.LBE20
	.uleb128 0x3c
	.long	0xa1d5
	.byte	0x4
	.byte	0x1
	.value	0x73c
	.uleb128 0xc
	.string	"takes_regs_uninit"
	.sleb128 0
	.uleb128 0xc
	.string	"takes_regs_no"
	.sleb128 1
	.uleb128 0xc
	.string	"takes_regs_yes"
	.sleb128 2
	.byte	0x0
	.uleb128 0x32
	.long	.LBB21
	.long	.LBE21
	.uleb128 0x30
	.long	.LASF68
	.byte	0x1
	.value	0x744
	.long	0x555
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.string	"fn"
	.byte	0x1
	.value	0x745
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"arg"
	.byte	0x1
	.value	0x745
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LBB22
	.long	.LBE22
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x74d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"tmp"
	.byte	0x1
	.value	0x74e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeaf7
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16442
	.uleb128 0x2f
	.string	"takes_regs"
	.byte	0x1
	.value	0x73e
	.long	0xa196
	.byte	0x5
	.byte	0x3
	.long	takes_regs.16428
	.byte	0x0
	.uleb128 0x35
	.long	0xa34f
	.string	"emit_block_move_via_movstr"
	.byte	0x1
	.value	0x772
	.byte	0x1
	.long	0xd67
	.long	.LFB31
	.long	.LFE31
	.long	.LLST16
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x770
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"y"
	.byte	0x1
	.value	0x770
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x770
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0x771
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"opalign"
	.byte	0x1
	.value	0x777
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x778
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LBB23
	.long	.LBE23
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x780
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"pred"
	.byte	0x1
	.value	0x781
	.long	0x881a
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LBB24
	.long	.LBE24
	.uleb128 0x2f
	.string	"op2"
	.byte	0x1
	.value	0x793
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"last"
	.byte	0x1
	.value	0x794
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"pat"
	.byte	0x1
	.value	0x795
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xa433
	.string	"emit_block_move_via_libcall"
	.byte	0x1
	.value	0x7b7
	.byte	0x1
	.long	0x99
	.long	.LFB32
	.long	.LFE32
	.long	.LLST17
	.uleb128 0x36
	.string	"dst"
	.byte	0x1
	.value	0x7b6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"src"
	.byte	0x1
	.value	0x7b6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x7b6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF69
	.byte	0x1
	.value	0x7b8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	.LASF70
	.byte	0x1
	.value	0x7b8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"fn"
	.byte	0x1
	.value	0x7b8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"src_tree"
	.byte	0x1
	.value	0x7b8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"dst_tree"
	.byte	0x1
	.value	0x7b8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF71
	.byte	0x1
	.value	0x7b8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF72
	.byte	0x1
	.value	0x7b9
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF67
	.byte	0x1
	.value	0x7ba
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0xa498
	.byte	0x1
	.string	"init_block_move_fn"
	.byte	0x1
	.value	0x811
	.byte	0x1
	.long	.LFB33
	.long	.LFE33
	.long	.LLST18
	.uleb128 0x36
	.string	"asmspec"
	.byte	0x1
	.value	0x810
	.long	0x44b
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x32
	.long	.LBB25
	.long	.LBE25
	.uleb128 0x2f
	.string	"args"
	.byte	0x1
	.value	0x814
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"fn"
	.byte	0x1
	.value	0x814
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xa4ee
	.string	"emit_block_move_libcall_fn"
	.byte	0x1
	.value	0x838
	.byte	0x1
	.long	0x1e0
	.long	.LFB34
	.long	.LFE34
	.long	.LLST19
	.uleb128 0x38
	.long	.LASF73
	.byte	0x1
	.value	0x837
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x30
	.long	.LASF74
	.byte	0x1
	.value	0x839
	.long	0xd67
	.byte	0x5
	.byte	0x3
	.long	emitted_extern.16635
	.byte	0x0
	.uleb128 0x3a
	.long	0xa5d7
	.string	"emit_block_move_via_loop"
	.byte	0x1
	.value	0x850
	.byte	0x1
	.long	.LFB35
	.long	.LFE35
	.long	.LLST20
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x84e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"y"
	.byte	0x1
	.value	0x84e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x84e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0x84f
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"cmp_label"
	.byte	0x1
	.value	0x851
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"top_label"
	.byte	0x1
	.value	0x851
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"iter"
	.byte	0x1
	.value	0x851
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"x_addr"
	.byte	0x1
	.value	0x851
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"y_addr"
	.byte	0x1
	.value	0x851
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"tmp"
	.byte	0x1
	.value	0x851
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"iter_mode"
	.byte	0x1
	.value	0x852
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0xa649
	.byte	0x1
	.string	"move_block_to_reg"
	.byte	0x1
	.value	0x886
	.byte	0x1
	.long	.LFB36
	.long	.LFE36
	.long	.LLST21
	.uleb128 0x38
	.long	.LASF59
	.byte	0x1
	.value	0x882
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x883
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"nregs"
	.byte	0x1
	.value	0x884
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x885
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x887
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2e
	.long	0xa727
	.byte	0x1
	.string	"move_block_from_reg"
	.byte	0x1
	.value	0x8b3
	.byte	0x1
	.long	.LFB37
	.long	.LFE37
	.long	.LLST22
	.uleb128 0x38
	.long	.LASF59
	.byte	0x1
	.value	0x8af
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x8b0
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"nregs"
	.byte	0x1
	.value	0x8b1
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x8b2
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x8b4
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x8b9
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	0xa6f9
	.long	.LBB26
	.long	.LBE26
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x8cc
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"shift"
	.byte	0x1
	.value	0x8cd
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x31
	.long	0xa716
	.long	.LBB27
	.long	.LBE27
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x8ed
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeae2
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16778
	.byte	0x0
	.uleb128 0x37
	.long	0xa7c8
	.byte	0x1
	.string	"gen_group_rtx"
	.byte	0x1
	.value	0x8ff
	.byte	0x1
	.long	0x99
	.long	.LFB38
	.long	.LFE38
	.long	.LLST23
	.uleb128 0x36
	.string	"orig"
	.byte	0x1
	.value	0x8fe
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x900
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF21
	.byte	0x1
	.value	0x900
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"tmps"
	.byte	0x1
	.value	0x901
	.long	0x19a5
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	0xa7b7
	.long	.LBB28
	.long	.LBE28
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x911
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x912
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeadd
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16845
	.byte	0x0
	.uleb128 0x2e
	.long	0xa90c
	.byte	0x1
	.string	"emit_group_load"
	.byte	0x1
	.value	0x928
	.byte	0x1
	.long	.LFB39
	.long	.LFE39
	.long	.LLST24
	.uleb128 0x36
	.string	"dst"
	.byte	0x1
	.value	0x926
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x36
	.string	"orig_src"
	.byte	0x1
	.value	0x926
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.string	"ssize"
	.byte	0x1
	.value	0x927
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"tmps"
	.byte	0x1
	.value	0x929
	.long	0x19a5
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0x929
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"start"
	.byte	0x1
	.value	0x92a
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x92a
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.long	0xa8fb
	.long	.LBB29
	.long	.LBE29
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x93b
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"bytepos"
	.byte	0x1
	.value	0x93c
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"bytelen"
	.byte	0x1
	.value	0x93d
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"shift"
	.byte	0x1
	.value	0x93e
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LBB30
	.long	.LBE30
	.uleb128 0x2f
	.string	"slen"
	.byte	0x1
	.value	0x965
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"slen0"
	.byte	0x1
	.value	0x966
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LBB31
	.long	.LBE31
	.uleb128 0x2f
	.string	"mem"
	.byte	0x1
	.value	0x978
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xead8
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.16895
	.byte	0x0
	.uleb128 0x2e
	.long	0xa96e
	.byte	0x1
	.string	"emit_group_move"
	.byte	0x1
	.value	0x999
	.byte	0x1
	.long	.LFB40
	.long	.LFE40
	.long	.LLST25
	.uleb128 0x36
	.string	"dst"
	.byte	0x1
	.value	0x998
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"src"
	.byte	0x1
	.value	0x998
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x99a
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x34
	.long	.LASF60
	.long	0xead3
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17234
	.byte	0x0
	.uleb128 0x2e
	.long	0xaac3
	.byte	0x1
	.string	"emit_group_store"
	.byte	0x1
	.value	0x9af
	.byte	0x1
	.long	.LFB41
	.long	.LFE41
	.long	.LLST26
	.uleb128 0x36
	.string	"orig_dst"
	.byte	0x1
	.value	0x9ad
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x36
	.string	"src"
	.byte	0x1
	.value	0x9ad
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x36
	.string	"ssize"
	.byte	0x1
	.value	0x9ae
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"tmps"
	.byte	0x1
	.value	0x9b0
	.long	0x19a5
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.string	"dst"
	.byte	0x1
	.value	0x9b0
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"start"
	.byte	0x1
	.value	0x9b1
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x9b1
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.long	0xaa26
	.long	.LBB32
	.long	.LBE32
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0x9c2
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.uleb128 0x31
	.long	0xaa43
	.long	.LBB33
	.long	.LBE33
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x9cd
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x31
	.long	0xaab2
	.long	.LBB34
	.long	.LBE34
	.uleb128 0x2f
	.string	"bytepos"
	.byte	0x1
	.value	0x9e8
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x9e9
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"bytelen"
	.byte	0x1
	.value	0x9ea
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"dest"
	.byte	0x1
	.value	0x9eb
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LBB35
	.long	.LBE35
	.uleb128 0x2f
	.string	"shift"
	.byte	0x1
	.value	0x9f2
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeace
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17270
	.byte	0x0
	.uleb128 0x37
	.long	0xaba9
	.byte	0x1
	.string	"copy_blkmode_from_reg"
	.byte	0x1
	.value	0xa2f
	.byte	0x1
	.long	0x99
	.long	.LFB42
	.long	.LFE42
	.long	.LLST27
	.uleb128 0x36
	.string	"tgtblk"
	.byte	0x1
	.value	0xa2c
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"srcreg"
	.byte	0x1
	.value	0xa2d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF3
	.byte	0x1
	.value	0xa2e
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"bytes"
	.byte	0x1
	.value	0xa30
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"src"
	.byte	0x1
	.value	0xa31
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"dst"
	.byte	0x1
	.value	0xa31
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0xa32
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.long	.LASF76
	.byte	0x1
	.value	0xa33
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"xbitpos"
	.byte	0x1
	.value	0xa33
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"big_endian_correction"
	.byte	0x1
	.value	0xa33
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x2e
	.long	0xabf6
	.byte	0x1
	.string	"use_reg"
	.byte	0x1
	.value	0xa77
	.byte	0x1
	.long	.LFB43
	.long	.LFE43
	.long	.LLST28
	.uleb128 0x38
	.long	.LASF77
	.byte	0x1
	.value	0xa76
	.long	0x19a5
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"reg"
	.byte	0x1
	.value	0xa76
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x34
	.long	.LASF60
	.long	0xeac9
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17661
	.byte	0x0
	.uleb128 0x2e
	.long	0xac62
	.byte	0x1
	.string	"use_regs"
	.byte	0x1
	.value	0xa89
	.byte	0x1
	.long	.LFB44
	.long	.LFE44
	.long	.LLST29
	.uleb128 0x38
	.long	.LASF77
	.byte	0x1
	.value	0xa86
	.long	0x19a5
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF59
	.byte	0x1
	.value	0xa87
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"nregs"
	.byte	0x1
	.value	0xa88
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xa8a
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x34
	.long	.LASF60
	.long	0xeac4
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17676
	.byte	0x0
	.uleb128 0x2e
	.long	0xaccd
	.byte	0x1
	.string	"use_group_regs"
	.byte	0x1
	.value	0xa9b
	.byte	0x1
	.long	.LFB45
	.long	.LFE45
	.long	.LLST30
	.uleb128 0x38
	.long	.LASF77
	.byte	0x1
	.value	0xa99
	.long	0x19a5
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"regs"
	.byte	0x1
	.value	0xa9a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xa9c
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x32
	.long	.LBB36
	.long	.LBE36
	.uleb128 0x2f
	.string	"reg"
	.byte	0x1
	.value	0xaa0
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x37
	.long	0xaddc
	.byte	0x1
	.string	"can_store_by_pieces"
	.byte	0x1
	.value	0xab7
	.byte	0x1
	.long	0x45e
	.long	.LFB46
	.long	.LFE46
	.long	.LLST31
	.uleb128 0x36
	.string	"len"
	.byte	0x1
	.value	0xab3
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x38
	.long	.LASF57
	.byte	0x1
	.value	0xab4
	.long	0x9757
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF58
	.byte	0x1
	.value	0xab5
	.long	0x63a
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0xab6
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x30
	.long	.LASF64
	.byte	0x1
	.value	0xab8
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"l"
	.byte	0x1
	.value	0xab8
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0xab9
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0xaba
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF65
	.byte	0x1
	.value	0xaba
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF66
	.byte	0x1
	.value	0xabb
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF55
	.byte	0x1
	.value	0xabc
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"cst"
	.byte	0x1
	.value	0xabd
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x31
	.long	0xadcb
	.long	.LBB37
	.long	.LBE37
	.uleb128 0x30
	.long	.LASF9
	.byte	0x1
	.value	0xae1
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeaaf
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17738
	.byte	0x0
	.uleb128 0x39
	.long	0xae92
	.byte	0x1
	.long	.LASF56
	.byte	0x1
	.value	0xb0e
	.byte	0x1
	.long	0x99
	.long	.LFB47
	.long	.LFE47
	.long	.LLST32
	.uleb128 0x36
	.string	"to"
	.byte	0x1
	.value	0xb08
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"len"
	.byte	0x1
	.value	0xb09
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x38
	.long	.LASF57
	.byte	0x1
	.value	0xb0a
	.long	0x9757
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF58
	.byte	0x1
	.value	0xb0b
	.long	0x63a
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0xb0c
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.string	"endp"
	.byte	0x1
	.value	0xb0d
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x30
	.long	.LASF63
	.byte	0x1
	.value	0xb0f
	.long	0x96b3
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	0xae81
	.long	.LBB38
	.long	.LBE38
	.uleb128 0x2f
	.string	"to1"
	.byte	0x1
	.value	0xb22
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xeaaa
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17842
	.byte	0x0
	.uleb128 0x3a
	.long	0xaef4
	.string	"clear_by_pieces"
	.byte	0x1
	.value	0xb48
	.byte	0x1
	.long	.LFB48
	.long	.LFE48
	.long	.LLST33
	.uleb128 0x36
	.string	"to"
	.byte	0x1
	.value	0xb45
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"len"
	.byte	0x1
	.value	0xb46
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0xb47
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x30
	.long	.LASF63
	.byte	0x1
	.value	0xb49
	.long	0x96b3
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.byte	0x0
	.uleb128 0x35
	.long	0xaf4d
	.string	"clear_by_pieces_1"
	.byte	0x1
	.value	0xb5d
	.byte	0x1
	.long	0x99
	.long	.LFB49
	.long	.LFE49
	.long	.LLST34
	.uleb128 0x38
	.long	.LASF63
	.byte	0x1
	.value	0xb5a
	.long	0x63a
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF8
	.byte	0x1
	.value	0xb5b
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0xb5c
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.byte	0x0
	.uleb128 0x3a
	.long	0xafee
	.string	"store_by_pieces_1"
	.byte	0x1
	.value	0xb6a
	.byte	0x1
	.long	.LFB50
	.long	.LFE50
	.long	.LLST35
	.uleb128 0x38
	.long	.LASF63
	.byte	0x1
	.value	0xb68
	.long	0xafee
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0xb69
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF51
	.byte	0x1
	.value	0xb6b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF64
	.byte	0x1
	.value	0xb6c
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0xb6d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF65
	.byte	0x1
	.value	0xb6d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF66
	.byte	0x1
	.value	0xb6e
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x34
	.long	.LASF60
	.long	0xea95
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.17915
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x96b3
	.uleb128 0x3a
	.long	0xb076
	.string	"store_by_pieces_2"
	.byte	0x1
	.value	0xbc1
	.byte	0x1
	.long	.LFB51
	.long	.LFE51
	.long	.LLST36
	.uleb128 0x38
	.long	.LASF46
	.byte	0x1
	.value	0xbbe
	.long	0x8869
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0xbbf
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF63
	.byte	0x1
	.value	0xbc0
	.long	0xafee
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF9
	.byte	0x1
	.value	0xbc2
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"to1"
	.byte	0x1
	.value	0xbc3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"cst"
	.byte	0x1
	.value	0xbc3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x37
	.long	0xb0db
	.byte	0x1
	.string	"clear_storage"
	.byte	0x1
	.value	0xbe8
	.byte	0x1
	.long	0x99
	.long	.LFB52
	.long	.LFE52
	.long	.LLST37
	.uleb128 0x38
	.long	.LASF78
	.byte	0x1
	.value	0xbe6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0xbe7
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF67
	.byte	0x1
	.value	0xbe9
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF10
	.byte	0x1
	.value	0xbea
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x35
	.long	0xb1be
	.string	"clear_storage_via_clrstr"
	.byte	0x1
	.value	0xc0d
	.byte	0x1
	.long	0xd67
	.long	.LFB53
	.long	.LFE53
	.long	.LLST38
	.uleb128 0x38
	.long	.LASF78
	.byte	0x1
	.value	0xc0b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0xc0b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0xc0c
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"opalign"
	.byte	0x1
	.value	0xc12
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0xc13
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LBB39
	.long	.LBE39
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0xc18
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"pred"
	.byte	0x1
	.value	0xc19
	.long	0x881a
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x32
	.long	.LBB40
	.long	.LBE40
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0xc29
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"last"
	.byte	0x1
	.value	0xc2a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"pat"
	.byte	0x1
	.value	0xc2b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xb280
	.string	"clear_storage_via_libcall"
	.byte	0x1
	.value	0xc46
	.byte	0x1
	.long	0x99
	.long	.LFB54
	.long	.LFE54
	.long	.LLST39
	.uleb128 0x38
	.long	.LASF78
	.byte	0x1
	.value	0xc45
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0xc45
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF69
	.byte	0x1
	.value	0xc47
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF70
	.byte	0x1
	.value	0xc47
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"fn"
	.byte	0x1
	.value	0xc47
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"object_tree"
	.byte	0x1
	.value	0xc47
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF71
	.byte	0x1
	.value	0xc47
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF72
	.byte	0x1
	.value	0xc48
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF67
	.byte	0x1
	.value	0xc49
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0xb2e6
	.byte	0x1
	.string	"init_block_clear_fn"
	.byte	0x1
	.value	0xc97
	.byte	0x1
	.long	.LFB55
	.long	.LFE55
	.long	.LLST40
	.uleb128 0x36
	.string	"asmspec"
	.byte	0x1
	.value	0xc96
	.long	0x44b
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x32
	.long	.LBB41
	.long	.LBE41
	.uleb128 0x2f
	.string	"fn"
	.byte	0x1
	.value	0xc9a
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"args"
	.byte	0x1
	.value	0xc9a
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xb33a
	.string	"clear_storage_libcall_fn"
	.byte	0x1
	.value	0xcbd
	.byte	0x1
	.long	0x1e0
	.long	.LFB56
	.long	.LFE56
	.long	.LLST41
	.uleb128 0x38
	.long	.LASF73
	.byte	0x1
	.value	0xcbc
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x30
	.long	.LASF74
	.byte	0x1
	.value	0xcbe
	.long	0xd67
	.byte	0x5
	.byte	0x3
	.long	emitted_extern.18309
	.byte	0x0
	.uleb128 0x37
	.long	0xb3bd
	.byte	0x1
	.string	"emit_move_insn"
	.byte	0x1
	.value	0xcd7
	.byte	0x1
	.long	0x99
	.long	.LFB57
	.long	.LFE57
	.long	.LLST42
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0xcd6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"y"
	.byte	0x1
	.value	0xcd6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0xcd8
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"y_cst"
	.byte	0x1
	.value	0xcd9
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF79
	.byte	0x1
	.value	0xcda
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x34
	.long	.LASF60
	.long	0xea90
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18330
	.byte	0x0
	.uleb128 0x37
	.long	0xb628
	.byte	0x1
	.string	"emit_move_insn_1"
	.byte	0x1
	.value	0xd1c
	.byte	0x1
	.long	0x99
	.long	.LFB58
	.long	.LFE58
	.long	.LLST43
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0xd1b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"y"
	.byte	0x1
	.value	0xd1b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0xd1d
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.string	"submode"
	.byte	0x1
	.value	0xd1e
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x2f
	.string	"class"
	.byte	0x1
	.value	0xd1f
	.long	0xc04
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x31
	.long	0xb58b
	.long	.LBB42
	.long	.LBE42
	.uleb128 0x2f
	.string	"stack"
	.byte	0x1
	.value	0xd2f
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LBB43
	.long	.LBE43
	.uleb128 0x2f
	.string	"realpart_x"
	.byte	0x1
	.value	0xd7d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"realpart_y"
	.byte	0x1
	.value	0xd7d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.string	"imagpart_x"
	.byte	0x1
	.value	0xd7e
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.string	"imagpart_y"
	.byte	0x1
	.value	0xd7e
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x32
	.long	.LBB44
	.long	.LBE44
	.uleb128 0x2f
	.string	"packed_dest_p"
	.byte	0x1
	.value	0xd8c
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"packed_src_p"
	.byte	0x1
	.value	0xd8e
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x32
	.long	.LBB45
	.long	.LBE45
	.uleb128 0x30
	.long	.LASF80
	.byte	0x1
	.value	0xd93
	.long	0xc04
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"reg_mode"
	.byte	0x1
	.value	0xd96
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LBB46
	.long	.LBE46
	.uleb128 0x2f
	.string	"mem"
	.byte	0x1
	.value	0xd9b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"cmem"
	.byte	0x1
	.value	0xd9d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x31
	.long	0xb56c
	.long	.LBB47
	.long	.LBE47
	.uleb128 0x2f
	.string	"sreg"
	.byte	0x1
	.value	0xda4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.uleb128 0x32
	.long	.LBB48
	.long	.LBE48
	.uleb128 0x2f
	.string	"sreg"
	.byte	0x1
	.value	0xdab
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xb617
	.long	.LBB49
	.long	.LBE49
	.uleb128 0x30
	.long	.LASF79
	.byte	0x1
	.value	0xdd1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"seq"
	.byte	0x1
	.value	0xdd2
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	.LASF40
	.byte	0x1
	.value	0xdd2
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"need_clobber"
	.byte	0x1
	.value	0xdd3
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xdd4
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LBB50
	.long	.LBE50
	.uleb128 0x2f
	.string	"xpart"
	.byte	0x1
	.value	0xe11
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"ypart"
	.byte	0x1
	.value	0xe12
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea8b
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18486
	.byte	0x0
	.uleb128 0x35
	.long	0xb6f9
	.string	"compress_float_constant"
	.byte	0x1
	.value	0xe42
	.byte	0x1
	.long	0x99
	.long	.LFB59
	.long	.LFE59
	.long	.LLST44
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0xe41
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"y"
	.byte	0x1
	.value	0xe41
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.string	"dstmode"
	.byte	0x1
	.value	0xe43
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"orig_srcmode"
	.byte	0x1
	.value	0xe44
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"srcmode"
	.byte	0x1
	.value	0xe45
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"r"
	.byte	0x1
	.value	0xe46
	.long	0xcf9
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LBB51
	.long	.LBE51
	.uleb128 0x2f
	.string	"ic"
	.byte	0x1
	.value	0xe4e
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"trunc_y"
	.byte	0x1
	.value	0xe4f
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF79
	.byte	0x1
	.value	0xe4f
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x37
	.long	0xb75f
	.byte	0x1
	.string	"push_block"
	.byte	0x1
	.value	0xe84
	.byte	0x1
	.long	0x99
	.long	.LFB60
	.long	.LFE60
	.long	.LLST45
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0xe82
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"extra"
	.byte	0x1
	.value	0xe83
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"below"
	.byte	0x1
	.value	0xe83
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0xe85
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0xb9ce
	.byte	0x1
	.string	"emit_push_insn"
	.byte	0x1
	.value	0xf1a
	.byte	0x1
	.long	.LFB61
	.long	.LFE61
	.long	.LLST46
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0xf0e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0xf0f
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF3
	.byte	0x1
	.value	0xf10
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0xf11
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF10
	.byte	0x1
	.value	0xf12
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x36
	.string	"partial"
	.byte	0x1
	.value	0xf13
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.string	"reg"
	.byte	0x1
	.value	0xf14
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x36
	.string	"extra"
	.byte	0x1
	.value	0xf15
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x36
	.string	"args_addr"
	.byte	0x1
	.value	0xf16
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x38
	.long	.LASF68
	.byte	0x1
	.value	0xf17
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 36
	.uleb128 0x36
	.string	"reg_parm_stack_space"
	.byte	0x1
	.value	0xf18
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 40
	.uleb128 0x36
	.string	"alignment_pad"
	.byte	0x1
	.value	0xf19
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 44
	.uleb128 0x2f
	.string	"xinner"
	.byte	0x1
	.value	0xf1b
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.string	"stack_direction"
	.byte	0x1
	.value	0xf1c
	.long	0x6585
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x2f
	.string	"where_pad"
	.byte	0x1
	.value	0xf26
	.long	0x6585
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x31
	.long	0xb90b
	.long	.LBB52
	.long	.LBE52
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0xf34
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"used"
	.byte	0x1
	.value	0xf35
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0xf36
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"skip"
	.byte	0x1
	.value	0xf37
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x32
	.long	.LBB53
	.long	.LBE53
	.uleb128 0x30
	.long	.LASF81
	.byte	0x1
	.value	0xf68
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xb980
	.long	.LBB54
	.long	.LBE54
	.uleb128 0x30
	.long	.LASF9
	.byte	0x1
	.value	0xfad
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0xfae
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"not_stack"
	.byte	0x1
	.value	0xfaf
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0xfb2
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"args_offset"
	.byte	0x1
	.value	0xfb3
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"skip"
	.byte	0x1
	.value	0xfb4
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x31
	.long	0xb9bd
	.long	.LBB55
	.long	.LBE55
	.uleb128 0x2f
	.string	"addr"
	.byte	0x1
	.value	0xfe8
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF81
	.byte	0x1
	.value	0xfe9
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"dest"
	.byte	0x1
	.value	0xfea
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea76
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.18984
	.byte	0x0
	.uleb128 0x35
	.long	0xba03
	.string	"get_subtarget"
	.byte	0x1
	.value	0x102b
	.byte	0x1
	.long	0x99
	.long	.LFB62
	.long	.LFE62
	.long	.LLST47
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x102a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x37
	.long	0xbbbb
	.byte	0x1
	.string	"expand_assignment"
	.byte	0x1
	.value	0x1049
	.byte	0x1
	.long	0x99
	.long	.LFB63
	.long	.LFE63
	.long	.LLST48
	.uleb128 0x36
	.string	"to"
	.byte	0x1
	.value	0x1046
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"from"
	.byte	0x1
	.value	0x1046
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF82
	.byte	0x1
	.value	0x1047
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"suggest_reg"
	.byte	0x1
	.value	0x1048
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x30
	.long	.LASF83
	.byte	0x1
	.value	0x104a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.long	.LASF38
	.byte	0x1
	.value	0x104b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.long	0xbb3f
	.long	.LBB56
	.long	.LBE56
	.uleb128 0x2f
	.string	"mode1"
	.byte	0x1
	.value	0x105f
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0x1060
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x30
	.long	.LASF76
	.byte	0x1
	.value	0x1060
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"orig_to_rtx"
	.byte	0x1
	.value	0x1061
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x1062
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x1063
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.long	.LASF84
	.byte	0x1
	.value	0x1064
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1065
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x32
	.long	.LBB57
	.long	.LBE57
	.uleb128 0x30
	.long	.LASF85
	.byte	0x1
	.value	0x1075
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xbb5c
	.long	.LBB58
	.long	.LBE58
	.uleb128 0x30
	.long	.LASF23
	.byte	0x1
	.value	0x10da
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.uleb128 0x31
	.long	0xbb79
	.long	.LBB59
	.long	.LBE59
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x1100
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x31
	.long	0xbbaa
	.long	.LBB60
	.long	.LBE60
	.uleb128 0x2f
	.string	"from_rtx"
	.byte	0x1
	.value	0x1117
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF9
	.byte	0x1
	.value	0x1117
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea61
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.19365
	.byte	0x0
	.uleb128 0x37
	.long	0xbd57
	.byte	0x1
	.string	"store_expr"
	.byte	0x1
	.value	0x115c
	.byte	0x1
	.long	0x99
	.long	.LFB64
	.long	.LFE64
	.long	.LLST49
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x1159
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x115a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF82
	.byte	0x1
	.value	0x115b
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x115d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"dont_return_target"
	.byte	0x1
	.value	0x115e
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"dont_store_target"
	.byte	0x1
	.value	0x115f
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x31
	.long	0xbc85
	.long	.LBB61
	.long	.LBE61
	.uleb128 0x2f
	.string	"lab1"
	.byte	0x1
	.value	0x117b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"lab2"
	.byte	0x1
	.value	0x117b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x31
	.long	0xbcc5
	.long	.LBB62
	.long	.LBE62
	.uleb128 0x2f
	.string	"inner_target"
	.byte	0x1
	.value	0x11c9
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LBB63
	.long	.LBE63
	.uleb128 0x2f
	.string	"_rtx"
	.byte	0x1
	.value	0x1206
	.long	0xbd57
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xbce2
	.long	.LBB64
	.long	.LBE64
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x1250
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.uleb128 0x31
	.long	0xbd46
	.long	.LBB65
	.long	.LBE65
	.uleb128 0x30
	.long	.LASF9
	.byte	0x1
	.value	0x1263
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x32
	.long	.LBB66
	.long	.LBE66
	.uleb128 0x2f
	.string	"copy_size"
	.byte	0x1
	.value	0x126d
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"copy_size_rtx"
	.byte	0x1
	.value	0x1271
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF86
	.byte	0x1
	.value	0x1275
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea5c
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.19696
	.byte	0x0
	.uleb128 0xd
	.long	0x99
	.uleb128 0x35
	.long	0xbd9f
	.string	"is_zeros_p"
	.byte	0x1
	.value	0x12c5
	.byte	0x1
	.long	0x45e
	.long	.LFB65
	.long	.LFE65
	.long	.LLST50
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x12c4
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x12c6
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xbe11
	.string	"mostly_zeros_p"
	.byte	0x1
	.value	0x12f5
	.byte	0x1
	.long	0x45e
	.long	.LFB66
	.long	.LFE66
	.long	.LLST51
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x12f4
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x32
	.long	.LBB67
	.long	.LBE67
	.uleb128 0x2f
	.string	"elts"
	.byte	0x1
	.value	0x12f8
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"zeros"
	.byte	0x1
	.value	0x12f8
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x12f9
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.byte	0x0
	.uleb128 0x3a
	.long	0xbebb
	.string	"store_constructor_field"
	.byte	0x1
	.value	0x1326
	.byte	0x1
	.long	.LFB67
	.long	.LFE67
	.long	.LLST52
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x131f
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF75
	.byte	0x1
	.value	0x1320
	.long	0x5e4
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x38
	.long	.LASF76
	.byte	0x1
	.value	0x1321
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x1322
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x1323
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x38
	.long	.LASF3
	.byte	0x1
	.value	0x1323
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x36
	.string	"cleared"
	.byte	0x1
	.value	0x1324
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x38
	.long	.LASF33
	.byte	0x1
	.value	0x1325
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 36
	.byte	0x0
	.uleb128 0x3a
	.long	0xc4f8
	.string	"store_constructor"
	.byte	0x1
	.value	0x1354
	.byte	0x1
	.long	.LFB68
	.long	.LFE68
	.long	.LLST53
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x1350
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -396
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x1351
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -400
	.uleb128 0x36
	.string	"cleared"
	.byte	0x1
	.value	0x1352
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x1353
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -408
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x1355
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x2f
	.string	"exp_size"
	.byte	0x1
	.value	0x1357
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -384
	.uleb128 0x31
	.long	0xc02c
	.long	.LBB68
	.long	.LBE68
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x135d
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -232
	.uleb128 0x32
	.long	.LBB69
	.long	.LBE69
	.uleb128 0x2f
	.string	"field"
	.byte	0x1
	.value	0x138e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -228
	.uleb128 0x30
	.long	.LASF23
	.byte	0x1
	.value	0x138f
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x1390
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -220
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0x1391
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -376
	.uleb128 0x30
	.long	.LASF76
	.byte	0x1
	.value	0x1392
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -368
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x1393
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -216
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x1394
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -212
	.uleb128 0x30
	.long	.LASF83
	.byte	0x1
	.value	0x1395
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -208
	.uleb128 0x31
	.long	0xc010
	.long	.LBB70
	.long	.LBE70
	.uleb128 0x30
	.long	.LASF85
	.byte	0x1
	.value	0x13b6
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -204
	.byte	0x0
	.uleb128 0x32
	.long	.LBB71
	.long	.LBE71
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x13e1
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -200
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xc2e4
	.long	.LBB72
	.long	.LBE72
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x1402
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -196
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1403
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -192
	.uleb128 0x2f
	.string	"need_to_clear"
	.byte	0x1
	.value	0x1404
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -188
	.uleb128 0x30
	.long	.LASF87
	.byte	0x1
	.value	0x1405
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2f
	.string	"elttype"
	.byte	0x1
	.value	0x1406
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x2f
	.string	"const_bounds_p"
	.byte	0x1
	.value	0x1407
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.uleb128 0x2f
	.string	"minelt"
	.byte	0x1
	.value	0x1408
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -360
	.uleb128 0x2f
	.string	"maxelt"
	.byte	0x1
	.value	0x1409
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -352
	.uleb128 0x31
	.long	0xc16b
	.long	.LBB73
	.long	.LBE73
	.uleb128 0x30
	.long	.LASF12
	.byte	0x1
	.value	0x1429
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -344
	.uleb128 0x2f
	.string	"zero_count"
	.byte	0x1
	.value	0x1429
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -336
	.uleb128 0x32
	.long	.LBB74
	.long	.LBE74
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x1433
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.uleb128 0x2f
	.string	"this_node_count"
	.byte	0x1
	.value	0x1434
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x32
	.long	.LBB75
	.long	.LBE75
	.uleb128 0x30
	.long	.LASF88
	.byte	0x1
	.value	0x1438
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x30
	.long	.LASF89
	.byte	0x1
	.value	0x1439
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -164
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.long	.LBB76
	.long	.LBE76
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x146a
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0x146b
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x30
	.long	.LASF76
	.byte	0x1
	.value	0x146c
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x146d
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -240
	.uleb128 0x30
	.long	.LASF23
	.byte	0x1
	.value	0x146e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x146f
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2f
	.string	"xtarget"
	.byte	0x1
	.value	0x1470
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x31
	.long	0xc2c8
	.long	.LBB77
	.long	.LBE77
	.uleb128 0x30
	.long	.LASF88
	.byte	0x1
	.value	0x1480
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x30
	.long	.LASF89
	.byte	0x1
	.value	0x1481
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2f
	.string	"index_r"
	.byte	0x1
	.value	0x1482
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x2f
	.string	"pos_rtx"
	.byte	0x1
	.value	0x1482
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2f
	.string	"hi_r"
	.byte	0x1
	.value	0x1482
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2f
	.string	"loop_top"
	.byte	0x1
	.value	0x1482
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2f
	.string	"loop_end"
	.byte	0x1
	.value	0x1482
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2f
	.string	"loop"
	.byte	0x1
	.value	0x1483
	.long	0xc502
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x2f
	.string	"lo"
	.byte	0x1
	.value	0x1484
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x2f
	.string	"hi"
	.byte	0x1
	.value	0x1484
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x30
	.long	.LASF12
	.byte	0x1
	.value	0x1484
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x30
	.long	.LASF90
	.byte	0x1
	.value	0x1485
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.byte	0x0
	.uleb128 0x32
	.long	.LBB78
	.long	.LBE78
	.uleb128 0x30
	.long	.LASF90
	.byte	0x1
	.value	0x14e1
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xc4e7
	.long	.LBB79
	.long	.LBE79
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x150e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.uleb128 0x2f
	.string	"nbytes"
	.byte	0x1
	.value	0x150f
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x2f
	.string	"nbits"
	.byte	0x1
	.value	0x150f
	.long	0x5e4
	.byte	0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x30
	.long	.LASF87
	.byte	0x1
	.value	0x1510
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2f
	.string	"domain_min"
	.byte	0x1
	.value	0x1511
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"domain_max"
	.byte	0x1
	.value	0x1511
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.string	"bitlength"
	.byte	0x1
	.value	0x1511
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x31
	.long	0xc438
	.long	.LBB80
	.long	.LBE80
	.uleb128 0x2f
	.string	"set_word_size"
	.byte	0x1
	.value	0x1533
	.long	0x537
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x1534
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"bit_buffer"
	.byte	0x1
	.value	0x1535
	.long	0x63c
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.string	"word"
	.byte	0x1
	.value	0x1536
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x2f
	.string	"bit_pos"
	.byte	0x1
	.value	0x1537
	.long	0x537
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"ibit"
	.byte	0x1
	.value	0x1538
	.long	0x537
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x1539
	.long	0x537
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x32
	.long	.LBB81
	.long	.LBE81
	.uleb128 0x2f
	.string	"datum"
	.byte	0x1
	.value	0x154b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x30
	.long	.LASF83
	.byte	0x1
	.value	0x154c
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.long	.LBB82
	.long	.LBE82
	.uleb128 0x2f
	.string	"startbit"
	.byte	0x1
	.value	0x1571
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"endbit"
	.byte	0x1
	.value	0x1573
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"startb"
	.byte	0x1
	.value	0x1574
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x2f
	.string	"endb"
	.byte	0x1
	.value	0x1574
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -248
	.uleb128 0x2f
	.string	"bitlength_rtx"
	.byte	0x1
	.value	0x1575
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"startbit_rtx"
	.byte	0x1
	.value	0x1575
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"endbit_rtx"
	.byte	0x1
	.value	0x1575
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"targetx"
	.byte	0x1
	.value	0x1575
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea47
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.20378
	.byte	0x0
	.uleb128 0x21
	.string	"nesting"
	.byte	0x1
	.uleb128 0x3
	.byte	0x4
	.long	0xc4f8
	.uleb128 0x35
	.long	0xc689
	.string	"store_field"
	.byte	0x1
	.value	0x15dc
	.byte	0x1
	.long	0x99
	.long	.LFB69
	.long	.LFE69
	.long	.LLST54
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x15d3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF75
	.byte	0x1
	.value	0x15d4
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x38
	.long	.LASF76
	.byte	0x1
	.value	0x15d5
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x15d6
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x15d7
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x36
	.string	"value_mode"
	.byte	0x1
	.value	0x15d8
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x15d9
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 32
	.uleb128 0x38
	.long	.LASF3
	.byte	0x1
	.value	0x15da
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 36
	.uleb128 0x38
	.long	.LASF33
	.byte	0x1
	.value	0x15db
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 40
	.uleb128 0x2f
	.string	"width_mask"
	.byte	0x1
	.value	0x15dd
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x31
	.long	0xc606
	.long	.LBB83
	.long	.LBE83
	.uleb128 0x30
	.long	.LASF78
	.byte	0x1
	.value	0x15f7
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"blk_object"
	.byte	0x1
	.value	0x15fb
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.byte	0x0
	.uleb128 0x31
	.long	0xc64b
	.long	.LBB84
	.long	.LBE84
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x1628
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x32
	.long	.LBB85
	.long	.LBE85
	.uleb128 0x30
	.long	.LASF12
	.byte	0x1
	.value	0x1659
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF65
	.byte	0x1
	.value	0x165a
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xc678
	.long	.LBB86
	.long	.LBE86
	.uleb128 0x2f
	.string	"addr"
	.byte	0x1
	.value	0x1672
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF83
	.byte	0x1
	.value	0x1673
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea32
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.21146
	.byte	0x0
	.uleb128 0x37
	.long	0xc85d
	.byte	0x1
	.string	"get_inner_reference"
	.byte	0x1
	.value	0x16b0
	.byte	0x1
	.long	0x1e0
	.long	.LFB70
	.long	.LFE70
	.long	.LLST55
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x16a9
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"pbitsize"
	.byte	0x1
	.value	0x16aa
	.long	0xc85d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"pbitpos"
	.byte	0x1
	.value	0x16ab
	.long	0xc85d
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"poffset"
	.byte	0x1
	.value	0x16ac
	.long	0x5c4d
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x36
	.string	"pmode"
	.byte	0x1
	.value	0x16ad
	.long	0xc863
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x36
	.string	"punsignedp"
	.byte	0x1
	.value	0x16ae
	.long	0x994
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x36
	.string	"pvolatilep"
	.byte	0x1
	.value	0x16af
	.long	0x994
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x30
	.long	.LASF71
	.byte	0x1
	.value	0x16b1
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x16b2
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x16b3
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"bit_offset"
	.byte	0x1
	.value	0x16b4
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"placeholder_ptr"
	.byte	0x1
	.value	0x16b5
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x16b6
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x31
	.long	0xc7e2
	.long	.LBB87
	.long	.LBE87
	.uleb128 0x2f
	.string	"field"
	.byte	0x1
	.value	0x16e2
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"this_offset"
	.byte	0x1
	.value	0x16e3
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.uleb128 0x31
	.long	0xc843
	.long	.LBB88
	.long	.LBE88
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x16f8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"array"
	.byte	0x1
	.value	0x16f9
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF87
	.byte	0x1
	.value	0x16fa
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF91
	.byte	0x1
	.value	0x16fb
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"unit_size"
	.byte	0x1
	.value	0x16fc
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x32
	.long	.LBB89
	.long	.LBE89
	.uleb128 0x2f
	.string	"new"
	.byte	0x1
	.value	0x1718
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.byte	0x4
	.long	0x5d3
	.uleb128 0x3
	.byte	0x4
	.long	0x9bb
	.uleb128 0x37
	.long	0xc8a5
	.byte	0x1
	.string	"handled_component_p"
	.byte	0x1
	.value	0x1747
	.byte	0x1
	.long	0x45e
	.long	.LFB71
	.long	.LFE71
	.long	.LLST56
	.uleb128 0x36
	.string	"t"
	.byte	0x1
	.value	0x1746
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x37
	.long	0xc941
	.byte	0x1
	.string	"force_operand"
	.byte	0x1
	.value	0x1766
	.byte	0x1
	.long	0x99
	.long	.LFB72
	.long	.LFE72
	.long	.LLST57
	.uleb128 0x38
	.long	.LASF23
	.byte	0x1
	.value	0x1765
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x1765
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x1767
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"op2"
	.byte	0x1
	.value	0x1767
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF92
	.byte	0x1
	.value	0x1769
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x176a
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x32
	.long	.LBB90
	.long	.LBE90
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x1799
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xca14
	.byte	0x1
	.long	.LASF49
	.byte	0x1
	.value	0x17ec
	.byte	0x1
	.long	0x45e
	.long	.LFB73
	.long	.LFE73
	.long	.LLST58
	.uleb128 0x36
	.string	"x"
	.byte	0x1
	.value	0x17e9
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x17ea
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"top_p"
	.byte	0x1
	.value	0x17eb
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"exp_rtl"
	.byte	0x1
	.value	0x17ed
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x17ee
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"nops"
	.byte	0x1
	.value	0x17ee
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	0xc9e6
	.long	.LBB91
	.long	.LBE91
	.uleb128 0x2f
	.string	"rtn"
	.byte	0x1
	.value	0x181a
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"t"
	.byte	0x1
	.value	0x181b
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x2f
	.string	"save_expr_list"
	.byte	0x1
	.value	0x17ef
	.long	0x1e0
	.byte	0x5
	.byte	0x3
	.long	save_expr_list.21845
	.uleb128 0x34
	.long	.LASF60
	.long	0xea2d
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.21871
	.byte	0x0
	.uleb128 0x35
	.long	0xca45
	.string	"var_rtx"
	.byte	0x1
	.value	0x18de
	.byte	0x1
	.long	0x99
	.long	.LFB74
	.long	.LFE74
	.long	.LLST59
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x18dd
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.byte	0x0
	.uleb128 0x35
	.long	0xca9e
	.string	"highest_pow2_factor"
	.byte	0x1
	.value	0x1927
	.byte	0x1
	.long	0x5d3
	.long	.LFB75
	.long	.LFE75
	.long	.LLST60
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x1926
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2f
	.string	"c0"
	.byte	0x1
	.value	0x1928
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"c1"
	.byte	0x1
	.value	0x1928
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.uleb128 0x35
	.long	0xcb1b
	.string	"highest_pow2_factor_for_type"
	.byte	0x1
	.value	0x196e
	.byte	0x1
	.long	0x5d3
	.long	.LFB76
	.long	.LFE76
	.long	.LLST61
	.uleb128 0x38
	.long	.LASF3
	.byte	0x1
	.value	0x196c
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x196d
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x2f
	.string	"type_align"
	.byte	0x1
	.value	0x196f
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"factor"
	.byte	0x1
	.value	0x196f
	.long	0x5d3
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x37
	.long	0xcbb3
	.byte	0x1
	.string	"find_placeholder"
	.byte	0x1
	.value	0x1982
	.byte	0x1
	.long	0x1e0
	.long	.LFB77
	.long	.LFE77
	.long	.LLST62
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x1980
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"plist"
	.byte	0x1
	.value	0x1981
	.long	0x5c4d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x1983
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF93
	.byte	0x1
	.value	0x1984
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LBB92
	.long	.LBE92
	.uleb128 0x2f
	.string	"need_type"
	.byte	0x1
	.value	0x198b
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x198c
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.long	0xd927
	.byte	0x1
	.long	.LASF48
	.byte	0x1
	.value	0x19e8
	.byte	0x1
	.long	0x99
	.long	.LFB78
	.long	.LFE78
	.long	.LLST63
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x19e4
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x19e5
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF65
	.byte	0x1
	.value	0x19e6
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"modifier"
	.byte	0x1
	.value	0x19e7
	.long	0x64f0
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x19e9
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -524
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x19e9
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -520
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x19e9
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -516
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x19ea
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -512
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x19eb
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -528
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x19ec
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -508
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x19ed
	.long	0x19ef
	.byte	0x3
	.byte	0x91
	.sleb128 -504
	.uleb128 0x30
	.long	.LASF94
	.byte	0x1
	.value	0x19ee
	.long	0x87e3
	.byte	0x3
	.byte	0x91
	.sleb128 -500
	.uleb128 0x30
	.long	.LASF92
	.byte	0x1
	.value	0x19ef
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -496
	.uleb128 0x2f
	.string	"original_target"
	.byte	0x1
	.value	0x19ef
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -492
	.uleb128 0x2f
	.string	"ignore"
	.byte	0x1
	.value	0x19f0
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -488
	.uleb128 0x30
	.long	.LASF32
	.byte	0x1
	.value	0x19f1
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -484
	.uleb128 0x3b
	.string	"binop2"
	.byte	0x1
	.value	0x255d
	.long	.L3471
	.uleb128 0x3b
	.string	"both_summands"
	.byte	0x1
	.value	0x200b
	.long	.L3472
	.uleb128 0x3b
	.string	"binop"
	.byte	0x1
	.value	0x2558
	.long	.L3540
	.uleb128 0x31
	.long	0xcd4a
	.long	.LBB93
	.long	.LBE93
	.uleb128 0x30
	.long	.LASF35
	.byte	0x1
	.value	0x1a75
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -480
	.uleb128 0x32
	.long	.LBB94
	.long	.LBE94
	.uleb128 0x2f
	.string	"p"
	.byte	0x1
	.value	0x1a7a
	.long	0x512b
	.byte	0x3
	.byte	0x91
	.sleb128 -476
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xcd69
	.long	.LBB95
	.long	.LBE95
	.uleb128 0x2f
	.string	"addr"
	.byte	0x1
	.value	0x1ac1
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -472
	.byte	0x0
	.uleb128 0x31
	.long	0xcd88
	.long	.LBB96
	.long	.LBE96
	.uleb128 0x2f
	.string	"_rtx"
	.byte	0x1
	.value	0x1b06
	.long	0xbd57
	.byte	0x3
	.byte	0x91
	.sleb128 -468
	.byte	0x0
	.uleb128 0x31
	.long	0xcde6
	.long	.LBB97
	.long	.LBE97
	.uleb128 0x2f
	.string	"to_return"
	.byte	0x1
	.value	0x1b44
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -464
	.uleb128 0x2f
	.string	"saved_input_filename"
	.byte	0x1
	.value	0x1b45
	.long	0x44b
	.byte	0x3
	.byte	0x91
	.sleb128 -460
	.uleb128 0x2f
	.string	"saved_lineno"
	.byte	0x1
	.value	0x1b46
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -456
	.byte	0x0
	.uleb128 0x31
	.long	0xce05
	.long	.LBB98
	.long	.LBE98
	.uleb128 0x2f
	.string	"_rtx"
	.byte	0x1
	.value	0x1b8d
	.long	0xbd57
	.byte	0x3
	.byte	0x91
	.sleb128 -452
	.byte	0x0
	.uleb128 0x31
	.long	0xce24
	.long	.LBB99
	.long	.LBE99
	.uleb128 0x2f
	.string	"_rtx"
	.byte	0x1
	.value	0x1ba4
	.long	0xbd57
	.byte	0x3
	.byte	0x91
	.sleb128 -448
	.byte	0x0
	.uleb128 0x31
	.long	0xce42
	.long	.LBB100
	.long	.LBE100
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x1bac
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -444
	.byte	0x0
	.uleb128 0x31
	.long	0xce75
	.long	.LBB101
	.long	.LBE101
	.uleb128 0x2f
	.string	"old_list"
	.byte	0x1
	.value	0x1bb5
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -440
	.uleb128 0x30
	.long	.LASF93
	.byte	0x1
	.value	0x1bb6
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -532
	.byte	0x0
	.uleb128 0x31
	.long	0xceb4
	.long	.LBB102
	.long	.LBE102
	.uleb128 0x2f
	.string	"vars"
	.byte	0x1
	.value	0x1bf1
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -436
	.uleb128 0x2f
	.string	"vars_need_expansion"
	.byte	0x1
	.value	0x1bf2
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -432
	.byte	0x0
	.uleb128 0x31
	.long	0xced2
	.long	.LBB103
	.long	.LBE103
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x1c21
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -428
	.byte	0x0
	.uleb128 0x31
	.long	0xcef8
	.long	.LBB104
	.long	.LBE104
	.uleb128 0x2f
	.string	"constructor"
	.byte	0x1
	.value	0x1c43
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -424
	.byte	0x0
	.uleb128 0x31
	.long	0xcf3a
	.long	.LBB105
	.long	.LBE105
	.uleb128 0x2f
	.string	"exp1"
	.byte	0x1
	.value	0x1c60
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -420
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x1c61
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -532
	.uleb128 0x2f
	.string	"string"
	.byte	0x1
	.value	0x1c62
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -416
	.byte	0x0
	.uleb128 0x31
	.long	0xd01b
	.long	.LBB106
	.long	.LBE106
	.uleb128 0x2f
	.string	"array"
	.byte	0x1
	.value	0x1c82
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -412
	.uleb128 0x30
	.long	.LASF87
	.byte	0x1
	.value	0x1c83
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -408
	.uleb128 0x30
	.long	.LASF91
	.byte	0x1
	.value	0x1c84
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -404
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x1c85
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -400
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x1c86
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -568
	.uleb128 0x31
	.long	0xcfb6
	.long	.LBB107
	.long	.LBE107
	.uleb128 0x2f
	.string	"elem"
	.byte	0x1
	.value	0x1cb2
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -396
	.byte	0x0
	.uleb128 0x32
	.long	.LBB108
	.long	.LBE108
	.uleb128 0x2f
	.string	"init"
	.byte	0x1
	.value	0x1cc8
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -392
	.uleb128 0x31
	.long	0xcfef
	.long	.LBB109
	.long	.LBE109
	.uleb128 0x2f
	.string	"elem"
	.byte	0x1
	.value	0x1ccc
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -388
	.byte	0x0
	.uleb128 0x32
	.long	.LBB110
	.long	.LBE110
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x1cdc
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -384
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x1cdd
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -380
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd07f
	.long	.LBB111
	.long	.LBE111
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x1cf4
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -376
	.uleb128 0x32
	.long	.LBB112
	.long	.LBE112
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0x1d0c
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -560
	.uleb128 0x2f
	.string	"imode"
	.byte	0x1
	.value	0x1d0e
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -372
	.uleb128 0x32
	.long	.LBB113
	.long	.LBE113
	.uleb128 0x30
	.long	.LASF12
	.byte	0x1
	.value	0x1d18
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -368
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd1a5
	.long	.LBB114
	.long	.LBE114
	.uleb128 0x2f
	.string	"mode1"
	.byte	0x1
	.value	0x1d28
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -532
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0x1d29
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -576
	.uleb128 0x30
	.long	.LASF76
	.byte	0x1
	.value	0x1d29
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -584
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x1d2a
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -536
	.uleb128 0x30
	.long	.LASF84
	.byte	0x1
	.value	0x1d2b
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -540
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x1d2c
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -364
	.uleb128 0x2f
	.string	"orig_op0"
	.byte	0x1
	.value	0x1d2e
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -360
	.uleb128 0x31
	.long	0xd121
	.long	.LBB115
	.long	.LBE115
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x1d4b
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -356
	.byte	0x0
	.uleb128 0x31
	.long	0xd16b
	.long	.LBB116
	.long	.LBE116
	.uleb128 0x30
	.long	.LASF85
	.byte	0x1
	.value	0x1d55
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -352
	.uleb128 0x32
	.long	.LBB117
	.long	.LBE117
	.uleb128 0x2f
	.string	"nt"
	.byte	0x1
	.value	0x1d69
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -348
	.uleb128 0x2f
	.string	"memloc"
	.byte	0x1
	.value	0x1d6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -344
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.long	.LBB118
	.long	.LBE118
	.uleb128 0x2f
	.string	"ext_mode"
	.byte	0x1
	.value	0x1dc7
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -340
	.uleb128 0x32
	.long	.LBB119
	.long	.LBE119
	.uleb128 0x2f
	.string	"new"
	.byte	0x1
	.value	0x1dfd
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -336
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd1ec
	.long	.LBB120
	.long	.LBE120
	.uleb128 0x2f
	.string	"insn"
	.byte	0x1
	.value	0x1e2c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -332
	.uleb128 0x2f
	.string	"before"
	.byte	0x1
	.value	0x1e2c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -328
	.uleb128 0x2f
	.string	"vtbl_ref"
	.byte	0x1
	.value	0x1e2c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -324
	.byte	0x0
	.uleb128 0x31
	.long	0xd35d
	.long	.LBB121
	.long	.LBE121
	.uleb128 0x2f
	.string	"set"
	.byte	0x1
	.value	0x1e60
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -320
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x1e61
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -316
	.uleb128 0x2f
	.string	"iunsignedp"
	.byte	0x1
	.value	0x1e62
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -312
	.uleb128 0x2f
	.string	"set_type"
	.byte	0x1
	.value	0x1e63
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -308
	.uleb128 0x2f
	.string	"set_low_bound"
	.byte	0x1
	.value	0x1e64
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -304
	.uleb128 0x2f
	.string	"set_high_bound"
	.byte	0x1
	.value	0x1e65
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -300
	.uleb128 0x2f
	.string	"index_val"
	.byte	0x1
	.value	0x1e66
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -296
	.uleb128 0x2f
	.string	"lo_r"
	.byte	0x1
	.value	0x1e67
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -292
	.uleb128 0x2f
	.string	"hi_r"
	.byte	0x1
	.value	0x1e68
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -288
	.uleb128 0x2f
	.string	"setval"
	.byte	0x1
	.value	0x1e69
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -284
	.uleb128 0x2f
	.string	"setaddr"
	.byte	0x1
	.value	0x1e6a
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -280
	.uleb128 0x30
	.long	.LASF95
	.byte	0x1
	.value	0x1e6b
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -276
	.uleb128 0x2f
	.string	"rlow"
	.byte	0x1
	.value	0x1e6c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -272
	.uleb128 0x2f
	.string	"diff"
	.byte	0x1
	.value	0x1e6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -268
	.uleb128 0x2f
	.string	"quo"
	.byte	0x1
	.value	0x1e6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -264
	.uleb128 0x2f
	.string	"rem"
	.byte	0x1
	.value	0x1e6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -260
	.uleb128 0x2f
	.string	"addr"
	.byte	0x1
	.value	0x1e6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -256
	.uleb128 0x2f
	.string	"bit"
	.byte	0x1
	.value	0x1e6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -252
	.uleb128 0x30
	.long	.LASF38
	.byte	0x1
	.value	0x1e6d
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -248
	.byte	0x0
	.uleb128 0x31
	.long	0xd399
	.long	.LBB122
	.long	.LBE122
	.uleb128 0x2f
	.string	"valtype"
	.byte	0x1
	.value	0x1ef2
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -244
	.uleb128 0x32
	.long	.LBB123
	.long	.LBE123
	.uleb128 0x30
	.long	.LASF38
	.byte	0x1
	.value	0x1ef8
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -240
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd3ce
	.long	.LBB124
	.long	.LBE124
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x1f2f
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -236
	.uleb128 0x2f
	.string	"inner_mode"
	.byte	0x1
	.value	0x1f30
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -232
	.byte	0x0
	.uleb128 0x31
	.long	0xd3ec
	.long	.LBB125
	.long	.LBE125
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x1f5a
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -228
	.byte	0x0
	.uleb128 0x31
	.long	0xd44e
	.long	.LBB126
	.long	.LBE126
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x1f76
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -224
	.uleb128 0x2f
	.string	"temp_size"
	.byte	0x1
	.value	0x1f77
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -552
	.uleb128 0x2f
	.string	"new"
	.byte	0x1
	.value	0x1f7a
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -220
	.uleb128 0x2f
	.string	"new_with_op0_mode"
	.byte	0x1
	.value	0x1f7c
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -216
	.byte	0x0
	.uleb128 0x31
	.long	0xd46a
	.long	.LBB127
	.long	.LBE127
	.uleb128 0x2f
	.string	"t"
	.byte	0x1
	.value	0x1fa8
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -212
	.byte	0x0
	.uleb128 0x31
	.long	0xd488
	.long	.LBB128
	.long	.LBE128
	.uleb128 0x30
	.long	.LASF97
	.byte	0x1
	.value	0x1fbf
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -208
	.byte	0x0
	.uleb128 0x31
	.long	0xd4a6
	.long	.LBB129
	.long	.LBE129
	.uleb128 0x30
	.long	.LASF97
	.byte	0x1
	.value	0x1fd5
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -204
	.byte	0x0
	.uleb128 0x31
	.long	0xd4ce
	.long	.LBB130
	.long	.LBE130
	.uleb128 0x2f
	.string	"constant_term"
	.byte	0x1
	.value	0x2019
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -540
	.byte	0x0
	.uleb128 0x31
	.long	0xd4fc
	.long	.LBB131
	.long	.LBE131
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x2044
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -200
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x2046
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -196
	.byte	0x0
	.uleb128 0x31
	.long	0xd519
	.long	.LBB132
	.long	.LBE132
	.uleb128 0x2f
	.string	"t1"
	.byte	0x1
	.value	0x2072
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -192
	.byte	0x0
	.uleb128 0x31
	.long	0xd538
	.long	.LBB133
	.long	.LBE133
	.uleb128 0x2f
	.string	"exp1"
	.byte	0x1
	.value	0x207d
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -188
	.byte	0x0
	.uleb128 0x31
	.long	0xd589
	.long	.LBB134
	.long	.LBE134
	.uleb128 0x30
	.long	.LASF98
	.byte	0x1
	.value	0x20b6
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -184
	.uleb128 0x2f
	.string	"other_optab"
	.byte	0x1
	.value	0x20b8
	.long	0x87e3
	.byte	0x3
	.byte	0x91
	.sleb128 -180
	.uleb128 0x32
	.long	.LBB135
	.long	.LBE135
	.uleb128 0x2f
	.string	"htem"
	.byte	0x1
	.value	0x20cd
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -176
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd5a7
	.long	.LBB136
	.long	.LBE136
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x217d
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -172
	.byte	0x0
	.uleb128 0x31
	.long	0xd5c7
	.long	.LBB137
	.long	.LBE137
	.uleb128 0x2f
	.string	"mode1"
	.byte	0x1
	.value	0x21ec
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.byte	0x0
	.uleb128 0x31
	.long	0xd5fc
	.long	.LBB138
	.long	.LBE138
	.uleb128 0x2f
	.string	"iftrue"
	.byte	0x1
	.value	0x2232
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -164
	.uleb128 0x2f
	.string	"iffalse"
	.byte	0x1
	.value	0x2233
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.byte	0x0
	.uleb128 0x31
	.long	0xd689
	.long	.LBB139
	.long	.LBE139
	.uleb128 0x2f
	.string	"singleton"
	.byte	0x1
	.value	0x224d
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -156
	.uleb128 0x2f
	.string	"binary_op"
	.byte	0x1
	.value	0x224e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -152
	.uleb128 0x2f
	.string	"unary_op"
	.byte	0x1
	.value	0x224e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.uleb128 0x32
	.long	.LBB140
	.long	.LBE140
	.uleb128 0x30
	.long	.LASF38
	.byte	0x1
	.value	0x22a9
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x2f
	.string	"cond"
	.byte	0x1
	.value	0x22aa
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x2f
	.string	"boptab"
	.byte	0x1
	.value	0x22ab
	.long	0x87e3
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd6ce
	.long	.LBB141
	.long	.LBE141
	.uleb128 0x2f
	.string	"slot"
	.byte	0x1
	.value	0x235c
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x2f
	.string	"cleanups"
	.byte	0x1
	.value	0x235d
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x2f
	.string	"exp1"
	.byte	0x1
	.value	0x235e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.byte	0x0
	.uleb128 0x31
	.long	0xd6fc
	.long	.LBB142
	.long	.LBE142
	.uleb128 0x2f
	.string	"lhs"
	.byte	0x1
	.value	0x23b4
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x2f
	.string	"rhs"
	.byte	0x1
	.value	0x23b5
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.byte	0x0
	.uleb128 0x31
	.long	0xd744
	.long	.LBB143
	.long	.LBE143
	.uleb128 0x2f
	.string	"lhs"
	.byte	0x1
	.value	0x23c5
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x2f
	.string	"rhs"
	.byte	0x1
	.value	0x23c6
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x32
	.long	.LBB144
	.long	.LBE144
	.uleb128 0x30
	.long	.LASF86
	.byte	0x1
	.value	0x23db
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd775
	.long	.LBB145
	.long	.LBE145
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x2440
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x2f
	.string	"memloc"
	.byte	0x1
	.value	0x2441
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.byte	0x0
	.uleb128 0x31
	.long	0xd7a3
	.long	.LBB146
	.long	.LBE146
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x246e
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.uleb128 0x2f
	.string	"new"
	.byte	0x1
	.value	0x246f
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.byte	0x0
	.uleb128 0x31
	.long	0xd7d1
	.long	.LBB147
	.long	.LBE147
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x24a6
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x30
	.long	.LASF39
	.byte	0x1
	.value	0x24a7
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.uleb128 0x31
	.long	0xd817
	.long	.LBB148
	.long	.LBE148
	.uleb128 0x2f
	.string	"partmode"
	.byte	0x1
	.value	0x24cf
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.string	"imag_t"
	.byte	0x1
	.value	0x24d0
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.long	.LASF39
	.byte	0x1
	.value	0x24d1
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x31
	.long	0xd838
	.long	.LBB149
	.long	.LBE149
	.uleb128 0x2f
	.string	"handler"
	.byte	0x1
	.value	0x24f8
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.byte	0x0
	.uleb128 0x31
	.long	0xd8cf
	.long	.LBB150
	.long	.LBE150
	.uleb128 0x2f
	.string	"try_block"
	.byte	0x1
	.value	0x2505
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"finally_block"
	.byte	0x1
	.value	0x2506
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x32
	.long	.LBB151
	.long	.LBE151
	.uleb128 0x2f
	.string	"finally_label"
	.byte	0x1
	.value	0x2515
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"done_label"
	.byte	0x1
	.value	0x2516
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.long	.LASF99
	.byte	0x1
	.value	0x2517
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"cleanup"
	.byte	0x1
	.value	0x2518
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xd916
	.long	.LBB152
	.long	.LBE152
	.uleb128 0x2f
	.string	"subr"
	.byte	0x1
	.value	0x253d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF99
	.byte	0x1
	.value	0x253e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"return_address"
	.byte	0x1
	.value	0x253f
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea28
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.22338
	.byte	0x0
	.uleb128 0x35
	.long	0xd972
	.string	"is_aligning_offset"
	.byte	0x1
	.value	0x256f
	.byte	0x1
	.long	0x45e
	.long	.LFB79
	.long	.LFE79
	.long	.LLST64
	.uleb128 0x38
	.long	.LASF8
	.byte	0x1
	.value	0x256d
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x256e
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.byte	0x0
	.uleb128 0x37
	.long	0xd9ec
	.byte	0x1
	.string	"string_constant"
	.byte	0x1
	.value	0x25a2
	.byte	0x1
	.long	0x1e0
	.long	.LFB80
	.long	.LFE80
	.long	.LLST65
	.uleb128 0x36
	.string	"arg"
	.byte	0x1
	.value	0x25a0
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"ptr_offset"
	.byte	0x1
	.value	0x25a1
	.long	0x5c4d
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x32
	.long	.LBB153
	.long	.LBE153
	.uleb128 0x2f
	.string	"arg0"
	.byte	0x1
	.value	0x25ad
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"arg1"
	.byte	0x1
	.value	0x25ae
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.long	0xdb66
	.string	"expand_increment"
	.byte	0x1
	.value	0x25cc
	.byte	0x1
	.long	0x99
	.long	.LFB81
	.long	.LFE81
	.long	.LLST66
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x25ca
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"post"
	.byte	0x1
	.value	0x25cb
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"ignore"
	.byte	0x1
	.value	0x25cb
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x25cd
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x25cd
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x25ce
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x30
	.long	.LASF23
	.byte	0x1
	.value	0x25ce
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"incremented"
	.byte	0x1
	.value	0x25cf
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.long	.LASF94
	.byte	0x1
	.value	0x25d0
	.long	0x87e3
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x30
	.long	.LASF66
	.byte	0x1
	.value	0x25d1
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x25d2
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"op0_is_copy"
	.byte	0x1
	.value	0x25d3
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"single_insn"
	.byte	0x1
	.value	0x25d4
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"bad_subreg"
	.byte	0x1
	.value	0x25d8
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x31
	.long	0xdb2d
	.long	.LBB154
	.long	.LBE154
	.uleb128 0x2f
	.string	"newexp"
	.byte	0x1
	.value	0x263d
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x32
	.long	.LBB155
	.long	.LBE155
	.uleb128 0x2f
	.string	"addr"
	.byte	0x1
	.value	0x2669
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x266c
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF38
	.byte	0x1
	.value	0x266c
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x33
	.byte	0x1
	.string	"init_pending_stack_adjust"
	.byte	0x1
	.value	0x2696
	.byte	0x1
	.long	.LFB82
	.long	.LFE82
	.long	.LLST67
	.uleb128 0x33
	.byte	0x1
	.string	"clear_pending_stack_adjust"
	.byte	0x1
	.value	0x26a2
	.byte	0x1
	.long	.LFB83
	.long	.LFE83
	.long	.LLST68
	.uleb128 0x33
	.byte	0x1
	.string	"do_pending_stack_adjust"
	.byte	0x1
	.value	0x26b4
	.byte	0x1
	.long	.LFB84
	.long	.LFE84
	.long	.LLST69
	.uleb128 0x2e
	.long	0xdc28
	.byte	0x1
	.string	"jumpifnot"
	.byte	0x1
	.value	0x26c7
	.byte	0x1
	.long	.LFB85
	.long	.LFE85
	.long	.LLST70
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x26c5
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF86
	.byte	0x1
	.value	0x26c6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.byte	0x0
	.uleb128 0x2e
	.long	0xdc64
	.byte	0x1
	.string	"jumpif"
	.byte	0x1
	.value	0x26d1
	.byte	0x1
	.long	.LFB86
	.long	.LFE86
	.long	.LLST71
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x26cf
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF86
	.byte	0x1
	.value	0x26d0
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.byte	0x0
	.uleb128 0x2e
	.long	0xdf9b
	.byte	0x1
	.string	"do_jump"
	.byte	0x1
	.value	0x26e5
	.byte	0x1
	.long	.LFB87
	.long	.LFE87
	.long	.LLST72
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x26e3
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x26e4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x26e4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x26e6
	.long	0x19ef
	.byte	0x3
	.byte	0x91
	.sleb128 -132
	.uleb128 0x30
	.long	.LASF102
	.byte	0x1
	.value	0x26ea
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -128
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x26eb
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -124
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x26ec
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -120
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x26ed
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -116
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x26ee
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -112
	.uleb128 0x3b
	.string	"normal"
	.byte	0x1
	.value	0x289a
	.long	.L4291
	.uleb128 0x3b
	.string	"unordered_bcc"
	.byte	0x1
	.value	0x2863
	.long	.L4397
	.uleb128 0x31
	.long	0xddb0
	.long	.LBB156
	.long	.LBE156
	.uleb128 0x30
	.long	.LASF75
	.byte	0x1
	.value	0x2780
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -160
	.uleb128 0x30
	.long	.LASF76
	.byte	0x1
	.value	0x2780
	.long	0x5d3
	.byte	0x3
	.byte	0x91
	.sleb128 -168
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x2781
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -136
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x2782
	.long	0x9bb
	.byte	0x3
	.byte	0x91
	.sleb128 -140
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x2783
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -108
	.uleb128 0x30
	.long	.LASF8
	.byte	0x1
	.value	0x2784
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -144
	.uleb128 0x30
	.long	.LASF84
	.byte	0x1
	.value	0x2785
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -148
	.byte	0x0
	.uleb128 0x31
	.long	0xddd1
	.long	.LBB157
	.long	.LBE157
	.uleb128 0x2f
	.string	"label1"
	.byte	0x1
	.value	0x27a5
	.long	0x99
	.byte	0x3
	.byte	0x91
	.sleb128 -104
	.byte	0x0
	.uleb128 0x31
	.long	0xde1b
	.long	.LBB158
	.long	.LBE158
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x27bd
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -100
	.uleb128 0x32
	.long	.LBB159
	.long	.LBE159
	.uleb128 0x2f
	.string	"exp0"
	.byte	0x1
	.value	0x27c2
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -96
	.uleb128 0x2f
	.string	"exp1"
	.byte	0x1
	.value	0x27c3
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -92
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xde65
	.long	.LBB160
	.long	.LBE160
	.uleb128 0x30
	.long	.LASF96
	.byte	0x1
	.value	0x27e5
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -88
	.uleb128 0x32
	.long	.LBB161
	.long	.LBE161
	.uleb128 0x2f
	.string	"exp0"
	.byte	0x1
	.value	0x27ea
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -84
	.uleb128 0x2f
	.string	"exp1"
	.byte	0x1
	.value	0x27eb
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xdea7
	.long	.LBB162
	.long	.LBE162
	.uleb128 0x2f
	.string	"cmp"
	.byte	0x1
	.value	0x2832
	.long	0xd70
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.string	"rcmp"
	.byte	0x1
	.value	0x2832
	.long	0xd70
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x2f
	.string	"do_rev"
	.byte	0x1
	.value	0x2833
	.long	0x45e
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.byte	0x0
	.uleb128 0x31
	.long	0xdf21
	.long	.LBB163
	.long	.LBE163
	.uleb128 0x2f
	.string	"rcode1"
	.byte	0x1
	.value	0x284b
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"tcode2"
	.byte	0x1
	.value	0x284c
	.long	0x19ef
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x32
	.long	.LBB164
	.long	.LBE164
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x286a
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x286b
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"cmp0"
	.byte	0x1
	.value	0x286c
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"cmp1"
	.byte	0x1
	.value	0x286c
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xdf6d
	.long	.LBB165
	.long	.LBE165
	.uleb128 0x2f
	.string	"fndecl"
	.byte	0x1
	.value	0x2884
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"arglist"
	.byte	0x1
	.value	0x2885
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x32
	.long	.LBB166
	.long	.LBE166
	.uleb128 0x2f
	.string	"seq"
	.byte	0x1
	.value	0x288d
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.long	0xdf8a
	.long	.LBB167
	.long	.LBE167
	.uleb128 0x30
	.long	.LASF81
	.byte	0x1
	.value	0x28ad
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea13
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.26905
	.byte	0x0
	.uleb128 0x3a
	.long	0xe043
	.string	"do_jump_by_parts_greater"
	.byte	0x1
	.value	0x28d2
	.byte	0x1
	.long	.LFB88
	.long	.LFE88
	.long	.LLST73
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x28cf
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"swap"
	.byte	0x1
	.value	0x28d0
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x28d1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x28d1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x28d3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x28d4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x28d5
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x28d6
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0xe12e
	.byte	0x1
	.string	"do_jump_by_parts_greater_rtx"
	.byte	0x1
	.value	0x28e5
	.byte	0x1
	.long	.LFB89
	.long	.LFE89
	.long	.LLST74
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x28e1
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x28e2
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"op0"
	.byte	0x1
	.value	0x28e3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"op1"
	.byte	0x1
	.value	0x28e3
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x28e4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x28e4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x30
	.long	.LASF62
	.byte	0x1
	.value	0x28e6
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF102
	.byte	0x1
	.value	0x28e7
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x28e8
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LBB168
	.long	.LBE168
	.uleb128 0x2f
	.string	"op0_word"
	.byte	0x1
	.value	0x28f4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"op1_word"
	.byte	0x1
	.value	0x28f4
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x3a
	.long	0xe1e3
	.string	"do_jump_by_parts_equality"
	.byte	0x1
	.value	0x2918
	.byte	0x1
	.long	.LFB90
	.long	.LFE90
	.long	.LLST75
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x2916
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x2917
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x2917
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x2919
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x291a
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x291b
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF62
	.byte	0x1
	.value	0x291c
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x291d
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF102
	.byte	0x1
	.value	0x291e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x2e
	.long	0xe280
	.byte	0x1
	.string	"do_jump_by_parts_equality_rtx"
	.byte	0x1
	.value	0x2937
	.byte	0x1
	.long	.LFB91
	.long	.LFE91
	.long	.LLST76
	.uleb128 0x36
	.string	"op0"
	.byte	0x1
	.value	0x2935
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x2936
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x2936
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x30
	.long	.LASF62
	.byte	0x1
	.value	0x2938
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"part"
	.byte	0x1
	.value	0x2939
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x293a
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF102
	.byte	0x1
	.value	0x293b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x37
	.long	0xe326
	.byte	0x1
	.string	"compare_from_rtx"
	.byte	0x1
	.value	0x2973
	.byte	0x1
	.long	0x99
	.long	.LFB92
	.long	.LFE92
	.long	.LLST77
	.uleb128 0x36
	.string	"op0"
	.byte	0x1
	.value	0x296e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"op1"
	.byte	0x1
	.value	0x296e
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF0
	.byte	0x1
	.value	0x296f
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x2970
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x2971
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x2972
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x2f
	.string	"ucode"
	.byte	0x1
	.value	0x2974
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x2975
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x2e
	.long	0xe409
	.byte	0x1
	.string	"do_compare_rtx_and_jump"
	.byte	0x1
	.value	0x29bc
	.byte	0x1
	.long	.LFB93
	.long	.LFE93
	.long	.LLST78
	.uleb128 0x36
	.string	"op0"
	.byte	0x1
	.value	0x29b6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"op1"
	.byte	0x1
	.value	0x29b6
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF0
	.byte	0x1
	.value	0x29b7
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF41
	.byte	0x1
	.value	0x29b8
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x29b9
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x38
	.long	.LASF9
	.byte	0x1
	.value	0x29ba
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x29bb
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 24
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x29bb
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 28
	.uleb128 0x2f
	.string	"ucode"
	.byte	0x1
	.value	0x29bd
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x29be
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"dummy_true_label"
	.byte	0x1
	.value	0x29bf
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x3a
	.long	0xe4ea
	.string	"do_compare_and_jump"
	.byte	0x1
	.value	0x2a22
	.byte	0x1
	.long	.LFB94
	.long	.LFE94
	.long	.LLST79
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x2a1f
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x36
	.string	"signed_code"
	.byte	0x1
	.value	0x2a20
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"unsigned_code"
	.byte	0x1
	.value	0x2a20
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF100
	.byte	0x1
	.value	0x2a21
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF101
	.byte	0x1
	.value	0x2a21
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x2a23
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x2a23
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x2a24
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x2a25
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x2a26
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x2a27
	.long	0xd70
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x35
	.long	0xe691
	.string	"do_store_flag"
	.byte	0x1
	.value	0x2a7f
	.byte	0x1
	.long	0x99
	.long	.LFB95
	.long	.LFE95
	.long	.LLST80
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x2a7b
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF81
	.byte	0x1
	.value	0x2a7c
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x2a7d
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"only_cheap"
	.byte	0x1
	.value	0x2a7e
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x30
	.long	.LASF0
	.byte	0x1
	.value	0x2a80
	.long	0xd70
	.byte	0x3
	.byte	0x91
	.sleb128 -80
	.uleb128 0x2f
	.string	"arg0"
	.byte	0x1
	.value	0x2a81
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -76
	.uleb128 0x2f
	.string	"arg1"
	.byte	0x1
	.value	0x2a81
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -72
	.uleb128 0x30
	.long	.LASF3
	.byte	0x1
	.value	0x2a81
	.long	0x1e0
	.byte	0x3
	.byte	0x91
	.sleb128 -68
	.uleb128 0x2f
	.string	"tem"
	.byte	0x1
	.value	0x2a82
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -64
	.uleb128 0x2f
	.string	"operand_mode"
	.byte	0x1
	.value	0x2a83
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -60
	.uleb128 0x2f
	.string	"invert"
	.byte	0x1
	.value	0x2a84
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -56
	.uleb128 0x30
	.long	.LASF41
	.byte	0x1
	.value	0x2a85
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -52
	.uleb128 0x2f
	.string	"op0"
	.byte	0x1
	.value	0x2a86
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x2a86
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x30
	.long	.LASF66
	.byte	0x1
	.value	0x2a87
	.long	0x660b
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x30
	.long	.LASF92
	.byte	0x1
	.value	0x2a88
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x30
	.long	.LASF38
	.byte	0x1
	.value	0x2a89
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF86
	.byte	0x1
	.value	0x2a89
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x31
	.long	0xe680
	.long	.LBB169
	.long	.LBE169
	.uleb128 0x30
	.long	.LASF40
	.byte	0x1
	.value	0x2b06
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"bitnum"
	.byte	0x1
	.value	0x2b07
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"ops_unsignedp"
	.byte	0x1
	.value	0x2b08
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.uleb128 0x34
	.long	.LASF60
	.long	0xea0e
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	__FUNCTION__.27625
	.byte	0x0
	.uleb128 0x3d
	.byte	0x1
	.string	"case_values_threshold"
	.byte	0x1
	.value	0x2ba2
	.byte	0x1
	.long	0x537
	.long	.LFB96
	.long	.LFE96
	.long	.LLST81
	.uleb128 0x37
	.long	0xe7d3
	.byte	0x1
	.string	"try_casesi"
	.byte	0x1
	.value	0x2bae
	.byte	0x1
	.long	0x45e
	.long	.LFB97
	.long	.LFE97
	.long	.LLST82
	.uleb128 0x38
	.long	.LASF103
	.byte	0x1
	.value	0x2bab
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF104
	.byte	0x1
	.value	0x2bab
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF31
	.byte	0x1
	.value	0x2bab
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"range"
	.byte	0x1
	.value	0x2bab
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF105
	.byte	0x1
	.value	0x2bac
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x38
	.long	.LASF106
	.byte	0x1
	.value	0x2bad
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x30
	.long	.LASF95
	.byte	0x1
	.value	0x2baf
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"index_bits"
	.byte	0x1
	.value	0x2bb0
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"op1"
	.byte	0x1
	.value	0x2bb1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"op2"
	.byte	0x1
	.value	0x2bb1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x2bb1
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x2f
	.string	"op_mode"
	.byte	0x1
	.value	0x2bb2
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x32
	.long	.LBB170
	.long	.LBE170
	.uleb128 0x2f
	.string	"omode"
	.byte	0x1
	.value	0x2bba
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.uleb128 0x2f
	.string	"rangertx"
	.byte	0x1
	.value	0x2bbb
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.byte	0x0
	.byte	0x0
	.uleb128 0x3a
	.long	0xe864
	.string	"do_tablejump"
	.byte	0x1
	.value	0x2c07
	.byte	0x1
	.long	.LFB98
	.long	.LFE98
	.long	.LLST83
	.uleb128 0x38
	.long	.LASF11
	.byte	0x1
	.value	0x2c05
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x2c06
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x36
	.string	"range"
	.byte	0x1
	.value	0x2c05
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x38
	.long	.LASF105
	.byte	0x1
	.value	0x2c05
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF106
	.byte	0x1
	.value	0x2c05
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x30
	.long	.LASF61
	.byte	0x1
	.value	0x2c08
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.uleb128 0x2f
	.string	"vector"
	.byte	0x1
	.value	0x2c08
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x37
	.long	0xe8f8
	.byte	0x1
	.string	"try_tablejump"
	.byte	0x1
	.value	0x2c4a
	.byte	0x1
	.long	0x45e
	.long	.LFB99
	.long	.LFE99
	.long	.LLST84
	.uleb128 0x38
	.long	.LASF103
	.byte	0x1
	.value	0x2c48
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x38
	.long	.LASF104
	.byte	0x1
	.value	0x2c48
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 4
	.uleb128 0x38
	.long	.LASF31
	.byte	0x1
	.value	0x2c48
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 8
	.uleb128 0x36
	.string	"range"
	.byte	0x1
	.value	0x2c48
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 12
	.uleb128 0x38
	.long	.LASF105
	.byte	0x1
	.value	0x2c49
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 16
	.uleb128 0x38
	.long	.LASF106
	.byte	0x1
	.value	0x2c49
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 20
	.uleb128 0x30
	.long	.LASF11
	.byte	0x1
	.value	0x2c4b
	.long	0x99
	.byte	0x2
	.byte	0x91
	.sleb128 -20
	.byte	0x0
	.uleb128 0x37
	.long	0xe956
	.byte	0x1
	.string	"vector_mode_valid_p"
	.byte	0x1
	.value	0x2c69
	.byte	0x1
	.long	0x45e
	.long	.LFB100
	.long	.LFE100
	.long	.LLST85
	.uleb128 0x38
	.long	.LASF1
	.byte	0x1
	.value	0x2c68
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2f
	.string	"class"
	.byte	0x1
	.value	0x2c6a
	.long	0xc04
	.byte	0x2
	.byte	0x91
	.sleb128 -16
	.uleb128 0x30
	.long	.LASF98
	.byte	0x1
	.value	0x2c6b
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -12
	.byte	0x0
	.uleb128 0x35
	.long	0xe9fe
	.string	"const_vector_from_tree"
	.byte	0x1
	.value	0x2c84
	.byte	0x1
	.long	0x99
	.long	.LFB101
	.long	.LFE101
	.long	.LLST86
	.uleb128 0x36
	.string	"exp"
	.byte	0x1
	.value	0x2c83
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 0
	.uleb128 0x2f
	.string	"v"
	.byte	0x1
	.value	0x2c85
	.long	0x198
	.byte	0x2
	.byte	0x91
	.sleb128 -48
	.uleb128 0x2f
	.string	"units"
	.byte	0x1
	.value	0x2c86
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x2f
	.string	"i"
	.byte	0x1
	.value	0x2c86
	.long	0x45e
	.byte	0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x2f
	.string	"link"
	.byte	0x1
	.value	0x2c87
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x2f
	.string	"elt"
	.byte	0x1
	.value	0x2c87
	.long	0x1e0
	.byte	0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x30
	.long	.LASF40
	.byte	0x1
	.value	0x2c88
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -28
	.uleb128 0x30
	.long	.LASF1
	.byte	0x1
	.value	0x2c88
	.long	0x9bb
	.byte	0x2
	.byte	0x91
	.sleb128 -24
	.byte	0x0
	.uleb128 0x12
	.long	0xea0e
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xd
	.byte	0x0
	.uleb128 0xd
	.long	0xe9fe
	.uleb128 0xd
	.long	0x96f
	.uleb128 0x12
	.long	0xea28
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xb
	.byte	0x0
	.uleb128 0xd
	.long	0xea18
	.uleb128 0xd
	.long	0xea18
	.uleb128 0xd
	.long	0xea18
	.uleb128 0x12
	.long	0xea47
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x11
	.byte	0x0
	.uleb128 0xd
	.long	0xea37
	.uleb128 0x12
	.long	0xea5c
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xa
	.byte	0x0
	.uleb128 0xd
	.long	0xea4c
	.uleb128 0xd
	.long	0xea37
	.uleb128 0x12
	.long	0xea76
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xe
	.byte	0x0
	.uleb128 0xd
	.long	0xea66
	.uleb128 0x12
	.long	0xea8b
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x10
	.byte	0x0
	.uleb128 0xd
	.long	0xea7b
	.uleb128 0xd
	.long	0xea66
	.uleb128 0xd
	.long	0xea37
	.uleb128 0x12
	.long	0xeaaa
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xf
	.byte	0x0
	.uleb128 0xd
	.long	0xea9a
	.uleb128 0xd
	.long	0x97f
	.uleb128 0x12
	.long	0xeac4
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x8
	.byte	0x0
	.uleb128 0xd
	.long	0xeab4
	.uleb128 0xd
	.long	0x96f
	.uleb128 0xd
	.long	0xea7b
	.uleb128 0xd
	.long	0xea9a
	.uleb128 0xd
	.long	0xea9a
	.uleb128 0xd
	.long	0xe9fe
	.uleb128 0xd
	.long	0x97f
	.uleb128 0x12
	.long	0xeaf7
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x25
	.byte	0x0
	.uleb128 0xd
	.long	0xeae7
	.uleb128 0xd
	.long	0xea9a
	.uleb128 0xd
	.long	0xea7b
	.uleb128 0x12
	.long	0xeb16
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x15
	.byte	0x0
	.uleb128 0xd
	.long	0xeb06
	.uleb128 0xd
	.long	0xea66
	.uleb128 0xd
	.long	0xe9fe
	.uleb128 0x12
	.long	0xeb35
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xc
	.byte	0x0
	.uleb128 0xd
	.long	0xeb25
	.uleb128 0x12
	.long	0xeb4a
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x18
	.byte	0x0
	.uleb128 0xd
	.long	0xeb3a
	.uleb128 0x3e
	.string	"placeholder_list"
	.byte	0x1
	.byte	0x6e
	.long	0x1e0
	.byte	0x5
	.byte	0x3
	.long	placeholder_list
	.uleb128 0x12
	.long	0xeb7d
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x3e
	.string	"direct_load"
	.byte	0x1
	.byte	0xc8
	.long	0xeb6d
	.byte	0x5
	.byte	0x3
	.long	direct_load
	.uleb128 0x3e
	.string	"direct_store"
	.byte	0x1
	.byte	0xc9
	.long	0xeb6d
	.byte	0x5
	.byte	0x3
	.long	direct_store
	.uleb128 0x12
	.long	0xebc6
	.long	0xd67
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x3e
	.string	"float_extend_from_mem"
	.byte	0x1
	.byte	0xcd
	.long	0xebb0
	.byte	0x5
	.byte	0x3
	.long	float_extend_from_mem
	.uleb128 0x2f
	.string	"block_move_fn"
	.byte	0x1
	.value	0x80c
	.long	0x1e0
	.byte	0x5
	.byte	0x3
	.long	block_move_fn
	.uleb128 0x2f
	.string	"block_clear_fn"
	.byte	0x1
	.value	0xc92
	.long	0x1e0
	.byte	0x5
	.byte	0x3
	.long	block_clear_fn
	.uleb128 0x3f
	.string	"target_flags"
	.byte	0xb
	.byte	0x21
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x3f
	.string	"mips_tune"
	.byte	0xb
	.byte	0xa4
	.long	0x2cb
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"mips_abi"
	.byte	0xb
	.value	0x3ca
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xec6f
	.long	0x456
	.uleb128 0x41
	.uleb128 0x13
	.long	0x54e
	.byte	0xaf
	.byte	0x0
	.uleb128 0x40
	.string	"mips_hard_regno_mode_ok"
	.byte	0xb
	.value	0x778
	.long	0xec5e
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xeca1
	.long	0xc04
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x42
	.long	.LASF6
	.byte	0x4
	.byte	0x34
	.long	0xecae
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xec91
	.uleb128 0x12
	.long	0xecc3
	.long	0x57b
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x3f
	.string	"mode_size"
	.byte	0x4
	.byte	0x59
	.long	0xecd6
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xecb3
	.uleb128 0x3f
	.string	"mode_unit_size"
	.byte	0x4
	.byte	0x5e
	.long	0xecf3
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xecb3
	.uleb128 0x12
	.long	0xed08
	.long	0x58c
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x3f
	.string	"mode_bitsize"
	.byte	0x4
	.byte	0x69
	.long	0xed1e
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xecf8
	.uleb128 0x12
	.long	0xed33
	.long	0x5e4
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x3f
	.string	"mode_mask_array"
	.byte	0x4
	.byte	0x73
	.long	0xed4c
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xed23
	.uleb128 0x12
	.long	0xed61
	.long	0x9bb
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x3f
	.string	"inner_mode_array"
	.byte	0x4
	.byte	0x77
	.long	0xed7b
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xed51
	.uleb128 0x3f
	.string	"mode_wider_mode"
	.byte	0x4
	.byte	0x84
	.long	0xed99
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xecb3
	.uleb128 0x12
	.long	0xedae
	.long	0x9bb
	.uleb128 0x13
	.long	0x54e
	.byte	0x8
	.byte	0x0
	.uleb128 0x3f
	.string	"class_narrowest_mode"
	.byte	0x4
	.byte	0xa6
	.long	0xedcc
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xed9e
	.uleb128 0x3f
	.string	"byte_mode"
	.byte	0x4
	.byte	0xac
	.long	0x9bb
	.byte	0x1
	.byte	0x1
	.uleb128 0x3f
	.string	"word_mode"
	.byte	0x4
	.byte	0xad
	.long	0x9bb
	.byte	0x1
	.byte	0x1
	.uleb128 0x3f
	.string	"ptr_mode"
	.byte	0x4
	.byte	0xae
	.long	0x9bb
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"dconst0"
	.byte	0x7
	.value	0x14f
	.long	0xcf9
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"dconst1"
	.byte	0x7
	.value	0x150
	.long	0xcf9
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xee3d
	.long	0x456
	.uleb128 0x13
	.long	0x54e
	.byte	0xa2
	.byte	0x0
	.uleb128 0x3f
	.string	"rtx_class"
	.byte	0x3
	.byte	0x45
	.long	0xee50
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xee2d
	.uleb128 0x12
	.long	0xee65
	.long	0x99
	.uleb128 0x13
	.long	0x54e
	.byte	0x80
	.byte	0x0
	.uleb128 0x40
	.string	"const_int_rtx"
	.byte	0x3
	.value	0x6a4
	.long	0xee55
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"const_true_rtx"
	.byte	0x3
	.value	0x6aa
	.long	0x99
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xeeac
	.long	0x99
	.uleb128 0x13
	.long	0x54e
	.byte	0x2
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x40
	.string	"const_tiny_rtx"
	.byte	0x3
	.value	0x6ac
	.long	0xee96
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xeed5
	.long	0x99
	.uleb128 0x13
	.long	0x54e
	.byte	0xa
	.byte	0x0
	.uleb128 0x40
	.string	"global_rtl"
	.byte	0x3
	.value	0x6e5
	.long	0xeec5
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"pic_offset_table_rtx"
	.byte	0x3
	.value	0x6f3
	.long	0x99
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"reload_completed"
	.byte	0x3
	.value	0x763
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"reload_in_progress"
	.byte	0x3
	.value	0x768
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x43
	.string	"cse_not_expected"
	.byte	0x1
	.byte	0x6b
	.long	0x45e
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	cse_not_expected
	.uleb128 0x12
	.long	0xef6b
	.long	0x456
	.uleb128 0x41
	.byte	0x0
	.uleb128 0x3f
	.string	"tree_code_type"
	.byte	0x6
	.byte	0x45
	.long	0xef83
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xef60
	.uleb128 0x12
	.long	0xef98
	.long	0x1e0
	.uleb128 0x13
	.long	0x54e
	.byte	0x3a
	.byte	0x0
	.uleb128 0x40
	.string	"global_trees"
	.byte	0x6
	.value	0x8b5
	.long	0xef88
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xefbf
	.long	0x1e0
	.uleb128 0x13
	.long	0x54e
	.byte	0xa
	.byte	0x0
	.uleb128 0x40
	.string	"integer_types"
	.byte	0x6
	.value	0x91d
	.long	0xefaf
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xefe7
	.long	0x1e0
	.uleb128 0x13
	.long	0x54e
	.byte	0x5
	.byte	0x0
	.uleb128 0x40
	.string	"sizetype_tab"
	.byte	0x6
	.value	0xad1
	.long	0xefd7
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"input_filename"
	.byte	0x6
	.value	0xbb7
	.long	0x44b
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"lineno"
	.byte	0x6
	.value	0xbba
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"current_function_decl"
	.byte	0x6
	.value	0xbc8
	.long	0x1e0
	.byte	0x1
	.byte	0x1
	.uleb128 0x3f
	.string	"optimize"
	.byte	0x13
	.byte	0x43
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x3f
	.string	"optimize_size"
	.byte	0x13
	.byte	0x47
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_force_mem"
	.byte	0x13
	.value	0x108
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_force_addr"
	.byte	0x13
	.value	0x10d
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_omit_frame_pointer"
	.byte	0x13
	.value	0x153
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_unsafe_math_optimizations"
	.byte	0x13
	.value	0x173
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_inline_functions"
	.byte	0x13
	.value	0x18c
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_no_inline"
	.byte	0x13
	.value	0x19a
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_pic"
	.byte	0x13
	.value	0x1df
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"flag_trapv"
	.byte	0x13
	.value	0x26a
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"cfun"
	.byte	0xa
	.value	0x202
	.long	0x512b
	.byte	0x1
	.byte	0x1
	.uleb128 0x40
	.string	"inline_function_decl"
	.byte	0xa
	.value	0x245
	.long	0x1e0
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xf18e
	.long	0x87e3
	.uleb128 0x13
	.long	0x54e
	.byte	0x32
	.byte	0x0
	.uleb128 0x3f
	.string	"optab_table"
	.byte	0x12
	.byte	0xa0
	.long	0xf17e
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xf1b3
	.long	0x87f6
	.uleb128 0x13
	.long	0x54e
	.byte	0xa2
	.byte	0x0
	.uleb128 0x3f
	.string	"bcc_gen_fctn"
	.byte	0x12
	.byte	0xf2
	.long	0xf1a3
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xf1d9
	.long	0x660b
	.uleb128 0x13
	.long	0x54e
	.byte	0xa2
	.byte	0x0
	.uleb128 0x3f
	.string	"setcc_gen_code"
	.byte	0x12
	.byte	0xf8
	.long	0xf1c9
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xf201
	.long	0x660b
	.uleb128 0x13
	.long	0x54e
	.byte	0x35
	.byte	0x0
	.uleb128 0x43
	.string	"movstr_optab"
	.byte	0x1
	.byte	0xf6
	.long	0xf1f1
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	movstr_optab
	.uleb128 0x43
	.string	"clrstr_optab"
	.byte	0x1
	.byte	0xf9
	.long	0xf1f1
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	clrstr_optab
	.uleb128 0x12
	.long	0xf247
	.long	0x99
	.uleb128 0x13
	.long	0x54e
	.byte	0x60
	.byte	0x0
	.uleb128 0x3f
	.string	"libfunc_table"
	.byte	0x14
	.byte	0x97
	.long	0xf237
	.byte	0x1
	.byte	0x1
	.uleb128 0x3f
	.string	"volatile_ok"
	.byte	0x11
	.byte	0x92
	.long	0x45e
	.byte	0x1
	.byte	0x1
	.uleb128 0x12
	.long	0xf27e
	.long	0x8909
	.uleb128 0x41
	.byte	0x0
	.uleb128 0x42
	.long	.LASF45
	.byte	0x11
	.byte	0xfe
	.long	0xf28b
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0xf273
	.uleb128 0x44
	.long	.LASF47
	.byte	0x15
	.value	0x176
	.long	0xf29e
	.byte	0x1
	.byte	0x1
	.uleb128 0xd
	.long	0x90e4
	.uleb128 0x12
	.long	0xf2b3
	.long	0x89c1
	.uleb128 0x13
	.long	0x54e
	.byte	0x2
	.byte	0x0
	.uleb128 0x43
	.string	"gt_ggc_r_gt_expr_h"
	.byte	0x1a
	.byte	0x19
	.long	0xf2d4
	.byte	0x1
	.byte	0x5
	.byte	0x3
	.long	gt_ggc_r_gt_expr_h
	.uleb128 0xd
	.long	0xf2a3
	.byte	0x0
	.section	.debug_abbrev
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x10
	.uleb128 0x6
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x25
	.uleb128 0x8
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1b
	.uleb128 0x8
	.byte	0x0
	.byte	0x0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xf
	.byte	0x0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x4
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x5
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x6
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x8
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x9
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xb
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0xc
	.uleb128 0x28
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x1c
	.uleb128 0xd
	.byte	0x0
	.byte	0x0
	.uleb128 0xd
	.uleb128 0x26
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0xe
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0xf
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x10
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x11
	.uleb128 0x24
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x13
	.uleb128 0x21
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x14
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x15
	.uleb128 0xf
	.byte	0x0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x16
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x17
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x27
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x19
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x1a
	.uleb128 0x26
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x1b
	.uleb128 0x15
	.byte	0x0
	.uleb128 0x27
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x1c
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x1d
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x1e
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x1f
	.uleb128 0x16
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x20
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x21
	.uleb128 0x13
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x22
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x23
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x24
	.uleb128 0xd
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0xd
	.uleb128 0xb
	.uleb128 0xc
	.uleb128 0xb
	.uleb128 0x38
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x25
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x26
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x27
	.uleb128 0x17
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x28
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x29
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x2a
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x2b
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0x0
	.byte	0x0
	.uleb128 0x2c
	.uleb128 0x18
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x2d
	.uleb128 0x15
	.byte	0x0
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.byte	0x0
	.byte	0x0
	.uleb128 0x2e
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x2f
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x30
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x31
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x32
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x33
	.uleb128 0x2e
	.byte	0x0
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x34
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0xc
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x35
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x36
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x37
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x38
	.uleb128 0x5
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x39
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x3a
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x3b
	.uleb128 0xa
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.byte	0x0
	.byte	0x0
	.uleb128 0x3c
	.uleb128 0x4
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0x0
	.byte	0x0
	.uleb128 0x3d
	.uleb128 0x2e
	.byte	0x0
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x27
	.uleb128 0xc
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x1
	.uleb128 0x40
	.uleb128 0x6
	.byte	0x0
	.byte	0x0
	.uleb128 0x3e
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x3f
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x40
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x41
	.uleb128 0x21
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.uleb128 0x42
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.uleb128 0x43
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x2
	.uleb128 0xa
	.byte	0x0
	.byte	0x0
	.uleb128 0x44
	.uleb128 0x34
	.byte	0x0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0xc
	.uleb128 0x3c
	.uleb128 0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.section	.debug_pubnames,"",@progbits
	.long	0x4b8
	.value	0x2
	.long	.Ldebug_info0
	.long	0xf2da
	.long	0x975d
	.string	"init_expr_once"
	.long	0x9849
	.string	"init_expr"
	.long	0x9865
	.string	"finish_expr_for_function"
	.long	0x98eb
	.string	"protect_from_queue"
	.long	0x99d1
	.string	"queued_subexp_p"
	.long	0x9a18
	.string	"emit_queue"
	.long	0x9a61
	.string	"convert_move"
	.long	0x9ca3
	.string	"convert_to_mode"
	.long	0x9cf9
	.string	"convert_modes"
	.long	0x9de5
	.string	"can_move_by_pieces"
	.long	0x9e31
	.string	"move_by_pieces"
	.long	0xa086
	.string	"emit_block_move"
	.long	0xa433
	.string	"init_block_move_fn"
	.long	0xa5d7
	.string	"move_block_to_reg"
	.long	0xa649
	.string	"move_block_from_reg"
	.long	0xa727
	.string	"gen_group_rtx"
	.long	0xa7c8
	.string	"emit_group_load"
	.long	0xa90c
	.string	"emit_group_move"
	.long	0xa96e
	.string	"emit_group_store"
	.long	0xaac3
	.string	"copy_blkmode_from_reg"
	.long	0xaba9
	.string	"use_reg"
	.long	0xabf6
	.string	"use_regs"
	.long	0xac62
	.string	"use_group_regs"
	.long	0xaccd
	.string	"can_store_by_pieces"
	.long	0xaddc
	.string	"store_by_pieces"
	.long	0xb076
	.string	"clear_storage"
	.long	0xb280
	.string	"init_block_clear_fn"
	.long	0xb33a
	.string	"emit_move_insn"
	.long	0xb3bd
	.string	"emit_move_insn_1"
	.long	0xb6f9
	.string	"push_block"
	.long	0xb75f
	.string	"emit_push_insn"
	.long	0xba03
	.string	"expand_assignment"
	.long	0xbbbb
	.string	"store_expr"
	.long	0xc689
	.string	"get_inner_reference"
	.long	0xc869
	.string	"handled_component_p"
	.long	0xc8a5
	.string	"force_operand"
	.long	0xc941
	.string	"safe_from_p"
	.long	0xcb1b
	.string	"find_placeholder"
	.long	0xcbb3
	.string	"expand_expr"
	.long	0xd972
	.string	"string_constant"
	.long	0xdb66
	.string	"init_pending_stack_adjust"
	.long	0xdb92
	.string	"clear_pending_stack_adjust"
	.long	0xdbbf
	.string	"do_pending_stack_adjust"
	.long	0xdbe9
	.string	"jumpifnot"
	.long	0xdc28
	.string	"jumpif"
	.long	0xdc64
	.string	"do_jump"
	.long	0xe043
	.string	"do_jump_by_parts_greater_rtx"
	.long	0xe1e3
	.string	"do_jump_by_parts_equality_rtx"
	.long	0xe280
	.string	"compare_from_rtx"
	.long	0xe326
	.string	"do_compare_rtx_and_jump"
	.long	0xe691
	.string	"case_values_threshold"
	.long	0xe6bd
	.string	"try_casesi"
	.long	0xe864
	.string	"try_tablejump"
	.long	0xe8f8
	.string	"vector_mode_valid_p"
	.long	0xef41
	.string	"cse_not_expected"
	.long	0xf201
	.string	"movstr_optab"
	.long	0xf21c
	.string	"clrstr_optab"
	.long	0xf2b3
	.string	"gt_ggc_r_gt_expr_h"
	.long	0x0
	.section	.debug_aranges,"",@progbits
	.long	0x1c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x4
	.byte	0x0
	.value	0x0
	.value	0x0
	.long	.Ltext0
	.long	.Letext0-.Ltext0
	.long	0x0
	.long	0x0
	.section	.debug_str,"",@progbits
.LASF12:
	.string	"count"
.LASF96:
	.string	"inner_type"
.LASF30:
	.string	"name"
.LASF38:
	.string	"result"
.LASF101:
	.string	"if_true_label"
.LASF45:
	.string	"insn_data"
.LASF14:
	.string	"lang_flag_0"
.LASF15:
	.string	"lang_flag_1"
.LASF16:
	.string	"lang_flag_2"
.LASF20:
	.string	"lang_flag_6"
.LASF86:
	.string	"label"
.LASF59:
	.string	"regno"
.LASF32:
	.string	"context"
.LASF103:
	.string	"index_type"
.LASF7:
	.string	"mem_attrs"
.LASF64:
	.string	"max_size"
.LASF78:
	.string	"object"
.LASF33:
	.string	"alias_set"
.LASF79:
	.string	"last_insn"
.LASF85:
	.string	"offset_rtx"
.LASF54:
	.string	"from_addr"
.LASF2:
	.string	"common"
.LASF34:
	.string	"lang_specific"
.LASF43:
	.string	"sequence_rtl_expr"
.LASF95:
	.string	"index_mode"
.LASF9:
	.string	"size"
.LASF42:
	.string	"sequence_stack"
.LASF37:
	.string	"function_frequency"
.LASF17:
	.string	"lang_flag_3"
.LASF35:
	.string	"function"
.LASF89:
	.string	"hi_index"
.LASF4:
	.string	"unsigned int"
.LASF25:
	.string	"abstract_origin"
.LASF10:
	.string	"align"
.LASF75:
	.string	"bitsize"
.LASF99:
	.string	"return_link"
.LASF65:
	.string	"tmode"
.LASF28:
	.string	"pointer_depth"
.LASF11:
	.string	"index"
.LASF81:
	.string	"target"
.LASF29:
	.string	"user_align"
.LASF51:
	.string	"to_addr"
.LASF53:
	.string	"explicit_inc_to"
.LASF52:
	.string	"autinc_to"
.LASF47:
	.string	"lang_hooks"
.LASF26:
	.string	"size_unit"
.LASF105:
	.string	"table_label"
.LASF73:
	.string	"for_call"
.LASF58:
	.string	"constfundata"
.LASF44:
	.string	"insn_code"
.LASF3:
	.string	"type"
.LASF67:
	.string	"retval"
.LASF48:
	.string	"expand_expr"
.LASF61:
	.string	"temp"
.LASF23:
	.string	"value"
.LASF88:
	.string	"lo_index"
.LASF36:
	.string	"args_size"
.LASF97:
	.string	"constant_part"
.LASF68:
	.string	"args_so_far"
.LASF98:
	.string	"innermode"
.LASF106:
	.string	"default_label"
.LASF82:
	.string	"want_value"
.LASF70:
	.string	"arg_list"
.LASF76:
	.string	"bitpos"
.LASF50:
	.string	"move_by_pieces"
.LASF39:
	.string	"insns"
.LASF18:
	.string	"lang_flag_4"
.LASF19:
	.string	"lang_flag_5"
.LASF24:
	.string	"abstract_flag"
.LASF94:
	.string	"this_optab"
.LASF55:
	.string	"reverse"
.LASF91:
	.string	"low_bound"
.LASF49:
	.string	"safe_from_p"
.LASF69:
	.string	"call_expr"
.LASF0:
	.string	"code"
.LASF72:
	.string	"size_mode"
.LASF6:
	.string	"mode_class"
.LASF41:
	.string	"unsignedp"
.LASF22:
	.string	"ht_identifier"
.LASF8:
	.string	"offset"
.LASF90:
	.string	"position"
.LASF66:
	.string	"icode"
.LASF84:
	.string	"volatilep"
.LASF92:
	.string	"subtarget"
.LASF102:
	.string	"drop_through_label"
.LASF56:
	.string	"store_by_pieces"
.LASF60:
	.string	"__FUNCTION__"
.LASF80:
	.string	"reg_class"
.LASF13:
	.string	"built_in_class"
.LASF57:
	.string	"constfun"
.LASF40:
	.string	"inner"
.LASF46:
	.string	"genfun"
.LASF104:
	.string	"index_expr"
.LASF63:
	.string	"data"
.LASF1:
	.string	"mode"
.LASF87:
	.string	"domain"
.LASF71:
	.string	"size_tree"
.LASF5:
	.string	"_IO_FILE"
.LASF74:
	.string	"emitted_extern"
.LASF27:
	.string	"attributes"
.LASF31:
	.string	"minval"
.LASF21:
	.string	"length"
.LASF77:
	.string	"call_fusage"
.LASF83:
	.string	"to_rtx"
.LASF62:
	.string	"nwords"
.LASF100:
	.string	"if_false_label"
.LASF93:
	.string	"placeholder_expr"
	.ident	"GCC: (GNU) 4.1.2 (Ubuntu 4.1.2-0ubuntu4)"
	.section	.text.__i686.get_pc_thunk.cx,"axG",@progbits,__i686.get_pc_thunk.cx,comdat
.globl __i686.get_pc_thunk.cx
	.hidden	__i686.get_pc_thunk.cx
	.type	__i686.get_pc_thunk.cx, @function
__i686.get_pc_thunk.cx:
	movl	(%esp), %ecx
	ret
	.section	.text.__i686.get_pc_thunk.bx,"axG",@progbits,__i686.get_pc_thunk.bx,comdat
.globl __i686.get_pc_thunk.bx
	.hidden	__i686.get_pc_thunk.bx
	.type	__i686.get_pc_thunk.bx, @function
__i686.get_pc_thunk.bx:
	movl	(%esp), %ebx
	ret
	.section	.note.GNU-stack,"",@progbits
