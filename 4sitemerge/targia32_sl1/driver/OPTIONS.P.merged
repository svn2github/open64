%%% OPTIONS
I-xtendefs_linux ; C p,C XTENDEFS |  ""
I-xtendefs ; C p,C XTENDEFS "-D__EXTENSIONS__ -D__MATH_HAS_NO_SIDE_EFFECTS" |  ""
I-xall ; f,F F self |         ""
I-u%s ; c,C l "-u %s" |  ""
I-scan%s ; f,F K self |  ""
I-object ; A l "" |  ""
I-m2 ; A F,b,i self |  ""
I-m1 ; A F,b,i self |  ""
I-m0 ; A F,b,i self |  ""
I-lo=ocktl ; f,F K self |  ""
I-init%s ; C l "-init %s" |  ""
I-include=%D ; f,F F,K "-include=%D" |  ""
I-fini%s ; C l "-fini %s" |  ""
I-cvs_nosrc,%D ; f,F F "-cvs_nosrc,%D" |  ""
I-cvs_nosrc ; f,F F self |  ""
I-cvs,%D ; f,F F "-cvs,%D" |  ""
I-cvs ; f,F F self |  ""
I-cpp_pic ; A N "-D_PIC -D__DSO__" |  ""
I-cpp_nonansi ; A N "-D_LONGLONG" |  ""
I-cpp_fortran90 ; F p "-D_LANGUAGE_FORTRAN90 -DLANGUAGE_FORTRAN90" |  ""
I-cpp_fortran77 ; f p "-D_LANGUAGE_FORTRAN77 -DLANGUAGE_FORTRAN77" |  ""
I-cpp_fortran ; f,F p "-D_LANGUAGE_FORTRAN -DLANGUAGE_FORTRAN" |  ""
I-cpp_extensions ; A N "-D__EXTENSIONS__ -D__MATH_HAS_NO_SIDE_EFFECTS" |  ""
I-cpp_assembly ; a p "-D_LANGUAGE_ASSEMBLY -DLANGUAGE_ASSEMBLY" |  ""
I-Xansi ; c M self |         ""
I-D__INLINE_INTRINSICS ; C,c p self |  ""
I-D__GNUC__ ; C,c p self |  ""
I-D__EXTENSIONS__ ; C,c p self |  ""
I-D_LANGUAGE_FORTRAN ; f,F p self |  ""
I-D_LANGUAGE_C_PLUS_PLUS=1 ; C p self |  ""
I-D_LANGUAGE_C ; c p self |  ""
I-D_LANGUAGE_ASSEMBLY ; a p self |  ""
-zerouv ; c,C,f,F b "-DEBUG:zero_uninitialized" |  "set uninitialized variables to zero"
-y%s ; c,C,f,F l "-y %s" |  ""
-x%- set_explicit_lang(option_name,optargs); A N "" |  "Specify explicit language for input files"
-woff*options ; A N "" |  "turn off warnings about options"
-woff*all toggle(&msglevel,0); A N "-w -m0" |  "turn off all warnings"
-woff%d ; f,F F,b "-woff%d" |  "turn off named warnings"
-w66 ; f F self |  "turn off F66 incompatibility warnings"
-w3 ; f F self |  "supress warnings but exit with error status"
-w2 ; f F self |  "warnings count as errors"
-w toggle(&msglevel,0); A p,C,a,K self "-m0" |  ""
-vms_stdin ; f F self |  ""
-vms_library ; f F self |  ""
-vms_endfile ; f F self |  ""
-vms_cc ; f F self |  ""
-vms warn_no_longer_supported2(option_name,"-vms_cc"); f,F N self |  ""
-version {show_version++; show_copyright = TRUE; execute_flag = FALSE;} A N "" |  "Show the version of the compiler being used"
-varargs ; f F self |  "MATRA varargs"
-v {show_flag = TRUE; show_version++;} A p,a,l self "-show" |  "show phases and version as they are being invoked"
-usegfe ; c,C N "-INTERNAL:return_val=on -INTERNAL:mldid_mstid=on -INTERNAL:return_info=on" |  ""
-usefpidx ; f F self |  ""
-usef90 ; F N "-INTERNAL:return_val=on -INTERNAL:mldid_mstid=on -INTERNAL:return_info=on" |  ""
-useas toggle(&skip_as,FALSE); A N "" |  ""
-use_readwrite_const ; c,C,f,F C self |  ""
-use_readonly_const ; c,C,f,F C self |  ""
-unsigned toggle(&signed_char,FALSE); c,C C self |  "character are unsigned by default"
-undef ; c,C,a,p p self |  ""
-u* ; A N "" |  ""
-trigraphs ; c,C,p p self |  ""
-trapuv ; c,C,f,F b "-DEBUG:trap_uninitialized" |  "trap uninitialized variables"
-traditional-c pp ; c,C,p N "-traditional" |  ""
-traditional ; c,C,p p self |  "Attempt to support traditional K&R style C"
-syntax-only ; c,C f self |  ""
-symbolic ; c,C,f,F l self |  ""
-subverbose subverbose=1; A N "-subverbose" |         "Print diagnostic information about subscription management"
-stdinc nostdinc=FALSE; A p "" |  "predefined include search path list"
-std=iso9899:199x ; c,C,p p,f self |         "Support revised ISO C, from 1999"
-std=iso9899:1999 ; c,C,p p,f self |         "Support revised ISO C, from 1999"
-std=iso9899:199409 ; c,C,p p,f self |         "Support ISO C from 1990, with 1994 amendments"
-std=iso9899:1990 ; c,C,p p,f self |         "Support ISO C from 1990"
-std=gnu9x ; c,C,p p,f self |         "Support ISO C from 1999, with GNU extensions"
-std=gnu99 ; c,C,p p,f self |         "Support ISO C from 1999, with GNU extensions"
-std=gnu89 ; c,C,p p,f self |         "Support ISO C from 1990, with GNU extensions"
-std=gnu++98 ; C,p p,f self |         "The same as `-std=c++98' plus GNU extensions.  This is the default for C++ code."
-std=c9x ; c,C,p p,f self |         "Support revised ISO C, from 1999"
-std=c99 ; c,C,p p,f self |         "Support revised ISO C, from 1999"
-std=c89 ; c,C,p p,f self |         "Support ISO C from 1990"
-std=c++98 ; C,p p,f self |         "Support 1998 ISO C++ standard plus amendments"
-static_threadprivate ; f,F F self |  "treat locals as static but not shared among multiple threads"
-static_threadprivate ; f,F F self |         ""
-static-libgcc ; c,C,f,F l self |  "Force the use of the static libgcc library"
-static-data ; f,F F self |  "treat local data as static"
-static ; c,C,f,F l self |  ""
-specs=%s warn_ignored(option_name); A N self |  ""
-soname%s ; c,C,f,F l "-soname %s" |  ""
-signed toggle(&signed_char,TRUE); c,C C self |  "characters are signed by default"
-showt {time_flag = TRUE; } A N "" |  "show time taken by each phase"
-showd {show_flag = debug = TRUE; execute_flag = FALSE;} A N "" |  ""
-show1 {show_flag = TRUE; } A N "" |  ""
-show0 {show_flag = TRUE; execute_flag = FALSE;} A N "" |  "show what phases would be called, but don't invoke anything"
-show-defaults {show_defaults = TRUE; execute_flag = FALSE;} A N "" |  "Show the default compiler options being used"
-show {show_flag = TRUE; } A F,b,i self |  "show phases as they are being invoked"
-shared-libgcc ; c,C,f,F l self |  "Force the use of the shared libgcc library"
-shared toggle(&shared,DSO_SHARED); A l -TENV:PIC -shared |  "dso-shared PIC code"
-save-temps keep_flag=TRUE; A N "" |  ""
-s ; c,C,f,F l self |  "Strip symbol table and relocation information"
-rpath%s ; c,C,f,F l "-rpath %s" |  ""
-realO ; A N "" |  "override the turning down of optimization levels"
-rdynamic ; c,C,f,F l "-Wl,--export-dynamic" |  ""
-r8const ; f F self |  ""
-r8 toggle(&rflag,2); f,F F self |  "use REAL*8 and COMPLEX*16 as the defaults for real and complex"
-r4 toggle(&rflag,1); f,F F self |  "use REAL*4 and COMPLEX*8 as the defaults for real and complex"
-r toggle(&shared,RELOCATABLE);last_phase=P_any_ld; A l self |  "produce a relocatable .o and stop"
-pthread ; A N "" |         "Compile with pthreads support"
-promp ; f,F,c,C b "-PHASE:prompf -PROMP:=on" |  ""
-profile ; A l self "-lm" "-TENV:call_mcount" |         ""
-print-search-dirs {show_search_path=TRUE; execute_flag=FALSE;} A N "" |         "Print the installation directory and directories the compiler will search"
-print-prog-name=%s {execute_flag=FALSE; print_file_path(optargs);} A N "" |  ""
-print-multi-lib {execute_flag=FALSE; print_multi_lib();} A N "" |         "Print the mapping from multilib directory names to compiler switches that enable them."
-print-libgcc-file-name ; A N "-print-file-name=libgcc.a" |  ""
-print-file-name=%s {execute_flag=FALSE; print_file_path(optargs);} A N "" |  ""
-prelink ; C N "" |  "use prelinker (default)"
-pipe ; A N "" |  ""
-pie ; A l self "-TENV:PIC" |         "Generate position independent code, if possible"
-pic1 ; A N -TENV:CPIC |  ""
-pg ; A l self "-lm" "-TENV:call_mcount" |  ""
-pfa2 warn_no_longer_supported2(option_name,"-pfa"); A N "" |  ""
-pfa,%s {auto_parallelize=TRUE; warning("options after -pfa, are ignored; should just use -pfa");} c,C,f,F b "-pfa" |  ""
-pfa*list auto_parallelize=TRUE;keep_list=TRUE; c,C,f,F b "-pfa -LNO:prompl" |  ""
-pfa*keep auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp(); c,C,f,F b "-pfa -LNO:prompl" |  ""
-pfa auto_parallelize=TRUE; c,C,f,F b "-pfa" |  ""
-pedantic-errors ; c,C,p p,f self |         "Issue warnings needed by strict compliance to ANSI C"
-pedantic ; c,C C self |  ""
-pca,%s {auto_parallelize=TRUE; warning("options after -pca, are ignored; should just use -pca");} c,C,f,F b "-pfa" |  ""
-pca*list auto_parallelize=TRUE;keep_list=TRUE; c,C,f,F b "-pfa -LNO:prompl" |  ""
-pca*keep auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp(); c,f,F b "-pfa -LNO:prompl" |  ""
-pca auto_parallelize=TRUE; c,C,f,F b "-pfa" |  ""
-pathcc ; c,C p "" |         "Define __PATHCC__ and other macros"
-pass-exit-codes pass_exit_codes=TRUE; A N "" |  "Return the highest error code encountered by any phase"
-parse last_phase=earliest_phase(P_any_fe,last_phase); c,C C self |  ""
-pad_char_literals ; F F self |         ""
-pad-char-literals ; F F self |  "blank pad character literal actual arguments to word boundary"
-p ; A l self "-TENV:call_mcount" |  ""
-openmp ; f,F,c,C F -mp |         "enable the multiprocessing directives (same as -mp)"
-onetrip ; f F "-1" |  "One trip DO loops"
-old_rl ; f F self |  ""
-o%- save_name(&outfile,optargs);check_output_name(optargs);cancel_saved_arg(2); A N "" |  "put output in following file name rather than a.out"
-nostdlib ; c,C,f,F l self |  "Do not use standard system startup files or libraries when linking"
-nostdinc++ nostdinc=TRUE; C,p p self |  "Do not search for header files in the standard directories specific to C++"
-nostdinc nostdinc=TRUE; A p self |  "no predefined include search path list"
-nostartfiles ; c,C,f,F N "" |  "Do not use standard system startup files when linking"
-none ; c,C,f,F l self |  ""
-noisam warn_no_longer_supported(option_name); f,F N "" |  ""
-noinline Process_Inline(); c,C N "-INLINE:=OFF" |  "suppress inline processing"
-noi4 toggle(&iflag,1); f F self |  "make integer and logical quantities short (2 bytes)"
-nof77 ; f F self |  ""
-noextend_source fortran_line_length=72; f,F F self "-scan=72" |         ""
-noextend-source fortran_line_length=72; f,F F "-noextend_source -scan=72" |         ""
-noexpopt ; f,F b "-OPT:fast_exp=no" |  "Don't optimize exponentiation operations"
-nodefaultlibs ; c,C,f,F N "" |  "Do not use standard system libraries when linking"
-nocpp nocpp_flag=TRUE;first_phase=P_any_fe; f,F f self |  "don't do cpp processing"
-nobool ; C C self |  "disallow bool keyword"
-no_prelink prelink_flag=FALSE; C C self |  "do not use prelinker (i.e. instantiate all templates immediately)"
-no_exceptions ; C C,b "-LANG:exc=OFF" |  "turn off support for exception-handling (default)"
-no-traditional ; c,C f self |  ""
-no-pathcc ; c,C p "" |         "Don't define __PATHCC__ and other macros"
-no-intrinsic=%s ; f,F F "-no-intrinsic=%s" |         "Remove intrinsic from the initial set the compiler recognizes"
-no-gcc ; c,C p self |         "Don't define __GNUC__ and other macros"
-n32 toggle(&abi,ABI_N32); A K "-n32" NEWABI32_DEFS "-TARG:abi=n32" |  ""
-n ; c,C,f,F l self |  ""
-mx87-precision=%d ; A b "-TARG:x87-precision=%d" |         "Specify the precision of x87 floating-point calculations (32/64/80-bit)"
-mvolatile-asm-stop ; A N "-CG:volatile_asm_stop=on" |  ""
-mtune=%s set_cpu(optargs,M_TUNE); A N "" |         "Set CPU type"
-msse3 toggle(&sse2,TRUE);toggle(&sse3,TRUE); A b "" |         "Enable SSE3 extensions"
-msse2 toggle(&sse2,TRUE); A b "" |         "Enable SSE2 extensions"
-msse ; A N self |  "Enable SSE extensions"
-mspace toggle(&ospace,TRUE); A f,i,b "-OPT:space" |  ""
-msoft-float warn_ignored(option_name); A N "" |         ""
-mplist ; f,F,c b "-mplist" |  ""
-mpio ; f,F b self |  ""
-mp_use_locks warn_no_longer_needed(option_name); f,F N "" |  ""
-mp_use_copy warn_no_longer_needed(option_name); f,F N "" |  ""
-mp_schedtype=%s ; f,F K,F "-mp_schedtype=%s" |  ""
-mp_keep warn_no_longer_supported2(option_name,"-CLIST/-FLIST"); f,F,c N "" |  ""
-mp_chunk=%d ; f,F F "-mp_chunk=%d" |  ""
-mp toggle(&mpkind,NORMAL_MP); f,F,c,C F,C self |         "enable the multiprocessing directives"
-module%s Process_module(optargs); F N "" |         "Directory in which to create .mod file"
-mno-sse3 toggle(&sse3,FALSE); A b "" |         "Disable SSE3 extensions"
-mno-sse2 toggle(&sse2,FALSE);toggle(&sse3,FALSE); A b "" |         "Disable SSE2/SSE3 extensions"
-mno-sse toggle(&sse2,FALSE);toggle(&sse3,FALSE); A b "" |         "Disable SSE2/SSE3 extensions"
-mno-soft-float warn_ignored(option_name); A N "" |         ""
-mno-sdata ; c,C N "-G0" |  ""
-mno-mmx warn_ignored(option_name); A N self |  "Disable MMX extensions"
-mno-ieee-fp ; A b "-OPT:IEEE_NaN_Inf=off" |         "IEEE floating point comparisons not required"
-mno-3dnow toggle(&m3dnow,FALSE); A b "" |         "Disable 3Dnow extensions"
-mmmx ; A N self |  "Enable MMX extensions"
-mipslibs toggle(&use_mipslibs,TRUE);toggle(&use_craylibs,FALSE); f N "" |  ""
-mips64 toggle(&isa,ISA_MIPS64); A a,l "-mips64" MIPS4_DEFS "-TARG:isa=mips64" |  "compile for mips64 instruction set"
-mieee-fp ; A b "-OPT:IEEE_NaN_Inf=on" |         "Use IEEE floating point comparisons"
-mfixed-range=%s ; c,C N "-TENV:registers_not_allocatable=%s" |  ""
-memsim ; A N "-LNO:mem_sim=TRUE -lmemsim" |  ""
-memctr ; A b "-memctr" |  ""
-mcpu=%s set_cpu(optargs,M_CPU); A N "" |         "Set CPU type"
-mconstant-gp ; c,C N "-TENV:constant_gp=on" |  ""
-mcmodel=%s set_memory_model(optargs); A N "-mcmodel=%s -TENV:mcmodel=%s" |         "Set the memory model to use"
-mb-step ; A N "" |  ""
-march=%s set_cpu(optargs,M_ARCH); A N "" |         "Set CPU type"
-malign-loops=%d warn_ignored(option_name); A N self |  ""
-malign-jumps=%d warn_ignored(option_name); A N self |  ""
-malign-functions=%d warn_ignored(option_name); A N self |  ""
-macro_expand expand_ftpp_macros=TRUE; F N "" |         ""
-macro-expand expand_ftpp_macros=TRUE; F N "" |  "expand macros everywhere in ftpp"
-ma-step ; A N "-TARG:ma0_step=on -mb-step" |  ""
-m64 toggle(&abi,ABI_64); A b "-TARG:abi=n64" |         "Compile for 64-bit ABI"
-m64 ; A N "" |  ""
-m3dnow toggle(&m3dnow,TRUE); A b "" |         "Enable 3Dnow extensions"
-m386 warn_ignored(option_name); A N self |  ""
-m32 toggle(&abi,ABI_N32); A b "-TARG:abi=n32" |         "Compile for 32-bit ABI"
-m%s ; c,C,f,F l "-m %s" |         "Pass -m args to linker"
-l%s ; c,C,f,F l "-l%s" |  "-l<arg> adds library lib<arg> to link list"
-keepdollar ; f F self |  "Treat $ as a normal last character in symbol names"
-keep keep_flag=TRUE; A j self |  "keep intermediate files"
-javalibs toggle(&use_javalibs,TRUE);toggle(&use_h264libs,FALSE); A N "" |  ""
-jalr ; A N "-TARG:force_jalr" |  ""
-iwithprefixbefore%D ; c,C,a,p p "-iwithprefixbefore %D" |         ""
-iwithprefix%D ; c,C,a,p p "-iwithprefix %D" |         ""
-itanium toggle(&isa,ISA_IA64); A N "-i64" |  ""
-isystem%D ; c,C,f,F,a,p p "-isystem %D" |         ""
-iprefix%s ; c,C,a,p p "-iprefix %s" |         ""
-ipa toggle(&ipa,TRUE); A j self |  "Perform interprocedural analysis and optimization"
-intrinsic=%s ; f,F F "-intrinsic=%s" |         "Add intrinsic to the initial set the compiler recognizes"
-inline Process_Inline(); c,C N "-INLINE" |  "request inline processing"
-include%s ; c,C,a,p p "-include %s" |         ""
-imacros%s ; c,C,a,p p "-imacros %s" |         ""
-ignore_suffix ignore_suffix=TRUE; A N "" |         ""
-ignore-suffix ignore_suffix=TRUE; A N "" |         "ignore source suffix when determining compiler language"
-idirafter%D ; c,C,a,p p "-idirafter %D" |         ""
-i8 toggle(&iflag,3); f,F F self |  "make integer and logical quantities long long (8 bytes)"
-i64 toggle(&abi,ABI_I64); A K,K,M "-i64" "-D_LP64" "-TARG:abi=i64 -D__ia64=1" |         ""
-i4 toggle(&iflag,2); f,F F self |  "make integer and logical quantities long (4 bytes)"
-i2 toggle(&iflag,1); f F self |  "make integer and logical quantities short (2 bytes)"
-help:%s save_name(&help_pattern,optargs); A N "" |  "print list of possible options that contain given string"
-help ; A N "" |  "print list of possible options"
-h264libs toggle(&use_h264libs,TRUE);toggle(&use_javalibs,FALSE); A N "" |  ""
-gstabs3 warn_ignored(option_name); A N "" |  ""
-gstabs2 warn_ignored(option_name); A N "" |  ""
-gstabs1 warn_ignored(option_name); A N "" |  ""
-gstabs0 warn_ignored(option_name); A N "" |  ""
-gstabs+ warn_ignored(option_name); A N "" |  ""
-gstabs warn_ignored(option_name); A N "" |  ""
-ggdb3 toggle(&glevel,3); A f,i,b "-g3" |         "Produce debugging information for use by GDB"
-ggdb toggle(&glevel,2); A f,i,b "-g2" |  "Produce debugging information for use by GDB"
-gdwarf-23 toggle(&glevel,3); A f,i,b "-g3 |  "Produce DWARF 2 debugging information at debug level 3"
-gdwarf-22 toggle(&glevel,2); A f,i,b "-g2" |  "Produce DWARF 2 debugging information at debug level 2"
-gdwarf-21 toggle(&glevel,1); A f,i,b "-g1" |  "Produce DWARF 2 debugging information at debug level 1"
-gdwarf-20 toggle(&glevel,0); A f,i,b "-g0" |  "Produce DWARF 2 debugging information at debug level 0"
-gdwarf-2 toggle(&glevel,2); A f,i,b "-g2" |  "Produce debugging information in DWARF version 2 format"
-gdwarf-1+ warn_ignored(option_name); A N "" |  ""
-gdwarf-1 warn_ignored(option_name); A N "" |  ""
-gdwarf warn_ignored(option_name); A N "" |  ""
-gcc ; c,C p self |         "Define __GNUC__ and other macros"
-g3 toggle(&glevel,3); A f,i,b,p self |  "Add debugging  information for C preprocessor macros"
-g2 toggle(&glevel,2); A f,i,b self |  ""
-g1 toggle(&glevel,1); A f,i,b self "-Wl,--export-dynamic" |  ""
-g0 toggle(&glevel,0); A f,i,b self |  "no debug info"
-g toggle(&glevel,2); A f,i,b "-g2" |  "full debug info"
-fwritable-strings ; c,C f self |  "Attempt to support writable-strings K&R style C"
-fweak warn_ignored(option_name); A N "" |         ""
-fvolatile-static ; c,C N "" |  ""
-fvolatile-global ; c,C N "" |  "Consider all mem refs to global data to be volatile"
-fvolatile ; c,C N "" |  "Consider all mem refs through pointers as volatile"
-fverify-tree ; C f "-fverify-tree" |         "Run verification routine before tree-to-whirl conversion"
-fverbose-asm ; c,C N "" |  ""
-fuse-cxa-atexit ; C C self |  "Register static destructors with __cxa_atexit instead of atexit"
-funwind-tables ; A N "-CG:emit_unwind_info=on" |  ""
-funsigned-char ; c,C f self "-D__CHAR_UNSIGNED__" |  "Make 'char' be unsigned by default"
-funsigned-bitfields ; c,C f self |  "Make bitfields by unsigned by default"
-funroll-loops ; c,C f self |  "unroll-loops"
-funroll-all-loops ; c,C f self |  "Peform loop onrolling for all loops"
-funderscoring ; f,F F self |  "Append underscores to symbols"
-fullwarn toggle(&msglevel,2); f,F p "-m2" |  "give more warnings, especially about missing prototypes"
-ftraditional ; c,C f self |  ""
-ftpp toggle(&use_ftpp,1); F N "" |         ""
-fthread-jumps ; c,C f self |  "Perform jump threading optimisations"
-ftest-coverage Process_Test_Coverage(); A b "-CG:test_coverage=true" |  "turn on test coverage"
-ftemplate-depth-%d ; C f "-ftemplate-depth-%d" |         "Set maximum instantiation depth for template classes"
-fstrict-aliasing ; c,C f self "-OPT:alias=typed" |  "Assume strictest aliasing rules"
-fstrength-reduce ; c,C f self |  "Perform strength reduction optimisations"
-fstack-check ; c,C N "" |  ""
-fssa-dce warn_ignored(option_name); A N "" |         ""
-fssa-ccp warn_ignored(option_name); A N "" |         ""
-fssa warn_ignored(option_name); A N "" |         ""
-fsigned-char ; c,C f self |  "Make 'char' be signed by default"
-fsigned-bitfields ; c,C f self |  "Make bitfields be signed by default"
-fshort-wchar ; c,C f self |         "Use short unsigned int for wchar_t instead of the default underlying type for the target."
-fshort-enums ; c,C N "" |  "Use the smallest fitting integer to hold enums"
-fshort-double ; c,C N "" |  "Use the same size for double as for float"
-fshared-data ; c,C N "" |  "Mark data as shared rather than private"
-fsecond-underscore ; f,F F self |  "Append a second underscore to symbols that already contain an underscore"
-fschedule-insns2 ; c,C f self |  ""
-fschedule-insns ; c,C f self |  ""
-frtti ; C C self |  "Generate runtime type information"
-frerun-loop-opt ; c,C f self |  ""
-frerun-cse-after-loop ; c,C f self |  ""
-fregmove ; c,C f self |  ""
-freg-struct-return ; c,C N "" |  ""
-freeform toggle(&fortran_form,2); F F "" |  "sets Fortran 90 free form source statement formatting"
-freduce-all-givs ; c,C f self |  ""
-framepointer warn_no_longer_supported2(option_name,"-TENV:large_stack"); A N "" |  ""
-fprofile-arcs Process_Profile_Arcs(); A b "-OPT:profile_arcs=true" |  ""
-fpreprocessed ; c,C,a,p p,C self |         "Tell preprocessor that input has already been preprocessed"
-fprefix-function-name ; c,C N "" |  "Add a prefix to all function names"
-fpie ; A f self "-TENV:PIC" |         "Generate position independent code, if possible"
-fpic toggle(&pic,TRUE); A f self "-TENV:PIC" |         "Generate position independent code, if possible"
-fpermissive ; C C self |         "Downgrade messages about nonconformant code to warnings"
-fpcc-struct-return ; c,C N "" |  ""
-fpack-struct ; c,C N "" |  "Pack structure members together without holes"
-foptimize-sibling-calls warn_ignored(option_name); A N "" |         ""
-foptimize-register-moves ; c,C f self |  ""
-foptimize-register-move warn_ignored(option_name); A N "" |         ""
-fonetrip ; f F "-1" |         "One trip DO loops"
-fomit-frame-pointer ; c,C f self |  "When possible do not generate stack frames"
-fnotraditional ; c,C f self |  ""
-fno-writable-strings ; c,C f self |  ""
-fno-weak warn_ignored(option_name); A N "" |         ""
-fno-use-cxa-atexit ; C C self |  "Register static destructors with atexit instead of __cxa_atexit"
-fno-unwind-tables ; A N "-CG:emit_unwind_info=off" |  ""
-fno-unsigned-char ; c,C f self |  ""
-fno-unsigned-bitfields ; c,C f self |  "Make bitfields be signed by default"
-fno-underscoring ; f,F F self |  "Don't append underscores to symbols"
-fno-traditional ; c,C f self |  ""
-fno-strict-aliasing ; c,C f self |  "Do not assume strict aliasing rules"
-fno-strength-reduce ; c,C f self |  ""
-fno-ssa-dce warn_ignored(option_name); A N "" |         ""
-fno-ssa-ccp warn_ignored(option_name); A N "" |         ""
-fno-ssa warn_ignored(option_name); A N "" |         ""
-fno-signed-char ; c,C f self "-D__CHAR_UNSIGNED__" |  "Make 'char' be unsigned by default"
-fno-signed-bitfields ; c,C f self |  "Make bitfields be unsigned by default"
-fno-second-underscore ; f,F F self |  "Don't append a second underscore to symbols that already contain an underscore"
-fno-rtti ; C C self |  "Do not generate runtime type information"
-fno-preprocessed ; c,C,a,p p,C self |         "Tell preprocessor that input has not already been preprocessed"
-fno-pie ; A f self |         "Do not generate position independent code"
-fno-pic toggle(&pic,FALSE); A f self |   "Do not generate position independent code"
-fno-permissive ; C C self |         "Keep messages about nonconformant code as errors"
-fno-peephole ; c,C f self |  ""
-fno-optimize-sibling-calls warn_ignored(option_name); A N "" |         ""
-fno-optimize-register-move warn_ignored(option_name); A N "" |         ""
-fno-operator-names ; C f self |         "Do not treat operator keywords and, bitand, bitor, compl, not, or and xor as keywords."
-fno-omit-frame-pointer ; c,C f self |  ""
-fno-math-errno toggle(&fmath_errno,0); c,C,f,F N self -LANG:math_errno |         "Do not set ERRNO after calling math functions that are executed with a single instruction"
-fno-inline-functions ; c,C f self |  "Do not automatically integrate simple functions into their callers"
-fno-inline ; c,C f self "-INLINE:=off" |  ""
-fno-implicit-templates ; C C self |  "Never emit code for non-inline templates instantiated implicitly"
-fno-implicit-inline-templates ; C C self |  "Never emit code for inline templates instantiated implicitly"
-fno-ident ; c,C C self |  "Ignore #ident directives"
-fno-hosted ; c,C f self |  ""
-fno-handle-exceptions ; c,C C self |  "Disable exception handling"
-fno-gnu-linker ; c,C N "" |  ""
-fno-gnu-keywords ; c,C f self |         "Do not recognize 'typeof' as a keyword"
-fno-function-cse ; c,C f self |  ""
-fno-freestanding ; c,C f self |  ""
-fno-fast-stdlib ; A f,l "-OPT:fast_stdlib=off" |  "Do not use faster versions of standard library functions"
-fno-fast-math toggle(&ffast_math,0); c,C,f,F f "-OPT:ffast_math=OFF  | -fmath-errno" |         "Conform to ANSI & IEEE math rules at the expense of speed"
-fno-exceptions ; c,C C self |  "Disable exception handling"
-fno-directives ; f,F F "-xall" |         "Ignore Fortran compiler directives inside comments"
-fno-defer-pop ; c,C f self |  ""
-fno-default-inline ; c,C f self |  ""
-fno-common ; c,C C self |  "use strict ref/def initialization model"
-fno-check-new ; C C self |  "Do not check result of operator new for NULL"
-fno-builtin toggle(&fbuiltin,0); c,C N self |  "Do not recognise any built in functions"
-fno-asm ; c,C f self |  "Do not recognise the 'asm' keyword"
-fno-PIE ; A f self |         "Do not generate position independent code"
-fno-PIC toggle(&pic,FALSE); A f self |         "Do not generate position independent code"
-fms-extensions ; c,C f self |  "Accept broken MFC extensions without warning"
-fmove-all-movables ; c,C f self |  ""
-fmessage-length=%d ; C f "-fmessage-length=%d" |         "Try to format error messages so that they fit on lines of about n characters."
-fmath-errno toggle(&fmath_errno,1); c,C,f,F N self |         ""
-flist ; f,F b "-PHASE:flist -FLIST:=ON" |  ""
-fleading-underscore ; c,C N "" |  ""
-flang-isoc9x ; c,C f self |  ""
-fkeep-inline-functions ; c,C f self |  "Generate code for funcs even if they are fully inlined"
-fixedform toggle(&fortran_form,1); F F "" |  "sets Fortran 90 fixed form source statement formatting"
-finline-limit=%d ; c,C f "-finline-limit=%d" |         ""
-finline-functions ; c,C f self |  "Automatically integrate simple functions into their callers"
-finline ; c,C f self |         ""
-finhibit-size-directive ; c,C b "-CG:inhibit_size_directive=1:emit_asm_dwarf=0" |  "Do not generate .size directives"
-fimplicit-templates ; C C self |  "Emit code for non-inline templates instantiated implicitly"
-fimplicit-inline-templates ; C C self |  "Emit code for inline templates instantiated implicitly"
-fhosted ; c,C f self |  ""
-fhandle-exceptions ; c,C C self |  "Enable exception handling"
-fgnu-keywords ; c,C f self |         "Recognize 'typeof' as a keyword"
-fgcse ; c,C f self |  ""
-ffunction-sections ; c,C f self |  ""
-ffreestanding ; c,C f self |  ""
-ffortran-bounds-check ; f,F F "-DEBUG:subscript_check" |  "check bounds"
-fforce-mem ; c,C f self |  ""
-fforce-addr ; c,C f self |  ""
-ffloat-store ; c,C f "-OPT:IEEE_arithmetic=1" |  "Do not store floats in registers"
-ffixed-%s ; c,C N "-TENV:registers_not_allocatable=%s" |  ""
-ffast-stdlib ; A f,l "-OPT:fast_stdlib=on" |  "Use faster versions of some standard library functions, when available"
-ffast-math toggle(&ffast_math,1); c,C,f,F f,b "-OPT:ffast_math=ON - |         "Improve FP speed by violating ANSI & IEEE rules"
-ff90 ; f,F N "" |  "Allow Fortran 90 constructs"
-ff77 warn_ignored(option_name); f,F N "" |  "Use idiomatic UNIX FORTRAN 77"
-ff2c-abi%s ; A F "-ff2c-abi %s" |  ""
-fexpensive-optimizations ; c,C f self |  ""
-fexceptions ; A C "-fexceptions -TENV:frame_pointer=on" |         "Enable exception handling"
-feedback*%s add_string(feedback_files,optargs); A N "" |  ""
-fe last_phase=earliest_phase(P_any_fe,last_phase); c,C,f,F N "" |  "stop after the front end is run"
-fdirectives ; f,F F "" |         "Recognize Fortran compiler directives inside comments"
-fdiagnostics-show-location=once ; C f self |         "Instructs the diagnostic messages reporter to emit source location information once"
-fdiagnostics-show-location=every-line ; C f self |         "Instructs the diagnostic messages reporter to emit source location information on every line"
-fdelayed-branch ; c,C f self |  ""
-fdecorate%s ; A F "-fdecorate %s" |         "File tells Fortran compiler how to transform ids into linker symbols"
-fdata-sections ; c,C f self |  ""
-fcse-skip-blocks ; c,C f self |  ""
-fcse-follow-jumps ; c,C f self |  ""
-fcond-mismatch ; c,C f self |         ""
-fcoco=%s toggle(&use_coco,TRUE);save_name(&coco_setfile,optargs); f,F |         "use coco Fortran preprocessor"
-fcoco toggle(&use_coco,TRUE); f,F N "" |         "use coco Fortran preprocessor"
-fcheck-new ; C C self |  "Check result of operator new for NULL"
-fcheck-memory-usage ; c,C N "" |  ""
-fcaller-saves ; c,C f self |  ""
-fcall-used-%s ; c,C N "" |  ""
-fcall-saved-%s ; c,C N "" |  ""
-fbuse%s Process_fbuse(optargs); A N "" |  ""
-fbuiltin toggle(&fbuiltin,1); c,C N self |  ""
-fbranch-probabilities ; c,C f self |  ""
-fbgen Gen_feedback=TRUE; A N "" |  ""
-fbexe%s Process_fbexe(optargs); A N "" |  ""
-fb_xdir%D Process_fb_xdir(optargs); A N "" |  ""
-fb_type=%s Process_fb_type(optargs); A N "" |         ""
-fb_phase=%s Process_fb_phase(optargs); A N "" |         ""
-fb_opt%s Process_fb_opt(optargs); A N "" |         ""
-fb_create%s Process_fb_create(optargs); A N "" |         ""
-fb_cdir%D Process_fb_cdir(optargs); A N "" |  ""
-fb-type=%s Process_fb_type(optargs); A N "" |         "Option need for the type of profiles"
-fb-phase=%s Process_fb_phase(optargs); A N "" |         "Option needed to tell compile feedback phase"
-fb-opt%s Process_fb_opt(optargs); A N "" |         "Option needed for using SPEC feedback files"
-fb-create%s Process_fb_create(optargs); A N "" |         "Option needed for SPEC feedback file generation"
-fb%s save_name(&internal_fb_file,optargs); A N "" |  ""
-fasm ; c,C f self |  ""
-fargument-noalias-global ; c,C N "" |  ""
-fargument-noalias ; c,C N "" |  ""
-fargument-alias ; c,C N "" |  ""
-fabi-version=%d ; C f "-fabi-version=%d" |         ""
-fPIE ; A f self "-TENV:PIC" |         "Generate position independent code, if possible"
-fPIC toggle(&pic,TRUE); A f self "-TENV:PIC" |         "Generate position independent code, if possible"
-extend_source fortran_line_length=132; f,F F self "-scan=132" |         ""
-extend-source fortran_line_length=132; f,F F self "-scan=132" |  "make each source line 132 bytes long"
-expand_include ; f,F F self |  ""
-exceptions ; C C,b "-LANG:exc" |  "turn on support for exception-handling"
-e%s ; c,C,f,F l "-e %s" |  ""
-dz warn_ignored(option_name); c,C N self |  ""
-dx warn_ignored(option_name); c,C N self |  ""
-dw warn_ignored(option_name); c,C N self |  ""
-dv warn_ignored(option_name); c,C N self |  ""
-dumpversion {dump_version = TRUE; execute_flag = FALSE;} A N "" |  "Show the version of the compiler being used, and nothing else"
-dumpspecs warn_ignored(option_name); A f self |  ""
-dumpmachine {printf(PSC_TARGET "\n"); execute_flag=FALSE;} A N "" |         "Print the compiler's target machine"
-dump_input ; f F self |  ""
-dt warn_ignored(option_name); c,C N self |  ""
-ds warn_ignored(option_name); c,C N self |  ""
-dr warn_ignored(option_name); c,C N self |  ""
-dp warn_ignored(option_name); c,C N self |  ""
-do warn_ignored(option_name); c,C N self |  ""
-dm warn_ignored(option_name); c,C N self |  ""
-dl warn_ignored(option_name); c,C N self |  ""
-dk warn_ignored(option_name); c,C N self |  ""
-dj warn_ignored(option_name); c,C N self |  ""
-di warn_ignored(option_name); c,C N self |  ""
-dh warn_ignored(option_name); c,C N self |  ""
-dg warn_ignored(option_name); c,C N self |  ""
-df warn_ignored(option_name); c,C N self |  ""
-demangle ; C l self |  ""
-default64 ; F F self |  "Cray compatibility mode for F90"
-de warn_ignored(option_name); c,C N self |  ""
-dd warn_ignored(option_name); c,C N self |  ""
-dc warn_ignored(option_name); c,C N self |  ""
-db warn_ignored(option_name); c,C N self |  ""
-da warn_ignored(option_name); c,C N self |  ""
-d_lines ; f,F F self |         ""
-dX warn_ignored(option_name); c,C N self |  ""
-dS warn_ignored(option_name); c,C N self |  ""
-dR warn_ignored(option_name); c,C N self |  ""
-dP warn_ignored(option_name); c,C N self |  ""
-dN ; c,C,a,p p self |         "Generate list of all macro names defined"
-dM ; c,C,a,p p self |         "Generate list of directives for all macros"
-dL warn_ignored(option_name); c,C N self |  ""
-dI ; c,C,a,p p self |         "Output #include directives in addition to preprocessor results"
-dG warn_ignored(option_name); c,C N self |  ""
-dF warn_ignored(option_name); c,C N self |  ""
-dE warn_ignored(option_name); c,C N self |  ""
-dD ; c,C,a,p p self |         "Generate list of non-predefined macro directives"
-dC warn_ignored(option_name); c,C N self |  ""
-dB warn_ignored(option_name); c,C N self |  ""
-dA warn_ignored(option_name); c,C N self |  ""
-d8 toggle(&dflag,1); f,F F self |  "use double=8 and dcomplex=16"
-d-lines ; f,F F self |  "compile lines with a D in column 1"
-craylibs toggle(&use_craylibs,TRUE);toggle(&use_mipslibs,FALSE); f N "" |  ""
-cray_directives ; f,F N self |  ""
-cord toggle(&cordflag,TRUE); A N "" |  ""
-copyright {show_copyright = TRUE; execute_flag = FALSE;} A N "" |  "Show the copyright for the compiler being used"
-convert%s toggle(&io_byteswap,2);check_convert_name(optargs); F F |         "-convert %s"
-compat-gcc toggle(&compat_gcc,TRUE); A N "" |         ""
-col80 fortran_line_length=80; F F self "-scan=80" |  "sets the source statement length to 80 columns"
-col72 fortran_line_length=72; f,F F self "-scan=72" |  "sets the source statement length to 72 columns"
-col120 fortran_line_length=120; f,F F self "-scan=120" |  "sets the source statement length to 120 columns"
-clist ; c b "-PHASE:clist -CLIST:=ON" |  ""
-cif keep_cif=TRUE; F,c,C f self |         ""
-chunk=%d ; f,F K,F "-chunk=%d" |  "Set the MP chunksize"
-chararg1 ; f F self |  ""
-change_const ; f,F N "" |  ""
-c pp toggle(&use_ftpp,0);first_phase=P_any_cpp; A N "" |  ""
-c last_phase=(((ipa==TRUE)&&(shared==RELOCATABLE))?P_any_ld:earliest_phase(P_any_as,last_phase)); A N "" |  "produce a .o and stop"
-byteswapio toggle(&io_byteswap,1); F F self |         "Swap bytes during file I/O"
-bytereclen ; f F "-old_rl" |  ""
-backslash first_phase=P_any_fe; f F self |  "treat backslash as normal character rather than an escape"
-b%s warn_ignored(option_name); A N self |  ""
-aux-info%s ; a C "-aux-info %s" |         ""
-automatic toggle(&isstatic,1); f,F N "" |  ""
-auto_use%s ; F F "-auto_use=%s" |         ""
-auto-use%s ; F F "-auto_use=%s" |  "Act as if a USE statement is specified in every PU"
-ar ; A N "" |  "create an archive (instead of a shared object or executable) using ar"
-apo*list auto_parallelize=TRUE;keep_list=TRUE; c,C,f,F b "-pfa -LNO:prompl" |  ""
-apo*keep auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp(); c,C,f,F b "-pfa -LNO:prompl" |  ""
-apo auto_parallelize=TRUE; c,C,f,F b "-pfa" |  ""
-ansi toggle(&ansi,STRICT_ANSI); c,f,F p,f self "-Xansi -D__STRICT_ANSI__" |  "strict ansi"
-all ; c,C,f,F l --whole-archive |  ""
-align8 ; c,C,f F,b self |         "align data in common blocks to 8-bit boundaries"
-align64 ; c,C,f,F F,b self |         "align data in common blocks to 64-bit boundaries"
-align32 ; c,C,f,F F,b self |         "align data in common blocks to 32-bit boundaries"
-align16 ; c,C,f F,b self |         "align data in common blocks to 16-bit boundaries"
-align128 ; c,C,f F,b self |         "align data in common blocks to 128-bit boundaries"
-Y%s change_phase_path(optargs); A j "-Y%s" |  "-Y<phase>,<path> uses path to find phase {p=cpp,f=fe,b=be,a=as,l=ld,i=inline,I=include,S=startup,L=libraries}"
-Xlinker%- warn_no_longer_supported2(option_name,"-Wl,"); c,C,f,F l "-Xlinker %s" | -Xlinker* ; c,C,f,F l "" |         ""
-Wwrite-strings ; c,C f self |  "Mark strings as 'const char *'"
-Wunused-variable ; c,C f self |  "Warn about local and static variables that are not used"
-Wunused-value ; c,C f self |  "Warn about statements whose results are not used"
-Wunused-parameter ; c,C f self |  "Warn about unused function parameters"
-Wunused-macros ; c,C,p p,f self |         "Warn about macros defined but not used"
-Wunused-label ; c,C f self |  "Warn about unused labels"
-Wunused-function ; c,C f self |  "Warn about unused static and inline functions"
-Wunused ; c,C f self |  "Warn when a variable is unused"
-Wunreachable-code ; c,C f self |  "Warn about code that will never be executed"
-Wunknown-pragmas ; c,C f self |  "Warn when an unknown #pragma directive is encountered"
-Wuninitialized ; f,F,c,C f -WOPT:warn_uninit=on |         "Warn about unitialized automatic variables"
-Wundef ; c,C,p p,f self |  "Warn if an undefined identifier appears in a #if directive"
-Wtrigraphs ; c,C,p p,f self |  "Warn when trigraphs are encountered"
-Wtraditional ; c,C f self |  "Warn about constructs whoes meaning change in ANSI C"
-Wsystem-headers ; c,C,p p,f self |  "Print warnings for constructs in system header files"
-Wsynth ; C f self |  "Warn about synthesis that is not backwards compatible with cfront"
-Wswitch-enum ; c,C f self |  "Warn when a switch statement is missing a case for an enum member"
-Wswitch-default ; c,C f self |  "Warn when a switch statement has no default"
-Wswitch ; c,C f self |  "Warn when a switch statement is incorrectly indexed with an enum"
-Wstrict-prototypes ; c,C f self |  "Warn about non-prototyped function decls"
-Wstrict-aliasing ; c,C f self |  "Warn about code that breaks strict aliasing rules"
-Wsign-promo ; C f self |  "Warn when overload resolution promotes from unsigned to signed"
-Wsign-compare ; c,C f self |  "Warn about signed/unsigned comparisons"
-Wshadow ; c,C f self |  "Warn when one local variable shadows another"
-Wsequence-point ; c,C f self |  "Warn about code violating sequence point rules"
-Wreturn-type ; c,C f self |  "Warn when a function return type defaults to int"
-Wreorder ; C f self |  "Warn when reordering member initializers"
-Wredundant-decls ; c,C f self |  "Warn about multiple declarations of the same object"
-Wpointer-arith ; c,C f self |  "Warn about function pointer arithmetic"
-Wparentheses ; c,C f self |  "Warn about possible missing parentheses"
-Wpadded ; c,C f self |  "Warn when padding is included in a struct"
-Wpacked ; c,C f self |  "Warn when packed attribute of a struct has no effect"
-Wp,%s ; A p "-Wp,%s" |  "pass comma-separated opts to preprocessor as individual opts"
-Woverloaded-virtual ; C f self |  "Warn when a function declaration hides virtual functions"
-Wold-style-cast ; C f self |  "Warn when a C-style cast to a non-void type is used"
-Wnonnull ; c,C f self |  "Warn when passing null to functions requiring non-null pointers"
-Wnon-virtual-dtor ; C f self |  "Warn when a class declares a dtor that should be virtual"
-Wno-write-strings ; c,C f self |  "Do not mark strings as 'const char *'"
-Wno-unused-variable ; c,C f self |  "Do not warnarn about local and static variables that are not used"
-Wno-unused-value ; c,C f self |  "Do not warn about statements whose results are not used"
-Wno-unused-parameter ; c,C f self |  "Do not warn about unused function parameters"
-Wno-unused-macros ; c,C,p p,f self |         "Do not warn about macros defined but not used"
-Wno-unused-label ; c,C f self |  "Do not warn about unused labels"
-Wno-unused-function ; c,C f self |  "Do not warn about unused static and inline functions"
-Wno-unused ; c,C f self |  "Do not warn when a variable is unused"
-Wno-unreachable-code ; c,C f self |  "Do not warn about code that will never be executed"
-Wno-unknown-pragmas ; c,C f self |  "Do not warn when an unknown #pragma directive is encountered"
-Wno-uninitialized ; c,C f self |  "Do not warn about unitialized automatic variables"
-Wno-undef ; c,C,p p,f self |  "Do not warn if an undefined identifier appears in a #if directive"
-Wno-trigraphs ; c,C,p p,f self |  "Do not warn when trigraphs are encountered"
-Wno-traditional ; c,C,p p,f self |         "Do not warn about constructs whoes meaning change in ANSI C"
-Wno-system-headers ; c,C,p p,f self |  "Do not print warnings for constructs in system header files"
-Wno-synth ; C f self |  "Do not warn about synthesis that is not backwards compatible with cfront"
-Wno-switch ; c,C f self |  "Do not warn when a switch statement is incorrectly indexed with an enum"
-Wno-strict-prototypes ; c,C f self |  "Do not warn about non-prototyped function decls"
-Wno-strict-aliasing ; c,C f self |  "Do not warn about code that breaks strict aliasing rules"
-Wno-sign-promo ; C f self |  "Do not warn when overload resolution promotes from unsigned to signed"
-Wno-sign-compare ; c,C f self |  "Do not warn about signed/unsigned comparisons"
-Wno-shadow ; c,C f self |  "Do not warn when one local variable shadows another"
-Wno-sequence-point ; c,C f self |  "Do not warn about code violating sequence point rules"
-Wno-return-type ; c,C f self |  "Do not warn when a function return type defaults to int"
-Wno-reorder ; C f self |  "Do not warn when reordering member initializers"
-Wno-redundant-decls ; c,C f self |  "Do not warn about multiple declarations of the same object"
-Wno-pointer-arith ; c,C f self |  "Do not warn about function pointer arithmetic"
-Wno-pmf-conversions ; C f self |  "Do not warn about converting PMFs to plain pointers"
-Wno-parentheses ; c,C f self |  "Do not warn about possible missing parentheses"
-Wno-padded ; c,C f self |  "Do not warn when padding is included in a struct"
-Wno-packed ; c,C f self |  "Do not warn when packed attribute of a struct has no effect"
-Wno-overloaded-virtual ; C f self |  "Do not warn when a function declaration hides virtual functions"
-Wno-old-style-cast ; C f self |  "Do not warn when a C-style cast to a non-void type is used"
-Wno-non-virtual-dtor ; C f self |  "Do not warn when a class declares a dtor that should be virtual"
-Wno-non-template-friend ; C f self |  "Do not warn about friend functions declared in templates"
-Wno-nested-externs ; c,C f self |  "Do not warn about externs not at file scope level"
-Wno-multichar ; c,C f self |  "Do not warn if a multicharacter constant is used"
-Wno-missing-prototypes ; c,C f self |  "Do not warn about global funcs without prototypes"
-Wno-missing-noreturn ; c,C f self |  "Do not warn about functions that are candidates for 'noreturn' attribute"
-Wno-missing-format-attribute ; c,C f self |  "Do not warn on candidates for `format' attributes"
-Wno-missing-declarations ; c,C f self |  "Do not warn about global funcs without previous declarations"
-Wno-missing-braces ; c,C f self |  "Do not warn about possibly missing braces around initialisers"
-Wno-main ; c,C f self |  "Do not warn about suspicious declarations of main"
-Wno-long-long ; c,C f self |  "Do not warn if the long long type is used"
-Wno-larger-than-%d ; c,C f "-Wno-larger-than-%d" |         "Do not warn if an object is larger than <number> bytes"
-Wno-invalid-pch ; c,C f "" |         ""
-Wno-inline ; c,C f self |  "Do not warn if a function declared as inline cannot be inlined"
-Wno-import ; c,C,p p,f self |  "Do not warn about the use of the #import directive"
-Wno-implicit-int ; c,C f self |  "Do not warn when a declaration does not specify a type"
-Wno-implicit-function-declaration ; c,C f self |  "Do not warn when a function is used before being declared"
-Wno-implicit ; c,C f self |   "Do not warn about implicit declarations of functions or variables"
-Wno-format-y2k ; c,C f self |  "Do not warn about `strftime' formats that yield two-digit years"
-Wno-format-security ; c,C f self |  "Do not warn on potentially insecure format functions"
-Wno-format-nonliteral ; c,C f self |  "Do not warn if format string is not a string literal"
-Wno-format-extra-args ; c,C f self |  "Do not warn about extra arguments to printf-like functions"
-Wno-format ; c,C f self |  "Do not warn about printf format anomalies"
-Wno-float-equal ; c,C f self |  "Do not warn if floating point values are compared for equality"
-Wno-error ; c,C,p p,f self |  "Do not make all warnings into errors"
-Wno-endif-labels ; c,C,p,f p self |  "Do not warn if #if or #endif is followed by text"
-Wno-effc++ ; C f self |  "Do not warn on `Effective C++' style violations"
-Wno-div-by-zero ; c,C f self |  "Suppress warnings about compile-time integer division by zero"
-Wno-disabled-optimization ; c,C f self |  "Do not warn if a requested optimization pass is disabled"
-Wno-deprecated-declarations ; c,C f self |  "Do not warn about deprecated code"
-Wno-deprecated ; c,C,f p self |  "Don't announce deprecation of compiler features"
-Wno-ctor-dtor-privacy ; C p self |  "Do not warn when all constructors/destructors are private"
-Wno-conversion ; c,C f self |  "Do not warn about possibly confusing type conversions"
-Wno-comment ; c,C,p p,f self |  "Do not warn if nested comments are detected"
-Wno-comment ; c,C,p p,f self |         "Do not warn if nested comments are detected"
-Wno-char-subscripts ; c,C f self |  "Do not warn about subscripts whose type is 'char'"
-Wno-cast-qual ; c,C f self |  "Do not warn about casts which discard qualifiers"
-Wno-cast-align ; c,C f self |  "Do not warn about pointer casts which increase alignment"
-Wno-bad-function-cast ; c,C f self |  "Do not warn when a function call is cast to a non-matching type"
-Wno-aggregate-return ; c,C f self |  "Do not warn about returning structures, unions or arrays"
-Wnested-externs ; c,C f self |  "Warn about externs not at file scope level"
-Wmultichar ; c,C f self |  "Warn if a multicharacter constant is used"
-Wmissing-prototypes ; c,C f self |  "Warn about global funcs without prototypes"
-Wmissing-noreturn ; c,C f self |  "Warn about functions that are candidates for 'noreturn' attribute"
-Wmissing-format-attribute ; c,C f self |  "If -Wformat, warn on candidates for `format' attributes"
-Wmissing-declarations ; c,C f self |  "Warn about global funcs without previous declarations"
-Wmissing-braces ; c,C f self |  "Warn about possibly missing braces around initialisers"
-Wmain ; c,C f self |  "Warn about suspicious declarations of main"
-Wlong-long ; c,C f self |  "Warn if the long long type is used"
-Wlarger-than-%d ; c,C f "-Wlarger-than-%d" |         "Warn if an object is larger than <number> bytes"
-Wl,%s ; c,C,f,F l "-Wl,%s" |  "pass comma-separated opts to linker as individual opts"
-Winvalid-pch ; c,C f "" |         ""
-Winline ; c,C f self |  "Warn if a function declared as inline cannot be inlined"
-Wimport ; c,C,p p,f self |  "Warn about the use of the #import directive"
-Wimplicit-int ; c,C f self |  "Warn when a declaration does not specify a type"
-Wimplicit-function-declaration ; c,C f self |  "Warn when a function is used before being declared"
-Wimplicit ; c,C f self |  "Warn about implicit declarations of functions or variables"
-Wformat=2 ; c,C f "-Wformat -Wformat-nonliteral -Wformat-security" |         "Enable -Wformat plus format checks not included in -Wformat"
-Wformat-security ; c,C f self |  "If -Wformat, warn on potentially insecure format functions"
-Wformat-nonliteral ; c,C f self |  "If -Wformat, warn if format string is not a string literal"
-Wformat ; c,C f self |  "Warn about printf format anomalies"
-Wfloat-equal ; c,C f self |  "Warn if floating point values are compared for equality"
-Werror-implicit-function-declaration ; c,C f self |  "Give an error when a function is used before being declared"
-Werror ; c,C,p p,f self |  "Make all warnings into errors"
-Wendif-labels ; c,C,p,f p self |  "Warn if #if or #endif is followed by text"
-Weffc++ ; C f self |  "Warn on `Effective C++' style violations"
-Wdiv-by-zero ; c,C f self |  "Warn about compile-time integer division by zero"
-Wdisabled-optimization warn_ignored(option_name); c,C N "" |  "Warn if a requested optimization pass is disabled"
-Wdeprecated ; c,C,f p self |  "Announce deprecation of compiler features"
-Wdeclaration-after-statement ; c f self |  "Warn about declarations after statements (pre-C99)"
-Wctor-dtor-privacy ; C p self |  "Warn when all constructors/destructors are private"
-Wconversion ; c,C f self |  "Warn about possibly confusing type conversions"
-Wcomments ; c,C,p p,f self |         "Warn if nested comments are detected"
-Wcomment ; c,C,p p,f self |  "Warn if nested comments are detected"
-Wchar-subscripts ; c,C f self |  "Warn about subscripts whose type is 'char'"
-Wcast-qual ; c,C f self |  "Warn about casts which discard qualifiers"
-Wcast-align ; c,C f self |  "Warn about pointer casts which increase alignment"
-Wbad-function-cast ; c,C f self |  "Attempt to support writable-strings K&R style C"
-Wall ; c,C,p p,f self |  "Enable most warning messages"
-Waggregate-return ; c,C f self |  "Warn about returning structures, unions or arrays"
-Wabi warn_ignored(option_name); A C self "" |  ""
-Wa,%s ; c,C,f,F a "-Wa,%s" |         "pass comma-separated opts to assembler as individual opts"
-WOPT:%s ; A b,i "-WOPT:%s" |  "option group internal-use WOPT options"
-WB,%s ; c,C,f,F l "-WB,%s" |  "-WB,<arg> passes <arg> to the back-end via ipacom"
-W* ; A N "" |  "-W<phase>,<arg> sends arg to phase {p=cpp,f=fe,b=be,a=as,l=ld}"
-W ; c,C f self |  "Enable extra warnings"
-VHO:%s ; A F,b,i "-VHO:%s" |  "option group to control vho lowering"
-V%d {warn_ignored("-V <version>");} c p,f,i,b,l "" |  ""
-V warn_ignored("-V"); c p,f,i,b,l "" |  ""
-U* ; A N "" |  ""
-U%s ; A p "-U%s" |  "undefine the following macro"
-TENV:%s Process_Tenv_Group(optargs); A F,b,i "-TENV:%s" |  "option group to control target environment"
-TARG:%s Process_Targ_Group(optargs); A F,b,i "-TARG:%s" |  "option group to control compilation target"
-T%x ; c,C,f,F l "-T %d" |  ""
-SWP:%s ; A b "-SWP:%s" |  ""
-S last_phase=earliest_phase(P_be,last_phase); c,C,f,F N "" |  "produce a .s and stop"
-R* ; A N "" |  "pass flags to RATFOR"
-Q {quiet_flag = FALSE; } A N "" |  "suppress timing information (g++) "
-PURPLE:%s ; f b "-PHASE:purple -PURPLE:%s" |  "option group to control problem isolation slicing tool"
-PROMP:next_id=%d ; f,F,c,C b "-PROMP:next_id=%d" |  ""
-PROMP:%s ; f,F,c,C b "-PHASE:prompf -PROMP:%s" |  ""
-PHASE:%s ; A b,i "-PHASE:%s" |  ""
-P ; A p self |  ""
-Os toggle(&ospace,TRUE); A f,i,b "-OPT:space" |  "Optimize for space"
-Olimit%d warn_no_longer_supported2(option_name,"-OPT:Olimit=n"); A N self |  ""
-Ofast Process_Ofast(""); A N "" |  "default fast option configuration"
-OPT:%s Process_Opt_Group(optargs); A f,i,b,j "-OPT:%s" |  "option group to control optimization"
-O*3 O3_flag=TRUE;toggle(&olevel,3); A f,i,b,p "-O3 -D__OPTIMIZE__" |  "full optimization"
-O*2 toggle(&olevel,2); A f,i,b,p "-O2 -D__OPTIMIZE__" |  "global optimization"
-O*1 toggle(&olevel,1); A f,i,b,p "-O1 -D__OPTIMIZE__" |  "minimal optimization"
-O*0 toggle(&olevel,0); A f,i,b,p "-O0" |  "no optimization"
-O*%d ; A f,i,b,p "-O3" |         "full optimization"
-O toggle(&olevel,2); A f,i,b,p "-O2 -D__OPTIMIZE__" |  "same as -O2"
-NC%d ; f,F F "-NC%d" |  "set max # of continuation lines"
-MT%s ; c,C,a,p p "-MT %s" |         "Change the target of the generated dependency rules"
-MQ%s ; c,C,a,p p "-MQ %s" |         "Same as -MT, but quote characters that are special to Make"
-MP ; c,C,a,p p self |         "With -M or -MM, add phony targets for each dependency"
-MMD ; c,C,a,p p self |         "Write user dependencies to .d output file"
-MM last_phase=P_any_cpp; c,C,a,p p self |         "Output user dependencies of source file"
-MG ; c,C,a,p p self |         "With -M or -MM, treat missing header files as generated files"
-MF%s ; c,C,a,p p "-MF %s" |         "Write dependencies to specified output file"
-MDupdate%s ; A p,l "-MDupdate %s" |  "update the following file with make dependencies"
-MDtarget%s ; A p "-MDtarget %s" |  "use the following as the target for make dependencies"
-MDignore%s ; A l "-MDignore %s" |  ""
-MD ; c,C,a,p p self |         "Write dependencies to .d output file"
-M last_phase=P_any_cpp; A p self |  "run cpp and print list of make dependencies"
-LNO:%s ; A b,l "-LNO:%s" |  "option group to control loop nest optimization"
-LMSG:%s ; A l "-LMSG:%s" |  "option group to control error/warning messages in ld"
-LIST:%s ; A b,i "-LIST:%s" |  "option group to control listing file and contents"
-LD_%s ; A l "-LD_%s" |  ""
-LANG:std toggle(&standard_cplusplus,TRUE); C F,b,i "-LANG:std" |         "Use ISO/ANSI standard-conforming C++ language and library"
-LANG:%s ; c,C,f,F F,b,i "-LANG:%s" |  "option group to control language features"
-L%D add_library_dir(optargs); c,C,f,F l "-L%D" |  "add following directory to the library search path list"
-L ; c,C,f,F l self |  ""
-J*sfm warn_ignored(option_name); c N "" |  ""
-IPA:%s toggle(&ipa,TRUE); A i,j "-IPA:%s" |  "option group to control interprocedural optimizations"
-IPA toggle(&ipa,TRUE); A N "-ipa" |  "Perform interprocedural analysis and optimization"
-INTERNAL:%s ; c,C,f,F F,b,i,j "-INTERNAL:%s" |  "option group to control features while testing"
-INLINE:%s Process_Inline(); A j "-INLINE:%s" |  "specify inline processing option group"
-INLINE Process_Inline(); A N "" |  "request inline processing"
-I- ; A p self |   ""
-I%D ; A p "-I%D -include=%D" |  "add following directory to the include search path list"
-H ; c,C,a,p p self |  "print name of each header file used"
-Gspace%d ; A b "-TENV:Gspace=%d" |  ""
-GRA:%s ; A b "-GRA:%s" |  "option group to control global register allocation"
-GCM:%s {warning("-GCM group no longer supported");} N N "" |  ""
-G%d toggle(&gnum,optargd); A F,b "-G%d" |  ""
-FLIST:%s ; f,F b "-PHASE:flist -FLIST:%s" |  "option group to control Fortran source listing of compiler intermediate"
-F dash_F_option(); f N "" |  "stop after RATFOR (f77 only)"
-F E:%s ; A F "-FE:%s" |  ""
-EL toggle(&endian,ENDIAN_LITTLE); f,F l self "-mlittle-endian -TARG:endian=lit" |  ""
-EB toggle(&endian,ENDIAN_BIG); f,F l self "-mbig-endian -TARG:endian=big" |  ""
-E last_phase=P_any_cpp; A N self |  "run cpp and send result to standard output"
-DEFAULT:%s Process_Default_Group(optargs); A N "" |  ""
-DEBUG:%s ; A F,b,i "-DEBUG:%s" |  "option group to debugging options"
-D%x ; c,C,f,F l "-D %d" |  ""
-D%s ; A p "-D%s" |  "add following macro define"
-CLIST:%s ; c b "-PHASE:clist -CLIST:%s" |  "option group to control C source listing of compiler intermediate"
-CG:%s ; A b "-CG:%s" |  "option group to control code generation"
-C* ; A N "" |  "C/C++: keep C comments after cpp; Fortran: runtime subscript checking"
-A%s ; A p "-A%s" |  "add following cpp assertions"
-66 ; f F self |  "issue errors when non-F66 feature used"
-64 toggle(&abi,ABI_64); A K,K,M,a "-64" ABI64_DEFS "-TARG:abi=n64" "-mabi=64 -mlong64" |         "compile for 64-bit ABI"
-1 ; f F self |  "One trip DO loops"
--write-user-dependencies ; A N "-MMD" |  ""
--write-dependencies ; A N "-MD" |  ""
--whole-archive ; c,C,f,F l self |  ""
--version ; A N "-version" |  ""
--verbose ; A N "-v" |  ""
--user-dependencies ; A N "-MM" |  ""
--undefine-macro%s ; A N "-U%s" |  ""
--trigraphs ; A N "-trigraphs" |  ""
--traditional-p ; A N "-traditional-cpp" |  ""
--traditional ; A N "-traditional" |  ""
--trace-includes ; A N "-H" |  ""
--target%s ; A N "-b%s" |  ""
--symbolic ; A N "-symbolic" |  ""
--static ; c,C,f,F l self |  ""
--specs=%s ; A N "-specs=%s" |  ""
--specs%s ; A N "-specs=%s" |  ""
--shared ; A N "-shared" |  ""
--save-temps ; A N "-save-temps" |  ""
--profile ; A N "-p" |  ""
--print-search-dirs ; A N "-print-search-dirs" |  ""
--print-prog-name=%s ; A N "-print-prog-name=%s" |  ""
--print-prog-name%s ; A N "-print-prog-name=%s" |  ""
--print-missing-file-dependencies ; A N "-MG" |  ""
--print-libgcc-file-name ; A N "-print-file-name=libgcc.a" |  ""
--print-file-name=%s ; A N "-print-file-name=%s" |  ""
--print-file-name%s ; A N "-print-file-name=%s" |  ""
--preprocess ; A N "-E" |  ""
--pipe ; A N "-pipe" |  ""
--pedantic-errors ; A N "-pedantic-errors" |  ""
--pedantic ; A N "-pedantic" |  ""
--output%s ; A N "-o %s" |  ""
--optimize ; A N "-O" |  ""
--no-whole-archive ; c,C,f,F l self |  ""
--no-warnings ; A N "-w" |  ""
--no-standard-libraries ; A N "-nostdlib" |  ""
--no-standard-includes ; A N "-nostdinc" |  ""
--no-line-commands ; A N "-P" |  ""
--library-directory%D ; A N "-L%D" |  ""
--include-with-prefix-before%D ; A N "-iwithprefixbefore %D" |  ""
--include-with-prefix%D ; A N "-iwithprefix %D" |  ""
--include-prefix%s ; A N "-iprefix %s" |  ""
--include-directory-after%D ; A N "-idirafter %D" |  ""
--include-directory%D ; A N "-I%D" |  ""
--include-barrier ; A N "-I-" |  ""
--include%s ; A N "-include %s" |  ""
--imacros%s ; A N "-imacros %s" |  ""
--help ; A N "" |  "print list of possible options"
--force-link%s ; A N "-u %s" |  ""
--extra-warnings ; A N "-W" |  ""
--dependencies ; A N "-M" |  ""
--define-macro%s ; A N "-D%s" |  ""
--debug ; A N "-g" |  ""
--compile ; A N "-c" |  ""
--comments ; A N "-C" |  ""
--assert%s ; A N "-A%s" |  ""
--assemble ; A N "-S" |  ""
--ansi ; A N "-ansi" |  ""
--all-warnings ; A N "-Wall" |  ""
-- check_dashdash(); A N "" |  ""
-### {show_version++; show_but_not_run = TRUE;} A N "-###" |  "Like -v, only nothing is run and args are quoted"
- read_stdin=TRUE; A p "" |  ""
        "Convert files by swapping bytes during I/O"

%%% COMBINATIONS

% -*- fundamental -*-
%
% Copyright 2002, 2003, 2004 PathScale, Inc. All Rights Reserved.
%
% Copyright (C) 2000, 2001 Silicon Graphics, Inc. All Rights Reserved.
%
% This program is free software; you can redistribute it and/or modify it
% under the terms of version 2 of the GNU General Public License as
% published by the Free Software Foundation.
%
% This program is distributed in the hope that it would be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
%
% Further, this software is distributed without any warranty that it is
% free of the rightful claim of any third person regarding infringement
% or the like. Any license provided herein, whether implied or
% otherwise, applies only to this software file. Patent licenses, if
% any, provided herein do not apply to combinations of this program with
% other software, or any other product whatsoever.
%
% You should have received a copy of the GNU General Public License along
% with this program; if not, write the Free Software Foundation, Inc., 59
% Temple Place - Suite 330, Boston MA 02111-1307, USA.
%
% Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pky,
% Mountain View, CA 94043, or:
%
% http:
%
% For further information regarding this notice, see:
%
% http:

%
%

% Lines beginning with % are comment lines,
% lines beginning with %%% denote new sections.

% There are two section types, which can be interspersed:
% Each option in the OPTIONS section has two lines.
% The first line contains:
% the option name,
% an action to be done upon reading the option,
% what languages accept it,
% what phases accept it,
% and what other options it implies.
% The second line contains the help message for that option.

% There must be no spaces in any of the fields except the last one,
% or you can have spaces in an action if you surround it with braces.

% There are several special syntax rules for option names that are used:
% Option names that start with I, e.g. I-foo, are internal names
% that the user cannot access. Internal names are used for phase options
% (e.g. -pic2), and for implicit defaults like -D__sgi.
% A %s after an option name means to use the next string as an argument;
% a %- after an option name means to use the next string or '-' as an argument;
% a %d or %x after an option name means to use the next number as an argument;
% a %D after an option name means to use the next directory as an argument;
% the %{s,x,d,D} formats accept an optional space before the argument;
% if there is no number or directory for a corresponding %{x,d,D},
% then the option is not matched.
% A * in the middle of an argument means there can be an optional space here;
% a * at the end of the argument means the syntax is too complicated and a
% call to a hand-written routine called parse_<prefix>_option will be generated.
% A ? at the end of %D means the option will be ignored if the directory
% argument is missing (1).

% A special action is toggle(&<var>,<val>) which stores the value in the
% variable, and gives an error if the variable has already been set.
% This is useful for catching conflicts like -mips1 -mips2.

% Toggle is also used in support of options from compiler.defaults. When the
% driver starts, <var> is initially set to UNDEFINED. <var> is toggle'd to
% other values according to command line options. When parsing
% compiler.defaults, toggle will silently drop an option if its <var> is not
% UNDEFINED, meaning it is already set by a command line option. All options
% in compiler.defaults must have a <var>.


% The implies field should include the option name if that name is to be
% passed to phases. The special word "self" for the implies field means
% to repeat the option name.
% Repeating a %{d,D,s} in the implies field shows the format to use
% when passing to phases, i.e. whether to have a blank space.

% A simple alias is recognized when you have an option that has
% no action, language=all, phases=none, and 1 implies option.
% This is directly translated to the implies option when processing.

% Lines in the COMBINATIONS section give
% an option combination,
% whether the combination is OKAY, a WARNING, or an ERROR,
% and what implied behavior comes from that option.
% The implied behavior of combinations overrides the implied behavior
% of the individual options.

% The file is first preprocessed by cpp to expand macros, and then sorted
% by option names.

% the letter keys for languages and phases must match what is in lang_defs.c
% ALL and NONE can be used for both languages and phases.


% languages





% f90 used in option name, so use F90 for define




% phases
% p is a phase a well a a language, but the definition is the same
% pfa used in option name, so use PFA for define


% GRP: All the pieces that swallow regular group options


% ALLX: A except pca & pfa which don't accept the usual compilation args



% <combo> <error> <implies>

% !-non_shared means "-non_shared not specified"
%"-O3 !-non_shared" WARNING "-non_shared"

