--------------------------------------------
README for OpenUH CAF (UHCAF) implementation
--------------------------------------------

CAF Installation
------------------

Minimally, to build and install (non-debug installation), do:

$ mkdir openuh-build
$ cd openuh-build
[openuh-build]$ ../source/configure --prefix=<openuh-install-path> \
                --enable-coarrays \
                --with-gasnet-root=<gasnet-install-path>    \
                --with-gasnet-conduit=<MPI,IB or SMP>       \
                --with-armci-root=<armci-install-path>
                --with-armci-conduit=<MPI,IB >       \
You can use either gasnet or armci or both.
[openuh-build]$ make all 
[openuh-build]$ make install

Note that the above three commands should be run from a build directory that
you create outside the OpenUH source tree. For more configure options:
$ ../openuh-source/configure --help


If you need to rerun the configure script, you should probably first delete your
build directory (BUILD directory, not your SOURCE directory!), and then do 'make
all' again. You can also make specific compiler components, enable debug build,
or display verbose build progress with various options specified on the make
command. Type 'make help' and look at the Makefile for further details. In full,
building the entire compiler + libraries may take up to an hour or more,
depending on your system and whether or not you did a parallel make (with the -j
option). 

After you have finished building the compiler, the make install command will
install the GNU front-end files and the actual compiler and runtime libraries
into your installation path (specified by prefix). If you open the Makefile,
you can specify a different prefix if you want to change your installation
path without redoing the configure. If you only want to install/reinstall the
openuh compiler/runtime and not the files associated with the GNU front-end,
you can try make install_compiler instead.

To install the compiler in a x86_64 machine
without 32-bit compatible libraries:

[openuh-build]$ ../source/configure <prev-options>    \
                 --build=x86_64-unknown-linux-gnu     \
                 --target=x86_64-unknown-linux-gnu    \
                 --host=x86_64-unknown-linux-gnu 

[openuh-build]$ make ALL_TARGETS="build lib2" 
[openuh-build]$ make install
                    

Using OpenUH CAF compiler
------------------------
Compile:
$ uhcaf prog.f90 -o prog
or
$ uhcaf prog.caf -o prog
or
$ uhcaf prog.f95 -o prog

uhcaf is a wrapper on uhf90 for coarray fortran

Usage: uhcaf [options] file.caf
Options:
--layer=GASNET/ARMCI    default GASNET
--show-uhf90-options
--help
All uhf90 options also applicable.


Launching a CAF Program
-----------------------

cafrun -np 8 prog

cafrun is a wrapper around mpirun

Usage: cafrun [options] exe
Options:
-np <n>                       - Number of images to launch (not for smp)
--num-pshm-nodes=<n>          - MUST be used only for gasnet smp conduit
--log-levels=all/DEBUG:MEMORY:etc
     -Available log levels:
     FATAL:DEBUG:TIME:NOTICE:TIME_SUMMARY:INIT:MEMORY:CACHE:BARRIER:REDUCE:SYMBOLS
--trace-file=filename         -Default stderr
--shared-memory-size=<n>      -Total size of coarrays in bytes. (default 30MB)
--show-mpirun-options
--help or -h
All mpirun options also applicable.


Environment Variables
---------------------

All the below environment variables are a substitute for the cafrun options.

UHCAF_LOG_LEVELS
Prints trace information. By default log level is set to FATAL, i.e.  only
fatal errors are printed. The following levels can be set: :FATAL, DEBUG,
TIME, NOTICE, TIME_SUMMARY, INIT, MEMORY, CACHE, BARRIER, REDUCE, SYMBOLS.
To set more than one, use a colon seperated list.
e.g export UHCAF_LOG_LEVELS=DEBUG:INFO. To set all: export UHCAF_LOG_LEVELS=all

UHCAF_TRACE_FILE
Prints trace information in a file. By default it prints to stdout.
e.g.  export UHCAF_TRACE_FILE=<filename>

UHCAF_SHARED_MEMORY_SIZE
Size of entire PGAS shared memory, default 30MB, max 4GB
e.g. export UHCAF_SHARED_MEMORY_SIZE=3000000000 #for 3GB

GASNET_PSHM_NODES         
Number of images (SMP conduit only)
e.g. export GASNET_PSHM_NODES=4


