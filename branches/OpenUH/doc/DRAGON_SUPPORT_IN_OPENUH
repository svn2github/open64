--------------------------------------------
README for OpenUH Dragon2011 implementation
--------------------------------------------

OpenUH Dragon2011 Installation
-------------------------------

Minimally, to build and install (non-debug installation), do:

$ mkdir openuh-build
$ cd openuh-build
[openuh-build]$ ../source/configure --prefix=<openuh-install-path> \
                --enable-dragon-support  
                
Then:
[openuh-build]$ make all 
[openuh-build]$ make install

Note that the above  command should be run from a build directory that
you create outside the OpenUH source tree. For more configure options:
$ ../openuh-source/configure --help

If you need to rerun the configure script, you should probably first delete your
build directory (BUILD directory, not your SOURCE directory!), and then do 'make
all' again. You can also make specific compiler components, enable debug build,
or display verbose build progress with various options specified on the make
command. Type 'make help' and look at the Makefile for further details. In full,
building the entire compiler + libraries may take up to an hour or more,
depending on your system and whether or not you did a parallel make (with the -j
option). 

After you have finished building the compiler, the make install command will
install the GNU front-end files and the actual compiler and runtime libraries
into your installation path (specified by prefix). If you open the Makefile,
you can specify a different prefix if you want to change your installation
path without redoing the configure. If you only want to install/reinstall the
openuh compiler/runtime and not the files associated with the GNU front-end,
you can try make install_compiler instead.

To install the compiler in a x86_64 machine
without 32-bit compatible libraries:

[openuh-build]$ ../source/configure <prev-options>    \
                 --build=x86_64-unknown-linux-gnu     \
                 --target=x86_64-unknown-linux-gnu    \
                 --host=x86_64-unknown-linux-gnu 

[openuh-build]$ make ALL_TARGETS="build lib2" 
[openuh-build]$ make install

Known Limitations
------------------

* Fixing C++ name mangling is still under development for the Draon2011.

* Array Region analysis is partially done for this Dragon2011.  


Using OpenUH Dragon Tool
------------------------
A) In order to prepare your program, you must add the flags -ipa -O2 -dragon
for the compile (-c) and link commands as follows.  Compile commands: 

openf90  -c -ipa -O2 -dragon myfile.f

opencc  -c -ipa -O2 -dragon myfile2.f

Link commands: 
 
openf90 -ipa -O2 每dragon myfile.o myfile2.o -o myprogram

B) Note: add -mp flag into compile and link commands if it is an OpenMP
program. If you want to view the data dependence information you need to clean
previous compilation results and recompile the application, with the following
flags: 

openf90  -c -O3 -dragon myfile.f

opencc  -c -O3 -dragon myfile2.f

Link commands:  

openf90 每O3 每dragon myfile.o myfile2.o -o myprogram

Note: do not add 每mp flag in previous compile and link commands even if it is
an OpenMP application.  In this example, OpenUH2011 will generate a series of
*.cfg, *.dep, *.rgn  files for each compilation unit, a project file *.d (where
* denotes the name of the target file) and the empty target file. 

C) In addition to static callgraph and control flowgraph, Dragon can also
display the feedback information from previous executions in dynamic callgraph
and dynamic control flowgraph on Itanium machines.  To achieve this: 

The steps listed below:

1. Compile and link the program using opencc/openf90 with option 
    
    	-fb_create myfeedback -fb_type=1 -fb_phase=0 
    
    This will generate executable files with profiling activated. 

2. Run the program. A feedback file named ※myfeedback§ storing the profiling data is generated. 

   Step 1 and step 2 can be repeated as many times as you want to merge profiling information from several executions. 

3. Compile and link the program again using 

   Opencc/openf90  -fb_opt myfeedback -dragon -ipa -O2 
 
   This will generate the dynamic callgraph and dynamic control flowgraph information stored in .d and .cfg file 

4. Invoke Dragon to load the *.d file and navigate the generated dynamic callgraph/control flowgraph. 

D) In order to support Array Region Analysis, a series of flags have to be used:

   e.g.: openf90 -IPA:array_summary:array_section -pfa -O2 -dragon myfile.f90

   Then a .rgn file will be generated by the OpenUH2011, then Dragon will present all the array region information.
   
For more detailed information and usage on Dragon, please refer to our
Dragon2011 Manual

We would like to thank you for using Dragon2011 and look forward to your
valuable suggestions, comments and questions. Help us make Dragon2011 better by
contacting us at hpctools@cs.uh.edu. Visit our official project website
http://www2.cs.uh.edu/~dragon/home.shtml for updated information about the
project and to know more about other on-going work in our group, visit our
group website http://www2.cs.uh.edu/~hpctools .


