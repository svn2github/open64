#!@BASH_PATH@
#
#
#  CAF compiler wrapper for OpenUH
#
#  Copyright (C) 2010-2012 University of Houston.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement
#  or the like.  Any license provided herein, whether implied or
#  otherwise, applies only to this software file.  Patent licenses, if
#  any, provided herein do not apply to combinations of this program with
#  other software, or any other product whatsoever.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:
#  http://www.cs.uh.edu/~hpctools
#
#

progname="`basename $0`"

tracing_enabled=@CAFRT_ENABLE_TRACES@
GASNET_HOME=@GASNET_HOME@
GASNET_CONDUIT=`echo "@GASNET_CONDUITS@" | cut -d" " -f1`
ARMCI_HOME=@ARMCI_HOME@
COMM_LAYER=@DEFAULT_COMM@
ARMCI_LIBS="@ARMCI_LIBS@"
CC=uhcc
FC=uhf90
CAF_FLAGS="-coarray -fno-second-underscore"
ENVIRONMENT="-----------------------\n"

uhcaf_usage()
{
  cat <<_EOT_

Usage: $progname  [OPTION]... [OPENUH_OPTION]... [SOURCE]...

Where options are

  --layer=L         L represents a specified runtime layer to support remote
                    accesses. Available layers are:
                        gasnet-<conduit>, where <conduit> may be one of: @GASNET_CONDUITS@
                        armci

  --gasnet-path=G   G is the path to a specified GASNet installation
                          Currently set to: $GASNET_HOME

  --armci-path=A    A is the path to a specified ARMCI source directory
                          Currently set to: $ARMCI_HOME

  --help, -h        Displays this menu

  --help2, -H       Displays available options for OpenUH compiler

  --verbose         Displays UHCAF environment variables, and invocation
                    commands used by script and underlying compiler

  --show            Displays compiler defaults and linker settings for UHCAF
                    compiler and exits

  --keep, -k        Keep any temporary files in current directory

Environment Variables:
   MPI_LIB          Path to MPI libs is generally required. Should be
                    compatible with GASNet or ARMCI installation being used.
                        Currently: $MPI_LIB

   MPI_LD_LIBS      Explicitly specify MPI libs to link in.
                        Currently: $MPI_LD_LIBS

_EOT_

  exit 1
}

uhf90_usage()
{
  uhf90 --help
  exit 1
}

add_to_env_list()
{
  var=$1
  val=$(eval "echo \$$1")
  ENVIRONMENT+="  $var: $val\n"
}

set_env()
{
  var=$1
  shift
  val="$*"

  cmd="$var=\"$val\"; export $var"
  eval $cmd

  add_to_env_list $var $val
}

print_error()
{
  echo -e "Error: $*" >&2
  exit 1
}

print_warning()
{
  echo -e "Warning: $*" >&2
}

print_compile_link_info()
{
  LAYER_INSTALLATION_PATH="unknown"
  UHCAF_NETWORK="unknown"
  MSG_LAYER="N/A"
  #LIB_LIST=`echo $COMM_LIBS | sed -e 's/ -/\n\t\t\t -/g'`
  LIB_LIST=`echo "$COMM_LIBS" | fmt -w 50  | awk '{print (NR==1?$0:"\t\t\t " $0)}'`
  if [ "$COMM_LAYER" == "gasnet" ]; then
      LAYER_INSTALLATION_PATH=$GASNET_HOME
      UHCAF_NETWORK=$GASNET_CONDUIT
      if [ "$GASNET_CONDUIT" != "smp" ]; then
          MSG_LAYER=$MPI_LIB
      fi
  elif [ "$COMM_LAYER" == "armci" ]; then
      LAYER_INSTALLATION_PATH=$ARMCI_HOME
      UHCAF_NETWORK=$ARMCI_NETWORK
      MSG_LAYER=$MPI_LIB
  fi

  if [ -n "`$FC -V 2>&1 | grep -i \" --with-build-optimize=debug\"`" ]; then
      OPENUH_IS_DEBUG=yes
  else
      OPENUH_IS_DEBUG=no
  fi

  OPENUH_DEFAULT_OPTIONS="$CAF_FLAGS "
  OPENUH_DEFAULT_OPTIONS+="`$FC -show-defaults 2>&1 | sed -e 's/^[ \t]*//' | sed -n 2p`"
  OPENUH_DEFAULT_OPTIONS=`echo "$OPENUH_DEFAULT_OPTIONS" | fmt -w 50 | \
                          awk '{print (NR==1?$0:"\t\t\t " $0)}'`
  cat <<_EOT_

  ---------------------------------------------------------------------------
                                UHCAF SETTINGS
  ---------------------------------------------------------------------------
  Compiler:
        version:         $(eval "$FC -dumpversion")
        debug build:     $OPENUH_IS_DEBUG
        default options: $OPENUH_DEFAULT_OPTIONS
  ---------------------------------------------------------------------------
  Linker:
        libraries:       $LIB_LIST
  ---------------------------------------------------------------------------
  Communication Layer:
        layer:           $COMM_LAYER ($LAYER_INSTALLATION_PATH)
        tracing:         $tracing_enabled
        network:         $UHCAF_NETWORK
        2-sided msg:     $MSG_LAYER
  ---------------------------------------------------------------------------
_EOT_

  exit 1

}

write_set_save_coarrays()
{
  args=( "$@" )
  echo "" > $set_save_coarrays.c
  echo "/* This file was auto-generated by the uhcaf script. */" >> $set_save_coarrays.c
  echo "" >> $set_save_coarrays.c

  for i in `seq 0 $((${#args[@]}-1))`; do
      coarray_name=${args[i]}
      echo "void *$coarray_name;" >> $set_save_coarrays.c
  done
  echo "unsigned long set_save_coarrays ( void *base_address)" >> $set_save_coarrays.c
  echo "{" >> $set_save_coarrays.c
  echo "  unsigned long offset = 0;" >> $set_save_coarrays.c
  for i in `seq 0 $((${#args[@]}-1))`; do
      coarray_name=${args[i]}
      size=${coarray_name##*_}
      echo "   $coarray_name  = base_address + offset;" >> $set_save_coarrays.c
      echo "   offset += $size;" >> $set_save_coarrays.c
  done
  echo "   return offset;" >> $set_save_coarrays.c
  echo "}" >> $set_save_coarrays.c
}

execute()
{
    command=$@
    if [ "$verbose" == 'y' ]; then
        echo
        echo "====================================================================================="
        echo "   $command" | fold -w 80 --spaces | awk '{print (NR==1?$0 "  \\":"\t   " $0 " \\")}'
        echo ""
        echo "====================================================================================="
        echo
        eval $command
    else
        eval $command
    fi
}

# -------------------------------------------------------------------

if [ $# -eq 0 ]; then
  uhcaf_usage
fi

show_info='n'
verbose='n'
keep='n'
all_args=("$@")
arg_num=0
link='y'
for arg in "$@" ;  do
    pass_arg=yes
    case "$arg" in
        --verbose)
          verbose='y'
          CAF_FLAGS+=" -show"
          pass_arg=no
          ;;
        -h|--help)
          uhcaf_usage
          ;;
        -H|--help2)
          uhf90_usage
          ;;
        -help|-help:*)
          link='n'
          ;;
        -k|--keep|-keep)
          keep='y'
          pass_arg=no
          ;;
        -c|-S|-fe)
          link='n'
          pass_arg=yes
          ;;
        --gasnet-path=*)
          val=`echo UhCaf$arg | sed -e 's/UhCaf--gasnet-path=//g'`
          if [ ! -d "$val" ]; then
            print_error "$val does not exist"
          fi
          GASNET_HOME=$val
          pass_arg=no
          ;;
        --armci-path=*)
          val=`echo UhCaf$arg | sed -e 's/UhCaf--armci-path=//g'`
          if [ ! -d "$val" ]; then
            print_error "$val does not exist"
          fi
          ARMCI_HOME=$val
          pass_arg=no
          ;;
        --layer=*)
          val=`echo UhCaf$arg | sed -e 's/UhCaf--layer=//g'`
          layer=`echo $val | tr '[:upper:]' '[:lower:]'`
          if [ -z "$layer" ]; then
            print_error "layer needs to be specified with --layer"
          elif [ $layer == armci ]; then
            COMM_LAYER=armci
          elif [[ $layer == gasnet-* ]]; then
            GASNET_CONDUIT=`echo $layer | sed 's/gasnet-//'`
            valid=0
            for gc in @GASNET_CONDUITS@; do
              if [ $GASNET_CONDUIT == $gc ]; then
                valid=1
              fi
            done
            if [ $valid == 0 ]; then
              print_error "$layer is not available"
            fi
            COMM_LAYER=gasnet
          elif [ $layer == gasnet ]; then
            COMM_LAYER=gasnet
          else
            print_error "$val layer is not supported"
          fi
          pass_arg=no
          ;;
        --show|--show-info)
          show_info='y'
          pass_arg=no
          ;;
        -show|-show-defaults|-show0|-v)
          verbose='y'
          ;;
        *)
          ;;
    esac

    if [ $pass_arg = no ]; then
        unset all_args[$arg_num]
    fi
    arg_num=$((arg_num+1))
done

all_args=("${all_args[@]}")


# command for creating temporary files
if [ "$keep" == "y" ]; then
  mktemp_cmd="mktemp -p uhcaf.keep"
  if [ ! -d uhcaf.keep ]; then
    mkdir uhcaf.keep
  fi
else
  mktemp_cmd="mktemp"
fi

if [ -z "$COMM_LAYER" ]; then
  print_error "No communication layer specified"
elif [ "$COMM_LAYER" != "gasnet" -a "$COMM_LAYER" != "armci" ]; then
  print_error "Invalid comm layer specified: $COMM_LAYER"
fi

if [ $COMM_LAYER == gasnet -a -z "$GASNET_HOME" ]; then
  print_error "gasnet layer is not available"
elif [ $COMM_LAYER == armci -a -z "$ARMCI_HOME" ]; then
  print_error "armci layer is not available"
fi

if [ $COMM_LAYER == gasnet ]; then

  if [ -z "$GASNET_CONDUIT" ]; then
     print_error "No gasnet conduit set."
  fi

  if [ "$keep" == "y" ]; then
      temp_name=`$mktemp_cmd`
      mv $temp_name $temp_name.mak
      echo -e "uhcaf-rule-mpi-linker:\n\t@echo \$(GASNET_LD)\n\n"  \
      | cat ${GASNET_HOME}/include/$GASNET_CONDUIT-conduit/$GASNET_CONDUIT-par.mak - \
      > $temp_name.mak
      echo -e "uhcaf-rule-gasnet-libs:\n\t@echo \$(GASNET_LIBS)" >> $temp_name.mak
  fi

  get_libs="echo -e \"uhcaf-rule:\n\t@echo \\\$(GASNET_LIBS)\"  \
  | cat ${GASNET_HOME}/include/$GASNET_CONDUIT-conduit/$GASNET_CONDUIT-par.mak -  \
  | make uhcaf-rule --no-print-directory -sf -"
  COMM_LIBS=`eval $get_libs`


  if [ $GASNET_CONDUIT != smp -a $GASNET_CONDUIT != udp ]; then

    ##############################################################
    # Try to figure out appropriate MPI_LIB and MPI_LD_LIBS from
    # GASNet makefiles.
    get_ld="echo -e \"uhcaf-rule:\n\t@echo \\\$(GASNET_LD)\"  \
    | cat ${GASNET_HOME}/include/$GASNET_CONDUIT-conduit/$GASNET_CONDUIT-par.mak -  \
    | make uhcaf-rule --no-print-directory -sf -"
    mpi_ld=`eval $get_ld`
    gasnet_mpi_lib=${mpi_ld%/bin*}/lib
    if [ -z "$MPI_LIB" ]; then
        MPI_LIB=$gasnet_mpi_lib
        if [ ! -d "$MPI_LIB" ]; then
            print_error "MPI_LIB needs to be set"
        fi
    elif [ -d "$gasnet_mpi_lib" -a -d "$MPI_LIB" ]; then
        # check if they aren't the same
        n1=`stat -c "%d%i" $gasnet_mpi_lib`
        n2=`stat -c "%d%i" $MPI_LIB`
        if [ "$n1" != "$n2" ]; then
            warning_msg="It is recommended that MPI_LIB not point to a different"
            warning_msg+=" installation than what GASNet was \nbuilt with."
            warning_msg+=" Consider setting MPI_LIB=$gasnet_mpi_lib instead."
            print_warning $warning_msg
        fi
    elif [ ! -d "$MPI_LIB" ]; then
        print_warning "MPI_LIB not set to valid path. Using $gasnet_mpi_lib instead"
        MPI_LIB=$gasnet_mpi_lib
    fi

    if [ -z "$MPI_LD_LIBS" ]; then
        # MPI lib path was given, but can we figure out the necessary linker
        # args?
        if [ ! -f $MPI_LIB/../bin/mpicc ]; then
            print_error "Can't determine what to link in from $MPI_LIB"
        fi

        mpi_ld=$MPI_LIB/../bin/mpicc

        # does -showme:link work ?
        MPI_LD_LIBS=`eval $mpi_ld -showme:link 2> /dev/null`
        if [ "$?" != "0" ]; then
            # does -link-info work?
            ld_opt=`eval $mpi_ld -link-info 2> /dev/null`
            if [ "$?" != "0" ]; then
                print_error "MPI_LD_LIBS needs to be set"
            fi
            MPI_LD_LIBS=${ld_opt#*-L* }
        fi
        MPI_LD_LIBS="-L$MPI_LIB $MPI_LD_LIBS"
    fi

    # need to link in MPI libs as well.
    COMM_LIBS="$COMM_LIBS -Wl,-rpath,$MPI_LIB $MPI_LD_LIBS"

    add_to_env_list "MPI_LIB"
    add_to_env_list "MPI_LD_LIBS"

  fi

  if [ $GASNET_CONDUIT == udp ]; then
      CAF_FLAGS+=" -link-gcpp"  # use g++ for link if layer is gasnet-udp
  fi

  COMM_LIBS="-lcaf-gasnet-$GASNET_CONDUIT $COMM_LIBS"

elif [ $COMM_LAYER == armci ]; then

  if [ ! -d "$MPI_LIB" ]; then
    # check if mpicc exists in the path. If so, set MPI_LIB accordingly.
    mpi_ld_path=`which mpicc 2> /dev/null`
    if [ -f "$mpi_ld_path" ]; then
        MPI_LIB=`dirname $mpi_ld_path`/../lib
    else
        print_error "MPI_LIB needs to be set to valid path."
    fi
  fi

  if [ -z "$MPI_LD_LIBS" ]; then
      # MPI lib path was given, but can we figure out the necessary linker
      # args?
      if [ ! -f $MPI_LIB/../bin/mpicc ]; then
          print_error "Can't determine what to link in from $MPI_LIB"
      fi

      mpi_ld=$MPI_LIB/../bin/mpicc

      # does -showme:link work ?
      MPI_LD_LIBS=`eval $mpi_ld -showme:link 2> /dev/null`
      if [ "$?" != "0" ]; then
          # does -link-info work?
          ld_opt=`eval $mpi_ld -link-info 2> /dev/null`
          if [ "$?" != "0" ]; then
              print_error "MPI_LD_LIBS needs to be set"
          fi
          MPI_LD_LIBS=${ld_opt#*-L* }
      fi
      MPI_LD_LIBS="-L$MPI_LIB $MPI_LD_LIBS"
  fi

  # need to link in MPI libs as well.
  COMM_LIBS="-Wl,-rpath,$ARMCI_HOME/lib -L$ARMCI_HOME/lib $ARMCI_LIBS -Wl,-rpath,$MPI_LIB $MPI_LD_LIBS"
  COMM_LIBS="-lcaf-armci $COMM_LIBS"

  add_to_env_list "MPI_LIB"
  add_to_env_list "MPI_LD_LIBS"
fi

# display information for uhcaf
if [ "$show_info" == "y" ]; then
  print_compile_link_info
fi

# Now we invoke the compiler.

set_env OPENUH_COMM_LIBS $COMM_LIBS
set_env OPENUH_COMM_LAYER $COMM_LAYER

ENVIRONMENT+="-----------------------\n"


if [ "$keep" == "y" ]; then
  keep_option="-keep"
else
  keep_option=""
fi

compiler_args="${all_args[@]}"

# if no source files specified, then we link
source_seen=no
for arg in $compiler_args; do
    case $arg in
        *.c)
          # C source
          source_seen=yes
          ;;
        *.f|*.for|*.F|*.FOR|*.f90|*.f95|*.caf|*.F90|*.F95)
          # Fortran source
          source_seen=yes
          ;;
        *.s|*.S)
          # assembler
          source_seen=yes
          ;;
        *.B|*.P|*.N|*.I|*.W|*.O|*.i|*.ii|*.r)
          # IR
          source_seen=yes
          ;;
        *.C|*.CC|*.CPP|*.cc|*.cpp|*.cxx|*.c++)
          print_error "uhcaf does not allow C++ source files ($arg)"
          ;;
    esac
done
if [ $source_seen = no -a "$link" == "n" ]; then
    link="y"
fi

if [ "$link" == "n" ]; then
  case $verbose in
    y)
      echo "$progname environment:"
      echo -e $ENVIRONMENT
      echo
      echo "$progname:"
      echo
      ;;
    *)
      ;;
  esac

  execute $FC $CAF_FLAGS $keep_option $compiler_args
  stat=$?

else
  case $verbose in
    y)
      echo "UHCAF ENVIRONMENT:"
      echo -e $ENVIRONMENT
      echo
      ;;
    *)
      ;;
  esac


  # remove any switch for output file from the compile command
  arg_num=0
  output_file=""
  get_output=0
  for arg in $compiler_args; do
      if [ $get_output -eq 1 ]; then
          output_file="-o $arg"
          unset all_args[$arg_num]
          get_output=0
      else
          case $arg in
              -o)
              get_output=1
              unset all_args[$arg_num]
              ;;
          esac
      fi
      arg_num=$((arg_num+1))
  done
  all_args=("${all_args[@]}")
  compiler_args="${all_args[@]}"

  stat=0
  if [ $source_seen = yes ]; then
      execute $FC $CAF_FLAGS $keep_option -c $compiler_args
      stat=$?
  fi

  if [ "$stat" == "0" ]; then

      # add some symbols into executable for cafrun script to check
      link_instructions=`$mktemp_cmd`
      symbol_defs="int OPENUH_COMM_LAYER_IS_$OPENUH_COMM_LAYER; \
                  int OPENUH_GASNET_CONDUIT_IS_$GASNET_CONDUIT; \
                  int OPENUH_ARMCI_NETWORK_IS_$ARMCI_NETWORK;"

      rm -f $link_instructions
      echo $symbol_defs | $CC -c -x c -o $link_instructions.o -

      set_save_coarrays="uhcaf.init_save_coarrays"

      # get the save coarray refs first
      OBJECTS1=""
      OBJECTS2=""
      arg_num=0
      for arg in $compiler_args; do
          case $arg in
              *.f|*.F|*.for|*.FOR|*.f90|*.f95|*.F90|*.F95|*.caf)
                sourcefile=$(basename "$arg")
                sourcename=${sourcefile%.*}
                OBJECTS1+="$sourcename.o "
                unset all_args[$arg_num]
                ;;
              *.o)
                OBJECTS2+="$arg "
                ;;
          esac
          arg_num=$((arg_num+1))
      done
      all_args=("${all_args[@]}")
      compiler_args="${all_args[@]}"

      # collect save coarrayy info from object files
      i=0
      for s in \
        `readelf -sW $OBJECTS1 $OBJECTS2 2>&1 | grep " __SAVE_COARRAY_" |  awk '{print $8}'`; do
        coarray_name[i]=$s
        i=$((i+1))
      done

      if [ $i -gt 0 ]; then
          write_set_save_coarrays "${coarray_name[@]}"
          $CC -c $set_save_coarrays.c

          # link command
          execute $FC $CAF_FLAGS $keep_option $compiler_args $OBJECTS1 \
                $link_instructions.o $set_save_coarrays.o $output_file
          stat=$?
      else
          # link command
          execute $FC $CAF_FLAGS $keep_option $compiler_args $OBJECTS1 \
                $link_instructions.o $output_file
          stat=$?
      fi
  else
      link=-'n'
  fi
fi

if [ "$keep" == "n" -a "$link" == "y" ]; then
   rm -f $link_instructions.o $OBJECTS1 $set_save_coarrays.o $set_save_coarrays.c
fi

exit $stat
