#!@BASH_PATH@

#  CAF launcher wrapper for OpenUH compiler
#
#  Copyright (C) 2010-2011 University of Houston.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement
#  or the like.  Any license provided herein, whether implied or
#  otherwise, applies only to this software file.  Patent licenses, if
#  any, provided herein do not apply to combinations of this program with
#  other software, or any other product whatsoever.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:
#  http://www.cs.uh.edu/~hpctools
#
#

this="`basename $0`"

ENVIRONMENT="-----------------------\n"


this_usage()
{
  cat <<_EOT_

Usage: $this  [OPTIONS]... [PROGRAM] [-- [LAUNCHER_OPTIONS]]

Where options are

  -n, --num-images=N  N is number of images to use

  --log-info=L        Sets additional info for runtime to log.
                      L=all or info list delimited by ':'.
                        Available information to log:
                        FATAL:DEBUG:TIME:NOTICE:TIME_SUMMARY:INIT:MEMORY:
                        CACHE:BARRIER:REDUCE:SYMBOLS

  --log-file=F        F is name of file to store log

  --image-heap=I      I is heap size per image for storing coarray data. It
                      may be an integer which indicates size in bytes, or it
                      may have the suffixes K, M, G which indicates size in
                      kilobytes, megabytes, and gigabytes, respectively.

  --help, -h          Displays this menu

  --help2, -H         Displays more options for underlying launcher ($LAUNCHER)

  --verbose, -v       Verbose

Environment Variables:

   LAUNCHER           Underlying program to use for launching CAF images.
                         Defaults to $LAUNCHER

   LAUNCHER_OPTS      Additional options to pass to underlying launcher apart
                      from number of processes to spawn.

   UHCAF_LOG_INFO     Specifies information for runtime to log.
                         Can be set with --log-info

   UHCAF_LOG_FILE     Specifies file to store runtime log
                         Can be set with --log-file

   UHCAF_IMAGE_NUM_IMAGES
                      Specifies number of images to launch.
                         Can be set/overridden with --num-images

   UHCAF_IMAGE_HEAP_SIZE
                      Specifies heap size per image for storing coarray data.
                         Can be set with --image-heap

   GASNET_PSHM_NODES  Set number of POSIX shared memory nodes for when gasnet-smp
                      layer is used.
                         Can be set with --num-images

   UHCAF_NBPUT
                      Set to 1 to enable Nonblocking put runtime optimization.

   UHCAF_GETCACHE
                      Set to 1 to enable getcache runtime optimization.

   UHCAF_GETCACHE_LINE_SIZE
                      Spefies the size (in bytes) of the cache line used by
                      getcache optimizer. By default it is 64KB.

_EOT_

  exit 1
}

launcher_usage()
{
  eval "$LAUNCHER --help"
  exit 1
}

add_to_env_list()
{
  var=$1
  val=$(eval "echo \$$1")
  ENVIRONMENT+="  $var: $val\n"
}

set_env()
{
  var=$1
  shift
  val="$*"

  cmd="$var=\"$val\"; export $var"
  eval $cmd

  add_to_env_list $var $val
}

print_error()
{
  echo "Error: $1" >&2
  exit 1
}

print_warning()
{
  echo "Warning: $1" >&2
}


# -------------------------------------------------------------------

if [ -z "$LAUNCHER" ]; then
  LAUNCHER=mpirun
fi

if [ $# -eq 0 ]; then
  this_usage
fi

options="`getopt \
		-u \
		-n "$this" \
        -l num-images: \
        -l log-info: \
        -l log-file: \
        -l image-heap: \
        -l help \
        -l help2 \
		-l verbose \
		-o n:hHv \
		-- \
		$*`"

# check ret status
case $? in
  0)
    ;;
  *)
    this_usage
    ;;
esac

set -- $options

verbose='n'
shared='n'
num_images=

while [ $1 != "--" ]
do
  case $1 in
    -v | --verbose)
      verbose='y'
      ;;
    -h | --help)
      this_usage
      ;;
    -H | --help2)
      launcher_usage
      ;;
    -n | --num-images)
      shift
      if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        print_error "num-images specified is not valid"
      fi
      num_images=$1
      ;;
    --log-info)
      shift
      info=`echo $1 | tr '[:lower:]' '[:upper:]'`
      set_env UHCAF_LOG_INFO $info
      ;;
    --log-file)
      shift
      set_env UHCAF_LOG_FILE $1
      ;;
    --image-heap)
      shift
      image_heap=$1

      if [[ ! $image_heap =~ ^[0-9]+$ ]]; then
        if [[  $image_heap =~ ^[0-9]+[kK]$ ]]; then
          image_heap=$((${image_heap%?}*1024))
        elif [[ $image_heap =~ ^[0-9]+[mM]$ ]]; then
          image_heap=$((${image_heap%?}*1024*1024))
        elif [[ $image_heap =~ ^[0-9]+[gG]$ ]]; then
          image_heap=$((${image_heap%?}*1024*1024*1024))
        else
          print_error "Invalid per-image heap size: $image_heap"
        fi
      fi

      ;;
  esac
  shift
done

# now gobble option end marker
shift

# set heap size in environment
if [ -n "$image_heap" ]; then
  set_env UHCAF_IMAGE_HEAP_SIZE $image_heap
elif [ -n "$UHCAF_IMAGE_HEAP_SIZE" ]; then
  add_env_to_list UHCAF_IMAGE_HEAP_SIZE
else
  set_env UHCAF_IMAGE_HEAP_SIZE $((30*1024*1024))
fi

# set number of images in environment
if [ -n "$num_images" ]; then
  set_env UHCAF_NUM_IMAGES $num_images
elif [ -n "$UHCAF_NUM_IMAGES" ]; then
  add_env_to_list UHCAF_NUM_IMAGES
  num_images=$UHCAF_NUM_IMAGES
else
  set_env UHCAF_NUM_IMAGES 1
  num_images=1
fi

progname=$1

COMM_LAYER=`nm -a $progname | grep OPENUH_COMM_LAYER_IS | cut -d" " -f3 \
  | sed 's/OPENUH_COMM_LAYER_IS_//'`

if [ -z "$COMM_LAYER" ]; then
  print_error "Cannot determine which communication layer to use"
fi

if [ $COMM_LAYER == gasnet ]; then
  GASNET_CONDUIT=`nm -a $progname | grep OPENUH_GASNET_CONDUIT_IS | cut -d" " -f3 \
    | sed 's/OPENUH_GASNET_CONDUIT_IS_//'`

  if [ -z "$GASNET_CONDUIT" ]; then
    print_error "Cannot determine which GASNet conduit ot use"
  fi
fi

# Set environment for GASNET if used
if [ $COMM_LAYER == gasnet ]; then
  # enable packing of non-contiguous put/get
  set_env GASNET_VIS_AMPIPE 1

  image_heap=$UHCAF_IMAGE_HEAP_SIZE
  if [ $image_heap -gt 2000000000 ]; then
    gasnet_max_size="$(($image_heap/1000000000))G"
    set_env GASNET_MAX_SEGSIZE $gasnet_max_size
  fi

fi

if [ "$GASNET_CONDUIT" = "smp" ]; then
  set_env GASNET_PSHM_NODES $num_images
  command="$*"
else

  if [ ! -f `which $LAUNCHER` ]; then
    print_error "Could not locate a launcher program. Specify with LAUNCHER variable"
  fi

  add_to_env_list "LAUNCHER"

  launcher_name=`basename $LAUNCHER`

  if [ $num_images -gt 1 -a \( $launcher_name = mpirun -o $launcher_name = mpiexec \) ]; then
    launcher_opts=" -n $num_images $LAUNCHER_OPTS"
  fi

  add_to_env_list "LAUNCHER_OPTS"

  if [ "$GASNET_CONDUIT" = "udp" ]; then
    set_env GASNET_SPAWNFN "C"
    set_env GASNET_CSPAWN_CMD "$LAUNCHER $LAUNCHER_OPTS -n %N %C"
    shift
    command="$progname $num_images $*"
  else
    # rest of gasnet conduits and armci layer

    command="$LAUNCHER $launcher_opts $*"
  fi

fi


ENVIRONMENT+="-----------------------\n"
case $verbose in
  y)
    echo "$this environment:"
    echo -e $ENVIRONMENT
    echo
    echo "$this:"
    echo "  $command"
    echo
    ;;
  *)
    ;;
esac

eval $command

