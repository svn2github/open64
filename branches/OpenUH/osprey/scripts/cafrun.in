#!@BASH_PATH@

#  CAF launcher wrapper for OpenUH compiler
#
#  Copyright (C) 2010-2012 University of Houston.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement
#  or the like.  Any license provided herein, whether implied or
#  otherwise, applies only to this software file.  Patent licenses, if
#  any, provided herein do not apply to combinations of this program with
#  other software, or any other product whatsoever.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:
#  http://www.cs.uh.edu/~hpctools
#
#

this="`basename $0`"
if [ "@CAFRT_ENABLE_TRACES@" = "TRACE" ]; then
  traces_enabled=yes
else
  traces_enabled=no
fi

default_heap_size=@DEFAULT_CAF_HEAP_SIZE@

ENVIRONMENT="-----------------------\n"

this_usage_short()
{
  cat <<_EOT_

Usage: $this  [OPTIONS]... PROGRAM... -- [LAUNCHER OPTIONS]...

For cafrun options, do:
   cafrun --help

For options specific to underlying launcher, do:
   cafrun --help2

_EOT_

}

this_usage()
{
  cat <<_EOT_

Usage: $this  [OPTIONS]... PROGRAM... -- [LAUNCHER OPTIONS]...

Where options are

  --num-images=N      N is number of images to use
  -n N                N is number of images to use

  --trace=L           Sets trace levels for runtime.
                      L=all or trace levels delimited by ':'.
                        Available trace levels:
                        FATAL:DEBUG:TIME:NOTICE:TIME_SUMMARY:INIT:MEMORY:
                        CACHE:BARRIER:REDUCE:SYMBOLS:SERVICE

  --trace-file=F      F is name of file to store trace

  --image-heap=I      I is heap size per image for storing coarray data. It
                      may be an integer which indicates size in bytes, or it
                      may have the suffixes K, M, G which indicates size in
                      kilobytes, megabytes, and gigabytes, respectively.

  --help              Displays this menu

  --help2             Displays more options for underlying launcher

  --verbose           Verbose output

  --show              Display launch settings and exit

Environment Variables:

   LAUNCHER           Underlying launcher to use for launching CAF images
                      for the specified program.
                         By default, set to: $LAUNCHER

   LAUNCHER_OPTS      Additional options to pass to underlying launcher

   UHCAF_TRACE        Specifies trace levels for runtime.
                         Can be set with --trace

   UHCAF_TRACE_FILE   Specifies file to store runtime trace
                         Can be set with --trace-file

   UHCAF_IMAGE_NUM_IMAGES
                      Specifies number of images to launch.
                         Can be set/overridden with --num-images

   UHCAF_IMAGE_HEAP_SIZE
                      Specifies heap size per image for storing coarray data.
                         Can be set with --image-heap

   UHCAF_PROGRESS_THREAD
                      Set to 1 to enable progress thread in CAF runtime

   UHCAF_PROGRESS_THREAD_INTERVAL
                      Set the time interval (ns) between AM serving by progress
                      thread.

   UHCAF_NBPUT
                      Set to 1 to enable Nonblocking put runtime optimization.

   UHCAF_GETCACHE
                      Set to 1 to enable getcache runtime optimization.

   UHCAF_GETCACHE_LINE_SIZE
                      Spefies the size (in bytes) of the cache line used by
                      getcache optimizer. By default it is 64KB.

_EOT_

}

launcher_usage()
{
  if [ -n "$LAUNCHER" ]; then
      eval "$LAUNCHER --help"
  else
      echo "No separate launcher program is used for the executable $prog_name"
  fi
}

add_to_env_list()
{
  var=$1
  val=$(eval "echo \"\$$1\"")
  ENVIRONMENT+="  $var: $val\n"
}

set_env()
{
  var=$1
  shift
  val="$*"

  cmd="$var=\"$val\"; export $var"
  eval $cmd

  add_to_env_list $var $val
}

print_error()
{
  echo "Error: $1" >&2
  exit 1
}

print_warning()
{
  echo "Warning: $1" >&2
}


# -------------------------------------------------------------------

if [ -z "$LAUNCHER" ]; then
  LAUNCHER=mpirun
fi

if [ $# -eq 0 ]; then
  this_usage_short
  exit 1
fi

verbose=no
show=no
shared=no
num_images=
all_args=("$@")
arg_num=0
option_parse=yes
display_help=no
display_help2=no

process_num_images=no
for arg in "$@" ; do
  pass_arg=no
  if [ $option_parse = no ]; then
      pass_arg=yes
  fi

  if [ $process_num_images = yes ]; then
      if ! [[ "$arg" =~ ^[0-9]+$ ]]; then
        print_error "num-images specified is not valid"
      fi
      num_images=$arg
      unset all_args[$arg_num]
      arg_num=$((arg_num+1))
      process_num_images=no
      continue
  fi

  case "$arg" in
    -v|--verbose)
      verbose=yes
      ;;
    --show)
      verbose=yes
      show=yes
      ;;
    --help)
      this_usage
      display_help=yes
      ;;
    --help2)
      display_help2=yes
      ;;
    --num-images=*)
      num_images=`echo UhCaf$arg | sed -e 's/UhCaf--num-images=//g'`
      if ! [[ "$num_images" =~ ^[0-9]+$ ]]; then
        print_error "num-images specified is not valid"
      fi
      ;;
    -n)
      # next arg should be number of images
      process_num_images=yes
      ;;
    --trace=*)
      levels=`echo UhCaf$arg | sed -e 's/UhCaf--trace=//g'`
      levels=`echo $levels | tr '[:lower:]' '[:upper:]'`
      set_env UHCAF_TRACE $levels
      if [ "${traces_enabled}" = "no" ]; then
        print_warning "Traces disabled in CAF runtime"
      fi
      ;;
    --trace-file=*)
      trace_file=`echo UhCaf$arg | sed -e 's/UhCaf--trace-file=//g'`
      set_env UHCAF_TRACE_FILE $trace_file
      if [ "${traces_enabled}" = "no" ]; then
        print_warning "Traces disabled in CAF runtime"
      fi
      ;;
    --image-heap=*)
      image_heap=`echo UhCaf$arg | sed -e 's/UhCaf--image-heap=//g'`

      if [[ ! $image_heap =~ ^[0-9]+$ ]]; then
        if [[  $image_heap =~ ^[0-9]+[kK]$ ]]; then
          image_heap=$((${image_heap%?}*1024))
        elif [[ $image_heap =~ ^[0-9]+[mM]$ ]]; then
          image_heap=$((${image_heap%?}*1024*1024))
        elif [[ $image_heap =~ ^[0-9]+[gG]$ ]]; then
          image_heap=$((${image_heap%?}*1024*1024*1024))
        else
          print_error "Invalid per-image heap size: $image_heap"
        fi
      fi
      ;;
    --)
      option_parse=no
      ;;
    *)
      if [ $option_parse = yes ]; then
          program_cmd+="$arg "
      fi
      ;;
  esac

  if [ $pass_arg = no ]; then
      unset all_args[$arg_num]
  fi
  arg_num=$((arg_num+1))

done

all_args=${all_args[@]}

prog_name=`echo ${program_cmd%% *}`
prog_args=`echo ${program_cmd#$prog_name}`
if [ -z "$prog_name" ]; then
    if [ $display_help = yes -o $display_help2 = yes ]; then
        if [ $display_help = yes  ]; then
            this_usage
        fi
        if [ $display_help2 = yes ]; then
            launcher_usage
        fi
        exit 0
    fi
fi

###########################################
# determine which communication layer to use

if [ -z "$prog_name" ]; then
    echo "Need to specify the program you want to run."
    this_usage_short
    exit 1
fi

COMM_LAYER=`nm $prog_name 2> /dev/null | grep OPENUH_COMM_LAYER_IS | cut -d" " -f3 \
  | sed 's/OPENUH_COMM_LAYER_IS_//'`

if [ -z "$COMM_LAYER" ]; then
    print_error "Error inspecting executable $prog_name for launch information"
fi

GASNET_CONDUIT=""
if [ $COMM_LAYER == gasnet ]; then
  GASNET_CONDUIT=`nm -a $prog_name | grep OPENUH_GASNET_CONDUIT_IS | cut -d" " -f3 \
    | sed 's/OPENUH_GASNET_CONDUIT_IS_//'`

  if [ -z "$GASNET_CONDUIT" ]; then
    print_error "Cannot determine which GASNet conduit to use"
  fi
fi

###########################################
# display help menu and exit, if necessary
if [ $display_help = yes -o $display_help2 = yes ]; then
    if [ $display_help = yes  ]; then
        this_usage
    fi
    if [ $display_help2 = yes ]; then
        if [ "$GASNET_CONDUIT" = "smp" ]; then
            # no launcher used for GASNet's SMP conduit
            unset LAUNCHER
        fi
        launcher_usage
    fi

    exit 0
fi

###########################################
# set heap size in environment
if [ -n "$image_heap" ]; then
  set_env UHCAF_IMAGE_HEAP_SIZE $image_heap
elif [ -n "$UHCAF_IMAGE_HEAP_SIZE" ]; then
  image_heap=$UHCAF_IMAGE_HEAP_SIZE
  if [[ ! $image_heap =~ ^[0-9]+$ ]]; then
    if [[  $image_heap =~ ^[0-9]+[kK]$ ]]; then
      image_heap=$((${image_heap%?}*1024))
    elif [[ $image_heap =~ ^[0-9]+[mM]$ ]]; then
      image_heap=$((${image_heap%?}*1024*1024))
    elif [[ $image_heap =~ ^[0-9]+[gG]$ ]]; then
      image_heap=$((${image_heap%?}*1024*1024*1024))
    else
      print_error "Invalid per-image heap size: $image_heap"
    fi
  fi
  set_env UHCAF_IMAGE_HEAP_SIZE $image_heap
else
  image_heap=$default_heap_size
  if [[ ! $image_heap =~ ^[0-9]+$ ]]; then
    if [[  $image_heap =~ ^[0-9]+[kK]$ ]]; then
      image_heap=$((${image_heap%?}*1024))
    elif [[ $image_heap =~ ^[0-9]+[mM]$ ]]; then
      image_heap=$((${image_heap%?}*1024*1024))
    elif [[ $image_heap =~ ^[0-9]+[gG]$ ]]; then
      image_heap=$((${image_heap%?}*1024*1024*1024))
    else
      print_error "Invalid per-image heap size: $image_heap"
    fi
  fi
  set_env UHCAF_IMAGE_HEAP_SIZE $image_heap
fi

###########################################
# set number of images in environment
if [ -n "$num_images" ]; then
  set_env UHCAF_NUM_IMAGES $num_images
elif [ -n "$UHCAF_NUM_IMAGES" ]; then
  add_to_env_list UHCAF_NUM_IMAGES
  num_images=$UHCAF_NUM_IMAGES
else
  set_env UHCAF_NUM_IMAGES 1
  num_images=1
fi

###########################################
# set launcher information
LAUNCHER_OPTS+=" $all_args"

###########################################
# Set environment for GASNET if used
if [ $COMM_LAYER == gasnet ]; then
  # enable packing of non-contiguous put/get
  set_env GASNET_VIS_AMPIPE 1

  image_heap=$UHCAF_IMAGE_HEAP_SIZE
  if [ $image_heap -gt 2000000000 ]; then
    gasnet_max_size="$(($image_heap/1000000000))G"
    set_env GASNET_MAX_SEGSIZE $gasnet_max_size
  fi

fi

if [ "$GASNET_CONDUIT" = "smp" ]; then
  set_env GASNET_PSHM_NODES $num_images
  command="$program_cmd"  # just throw away $all_args?
else

  if [ ! -f `which $LAUNCHER` ]; then
    print_error "Could not locate a launcher program. Specify with LAUNCHER variable"
  fi

  add_to_env_list "LAUNCHER"

  launcher_name=`basename $LAUNCHER`

  if [ \( $launcher_name = mpirun -o $launcher_name = mpiexec \) ]; then
    if [ $num_images -gt 1 ]; then
      LAUNCHER_OPTS+=" -n $num_images"
    fi
  fi

  add_to_env_list "LAUNCHER_OPTS"

  if [ "$GASNET_CONDUIT" = "udp" ]; then
    set_env GASNET_SPAWNFN "C"
    set_env GASNET_CSPAWN_CMD "$LAUNCHER $LAUNCHER_OPTS -n %N %C"
    command="$prog_name $num_images $prog_args"
  else
    # rest of gasnet conduits and armci layer
    command="$LAUNCHER $LAUNCHER_OPTS $program_cmd"
  fi

fi


ENVIRONMENT+="-----------------------\n"
case $verbose in
  yes)
    echo "$this environment:"
    echo -e $ENVIRONMENT
    echo
    echo "$this:"
    echo "  $command"
    echo
    ;;
  *)
    ;;
esac

###########################################
# exeute command to launch program
if [ $show = no ]; then
    eval $command
fi
