#!/bin/sh

#  Script for running OpenMP programs compiled by OpenUH.
#
#  Copyright (C) 2011 University of Houston.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement
#  or the like.  Any license provided herein, whether implied or
#  otherwise, applies only to this software file.  Patent licenses, if
#  any, provided herein do not apply to combinations of this program with
#  other software, or any other product whatsoever.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:
#  http://www.cs.uh.edu/~hpctools


progname="`basename $0`"

do_help_and_bail()
{
  cat <<_EOT_
Usage: $progname [options...] program

Where options are

  --num-threads=NT              NT is number of OpenMP threads

  --stacksize=SS                SS is OpenMP stack size

  --nested[=B]                  B is one of
                                  true | false
                                Defaults to "true" if B not specified

  --xbarrier-type=BT            BT is one of
                                  linear|simple|tour|tree|dissem

  --task-cutoff=TC              TC is
                                  cutoff:val[,cutoff:val[,...]]
                                where
                                  cutoff is one of
                                    always | never | num_threads | switch |
                                      depth | num_children

                                  val < 1 disables the cutoff,
                                  val > 0 specifies cutoff limit

  --task-pool=TP               TP is one of
                                 default | simple | 2level |
                                   simple_2level | public_private | multilevel

  --task-queue=TQ              TQ is one of
                                 deque | cfifo | lifo | fifo | inv_deque

  --task-queue-num-slots=NS    NS is initial size for each thread's task queue

  --task-chunk-size=CS         CS is 1 - task-queue-num-slots

  --queue-storage=QS           QS is one of
                                 array | dyn_array | list | lockless

  --help, -h                   This message

  --show, -s                   Output the command to be run

_EOT_

  exit 1
}

set_env()
{
  var=$1
  shift
  val="$*"

  cmd="$var=$val; export $var"
  eval $cmd
}


# -------------------------------------------------------------------

if [ $# -eq 0 ]
then
      do_help_and_bail
fi

options="`getopt \
		-n "$progname" \
		-l num-threads: \
		-l stacksize: \
		-l nested:: \
		-l xbarrier-type: \
		-l task-cutoff: \
		-l task-pool: \
		-l task-queue: \
		-l task-queue-num-slots: \
		-l task-chunk-size: \
		-l queue-storage: \
		-l help \
		-l show \
		-o hs \
		-- \
		$@`"

# check ret status
case $? in
  0)
    ;;
  *)
    do_help_and_bail
    ;;
esac

set -- $options

do_show='n'

while [ $1 != "--" ]
do
  case $1 in
    -s | --show)
      do_show='y'
      ;;
    -h | --help)
      do_help_and_bail
      ;;
    --num-threads)
      shift
      set_env OMP_NUM_THREADS $1
      ;;
    --stacksize)
      shift
      set_env OMP_STACKSIZE $1
      ;;
    --nested)
      shift
      # optional arg, trap here
      if [ "$1" = "''" ]
      then
        nested=true
      else
        nested="$1"
      fi
      set_env OMP_NESTED $nested
      ;;
    --xbarrier-type)
      shift
      set_env O64_OMP_XBARRIER_TYPE $1
      ;;
    --task-cutoff)
      shift
      set_env O64_OMP_TASK_CUTOFF $1
      ;;
    --task-pool)
      shift
      set_env O64_OMP_TASK_POOL $1
      ;;
    --task-queue)
      shift
      set_env O64_OMP_TASK_QUEUE $1
      ;;
    --task-queue-num-slots)
      shift
      set_env O64_OMP_TASK_QUEUE_NUM_SLOTS $1
      ;;
    --task-chunk-size)
      shift
      set_env O64_OMP_TASK_CHUNK_SIZE $1
      ;;
    --task-chunk-size)
      shift
      set_env O64_OMP_TASK_CHUNK_SIZE $1
      ;;
    --queue-storage)
      shift
      set_env O64_OMP_QUEUE_STORAGE $1
      ;;
  esac
  shift
done

# gobble option end marker
shift

# remaining args are command, undo the getopt quotes
cmd=""
for a in $@
do
  b=`echo $a | sed -e "s/^'//" -e "s/'$//"`
  cmd="$cmd $b"
  shift
done

case $do_show in
  y)
    echo "$progname environment:"
    env | egrep '^O(MP|64)_' | sed -e 's/^/  /'
    echo
    echo "$progname:"
    echo "  $cmd"
    echo
    ;;
  *)
    ;;
esac

$cmd
