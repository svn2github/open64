!  CAF Reductions Library
!
!  Copyright (C) 2012 University of Houston.
!
!  This program is free software; you can redistribute it and/or modify it
!  under the terms of version 2 of the GNU General Public License as
!  published by the Free Software Foundation.
!  
!  This program is distributed in the hope that it would be useful, but
!  WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!  
!  Further, this software is distributed without any warranty that it is
!  free of the rightful claim of any third person regarding infringement
!  or the like.  Any license provided herein, whether implied or
!  otherwise, applies only to this software file.  Patent licenses, if
!  any, provided herein do not apply to combinations of this program with
!  other software, or any other product whatsoever.
!  
!  You should have received a copy of the GNU General Public License along
!  with this program; if not, write the Free Software Foundation, Inc., 59
!  Temple Place - Suite 330, Boston MA 02111-1307, USA.
!  
!  Contact information:
!  http://www.cs.uh.edu/~hpctools
!

      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      !   Naive All-to-All Reductions 
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      ! assume scalars for now
      subroutine caf_real8_max_to_all(dest, src)
          double precision :: dest, src[*], t

          dest = src

          do i=1,num_images()
            t = src[i]
            dest = max(dest, t)
          end do
      end subroutine

      ! assume scalars for now
      subroutine caf_real8_min_to_all(dest, src)
          double precision :: dest, src[*], t

          dest = src

          do i=1,num_images()
            t = src[i]
            dest = min(dest, t)
          end do
      end subroutine

      ! assume scalars for now
      subroutine caf_real8_sum_to_all(dest, src)
          double precision :: dest, src[*], t

          dest = 0

          do i=1,num_images()
            t = src[i]
            dest = dest + t
          end do
      end subroutine

      ! assume scalars for now
      subroutine caf_int_max_to_all(dest, src)
          integer :: dest, src[*], t

          dest = src

          do i=1,num_images()
            t = src[i]
            dest = max(dest, t)
          end do
      end subroutine

      ! assume scalars for now
      subroutine caf_int_min_to_all(dest, src)
          integer :: dest, src[*], t

          dest = src

          do i=1,num_images()
            t = src[i]
            dest = min(dest, t)
          end do
      end subroutine


      ! assume scalars for now
      subroutine caf_int_sum_to_all(dest, src)
          integer :: dest, src[*], t

          dest = 0

          do i=1,num_images()
            t = src[i]
            dest = dest + t
          end do
      end subroutine


      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      !   Naive All-to-1, 1-to-All Reductions 
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      ! assume scalars for now
      subroutine caf_real8_max_to_all_root(dest, src, root)
          double precision :: dest, src[*]
          integer :: root
          double precision :: t
          double precision, allocatable :: tbuf[:]

          allocate ( tbuf[*] )

          if (this_image() == root) then
            tbuf = src
            do i=1,num_images()
              t = src[i]
              tbuf = max(tbuf, t)
            end do
          end if 

          sync all
          dest = tbuf[root]

          deallocate( tbuf )

      end subroutine

      ! assume scalars for now
      subroutine caf_real8_min_to_all_root(dest, src, root)
          double precision :: dest, src[*]
          integer :: root
          double precision :: t
          double precision, allocatable :: tbuf[:]

          allocate ( tbuf[*] )


          if (this_image() == root) then
            tbuf = dest
            do i=1,num_images()
              t = src[i]
              tbuf = min(tbuf, t)
            end do
          end if 

          sync all
          dest = tbuf[root]

          deallocate( tbuf )

      end subroutine

      ! assume scalars for now
      subroutine caf_real8_sum_to_all_root(dest, src, root)
          double precision :: dest, src[*]
          integer :: root
          double precision :: t
          double precision, allocatable :: tbuf[:]

          allocate ( tbuf[*] )


          if (this_image() == root) then
            tbuf = 0
            do i=1,num_images()
              t = src[i]
              tbuf = tbuf + t
            end do
          end if 

          sync all
          dest = tbuf[root]

          deallocate( tbuf )

      end subroutine

      ! assume scalars for now
      subroutine caf_int_max_to_all_root(dest, src, root)
          integer :: dest, src[*]
          integer :: root
          integer :: t
          integer, allocatable :: tbuf[:]

          allocate ( tbuf[*] )


          if (this_image() == root) then
            tbuf = src
            do i=1,num_images()
              t = src[i]
              tbuf = max(tbuf, t)
            end do
          end if 

          sync all
          dest = tbuf[root]

          deallocate( tbuf )

      end subroutine

      ! assume scalars for now
      subroutine caf_int_min_to_all_root(dest, src, root)
          integer :: dest, src[*], t
          integer, allocatable :: tbuf[:]
          integer :: root

          allocate ( tbuf[*] )


          if (this_image() == root) then
            tbuf = src
            do i=1,num_images()
              t = src[i]
              tbuf = min(tbuf, t)
            end do
          end if 

          sync all
          dest = tbuf[root]

          deallocate( tbuf )

      end subroutine

      ! assume scalars for now
      subroutine caf_int_sum_to_all_root(dest, src, root)
          integer :: dest, src[*]
          integer :: root
          integer :: t
          integer, allocatable :: tbuf[:]

          allocate ( tbuf[*] )


          if (this_image() == root) then
            tbuf = 0
            do i=1,num_images()
              t = src[i]
              tbuf = tbuf + t
            end do
          end if 

          sync all
          dest = tbuf[root]

          deallocate( tbuf )

      end subroutine
