#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2.1 of the GNU Lesser General Public License 
#  as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU Lesser General Public 
#  License along with this program; if not, write the Free Software 
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, 
#  USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for libdwarf
#
#  in the build directory, do  
#  make psbld  to create the ps source files from the mm etc source files.
#  This is not automatic, anyone updating the mm files must 
#  update the ps files manually.
#  For the ps checkin you want to finalize the mm files first,
#  then make psbld for the final time to get the rcs strings
#  right
#

include	$(COMMONDEFS)

CVERSION =

ifeq ($(BUILD_VARIANT), XTND)
XTND = _xtnd
STD_COMPILE_OPTS += -D_LIBELF_XTND_64
else
XTND =
endif

# install mips3 in default place
ifeq ($(BUILD_ARCH), MIPS3)
STD_LIBRARY_LOC=$(DEF_LIBRARY_LOC)
endif

ifeq ($(BUILD_COMPILER), EDG)
WOFF = -fullwarn
else
WOFF =
endif

LCOPTS = $(STD_COMPILE_OPTS)

ifeq ($(BUILD_OS), IRIX)
LCINCS += -I$(BUILD_TOT)/include
else
LCINCS += -I$(BUILD_AREA)/include/libelf
endif

ifeq ($(BUILD_TARGET), MIPS)
# for mips use neither of the *DWARF2* defines
LCDEFS = -D_SYSV -DSYSV -DWORDS_BIGENDIAN -DHAVE_SGIDEFS_H
else
# IA32 or IA64
# The __SYS_IA64_ELF_H__ is for a #ifdef in pro_util.h  davea
# I'm unsure of the 'right' way to do this, but the following works.
LCDEFS = -D_SYSV -DSYSV  -D__MIPS_AND_IA64_ELF_H 
LCDEFS += -DHAVE_SYS_IA64_ELF_H
LCDEFS += -DHAVE_R_IA_64_DIR32LSB 
LCDEFS += -DHAVE___UINT32_T_IN_SYS_TYPES_H
# Use the next line to change to the 64bit extension dwarf2
#LCDEFS += -DHAVE_DWARF2_99_EXTENSION

#use the next line for cygnus, plain 32bit offset with 64bit pointer
#dwarf2
LCDEFS += -DHAVE_OLD_DWARF2_32BIT_OFFSET
endif

LIBRARY = libdwarf$(XTND).a
DSO     = libdwarf$(XTND).so

TARGG_LOC  = /usr/share/src/compiler/dwarf

TARGETS = $(LIBRARY)

#
# any source added to this list should be added to the install list
# below
CFILES	= \
	dwarf_abbrev.c \
	dwarf_alloc.c \
	dwarf_arange.c \
	dwarf_die_deliv.c \
	dwarf_error.c \
	dwarf_form.c \
	dwarf_frame.c \
	dwarf_funcs.c \
	dwarf_global.c \
	dwarf_init_finish.c  \
	dwarf_line.c \
	dwarf_macro.c \
	dwarf_loc.c \
	dwarf_query.c \
	dwarf_string.c \
	dwarf_stubs.c \
	dwarf_types.c \
	dwarf_util.c \
	dwarf_leb.c \
	dwarf_vars.c \
	dwarf_weaks.c    \
 	dwarf_addr_finder.c \
	dwarf_print_lines.c \
	dwarf_sort_line.c \
	pro_alloc.c \
	pro_arange.c \
	pro_die.c \
	pro_encode_nm.c \
	pro_error.c \
	pro_expr.c \
	pro_finish.c \
	pro_forms.c \
	pro_funcs.c \
	pro_frame.c \
	pro_init.c \
	pro_line.c \
	pro_reloc.c \
	pro_reloc_stream.c \
	pro_reloc_symbolic.c \
	pro_macinfo.c \
	pro_pubnames.c \
	pro_section.c \
	pro_types.c \
	pro_vars.c \
	pro_weaks.c 

#
# any source added to this list should be added to the install list
# below
HFILES	= \
	dwarf_abbrev.h \
	dwarf_alloc.h \
	dwarf_arange.h \
	dwarf_die_deliv.h \
	dwarf_error.h \
	dwarf_frame.h \
	dwarf_funcs.h \
	dwarf_global.h \
	dwarf_incl.h \
	dwarf_line.h \
	dwarf_loc.h \
	dwarf_macro.h \
	dwarf_opaque.h \
	dwarf_types.h \
	dwarf_util.h \
	dwarf_vars.h \
	dwarf_weaks.h \
	pro_alloc.h \
	pro_arange.h \
	pro_die.h \
	pro_encode_nm.h \
	pro_error.h \
	pro_expr.h \
	pro_frame.h \
	pro_incl.h \
	pro_line.h \
	pro_macinfo.h \
	pro_opaque.h \
	pro_section.h \
	pro_types.h \
	pro_util.h 

default: first $(TARGETS) last

SI = $(STD_INSTALL) $(STD_INSTALL_READ_MASK) -u guest -g guest

first:
ifeq ($(BUILD_OS), LINUX)
	cd $(BUILD_AREA)/include && $(MAKE)
endif

last: make_libdeps

exports: default
	$(INSTALL) $(STD_INSTALL_READ_MASK) -F $(STD_LIBRARY_LOC) $(TARGETS)

ifeq ($(BUILD_ABI), 64BIT)
ifeq ($(BUILD_TYPE), SHARED)
ifeq ($(BUILD_ARCH), MIPS3)
M3_64_S = TRUE
install: default
	$(STD_INSTALL) $(STD_INSTALL_READ_MASK) -F $(STD_LIBRARY_LOC) $(TARGETS)
	$(SI) -src $(BUILD_BASE)/dwarf_base_types.h -F $(TARGG_LOC) dwarf_base_types.h
	$(SI) -src $(BUILD_BASE)/dwarf_abbrev.c -F $(TARGG_LOC) dwarf_abbrev.c
	$(SI) -src $(BUILD_BASE)/dwarf_alloc.c -F $(TARGG_LOC) dwarf_alloc.c
	$(SI) -src $(BUILD_BASE)/dwarf_arange.c -F $(TARGG_LOC) dwarf_arange.c
	$(SI) -src $(BUILD_BASE)/dwarf_die_deliv.c -F $(TARGG_LOC) dwarf_die_deliv.c
	$(SI) -src $(BUILD_BASE)/dwarf_error.c -F $(TARGG_LOC) dwarf_error.c
	$(SI) -src $(BUILD_BASE)/dwarf_form.c -F $(TARGG_LOC) dwarf_form.c
	$(SI) -src $(BUILD_BASE)/dwarf_frame.c -F $(TARGG_LOC) dwarf_frame.c
	$(SI) -src $(BUILD_BASE)/dwarf_funcs.c -F $(TARGG_LOC) dwarf_funcs.c
	$(SI) -src $(BUILD_BASE)/dwarf_global.c -F $(TARGG_LOC) dwarf_global.c
	$(SI) -src $(BUILD_BASE)/dwarf_init_finish.c -F $(TARGG_LOC) dwarf_init_finish.c
	$(SI) -src $(BUILD_BASE)/dwarf_line.c -F $(TARGG_LOC) dwarf_line.c
	$(SI) -src $(BUILD_BASE)/dwarf_loc.c -F $(TARGG_LOC) dwarf_loc.c
	$(SI) -src $(BUILD_BASE)/dwarf_query.c -F $(TARGG_LOC) dwarf_query.c
	$(SI) -src $(BUILD_BASE)/dwarf_string.c -F $(TARGG_LOC) dwarf_string.c
	$(SI) -src $(BUILD_BASE)/dwarf_stubs.c -F $(TARGG_LOC) dwarf_stubs.c
	$(SI) -src $(BUILD_BASE)/dwarf_types.c -F $(TARGG_LOC) dwarf_types.c
	$(SI) -src $(BUILD_BASE)/dwarf_util.c -F $(TARGG_LOC) dwarf_util.c
	$(SI) -src $(BUILD_BASE)/dwarf_leb.c -F $(TARGG_LOC) dwarf_leb.c
	$(SI) -src $(BUILD_BASE)/dwarf_vars.c -F $(TARGG_LOC) dwarf_vars.c
	$(SI) -src $(BUILD_BASE)/dwarf_weaks.c -F $(TARGG_LOC) dwarf_weaks.c
	$(SI) -src $(BUILD_BASE)/dwarf_addr_finder.c -F $(TARGG_LOC) dwarf_addr_finder.c
	$(SI) -src $(BUILD_BASE)/dwarf_print_lines.c -F $(TARGG_LOC) dwarf_print_lines.c
	$(SI) -src $(BUILD_BASE)/dwarf_sort_line.c -F $(TARGG_LOC) dwarf_sort_line.c
	$(SI) -src $(BUILD_BASE)/pro_alloc.c -F $(TARGG_LOC) pro_alloc.c
	$(SI) -src $(BUILD_BASE)/pro_arange.c -F $(TARGG_LOC) pro_arange.c
	$(SI) -src $(BUILD_BASE)/pro_die.c -F $(TARGG_LOC) pro_die.c
	$(SI) -src $(BUILD_BASE)/pro_error.c -F $(TARGG_LOC) pro_error.c
	$(SI) -src $(BUILD_BASE)/pro_expr.c -F $(TARGG_LOC) pro_expr.c
	$(SI) -src $(BUILD_BASE)/pro_finish.c -F $(TARGG_LOC) pro_finish.c
	$(SI) -src $(BUILD_BASE)/pro_forms.c -F $(TARGG_LOC) pro_forms.c
	$(SI) -src $(BUILD_BASE)/pro_funcs.c -F $(TARGG_LOC) pro_funcs.c
	$(SI) -src $(BUILD_BASE)/pro_frame.c -F $(TARGG_LOC) pro_frame.c
	$(SI) -src $(BUILD_BASE)/pro_init.c -F $(TARGG_LOC) pro_init.c
	$(SI) -src $(BUILD_BASE)/pro_line.c -F $(TARGG_LOC) pro_line.c
	$(SI) -src $(BUILD_BASE)/pro_pubnames.c -F $(TARGG_LOC) pro_pubnames.c
	$(SI) -src $(BUILD_BASE)/pro_reloc.h -F $(TARGG_LOC) pro_reloc.h
	$(SI) -src $(BUILD_BASE)/pro_reloc.c -F $(TARGG_LOC) pro_reloc.c
	$(SI) -src $(BUILD_BASE)/pro_reloc_stream.h -F $(TARGG_LOC) pro_reloc_stream.h
	$(SI) -src $(BUILD_BASE)/pro_reloc_stream.c -F $(TARGG_LOC) pro_reloc_stream.c
	$(SI) -src $(BUILD_BASE)/pro_reloc_symbolic.h -F $(TARGG_LOC) pro_reloc_symbolic.h
	$(SI) -src $(BUILD_BASE)/pro_reloc_symbolic.c -F $(TARGG_LOC) pro_reloc_symbolic.c
	$(SI) -src $(BUILD_BASE)/pro_section.c -F $(TARGG_LOC) pro_section.c
	$(SI) -src $(BUILD_BASE)/pro_types.c -F $(TARGG_LOC) pro_types.c
	$(SI) -src $(BUILD_BASE)/pro_util.c -F $(TARGG_LOC) pro_util.c
	$(SI) -src $(BUILD_BASE)/pro_vars.c -F $(TARGG_LOC) pro_vars.c
	$(SI) -src $(BUILD_BASE)/pro_weaks.c -F $(TARGG_LOC) pro_weaks.c
	$(SI) -src $(BUILD_BASE)/dwarf_abbrev.h -F $(TARGG_LOC) dwarf_abbrev.h
	$(SI) -src $(BUILD_BASE)/dwarf_alloc.h -F $(TARGG_LOC) dwarf_alloc.h
	$(SI) -src $(BUILD_BASE)/dwarf_arange.h -F $(TARGG_LOC) dwarf_arange.h
	$(SI) -src $(BUILD_BASE)/dwarf_die_deliv.h -F $(TARGG_LOC) dwarf_die_deliv.h
	$(SI) -src $(BUILD_BASE)/dwarf_error.h -F $(TARGG_LOC) dwarf_error.h
	$(SI) -src $(BUILD_BASE)/dwarf_frame.h -F $(TARGG_LOC) dwarf_frame.h
	$(SI) -src $(BUILD_BASE)/dwarf_funcs.h -F $(TARGG_LOC) dwarf_funcs.h
	$(SI) -src $(BUILD_BASE)/dwarf_global.h -F $(TARGG_LOC) dwarf_global.h
	$(SI) -src $(BUILD_BASE)/dwarf_incl.h -F $(TARGG_LOC) dwarf_incl.h
	$(SI) -src $(BUILD_BASE)/dwarf_line.h -F $(TARGG_LOC) dwarf_line.h
	$(SI) -src $(BUILD_BASE)/dwarf_loc.h -F $(TARGG_LOC) dwarf_loc.h
	$(SI) -src $(BUILD_BASE)/dwarf_opaque.h -F $(TARGG_LOC) dwarf_opaque.h
	$(SI) -src $(BUILD_BASE)/dwarf_types.h -F $(TARGG_LOC) dwarf_types.h
	$(SI) -src $(BUILD_BASE)/dwarf_util.h -F $(TARGG_LOC) dwarf_util.h
	$(SI) -src $(BUILD_BASE)/dwarf_vars.h -F $(TARGG_LOC) dwarf_vars.h
	$(SI) -src $(BUILD_BASE)/dwarf_weaks.h -F $(TARGG_LOC) dwarf_weaks.h
	$(SI) -src $(BUILD_BASE)/pro_alloc.h -F $(TARGG_LOC) pro_alloc.h
	$(SI) -src $(BUILD_BASE)/pro_arange.h -F $(TARGG_LOC) pro_arange.h
	$(SI) -src $(BUILD_BASE)/pro_die.h -F $(TARGG_LOC) pro_die.h
	$(SI) -src $(BUILD_BASE)/pro_encode_nm.h -F $(TARGG_LOC) pro_encode_nm.h
	$(SI) -src $(BUILD_BASE)/pro_error.h -F $(TARGG_LOC) pro_error.h
	$(SI) -src $(BUILD_BASE)/pro_expr.h -F $(TARGG_LOC) pro_expr.h
	$(SI) -src $(BUILD_BASE)/pro_frame.h -F $(TARGG_LOC) pro_frame.h
	$(SI) -src $(BUILD_BASE)/pro_funcs.h -F $(TARGG_LOC) pro_funcs.h
	$(SI) -src $(BUILD_BASE)/pro_incl.h -F $(TARGG_LOC) pro_incl.h
	$(SI) -src $(BUILD_BASE)/pro_line.h -F $(TARGG_LOC) pro_line.h
	$(SI) -src $(BUILD_BASE)/pro_macinfo.h -F $(TARGG_LOC) pro_macinfo.h
	$(SI) -src $(BUILD_BASE)/pro_opaque.h -F $(TARGG_LOC) pro_opaque.h
	$(SI) -src $(BUILD_BASE)/pro_pubnames.h -F $(TARGG_LOC) pro_pubnames.h
	$(SI) -src $(BUILD_BASE)/pro_section.h -F $(TARGG_LOC) pro_section.h
	$(SI) -src $(BUILD_BASE)/pro_types.h -F $(TARGG_LOC) pro_types.h
	$(SI) -src $(BUILD_BASE)/pro_util.h -F $(TARGG_LOC) pro_util.h
	$(SI) -src $(BUILD_BASE)/pro_vars.h -F $(TARGG_LOC) pro_vars.h
	$(SI) -src $(BUILD_BASE)/pro_weaks.h -F $(TARGG_LOC) pro_weaks.h
	$(SI) -src $(BUILD_TOT)/include/cmplrs/dwarf_addr_finder.h -F $(TARGG_LOC) dwarf_addr_finder.h
	$(SI) -src $(BUILD_BASE)/index.v2.mm -F $(TARGG_LOC) index.v2.mm
	$(SI) -src $(BUILD_BASE)/libdwarf2.1.mm -F $(TARGG_LOC) libdwarf2.1.mm
	$(SI) -src $(BUILD_BASE)/libdwarf2p.1.mm -F $(TARGG_LOC) libdwarf2p.1.mm
	$(SI) -src $(BUILD_BASE)/dwarf.v2.mm -F $(TARGG_LOC) dwarf.v2.mm
	$(SI) -src $(BUILD_BASE)/dwarf.v2.ps -F $(TARGG_LOC) dwarf.v2.ps
	$(SI) -src $(BUILD_BASE)/index.v2.ps -F $(TARGG_LOC) index.v2.ps
	$(SI) -src $(BUILD_BASE)/libdwarf2.1.ps -F $(TARGG_LOC) libdwarf2.1.ps
	$(SI) -src $(BUILD_BASE)/libdwarf2p.1.ps -F $(TARGG_LOC) libdwarf2p.1.ps
	$(SI) -src $(BUILD_BASE)/indexDW.v2 -F $(TARGG_LOC) indexDW.v2
	$(SI) -src $(BUILD_BASE)/COPYING -F $(TARGG_LOC) COPYING
	$(SI) -src $(BUILD_BASE)/LIBDWARFCOPYRIGHT -F $(TARGG_LOC) LIBDWARFCOPYRIGHT
	$(SI) -src $(BUILD_BASE)/README -F $(TARGG_LOC) README
	$(SI) -src $(BUILD_BASE)/Makefile.gifts -F $(TARGG_LOC) Makefile.gifts
	$(SI) -src $(BUILD_TOT)/include/dwarf.h  -F $(TARGG_LOC) dwarf.h
	$(SI) -src $(BUILD_TOT)/include/libdwarf.h  -F $(TARGG_LOC) libdwarf.h
	$(SI) -src $(BUILD_TOT)/include/elfaccess.h  -F $(TARGG_LOC) elfaccess.h
endif
endif
endif
ifndef M3_64_S
install: default
	$(STD_INSTALL) $(STD_INSTALL_READ_MASK) -F $(STD_LIBRARY_LOC) $(TARGETS)
endif

include $(COMMONRULES)

VPATH =  $(BUILD_BASE)

.PRECIOUS : $(LIBRARY)
$(LIBRARY): $(LIBRARY)($(OBJECTS))


# psbld and the other ps creation items are intended to be
# run via
#   make -f Makefile.base psbld
#   and the final run and ps checkin should be AFTER
#   the mm files are finalized so the rcs id is right in the ps files.
psbld: libdwarf2.1.ps libdwarf2p.1.ps dwarf.v2.ps index.v2.ps mips_extensions.ps

# pr expands tabs to spaces: this avoids problems with tab
# interpretation
# we copy back to the build location to update the ps files.
# Do final build *after* mm files finalized to get right rcs strings!
libdwarf2.1.ps:  $(BUILD_BASE)/libdwarf2.1.mm
	pr -t -e $(BUILD_BASE)/libdwarf2.1.mm | tbl | psroff -t -mm >libdwarf2.1.ps
	-cp libdwarf2.1.ps $(BUILD_BASE)
libdwarf2p.1.ps:  $(BUILD_BASE)/libdwarf2p.1.mm
	pr -t -e  $(BUILD_BASE)/libdwarf2p.1.mm | tbl | psroff -t -mm >libdwarf2p.1.ps
	-cp libdwarf2p.1.ps $(BUILD_BASE)

# At present, the newIndex is not usable: we have no tools
# to build a new index page at the moment.
dwarf.v2.ps:  $(BUILD_BASE)/dwarf.v2.mm
	pic $(BUILD_BASE)/dwarf.v2.mm | tbl | psroff -t -mm >dwarf.v2.ps 2> newIndex
	-cp dwarf.v2.ps $(BUILD_BASE)
	-cp newIndex $(BUILD_BASE)

# the index is only useful till the document changes: it is
# not autmatically correct. It was prepared by tools internal
# to use/Novell
index.v2.ps:  index.v2.mm
	pic $(BUILD_BASE)/index.v2.mm | tbl | psroff -t -mm >index.v2.ps
	-cp index.v2.ps $(BUILD_BASE)

mips_extensions.ps: $(BUILD_BASE)/mips_extensions.mm
	pr -t -e $(BUILD_BASE)/mips_extensions.mm | tbl | \
		 psroff -t -mm >mips_extensions.ps
	-cp mips_extensions.ps $(BUILD_BASE)

