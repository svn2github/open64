/* THIS FILE IS AUTOMATICALLY GENERATED BY table */

#include "string_utils.h"

#include "get_options.h"

#include "lib_phase_dir.h"

/* do action associated with option */
extern void
opt_action (int optflag)
{
switch (optflag) {
case O_x:
	set_explicit_lang(option_name,optargs);
	break;
case O_woffall:
	toggle(&msglevel,0);
	break;
case O_w:
	toggle(&msglevel,0);
	break;
case O_vms:
	warn_no_longer_supported2(option_name,"-vms_cc");
	break;
case O_version:
	{show_version++; show_copyright = TRUE; execute_flag = FALSE;}
	break;
case O_v:
	{show_flag = TRUE; show_version++;}
	break;
case O_useas:
	toggle(&skip_as,FALSE);
	break;
case O_subverbose:
	subverbose=1;
	break;
case O_stdinc:
	nostdinc=FALSE;
	break;
case O_specsQ:
	warn_ignored(option_name);
	break;
case O_showt:
	{time_flag = TRUE; }
	break;
case O_showd:
	{show_flag = debug = TRUE; execute_flag = FALSE;}
	break;
case O_show1:
	{show_flag = TRUE; }
	break;
case O_show0:
	{show_flag = TRUE; execute_flag = FALSE;}
	break;
case O_show_defaults:
	{show_defaults = TRUE; execute_flag = FALSE;}
	break;
case O_show:
	{show_flag = TRUE; }
	break;
case O_shared:
	toggle(&shared,DSO_SHARED);
	break;
case O_save_temps:
	keep_flag=TRUE;
	break;
case O_r8:
	toggle(&rflag,2);
	break;
case O_r4:
	toggle(&rflag,1);
	break;
case O_r:
	toggle(&shared,RELOCATABLE);last_phase=P_any_ld;
	break;
case O_print_search_dirs:
	{show_search_path=TRUE; execute_flag=FALSE;}
	break;
case O_print_prog_nameQ:
	{execute_flag=FALSE; print_file_path(optargs, 1);}
	break;
case O_print_multi_lib:
	{execute_flag=FALSE; print_multi_lib();}
	break;
case O_print_file_nameQ:
	{execute_flag=FALSE; print_file_path(optargs, 0);}
	break;
case O_pfa2:
	warn_no_longer_supported2(option_name,"-pfa");
	break;
case O_pfaC:
	{auto_parallelize=TRUE; warning("options after -pfa, are ignored; should just use -pfa");}
	break;
case O_pfalist:
	auto_parallelize=TRUE;keep_list=TRUE;
	break;
case O_pfakeep:
	auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp();
	break;
case O_pfa:
	auto_parallelize=TRUE;
	break;
case O_pcaC:
	{auto_parallelize=TRUE; warning("options after -pca, are ignored; should just use -pca");}
	break;
case O_pcalist:
	auto_parallelize=TRUE;keep_list=TRUE;
	break;
case O_pcakeep:
	auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp();
	break;
case O_pca:
	auto_parallelize=TRUE;
	break;
case O_pass_exit_codes:
	pass_exit_codes=TRUE;
	break;
case O_parse:
	last_phase=earliest_phase(P_any_fe,last_phase);
	break;
case O_o:
	save_name(&outfile,optargs);check_output_name(optargs);cancel_saved_arg(2);
	break;
case O_nostdinc__:
	nostdinc=TRUE;
	break;
case O_nostdinc:
	nostdinc=TRUE;
	break;
case O_noinline:
	Process_Inline();
	break;
case O_noi4:
	toggle(&iflag,1);
	break;
case O_noextend_source:
	fortran_line_length=72;
	break;
case O_nocpp:
	nocpp_flag=TRUE;first_phase=P_any_fe;
	break;
case O_noas:
	toggle(&skip_as,TRUE);
	break;
case O_no_prelink:
	prelink_flag=FALSE;
	break;
case O_mxop:
	toggle(&sse2,TRUE);toggle(&xop,TRUE);
	break;
case O_mtuneQ:
	set_cpu(optargs,M_TUNE);
	break;
case O_mssse3:
	toggle(&sse2,TRUE);toggle(&ssse3,TRUE);
	break;
case O_msse4a:
	toggle(&sse2,TRUE);toggle(&sse4a,TRUE);
	break;
case O_msse42:
	toggle(&sse2,TRUE);toggle(&sse42,TRUE);
	break;
case O_msse41:
	toggle(&sse2,TRUE);toggle(&sse41,TRUE);
	break;
case O_msse3:
	toggle(&sse2,TRUE);toggle(&sse3,TRUE);
	break;
case O_msse2:
	toggle(&mmx,TRUE);toggle(&sse,TRUE);toggle(&sse2,TRUE);
	break;
case O_msse:
	toggle(&mmx,TRUE);toggle(&sse,TRUE);
	break;
case O_mspace:
	toggle(&ospace,TRUE);
	break;
case O_msoft_float:
	warn_ignored(option_name);
	break;
case O_mso:
	toggle(&oscale,TRUE);
	break;
case O_mpclmul:
	toggle(&sse2,TRUE);toggle(&pclmul,TRUE);
	break;
case O_mp_use_locks:
	warn_no_longer_needed(option_name);
	break;
case O_mp_use_copy:
	warn_no_longer_needed(option_name);
	break;
case O_mp_keep:
	warn_no_longer_supported2(option_name,"-CLIST/-FLIST");
	break;
case O_mp:
	toggle(&mpkind,NORMAL_MP);
	break;
case O_module:
	Process_module(optargs);
	break;
case O_mno_xop:
	toggle(&xop,FALSE);
	break;
case O_mno_ssse3:
	toggle(&ssse3,FALSE);
	break;
case O_mno_sse4a:
	toggle(&sse4a,FALSE);
	break;
case O_mno_sse42:
	toggle(&sse42,FALSE);
	break;
case O_mno_sse41:
	toggle(&sse41,FALSE);
	break;
case O_mno_sse3:
	toggle(&sse3,FALSE);
	break;
case O_mno_sse2:
	toggle(&sse2,FALSE);toggle(&sse3,FALSE);toggle(&sse4a,FALSE);
	break;
case O_mno_sse:
	toggle(&sse,FALSE);toggle(&sse2,FALSE);toggle(&sse3,FALSE);toggle(&sse4a,FALSE);
	break;
case O_mno_soft_float:
	warn_ignored(option_name);
	break;
case O_mno_pclmul:
	toggle(&pclmul,FALSE);
	break;
case O_mno_mmx:
	toggle(&mmx,FALSE);toggle(&sse,FALSE);toggle(&sse2,FALSE);toggle(&sse3,FALSE);toggle(&sse4a,FALSE);
	break;
case O_mno_fma4:
	toggle(&fma4,FALSE);
	break;
case O_mno_avx:
	toggle(&avx,FALSE);
	break;
case O_mno_aes:
	toggle(&aes,FALSE);
	break;
case O_mno_3dnow:
	toggle(&m3dnow,FALSE);
	break;
case O_mmmx:
	toggle(&mmx,TRUE);
	break;
case O_mipslibs:
	toggle(&use_mipslibs,TRUE);toggle(&use_craylibs,FALSE);
	break;
case O_mfma4:
	toggle(&sse2,TRUE);toggle(&fma4,TRUE);
	break;
case O_mcpuQ:
	set_cpu(optargs,M_CPU);
	break;
case O_mcmodelQ:
	set_memory_model(optargs);
	break;
case O_mavx:
	toggle(&sse2,TRUE);toggle(&avx,TRUE);
	break;
case O_marchQ:
	set_cpu(optargs,M_ARCH);
	break;
case O_malign_loopsQ__:
	warn_ignored(option_name);
	break;
case O_malign_jumpsQ__:
	warn_ignored(option_name);
	break;
case O_malign_functionsQ__:
	warn_ignored(option_name);
	break;
case O_maes:
	toggle(&sse2,TRUE);toggle(&aes,TRUE);
	break;
case O_macro_expand:
	expand_ftpp_macros=TRUE;
	break;
case O_m64:
	toggle(&abi,ABI_64);
	break;
case O_m3dnow:
	toggle(&m3dnow,TRUE);
	break;
case O_m386:
	warn_ignored(option_name);
	break;
case O_m32:
	toggle(&abi,ABI_N32);
	break;
case O_keep:
	keep_flag=TRUE;
	break;
case O_itanium:
	toggle(&isa,ISA_IA641);
	break;
case O_isystem__:
	accumulate_isystem(optargs);
	break;
case O_ipa:
	toggle(&ipa,TRUE);
	break;
case O_inline:
	Process_Inline();
	break;
case O_ignore_suffix:
	ignore_suffix=TRUE;
	break;
case O_ia32:
	toggle(&abi,ABI_IA32);
	break;
case O_i8:
	toggle(&iflag,3);
	break;
case O_i64:
	toggle(&abi,ABI_I64);
	break;
case O_i4:
	toggle(&iflag,2);
	break;
case O_i32:
	toggle(&abi,ABI_I32);
	break;
case O_i2:
	toggle(&iflag,1);
	break;
case O_help_:
	save_name(&help_pattern,optargs);
	break;
case O_help:
	{print_help = TRUE;}
	break;
case O_h:
	{print_help = TRUE;}
	break;
case O_gstabs3:
	warn_ignored(option_name);
	break;
case O_gstabs2:
	warn_ignored(option_name);
	break;
case O_gstabs1:
	warn_ignored(option_name);
	break;
case O_gstabs0:
	warn_ignored(option_name);
	break;
case O_gstabs_:
	warn_ignored(option_name);
	break;
case O_gstabs:
	warn_ignored(option_name);
	break;
case O_gnu42:
	toggle(&gnu_major_version,4);toggle(&gnu_minor_version,2);
	break;
case O_gnu40:
	toggle(&gnu_major_version,4);toggle(&gnu_minor_version,0);
	break;
case O_gnu4:
	toggle(&gnu_major_version,4);toggle(&gnu_minor_version,2);
	break;
case O_gnu3:
	toggle(&gnu_major_version,3);toggle(&gnu_minor_version,3);
	break;
case O_ggdb3:
	toggle(&glevel,3);
	break;
case O_ggdb:
	toggle(&glevel,2);
	break;
case O_gdwarf_23:
	toggle(&glevel,3);
	break;
case O_gdwarf_22:
	toggle(&glevel,2);
	break;
case O_gdwarf_21:
	toggle(&glevel,1);
	break;
case O_gdwarf_20:
	toggle(&glevel,0);
	break;
case O_gdwarf_2:
	toggle(&glevel,2);
	break;
case O_gdwarf_1_:
	warn_ignored(option_name);
	break;
case O_gdwarf_1:
	warn_ignored(option_name);
	break;
case O_gdwarf:
	warn_ignored(option_name);
	break;
case O_g3:
	toggle(&glevel,3);
	break;
case O_g2:
	toggle(&glevel,2);
	break;
case O_g1:
	toggle(&glevel,1);
	break;
case O_g0:
	toggle(&glevel,0);
	break;
case O_g:
	toggle(&glevel,2);
	break;
case O_fweak:
	warn_ignored(option_name);
	break;
case O_fullwarn:
	toggle(&msglevel,2);
	break;
case O_ftree_vrp:
	warn_ignored(option_name);
	break;
case O_ftpp:
	toggle(&use_ftpp,1);
	break;
case O_ftls_modelQ:
	check_opt_tls_model(optargs);
	break;
case O_ftest_coverage:
	Process_Test_Coverage();
	break;
case O_fssa_dce:
	warn_ignored(option_name);
	break;
case O_fssa_ccp:
	warn_ignored(option_name);
	break;
case O_fssa:
	warn_ignored(option_name);
	break;
case O_freeform:
	toggle(&fortran_form,2);
	break;
case O_framepointer:
	warn_no_longer_supported2(option_name,"-TENV:large_stack");
	break;
case O_fprofile_arcs:
	Process_Profile_Arcs();
	break;
case O_fpic:
	toggle(&pic,TRUE);
	break;
case O_foptimize_sibling_calls:
	warn_ignored(option_name);
	break;
case O_foptimize_register_move:
	warn_ignored(option_name);
	break;
case O_fno_weak:
	warn_ignored(option_name);
	break;
case O_fno_tree_vrp:
	warn_ignored(option_name);
	break;
case O_fno_ssa_dce:
	warn_ignored(option_name);
	break;
case O_fno_ssa_ccp:
	warn_ignored(option_name);
	break;
case O_fno_ssa:
	warn_ignored(option_name);
	break;
case O_fno_pic:
	toggle(&pic,TRUE);
	break;
case O_fno_optimize_sibling_calls:
	warn_ignored(option_name);
	break;
case O_fno_optimize_register_move:
	warn_ignored(option_name);
	break;
case O_fno_math_errno:
	toggle(&fmath_errno,0);
	break;
case O_fno_inline:
	Process_Inline();
	break;
case O_fno_fast_math:
	toggle(&ffast_math,0);
	break;
case O_fno_emit_class_debug_always:
	warn_ignored(option_name);
	break;
case O_fno_cxx_openmp:
	toggle(&fcxx_openmp,0);
	break;
case O_fno_builtin:
	toggle(&fbuiltin,0);
	break;
case O_fno_PIC:
	toggle(&pic,TRUE);
	break;
case O_fmath_errno:
	toggle(&fmath_errno,1);
	break;
case O_fixedform:
	toggle(&fortran_form,1);
	break;
case O_finline:
	Process_Inline();
	break;
case O_ffast_math:
	toggle(&ffast_math,1);
	break;
case O_ff77:
	warn_ignored(option_name);
	break;
case O_femit_class_debug_always:
	warn_ignored(option_name);
	break;
case O_feedback:
	add_string(feedback_files,optargs);
	break;
case O_fe:
	last_phase=earliest_phase(P_any_fe,last_phase);
	break;
case O_fcxx_openmp:
	toggle(&fcxx_openmp,1);
	break;
case O_fcocoQ:
	toggle(&use_coco,TRUE);save_name(&coco_setfile,optargs);
	break;
case O_fcoco:
	toggle(&use_coco,TRUE);
	break;
case O_fbuse:
	Process_fbuse(optargs);
	break;
case O_fbuiltin:
	toggle(&fbuiltin,1);
	break;
case O_fbgen:
	Gen_feedback=TRUE;
	break;
case O_fbexe:
	Process_fbexe(optargs);
	break;
case O_fb_xdir__:
	Process_fb_xdir(optargs);
	break;
case O_fb_typeQ:
	Process_fb_type(optargs);
	break;
case O_fb_phaseQ:
	Process_fb_phase(optargs);
	break;
case O_fb_opt:
	Process_fb_opt(optargs);
	break;
case O_fb_create:
	Process_fb_create(optargs);
	break;
case O_fb_cdir__:
	Process_fb_cdir(optargs);
	break;
case O_fb:
	save_name(&internal_fb_file,optargs);
	break;
case O_fPIC:
	toggle(&pic,TRUE);
	break;
case O_external_gcc:
	toggle(&external_gcc,TRUE);
	break;
case O_extend_source:
	fortran_line_length=132;
	break;
case O_dz:
	warn_ignored(option_name);
	break;
case O_dx:
	warn_ignored(option_name);
	break;
case O_dw:
	warn_ignored(option_name);
	break;
case O_dv:
	warn_ignored(option_name);
	break;
case O_dumpversion:
	{dump_version = TRUE; execute_flag = FALSE;}
	break;
case O_dumpspecs:
	warn_ignored(option_name);
	break;
case O_dumpmachine:
	{printf(OPEN64_TARGET "\n"); execute_flag=FALSE;}
	break;
case O_dt:
	warn_ignored(option_name);
	break;
case O_ds:
	warn_ignored(option_name);
	break;
case O_dr:
	warn_ignored(option_name);
	break;
case O_dp:
	warn_ignored(option_name);
	break;
case O_do:
	warn_ignored(option_name);
	break;
case O_dm:
	warn_ignored(option_name);
	break;
case O_dl:
	warn_ignored(option_name);
	break;
case O_dk:
	warn_ignored(option_name);
	break;
case O_dj:
	warn_ignored(option_name);
	break;
case O_di:
	warn_ignored(option_name);
	break;
case O_dh:
	warn_ignored(option_name);
	break;
case O_dg:
	warn_ignored(option_name);
	break;
case O_df:
	warn_ignored(option_name);
	break;
case O_de:
	warn_ignored(option_name);
	break;
case O_dd:
	warn_ignored(option_name);
	break;
case O_dc:
	warn_ignored(option_name);
	break;
case O_db:
	warn_ignored(option_name);
	break;
case O_da:
	warn_ignored(option_name);
	break;
case O_dX:
	warn_ignored(option_name);
	break;
case O_dS:
	warn_ignored(option_name);
	break;
case O_dR:
	warn_ignored(option_name);
	break;
case O_dP:
	warn_ignored(option_name);
	break;
case O_dL:
	warn_ignored(option_name);
	break;
case O_dG:
	warn_ignored(option_name);
	break;
case O_dF:
	warn_ignored(option_name);
	break;
case O_dE:
	warn_ignored(option_name);
	break;
case O_dC:
	warn_ignored(option_name);
	break;
case O_dB:
	warn_ignored(option_name);
	break;
case O_dA:
	warn_ignored(option_name);
	break;
case O_d8:
	toggle(&dflag,1);
	break;
case O_craylibs:
	toggle(&use_craylibs,TRUE);toggle(&use_mipslibs,FALSE);
	break;
case O_cpp:
	toggle(&use_ftpp,0);first_phase=P_any_cpp;
	break;
case O_cord:
	toggle(&cordflag,TRUE);
	break;
case O_convert:
	toggle(&io_byteswap,2);check_convert_name(optargs);
	break;
case O_compat_gcc:
	toggle(&compat_gcc,TRUE);
	break;
case O_col80:
	fortran_line_length=80;
	break;
case O_col72:
	fortran_line_length=72;
	break;
case O_col120:
	fortran_line_length=120;
	break;
case O_cif:
	keep_cif=TRUE;
	break;
case O_call_shared:
	toggle(&shared,CALL_SHARED);
	break;
case O_c:
	last_phase=(((ipa==TRUE)&&(shared==RELOCATABLE))?P_any_ld:earliest_phase(P_any_as,last_phase));
	break;
case O_byteswapio:
	toggle(&io_byteswap,1);
	break;
case O_backslash:
	first_phase=P_any_fe;
	break;
case O_b:
	warn_ignored(option_name);
	break;
case O_automatic:
	toggle(&isstatic,1);
	break;
case O_apolist:
	auto_parallelize=TRUE;keep_list=TRUE;
	break;
case O_apokeep:
	auto_parallelize=TRUE;keep_list=keep_mp=TRUE;Process_Promp();
	break;
case O_apo:
	auto_parallelize=TRUE;
	break;
case O_ansi:
	toggle(&ansi,STRICT_ANSI);
	break;
case O_Y:
	change_phase_path(optargs);
	break;
case O_Wno_vla:
	warn_ignored(option_name);
	break;
case O_Wno_errorQ:
	warn_ignored(option_name);
	break;
case O_Wframe_larger_than_100000000:
	warn_ignored(option_name);
	break;
case O_Wdisabled_optimization:
	warn_ignored(option_name);
	break;
case O_Wabi:
	warn_ignored(option_name);
	break;
case O_V__:
	{warn_ignored("-V <version>");}
	break;
case O_V:
	{show_version++; show_copyright=TRUE; execute_flag=FALSE;}
	break;
case O_TENV_:
	Process_Tenv_Group(optargs);
	break;
case O_TARG_:
	Process_Targ_Group(optargs);
	break;
case O_S:
	last_phase=earliest_phase(P_be,last_phase);
	break;
case O_Q:
	{quiet_flag = FALSE; }
	break;
case O_Os:
	toggle(&ospace,TRUE);
	break;
case O_Olimit__:
	warn_no_longer_supported2(option_name,"-OPT:Olimit=n");
	break;
case O_Ofast:
	Process_Ofast("");
	break;
case O_OPT_:
	Process_Opt_Group(optargs);
	break;
case O_O3:
	O3_flag=TRUE;toggle(&olevel,3);
	break;
case O_O2:
	toggle(&olevel,2);
	break;
case O_O1:
	toggle(&olevel,1);
	break;
case O_O0:
	toggle(&olevel,0);
	break;
case O_O:
	toggle(&olevel,2);
	break;
case O_MM:
	last_phase=P_any_cpp;
	break;
case O_M:
	last_phase=P_any_cpp;
	break;
case O_LANG_std:
	toggle(&standard_cplusplus,TRUE);
	break;
case O_L__:
	add_library_dir(optargs);
	break;
case O_IPA_:
	toggle(&ipa,TRUE);
	break;
case O_IPA:
	toggle(&ipa,TRUE);
	break;
case O_INLINE_:
	Process_Inline();
	break;
case O_INLINE:
	Process_Inline();
	break;
case O_HUGEPAGE_:
	Process_Hugepage_Group(optargs);
	break;
case O_HUGEPAGE:
	Process_Hugepage_Default();
	break;
case O_HP_:
	Process_Hugepage_Group(optargs);
	break;
case O_HP:
	Process_Hugepage_Default();
	break;
case O_GCM_:
	{warning("-GCM group no longer supported");}
	break;
case O_G__:
	toggle(&gnum,optargd);
	break;
case O_F:
	dash_F_option();
	break;
case O_E:
	last_phase=P_any_cpp;
	break;
case O_DEFAULT_:
	Process_Default_Group(optargs);
	break;
case O__help:
	{print_help = TRUE;}
	break;
case O__:
	check_dashdash();
	break;
case O_PPP:
	{show_version++; show_but_not_run = TRUE;}
	break;
case O_:
	read_stdin=TRUE;
	break;
}
}

/* return whether to mark this flag as unseen */
extern boolean
flag_is_superceded (int optflag)
{
switch (optflag) {
case O_woffall:
	if (msglevel != 0) return TRUE;
	break;
case O_w:
	if (msglevel != 0) return TRUE;
	break;
case O_useas:
	if (skip_as != FALSE) return TRUE;
	break;
case O_shared:
	if (shared != DSO_SHARED) return TRUE;
	break;
case O_r8:
	if (rflag != 2) return TRUE;
	break;
case O_r4:
	if (rflag != 1) return TRUE;
	break;
case O_r:
	if (shared != RELOCATABLE) return TRUE;
	break;
case O_noi4:
	if (iflag != 1) return TRUE;
	break;
case O_noas:
	if (skip_as != TRUE) return TRUE;
	break;
case O_mxop:
	if (sse2 != TRUE) return TRUE;
	break;
case O_mssse3:
	if (sse2 != TRUE) return TRUE;
	break;
case O_msse4a:
	if (sse2 != TRUE) return TRUE;
	break;
case O_msse42:
	if (sse2 != TRUE) return TRUE;
	break;
case O_msse41:
	if (sse2 != TRUE) return TRUE;
	break;
case O_msse3:
	if (sse2 != TRUE) return TRUE;
	break;
case O_msse2:
	if (mmx != TRUE) return TRUE;
	break;
case O_msse:
	if (mmx != TRUE) return TRUE;
	break;
case O_mspace:
	if (ospace != TRUE) return TRUE;
	break;
case O_mso:
	if (oscale != TRUE) return TRUE;
	break;
case O_mpclmul:
	if (sse2 != TRUE) return TRUE;
	break;
case O_mp:
	if (mpkind != NORMAL_MP) return TRUE;
	break;
case O_mno_xop:
	if (xop != FALSE) return TRUE;
	break;
case O_mno_ssse3:
	if (ssse3 != FALSE) return TRUE;
	break;
case O_mno_sse4a:
	if (sse4a != FALSE) return TRUE;
	break;
case O_mno_sse42:
	if (sse42 != FALSE) return TRUE;
	break;
case O_mno_sse41:
	if (sse41 != FALSE) return TRUE;
	break;
case O_mno_sse3:
	if (sse3 != FALSE) return TRUE;
	break;
case O_mno_sse2:
	if (sse2 != FALSE) return TRUE;
	break;
case O_mno_sse:
	if (sse != FALSE) return TRUE;
	break;
case O_mno_pclmul:
	if (pclmul != FALSE) return TRUE;
	break;
case O_mno_mmx:
	if (mmx != FALSE) return TRUE;
	break;
case O_mno_fma4:
	if (fma4 != FALSE) return TRUE;
	break;
case O_mno_avx:
	if (avx != FALSE) return TRUE;
	break;
case O_mno_aes:
	if (aes != FALSE) return TRUE;
	break;
case O_mno_3dnow:
	if (m3dnow != FALSE) return TRUE;
	break;
case O_mmmx:
	if (mmx != TRUE) return TRUE;
	break;
case O_mipslibs:
	if (use_mipslibs != TRUE) return TRUE;
	break;
case O_mfma4:
	if (sse2 != TRUE) return TRUE;
	break;
case O_mavx:
	if (sse2 != TRUE) return TRUE;
	break;
case O_maes:
	if (sse2 != TRUE) return TRUE;
	break;
case O_m64:
	if (abi != ABI_64) return TRUE;
	break;
case O_m3dnow:
	if (m3dnow != TRUE) return TRUE;
	break;
case O_m32:
	if (abi != ABI_N32) return TRUE;
	break;
case O_itanium:
	if (isa != ISA_IA641) return TRUE;
	break;
case O_ipa:
	if (ipa != TRUE) return TRUE;
	break;
case O_ia32:
	if (abi != ABI_IA32) return TRUE;
	break;
case O_i8:
	if (iflag != 3) return TRUE;
	break;
case O_i64:
	if (abi != ABI_I64) return TRUE;
	break;
case O_i4:
	if (iflag != 2) return TRUE;
	break;
case O_i32:
	if (abi != ABI_I32) return TRUE;
	break;
case O_i2:
	if (iflag != 1) return TRUE;
	break;
case O_gnu42:
	if (gnu_major_version != 4) return TRUE;
	break;
case O_gnu40:
	if (gnu_major_version != 4) return TRUE;
	break;
case O_gnu4:
	if (gnu_major_version != 4) return TRUE;
	break;
case O_gnu3:
	if (gnu_major_version != 3) return TRUE;
	break;
case O_ggdb3:
	if (glevel != 3) return TRUE;
	break;
case O_ggdb:
	if (glevel != 2) return TRUE;
	break;
case O_gdwarf_23:
	if (glevel != 3) return TRUE;
	break;
case O_gdwarf_22:
	if (glevel != 2) return TRUE;
	break;
case O_gdwarf_21:
	if (glevel != 1) return TRUE;
	break;
case O_gdwarf_20:
	if (glevel != 0) return TRUE;
	break;
case O_gdwarf_2:
	if (glevel != 2) return TRUE;
	break;
case O_g3:
	if (glevel != 3) return TRUE;
	break;
case O_g2:
	if (glevel != 2) return TRUE;
	break;
case O_g1:
	if (glevel != 1) return TRUE;
	break;
case O_g0:
	if (glevel != 0) return TRUE;
	break;
case O_g:
	if (glevel != 2) return TRUE;
	break;
case O_fullwarn:
	if (msglevel != 2) return TRUE;
	break;
case O_ftpp:
	if (use_ftpp != 1) return TRUE;
	break;
case O_freeform:
	if (fortran_form != 2) return TRUE;
	break;
case O_fpic:
	if (pic != TRUE) return TRUE;
	break;
case O_fno_pic:
	if (pic != TRUE) return TRUE;
	break;
case O_fno_math_errno:
	if (fmath_errno != 0) return TRUE;
	break;
case O_fno_fast_math:
	if (ffast_math != 0) return TRUE;
	break;
case O_fno_cxx_openmp:
	if (fcxx_openmp != 0) return TRUE;
	break;
case O_fno_builtin:
	if (fbuiltin != 0) return TRUE;
	break;
case O_fno_PIC:
	if (pic != TRUE) return TRUE;
	break;
case O_fmath_errno:
	if (fmath_errno != 1) return TRUE;
	break;
case O_fixedform:
	if (fortran_form != 1) return TRUE;
	break;
case O_ffast_math:
	if (ffast_math != 1) return TRUE;
	break;
case O_fcxx_openmp:
	if (fcxx_openmp != 1) return TRUE;
	break;
case O_fcocoQ:
	if (use_coco != TRUE) return TRUE;
	break;
case O_fcoco:
	if (use_coco != TRUE) return TRUE;
	break;
case O_fbuiltin:
	if (fbuiltin != 1) return TRUE;
	break;
case O_fPIC:
	if (pic != TRUE) return TRUE;
	break;
case O_external_gcc:
	if (external_gcc != TRUE) return TRUE;
	break;
case O_d8:
	if (dflag != 1) return TRUE;
	break;
case O_craylibs:
	if (use_craylibs != TRUE) return TRUE;
	break;
case O_cpp:
	if (use_ftpp != 0) return TRUE;
	break;
case O_cord:
	if (cordflag != TRUE) return TRUE;
	break;
case O_convert:
	if (io_byteswap != 2) return TRUE;
	break;
case O_compat_gcc:
	if (compat_gcc != TRUE) return TRUE;
	break;
case O_call_shared:
	if (shared != CALL_SHARED) return TRUE;
	break;
case O_byteswapio:
	if (io_byteswap != 1) return TRUE;
	break;
case O_automatic:
	if (isstatic != 1) return TRUE;
	break;
case O_ansi:
	if (ansi != STRICT_ANSI) return TRUE;
	break;
case O_Os:
	if (ospace != TRUE) return TRUE;
	break;
case O_O2:
	if (olevel != 2) return TRUE;
	break;
case O_O1:
	if (olevel != 1) return TRUE;
	break;
case O_O0:
	if (olevel != 0) return TRUE;
	break;
case O_O:
	if (olevel != 2) return TRUE;
	break;
case O_LANG_std:
	if (standard_cplusplus != TRUE) return TRUE;
	break;
case O_IPA_:
	if (ipa != TRUE) return TRUE;
	break;
case O_IPA:
	if (ipa != TRUE) return TRUE;
	break;
case O_G__:
	if (gnum != optargd) return TRUE;
	break;
}
return FALSE;
}

