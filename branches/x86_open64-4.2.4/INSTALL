Introduction
------------

This document explains how to compile and install x86 Open64 from source
on an x86-64 based system. There are many variations on this process; for
simplicity, we describe the steps that we used to build the x86 Open64
4.2.4 binary packages available on http://developer.amd.com/cpu/open64.

We also describe some known issues encountered when building on Ubuntu
and Fedora systems. We plan to address some of these issues in a future
release.

    * Prerequisites
    * Obtaining the Source Code
    * Compiling
    * Installation
    * Notes on Building on Ubuntu 10.04
    * Notes on Building on Fedora 13


Prerequisites
-------------

Although the x86 Open64 compiler suite can be built on 32-bit or 64-bit
Linux systems, we always build on a 64-bit Linux system where both 32-bit
and 64-bit code generation can be tested. We used 64-bit SUSE Linux
Enterprise Server 10 with SP2 installed.

By default, the build process will use GCC to build most compiler
components. We used GCC 4.1.2 as provided with SLES 10 SP2.

To build the x86 Open64 libraries, we used the x86 Open64 4.2.3.2 binary
release for x86_64 as downloaded from http://developer.amd.com/cpu/open64.
This document assumes that x86 Open64 4.2.3.2 is installed into /opt on
the build system.


Obtaining the Source Code
-------------------------

You can obtain the source code archive from the Downloads section at
http://developer.amd.com/cpu/open64.

To extract the source code, use the command:

  tar xjvf x86_open64-4.2.4-1.src.tar.bz2


Compiling
---------

First set your environment to use the installed x86 Open64 4.2.3.2 compiler.
This step will be necessary to build the libraries. These commands assume you
are using an sh-compatible shell, such as bash.

  export TOOLROOT=/opt/x86_open64-4.2.3.2
  export PATH=${TOOLROOT}/bin:$PATH

Now, to build the x86 Open64 compiler components, switch to the
x86_open64-4.2.4 directory and execute the following command:

  make all MACHINE_TYPE=i386

We build using 'MACHINE_TYPE=i386' because there are some known problems
when using the 64-bit compiler binaries to generate 32-bit code. The
compiler binaries can generate both 32-bit and 64-bit code regardless of
how they are built.

To build the libraries, execute the following commands:

  make lib MACHINE_TYPE=i386 BUILD_COMPILER=OSP
  make -C osprey/targx8664_builtonia32 BUILD_COMPILER=OSP


Installation
------------

The install script will install the Open64 compiler and library components
in the directory defined by the environment TOOLROOT. In this example,
we install to the directory 'myopen64' in the current home directory:

  export TOOLROOT=${HOME}/myopen64
  ./install_compiler.sh i386

To use the compiler, you just need to put the 'myopen64/bin' directory on
your PATH. You could add a command like the following to your .bashrc:

  export PATH=${HOME}/myopen64/bin:$PATH

You do not normally need to set the TOOLROOT environment variable to run
the compiler.


Notes on Building on Ubuntu 10.04
---------------------------------
We were able to build the 4.2.4 Open64 compiler on ubuntu 10.04 from these
sources by making changes to address the following three issues:

1. Install pre-requisite packages if they are not already installed:

   apt-get install build-essential gfortran flex bison
   apt-get install gcc-multilib g++-multilib gfortran-multilib lib32gcc1

2. Add "SHELL=/bin/bash" to the build lines since ubuntu uses /bin/dash instead
   of /bin/bash as the default shell.

3. In an ubuntu 64-bit system, /usr/lib contains 64-bit libraries and startup
   files.  The build compiler above (4.2.3.2) doesn't work because it assumes
   this directory has 32-bit libraries and startup files.

   What we did instead was temporary copy some libraries in place and use these
   along with the newly built Open64 4.2.4 compiler to build the final version
   of the compiler.

The complete sequence we used including these steps was:

   # build the compiler and install initial compiler pieces in ~/myopen64

   make all MACHINE_TYPE=i386 SHELL=/bin/bash
   export TOOLROOT=~/myopen64
   export PATH=${TOOLROOT}/bin:$PATH

   ./install_compiler.sh i386

   # Also copy temporary library pieces from build compiler
   #   /opt/x86_open64-4.2.3.2/lib/gcc-lib/x86_64-open64-linux/4.2.3.2
   # to ~/myopen64

   export BUILD_COMPILER_LIBDIR=\
     /opt/x86_open64-4.2.3.2/lib/gcc-lib/x86_64-open64-linux/4.2.3.2
   export NEW_COMPILER_LIBDIR=\
     ${TOOLROOT}/lib/gcc-lib/x86_64-open64-linux/4.2.4/

   cp $BUILD_COMPILER_LIBDIR/libacml_mv.a $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libffio.a $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libffio.so $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libfortran.a $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libfortran.so $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libmv.a $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libmv.so.1 $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libopen64rt.a $NEW_COMPILER_LIBDIR/
   cp $BUILD_COMPILER_LIBDIR/libopen64rt_shared.a $NEW_COMPILER_LIBDIR/

   cp $BUILD_COMPILER_LIBDIR/32/libacml_mv.a $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libffio.a $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libffio.so $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libfortran.a $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libfortran.so $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libmv.a $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libmv.so.1 $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libopen64rt.a $NEW_COMPILER_LIBDIR/32
   cp $BUILD_COMPILER_LIBDIR/32/libopen64rt_shared.a $NEW_COMPILER_LIBDIR/32

   # build the libraries using the built 4.2.4 compiler
   make lib MACHINE_TYPE=i386 SHELL=/bin/bash BUILD_COMPILER=OSP
   make -C osprey/targx8664_builtonia32 SHELL=/bin/bash BUILD_COMPILER=OSP

   # install the newly built libraries
   ./install_compiler.sh i386


Notes on Building on Fedora 13
------------------------------

We were able to build the 4.2.4 Open64 compiler on Fedora 13 from these
sources by making changes to address the issues listed below.  After
applying these changes, we followed instructions given in the Compiling
section of this document to complete our build:

1. Install pre-requisite packages if they are not already installed:

   yum install gcc gcc-c++ flex bison
   yum install libstdc++.i686 glibc-devel.i686

After making these source changes and then following instructions in the
Compiling section, we were able to successfully build and run on Fedora.

