README
-----------------------------------------------------------------------

The x86 Open64 compiler suite includes optimizing compilers and runtime
support for C, C++ and FORTRAN 77/90/95. These compilers produce code
that follows the corresponding ABI on IA-32/Linux and x86_64/Linux and
and is compatible with the latest GCC revision. This means that objects
produced by the x86 Open64 compilers can link with objects produced by
other ABI-compliant compilers. The x86 Open64 compiler suite is supported
on 64-bit Linux host systems.

The latest information and updates for the x86 Open64 compilers can
be found at http://developer.amd.com/cpu/open64. The downloadable
packages of sources or binaries can be found in the Downloads section at
http://developer.amd.com/cpu/open64.

To report a problem or ask for help, please see the Support section at
http://developer.amd.com/cpu/open64.

Language highlights:

  C compatible with gcc, with many gcc extensions
  C++ compatible g++, with many g++ extensions
  FORTRAN 77/90/95 support

Optimization highlights:

  Global optimizations, e.g.
      Partial redundancy elimination
      Constant propagation and code motion
      Strength reduction and expression simplification
      Dead code elimination and common sub-expression elimination

  Loop-nest optimizations, enabled at '-O3', e.g.
      Loop fusion and distribution
      Loop interchange and cache locality optimization
      Vectorization for SSE* code generation
      SW data prefetching

  Inter-procedural analysis and optimization, enabled with '-ipa', e.g.
      Function inlining and cloning
      Inter-procedural alias analysis
      Data re-layout optimizations for structure members
      Inter-procedural constant propagation and dead code elimination

  Code generation and optimizations:
      Advanced register allocation
      Loop unrolling
      Instruction selection and scheduling
      Peephole optimizations

  Feedback-directed optimizations, enabled at ‘-fb_create/-fb_opt’, e.g.
      Code layout
      Feedback-directed function inlining and de-virtualization
      Feedback-guided register spilling
      Value specialization

Other features

  Support for building high performance parallel code using MPI, OpenMP,
  and auto-parallelization. (*)

(*) See Release Notes for known limitations with parallel code generation.


Installation Information

For details about how to build and install the compiler from source,
please refer to the INSTALL document.
