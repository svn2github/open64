# -*- Makefile -*-
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#

#
#  Makefile.base for ipa
#

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)


ifeq ($(BUILD_TARGET), IA64)
# need _ version of targ_ia64
LCDEFS += -D__MIPS_AND_IA64_ELF_H -DTARG_IA64
LC++DEFS +=  $(LCDEFS)
endif

CFLAGS += -DOSP_OPT
CXXFLAGS += -DOSP_OPT

LCDEFS += $(STD_COMPILE_OPTS)
LC++DEFS += $(STD_COMPILE_OPTS)

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------
RIPA_DIR                = $(BUILD_TOT)/ripa

COMMON_DIR              = $(BUILD_TOT)/common
COMMON_COM_DIR          = $(COMMON_DIR)/com
COMMON_LIB_DIR          = $(COMMON_DIR)/lib
COMMON_UTIL_DIR         = $(COMMON_DIR)/util

COMMON_COM_TARG_DIR     = $(COMMON_COM_DIR)/$(BUILD_TARGET_DIR)
COMMON_UTIL_TARG_DIR    = $(COMMON_UTIL_DIR)/$(BUILD_TARGET_DIR)

LD_DIR                  = $(BUILD_TOT)/fake_ld

INCLUDE_DIR             = $(ROOT)/usr/include

LD_COMMON_DIR           = $(LD_DIR)/common
LIBCOMUTIL_DIR          = $(BUILD_TOT)/libcomutil

TARGDIR                 = $(BUILD_AREA)
TARG_ELF_DIR            = $(TARGDIR)/libelf
TARG_ELFUTIL_DIR        = $(TARGDIR)/libelfutil
ELF_LIB_DIRS            = $(TARG_ELF_DIR) $(TARG_ELFUTIL_DIR)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory with which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#----------------------------------------------------------------------
ifdef LOCAL_BE_DIR
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
TARG_BE_DIR = $(TARGDIR)/be
TARG_IPL_DIR = $(TARGDIR)/ipl
endif

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(RIPA_DIR)/main \
  $(RIPA_DIR)/rta

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(BE_REGION_DIR)      \
  $(BE_OPT_DIR)		\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_UTIL_DIR)    \
  $(LD_COMMON_DIR)	\
  $(LD_DIR)		\
  $(TARGDIR)/be		\
  $(BUILD_TOT)/include \
  $(RIPA_DIR)/rta \
  $(BUILD_TOT)/libelf/lib \
  $(BUILD_TOT)/libelfutil

RTADUMP_DIRS = \
  $(RIPA_DIR)/rta

RTADUMP_INC_DIRS = \
  $(RIPA_DIR)/rta/open64

ifeq ($(BUILD_OS), LINUX)
HEADER_DIRS += $(TARGDIR)/include/libelf
endif

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

RIPA_LOCAL_SRCS =  \
	ripa_main.cxx \
	rta_scn.cxx \
	messg.cxx

ELF_LIBS=-lelf -lelfutil
RIPA_LOCAL_OBJS = $(RIPA_LOCAL_SRCS:.cxx=.o)
RIPA_CXX_OBJS = $(RIPA_CXX_SRCS:.cxx=.o) 
RIPA_OBJS = $(RIPA_SRCS:.cxx=.o)
RIPA_ALL_OBJS = $(RIPA_LOCAL_OBJS)

RTA_DUMP_SRCS = \
	elf_reader64.cxx \
	elf_reader.cxx \
	messg.cxx \
	rta.cxx \
	rta_main.cxx \
	rta_manager.cxx \
	rta_reader.cxx \
	ipl_summary_print.cxx \
	wn_reader.cxx 

RTA_DUMP_OBJS = $(RTA_DUMP_SRCS:.cxx=.o)

# extra files to be removed with make clobber
LDIRT = 

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS) $(STD_C_OPTS)

HOSTDEFS += -D_NEW_SYMTAB -D_MERGE_SUMMARY_ST_IDX_=1 -DBACK_END -fpic

LCINCS = $(addprefix -I, $(HEADER_DIRS))
LCDEFS += $(HOSTDEFS)
LCDEFS += -DSTD_MONGOOSE_LOC='"$(STD_MONGOOSE_LOC)"' -D_SUPPORT_IPA -D_MULTIGOT
LC++DEFS += $(HOSTDEFS) -DSTD_MONGOOSE_LOC='"$(STD_MONGOOSE_LOC)"'
LC++DEFS += -D_SUPPORT_IPA -DMONGOOSE_BE
LC++INCS = $(LCINCS)

ifeq ($(BUILD_OPTIMIZE), DEBUG)
LCDEFS += 
#-DIPA_CPROP_TEST
LC++DEFS += -DDEBUG
# -DIPA_CPROP_DEBUG
HOSTDEFS += -DIs_True_On
HOSTDEFS += -DInsist_On
endif

# add define HOST_IA64 to choose suitable headfile
ifeq (${BUILD_ARCH}, IA64)
HOSTDEFS +=-DHOST_IA64
endif

GLDOPTS = $(STD_LOAD_OPTS)


DSOSTARTOPT = -check_registry $(TARG_BE_DIR)/so_locations -show -Wl,-no_unresolved
DSOSTARTOPT_32 = $(DSOSTARTOPT)
DSOSTARTOPT_N32 = $(DSOSTARTOPT)

TARGETS = ripa rtadump
TARGETS_PURE = ripa.pure rtadump.pure

default: first $(TARGETS) last
pure: $(TARGETS_PURE)

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
## verify that be.so is up to date
	$(call submake,$(TARG_BE_DIR))
## verify that ipl.so is up to date
	$(call submake,$(TARG_IPL_DIR))
## verify that libelf.a is up to date
	$(call submake,$(TARG_ELF_DIR))
## verify that libelfutil.a is up to date
	$(call submake,$(TARG_ELFUTIL_DIR))

last : make_deps

ripa: $(RIPA_ALL_OBJS)
	$(link.c++f) -L$(TARG_ELF_DIR) -L$(TARG_ELFUTIL_DIR) -o $@ $(RIPA_ALL_OBJS) $(ELF_LIBS)

wn_reader.o: LCINCS += -I$(RTADUMP_INC_DIRS)
ipl_summary_print.o: LCINCS += -I$(RTADUMP_INC_DIRS)

rtadump: $(RTA_DUMP_OBJS)
	$(link.c++f) -I$(RTADUMP_INC_DIRS) -o $@ $(RTA_DUMP_OBJS)

install: default

install.pure: $(TARGETS_PURE)

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)
