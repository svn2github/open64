# ====================================================================
#
# Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Open64 is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Open64 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.
#
# ====================================================================
#
# This file contains a list of the environment variables that
# can be customized on a per-unit or per-test basis within
# CTI. The variables in this file are read by the 
# .../Scripts/customizeOptions and .../Scripts/Customize.pm
# shell and perl scripts.
#
# Each item in this file is a tuple <X,Y>, where X is the name
# of the option (environment variable) and Y is a description
# of what that option controls. The intent is that the descriptions
# can be read by a script for display on a web page.
#
#
ALT_LINK_COMPILER@Name of the compiler or wrapper to be used to link a test, if that wrapper is different from the compiler (CC/CXX/F90/FC). The default is to use the same compiler for both compile and link-- if a different wrapper is needed (ex: compile test case with cc, link with f90), the it can be specified here. Value must be an absolute path.
ALT_LINK_COMP_OPTIONS@Specifies options to be passed to the compiler selected with ALT_LINK_COMPILER.
APPLICATION_RUN_HOOK@This control variable applies for tests that use the application driver (application.pl). If set, it points to the full path of a script that is to be used to generate the run script for the application. It is typically used in cases where you need a "custom" run of some sort, perhaps for performance testing. The arguments of the script are 1) group/unit being compiled, and 2) name of script to write to.
APPLICATION_SETUP_HOOKS@This variable contains a list of scripts to run to set up the work directory for applications. This can be used to alter the populated work directory in some necessary way (ex: copying in a new flow.data file). Each setup hook will be invoked with the unit name and unit work directory as parameters.
AR@Path to "ar" tool for use with application testing.
ASM@Name of assembler wrapper or executable. Must be an absolute path.
ASM_OPTIONS@Command line options to pass to the assembler.
CC@Name of C compiler wrapper or executable. Must be an absolute path.
CC_OPTIONS@Additional command line options to be passed to the C compiler when compiling and linking C test cases.
CHILDREN@Determines the set of children for a given group or meta-group. Used to determine which tests to run if all the tests in a given group are selected.
CT_DIFF@Controls whether we diff the compiler/linker error output for a test.
CT_DIFF_OPT_LEVELS@If set, this variable contains a list of opt levels (e.g. "1 3 4") for which the CT_DIFF=true setting applies. CT_DIFF testing will only be performed if the current OPT_LEVEL setting for a test matches one of the specified opt levels.
CT_NEG@If set to "true", then we require that the compilation fails for the specified test (e.g. compile passes, test fails). 
CT_CHECK_EXIT@If set to false, then ignore any exit status returned when invoking the compiler or linker. Defaults to true. Used only by the regression.pl driver.
CXX@Name of C++ compiler wrapper or executable. Must be an absolute path.
CXX_OPTIONS@Additional command line options to be passed to the C++ compiler when compiling and linking C++ test cases.
DATA_MODE@Selects whether 32-bit (ILP32) or 64-bit (LP64) data model is used for the compile. Should be set to either +DD64 or +DD32 if specified.
DATA_MODE_MAPPING@If set, this string tells CTI how to map the +DD32 or +DD64 flags to flags that the compiler understands.  If not set, +DD32 or +DD64 are directly used as the compiler flags.  For HP-UX GCC, the string "+DD32/-milp32 +DD64/-mlp64" is used to map +DD32 to -milp32 and +DD64 to -mlp64.  For IA64 Linux GCC, "+DD32/ +DD64/" causes no DATA_MODE flag to sent to the compiler because this system is 64 bit only and has no DATA_MODE flags for the compiler.
ELFSWAP@Path to invoke 'elfswap' utility.
ERROR_COMPARE_SCRIPT@Script used to compare compiler/linker error output.
ERROR_FILTERS@List of filters to apply to compiler/linker error output. Each filter will be applied in the order listed.
ERROR_MASTER_EMPTY@If set to "true", this control variable tells the regression driver that a zero-length file (e.g. /dev/null) should be used as the compiler/linker error output master when CT_DIFF is enabled. If enabled for a test, there is no need to create empty master error output files for that test.
ERROR_MASTER_SUFFIX@Error output file suffix for master. Defaults to "err".
ERROR_OUTPUT_QUALIFIERS@List of qualifiers for compiler/linker error output file master. This takes the form of a list of other test-level customizable options (ex: "DATA_MODE OPT_LEVEL"). When this option is in effect, the name of the error master file for a test is formed starting with the test base name, then with the values of each of the variables mentioned, then ERROR_MASTER_SUFFIX. 
EXT_TO_FE@This variable contains a list of the form "X1:Y1 X2:Y2 ... ", where each X tag is some source file extension (e.g. "c", "f90", etc) and each Y value is the CTI designation for a compiler driver, e.g. one of CC, CXX, F90. This forms the basis for determining which files get compiled by which compiler.
FC@Name of Fortran compiler wrapper or executable. Must be an absolute path.
FC_OPTIONS@Command line options to pass to the Fortran compiler.
FILESIZE_LIMIT@File size limit passed to the limit executable, in 512 byte blocks.
FLOW_DATA@Profile database to be used for +Oprofile=use compiles. This is intended primarily for regression tests that use checked-in flow files.
GDB_SERVER@For tests that use GDB as part of the validation stage, this variable controls the location from which GDB is invoked. Should be a full path.
HP_BE_DEBUG@list of double-column separated debugging options to be passed to the compiler using the HP_BE_DEBUG environment variable. use HP_BE_DEBUG=HELP for a list of those options.
DWD@Pathname to 'dwd' executable to run as part of tests that validate debug output of object files. Should be a full path.
INCLUDE_PATH@List of include directories to pass on the command line (via -I...) when compiling tests. Any non-absolute path on this list will be expressed relative to the unit source directory. 
INSTRUMENTER_OPTIONS@Additional options to pass to the IA64 static profile instrumenter (sin).
TestLevelCustomizableOptions.conf:APP_LANG@Source language to be tested. Available choices for this variable are: "C", "CXX", "FORTRAN". This variable is inspected only by application driver.
LANG_TYPE@Source language to be tested. Available choices for this variable are: "C", "CXX", "FORTRAN", "ASM", "ALL", and "EXPLICIT". This variable is currently inspected only by the regression driver; if LANG_TYPE is set to C, the driver will select only C tests (based on suffixes listed in EXT_TO_FE) when collecting tests to execute from the unit source directory.  If LANG_TYPE is ALL then the driver will search for tests in any language.  If LANG_TYPE is EXPLICIT then no searching is done and only tests explicitly listed in a list file are selected.  Tests that are in a list file will always be included regardless of the LANG_TYPE setting.
LANG@The LANG environment variable, read by the compiler, controls the locale used while processing the source files, as well as gating a few other FE-related features. This typically influences how error and warning messages are delivered to the user.
LD@Name of linker wrapper or executable. Must be an absolute path. Note that this control variable is used only in those cases where the linker is invoked directly by CTI, as opposed to being implicitly invoked via a front end.
LD_LIBRARY_PATH@Path used to pick up runtime shared libraries.
LD_OPTIONS@Options to be passed to the linker in cases where CTI is invoking it directly.
LEX_SERVER@For tests that use LEX as part of the validation stage, this variable controls the location from which LEX is invoked. Should be a full path.
LIBS@Addiotional libraries to be linked in when linking test cases/programs.
LIBS_PATH@Set of directories to add to the library search path for linkable regression tests. Any non-absolute path on this list will be expressed relative to the unit source directory. 
LIMIT@Pathname of script used to limit compile/runtime in order to deal with test cases that go into infinite loops. See also TIME_LIMIT and FILESIZE_LIMIT. LIMIT script must accept -f<filesize> and -m<minutes> options. Return value of script is 142 if time limit exceeded.
LIMIT_OPTIONS@Additional options to pass to the time limit script. Can be used to alter the signals delivered when time limit is exceeded, etc. See LIMIT, TIME_LIMIT, and FILESIZE_LIMIT.
LINK_TESTS@If LINK_TESTS=true for a test, then the test object(s) will be linked. If LINK_TESTS is true and both RUN_TESTS and LINKE_TESTS_EXEC are false, the target of the link will be a shared library. 
LINK_TESTS_EXE@If LINK_TESTS_EXE and LINK_TESTS are true, create an executable, not a shared libary even when RUN_TESTS is false.
LT_NEG@If set to "true", then we require that the link step fails for the specified test (e.g. if the link passes, then the test fails). Valid only for the regression.pl driver. Ignored if LINK_TESTS is false.
MAKEWRAPPER@This control variable is used to select the name of the Makefile used by the application driver to build and run an application. Typically this variable is needed only for applications that have an existing underlying makefile, where a wrapper is needed to provide a CTI-compliant interface. 
MASTER_FILE_PATH@Set of paths to search for regression test master files.
ME_OPTIONS_FILE@Name of HLO options file. This is intended primarily for HLO regression testing purposes.
MULTIPLE_ITERATIONS@Used to implement multi-iteration testing. If set to a positive integer N, this will cause individual tests to be run N times, as opposed to being run only once. Typically used for PBO testing.
MULTIPLE_ITERATIONS_ERR_ACCUM@If multi-iteration testing is in effect, then accumulate the compiler/linker error output from all iterations into a single file. By default, each iteration will overwrite the *.err file.
NATIVE_TESTING@This variable should be set to a value of "true" if the test run in question is being done on the native hardware, as opposed to a cross-compile/simulate test.
OMP_NUM_THREADS@Set OMP_NUM_THREADS for OMP test cases that have to be run in parallel.
OMP_OVERSUB@Set OMP_OVERSUB for OMP test cases that have to be run in parallel.
OPT_LEVEL@Optimization level. Valid values are 1, 2, 3, and 4. An OPT_LEVEL setting of N implies that "+ON" will be passed to the compiler.
OUTPUT_COMPARE@Controls whether we diff the execurable output for a test.
OUTPUT_COMPARE_SCRIPT@Script used to compare test executable output.
OUTPUT_FILTERS@List of filters to apply to executable output. Each filter will be applied in the order listed.
OUTPUT_MASTER_EMPTY@If set to "true", this control variable tells the regression driver that a zero-length file (e.g. /dev/null) should be used as the runtime output master when RUN_TESTS is enabled. If enabled for a test, there is no need to create empty runtime output master file for that test.
OUTPUT_MASTER_SUFFIX@Runtime output file suffix for master. Defaults to "out".
POST_ITERATION_HOOKS@Used as part of multi-iteration testing. List of scripts to be executed following each iteration as part of a multi-iteration test.
POST_RUN_HOOKS@List of scripts to be executed by TM after each unit is complete, for analysis purposes. Output of each script will be appended to log file. Command line arguments for script: 1) unit, 2) unit work dir, and 3) file to write output to (note that output file must be appended to, not overwritten).
PRE_RUN_HOOKS@List of scripts to be executed by TM before each unit is started, for preparation purposes. Output of each script will be appended to log file. Command line arguments for script: 1) unit, 2) unit work dir, and 3) file to write output to (note that output file must be appended to, not overwritten).
PRE_COMPILE_HOOKS@Applicable to regression tests only; this is a script to run immediately prior to compiling a single test.
PRE_ITERATION_HOOKS@Used as part of multi-iteration testing. List of scripts to be executed prior to each iteration as part of a multi-iteration test.
REAL_HARDWARE_MACHINE@This variable determines the performance machine selected for a SPEC run. We make it a test-level customizable option so that different machines can be selected for different SPEC units, in case specific SPEC jobs require particular kernel tunables, etc. 
REAL_HARDWARE_TIME_LIMIT@Used for REAL_HARDWARE runs; time limit imposed on running the test on the performance machine.
REAL_HARDWARE_VERIFY_TESTANDTRAIN@If set to TRUE, you will run additional test and train run with your performance run.
RTC_DEBUG@Internal option used by runtime check to dump debug information.
RTC_NO_ABORT@Do not abort when runtime check failed.
RTC_MALLOC_CONFIG@Config strings used by runtime memory check.
RTS_CFLAGS@Additional command line options to be passed to the RTC tests C compiler when compiling and linking C test cases.
RUN_OPTIONS@Applies to regression tests only. A list of options that are used as command line arguments at runtime for the test.
RUN_STDIN_INPUT@Input file to be fed to the test case executable on the stdin channel. If empty, then no input file is required. Does not need to be included in TEST_AUXFILES.
RUN_TESTS@Determines whether the specified test case will be run. For regression tests, a setting of "false" implies that the test will also not be linked. For application and SPEC tests, a setting of "false" implies that the program will be compiler and linked but not executed. Default value is "true".
RUN_TESTS_CHECK_CORE@Applies to regression tests only. If set to TRUE, we fail runnable tests if the run generates a 'core' file.
RUN_TESTS_CHECK_EXIT@Applies to regression tests only. If set to TRUE, we fail runnable tests if they exit with nonzero status.
RUN_TESTS_ECHO_EXIT@Applies to regression tests only. If set to TRUE, the driver will echo the exit status from the run into the output file. This is used for tests whose only status indication is exit value (makes it easier to triage failing tests). Defaults to FALSE.
RUN_TESTS_EXEC_EXTENSION@Applies to regression tests only. If set, this is used as a file extension to the executable of a test. The basename of the executable is test name.
RUN_TESTS_HOOKS@This variable can be set to a list of scripts to be run immediately prior to executing a test. In the case of an application test, the hooks will be run once for the unit; for regression and script driver tests the hook will be run immediately prior to each individual test.
RUN_TESTS_NEG@If set to "true", then we require that the execution fails for the specified test (e.g. execution passes, test fails). 
RUN_TESTS_PAD_OUTPUT@Used by the regression and script drivers. If "true" (the default), test execution output is padded with leading and trailing blank lines (thus the output master will always contain at least two lines). This is a holdover from the orginal TM implementation; it will be deprecated in the future (hopefully soon). 
RUNTIME_OUTPUT_QUALIFIERS@List of qualifiers for test runtime output file master. This takes the form of a list of other test-level customizable options (ex: "DATA_MODE OPT_LEVEL"). When this option is in effect, the name of the runtime output master file for a test is formed starting with the test base name, then with the values of each of the variables mentioned, then ERROR_MASTER_SUFFIX. 
SCRIPT_TEST_COLLECTION_HOOK@This control variable is used by the script testing driver only. It gives the name of a script to be run on the unit src directory to collect the names of the script tests in that dir. 
SCRIPT_TEST_INVOKER@This control variable is used by the script testing driver only. It specifies a glues script used for invoking test scripts, to translate CTI options into options readable by the test script. 
SIMULATOR@Simulator to use for PA-hosted (cross) testing. This must be a full pathname (with possible additional argument). Only used if USE_SIMULATORS is set to true (ignored otherwise).
SIMULATOR_NAME@Name of simulator (for debug output).
SKIP_SELECTIONS@This control variable uses the same format as SELECTIONS (e.g. list of groups or units within the CTI_GROUPS hierarchy); it tells the CTI drivers to skip any item that appears in it. SKIP_SELECTIONS settings can be added to a tmconfig file as a means of temporarily suppressing particular tests.
SPECIN@Selects SPEC input data set (test, train, or ref).
SPECOUT@Selects SPEC output data set (test, train, or ref).
ST_ELFDUMP@Selects elfdump executable to be used in cases where need to use elfdump to validate the results of tests.
ST_NM@Selects 'nm' executable to used in cases where we run 'nm' to validate the results of tests.
ST_FDP_OPTIONS@Additional options to be passed to "FDP".
ST_FFW_OPTIONS@Additional options to be passed to "ffw".
ST_LIBC@Specifies path name of libc library to be used, for tests that are linked. Must be a a full path.
ST_LIBCRES@Specifies path name of libcres.a library to be used, for tests that are linked. Must be a full path. This environment variable is read directly by the HPUX linker.
TESTS@A list of tests, separated by spaces, are selected to run. This variable is applied only to the Regression group. The test name in the list is a basename, not a fully qualified name 
TEST_AUXMODDIR@Directory in Src/ where extra files must be compiled before processing a test unit. The files are compiled only once per unit using the same compiler options as for the test cases. If a header/module file is generated in the process, '-I ./$TEST_AUXMODDIR' must appear on the compiler options in order to use it.
TEST_AUXMODFILES@List of files to consider in TEST_AUXMODDIR. They are processed in list order. If not specified, all the files in the directory are processed in alphabetical order.
TEST_AUXFILES@List of files needed to compile, link, and/or run a particular test (not including the source file(s) for the test). This list will typically include flow files, header files, input files, etc. 
TEST_DRIVER@Driver for individual test within a regression unit. Depending on the setting of the unit driver, this variable may be ignored.
TEST_PARALLEL_FACTOR@For test cases that have makefiles (typically SPEC or applications), specifies parallel factor to pass to parallel build (e.g. gmake -J N).
TEST_LANG@Use this variable to specify the language a test is written in instead of checking the test case suffix.
TIME_LIMIT@Time limit for a particular test. This is a limit on the number of minutes that the test takes to compile, link, and/or execute. See also LIMIT.
TRIAGE@When set to true, generate a triage script and keep files required for triaging/debugging in a .keep directory. The script is not executed. Sets up HP_BE_DEBUG automatically. Ignored if HP_BE_DEBUG or MULTIPLE_ITERATIONS are set.
UNIT_DRIVER@Driver script to invoke to run a particular CTI unit.
UNIT_MAKEVARS@This control variable is used by the application driver; it specifies a list of environment variables that should be passed as make variables whenever make is invoked.
USE_SIMULATORS@Run test program executables via the wrapper utility specified via the SIMULATOR option. This is used to support PA-hosted (cross) testing, and for cases where we want some sort of wrapper around the test run.
YACC_SERVER@For tests that use YACC as part of the validation stage, this variable controls the location from which YACC is invoked. Should be a full path.
PERF_NUM_COPIES@For rate runs, specifies number of copies. Default is 1.
PERF_BIND_PROC@If set to TRUE, we bind the process to specific CPUs using the bind commands specified under PERF_BIND_CMDS.
