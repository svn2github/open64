#!/bin/sh
# ====================================================================
#
# Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Open64 is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Open64 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.
#
# ====================================================================

#
#  This is the unique place where all the user visible options that
#  control the behaviour of the TM/dTM are placed. Each option is
#  preceeded by a one or two line description of what it does. For
#  more detailed information see files under
#
#     $CTI_HOME/doc
#
#  Clone portions of this file to create your own copies of the
#  options file. 
#

# Source CTI global environment file
. $(dirname $0)/../lib/CTI_global.env

#-----------------------------------------------------------------------
# PART 0 - Debug options
#-----------------------------------------------------------------------
#
# To turn on the trace option (set -x) to debug test scripts. 
#export SHOW_SCRIPT_TRACE=true
export SHOW_SCRIPT_TRACE=false
# To show outputs in stdout during the run function.
export RUN_STDOUT_VERBOSE=false

# To send the LOG via email at the end of the tm command
# i.e. SEND_LOG="user1 user2"
export SEND_LOG=


#-----------------------------------------------------------------------
# PART 1 - Basic CTI/TM/dTM Setting
#-----------------------------------------------------------------------
#
# Some application tests need to use commands in /usr/local/bin as tools.
# Some .z tests invoke "a.out" from the current directory, so add ".".
#
if [[ -n $PATH ]]; then
   export PATH="$PATH:.:/usr/local/bin"
else
   export PATH=".:/usr/local/bin"
fi

#
# Versions of Perl, Shell, used to run scripts within CTI.
# CTI_PERL and CTI_SHELL are defined in CTI_global.env 

# 
# CTI tool directory. Used to pick up "sh", "cp", "mv", etc.
# We use /bin for HPUX/Linux compatibility.
#
export CTI_TOOLDIR=/bin

# Whether to report successful tests and not just failures
export CTI_REPORT_PASSES=false

# What Compiler family are we targetting.  By default it is the OPENCC
# Compilers but it can also be set to GCC.
export CTI_TARGET_COMPILER=OPENCC

# There is no default unit driver. Each group/unit has to select
# one, otherwise we get an error.
export UNIT_DRIVER=/bin/false

#
# Commands to be executed once all tests have completed and
# the log file has been generated. This is a list of programs
# to run, separated by spaces. If a program does not start with /,
# then it is assumed to be in the $CTI_HOME/Scripts/utils
# directory.
#
export POST_PROCESS_CMD=""

#
# dTM location. Used for locating dtm and dtm_* commands
# 
export DTM_HOME_DIR=$DTM_HOME


# default pool and priority
export DTM_POOL=Default
export DTM_PRIORITY=2

# allow (true) or disallow dTM to manage the performance machine lock
export DTM_LOCKMANAGER=true
export DTM_PERF_WAITTIME=900
export DTM_PERF_LOCKTIME=200

#
# default web server used to web report yor log file
# 
export CTI_WEB_CGI=$CTI_WEBHOME

#-----------------------------------------------------------------------
# PART 2 - Basic Test Setting
#-----------------------------------------------------------------------
#
# These are the options that most users will need.
#

# To apply the functionality only to these test units. By default, TM
# will process all the units in selected groups if this is left unset.
# This is for backwards compatibility with old options files;
# use SELECTIONS instead.
export UNITS=""

# To apply the functionality only to these test cases. By default, TM
# will process all the tests in selected groups+units if this is left
# unset.  
export TESTS=""

#
# Main hook for selecting tests to run. Each element in SELECTIONS
# is some node in the source hierarchy tree, at unit level or higher.
#
export SELECTIONS=""

# To indicate whether we want to selectively do the compiler output
# comparison. If this variable is not set (or set to FALSE), no compiler
# output comparison will be performed.
export CT_DIFF_TESTING=true

# Test-level customizable option for comparison of compiler/linker
# error output comparison (including cycle counts). Set to "true" to enable.
export CT_DIFF=false

# Test-level customizable option for "negative" compiler tests. If
# CT_NEG is set to "true", then the test will only pass if the compile
# fails.
export CT_NEG=false

# Test-level customizable option that controls whether we look at
# the exit status of the compiler. If set to false, we ignore compiler
# exit status.
export CT_CHECK_EXIT=true

# Test-level customizable option for comparison of execution
# output comparison. Set to "false" to disable.
export OUTPUT_COMPARE=true

# Default error and output compare scripts
export ERROR_COMPARE_SCRIPT="errDiff.pl"
export OUTPUT_COMPARE_SCRIPT="outDiff.pl"

# Default error and output suffix settings
export ERROR_MASTER_SUFFIX=err
export OUTPUT_MASTER_SUFFIX=out

# To compile, link, and execute tests if true. Otherwise, compile tests only 
# (without linking and execution).
export RUN_TESTS=true

# Test-level customizable option for "negative" execution tests. If
# RUN_TESTS_NEG is set to "true", then the test will only pass
# if the execution fails (returns non-zero).
export RUN_TESTS_NEG=false

# Used by the regression driver. If set to true, then run the linker
# on the objects that results from the compile stage of the test.
#
# If LINK_TESTS is true and RUN_TESTS is false, then the default
# we link the objects into either
#
#    A) a shared library, e.g.  "ld obj1.o obj2.o -b -o xxx.so", or
#    B) a relocatable object, e.g. "ld obj1.o obj2.o -r -o rel.o"
#
# The regression drive will pick option "A" above unless it sees
# things on the command line that would preclude the creation of
# a shared library (ex: +kernel).
#
# Users can turn off scenarios "A" and "B" above for the
# ( LINK_TESTS=true && RUN_TESTS=false ) scenario by setting
# LINK_TESTS_EXE (described below).
# 
export LINK_TESTS=true

# Used by the regression driver. If set to true, always link test objects
# to an executable; do not try to link to a shared library or relocatable
# object. This variable is tested only if LINK_TESTS=true && RUN_TESTS=false.
export LINK_TESTS_EXE=false

# Default is TM-style output padding for regression tests. This can
# be overridden if we want to use raw test output for master.
export RUN_TESTS_PAD_OUTPUT=true

# Default is to fail a regression test if it creates a core file when we run it
export RUN_TESTS_CHECK_CORE=true

# The time limit (in terms of minutes) used by "limit" to restrict the 
# running time of each process.
export LIMIT="$CTI_HOME/Scripts/limit -q -p " 
export TIME_LIMIT=40
# limit the program output filesize to N 512-byte blocks
#export FILESIZE_LIMIT=2048 # 1MB

# Minimum disk space available in the user's work directory should
# be 10 MB by default.
export MIN_WORKSPACE_DIR=10

# optimization level. OPT_LEVEL=<x> means option +O<x> to compilers
export OPT_LEVEL=2

# Whether to remove .o, .log and .err etc. created during this
# testing session
export CLEAN=true

# Stress Group 
export MAX_STRESS_PASS=1  # The number of times the test is repeated
export Stress_TIME_LIMIT=60


#-----------------------------------------------------------------------
# PART 3 - The test environemt
#-----------------------------------------------------------------------
#

# An alternate compiler used for linking command. This variable is
# useful when you need to use one compiler, say tahoeacc, for compiling
# but need another one, say tahoef90, to do the linking.
export ALT_LINK_COMPILER=""
export ALT_LINK_COMP_OPTIONS=""

# vortex, perl and gcc of CINT95 will use it in SPEC95int.O232.perf
export FASTMEM32=fastmem32.o

#
# Default simulator (only used if USE_SIMULATORS set)
#
export SIMULATOR_NAME=
export SIMULATOR=

#
# Use the following settings for cross testing. Alternatively
# you can use the "-cross" option when invoking TM. See also DTM_CPUARCH
# above.
#
#export NATIVE_TESTING=false
#export USE_SIMULATORS=yes
#
# Native testing by default (also used for TM -native option)
#
export NATIVE_TESTING=true
export USE_SIMULATORS=no

#-----------------------------------------------------------------------
# PART 4 - Compilers and Compile Options
#-----------------------------------------------------------------------

#
# The compilers to be tested
#
export CC=/bin/false
export CXX=/bin/false
export FC=/bin/false

#
# The options used in the testing
#
export CC_OPTIONS=""
export CXX_OPTIONS=""
export FC_OPTIONS=""
export DATA_MODE="+DD64"

#
# Default compiler version.
#
export COMPILER_VERSION=opencc

#
# Source language to be tested
# Choices are: either "ALL", "C", "CXX", "FORTRAN",
# or any combination of "C", "CXX" and "FORTRAN"
# e.x.
# export LANG_TYPE=ALL
# export LANG_TYPE="CXX FORTRAN" 
export LANG_TYPE="ALL"

#
# Default LANG setting
#
export LANG=""

# Default mapping from extension to front ends.
export EXT_TO_FE="c:CC i:CC C:CXX cc:CXX cxx:CXX cpp:CXX f:FC f90:FC F:FC F90:FC i90:FC for:FC FOR:FC s:CC"

# All compile options are given as $GROUP_$UNIT_$TEST, $GROUP_$UNIT, or
# $GROUP and they are a string. The given string is used to as the options
# string, and over-rides all other compile options for that $TEST, $UNIT,
# or $GROUP, as the case may be.

# PART 4b Linker Options
# Specify libraries or object files to be placed in the file.m.link.log
# LIBS appears last on the command line during the link phase.
# i.e. export LIBS="-lm"
export LIBS=""

# How many versions of BE should be spawned at at +O4?
# By default, it's the number of precessors on the machine.
export PARALLEL=1

export MAX_CPU_PARALLEL=1 # How many parallel runUMs (specs) under SNOW
                          # This is meaningful for a [2-4] range.

export UNIT_PARALLEL_FACTOR=1

export COUNT_MISSING_TEST=true

# Correct language settings for different CINT99/CFP99 benchmarks
export SPEC_SPECINT2000_eon_LANG_TYPE=CXX
export SPEC_SPEC2000fp_wupwise_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_swim_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_mgrid_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_applu_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_galgel_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_facerec_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_lucas_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_fma3d_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_sixtrack_LANG_TYPE=FORTRAN
export SPEC_SPEC2000fp_apsi_LANG_TYPE=FORTRAN

# Correct language settings for different C04 benchmarks
export SPEC_SPEC2004_fma3d_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_bwaves_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_gamess_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_hydra_LANG_TYPE=CXX
export SPEC_SPEC2004_wupwise_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_wrf_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_zeusmp_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_cactusADM_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_leslie3d_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_vabs_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_namd_LANG_TYPE=CXX
export SPEC_SPEC2004_cylflow_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_geant4_LANG_TYPE=CXX
export SPEC_SPEC2004_soplex_LANG_TYPE=CXX
export SPEC_SPEC2004_povray_LANG_TYPE=CXX
export SPEC_SPEC2004_calculix_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_GemsFDTD_LANG_TYPE=FORTRAN
export SPEC_SPEC2004_amdgamess_LANG_TYPE=FORTRAN

# Options for Real hardware. These guys kick in only
# if APPLICATION_RUN_HOOK is set to the real hardware run script, e.g. 
# Scripts/real_hardware_scripts/cti_gen_real_hardware_run_log.sh
export REAL_HARDWARE_MACHINE=host_name
export REAL_HARDWARE_REMOVE_WORK_DIR=TRUE
export REAL_HARDWARE_REMOVE_DOTOS=TRUE
export REAL_HARDWARE_TIME_LIMIT=30
export REAL_HARDWARE_INPUT=ref

# If set to 'TRUE', this will disable the use of locking for 
# performance runs. If you do this, you will have to make sure
# that you have exclusive access to the performance machine in 
# question in order to get meaningful times.
export REAL_HARDWARE_DISABLE_LOCKING=FALSE

# if set to TRUE, actually run the benchmark during the performance run.
# Defaults to TRUE
export REAL_HARDWARE_RUN_BENCHMARK=TRUE

# If set to TRUE, perform an additional prospect run following the real
# hardware performance run. Output from prospect will be written to the
# file "result-prospect".
export REAL_HARDWARE_RUN_PROSPECT=FALSE

# For running SPEC using the real harness.
export REAL_HARDWARE_HARNESS=FALSE
export REAL_HARDWARE_HARNESS_RUNTYPE=peak
export REAL_HARNESS_INT_MACHINE=''
export REAL_HARNESS_FP_MACHINE=''

# If set to TRUE, we bind the process to specific CPUs using the bind
# commands specified under PERF_BIND_CMDS
# Under Linux, this would look like
# PERF_BIND_CMDS='BIND0=\"numactl -m 0 --physcpubind=0\"'
# PERF_BIND_CMDS='BIND0=\"numactl -m 0 --physcpubind=0\" BIND1=\"numactl -m 1 --physcpubind=1\"'

export PERF_BIND_PROC=FALSE
export PERF_BIND_CMDS=''

# Number of copies (> 1 for rate run)
export PERF_NUM_COPIES=1

# This only is for SPEC compilations of individual src.
export TEST_PARALLEL_FACTOR=1 # How many parallel specs tests compile

# Options for sanity assertion test
export SANITY_ASSERT_TESTING=false

# Hack for generating functions with embedded '$'
export _DOLLAR='$'

# Hack for generating options with embedded spaces
export _SPACE=' '

#
# Options for cti driver regression tests. We need these
# customizations here (as opposed to tmconfig file) in order to
# properly test that the optimions customizer picks up environment
# variable overrides correctly.
#
export Regression_ctidriver_EXTRA_PRE_DATA_MODE=ctidriver_env_extra_pre_DM
export Regression_ctidriver_EXTRA_POST_DATA_MODE=ctidriver_env_extra_post_DM
export Regression_ctidriver_optionsCustomization_EXTRA_PRE_DATA_MODE=optionsCustomization_env_extra_pre_DM
export Regression_ctidriver_optionsCustomization_EXTRA_POST_DATA_MODE=optionsCustomization_env_extra_pre_DM
export Regression_ctidriver_optionsCustomization_dir1_dummy_EXTRA_PRE_DATA_MODE_ITERATION_1=optionsCustomization_dir1_dummy_env_extra_pre_DM_iteration_1
export Regression_ctidriver_optionsCustomization_dir1_dummy_EXTRA_POST_DATA_MODE_ITERATION_1=optionsCustomization_dir1_dummy_env_extra_post_DM_iteration_1
export Regression_ctidriver_optionsCustomization_dir1_dummy_EXTRA_POST_DATA_MODE_ITERATION_3=optionsCustomization_dir1_dummy_env_extra_post_DM_iteration_3
export Regression_ctidriver_optionsCustomization_dir1_dummy_EXTRA_PRE_DATA_MODE_ITERATION_3=optionsCustomization_dir1_dummy_env_extra_pre_DM_iteration_3

# Enabler to expand the compiler paths (CC, CXX, FC) to an absolute path for the cases where
# these paths are "moving target" soft links and the user wants to record the real path (this
# will ensure, for example, more accuracy on reproducing a past failure)
export CTI_COMPILER_ABSOLUTE_PATH=false

#!/bin/sh
#####################################################
# default variables for Linux
#####################################################

#
# default CTI_GROUPS
#
export CTI_GROUPS=${CTI_GROUPS:-{CONFIGURE_ctihome}/cti_groups}

#
# default TEST_ENV_DIR 
# 
export TEST_ENV_DIR=/usr/bin

#
# Disassembler.
#
export CTI_TDAS=/bin/false

#
# Default wrapper for flow file writer (FFW)
#
export FFW_HOME=/bin/false

# The DTM operating system
export DTM_OPSYS=Linux_SLES

# The DTM CPU architecture
export DTM_CPUARCH=x86_64

#
# Other misc bits
#
export CTI_AR=$TEST_ENV_DIR/ar
export CTI_DF=df
export LINKER=$TEST_ENV_DIR/ld
export ODUMP=$TEST_ENV_DIR/elfdump
export ODUMPCAT=${ODUMP}.cat
export GDB_SERVER=$TEST_ENV_DIR/gdb
export YACC_SERVER=$TEST_ENV_DIR/yacc
export ST_YACCAT=
export YACCPAR=$TEST_ENV_DIR/yaccpar
export LEX_SERVER=$TEST_ENV_DIR/lex
export ST_NXFORM=/bin/false
export ST_LEXCAT=
export DWD=/bin/false
export ELFSWAP=/bin/false
export ST_ELFDUMP=/bin/false
export ST_NM=$TEST_ENV_DIR/nm


export CTI_OPT_SIGN="-"

#
# Linker to use, in the cases where we have to invoke the linker
# directly (typically not for C/C++/F90 tests).
#
export LD=$TEST_ENV_DIR/ld

export REAL_HARDWARE_LOCK_MACHINE=host_name


export CTI_TIME_COMMAND="/usr/bin/time -v"

