The initial files for RIPA project. Please be notified that this is for initial experiments and everything could be changed.

* License issues

Current license is still GPLv2. But we might move to another open source license like GPLv3. Source files from Open64 or GNU under separate directories for temporary use. We shall cleanup them later.

* Phase management *
.RIPA could be divided into many phases. A phase manager is used to manage all these phases. A phase could be divided into several subphases.
.A base class for a phase is defined. Each phase must be derived from this class to implement a set of functions for RIPA manager to call.
.Each phase must be registered during initialization time. Dynamic loading will be considered later.
.Virtual function scheme is adopted to achieve runtime polymorphy. This is based on the assumption that RIPA manager might not know a phase when it's built. Care must be taken to ensure that these kind of interface functions not be called frequently.
.Phase ID allocation is inherited from resource management. A simple dynamic allocation schme of phase ID is adopted when a phase is registered. 

* Memory management *
.Use memory pool and CXX_NEW/DELETE/... interface borrowed from Open64.

* Command line options *
.Basically each phase needs to write its own command line option processing functions. RIPA manager only passes the phase specific options and global options to each phase.
.Ordering of global options does matter in some applications. So the global option list is kept in RIPA manager.
.Phase specific options can be specified in format -phase:option%option-val%. Multiple phase-specific options are allowed.
.Use open64 command line option processing functions in flags.h/flags.cxx (ripa/open64) in each phase separately.
.The options have not been defined yet. Developers could design options and propose them for discussion.

* Tracing *
Adopt open64 scheme at present.

* Resource usage statistics *
Adopt open64 scheme.

--End--
