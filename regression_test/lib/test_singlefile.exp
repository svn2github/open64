#!/usr/bin/expect -f 

load_lib parse_conf.exp
load_lib test_multifile.exp
load_lib evaluator.exp

proc test_singlecase { dirname filename buildstat_n runstat_n runtime_n } {
    upvar $buildstat_n buildstat
    upvar $runstat_n runstat
    upvar $runtime_n runtime
    global cc cxx fc cflags cxxflags fflags sim logdir
    global testoutput testhome summary
    global casedir
    global evaluator

#	set casename [file tail $testcase];
	
	
    # for each test case ,we make a corresponding dir in output/date dir
    # e.g. SingleSource/gcc/hello/hell.c -> output/`date`/SingleSource/gcc/hello
    set case_out_dir [file normalize $testoutput/$dirname];
	
    # Define Number of commands user gave
    # and the number of expectaions user gave
    # If the the user is quite lazy, providing none command, we use default
	
    if { [string match "*.c" $filename] } {
	set ltype "CC"
	set flagarg "CFLAGS"
	set commentbeg "//"
    } elseif { [string match "*.cc" $filename] || [string match "*.C" $filename] || [string match "*.cpp" $filename] || [string match "*.cxx" $filename] } {
	set ltype "CXX"
	set flagarg "CXXFLAGS"
	set commentbeg "//"
    } elseif { [string match "*.f" $filename] || [string match "*.f90" $filename]} {
	set ltype "FC"
	set flagarg "FFLAGS"
	set commentbeg "!"
    } else {
	set buildstat -1;
	return;
    }
	
    set srcfile "$casedir/$dirname/$filename"
    set casefile [open $srcfile RDONLY];
    set thislogdir [file dirname "$logdir/$dirname/[file rootname $filename]"]
    exec mkdir -p $thislogdir
    set thislogfile "$thislogdir/$filename.ci"
    set thisrunfile "$thislogdir/$filename.run"
    set outputfile [file rootname "$case_out_dir/$filename"]
    exec mkdir -p [file dirname $outputfile]
	
    set needexec 1
    set needlink 1
    set commandlist [list]
    set flags ""
    set genoption ""
	
    while { [gets $casefile line] >=0 } {
	if { [string first $commentbeg $line] == 0 } {
	    set line [string range $line [string length $commentbeg] [expr [string length $line] - 1]]
	    set line [string trim $line]
	    switch -glob $line {
		CMD:* {
		    regsub {CMD:} $line {} newcmd; #trim the start //CMD: string
		    lappend commandlist $newcmd
		}
		
		NOEXEC* {
		    set needexec 0
		}

		OBJ* {
		    set needlink 0
		    set needexec 0
		    set genoption "-c"
		    set outputfile "$outputfile.o"
		}

		ASM* {
		    set needlink 0
		    set needexec 0
		    set genoption "-S"
		    set outputfile "$outputfile.s"
		}
		
		FLAGS:* {
		    regsub {FLAGS:} $line {} line; #trim to start //FLAGS: string
		    set flags "$flags [string trim $line]"
		}

		PLATFORM:* {
		    regsub {PLATFORM:} $line {} line;
		    set line [string trim $line];
		    if { ![is_platform_compatible $line] } {
			close $casefile;
			set buildstat -1;
			return;
		    }
		}
	    }
	}
    }
	
    if { [llength $commandlist ] == 0 } {
	if { $needlink == 1 } {
	    lappend commandlist "\$($ltype) \$($flagarg) \$(SOURCE) -o \$(TARGET)"
	} else {
	    lappend commandlist "\$($ltype) $genoption \$($flagarg) \$(SOURCE) -o \$(TARGET)"
	    set needexec 0
	}
    }
	
    set fail 0
    foreach cmd $commandlist {
	regsub "\\\$\\\(SOURCE\\\)" $cmd $srcfile cmd
	regsub "\\\$\\\(TARGET\\\)" $cmd $outputfile cmd
	regsub "\\\$\\\(SIM\\\)" $cmd $sim cmd
	regsub "\\\$\\\(CC\\\)" $cmd $cc cmd
	regsub "\\\$\\\(CXX\\\)" $cmd $cxx cmd
	regsub "\\\$\\\(FC\\\)" $cmd $fc cmd
	if { [string equal $flags ""] } {
	    regsub "\\\$\\\(CFLAGS\\\)" $cmd $cflags cmd
 	    regsub "\\\$\\\(CXXFLAGS\\\)" $cmd $cxxflags cmd
	    regsub "\\\$\\\(FFLAGS\\\)" $cmd $fflags cmd
	} else {
	    regsub "\\\$\\\($flagarg\\\)" $cmd $flags cmd
	}
	exec echo "Command Line: $cmd" > $thislogfile
	set cmd2 "exec $cmd >>& $thislogfile"
	if { [catch {eval $cmd2}] } {
	    set fail 1;
	    break;
	}
    }
    
    if { $fail == 0 && [file exists $outputfile]} {
	set buildstat 0;
	if { $needexec == 1 } {
	    set old_dir [pwd];
	    cd [file dirname $outputfile];
	    set runcmd "${evaluator}_evaluator";
	    set runstat [eval $runcmd [file rootname $filename] $thisrunfile runtime];
	    cd $old_dir
	} else {
	    set runstat -1
	}
    } else {
	set buildstat 1
    }
    
    close $casefile
    note "Test Case: $dirname/$filename"
}
