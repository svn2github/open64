#!/usr/bin/expect -f
load_lib parse_conf.exp
load_lib test_singlefile.exp
load_lib statistics.exp
load_lib test_utils.exp

proc walk_all_dirs { } {
    global casedir logdir testhome date

    set old_dir [pwd]
    cd $casedir
    set files [split [exec ls -1] "\n"];
    foreach fn $files {
	note "Test directory: $fn";
	if { [file isdirectory $fn] } {
	    set logfd [open "$testhome/log/$date/$fn.log" w];
	    set res [walk_dir_first_level $fn $logfd];
	    close $logfd
	    if { $res == 0 } {
		append_case_group $fn
	    }
	}
    }
    cd $old_dir
}

proc walk_dir_first_level { dirname logfd } {
    global confdir
    global cc cxx fc
    global cflags cxxflags fflags
    global sim confname
    global casedir logdir
    global subconf evaluator validation_only whole_copy
    global platforms current_platform

    # Save the default parameters
    set old_subconf $subconf;
    set old_evaluator $evaluator;
    set old_validation_only $validation_only;
    set old_cc $cc;
    set old_cxx $cxx;
    set old_fc $fc;
    set old_cflags $cflags;
    set old_cxxflags $cxxflags;
    set old_fflags $fflags;
    set old_whole_copy $whole_copy;
    set old_platforms $platforms;
    set old_current_platform $current_platform;

    # Parse the config file
    parse_conf "$casedir/$dirname/test.conf";

    # Check if current platform is in the platform list
    if { ![is_platform_compatible $platforms] } {
	note "Skipped";
	return 1;
    }

    if { $validation_only } {
	set columns 3;
    } else {
	set columns 6;
    }
    puts $logfd "<TABLE BORDER=1>";
    # Try different configuration files
    foreach confs $subconf {
	set old_logdir $logdir
	deal_one_conf $confs $dirname $logfd $columns
	set logdir $old_logdir
    }
    puts $logfd "</TABLE>";

    # Restore the default parameters
    set subconf $old_subconf;
    set evaluator $old_evaluator;
    set validation_only $old_validation_only;
    set cc $old_cc;
    set cxx $old_cxx;
    set fc $old_fc;
    set cflags $old_cflags;
    set cxxflags $old_cxxflags;
    set fflags $old_fflags;
    set whole_copy $old_whole_copy;
    set platforms $old_platforms;
    set current_platform $old_current_platform;
    
    return 0;
}

proc deal_one_conf { conf dirname logfd columns } {
    global cc cxx fc
    global cflags cxxflags fflags
    global sim
    global confname datdir
    global comp_total comp_pass
    global run_total run_pass
    global validation_only
    global date logdir datdir testoutput testhome casedir
    global time_table
    global stat_cnt stat_sum
    global whole_copy

    set logdir $testhome/log/$date/$conf
    set testoutput $testhome/output/$date/$conf
    
    if { $whole_copy } {
	exec mkdir -p $testoutput;
	exec cp -rf "$casedir/$dirname" $testoutput;
    }

    set old_cc $cc
    set old_cxx $cxx
    set old_fc $fc
    set old_cflags $cflags
    set old_cxxflags $cxxflags
    set old_fflags $fflags
    set old_sim $sim
    
    reset_stat_vars;
    parse_sub_conf $conf;

    if { !$validation_only } {
	set timefile "$datdir/$dirname.$conf.dat";
	array set time_table {};
	read_time_table time_table $timefile;
	set stat_cnt 0;
	set stat_sum 0;
    }

    puts $logfd "";
    puts $logfd "<TR><TD COLSPAN=$columns><STRONG>Configuration: $confname</STRONG></TD></TR>";
    puts -nonewline $logfd "<TR><TD>Case Name</TD><TD>Compile</TD><TD>Run</TD>";
    if { !$validation_only } {
	puts -nonewline $logfd "<TD>Curr. Result(ms)</TD><TD>Prev. Result(ms)</TD><TD>Difference</TD>";
    }
    puts $logfd "</TR>";
    note "Configuration: $confname";
    walk_dir $dirname $logfd;

    puts -nonewline $logfd "<TR><TD><STRONG>Statistics</STRONG></TD><TD>$comp_pass/$comp_total</TD><TD>$run_pass/$run_total</TD>";
    if { !$validation_only } {
	write_time_table time_table $timefile
	puts -nonewline $logfd "<TD>-</TD><TD>-</TD>";
	if { $stat_cnt == 0 } {
	    puts -nonewline $logfd "<TD>-</TD>";
	} else {
	    set geoavg [expr exp($stat_sum / $stat_cnt)];
	    puts -nonewline $logfd [format "<TD>%.2f%%</TD>" [expr ($geoavg - 1) * 100]];
	}
    }
    puts $logfd "</TR>"
    
    set cc $old_cc
    set cxx $old_cxx
    set fc $old_fc
    set cflags $old_cflags
    set cxxflags $old_cxxflags
    set fflags $old_fflags
    set sim $old_sim
    
}

proc walk_dir { dirname logfd } {
    global casedir
    global whole_copy

    set olddir [pwd];
    cd "$casedir/$dirname";
    if { [file exists "Makefile"] } {
	# Deal with cases with multiple source files
	deal_case 1 $logfd $dirname "";
    } else {
	set files [split [exec ls -1] "\n"];
	foreach fn $files {
	    if { [file isdirectory $fn] } {
		walk_dir "$dirname/$fn" $logfd;
	    } elseif { !$whole_copy } {
		# Deal with cases with single source file
		deal_case 0 $logfd $dirname $fn;
	    }
	}
    }
    cd "$olddir";
}

proc deal_case { is_multi logfd dirname filename } {
    global validation_only whole_copy
    global comp_total comp_pass
    global run_total run_pass
    global casedir testoutput
    global time_table
    global stat_cnt stat_sum

    set sub_dirname [string range $dirname [expr [string first "/" $dirname] + 1] [expr [string length $dirname] - 1]]
    if { $filename == "" } {
	set case_name $sub_dirname;
    } else {
	set case_name "$sub_dirname/$filename";
    }
    set buildstat {}
    set runstat {}
    set runtime {}
    if { $is_multi } {
	if { !$whole_copy } {
	    set output_parent [file dirname "$testoutput/$dirname"];
	    exec mkdir -p $output_parent;
	    exec cp -rf "$casedir/$dirname" $output_parent;
	}
	test_multiplecase $dirname buildstat runstat runtime;
    } else {
	test_singlecase $dirname $filename buildstat runstat runtime;
    }
    if { $buildstat < 0 } {
	return;
    }
    puts -nonewline $logfd "<TR>";
    if { $is_multi } {
	puts -nonewline $logfd "<TD>$sub_dirname</TD>";
    } else {
	puts -nonewline $logfd "<TD>$sub_dirname/$filename</TD>";
    }
    incr comp_total;
    if { $buildstat == 0 } {
	incr comp_pass;
	puts -nonewline $logfd "<TD>PASS</TD>";
	if { $runstat == -1 } {
	    puts -nonewline $logfd "<TD>-</TD>";
	    set runtime -1;
	} elseif { $runstat == 0 } {
	    incr run_total
	    incr run_pass
	    puts -nonewline $logfd "<TD>PASS</TD>";
	} else {
	    incr run_total
	    puts -nonewline $logfd "<TD>FAIL</TD>";
	    set runtime -1;
	}
    } else {
	puts -nonewline $logfd "<TD>FAIL</TD><TD>-</TD>";
	set runtime -1;
    }
    if { !$validation_only } {
	if { [llength [array names time_table -exact $case_name]] == 0 } {
	    set time_table($case_name) [list];
	    set hist_time -1;
	} else {
	    set hist_time [get_history_time_avg $time_table($case_name)];
	}
	lappend time_table($case_name) $runtime;
	if { $runtime >= 0 } {
	    puts -nonewline $logfd "<TD>$runtime</TD>";
	} else {
	    puts -nonewline $logfd "<TD>-</TD>";
	}
	if { $hist_time >= 0 } {
	    puts -nonewline $logfd "<TD>$hist_time</TD>";
	} else {
	    puts -nonewline $logfd "<TD>-</TD>";
	}
	if { $runtime > 0 && $hist_time > 0 } {
	    set diff [expr double($runtime) / double($hist_time)];
	    puts -nonewline $logfd [format "<TD>%.2f%%</TD>" [expr ($diff - 1) * 100]];
	    incr stat_cnt;
	    set stat_sum [expr $stat_sum + log($diff)];
	} else {
	    puts -nonewline $logfd "<TD>-</TD>";
	}
    }
    puts $logfd "</TR>";
}
