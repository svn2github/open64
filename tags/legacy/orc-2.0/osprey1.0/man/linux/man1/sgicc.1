'\"
'\" Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
'\" This information is free software. For details about the redistribution
'\" and modification rights, see the copyright to the 0.9 SGI Pro64 sgif90
'\" compiler or the SGI Pro64 sgicc compiler which releases on Linux
'\" systems.
'\"
.ad l
.TH sgicc 1
.SH NAME
\fBsgicc\fR, \fBsgiCC\fR, \fBsgi++\fR, \fBCC\fR \- Invokes the 
SGI Pro64 C or C++ compiler
.SH SYNOPSIS
\fBsgicc\fR 
'\" \%[\fB--\fR]
\%[\fB-ansi\fR]
\%[\fB-apo\fR]
\%[\fB-apokeep\fR]
\%[\fB-apolist\fR]
\%[\fB-ar\fR]
\%[\fB-c\fR]
\%[\fB-CLIST:...\fR]
\%[\fB-D\fR\ \fIname=def\fR]
\%[\fB-D\fR\ \fIname\fR]
\%[\fB-DEBUG:...\fR]
\%[\fB-E\fR]
\%[\fB-fb<\fR\fIfile>\fR]
\%[\fB-fb_create <\fR\fIpath>\fR]
\%[\fB-fb_opt <\fR\fIpath>\fR]
\%[\fB-fbgen\fR]
\%[\fB-fbuse<\fR\fIfile\fR>]
\%[\fB-G\fR\ \fInum\fR]
\%[\fB-g\fR\fIn\fR]
\%[\fB-help\fR]
\%[\fB-I\fR]
\%[\fB-I\fR\ \fIdir\fR]
\%[\fB-ignore_suffix\fR]
\%[\fB-INLINE:...\fR]
\%[\fB-IPA:...\fR]
\%[\fB-L\fR\ \fIdirectory\fR]
\%[\fB-l\fR\ \fIlibrary\fR]
\%[\fB-LIST:...\fR]
\%[\fB-LNO:...\fR]
\%[\fB-MP\fR]
\%[\fB-mp\fR]
\%[\fB-mplist\fR]
\%[\fB-nocpp\fR]
\%[\fB-nostdinc\fR]
\%[\fB-o\fR\ \fIoutput\fR]
\%[\fB-O\fIn\fR]
\%[\fB-OPT:...\fR]
\%[\fB-S\fR]
\%[\fB-show\fR]
\%[\fB-TARG:...\fR]
\%[\fB-TENV:...\fR]
\%[\fB-U\fR\ \fIname\fR]
\%[\fB-v\fR]
\%[\fB-version\fR]
\%[\fB-W\fR\ \fIc,arg1\fR\fB[,\fR\fIarg2\fR\fB...]\fR]
\%[\fB-w\fR]
\%[\fB-Y\fR\ \fIc,path\fR]
\%\fIfiles\fR
.PP
\fBsgiCC\fR
\%[\fB-ansi\fR]
\%[\fB-apo\fR]
\%[\fB-apokeep\fR]
\%[\fB-apolist\fR]
\%[\fB-ar\fR]
\%[\fB-c\fR]
\%[\fB-D\fR\ \fIname=def\fR]
\%[\fB-D\fR\ \fIname\fR]
\%[\fB-DEBUG:...\fR]
\%[\fB-E\fR]
\%[\fB-fb<\fR\fIfile>\fR]
\%[\fB-fb_create <\fR\fIpath>\fR]
\%[\fB-fb_opt <\fR\fIpath>\fR]
\%[\fB-fbgen\fR]
\%[\fB-fbuse<\fR\fIfile\fR>]
\%[\fB-G\fR\ \fInum\fR]
\%[\fB-g\fR\fIn\fR]
\%[\fB-gslim\fR]
\%[\fB-help\fR]
\%[\fB-I\fR]
\%[\fB-I\fR\ \fIdir\fR]
\%[\fB-ignore_suffix\fR]
\%[\fB-INLINE:...\fR]
\%[\fB-IPA:...\fR]
\%[\fB-L\fR\ \fIdirectory\fR]
\%[\fB-l\fR\ \fIlibrary\fR]
\%[\fB-LIST:...\fR]
\%[\fB-LNO:...\fR]
\%[\fB-MP\fR]
\%[\fB-mp\fR]
\%[\fB-nocpp\fR]
\%[\fB-nostdinc\fR]
\%[\fB-o\fR\ \fIoutput\fR]
\%[\fB-O\fIn\fR]
\%[\fB-OPT:...\fR]
\%[\fB-S\fR]
\%[\fB-show\fR]
\%[\fB-TARG:...\fR]
\%[\fB-TENV:...\fR]
\%[\fB-U\fR\ \fIname\fR]
\%[\fB-v\fR]
\%[\fB-version\fR]
\%[\fB-W\fR\ \fIc,arg1\fR\fB[,\fR\fIarg2\fR\fB...]\fR]
\%[\fB-w\fR]
\%[\fB-w2\fR]
\%[\fB-Y\fR\ \fIc,path\fR]
\%\fIfiles\fR
.SH DESCRIPTION
This man page describes the \fBsgicc\fR(1), 
and \fBsgiCC\fR(1) commands.
The \fBsgicc\fR command invokes the SGI Pro64 C compiler and the
source preprocessor on source files that contain C code.
The \fBsgiCC\fR command invokes the SGI Pro64 C++ compiler.
.PP
In addition to the options described here, the sgicc/CC
compiler supports the following GNU CC options
(as described on the GCC man page or at
\%\fBhttp://www.gnu.org/software/gcc/onlinedocs/gcc_2.html#SEC9\fR):
.IP \(bu 4
overall options
.IP \(bu 4
Invoking G++
.IP \(bu 4
C Dialect options
.IP \(bu 4
C++ Dialect options
.IP \(bu 4
Warning options
.IP \(bu 4
Preprocessor options
.IP \(bu 4
Assembler options
.IP \(bu 4
Link options
.IP \(bu 4
Directory options
.IP \(bu 4
Spec files
.IP \(bu 4
Target options
.IP \(bu 4
Submodel options
.IP \(bu 4
Environment variables
.PP
\fBNOTE that the following GCC options are NOT supported:\fR
.IP \(bu 4
all optimization options (except the \fB-O\fR option which is
described later in this man page)
.IP \(bu 4
all configuration dependent options
.IP \(bu 4
all code generation options
.IP \(bu 4
the \fB-pipe\fR, \fBgcoff\fR, \fBgstabs\fR options
.PP
Throughout this man page, the differences between
the C and C++ compilers are noted when appropriate.
When there is no difference, the phrases, \fIthe compiler\fR
or \fIthe C/C++ compiler\fR, refer to both compilers.
.PP
By default, the compiler creates an executable
file named \fBa.out\fR.
Other files used and created by the compiler
are discussed under the FILES section of this man page.
See the \fBld\fR(1) man page for \%load-time options.
.PP
If conflicting options are specified, the option
specified last on the command line overrides the
previously specified option.
Exceptions to this rule are noted in the individual
option descriptions.
.PP
Most \fB#pragma\fR directives override corresponding
command-line options.
Exceptions to this rule are noted in the option descriptions
on this man page.
.PP
Some command options, for example, \%\fB-LIST\fR,
\%\fB-LNO\fR, \%\fB-MP\fR, \%\fB-OPT\fR, \%\fB-TARG\fR, and
\%\fB-TENV\fR, accept several arguments and allow you to
specify a setting for each argument.
To specify multiple arguments,
either use colons to separate each argument or specify multiple
options on the command line.
For example, the following command lines are
equivalent:
.nf
.in +5n
\fC
sgicc -LIST:notes=ON:options=OFF b.f
sgicc -LIST:notes=ON -LIST:options=OFF b.f
\fR
.in
.fi
.PP
Unless otherwise specified in the option description,
the following options apply to the \fBsgicc\fR
and \fBsgiCC\fR commands.
'\"
'\" ansi
'\"
.TP 8
\fB-ansi\fR
Enables pure ANSI/ISO C mode.
To see a list of defined symbols, enter the
\fBsgicc -show foo.c\fR command and see which
symbols have been added as \fB-Dsymbol_name\fR.
\fBxansi\fR (the default) enables ANSI/ISO C with all the same definitions as
K&R/Version7 C mode (\%\fB-ansi\fR).
\fB__STDC__\fR and \fB__EXTENSIONS__\fR
are defined, many symbols are added into the namespace, and
\fB__INLINE_INTRINSICS\fR
is defined and may cause some intrinsic \fB<math.h>\fR, \fB<stdio.h>\fR,
\fB<string.h>\fR, and \fB<curses.h>\fR library functions to be inlined.
Such inlined functions may not set \fBerrno\fR
in accordance with the strict ANSI/ISO C standard requirements.
.IP
If specified with \%\fB-cckr\fR or \%\fB-ansi\fR,
the last option specified is effective and the rest
are ignored.
If specified with \%\fB-ansi\fR or \%\fB-xansi\fR,
the last option specified is effective and the rest
are ignored.
.sp
NOTE: When compiling in pure ANSI/ISO mode,
several standard UNIX symbols (for example,
\fBenviron\fR, \fBend\fR)
may only be referenced by their ANSI/ISO-compliant counterparts
(for example, \fB_environ\fR, \fB_end\fR).
The type \fBlong long\fR is allowed, but results in a warning.
To take advantage of this type in libraries that refer to
\fB__int64_t\fR and \fB__uint64_t\fR,
you must define the macro
\fB__LONGLONG\fR on the command line;
otherwise, \fB__int64_t\fR and \fB__uint64_t\fR are defined
as structs.
'\"
'\" apo
'\"
.TP
\%\fB-apo\fR, \%\fB-apokeep\fR, \%\fB-apolist\fR
Invokes the
\%Auto-Parallelizing Option (APO), which automatically
converts sequential code into parallel code by inserting parallel
directives where it is safe and beneficial to do so.
Specifying \%\fB-apo\fR also sets the \%\fB-mp\fR
option.  Both \%\fB-apokeep\fR and \%\fB-apolist\fR produce a listing
file, \fIfile\fR\fB.list\fR.
Specifying \%\fB-apokeep\fR retains \fIfile\fB.anl\fR and
\fIfile\fB.m\fR, which can be used
by the parallel analyzer, ProDev ProMP
(see the EXAMPLES section).
When the \%\fB-IPA\fR option is specified with
\%\fB-apokeep\fR,
the default settings for IPA suboptions are used with the exception of
\%\fB-IPA:inline\fR, which is set to \fBOFF\fR.
'\"
'\" ar
'\"
.TP
\fB-ar\fR
Creates an archive using \fBar\fR(1) instead of
a shared object or executable.
The name of the archive is specified by using
the \fB-o\fR option.
Template entities required by the objects
being archived are instantiated before creating the archive.
The \fBsgiCC\fR command implicitly passes the
\fB-r\fR and \fB-c\fR options of \fBar\fR to
\fBar\fR in addition to the name of the archive
and the objects being created.
Any other option that can be used in conjunction
with the \%\fB-c\fR option of \fBar\fR can be passed
to \fBar\fR using \%\fB-WR,option_name\fR.
.sp
NOTE: The objects specified with this option must
include all of the objects that will be included in the
archive.
Failure to do so may cause prelinker internal errors.
In the following example,
\fBliba.a\fR is an archive containing only
\fBa.o\fR, \fBb.o\fR and \fBc.o\fR.
The \fBa.o\fR, \fBb.o\fR and \fBc.o\fR objects
are prelinked to instantiate any required
template entities, and the \fBar -r -c -v liba.a a.o b.o c.o\fR
command is executed.
All three objects must be specified with \fB-ar\fR
even if only \fBb.o\fR needs to be replaced in \fBlib.a\fR.
.RS
.nf
.in +5n
\fC
sgiCC -ar -WR,-v -o liba.a a.o b.o c.o
\fR
.in
.fi
.RE
.IP
See the \fBld\fR(1) man page for more information about
shared libraries and archives.
'\"
'\" c
'\"
.TP
\fB-c\fR
Creates an intermediate object file for each named source file,
but does not link the object files.
The intermediate object file name corresponds
to the name of the source file; a \&\fB.o\fR suffix
is substituted for the suffix of the source file.
.sp
Because they are mutually exclusive,
do not specify this option with the \fB-r\fR option.
'\"
'\" clist
'\"
.TP
\fB-clist\fR
(\fBsgicc\fR only) Enables the C listing.
Specifying \%\fB-clist\fR is the equivalent of specifying
\%\fB-CLIST:=ON\fR.
'\"
'\" CLIST
'\"
.TP 8
\fB-CLIST: \&...\fR
(\fBcc\fR only) Controls emission of the compiler's internal program
representation back into C code,
after IPA inlining and loop-nest transformations.
This is a diagnostic tool, and the generated C code
may not always be compilable.
The generated C code is written to two files, a header file
containing file-scope declarations,
and a file containing function definitions.
The individual controls in this group are as follows:
.RS
.TP
\fB= ( ON|OFF )\fR
Enables the C listing.
This option is implied by any of the others,
but may be used to enable the listing when
no other options are required.
For example,
specifying \%\fB-CLIST:=ON\fR is the equivalent of
specifying \%\fB-clist\fR.
.TP
\fBdotc_file=\fR \fIfilename\fR
Writes the program units into the specified file, \fIfilename\fR.
The default source file name has the extension \fB.w2c.c\fR.
.TP
\fBdoth_file=\fR \fIfilename\fR
Specifies the file into which file-scope declarations are deposited.
Defaults to the source file name with the extension \fB.w2c.h\fR.
.TP
\fBemit_omp [ = ( ON|OFF )]\fR
When \fBON\fR is specified,
generated files use OpenMP directives (default).
When \fBOFF\fR is specified,
generated files use MIPS multiprocessing directives,
which are outmoded.
.TP
\fBemit_pfetch [ = ( ON|OFF )]\fR
Displays prefetch information as comments in the transformed source.
If \fBON\fR or \fBOFF\fR is not specified, the default is \fBOFF\fR.
.TP
\fBlinelength=\fR \fIn\fR
Sets the maximum line length to
\fIn\fR characters.
The default is unlimited.
.TP
\fBshow [ = ( ON|OFF )]\fR
Prints the input and output file names to stderr.
If \fBON\fR or \fBOFF\fR is not specified, the default is \fBON\fR.
.RE
'\"
'\" D
'\"
.TP
\fB-D\fR \fIname=def\fR
.PD 0
.TP
\fB-D\fR \fIname\fR
Define \fIname\fR
to the macro preprocessor,
as if by \fB#define\fR.
If no definition is given, \fIname\fR is defined as \fB1\fR.
.PD
'\"
'\" DEBUG
'\"
.TP 8
\fB-DEBUG: \&...\fR
Controls compiler features related to debugging,
such as checking for possible errors (at compile time or
execution time), or controlling the
treatment of warning messages.
See the \fBDEBUG_group(5)\fR
man page for more information,
including the individual options in this group.
See also the \%\fB-g\fR
option for controlling emission of information for the debugger.
'\"
'\" E
'\"
.TP
\fB-E\fR
Runs only the preprocessor phase on the source files
and sends the result to standard output.
The resultant output will contain line directives.
This option overrides the \%\fB-nocpp\fR option.
'\" 
'\" fb
'\"
.TP
\fB-fb\fR \fB<\fR\fIfile\fR\fB>\fR
Specifies the feedback file (\fIfile\fR) to be used
as input to the compilation.
This feedback file
can be produced by using \fBprof\fR(1)
with its \%\fB-feedback\fR
option from one or more \&\fB.Counts\fR
files generated by the execution of the
instrumented program produced by
\fBpixie\fR(1).
'\"
'\" fb_create
'\"
.TP
\fB-fb_create <\fR\fIpath>\fR
Generates an instrumented executable program
which is suitable for producing one or more
\&\fB.instr\fR files for subsequent feedback compilation.
When the \fB-c\fR option is used to produce an
object file that eventually linked to form an 
instrumneted executable, the \fB-fb_create\fR
option should also be specified.
The executable will be instrumented with special
instructions that generates information that
the compiler can use to better optimize your program.
When this instrumented executable is run (usually
with a representative "training" inputset)
that information is stored in a file call \&\fBa.out.instr.<\fIpid\fB>\fR
in the <\fIpath\fR> directory that you specified.
The path should be a complete path that also
includes the name of the executable.
For example, \fB/tmp/fbdir/a.out\fR would produce a 
file called \fB/tmp/fbdir/a.out.instr.<\fIpid\fB>\fR where
<\fIpid\fR> is the process id of the invocation of your
instrumented program run with a training input.
'\"
'\" fb_opt
'\"
.TP
\fB-fb_opt\fR <\fIpath\fR>
Specifies the directory that contains the
instrumentation output generated by compiling
with \fB-fb_create\fR and then running your program
with a training inputset.
This tells the compiler to use this information
to better optimize your program.
When the \fB-c\fR option is used to produce an object
file that is eventually linked to form an instrumented
executable, the \fB-fb_opt\fR option should also be specified.
'\"
'\" fbgen
'\"
.TP
\fB-fbgen\fR
Generates an instrumented executable program.
Such an executable is suitable for producing one or more
\&\fB.Counts\fR files for feedback compilation.
When the \%\fB-c\fR option is used to produce an object file that is
eventually linked to form an instrumented executable,
the \%\fB-fbgen\fR option should also be specified.
If the \%\fB-c\fR option
is not specified,
\fBpixie\fR(1) is run automatically to
instrument the generated executable.
Run the \fB.x\fR executable file that is generated
without the \fB.x\fR suffix.
'\"
'\" fbuse
'\"
.TP
\fB-fbuse \fIfile\fR
Specifies a \&\fB.Counts\fR
file that is used to guide feedback compilation.
The specified file is used along with the
instrumented binary that produced the
\&\fB.Counts\fR file to generate a compiler feedback file,
which is then used to
direct optimization of the program.
Run the \&\fB.x\fR executable file that is generated
without the \&\fB.x\fR suffix.
'\"
'\" G
'\"
.TP
\fB-G\fR \fInum\fR
Specifies the maximum size (in bytes) of a data item that is to
be accessed from the global pointer.
\fInum\fR must be a positive integral number.
If \fInum\fR is zero, no data is accessed from the global pointer.
The default value is 8 bytes.
.sp
Data stored relative to the global pointer can be accessed by the program
quickly, but this space is limited.
Large programs may overflow the
space accessed by the global pointer at load time.
If the loader gives the error message \fBBad \%-G num value\fR,
recompile specifying a lower value for \fIn\fR
(or add \%\fB-G0\fR if no \%\fB-G\fR was specified.
You should usually use the same value of this switch for compiling all
files that comprise a program executable for DSO.
'\"
'\" g
'\"
.TP
\fB-g\fR[\fIn\fR]
Specifies the debugging information produced by the compiler.
\fIn\fR can be one of the following:
.RS
.TP 4
\fB0\fR
No debugging information for symbolic debugging
is produced.
This is the default.
.TP
\fB2\fR
Produces additional debugging information
for full symbolic debugging.
Optimizations that limit full symbolic debugging are not done.
This overrides the optimization options
(\%\fB-O\fR, \%\fB-O1\fR, \%\fB-O2\fR, \%\fB-O3\fR).
.TP
\fB3\fR
Produces additional debugging information for
symbolic debugging of fully optimized code,
which makes the debugger inaccurate.
This can be used with the optimization options
(\%\fB-O\fR, \%\fB-O1\fR, \%\fB-O2\fR, \%\fB-O3\fR).
.RE
.IP
Specifying \fB-g\fR without a debug level is
equivalent to specifying \fB-g2\fR if not optimization
and \fB-g3\fR if optimizing.
'\"
'\" help
'\"
.TP 8
\fB-help\fR
Lists all of the available options.
'\" .TP  Why show this one if it is the same as another one?
'\" \fB-I\fR
'\" This option is the same as the \%\fB-nostdinc\fR
'\" option but will be phased out in a future release;
'\" use the \%\fB-nostdinc\fR option instead.
'\" This switch is nonstandard and may
'\" not be supported across product lines.
'\"
'\" I
'\"
.TP
\fB-I\fR \fIdir\fR
Searches directories for \fB#include\fR files
whose names do not begin with \fB/\fR.
Directories are searched in the following order:
directory of the \fIfile\fR argument, directories specified in
\%\fB-I\fR options, and the standard directory (\fB/usr/include\fR).
'\"
'\" ignore_suffix
'\"
.TP
\fB-ignore_suffix\fR
Determines the language of the source file being
compiled by the command used to invoke the compiler.
By default, the language is determined by the
file suffixes (\&\fB.c\fR, \&\fB.cpp\fR, \&\fB.C\fR,
\&\fB.cxx\fR, \&\fB.f\fR, \&\fB.f90\fR, \&\fB.s\fR).
When the \%\fB-ignore_suffix\fR option is specified,
the \fBsgicc\fR command invokes the C compiler.
'\"
'\" INLINE
'\"
.TP 8
\fB-INLINE: \&...\fR
The standalone inliner option group controls application of
intra-file subprogram inlining when interprocedural analysis is
not enabled (see the \%\fB-IPA\fR description).
See the \fBipa(5)\fR man page for more information,
including the individual options in this group.
'\"
'\" IPA
'\"
.TP
\fB-IPA: \&...\fR
The inter-procedural analyzer option group controls application of
inter-procedural analysis and optimization, including inlining,
constant propagation, common block array padding, dead function elimination,
alias analysis, and others.
Specify \%\fB-IPA\fR by itself to invoke the
interprocedural analysis phase with default options.
If you compile and link in distinct steps,
you must specify at least \%\fB-IPA\fR
for the compile step, and specify
\%\fB-IPA\fR and the individual options in the group
for the link step.
If you specify \%\fB-IPA\fR
for the compile step, and do not specify
\%\fB-IPA\fR for the link step, you will receive an error.
See the \fBipa\fR(5) man page for more information,
including the individual options in this group.
'\"
'\" L
'\"
.TP
\fB-L\fR \fIdirectory\fR
In XPG4 mode,
changes the algorithm of searching for
libraries named in \%\fB-L\fR operands
to look in the specified directory
before looking in the default location.
Directories specified in \%\fB-L\fR options are searched in the
specified order.
Multiple instances of \%\fB-L\fR options can be specified.
'\"
'\" l
'\"
.TP
\fB-l\fR \fIlibrary\fR
In XPG4 mode,
searches the specified \fIlibrary\fR.
A library is searched when its name is encountered,
so the placement of a \%\fB-l\fR operand is significant.
'\"
'\" LIST
'\"
.TP
\fB-LIST: \&...\fR
The listing option flag
controls information that gets written to a listing (\fB.l\fR) file.
The individual controls in this group are:
.RS
.TP +8
\fB= ( ON|OFF )\fR
Enables or disables writing the listing file.
The default is \fBON\fR if any \%\fB-LIST:\fR
group options are enabled.
By default, the listing file contains a list of options enabled.
.TP
\fBall_options [ = ( ON|OFF )]\fR
Enables or disables listing of most supported options.
The default is \fBOFF\fR.
.TP
\fBnotes [ = ( ON|OFF )]\fR
If an assembly listing is generated
(for example, on \%\fB-S\fR),
various parts of the compiler (such as software pipelining)
generate comments within the listing that describe what they have done.
Specifying \fBOFF\fR
suppresses these comments.
The default is \fBON\fR.
.TP
\fBoptions [ = ( ON|OFF )]\fR
Enables or disables listing of the options modified (directly in the
command line, or indirectly as a side effect of other options).
The default is \fBOFF\fR.
.TP
\fBsymbols [ = ( ON|OFF )]\fR
Enables or disables listing of information about the
symbols (variables) managed by the compiler.
.RE
'\"
'\" LNO
'\"
.TP
\fB-LNO\fR
Specifies options and transformations performed on loop nests.
This option is enabled only if the \%\fB-O3\fR
option is also specified on the compiler command line.
For information on the LNO options that are in effect
during a compilation, use the \%\fB-LIST\fR option.
See the \fBlno\fR(5) man page for more information,
including the individual options in this group.
'\"
'\" MP
'\"
.TP
\%\fB-MP:\ \&.\|.\|.\fR
Specifies individual multiprocessing options that provide fine control
over certain optimizations.
You must also specify the \%\fB-mp\fR option on the command line.
This enables all the \%\fB-MP\fR options.
.sp
The arguments to the \fB-MP\fR option are as follows:
.RS 10
.TP 20
\fBArgument\fR
\fBAction\fR
.TP
\fBcheck_reshape=\fIsetting\fR
Enables or disables runtime consistency
checks across procedure boundaries when passing reshaped
arrays (or portions thereof) as actual arguments.
Specify \fBON\fR or \fBOFF\fR for \fIsetting\fR.
The default is \fBcheck_reshape=OFF\fR.
.TP
\fBclone=\fIsetting\fR
Enables or disables autocloning.
Specify \fBON\fR or \fBOFF\fR for \fIsetting\fR.
The compiler automatically
duplicates procedures that are called with
reshaped arrays as actual arguments for the incoming distribution.
If you have explicitly specified the distribution on all relevant
dummy arguments, you can disable autocloning. The
consistency checking of the distribution between actual and
dummy arguments is not affected by this option and is
always enabled.  The default is \fBclone=ON\fR.
.TP
\fBdsm=\fIsetting\fR (Origin series systems only)
Enables or disables recognition of the distributed shared memory
directives.
Specify \fBON\fR or \fBOFF\fR for \fIsetting\fR.
The default is \fBdsm=ON\fR.
.TP
\fBold_mp=\fIsetting\fR
Enables or disables recognition of the Silicon Graphics
multiprocessing directives and the Origin series distributed shared
memory directives.  These directives are
the \%loop-level multiprocessing directives (including those for Origin
series systems).
Specify \fBON\fR or \fBOFF\fR for \fIsetting\fR.
The default is \fBold_mp=ON\fR.
.TP
\fBopen_mp=\fIsetting\fR
Enables or disables recognition of the OpenMP C/C++ API
multiprocessing directives and the Silicon Graphics extensions to
OpenMP.  These directives begin with an \fBomp\fR prefix.
Specify \fBON\fR or \fBOFF\fR for setting.  The default is \fBON\fR.
.RE
'\" 
'\" mp
'\"
.TP
\fB-mp\fR
Generates multiprocessing code for the files being compiled.  This
option causes the compiler to recognize all multiprocessing
directives.
.sp
If you are licensed for APO, specify the \fB-apo\fR option
which invokes APO and sets the \%\fB-mp\fR option.
See the \fB-apo\fR option description for details.
'\"
'\" mplist
'\"
.TP
\fB-mplist\fR
This option generates file \fBfile.w2c.c\fR.
If you are licensed for APO, use the \fBapolist\fR option.
See the \fB-apolist\fR option description for details.
.sp
For more information on multiprocessing directives for
the O32 ABI,
see the \fIC Language Reference Manual\fR.
.PD
'\"
'\" nocpp
'\"
.TP
\fB-nocpp\fR
(\fBsgicc\fR only)
Does not run the preprocessor phase on the source files.
This option is ignored when compiling a \fB.i\fR file.
'\"
'\" noinline
'\"
.TP
\fB-noinline\fR
Suppresses expansion of inline functions.
When this option is specified, copies of inline
functions are emitted as static functions in
each compilation unit where they are called.
It is preferable to use \fB-INLINE:=OFF\fR or
\fB-IPA:inline=OFF\fR if you are using IPA (see \fBipa\fR(5)).
One of these options must be specified if you are using IPA.
'\"
'\" nostindc
'\"
.TP
\fB-nostdinc\fR
Does not search for \fB#include\fR files in the standard directory
(\fB/usr/include\fR).
'\"
'\" o
'\"
.TP
\fB-o\fR \fIoutfile\fR
When this option is used in conjunction with
the \fB-c\fR option and a single
C source file, a relocatable object file
named \fIoutfile\fR is produced.
When specified with the \fB-S\fR option, the \fB-o\fR
option is ignored.
If \fB-o\fR and \fB-c\fR are not specified,
a file named \fBa.out\fR is produced.
.PD
'\"
'\" O
'\"
.TP
\fB-O\fR[\fIn\fR]
Specifies the basic level of optimization desired.
\fIn\fR can be one of the following:
.RS
.TP
\fB0\fR
Turns off all optimizations.  This is the default.
.TP
\fB1\fR
Turns on local optimizations that can be done quickly.
.TP
\fB2\fR
Turns on extensive optimization.
The optimizations at this level are
generally conservative, in the sense that they are virtually always
beneficial, provide improvements commensurate to the compile time
spent to achieve them, and avoid changes which affect such things
as floating point accuracy.
.TP
\fB3\fR
Turns on aggressive optimization.
The optimizations at this level are distinguished from
\%\fB-O2\fR by their aggressiveness, generally seeking highest-quality generated
code even if it requires extensive compile time.
They may include optimizations that are generally beneficial but
may hurt performance.
.IP
This option also enables the \%\fB-OPT:roundoff=2\fR
option which does aggressive rearrangement of floating
point calculations with potential effects on accuracy.
See the \fBopt\fR(5), \fBipa\fR(5), and \fBlno\fR(5)
man pages for additional information on general optimization,
standalone inliner and interprocedural analysis,
and loop nest optimizer, respectively.
.IP
If no value is specified for \fIn\fR, 2 is assumed.
.RE
'\"
'\" Ofast
'\"
.TP
\fB-Ofast\fR
Selects optimizations that maximize performance for the given 
target platform.
These optimizations may differ between releases of the compiler
and among the supported platforms.
They enable the full instruction set of the target platform.
Although the optimizations are generally safe, they may affect floating
point accuracy due to rearrangement of computations
(for examples, see the \fB-OPT:roundoff=3\fR and
\fB-OPT:div_split\fR options in the \fBopt\fR(5) man page).
Typical optimizations include
\%\fB-O3\fR, \%\fB-IPA\fR, 
and \%\fB-OPT:Olimit=0:roundoff=3:div_split=ON:alias=typed\fR.
To determine which options are set by
\%\fB-Ofast\fR, use the \%\fB-LIST:options\fR option.
'\"
'\" OPT
'\"
.TP
\%\fB-OPT:...\fR
Controls miscellaneous optimizations.
This option overrides default optimizations.
See the \fBopt\fR(5) man page for more information,
including the individual options in this group.
'\"
'\" S
'\"
.TP 8
\fB-S\fR
Compiles the specified source files and creates symbolic
assembly language output files suffixed with \fB.s\fR.
'\"
'\" show
'\"
.TP
\fB-show\fR
Prints the passes as they execute with their arguments
and their input and output files.
'\"
'\" TARG
'\"
.TP
\fB-TARG: \&...\fR
The target option group controls the target architecture and machine for
which code is generated. See the \fBTARG\fR(5) man page for details
about the individual controls in this group.
'\"
'\" TENV
'\"
.TP 8
\fB-TENV: \&...\fR
The target environment option group controls the target environment assumed
and/or produced by the compiler.  See the \fBTENV\fR(5) man page
for details about the individual controls in this group.
'\"
'\" U
'\"
.TP
\%\fB-U\fR \fIname\fR
Removes any initial definition of \fIname\fR.
'\"
'\" v
'\"
.TP
\fB-v\fR
Print (on standard error output) the commands executed to run
the stages of compilation. Also print the version number of
the compiler driver program and of the preprocessor and the 
compiler proper.
'\"
'\" version
'\"
.TP
\fB-version\fR
Displays the version number of the compiler.
'\"
'\" W
'\"
.TP
\fB-W\fR \fIc,arg1\fR\fB[,\fR\fIarg2\fR\fB...]\fR
Passes the argument(s) \fIargi\fR
to the compiler pass \fIc\fR
where \fIc\fR is one of [\fBpfibal\fR].
The \fBc\fR selects the compiler pass according to the following table:
.RS
.TP 30
\fBCharacter\fR
\fBName\fR
.TP
\fBp\fR
preprocessor
.TP
\fBf\fR
front end
.TP
\fBi\fR
inliner
.TP
\fBb\fR
back end
.TP
\fBa\fR
assembler
.TP
\fBl\fR
loader
.PP
Sets of these phase names can be used to select any combination of phases.
For example, \%\fB-Wba,-o,foo\fR passes the option \%\fB-o foo\fR
to the \fBb\fR and \fBa\fR phases.
.RE
'\"
'\" w
'\"
.TP
\fB-w\fR
Suppresses warning messages.
'\"
'\" Y
'\"
.TP
\fB-Y\fR \fIc,path\fR
Sets the \fIpath\fR in which to find the associated phase,
using the same phase names as given in the
\%\fB-W\fR option.
The following characters can also be specified:
.RS
.TP
\fBI\fR
Specifies where to search for include files
.TP
\fBS\fR
Specifies where to search for startup files (\fBcrt*.o\fR)
.TP
\fBL\fR
Specifies where to search for libraries
.RE
.TP
\fIfiles\fR
Indicates the source files to be compiled or assembled.
File suffixes and the commands that accept them are as follows:
.RS 10
.TP 15
\fBCommand\fR
\fBFile Suffix\fR
.TP
\fBsgiCC\fR
\&\fB.c\fR, \&\fB.C\fR, \&\fB.ii\fR, \&\fB.c++\fR,
\&\fB.C++\fR, \&\fB.cc\fR,
\&\fB.cxx\fR, \&\fB.CXX\fR, \&\fB.CC\fR,
\&\fB.cpp\fR, and \&\fB.CPP\fR
.TP
\fBsgicc\fR
\&\fB.c\fR and \&\fB.i\fR
.RE
.SH LOADER OPTIONS
Other arguments are assumed to be either loader options,
object files, or libraries.
These files, together with the results of any
compilations specified, are loaded in the order
given, producing an executable program with
the default name \fBa.out.\fR
.SH ENVIRONMENT VARIABLES
For information on environment variables, see 
the \fBpe_environ\fR(5) man page.
.SH NOTES
The compiler attempts to continue after finding semantic errors.
These errors may result in compiler internal errors.
.SH EXAMPLES
EXAMPLE 1:
Compile with extensive optimization enabled, allowing
transformations which affect floating point roundoff and overflow,
assuming strict ANSI C aliasing rules.
.nf
.in +5n
\fC
sgicc -O2 -OPT:roundoff=2:alias=typed ...
\fR
.in
.fi
.PP
EXAMPLE 2:
Compile with aggressive optimization (including SWP) enabled, allowing
transformations with arbitrary effects on floating point roundoff
and overflow.
.nf
.in +5n
\fC
sgicc -O3 -OPT:roundoff=3 ...
\fR
.in
.fi
.PP
EXAMPLE 3:
Compile with aggressive optimization and generate
the analysis files used by ProDev ProMP, the
parallel analyzer.
The \fBcvpav\fR(1) command invokes the parallel analyzer.
.nf
.in +5n
\fC
sgicc -03 -c -apokeep test.c test.o
cvpav -f test.c
\fR
.in
.fi
.SH FILES
.TP 21
\fBa.out\fR
Default name of executable output file
.TP 21
\fIfile\fB.c\fR
C source file
.TP
\fIfile\fB.i\fR
C source file
.TP
\fIfile\fB.anl\fR, \fIfile\fB.m\fR
Program analysis files used by the parallel
analyzer, ProDev ProMP
.TP
\fIfile\fB.o\fR
Object file
.TP
\fIfile\fB.s\fR
Assembly language source file 
.TP
\fIfile\fB.l\fR
Listing file
.TP
\fBii_files\fR
Directory that contains \&\fB.ii\fR files
.TP
\fBmon.out\fR
File produced for analysis by \fBprof\fR(1)
.TP
\fBrii_files\fR
Directory generated for book-keeping information used
to implement data distribution directives
.TP
\fB/usr/include\fR
Standard directory for \fB#include\fR files
.TP
\fB/usr/bin/ld\fR
Loader
.TP
\fB/usr/bin/cord\fR
Function rearranger
.TP
\fB/tmp/cc*\fR
Temporary files
.SH SEE ALSO
\fBcvpav\fR(1),
\fBftoc\fR(1),
\fBpixie\fR(1),
\fBwhat\fR(1)
.PP
\fBlno\fR(5),
\fBopt\fR(5),
\fBpe_environ\fR(5)
\fBtarg\fR(5),
\fBtenv\fR(5)
