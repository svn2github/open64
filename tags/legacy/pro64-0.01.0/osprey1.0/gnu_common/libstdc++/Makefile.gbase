#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

# -*- Mode:Makefile -*-

#
#  Makefile.base for glibc++
#

#----------------------------------------------------------------------
#  If no command line targets specified, force this one.
#----------------------------------------------------------------------
.MAIN: default
.USE:  default

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build. 
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = ..

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------
.SHELL:  path=/bin/sh

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------

HOSTDEFS += -D_GNU_SOURCE

ifeq ($(BUILD_TARGET), IA32)
    HOSTDEFS += D_IO_MTSAFE_IO
endif

ifeq ($(BUILD_TARGET), IA64)
    HOSTDEFS += -D_NOTHREADS
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

LIBSTD	             = $(BUILD_BASE)
STL_INCLUDE_INTERNAL = $(LIBSTD)/stl
STD_INCLUDE_INTERNAL = $(LIBSTD)/std
LIBIO                = $(BUILD_BASE)/../libio


# These are the directories in which to look for source files.

SRC_DIRS =	\
  $(LIBSTD)     \
  $(LIBIO)	\


HEADER_DIRS =			\
  $(LIBSTD)         		\
  $(STL_INCLUDE_INTERNAL)	\
  $(STD_INCLUDE_INTERNAL)	\
  $(LIBIO)          		\



#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

LIBSTD_SOURCES      =	\
	cmathi.cc	\
	cstdlibi.cc	\
	cstringi.cc	\
	stdexcepti.cc	\
	stlinst.cc	\
	valarray.cc	\


LIBIO_SOURCES       =	\
	PlotFile.cc	\
	SFile.cc	\
	builtinbuf.cc	\
	editbuf.cc	\
	filebuf.cc	\
	fstream.cc	\
	indstream.cc	\
	ioassign.cc	\
	ioextend.cc	\
	iomanip.cc	\
	iostream.cc	\
	isgetline.cc	\
	isgetsb.cc	\
	isscan.cc	\
	osform.cc	\
	parsestream.cc	\
	pfstream.cc	\
	procbuf.cc	\
	sbform.cc	\
	sbgetline.cc	\
	sbscan.cc	\
	stdiostream.cc	\
	stdstrbufs.cc	\
	stdstreams.cc	\
	stream.cc	\
	streambuf.cc	\
	strstream.cc	\


LIBSTD_SPECIAL      =	\
	cinst.cc	\
	sinst.cc	\

LIBSTD_OBJS         = $(LIBSTD_SOURCES:.cc=.o) $(LIBIO_SOURCES:.cc=.o)

LIBSTD_SPECIAL_OBJS =	\
	cstrmain.o	\
	cstrio.o	\
	fcomplex.o	\
	fcomio.o	\
	dcomplex.o	\
	dcomio.o	\
	ldcomplex.o	\
	ldcomio.o	\

# The following four macros are used when compiling the special objs.

STR_DEFINES =	\
	-DREP	\
	-DMAIN	\
	-DTRAITS\
	-DADDSS	\
	-DADDPS	\
	-DADDCS	\
	-DADDSP	\
	-DADDSC	\
	-DEQSS	\
	-DEQPS	\
	-DEQSP	\
	-DNESS	\
	-DNEPS	\
	-DNESP	\
	-DLTSS	\
	-DLTPS	\
	-DLTSP	\
	-DGTSS	\
	-DGTPS	\
	-DGTSP	\
	-DLESS	\
	-DLEPS	\
	-DLESP	\
	-DGESS	\
	-DGEPS	\
	-DGESP	\


STR_IO_DEFINES = -DEXTRACT -DINSERT -DGETLINE

COMPLEX_DEFINES =\
	-DMAIN	\
	-DADDCC	\
	-DADDCF	\
	-DADDFC	\
	-DSUBCC	\
	-DSUBCF	\
	-DSUBFC	\
	-DMULCC	\
	-DMULCF	\
	-DMULFC	\
	-DDIVCC	\
	-DDIVCF	\
	-DDIVFC	\
	-DPLUS	\
	-DMINUS	\
	-DEQCC	\
	-DEQCF	\
	-DEQFC	\
	-DNECC	\
	-DNECF	\
	-DNEFC	\
	-DABS	\
	-DARG	\
	-DPOLAR	\
	-DCONJ	\
	-DNORM	\
	-DCOS	\
	-DCOSH	\
	-DEXP	\
	-DLOG	\
	-DPOWCC	\
	-DPOWCF	\
	-DPOWCI	\
	-DPOWFC	\
	-DSIN	\
	-DSINH	\
	-DSQRT	\


COMPLEX_IO_DEFINES = -DEXTRACT -DINSERT

#----------------------------------------------------------------------
#  Suffixes and search paths
#
#  .INCLUDES:   These suffixes should be treated specially with resptec
#		to the .PATH.*  targets.  
#  .PATH.h:	Look in these directories for ".h" files.  This forces
#		The directories into the .INCLUDES variable that can 
#		then be added [+=] to the LCINCS variable.  Note that 
#		there must be a ".h" as a prereq for the .INCLUDES 
#		target for this to happen.
#  .PATH:	Look in these directories for source files for .o 
#		targets.
#  .SUFFIXES:	Clean out all those other suffixes used in automatic 
#		rules that just get in the way.  Normally they would 
#		not be a problem, however this makefile uses lists of 
#		.o's with no corresponding list of .c's and .eye's.  
#		For that reason, the smake tries to find an appropriate
#		original source from which it can create the .o.  That 
#		can take a while when the normal list of suffixes is 
#		36 entries long and it must search for each possibility
#		in 37 directories. 
#
#----------------------------------------------------------------------
.SUFFIXES:  
.SUFFIXES:  .o .c .cc .h
.INCLUDES:  .h

.cc.o:
	$(CXXF) -c $<
.cxx.o:
	$(CXXF) -c $<
.c.o:
	$(CCF) -c $<



VPATH    = $(SRC_DIRS)

LCOPTS   = $(STD_COMPILE_OPTS)
LCDEFS   = $(HOSTDEFS) $(TARGDEFS)
LCINCS   = $(addprefix -I, $(HEADER_DIRS))

LC++OPTS = $(STD_COMPILE_OPTS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(addprefix -I, $(HEADER_DIRS))

# setup stuff to build shared or non-shared
GLDOPTS = $(STD_LOAD_OPTS)

LDIRT =


#------------------------------------------------------------
#  Define target
#------------------------------------------------------------
LIBSTD_NAME      = libstdc++.a.2.10.0
LIBSTD_SHORTNAME = libstdc++.a
TARGETS          = $(LIBSTD_NAME) $(LIBSTD_SHORTNAME)

#----------------------------------------------------------------------
#  Variables describing additional sources, objects, and libraries
#----------------------------------------------------------------------


#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is 
#  built.
#----------------------------------------------------------------------
.BEGIN:

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is 
#  built.
#----------------------------------------------------------------------
.END:

#----------------------------------------------------------------------
#  Dependencies
#----------------------------------------------------------------------

install: default

default: $(TARGETS)


# Dependency rules for libstd

$(LIBSTD_NAME): $(LIBSTD_OBJS) $(LIBSTD_SPECIAL_OBJS)
	rm -f $(LIBSTD_NAME)
	$(AR) rc $(LIBSTD_NAME) $(LIBSTD_OBJS) $(LIBSTD_SPECIAL_OBJS)
	$(AR) s  $(LIBSTD_NAME)

$(LIBSTD_SHORTNAME): $(LIBSTD_NAME)
	rm -f $(LIBSTD_SHORTNAME)
	ln -s $(LIBSTD_NAME) $(LIBSTD_SHORTNAME)

# Temporary workaround: VLAs aren't working, so don't use them for this file.
pfstream.o: pfstream.cc
	$(C++F) -D__STRICT_ANSI__ -c $(LIBIO)/pfstream.cc -o pfstream.o

cstrmain.o: sinst.cc
	$(C++F) -DC $(STR_DEFINES) -c $(LIBSTD)/sinst.cc -o cstrmain.o
cstrio.o: sinst.cc
	$(C++F) -DC $(STR_IO_DEFINES) -c $(LIBSTD)/sinst.cc -o cstrio.o
fcomplex.o: cinst.cc
	$(C++F) -DF $(COMPLEX_DEFINES) -c $(LIBSTD)/cinst.cc -o fcomplex.o
fcomio.o: cinst.cc
	$(C++F) -DF $(COMPLEX_IO_DEFINES) -c $(LIBSTD)/cinst.cc -o fcomio.o
dcomplex.o: cinst.cc 
	$(C++F) -DD $(COMPLEX_DEFINES) -c $(LIBSTD)/cinst.cc -o dcomplex.o
dcomio.o: cinst.cc 
	$(C++F) -DD $(COMPLEX_IO_DEFINES) -c $(LIBSTD)/cinst.cc -o dcomio.o
ldcomplex.o: cinst.cc
	$(C++F) -DLD $(COMPLEX_DEFINES) -c $(LIBSTD)/cinst.cc -o ldcomplex.o
ldcomio.o: cinst.cc	
	$(C++F) -DLD $(COMPLEX_IO_DEFINES) -c $(LIBSTD)/cinst.cc -o ldcomio.o

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

